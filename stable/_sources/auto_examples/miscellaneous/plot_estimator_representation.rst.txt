
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/miscellaneous/plot_estimator_representation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_miscellaneous_plot_estimator_representation.py>`
        to download the full example code or to run this example in your browser via JupyterLite or Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_miscellaneous_plot_estimator_representation.py:


===========================================
Displaying estimators and complex pipelines
===========================================

This example illustrates different ways estimators and pipelines can be
displayed.

.. GENERATED FROM PYTHON SOURCE LINES 9-17

.. code-block:: default


    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import OneHotEncoder, StandardScaler
    from sklearn.impute import SimpleImputer
    from sklearn.compose import make_column_transformer
    from sklearn.linear_model import LogisticRegression



.. GENERATED FROM PYTHON SOURCE LINES 18-24

Compact text representation
---------------------------

Estimators will only show the parameters that have been set to non-default
values when displayed as a string. This reduces the visual noise and makes it
easier to spot what the differences are when comparing instances.

.. GENERATED FROM PYTHON SOURCE LINES 24-28

.. code-block:: default


    lr = LogisticRegression(penalty="l1")
    print(lr)


.. GENERATED FROM PYTHON SOURCE LINES 29-37

Rich HTML representation
------------------------
In notebooks estimators and pipelines will use a rich HTML representation.
This is particularly useful to summarise the
structure of pipelines and other composite estimators, with interactivity to
provide detail.  Click on the example image below to expand Pipeline
elements.  See :ref:`visualizing_composite_estimators` for how you can use
this feature.

.. GENERATED FROM PYTHON SOURCE LINES 37-51

.. code-block:: default


    num_proc = make_pipeline(SimpleImputer(strategy="median"), StandardScaler())

    cat_proc = make_pipeline(
        SimpleImputer(strategy="constant", fill_value="missing"),
        OneHotEncoder(handle_unknown="ignore"),
    )

    preprocessor = make_column_transformer(
        (num_proc, ("feat1", "feat3")), (cat_proc, ("feat0", "feat2"))
    )

    clf = make_pipeline(preprocessor, LogisticRegression())
    clf


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_miscellaneous_plot_estimator_representation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/miscellaneous/plot_estimator_representation.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: lite-badge

      .. image:: images/jupyterlite_badge_logo.svg
        :target: ../lite/lab/?path=auto_examples/miscellaneous/plot_estimator_representation.ipynb
        :alt: Launch JupyterLite
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_estimator_representation.py <plot_estimator_representation.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_estimator_representation.ipynb <plot_estimator_representation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
