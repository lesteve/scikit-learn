Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_hastie_10_2", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "faq", "getting_started", "glossary", "governance", "inspection", "install", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.metaestimators.if_delegate_has_method", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_hastie_10_2.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.metaestimators.if_delegate_has_method.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Ensemble methods", "Discrete versus Real AdaBoost", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping of Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Gaussian process regression (GPR) on Mauna Loa CO2 data", "Gaussian process regression (GPR) with noise-level estimation", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "Lasso and Elastic Net for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Plot Ridge coefficients as a function of the L2 regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Multioutput methods", "Classifier Chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "SVM-Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensemble methods", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.if_delegate_has_method", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.2", "Version 1.3.0"], "terms": {"thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 323, 324, 325, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 382, 383, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 432, 433, 434, 435, 437, 439, 440, 443, 446, 447, 448, 449, 451, 452, 453, 455, 458, 459, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 649, 650, 651, 652, 653, 654, 656, 657, 659, 662, 663, 664, 666, 667, 668, 670, 671, 672, 673, 675, 676, 677, 678, 679, 681, 685, 686, 687, 688, 689, 690, 691, 692, 697, 703, 704, 705, 706, 707, 708, 710, 711, 712, 714, 717, 718, 723, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 867, 868, 873, 874, 876, 878, 879, 884, 886, 891, 892, 894, 897, 898, 899, 901, 902, 905, 906, 915, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 954, 955, 957, 960, 961, 962, 963, 964, 965, 966, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "wa": [0, 4, 8, 13, 15, 36, 65, 73, 78, 83, 115, 118, 144, 151, 156, 203, 227, 229, 231, 233, 235, 241, 242, 270, 278, 280, 281, 285, 289, 290, 312, 318, 319, 323, 332, 334, 335, 337, 341, 342, 350, 353, 356, 358, 359, 362, 365, 366, 370, 374, 391, 392, 396, 400, 404, 407, 410, 419, 424, 465, 473, 485, 486, 488, 490, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 535, 536, 538, 540, 541, 552, 577, 580, 591, 600, 601, 604, 605, 606, 608, 614, 615, 635, 636, 717, 744, 745, 746, 749, 750, 760, 771, 773, 785, 795, 821, 822, 840, 844, 850, 851, 853, 855, 856, 857, 858, 878, 879, 898, 919, 920, 921, 930, 931, 934, 937, 941, 944, 947, 951, 957, 965, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "start": [0, 4, 7, 10, 12, 24, 49, 53, 59, 62, 78, 88, 98, 104, 109, 111, 130, 133, 140, 142, 152, 156, 159, 160, 168, 179, 180, 181, 187, 197, 199, 203, 211, 224, 235, 243, 253, 284, 288, 310, 318, 319, 323, 324, 325, 326, 330, 337, 338, 339, 341, 342, 343, 348, 350, 353, 359, 362, 366, 367, 371, 372, 374, 391, 393, 400, 404, 406, 483, 488, 560, 567, 582, 595, 603, 609, 616, 618, 626, 627, 628, 640, 644, 730, 731, 744, 745, 746, 749, 750, 760, 790, 791, 792, 794, 796, 804, 889, 915, 920, 927, 930, 935, 936, 945, 952, 955, 957, 965, 966, 975, 977, 980, 982, 984, 985, 986, 987, 988], "2007": [0, 34, 167, 332, 362, 371, 391, 402, 404, 410, 412, 516, 606, 641, 667, 683, 686, 707, 708, 742, 923, 927, 929, 931], "googl": [0, 16, 348, 362, 393, 950, 962, 972], "summer": [0, 4, 44, 972], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 323, 324, 331, 335, 336, 338, 340, 341, 346, 348, 350, 351, 353, 356, 358, 361, 362, 369, 370, 393, 394, 397, 399, 409, 446, 476, 480, 481, 487, 488, 492, 493, 495, 496, 498, 516, 522, 531, 532, 535, 536, 596, 597, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 613, 614, 615, 632, 633, 635, 636, 776, 777, 778, 815, 822, 899, 928, 932, 941, 943, 945, 946, 951, 952, 954, 955, 958, 966, 972, 974, 975], "david": [0, 2, 33, 52, 74, 158, 181, 236, 238, 278, 310, 311, 312, 332, 362, 369, 372, 412, 482, 486, 517, 518, 572, 573, 578, 674, 744, 844, 921, 927, 935, 944, 955, 972, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987], "cournapeau": [0, 2, 972, 975], "later": [0, 11, 49, 104, 112, 135, 152, 156, 158, 266, 312, 319, 343, 348, 349, 353, 356, 794, 817, 818, 826, 828, 941, 961, 966, 975, 978, 980, 984], "year": [0, 4, 121, 140, 150, 151, 152, 179, 180, 197, 334, 336, 348, 366, 370, 372, 748, 753, 755, 827, 927, 931, 952, 955, 964], "matthieu": [0, 2, 972, 976, 987], "brucher": [0, 2, 972], "work": [0, 4, 9, 16, 29, 40, 41, 44, 48, 62, 71, 102, 108, 121, 133, 141, 142, 150, 151, 152, 168, 196, 221, 223, 233, 259, 260, 281, 283, 284, 300, 311, 312, 319, 324, 325, 326, 331, 332, 335, 337, 338, 339, 340, 341, 342, 343, 345, 349, 350, 351, 353, 358, 359, 360, 362, 363, 364, 367, 369, 370, 371, 374, 375, 376, 377, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 410, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 458, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 645, 658, 691, 723, 727, 728, 729, 730, 737, 744, 745, 746, 749, 750, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 835, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 884, 888, 920, 921, 923, 925, 926, 927, 928, 930, 931, 933, 934, 937, 938, 941, 944, 945, 951, 952, 955, 957, 958, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "part": [0, 28, 32, 56, 65, 75, 102, 107, 111, 116, 123, 124, 125, 126, 130, 140, 148, 158, 224, 230, 232, 249, 268, 275, 278, 312, 325, 332, 334, 337, 339, 343, 345, 349, 350, 353, 362, 366, 367, 369, 370, 372, 399, 443, 444, 445, 471, 481, 487, 492, 524, 534, 535, 536, 563, 575, 740, 813, 830, 832, 833, 834, 835, 836, 837, 838, 920, 921, 923, 928, 932, 950, 951, 952, 953, 955, 959, 966, 968, 972, 980, 981, 983, 985, 987], "hi": [0, 363, 931, 966], "thesi": [0, 334, 362, 369], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 23, 24, 25, 33, 35, 44, 45, 49, 52, 53, 55, 61, 62, 65, 68, 69, 71, 73, 74, 75, 78, 80, 85, 87, 90, 93, 94, 102, 105, 107, 108, 111, 113, 114, 116, 118, 129, 130, 132, 133, 135, 139, 140, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 167, 168, 170, 174, 179, 180, 181, 182, 183, 184, 187, 196, 197, 206, 207, 208, 211, 212, 213, 216, 218, 219, 224, 226, 229, 231, 232, 233, 235, 236, 237, 238, 240, 241, 244, 245, 249, 250, 252, 253, 259, 260, 262, 271, 273, 274, 275, 278, 280, 281, 282, 284, 285, 289, 291, 298, 306, 310, 311, 312, 314, 318, 319, 323, 324, 325, 330, 331, 332, 333, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 388, 391, 392, 393, 394, 395, 397, 398, 399, 402, 412, 413, 414, 419, 422, 425, 443, 446, 453, 458, 459, 461, 473, 484, 486, 488, 490, 491, 492, 494, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 538, 541, 552, 556, 559, 560, 561, 580, 582, 583, 584, 586, 593, 594, 595, 597, 598, 599, 601, 603, 605, 608, 609, 611, 613, 615, 616, 618, 619, 624, 625, 626, 629, 630, 634, 635, 636, 646, 649, 653, 662, 668, 670, 675, 677, 678, 683, 684, 687, 689, 691, 703, 705, 706, 730, 732, 734, 737, 741, 743, 744, 745, 746, 749, 750, 752, 760, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 790, 791, 792, 794, 795, 796, 798, 799, 800, 805, 813, 815, 821, 822, 826, 827, 832, 833, 835, 836, 837, 838, 839, 840, 842, 843, 844, 847, 848, 849, 852, 855, 857, 862, 866, 868, 884, 899, 920, 921, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 941, 942, 943, 944, 945, 946, 947, 952, 954, 955, 957, 964, 965, 966, 969, 972, 973, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "2010": [0, 43, 62, 72, 152, 240, 241, 359, 362, 364, 366, 367, 375, 425, 486, 654, 658, 669, 670, 689, 773, 805, 806, 923, 927, 931, 935, 945, 950, 972], "fabian": [0, 2, 166, 184, 200, 265, 972, 973, 974, 975, 976, 978, 979, 981], "pedregosa": [0, 2, 166, 184, 200, 265, 972, 973, 974, 975, 976, 978], "gael": [0, 1, 12, 29, 35, 36, 42, 48, 49, 61, 62, 75, 87, 91, 168, 169, 200, 211, 223, 950, 952, 955, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "varoquaux": [0, 1, 12, 28, 29, 35, 36, 41, 42, 47, 48, 49, 61, 62, 67, 75, 80, 81, 87, 91, 92, 162, 168, 169, 176, 177, 200, 202, 209, 211, 223, 275, 302, 303, 351, 950, 955, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "alexandr": [0, 1, 2, 22, 23, 27, 38, 43, 50, 62, 85, 87, 93, 164, 166, 167, 168, 170, 172, 173, 206, 209, 241, 248, 265, 351, 955, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "gramfort": [0, 1, 22, 23, 27, 38, 43, 50, 62, 85, 87, 93, 164, 166, 167, 168, 170, 172, 173, 206, 209, 241, 248, 265, 351, 955, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986], "vincent": [0, 2, 43, 62, 138, 142, 955, 972, 974, 976, 977, 979, 982, 987, 988], "michel": [0, 2, 43, 62, 972, 974, 975, 977, 979, 986, 987], "inria": [0, 5, 9, 27, 33, 48, 50, 52, 69, 75, 141, 158, 164, 166, 170, 172, 173, 184, 200, 201, 206, 209, 236, 238, 241, 248, 265, 278, 306, 310, 311, 312, 608, 949, 972], "took": [0, 38, 243], "leadership": 0, "made": [0, 74, 80, 90, 121, 142, 151, 152, 179, 197, 227, 239, 281, 298, 315, 323, 332, 334, 337, 341, 350, 351, 362, 370, 374, 394, 397, 399, 409, 446, 453, 538, 539, 541, 580, 581, 606, 615, 635, 636, 684, 732, 746, 749, 750, 760, 764, 765, 766, 785, 788, 789, 932, 937, 947, 951, 955, 963, 965, 972, 973, 974, 975, 976, 979, 981, 982, 985, 986], "first": [0, 4, 5, 7, 8, 11, 16, 23, 24, 27, 28, 29, 35, 51, 53, 56, 59, 60, 61, 62, 64, 65, 66, 69, 73, 77, 78, 80, 81, 82, 90, 94, 100, 104, 105, 106, 107, 108, 110, 112, 115, 118, 119, 120, 121, 129, 130, 133, 135, 136, 137, 140, 141, 142, 143, 147, 150, 151, 152, 154, 156, 158, 160, 162, 168, 175, 176, 177, 180, 181, 187, 188, 193, 200, 203, 210, 211, 213, 214, 216, 218, 219, 223, 227, 230, 235, 237, 238, 242, 244, 246, 247, 252, 253, 255, 256, 258, 262, 263, 264, 268, 270, 273, 275, 278, 281, 282, 288, 291, 294, 295, 298, 300, 310, 311, 312, 314, 315, 318, 319, 324, 325, 331, 332, 334, 335, 336, 339, 341, 342, 343, 345, 348, 350, 359, 360, 362, 365, 366, 367, 369, 370, 371, 372, 374, 394, 397, 400, 409, 410, 414, 422, 433, 437, 438, 440, 441, 442, 444, 447, 450, 452, 454, 458, 459, 460, 478, 483, 484, 488, 491, 503, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 532, 534, 538, 539, 540, 541, 543, 560, 561, 567, 571, 574, 581, 582, 583, 584, 596, 602, 609, 616, 618, 624, 626, 638, 645, 648, 649, 650, 652, 662, 666, 685, 712, 713, 731, 741, 744, 745, 749, 750, 751, 753, 758, 760, 767, 776, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 793, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 813, 821, 825, 826, 827, 829, 836, 837, 849, 852, 855, 856, 857, 858, 860, 862, 867, 868, 869, 886, 888, 892, 898, 902, 905, 917, 920, 921, 925, 926, 927, 928, 930, 931, 932, 933, 934, 938, 941, 942, 945, 946, 947, 955, 957, 963, 964, 965, 966, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 985, 986, 987], "public": [0, 72, 331, 337, 339, 341, 342, 348, 349, 350, 351, 366, 369, 614, 621, 635, 636, 642, 927, 935, 972, 977, 978, 983, 984, 985], "releas": [0, 324, 326, 335, 337, 338, 340, 345, 348, 350, 370, 394, 397, 414, 417, 440, 441, 446, 451, 454, 462, 465, 474, 488, 511, 512, 514, 515, 517, 549, 552, 578, 580, 584, 590, 596, 598, 602, 608, 619, 630, 638, 667, 697, 737, 746, 749, 750, 760, 774, 790, 792, 809, 813, 818, 821, 822, 823, 827, 828, 844, 845, 847, 852, 856, 879, 899, 947, 949, 972, 973, 974, 975, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "februari": [0, 364, 423, 931, 973, 977], "1st": [0, 4, 55, 81, 143, 180, 278, 826, 827], "sinc": [0, 4, 5, 11, 23, 25, 33, 45, 49, 61, 64, 65, 66, 86, 108, 123, 130, 133, 135, 140, 151, 152, 156, 161, 179, 181, 196, 207, 211, 212, 223, 226, 231, 235, 237, 238, 244, 245, 253, 255, 283, 284, 292, 295, 298, 306, 310, 311, 312, 319, 324, 332, 335, 337, 338, 339, 341, 342, 345, 348, 349, 350, 353, 362, 363, 364, 365, 366, 367, 369, 370, 372, 374, 379, 388, 392, 396, 397, 399, 400, 403, 406, 419, 446, 476, 483, 486, 487, 488, 489, 490, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 517, 519, 538, 539, 541, 552, 560, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 588, 600, 601, 604, 605, 606, 608, 609, 614, 615, 616, 618, 621, 624, 625, 626, 629, 642, 649, 657, 659, 684, 690, 717, 738, 749, 750, 776, 777, 778, 779, 783, 784, 785, 786, 787, 790, 795, 798, 805, 806, 813, 821, 837, 838, 842, 843, 847, 849, 850, 851, 852, 853, 855, 856, 857, 858, 878, 881, 884, 892, 920, 923, 924, 925, 927, 928, 932, 933, 934, 935, 937, 939, 941, 945, 946, 947, 955, 957, 966, 972, 973, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "sever": [0, 4, 9, 12, 23, 28, 33, 51, 52, 56, 68, 82, 102, 109, 116, 118, 121, 130, 135, 140, 141, 148, 151, 156, 168, 179, 198, 199, 210, 223, 230, 235, 240, 255, 269, 273, 283, 310, 311, 323, 331, 332, 334, 337, 339, 342, 348, 350, 359, 361, 362, 363, 366, 368, 369, 370, 372, 397, 399, 414, 437, 449, 458, 459, 488, 505, 506, 509, 510, 513, 514, 515, 520, 538, 539, 541, 560, 595, 596, 602, 638, 639, 640, 641, 642, 643, 744, 745, 746, 749, 750, 760, 776, 777, 783, 784, 785, 786, 787, 807, 808, 815, 831, 855, 856, 857, 858, 870, 899, 920, 923, 928, 931, 932, 934, 939, 941, 945, 947, 948, 950, 951, 954, 955, 957, 964, 965, 966, 972, 973, 974, 975, 976, 977, 979, 980, 981, 985], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 22, 23, 24, 25, 33, 35, 38, 39, 41, 42, 43, 46, 49, 52, 55, 57, 59, 60, 65, 71, 73, 78, 80, 82, 83, 90, 92, 99, 105, 107, 108, 109, 111, 129, 130, 133, 135, 136, 140, 141, 142, 147, 150, 151, 152, 153, 154, 156, 158, 179, 180, 181, 197, 203, 206, 208, 213, 215, 216, 222, 223, 224, 226, 229, 235, 236, 238, 241, 242, 249, 253, 255, 259, 260, 273, 278, 280, 282, 283, 288, 289, 290, 295, 301, 303, 310, 311, 318, 319, 323, 324, 325, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 353, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 437, 442, 444, 445, 446, 458, 459, 464, 473, 474, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 635, 637, 638, 639, 640, 641, 642, 649, 654, 655, 662, 665, 670, 675, 680, 685, 691, 705, 706, 707, 708, 731, 734, 735, 739, 742, 744, 745, 746, 749, 750, 751, 752, 757, 760, 764, 769, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 835, 836, 837, 838, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 867, 869, 871, 873, 884, 906, 920, 921, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 941, 943, 944, 945, 946, 947, 948, 951, 952, 955, 957, 958, 961, 962, 964, 965, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "appear": [0, 8, 42, 44, 102, 151, 230, 232, 233, 259, 260, 268, 270, 274, 288, 310, 311, 312, 332, 335, 337, 342, 350, 364, 367, 438, 439, 505, 517, 518, 529, 560, 577, 578, 580, 647, 652, 662, 666, 668, 738, 747, 764, 783, 784, 785, 786, 787, 849, 852, 886, 927, 933, 937, 972, 980, 984, 985], "follow": [0, 4, 7, 18, 24, 29, 33, 41, 50, 52, 58, 62, 65, 66, 83, 85, 95, 99, 102, 111, 115, 128, 140, 146, 150, 151, 152, 153, 158, 160, 167, 168, 177, 179, 180, 194, 197, 207, 213, 215, 227, 235, 244, 245, 273, 280, 281, 283, 284, 285, 295, 306, 310, 311, 312, 314, 318, 319, 323, 324, 331, 332, 334, 335, 336, 337, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 353, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 384, 392, 394, 396, 397, 398, 399, 403, 411, 413, 414, 415, 418, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 465, 484, 488, 490, 491, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 520, 531, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 577, 578, 579, 580, 581, 583, 584, 596, 602, 608, 609, 620, 621, 630, 642, 644, 649, 655, 659, 663, 668, 765, 785, 790, 791, 792, 794, 796, 798, 799, 800, 807, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 836, 845, 847, 848, 855, 856, 857, 858, 862, 863, 883, 899, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 950, 951, 952, 957, 966, 969, 972, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 128, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 151, 152, 153, 156, 157, 158, 159, 161, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 193, 194, 195, 196, 197, 199, 200, 201, 202, 204, 206, 210, 211, 212, 213, 215, 217, 221, 222, 223, 225, 227, 230, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 290, 292, 294, 295, 297, 298, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 315, 316, 318, 319, 324, 325, 331, 332, 334, 335, 337, 338, 339, 342, 343, 348, 349, 350, 353, 354, 355, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 385, 388, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 408, 409, 412, 414, 416, 417, 419, 420, 421, 422, 424, 425, 426, 432, 433, 434, 435, 443, 444, 446, 447, 454, 455, 456, 457, 460, 462, 466, 467, 468, 469, 475, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 500, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 527, 531, 533, 534, 537, 543, 544, 552, 553, 557, 558, 560, 562, 567, 577, 578, 579, 580, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 642, 643, 644, 649, 653, 654, 655, 659, 663, 666, 667, 671, 672, 673, 675, 677, 680, 683, 684, 685, 686, 690, 692, 693, 694, 695, 697, 699, 700, 701, 702, 703, 705, 706, 717, 718, 724, 730, 732, 734, 735, 737, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 807, 812, 813, 814, 819, 820, 821, 822, 823, 824, 826, 827, 828, 835, 839, 840, 841, 842, 843, 844, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 873, 878, 882, 883, 884, 886, 887, 888, 889, 892, 894, 895, 897, 898, 899, 905, 920, 921, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 937, 938, 941, 942, 944, 946, 947, 949, 950, 954, 957, 958, 961, 962, 964, 965, 970, 972, 973, 974, 975, 977, 978, 979, 982, 984, 985, 987], "month": [0, 4, 140, 332, 337, 341, 351, 972], "cycl": [0, 4, 38, 40, 46, 57, 85, 164, 222, 227, 242, 244, 283, 284, 337, 341, 361, 367, 529, 530, 577, 749, 750, 863, 920, 921, 980, 981, 982, 984, 985, 986, 987], "thrive": [0, 337], "intern": [0, 24, 65, 75, 90, 112, 123, 136, 146, 179, 253, 255, 289, 312, 319, 324, 332, 334, 339, 343, 346, 348, 350, 356, 359, 362, 366, 367, 369, 370, 372, 373, 388, 390, 395, 415, 418, 461, 484, 485, 496, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 543, 544, 560, 561, 588, 590, 593, 596, 602, 618, 626, 628, 646, 658, 680, 683, 707, 708, 732, 788, 789, 804, 805, 806, 827, 842, 843, 845, 847, 848, 849, 852, 855, 856, 857, 858, 899, 927, 928, 929, 931, 934, 937, 943, 946, 947, 955, 972, 975, 981, 983, 984, 985, 986, 987, 988], "ha": [0, 4, 5, 8, 11, 12, 15, 23, 27, 31, 33, 40, 46, 51, 52, 55, 68, 73, 74, 78, 85, 104, 107, 109, 111, 115, 120, 132, 135, 140, 141, 142, 147, 151, 152, 153, 156, 172, 176, 179, 180, 181, 185, 196, 197, 199, 206, 210, 212, 216, 219, 221, 222, 224, 226, 227, 230, 233, 234, 235, 238, 239, 241, 246, 247, 252, 259, 260, 261, 263, 270, 273, 274, 276, 278, 280, 281, 282, 283, 284, 287, 290, 298, 303, 305, 310, 318, 319, 323, 324, 325, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 345, 346, 348, 349, 350, 351, 356, 359, 360, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 374, 385, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 411, 412, 413, 415, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 443, 444, 447, 448, 458, 459, 466, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 569, 577, 578, 579, 580, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 635, 637, 638, 639, 640, 641, 642, 645, 661, 663, 670, 690, 712, 723, 727, 740, 744, 745, 746, 747, 749, 750, 751, 752, 753, 760, 764, 767, 772, 773, 776, 777, 779, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 808, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 862, 866, 867, 868, 886, 892, 900, 916, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 941, 943, 944, 945, 946, 947, 952, 955, 957, 961, 964, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "been": [0, 4, 9, 15, 24, 40, 49, 55, 74, 90, 135, 140, 142, 151, 203, 206, 208, 213, 233, 235, 241, 280, 281, 282, 283, 284, 289, 319, 324, 331, 332, 334, 335, 336, 337, 339, 341, 343, 345, 346, 348, 349, 350, 351, 356, 359, 360, 362, 364, 366, 367, 369, 372, 385, 388, 419, 421, 422, 424, 428, 437, 473, 484, 486, 499, 500, 517, 518, 531, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 583, 584, 608, 609, 616, 618, 623, 625, 626, 627, 628, 670, 740, 746, 749, 750, 752, 760, 772, 773, 797, 844, 847, 921, 923, 924, 926, 927, 928, 931, 932, 934, 937, 941, 943, 945, 946, 952, 955, 957, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "lead": [0, 7, 23, 28, 33, 48, 56, 66, 108, 111, 132, 133, 151, 152, 153, 158, 168, 170, 179, 183, 211, 235, 236, 238, 242, 258, 259, 270, 273, 275, 278, 282, 298, 311, 314, 319, 323, 324, 331, 336, 345, 346, 349, 350, 356, 359, 362, 364, 366, 367, 368, 369, 371, 402, 412, 415, 418, 446, 465, 477, 485, 488, 489, 490, 493, 497, 501, 507, 508, 509, 510, 513, 514, 515, 516, 556, 580, 596, 597, 600, 602, 603, 604, 610, 611, 612, 613, 629, 641, 645, 695, 744, 749, 750, 776, 788, 789, 793, 812, 819, 839, 840, 845, 847, 855, 856, 857, 858, 920, 925, 927, 928, 930, 931, 932, 934, 935, 937, 939, 941, 944, 945, 947, 955, 957, 975, 977, 979, 980, 981, 982, 984, 985, 987], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 24, 27, 28, 29, 31, 33, 35, 36, 40, 41, 42, 43, 44, 46, 48, 49, 52, 53, 55, 56, 57, 58, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 79, 82, 83, 85, 88, 90, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 121, 128, 129, 130, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 152, 153, 154, 156, 158, 160, 161, 162, 164, 167, 168, 170, 171, 172, 173, 174, 175, 177, 180, 181, 182, 183, 185, 187, 188, 196, 197, 198, 202, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 226, 227, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 252, 253, 255, 258, 259, 260, 261, 262, 263, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 289, 290, 295, 296, 298, 302, 303, 304, 306, 307, 308, 310, 311, 312, 314, 316, 317, 318, 319, 323, 324, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 383, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 701, 702, 703, 704, 705, 706, 707, 708, 711, 713, 714, 715, 716, 719, 720, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 878, 879, 880, 881, 882, 883, 884, 886, 887, 894, 896, 897, 898, 899, 900, 901, 902, 905, 915, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 944, 945, 946, 947, 948, 950, 951, 952, 954, 955, 957, 958, 959, 961, 962, 963, 966, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "decis": [0, 4, 15, 23, 25, 28, 31, 51, 53, 55, 97, 98, 101, 102, 104, 116, 139, 151, 161, 162, 171, 188, 189, 192, 193, 206, 207, 209, 216, 238, 256, 261, 264, 268, 273, 274, 275, 278, 286, 294, 295, 296, 297, 298, 299, 300, 304, 307, 308, 310, 323, 326, 333, 334, 337, 350, 360, 362, 369, 388, 419, 450, 454, 469, 486, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 543, 544, 581, 582, 583, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 648, 650, 652, 653, 657, 670, 675, 676, 684, 688, 689, 691, 705, 731, 737, 738, 741, 746, 749, 750, 760, 774, 776, 777, 779, 790, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 925, 931, 932, 933, 934, 935, 937, 938, 939, 944, 945, 946, 949, 951, 952, 953, 955, 964, 968, 972, 973, 974, 975, 976, 977, 978, 979, 981, 982, 985, 986, 988], "make": [0, 4, 7, 8, 11, 14, 16, 20, 23, 24, 25, 35, 36, 39, 40, 51, 56, 57, 62, 67, 90, 108, 111, 116, 130, 133, 135, 140, 143, 150, 151, 152, 153, 158, 165, 168, 171, 172, 173, 175, 179, 180, 181, 185, 197, 200, 208, 210, 212, 213, 221, 223, 226, 227, 230, 235, 237, 238, 244, 245, 246, 262, 270, 273, 274, 284, 298, 308, 310, 311, 312, 319, 323, 324, 325, 326, 331, 332, 335, 336, 338, 339, 340, 342, 343, 345, 348, 350, 353, 356, 359, 360, 362, 363, 364, 366, 367, 369, 370, 371, 372, 374, 391, 392, 393, 394, 396, 397, 399, 401, 402, 403, 408, 409, 410, 412, 438, 453, 464, 465, 472, 473, 477, 482, 484, 491, 501, 502, 505, 506, 533, 534, 557, 558, 581, 599, 605, 606, 621, 641, 645, 686, 691, 717, 718, 730, 744, 745, 746, 748, 751, 757, 761, 762, 763, 765, 766, 770, 771, 778, 779, 782, 815, 824, 827, 828, 831, 835, 837, 838, 839, 840, 853, 861, 867, 868, 878, 884, 890, 891, 892, 917, 920, 921, 923, 925, 927, 928, 930, 931, 932, 933, 934, 936, 937, 938, 939, 941, 944, 945, 946, 947, 949, 950, 951, 952, 954, 955, 957, 962, 964, 966, 969, 972, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988], "process": [0, 4, 5, 24, 27, 28, 41, 42, 43, 44, 46, 61, 64, 66, 68, 72, 74, 86, 87, 89, 108, 115, 123, 124, 125, 126, 150, 158, 181, 213, 221, 222, 227, 235, 237, 238, 247, 273, 282, 288, 311, 312, 314, 323, 324, 325, 326, 332, 336, 337, 339, 341, 343, 346, 348, 349, 350, 356, 362, 363, 364, 366, 367, 368, 369, 370, 371, 375, 398, 399, 425, 446, 454, 473, 484, 485, 486, 487, 488, 511, 512, 513, 538, 539, 541, 560, 561, 563, 564, 565, 567, 568, 569, 572, 573, 575, 577, 582, 583, 589, 593, 614, 622, 635, 636, 653, 672, 690, 730, 744, 746, 749, 750, 760, 769, 770, 771, 780, 781, 797, 811, 815, 817, 818, 819, 828, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 897, 899, 920, 923, 927, 931, 934, 941, 943, 945, 947, 949, 950, 951, 952, 953, 955, 957, 958, 965, 966, 968, 972, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986], "structur": [0, 3, 9, 14, 16, 19, 32, 39, 40, 75, 96, 114, 134, 148, 199, 203, 208, 227, 230, 241, 258, 278, 281, 284, 286, 298, 313, 315, 323, 332, 334, 337, 339, 342, 348, 350, 351, 353, 359, 362, 364, 365, 366, 367, 369, 370, 371, 372, 392, 393, 396, 400, 401, 402, 403, 404, 407, 412, 413, 422, 446, 453, 454, 458, 461, 463, 464, 471, 480, 485, 491, 494, 513, 560, 561, 562, 566, 567, 568, 639, 646, 659, 663, 774, 796, 801, 828, 839, 840, 843, 855, 856, 857, 858, 861, 883, 884, 902, 905, 928, 930, 931, 934, 936, 937, 941, 944, 947, 951, 952, 960, 965, 966, 972, 973, 975, 976, 978, 982], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 296, 297, 298, 303, 304, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 349, 350, 351, 352, 353, 356, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 722, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 884, 886, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 912, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 957, 959, 960, 961, 962, 963, 964, 965, 966, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "laid": [0, 150, 337], "out": [0, 3, 4, 7, 9, 12, 14, 16, 24, 27, 36, 46, 65, 93, 97, 103, 105, 112, 126, 148, 150, 153, 179, 181, 187, 197, 221, 223, 233, 235, 238, 243, 247, 252, 278, 283, 290, 292, 294, 295, 298, 310, 322, 332, 334, 335, 337, 339, 340, 341, 343, 348, 350, 362, 365, 367, 369, 372, 378, 386, 387, 393, 394, 396, 397, 399, 422, 432, 433, 434, 435, 449, 465, 466, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 538, 539, 541, 554, 557, 558, 584, 589, 590, 591, 592, 601, 605, 616, 618, 623, 625, 626, 638, 639, 642, 651, 676, 690, 691, 746, 748, 749, 750, 751, 753, 754, 755, 756, 760, 774, 783, 784, 785, 786, 787, 792, 797, 800, 804, 805, 806, 814, 818, 825, 836, 839, 840, 862, 893, 895, 900, 921, 925, 926, 930, 931, 932, 934, 939, 941, 952, 953, 954, 955, 961, 964, 966, 968, 972, 974, 976, 978, 980, 981, 984, 985, 988], "document": [0, 3, 14, 17, 28, 41, 47, 52, 65, 67, 80, 81, 83, 85, 115, 160, 162, 176, 177, 194, 210, 213, 219, 236, 270, 291, 303, 312, 323, 324, 325, 326, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 345, 348, 350, 351, 353, 356, 359, 361, 362, 367, 370, 373, 395, 397, 398, 399, 400, 403, 407, 414, 438, 439, 449, 451, 461, 471, 473, 486, 494, 514, 538, 539, 540, 541, 544, 554, 581, 589, 593, 608, 609, 616, 618, 623, 624, 625, 626, 646, 653, 655, 661, 667, 686, 707, 708, 718, 727, 728, 729, 740, 742, 746, 749, 750, 760, 770, 772, 775, 778, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 809, 820, 847, 852, 863, 866, 868, 881, 897, 920, 927, 929, 931, 932, 933, 934, 935, 939, 945, 948, 949, 950, 955, 959, 964, 966, 973, 974, 978], "peopl": [0, 6, 151, 214, 238, 310, 324, 325, 332, 334, 336, 337, 341, 368, 443, 444, 591, 785, 951, 962], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 29, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 61, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 78, 83, 85, 87, 90, 93, 96, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 117, 118, 119, 120, 129, 130, 132, 133, 135, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 183, 188, 190, 197, 199, 200, 201, 202, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 219, 222, 223, 224, 226, 229, 230, 232, 233, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 255, 258, 259, 263, 266, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 284, 285, 287, 289, 290, 291, 292, 296, 298, 300, 302, 306, 307, 310, 311, 312, 314, 318, 319, 323, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 349, 350, 351, 353, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 382, 384, 385, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 438, 439, 443, 445, 446, 448, 450, 451, 452, 453, 454, 458, 459, 460, 462, 465, 466, 467, 468, 469, 470, 473, 474, 476, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 654, 655, 657, 659, 662, 663, 665, 666, 667, 668, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 689, 690, 692, 694, 695, 697, 699, 700, 702, 703, 705, 706, 710, 711, 712, 714, 716, 717, 718, 722, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 749, 750, 752, 753, 758, 760, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 871, 872, 873, 876, 878, 883, 884, 885, 888, 889, 892, 894, 895, 897, 899, 902, 905, 906, 910, 911, 912, 915, 917, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 950, 951, 952, 954, 955, 957, 958, 959, 960, 961, 963, 964, 965, 966, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "current": [0, 8, 42, 140, 151, 197, 273, 280, 324, 325, 332, 335, 337, 338, 339, 342, 346, 348, 350, 351, 358, 359, 361, 362, 366, 369, 370, 371, 372, 391, 400, 418, 419, 420, 421, 422, 423, 424, 425, 426, 482, 485, 491, 503, 504, 507, 508, 509, 510, 512, 514, 515, 516, 526, 541, 543, 560, 567, 576, 577, 596, 608, 617, 621, 625, 626, 627, 628, 737, 744, 745, 793, 797, 805, 806, 824, 835, 845, 855, 856, 857, 858, 861, 898, 906, 920, 925, 927, 931, 934, 935, 941, 952, 964, 980, 984, 986, 987, 988], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 18, 22, 25, 27, 31, 34, 35, 36, 38, 39, 40, 42, 43, 44, 48, 49, 52, 53, 54, 55, 56, 57, 59, 60, 62, 64, 65, 71, 72, 75, 77, 81, 82, 83, 85, 86, 87, 90, 91, 94, 95, 96, 98, 99, 101, 105, 107, 108, 110, 111, 112, 114, 115, 116, 117, 119, 126, 128, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 151, 152, 154, 156, 159, 160, 161, 163, 165, 167, 168, 169, 170, 171, 177, 179, 181, 185, 186, 188, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 206, 207, 210, 212, 213, 215, 221, 223, 224, 226, 230, 235, 236, 237, 238, 239, 242, 246, 248, 249, 253, 256, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 273, 276, 280, 282, 283, 284, 285, 288, 289, 295, 296, 297, 298, 299, 302, 303, 304, 305, 308, 310, 311, 312, 315, 316, 317, 318, 319, 323, 324, 325, 326, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 350, 351, 352, 353, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 370, 372, 374, 376, 382, 385, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 409, 410, 413, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 439, 446, 448, 450, 454, 460, 461, 469, 475, 476, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 522, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 635, 637, 638, 639, 640, 641, 642, 643, 650, 651, 652, 658, 661, 666, 670, 684, 690, 691, 707, 708, 728, 729, 744, 745, 746, 748, 749, 750, 755, 760, 764, 765, 770, 771, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 862, 865, 867, 868, 871, 884, 886, 915, 919, 920, 922, 923, 925, 927, 928, 929, 932, 933, 934, 935, 936, 938, 939, 941, 943, 944, 945, 946, 947, 951, 952, 955, 957, 961, 962, 964, 965, 966, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "mainten": [0, 337, 345, 348, 353, 355, 927, 952, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "j\u00e9r\u00e9mie": [0, 1, 980, 981, 982, 983, 984, 985, 986, 987, 988], "du": [0, 1, 2, 972, 973, 980, 981, 982, 983, 984, 985, 986, 987, 988], "boisberrang": [0, 1, 980, 981, 982, 983, 984, 985, 986, 987, 988], "jori": [0, 1, 979, 980, 981, 984, 985], "van": [0, 1, 331, 364, 419, 424, 484, 577, 642, 646, 921, 928, 931, 937, 955, 973, 974, 975, 976, 979, 980, 981, 983, 984, 985, 987, 988], "den": [0, 1, 973, 974, 979, 980, 981, 984, 985], "bossch": [0, 1, 979, 980, 981, 985], "lo\u00efc": [0, 1, 980, 983, 985, 986, 987], "est\u00e8v": [0, 1, 980, 983, 985, 986, 987], "thoma": [0, 1, 93, 206, 273, 324, 327, 351, 843, 927, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "j": [0, 1, 11, 16, 33, 34, 36, 39, 56, 72, 73, 74, 98, 102, 103, 113, 136, 147, 152, 191, 202, 214, 221, 234, 235, 240, 246, 257, 263, 266, 277, 318, 324, 331, 332, 334, 341, 343, 348, 359, 360, 362, 364, 366, 367, 369, 370, 372, 373, 388, 391, 395, 403, 404, 419, 424, 448, 463, 466, 467, 468, 470, 478, 481, 484, 486, 487, 488, 490, 491, 497, 509, 510, 543, 544, 582, 583, 587, 594, 595, 598, 599, 616, 617, 619, 630, 638, 639, 640, 642, 643, 644, 646, 655, 658, 660, 664, 666, 668, 671, 672, 673, 675, 704, 705, 707, 708, 723, 727, 737, 738, 739, 740, 777, 778, 785, 790, 791, 792, 794, 796, 797, 798, 799, 800, 801, 802, 819, 828, 855, 856, 920, 921, 925, 927, 928, 929, 931, 932, 933, 934, 935, 937, 938, 939, 943, 945, 946, 947, 949, 966, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987], "fan": [0, 1, 324, 351, 946, 980, 981, 982, 983, 984, 985, 986, 987, 988], "olivi": [0, 1, 14, 16, 33, 44, 56, 168, 179, 197, 200, 236, 238, 310, 311, 312, 351, 843, 944, 950, 952, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "grisel": [0, 1, 14, 16, 33, 44, 56, 168, 179, 197, 200, 236, 238, 310, 311, 312, 351, 950, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "yaroslav": [0, 1, 972, 973, 974, 975, 978, 979, 980, 981], "halchenko": [0, 1, 972, 973, 974, 975, 978, 979, 980, 981], "tim": [0, 1, 104, 117, 972, 977, 978, 981, 982, 983, 985, 987, 988], "head": [0, 1, 24, 65, 104, 117, 140, 151, 167, 168, 197, 219, 226, 280, 285, 337, 345, 367, 955, 977, 978, 987, 988], "nicola": [0, 1, 133, 277, 608, 927, 944, 972, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "hug": [0, 1, 133, 277, 949, 980, 981, 982, 983, 984, 985, 986], "adrin": [0, 1, 60, 307, 351, 980, 981, 982, 983, 984, 985, 986, 987, 988], "jalali": [0, 1, 60, 307, 351, 980, 981, 982, 983, 984, 985, 986, 987, 988], "julien": [0, 1, 608, 927, 955, 972, 975, 979, 980, 984, 985, 986, 987, 988], "jerphanion": [0, 1, 984, 985, 986, 987, 988], "guillaum": [0, 1, 5, 7, 66, 69, 90, 118, 135, 140, 141, 142, 144, 167, 168, 181, 200, 273, 955, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "lemaitr": [0, 1, 5, 7, 66, 69, 90, 118, 135, 140, 141, 142, 144, 167, 168, 181, 200, 273, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "christian": [0, 1, 18, 179, 180, 181, 197, 310, 332, 955, 966, 972, 973, 976, 979, 980, 982, 983, 984, 985, 986, 987, 988], "lorentzen": [0, 1, 179, 180, 181, 197, 982, 983, 984, 985, 986, 987, 988], "jan": [0, 1, 22, 23, 24, 25, 135, 136, 138, 139, 140, 141, 142, 144, 180, 212, 827, 972, 975, 976, 977, 978, 980, 981, 984, 988], "hendrik": [0, 1, 22, 23, 24, 25, 135, 136, 138, 139, 140, 141, 142, 144, 212, 972, 975, 976, 977, 978], "metzen": [0, 1, 22, 23, 24, 25, 135, 136, 138, 139, 140, 141, 142, 144, 212, 972, 975, 976, 977, 978], "andrea": [0, 1, 28, 68, 90, 103, 170, 211, 274, 275, 289, 306, 307, 351, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "mueller": [0, 1, 68, 90, 103, 170, 211, 289, 306, 307, 955, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "vlad": [0, 1, 85, 213, 271, 972, 973, 974, 975, 976, 977, 979, 980, 981], "nicula": [0, 1, 85, 213, 271, 972, 973, 974, 975, 976, 977, 979, 980, 981], "joel": [0, 1, 66, 351, 370, 485, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986], "nothman": [0, 1, 66, 351, 370, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986], "hanmin": [0, 1, 274, 979, 980, 981, 982, 983], "qin": [0, 1, 274, 334, 370, 979, 980, 981, 982, 983], "bertrand": [0, 1, 972, 978, 979, 984, 985], "thirion": [0, 1, 972, 978, 979, 985], "tom": [0, 1, 171, 187, 253, 255, 275, 276, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "dupr\u00e9": [0, 1, 275, 276, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987], "la": [0, 1, 171, 187, 253, 255, 275, 276, 334, 955, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "tour": [0, 1, 171, 187, 253, 255, 275, 276, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "nell": [0, 1, 35, 202, 209, 972, 973, 974, 975, 976, 977, 978, 979, 981, 984], "roman": [0, 1, 179, 197, 577, 861, 974, 979, 980, 981, 982, 983, 984, 985, 986], "yurchak": [0, 1, 179, 197, 370, 979, 980, 981, 982, 983, 984, 985, 986], "meekail": [0, 1, 986, 987, 988], "zain": [0, 1, 986, 987, 988], "pleas": [0, 16, 105, 112, 183, 211, 253, 263, 280, 281, 282, 283, 284, 285, 324, 331, 332, 335, 337, 338, 339, 341, 345, 348, 349, 350, 353, 356, 358, 361, 362, 369, 370, 400, 446, 517, 518, 581, 582, 583, 600, 601, 604, 605, 606, 614, 615, 749, 750, 771, 825, 836, 849, 852, 855, 856, 857, 858, 920, 931, 935, 941, 945, 946, 951, 952, 954, 957, 964, 966, 972, 975, 979, 980, 981, 982, 983, 984, 985, 986, 987], "do": [0, 4, 10, 23, 38, 56, 62, 68, 81, 89, 91, 92, 95, 103, 105, 107, 109, 111, 112, 118, 124, 130, 140, 146, 151, 152, 153, 176, 179, 197, 199, 201, 213, 227, 230, 233, 236, 238, 252, 253, 255, 259, 283, 292, 295, 298, 303, 306, 311, 312, 318, 319, 323, 324, 325, 332, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 350, 351, 360, 361, 362, 363, 364, 365, 366, 369, 370, 371, 400, 411, 453, 486, 488, 492, 494, 502, 505, 531, 532, 538, 539, 541, 595, 596, 602, 605, 606, 609, 616, 618, 626, 686, 712, 727, 731, 763, 766, 780, 781, 785, 812, 813, 815, 826, 828, 832, 833, 835, 836, 837, 838, 855, 856, 857, 858, 866, 905, 920, 923, 925, 927, 928, 931, 932, 934, 935, 939, 941, 946, 947, 951, 952, 955, 957, 964, 965, 966, 972, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "email": [0, 310, 337, 348, 370, 783, 933, 955], "directli": [0, 6, 18, 25, 41, 42, 51, 65, 104, 133, 143, 167, 179, 185, 197, 207, 240, 271, 273, 284, 312, 319, 323, 335, 337, 338, 339, 341, 343, 349, 350, 351, 359, 360, 362, 363, 364, 365, 366, 370, 372, 393, 402, 412, 414, 419, 424, 477, 517, 518, 519, 520, 547, 561, 570, 582, 593, 596, 597, 602, 603, 610, 611, 612, 613, 614, 627, 631, 634, 640, 723, 727, 730, 739, 740, 746, 749, 750, 760, 793, 807, 808, 809, 815, 825, 827, 829, 836, 899, 920, 927, 929, 934, 936, 938, 941, 946, 947, 952, 958, 961, 962, 972, 980, 981, 983, 984, 985], "ask": [0, 146, 147, 235, 326, 336, 337, 341, 342, 345, 350, 351, 371, 790, 791, 792, 794, 796, 798, 799, 800, 949, 954, 988], "assist": [0, 337, 348, 941, 955], "report": [0, 4, 8, 29, 64, 69, 130, 143, 167, 233, 243, 280, 287, 319, 332, 336, 338, 339, 340, 343, 345, 348, 350, 353, 356, 362, 366, 561, 599, 608, 614, 635, 636, 650, 663, 678, 679, 687, 732, 733, 736, 777, 786, 805, 806, 842, 860, 878, 927, 934, 951, 952, 954, 973, 976, 979, 980, 982, 983, 985, 987, 988], "issu": [0, 4, 23, 72, 78, 179, 197, 240, 324, 326, 331, 340, 341, 342, 345, 346, 348, 350, 351, 352, 353, 356, 358, 362, 364, 365, 370, 372, 399, 402, 412, 423, 432, 433, 434, 484, 489, 493, 523, 535, 536, 538, 539, 541, 561, 577, 641, 645, 718, 819, 824, 835, 874, 920, 921, 928, 934, 939, 941, 946, 951, 952, 954, 965, 966, 972, 974, 976, 977, 978, 979, 980, 981, 982, 984, 985, 987], "instead": [0, 4, 5, 6, 44, 49, 51, 52, 65, 90, 102, 106, 115, 130, 133, 135, 179, 181, 194, 197, 203, 227, 231, 232, 236, 237, 252, 258, 273, 280, 281, 282, 283, 284, 298, 300, 310, 312, 319, 323, 324, 331, 332, 335, 336, 337, 338, 339, 341, 342, 345, 346, 348, 349, 350, 356, 358, 362, 363, 365, 366, 367, 368, 369, 370, 371, 373, 374, 383, 388, 391, 392, 393, 395, 396, 397, 400, 406, 409, 415, 417, 432, 433, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 459, 460, 483, 485, 487, 489, 490, 491, 496, 497, 499, 500, 503, 504, 505, 506, 507, 508, 510, 512, 514, 515, 518, 520, 532, 533, 539, 540, 557, 558, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 577, 580, 582, 585, 588, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 620, 621, 622, 623, 626, 628, 629, 637, 640, 644, 649, 657, 695, 723, 727, 732, 744, 745, 746, 750, 758, 760, 765, 766, 781, 782, 791, 799, 805, 806, 809, 810, 811, 820, 821, 826, 828, 837, 838, 841, 848, 850, 852, 853, 855, 856, 857, 858, 860, 861, 873, 879, 884, 892, 906, 920, 921, 923, 927, 928, 930, 931, 932, 935, 936, 941, 945, 946, 947, 951, 954, 962, 964, 966, 969, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "see": [0, 4, 5, 7, 22, 23, 25, 33, 40, 45, 46, 49, 52, 53, 57, 59, 60, 62, 63, 73, 78, 80, 81, 85, 90, 92, 96, 100, 101, 102, 105, 106, 107, 108, 110, 112, 115, 118, 123, 129, 130, 131, 135, 140, 141, 142, 146, 148, 151, 152, 154, 156, 158, 159, 160, 170, 180, 181, 182, 185, 196, 197, 199, 201, 208, 210, 216, 217, 219, 222, 223, 224, 229, 230, 232, 234, 235, 236, 237, 238, 242, 244, 245, 246, 249, 250, 253, 259, 260, 262, 266, 273, 280, 281, 282, 283, 284, 285, 289, 298, 310, 311, 312, 314, 315, 316, 317, 319, 323, 324, 325, 329, 330, 331, 332, 334, 335, 336, 337, 339, 341, 343, 344, 345, 348, 349, 350, 353, 360, 361, 362, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 384, 388, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 432, 433, 434, 435, 437, 438, 441, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 559, 560, 561, 564, 569, 572, 573, 577, 578, 579, 580, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 651, 656, 658, 661, 663, 692, 712, 723, 727, 728, 729, 730, 737, 739, 740, 744, 745, 746, 748, 749, 750, 751, 752, 757, 758, 760, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 883, 884, 900, 902, 905, 920, 921, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 941, 942, 943, 944, 945, 946, 947, 948, 950, 952, 955, 957, 959, 964, 965, 966, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 985, 986, 987], "what": [0, 4, 9, 12, 36, 41, 48, 49, 78, 86, 90, 107, 150, 151, 168, 185, 187, 195, 208, 219, 270, 312, 314, 319, 324, 332, 337, 338, 339, 341, 343, 345, 349, 350, 351, 352, 362, 368, 369, 370, 453, 486, 538, 539, 541, 596, 602, 646, 832, 833, 835, 836, 837, 838, 855, 856, 857, 858, 930, 931, 932, 934, 947, 952, 954, 957, 972, 979], "best": [0, 4, 6, 8, 12, 13, 18, 22, 24, 36, 42, 50, 56, 64, 65, 66, 67, 71, 77, 85, 89, 93, 94, 95, 102, 108, 109, 110, 111, 112, 118, 121, 133, 135, 136, 141, 146, 151, 158, 163, 167, 168, 175, 193, 194, 195, 199, 202, 206, 211, 212, 215, 223, 227, 229, 233, 234, 235, 236, 239, 242, 243, 246, 247, 249, 250, 252, 257, 262, 274, 282, 283, 298, 301, 306, 310, 311, 312, 317, 323, 324, 326, 331, 334, 336, 337, 340, 343, 349, 350, 353, 359, 360, 362, 366, 367, 369, 370, 371, 372, 383, 394, 397, 399, 401, 402, 403, 409, 412, 415, 422, 432, 433, 434, 488, 495, 496, 502, 504, 506, 507, 508, 509, 510, 512, 514, 515, 516, 518, 520, 543, 544, 547, 552, 560, 561, 585, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 619, 620, 621, 622, 623, 625, 626, 628, 629, 630, 638, 639, 640, 643, 644, 653, 658, 669, 670, 671, 672, 673, 677, 678, 688, 689, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 732, 733, 734, 736, 739, 740, 741, 743, 744, 745, 746, 749, 750, 760, 771, 773, 776, 781, 782, 791, 799, 805, 806, 848, 850, 853, 855, 856, 857, 858, 920, 925, 926, 927, 928, 931, 934, 935, 937, 945, 947, 951, 952, 955, 957, 962, 966, 972, 975, 978, 980, 981, 982, 985, 986, 987], "wai": [0, 4, 16, 25, 46, 55, 65, 68, 104, 110, 114, 116, 133, 142, 151, 153, 154, 180, 184, 194, 208, 209, 212, 216, 230, 235, 242, 244, 273, 274, 283, 285, 319, 323, 324, 325, 331, 333, 335, 336, 339, 340, 345, 346, 350, 351, 353, 356, 359, 360, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 377, 394, 395, 401, 402, 403, 409, 410, 412, 413, 419, 446, 505, 506, 513, 522, 539, 549, 550, 561, 582, 616, 617, 626, 627, 628, 654, 656, 667, 685, 686, 703, 704, 706, 712, 723, 727, 737, 742, 769, 777, 794, 815, 821, 826, 831, 857, 858, 902, 905, 920, 921, 925, 926, 927, 928, 929, 930, 931, 932, 934, 936, 937, 938, 939, 941, 943, 945, 946, 947, 951, 952, 954, 955, 957, 965, 966, 972, 974, 980, 985, 986], "question": [0, 123, 150, 235, 306, 326, 336, 337, 342, 345, 366, 369, 777, 849, 852, 927, 930, 931, 937, 949, 955], "faq": [0, 345, 366, 642, 928, 941], "how": [0, 4, 5, 7, 8, 9, 10, 19, 20, 23, 24, 29, 30, 33, 46, 47, 48, 49, 52, 55, 63, 64, 65, 68, 71, 73, 78, 91, 95, 99, 100, 103, 106, 107, 108, 109, 111, 112, 116, 118, 130, 140, 142, 148, 151, 152, 153, 154, 156, 160, 168, 169, 175, 180, 181, 182, 183, 186, 187, 193, 197, 203, 204, 208, 211, 214, 215, 216, 218, 227, 230, 231, 233, 235, 236, 237, 242, 244, 245, 247, 248, 249, 253, 255, 257, 259, 260, 270, 278, 281, 282, 283, 295, 296, 298, 301, 306, 310, 311, 314, 318, 323, 324, 325, 326, 332, 335, 336, 338, 339, 340, 342, 345, 349, 350, 351, 356, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 384, 388, 393, 394, 395, 396, 397, 399, 402, 414, 418, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 509, 516, 517, 518, 519, 520, 531, 532, 533, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 572, 573, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 638, 639, 641, 642, 654, 670, 706, 739, 746, 749, 750, 760, 771, 792, 794, 797, 800, 804, 805, 806, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 845, 852, 920, 921, 925, 926, 927, 928, 930, 931, 937, 938, 939, 941, 943, 944, 946, 947, 950, 952, 954, 955, 957, 959, 961, 966, 968, 972, 974, 977, 983, 986, 987], "you": [0, 14, 15, 22, 65, 106, 107, 110, 112, 130, 133, 147, 152, 167, 180, 181, 208, 219, 224, 230, 235, 236, 242, 250, 259, 280, 281, 284, 288, 291, 319, 323, 324, 325, 331, 332, 335, 336, 337, 338, 339, 341, 342, 343, 345, 346, 349, 350, 353, 356, 360, 361, 362, 363, 364, 366, 369, 370, 371, 373, 374, 379, 388, 395, 399, 414, 417, 419, 446, 450, 453, 454, 459, 460, 482, 483, 486, 499, 500, 501, 503, 505, 507, 509, 511, 514, 517, 518, 519, 520, 529, 530, 538, 539, 541, 557, 558, 560, 577, 596, 597, 600, 601, 602, 604, 605, 606, 608, 609, 614, 615, 616, 618, 622, 624, 625, 626, 627, 628, 637, 650, 734, 745, 748, 749, 750, 751, 761, 762, 763, 765, 766, 776, 777, 778, 779, 783, 784, 785, 786, 787, 790, 791, 792, 794, 795, 796, 798, 805, 807, 808, 812, 813, 820, 821, 822, 832, 833, 835, 836, 837, 838, 840, 842, 843, 847, 849, 852, 855, 856, 857, 858, 884, 897, 920, 921, 926, 927, 931, 932, 935, 937, 938, 941, 942, 945, 946, 947, 950, 951, 954, 955, 957, 958, 961, 964, 966, 972, 975, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "can": [0, 4, 5, 7, 8, 9, 10, 12, 14, 15, 18, 22, 23, 24, 25, 28, 29, 30, 33, 36, 38, 39, 42, 44, 45, 49, 51, 52, 53, 55, 56, 57, 58, 60, 64, 65, 66, 67, 71, 72, 73, 74, 75, 78, 86, 88, 89, 90, 91, 93, 95, 96, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 128, 129, 130, 132, 133, 135, 140, 141, 142, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 164, 167, 168, 170, 172, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 187, 195, 196, 197, 199, 200, 201, 206, 207, 208, 209, 210, 212, 216, 219, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 242, 244, 246, 247, 249, 250, 252, 253, 255, 257, 258, 259, 260, 262, 269, 270, 271, 273, 274, 275, 277, 278, 280, 281, 282, 283, 284, 285, 288, 289, 291, 292, 295, 296, 298, 301, 306, 310, 311, 312, 316, 317, 318, 319, 323, 324, 325, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 345, 346, 349, 350, 351, 352, 353, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 383, 385, 388, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 404, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 422, 432, 433, 434, 437, 446, 449, 453, 458, 459, 462, 471, 474, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 529, 530, 531, 532, 533, 534, 538, 539, 541, 542, 544, 547, 552, 553, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 582, 584, 585, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 637, 639, 641, 642, 643, 644, 645, 648, 649, 650, 651, 652, 654, 657, 659, 661, 662, 668, 670, 671, 672, 673, 675, 676, 678, 679, 681, 682, 686, 687, 688, 689, 691, 692, 695, 701, 704, 705, 706, 707, 708, 712, 728, 729, 731, 732, 733, 734, 736, 737, 738, 741, 742, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 805, 806, 807, 808, 811, 812, 813, 815, 816, 817, 821, 822, 823, 826, 827, 828, 832, 839, 840, 845, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 859, 860, 863, 865, 867, 871, 873, 878, 883, 884, 890, 892, 894, 897, 899, 901, 902, 905, 912, 915, 916, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 951, 952, 954, 955, 957, 958, 959, 961, 962, 963, 964, 965, 966, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "contribut": [0, 13, 112, 140, 244, 278, 326, 334, 335, 339, 340, 341, 345, 350, 351, 353, 367, 368, 369, 372, 397, 399, 503, 504, 509, 510, 675, 678, 705, 925, 931, 934, 939, 946, 949, 951, 952, 955, 964, 972, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "activ": [0, 148, 187, 221, 227, 236, 286, 312, 331, 332, 335, 337, 338, 343, 345, 348, 350, 351, 353, 363, 446, 452, 476, 582, 585, 587, 600, 601, 603, 604, 605, 613, 614, 615, 632, 633, 634, 635, 636, 663, 668, 744, 804, 805, 806, 843, 897, 927, 928, 929, 930, 934, 935, 936, 944], "who": [0, 324, 326, 332, 337, 344, 351, 353, 790, 791, 792, 794, 796, 798, 799, 800, 949, 951, 974, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "also": [0, 4, 7, 11, 16, 18, 22, 23, 24, 25, 29, 42, 44, 49, 52, 53, 55, 59, 64, 65, 71, 73, 77, 78, 85, 93, 95, 102, 106, 108, 110, 111, 112, 116, 118, 129, 130, 131, 133, 135, 137, 140, 147, 151, 152, 153, 154, 156, 159, 160, 162, 168, 171, 172, 175, 179, 180, 181, 184, 188, 196, 197, 199, 209, 211, 216, 227, 233, 235, 236, 237, 238, 241, 242, 244, 245, 246, 253, 256, 261, 264, 266, 268, 273, 274, 275, 277, 278, 280, 281, 282, 283, 292, 294, 295, 296, 298, 300, 310, 311, 312, 314, 315, 318, 319, 323, 324, 325, 330, 331, 332, 334, 335, 336, 337, 339, 340, 343, 345, 346, 348, 349, 350, 353, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 388, 389, 390, 392, 393, 396, 397, 398, 400, 402, 412, 413, 415, 417, 432, 434, 442, 446, 448, 453, 458, 482, 483, 485, 486, 491, 496, 499, 501, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 557, 558, 559, 560, 561, 572, 582, 583, 585, 593, 594, 595, 596, 597, 600, 602, 603, 604, 606, 610, 611, 612, 613, 622, 626, 628, 631, 634, 637, 641, 644, 645, 649, 660, 663, 672, 678, 679, 687, 692, 712, 728, 729, 732, 733, 736, 744, 745, 746, 749, 750, 760, 763, 766, 770, 771, 773, 774, 775, 777, 787, 790, 791, 792, 794, 795, 796, 798, 799, 800, 804, 805, 806, 808, 810, 811, 816, 817, 821, 825, 828, 832, 836, 849, 852, 855, 856, 857, 858, 867, 886, 895, 899, 920, 921, 923, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 941, 942, 944, 945, 946, 947, 951, 952, 954, 955, 957, 962, 964, 965, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "help": [0, 4, 9, 11, 15, 64, 68, 90, 96, 152, 197, 199, 236, 238, 271, 295, 298, 312, 319, 323, 324, 335, 338, 339, 340, 341, 342, 343, 345, 346, 350, 351, 352, 356, 362, 363, 366, 370, 372, 384, 486, 527, 577, 600, 604, 615, 635, 636, 642, 664, 784, 855, 856, 857, 858, 921, 925, 926, 928, 930, 931, 933, 935, 942, 947, 950, 951, 952, 954, 955, 966, 978, 979, 980, 983, 986], "triag": [0, 326, 337, 340], "pr": [0, 120, 324, 337, 340, 345, 370, 690, 931, 982, 984], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 60, 64, 65, 66, 67, 68, 69, 72, 74, 77, 78, 79, 80, 81, 85, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 130, 131, 133, 136, 137, 138, 139, 140, 143, 146, 147, 150, 151, 152, 153, 154, 156, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 268, 269, 270, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 285, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 323, 324, 326, 329, 330, 332, 334, 338, 339, 340, 341, 342, 343, 345, 346, 348, 349, 356, 359, 360, 362, 366, 368, 370, 371, 372, 374, 378, 382, 383, 388, 391, 394, 397, 399, 402, 404, 408, 409, 410, 412, 414, 415, 417, 419, 422, 424, 432, 433, 434, 438, 441, 442, 445, 446, 447, 453, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 486, 488, 490, 491, 493, 494, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 532, 533, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 560, 561, 564, 565, 568, 569, 570, 572, 573, 577, 578, 579, 580, 582, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 619, 620, 621, 622, 623, 625, 627, 628, 629, 630, 635, 636, 639, 640, 641, 642, 643, 644, 645, 651, 654, 656, 667, 671, 672, 673, 686, 692, 706, 727, 730, 734, 740, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 778, 779, 780, 781, 782, 788, 789, 791, 793, 794, 796, 797, 798, 799, 800, 804, 805, 806, 808, 811, 812, 813, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 835, 836, 837, 838, 839, 840, 847, 848, 849, 850, 852, 853, 856, 858, 859, 860, 861, 878, 879, 883, 884, 887, 888, 896, 900, 902, 905, 920, 921, 923, 925, 926, 928, 930, 931, 932, 934, 936, 937, 938, 939, 943, 944, 946, 947, 949, 951, 953, 954, 955, 957, 960, 964, 965, 968, 972, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 988], "arturo": [0, 33, 52, 158, 236, 238, 278, 310, 311, 312, 327, 986, 987], "amor": [0, 33, 52, 158, 236, 238, 278, 310, 311, 312, 327, 986, 987], "juan": [0, 327, 972, 983, 984, 985, 986, 987], "carlo": [0, 211, 327, 369, 372, 561, 591, 592, 923, 936, 972, 983, 984, 985, 986, 987], "alfaro": [0, 327, 983, 984, 985, 986, 987], "jim\u00e9nez": [0, 327, 980, 983, 984, 985, 986, 987], "luci": [0, 241, 327, 983, 984, 985, 986, 987], "liu": [0, 241, 327, 513, 675, 705, 931, 937, 975, 978, 979, 980, 983, 984, 985, 986, 987], "martin": [0, 327, 671, 672, 673, 927, 931, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987], "loyola": [0, 327, 985, 986], "sylvain": [0, 327, 976, 981, 982, 983, 984, 985, 986], "mari\u00e9": [0, 327, 981, 982, 983, 984, 985, 986], "chiara": [0, 327, 328, 982, 983, 984, 985, 986, 987, 988], "marmo": [0, 327, 328, 982, 983, 984, 985, 986, 987, 988], "maxwel": [0, 327, 982, 985, 986, 987], "norbert": [0, 327, 974, 984, 985, 986], "prein": [0, 327, 984, 985, 986], "reshama": [0, 321, 327, 980, 981, 983, 984, 985, 986, 987], "shaikh": [0, 321, 327, 980, 981, 983, 984, 985, 986, 987], "albert": [0, 206, 327, 979, 980, 981, 984, 985], "around": [0, 4, 24, 33, 48, 77, 102, 111, 141, 152, 156, 238, 271, 287, 289, 290, 298, 301, 310, 311, 312, 319, 332, 334, 337, 343, 348, 362, 366, 367, 370, 372, 421, 422, 465, 494, 570, 590, 599, 654, 744, 752, 794, 796, 798, 799, 800, 828, 927, 928, 930, 931, 937, 941, 945, 951, 952, 955, 964, 966, 976, 977], "lauren": [0, 320, 642, 646, 928, 984, 987], "burk": [0, 320, 987], "francoisgoupil": [0, 320, 986], "longer": [0, 4, 49, 102, 152, 164, 270, 283, 337, 339, 366, 369, 370, 372, 399, 486, 926, 930, 931, 933, 936, 946, 955, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "mathieu": [0, 2, 22, 44, 90, 170, 180, 200, 213, 236, 310, 972, 973, 974, 975, 976, 977, 978, 979, 985], "blondel": [0, 2, 22, 44, 90, 170, 180, 200, 213, 236, 310, 972, 973, 974, 975, 976, 977, 978, 979, 985], "lar": [0, 2, 14, 88, 148, 157, 168, 310, 311, 312, 334, 421, 422, 428, 451, 481, 487, 489, 492, 493, 495, 496, 498, 601, 602, 603, 604, 605, 606, 613, 614, 615, 628, 632, 633, 634, 635, 636, 953, 964, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 983, 985], "buitinck": [0, 2, 14, 310, 311, 312, 972, 973, 974, 975, 976, 977, 978, 979], "noel": [0, 2, 98, 99, 100, 101, 972, 973, 974, 975, 976, 984], "daw": [0, 2, 98, 99, 100, 101, 972, 973, 974, 975, 976], "dubourg": [0, 2, 138, 142, 955, 972, 976], "edouard": [0, 2, 972], "duchesnai": [0, 2, 972], "alexand": [0, 2, 362, 367, 485, 814, 974, 975, 976, 978, 979, 980, 984, 985, 986], "fabisch": [0, 2, 974, 975, 976, 978], "virgil": [0, 2, 9, 972, 973, 975], "fritsch": [0, 2, 9, 972, 973, 975], "satrajit": [0, 2, 972, 973], "ghosh": [0, 2, 362, 972, 973], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 972, 975, 980, 981, 982, 983, 986], "gorgolewski": [0, 2, 972, 975], "jaqu": [0, 2, 28, 41, 47, 49, 67, 80, 81, 91, 162, 175, 176, 177, 201, 303, 306, 972, 973, 974, 975], "grobler": [0, 2, 28, 41, 47, 49, 67, 80, 81, 91, 162, 175, 176, 177, 201, 303, 306, 972, 973, 974, 975], "brian": [0, 2, 42, 658, 931, 972, 973, 975, 976, 977, 978, 979, 982, 983, 985, 986], "holt": [0, 2, 972], "arnaud": [0, 2, 973, 974, 975, 976, 977, 978], "joli": [0, 2, 973, 974, 975, 976, 977, 978], "thoui": [0, 2, 972], "rai": [0, 2, 899, 931, 972, 982, 984, 985], "jone": [0, 2, 332, 972], "kyle": [0, 2, 89, 973, 974, 975, 976, 978, 979, 980, 981, 983, 984], "kastner": [0, 2, 89, 974, 975, 976, 983, 984], "manoj": [0, 2, 38, 133, 161, 975, 976, 977, 978, 979], "kumar": [0, 2, 38, 133, 161, 332, 362, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987], "robert": [0, 2, 44, 66, 167, 334, 367, 478, 485, 578, 606, 671, 672, 673, 684, 814, 921, 927, 972, 973, 974, 975, 976, 977, 978, 979, 982, 987], "layton": [0, 2, 44, 972, 973, 974, 975, 977], "wei": [0, 2, 945, 972, 973, 976, 977, 978, 979, 981, 985], "li": [0, 2, 290, 332, 589, 592, 646, 675, 705, 840, 920, 923, 931, 934, 941, 943, 946, 972, 973, 979, 980, 981, 982, 983, 984, 985, 986, 987], "paolo": [0, 2, 972, 976, 982], "losi": [0, 2, 972], "gill": [0, 2, 102, 103, 972, 973, 974, 975, 976, 977, 978], "loupp": [0, 2, 102, 103, 369, 505, 506, 972, 973, 974, 975, 976, 977, 978], "jarrod": [0, 2, 981], "millman": [0, 2, 981], "passo": [0, 2, 972, 973], "peter": [0, 2, 11, 15, 58, 98, 110, 112, 113, 236, 310, 311, 362, 398, 400, 407, 599, 739, 740, 927, 931, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 985, 987], "prettenhof": [0, 2, 11, 15, 98, 110, 112, 113, 236, 310, 311, 972, 973, 974, 975, 976, 977], "venkat": [0, 2], "raghav": [0, 2, 109, 239, 273, 976, 977, 978, 979, 980, 984], "rajagopalan": [0, 2, 980, 984], "jacob": [0, 2, 977, 978, 979], "schreiber": [0, 2, 977, 978, 979], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 972, 973], "jake": [0, 2, 11, 142, 180, 199, 224, 258, 266, 950, 972, 973, 974, 975, 976, 977, 978, 979, 980, 984, 986], "vanderpla": [0, 2, 11, 142, 180, 199, 224, 258, 266, 950, 972, 973, 974, 975, 976, 977, 978, 979, 980], "ward": [0, 2, 32, 35, 40, 48, 50, 51, 57, 148, 154, 370, 392, 396, 413, 480, 801, 972, 975, 977], "farlei": [0, 2, 972], "ron": [0, 2, 223, 972], "weiss": [0, 2, 223, 362, 641, 972], "respons": [0, 152, 175, 179, 182, 245, 334, 343, 350, 361, 362, 363, 369, 372, 414, 432, 433, 434, 581, 582, 583, 624, 625, 648, 650, 652, 744, 745, 932, 938, 949, 957], "If": [0, 4, 11, 15, 25, 29, 38, 45, 65, 75, 88, 106, 111, 118, 144, 147, 151, 160, 179, 194, 196, 235, 242, 250, 258, 266, 273, 278, 298, 306, 307, 311, 312, 318, 319, 323, 324, 331, 332, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 350, 351, 353, 356, 359, 360, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 382, 384, 385, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 462, 464, 465, 469, 472, 473, 474, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 661, 662, 663, 664, 666, 667, 668, 675, 676, 677, 678, 679, 680, 681, 685, 687, 690, 691, 694, 695, 697, 699, 700, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 715, 716, 717, 718, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 752, 758, 760, 763, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 876, 882, 884, 886, 888, 892, 894, 897, 899, 900, 902, 905, 906, 912, 915, 916, 917, 918, 920, 921, 923, 925, 926, 927, 928, 929, 931, 934, 935, 937, 938, 941, 943, 945, 946, 947, 948, 951, 952, 954, 957, 958, 964, 965, 966, 972, 975, 976, 977, 978, 981, 982, 984, 985, 986], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 29, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 78, 81, 82, 83, 84, 87, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 119, 120, 121, 123, 124, 125, 126, 129, 130, 132, 133, 135, 136, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 172, 175, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 191, 194, 196, 197, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 249, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 275, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 306, 309, 312, 314, 316, 317, 318, 322, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 344, 346, 349, 350, 351, 352, 353, 356, 358, 359, 360, 361, 362, 363, 364, 365, 368, 372, 373, 374, 375, 378, 380, 381, 382, 383, 389, 390, 406, 407, 409, 411, 413, 421, 428, 430, 431, 435, 443, 453, 458, 459, 466, 481, 493, 495, 496, 497, 498, 505, 522, 524, 525, 527, 528, 533, 535, 536, 542, 545, 546, 548, 551, 553, 559, 566, 570, 571, 574, 579, 586, 588, 592, 597, 600, 601, 604, 610, 611, 613, 617, 625, 633, 635, 636, 637, 644, 645, 646, 648, 649, 661, 664, 665, 666, 671, 672, 673, 675, 677, 679, 681, 684, 685, 688, 692, 695, 700, 705, 707, 708, 712, 713, 715, 716, 717, 718, 720, 723, 724, 725, 726, 729, 730, 732, 741, 753, 754, 755, 756, 757, 758, 759, 768, 776, 778, 780, 782, 784, 788, 789, 798, 799, 800, 802, 810, 811, 814, 816, 819, 829, 830, 832, 834, 835, 837, 838, 839, 842, 846, 848, 857, 858, 859, 860, 863, 866, 867, 868, 873, 874, 883, 884, 892, 894, 898, 899, 900, 902, 903, 907, 908, 909, 913, 914, 920, 921, 923, 924, 926, 929, 930, 932, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 948, 949, 950, 951, 952, 953, 954, 957, 958, 960, 961, 962, 963, 965, 967, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988], "scientif": [0, 29, 123, 124, 125, 126, 211, 326, 331, 335, 348, 353, 362, 402, 412, 451, 955, 958], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 22, 23, 24, 25, 27, 29, 33, 36, 37, 38, 40, 43, 45, 46, 49, 51, 52, 53, 57, 59, 60, 61, 64, 65, 66, 67, 69, 71, 73, 74, 75, 78, 80, 81, 83, 85, 86, 87, 88, 90, 93, 94, 96, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 118, 120, 121, 123, 128, 129, 130, 132, 133, 135, 137, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 162, 165, 167, 168, 170, 172, 174, 176, 179, 180, 181, 182, 185, 187, 188, 191, 192, 193, 194, 195, 197, 199, 200, 203, 204, 206, 207, 209, 210, 211, 213, 216, 218, 219, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 249, 252, 253, 255, 256, 258, 261, 262, 263, 264, 266, 268, 269, 270, 271, 273, 274, 275, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 294, 295, 296, 298, 299, 300, 301, 303, 306, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 323, 324, 325, 331, 332, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 348, 349, 350, 351, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 400, 419, 420, 421, 422, 423, 424, 425, 426, 451, 473, 481, 482, 484, 487, 499, 511, 512, 513, 519, 520, 532, 533, 539, 561, 567, 577, 582, 583, 588, 590, 601, 605, 608, 609, 616, 618, 623, 624, 625, 626, 627, 642, 661, 668, 670, 675, 695, 705, 713, 730, 769, 790, 791, 792, 794, 796, 797, 798, 799, 800, 811, 820, 821, 822, 828, 832, 833, 835, 836, 837, 838, 840, 843, 847, 851, 895, 897, 920, 921, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 941, 943, 944, 945, 946, 947, 948, 950, 951, 952, 955, 957, 961, 962, 963, 964, 965, 966, 969, 976, 979, 980, 981, 982, 983, 984, 985], "would": [0, 4, 6, 9, 24, 29, 41, 49, 53, 64, 71, 73, 74, 78, 83, 90, 91, 111, 133, 135, 140, 141, 151, 152, 153, 154, 156, 169, 179, 180, 181, 194, 197, 206, 223, 231, 235, 236, 241, 243, 245, 253, 259, 270, 273, 274, 278, 283, 290, 298, 307, 310, 312, 319, 323, 332, 333, 337, 338, 339, 343, 345, 346, 348, 349, 350, 351, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 383, 415, 418, 432, 433, 434, 439, 482, 484, 486, 491, 494, 502, 504, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 518, 520, 533, 534, 537, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 561, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 622, 623, 624, 625, 626, 628, 629, 652, 658, 662, 663, 670, 705, 734, 738, 746, 748, 760, 773, 781, 782, 791, 799, 806, 832, 833, 835, 836, 837, 838, 839, 840, 845, 847, 848, 850, 853, 855, 856, 857, 858, 920, 921, 924, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 941, 946, 951, 952, 955, 957, 962, 964, 966, 969, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "appreci": [0, 337], "citat": [0, 331, 334, 348], "paper": [0, 156, 235, 334, 343, 348, 362, 364, 393, 399, 428, 454, 484, 491, 513, 591, 608, 616, 617, 621, 626, 629, 642, 737, 785, 794, 797, 839, 840, 927, 931, 934, 937, 946, 966, 972, 979, 980], "machin": [0, 4, 6, 8, 9, 25, 58, 129, 130, 135, 140, 149, 153, 191, 218, 235, 238, 241, 267, 273, 278, 282, 285, 294, 299, 306, 312, 323, 324, 326, 330, 331, 332, 334, 335, 337, 340, 343, 344, 348, 349, 350, 352, 356, 360, 362, 366, 367, 369, 370, 372, 388, 390, 398, 428, 452, 454, 460, 466, 467, 468, 480, 482, 484, 491, 494, 505, 506, 507, 508, 509, 510, 514, 515, 516, 543, 544, 560, 561, 564, 569, 572, 584, 588, 589, 591, 593, 594, 595, 600, 601, 604, 605, 606, 607, 608, 609, 626, 632, 633, 642, 658, 663, 674, 684, 690, 692, 734, 737, 744, 773, 774, 788, 789, 794, 797, 804, 805, 806, 808, 826, 828, 833, 847, 848, 849, 850, 852, 853, 857, 858, 920, 921, 923, 924, 927, 928, 929, 931, 932, 934, 937, 938, 939, 941, 945, 947, 950, 951, 952, 953, 954, 955, 958, 959, 960, 962, 966, 967, 968, 969, 972, 974, 984, 985, 986, 987], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 323, 325, 331, 335, 337, 338, 339, 340, 341, 342, 345, 346, 348, 350, 351, 353, 363, 370, 446, 458, 459, 531, 649, 757, 822, 899, 931, 941, 947, 949, 952, 954, 955, 957, 958, 960, 966, 968, 972, 974, 975, 977, 979, 980, 981, 982, 983, 985, 986, 987], "et": [0, 11, 71, 72, 98, 99, 113, 167, 266, 334, 359, 362, 364, 367, 369, 370, 371, 401, 448, 469, 470, 478, 485, 491, 494, 513, 632, 633, 669, 670, 783, 785, 805, 806, 840, 883, 884, 927, 928, 931, 937, 941, 943, 946, 947, 980], "al": [0, 11, 71, 72, 98, 99, 113, 167, 266, 334, 359, 362, 364, 367, 369, 370, 371, 401, 448, 469, 470, 478, 485, 491, 494, 513, 632, 633, 669, 670, 783, 785, 805, 806, 840, 883, 884, 927, 928, 931, 937, 941, 943, 946, 947, 980, 985], "jmlr": [0, 362, 616, 617, 626, 654, 927, 946], "12": [0, 4, 6, 36, 38, 39, 49, 51, 52, 67, 77, 107, 108, 112, 138, 139, 140, 147, 152, 154, 159, 179, 187, 199, 202, 203, 206, 207, 209, 216, 223, 224, 234, 235, 237, 238, 241, 247, 277, 278, 285, 306, 312, 334, 335, 342, 349, 351, 362, 366, 370, 394, 397, 399, 432, 433, 434, 435, 482, 484, 491, 520, 614, 619, 621, 635, 636, 639, 642, 643, 744, 745, 747, 764, 767, 779, 800, 816, 920, 921, 927, 929, 932, 941, 945, 946, 949, 957, 962, 970, 973, 975, 979, 980, 982, 983], "pp": [0, 58, 234, 334, 362, 364, 370, 373, 374, 395, 398, 402, 412, 461, 483, 484, 491, 540, 585, 593, 614, 635, 636, 670, 675, 679, 689, 705, 718, 732, 783, 785, 787, 804, 824, 835, 924, 931, 933, 934, 944], "2825": 0, "2830": 0, "2011": [0, 43, 152, 200, 343, 367, 370, 485, 488, 490, 491, 497, 540, 577, 588, 608, 679, 921, 935, 945, 950, 972], "bibtex": 0, "entri": [0, 15, 69, 118, 147, 231, 280, 311, 319, 341, 343, 345, 349, 350, 359, 360, 362, 367, 369, 372, 413, 422, 481, 482, 487, 495, 496, 511, 512, 538, 541, 544, 561, 570, 582, 588, 590, 597, 601, 603, 605, 606, 609, 611, 613, 614, 615, 623, 625, 632, 633, 635, 636, 649, 654, 657, 659, 662, 665, 666, 668, 675, 678, 679, 680, 683, 684, 687, 692, 705, 707, 708, 732, 734, 737, 738, 739, 740, 759, 772, 788, 789, 796, 797, 798, 799, 800, 819, 825, 836, 917, 920, 921, 927, 931, 934, 941, 946, 952, 957, 979, 982, 983, 985], "articl": [0, 16, 332, 336, 337, 345, 366, 375, 425, 655, 927, 931, 966, 985], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 19, 20, 22, 23, 24, 25, 27, 29, 31, 33, 34, 35, 37, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 71, 72, 74, 75, 77, 78, 82, 85, 86, 87, 88, 89, 93, 94, 95, 100, 101, 102, 106, 107, 108, 111, 112, 114, 117, 120, 121, 126, 128, 129, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 151, 158, 159, 161, 163, 164, 166, 167, 168, 171, 172, 178, 179, 181, 183, 184, 185, 187, 188, 193, 196, 197, 199, 200, 201, 206, 210, 211, 212, 213, 214, 221, 222, 223, 224, 225, 226, 227, 229, 234, 235, 236, 238, 239, 240, 244, 245, 249, 250, 255, 256, 259, 260, 261, 262, 264, 265, 266, 273, 277, 278, 289, 292, 294, 295, 296, 297, 298, 301, 307, 308, 310, 315, 316, 317, 336, 337, 341, 345, 363, 931, 954, 962], "p": [0, 11, 13, 22, 24, 25, 37, 56, 73, 74, 77, 83, 93, 110, 129, 138, 156, 191, 196, 197, 199, 201, 210, 224, 235, 241, 242, 266, 331, 332, 334, 335, 342, 345, 359, 360, 362, 364, 365, 367, 369, 371, 372, 373, 375, 393, 395, 397, 400, 407, 419, 421, 424, 425, 428, 448, 478, 484, 488, 490, 491, 497, 499, 500, 501, 503, 505, 506, 507, 508, 509, 511, 514, 515, 516, 540, 542, 543, 544, 545, 546, 548, 549, 550, 554, 555, 556, 557, 558, 559, 565, 566, 577, 590, 593, 638, 640, 642, 644, 649, 655, 665, 673, 690, 701, 735, 737, 748, 754, 755, 756, 759, 773, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 804, 808, 809, 824, 835, 841, 857, 858, 859, 924, 925, 927, 928, 929, 931, 933, 934, 935, 936, 937, 938, 941, 945, 946, 949, 961, 964, 972, 973, 975, 978, 980, 987], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 14, 15, 16, 24, 29, 33, 39, 43, 44, 45, 48, 49, 53, 59, 62, 65, 69, 78, 88, 102, 105, 106, 108, 111, 118, 119, 125, 127, 129, 132, 133, 135, 141, 142, 144, 148, 150, 151, 152, 153, 156, 163, 165, 168, 179, 180, 181, 189, 200, 210, 212, 215, 219, 226, 233, 235, 236, 237, 238, 241, 242, 244, 245, 247, 253, 268, 269, 270, 275, 278, 280, 282, 284, 287, 288, 306, 310, 311, 312, 319, 332, 337, 338, 339, 341, 343, 348, 360, 363, 367, 369, 370, 371, 372, 437, 458, 459, 481, 482, 487, 488, 516, 531, 532, 533, 542, 545, 546, 548, 549, 550, 554, 555, 556, 557, 558, 559, 567, 577, 582, 585, 608, 663, 672, 675, 678, 679, 705, 732, 733, 736, 737, 747, 748, 751, 753, 754, 755, 756, 759, 761, 762, 763, 764, 765, 766, 767, 772, 805, 806, 810, 819, 822, 823, 827, 828, 862, 867, 868, 923, 926, 935, 938, 939, 941, 945, 974, 980, 981, 982, 984, 986], "g": [0, 4, 7, 8, 9, 10, 12, 15, 22, 23, 24, 25, 29, 49, 60, 64, 67, 75, 78, 93, 102, 103, 110, 111, 118, 124, 135, 136, 137, 138, 140, 142, 143, 144, 147, 150, 161, 164, 179, 180, 181, 197, 200, 204, 212, 221, 235, 239, 240, 246, 252, 259, 273, 278, 290, 305, 312, 319, 323, 329, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 348, 350, 356, 360, 361, 362, 364, 366, 367, 369, 370, 371, 372, 374, 453, 478, 481, 483, 484, 487, 491, 505, 506, 507, 508, 509, 514, 515, 517, 518, 519, 520, 531, 532, 538, 539, 541, 543, 544, 547, 554, 561, 567, 572, 573, 580, 583, 584, 614, 624, 627, 630, 636, 642, 647, 670, 677, 687, 689, 712, 734, 746, 749, 750, 752, 760, 764, 769, 770, 771, 772, 775, 778, 783, 787, 790, 791, 792, 795, 797, 798, 799, 800, 804, 811, 813, 818, 821, 824, 826, 828, 830, 832, 833, 834, 835, 836, 837, 838, 847, 855, 856, 857, 858, 883, 884, 899, 920, 921, 925, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 941, 945, 946, 947, 952, 954, 955, 966, 972, 976, 979, 980, 981, 982, 984, 985, 986, 987, 988], "A": [0, 15, 16, 17, 23, 25, 28, 32, 35, 55, 69, 71, 74, 78, 83, 86, 87, 88, 93, 100, 101, 105, 106, 108, 117, 121, 123, 124, 125, 126, 130, 131, 132, 135, 138, 140, 142, 143, 144, 148, 151, 152, 167, 180, 189, 193, 194, 197, 200, 235, 236, 238, 242, 249, 268, 273, 275, 278, 280, 282, 285, 288, 290, 292, 298, 303, 310, 311, 312, 316, 318, 319, 323, 325, 326, 331, 332, 334, 335, 337, 339, 340, 342, 345, 348, 349, 350, 351, 352, 357, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 383, 388, 389, 390, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 408, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 438, 440, 441, 442, 444, 447, 450, 451, 452, 453, 454, 458, 460, 461, 462, 463, 464, 470, 472, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 494, 495, 496, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 520, 531, 538, 539, 540, 541, 543, 544, 547, 552, 557, 558, 561, 567, 570, 577, 580, 582, 583, 585, 587, 588, 589, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 622, 623, 625, 626, 627, 628, 629, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 654, 655, 660, 661, 662, 666, 667, 669, 671, 672, 673, 674, 675, 680, 685, 686, 689, 692, 693, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 713, 715, 716, 723, 724, 725, 726, 727, 730, 737, 740, 742, 744, 745, 746, 749, 750, 752, 757, 760, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 812, 815, 819, 824, 828, 831, 832, 833, 835, 836, 837, 838, 843, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 860, 882, 883, 884, 916, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 941, 944, 945, 946, 947, 950, 951, 952, 957, 958, 964, 965, 966, 968, 972, 974, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "v": [0, 4, 15, 16, 18, 25, 27, 30, 31, 32, 33, 34, 45, 53, 69, 70, 73, 76, 77, 85, 87, 88, 91, 103, 111, 148, 149, 152, 154, 157, 168, 179, 194, 210, 222, 223, 226, 227, 228, 231, 250, 280, 295, 311, 319, 324, 329, 334, 337, 343, 345, 350, 359, 361, 364, 365, 367, 369, 370, 383, 392, 396, 402, 412, 413, 414, 415, 420, 423, 424, 425, 426, 427, 432, 433, 434, 446, 462, 474, 480, 481, 487, 491, 495, 496, 500, 502, 504, 506, 508, 510, 512, 514, 515, 518, 520, 531, 539, 543, 544, 550, 556, 561, 580, 584, 585, 589, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 620, 622, 623, 626, 628, 629, 638, 645, 649, 651, 654, 667, 685, 686, 688, 703, 704, 706, 737, 742, 746, 751, 758, 760, 770, 774, 776, 777, 778, 781, 782, 783, 791, 799, 801, 804, 806, 808, 809, 812, 815, 821, 822, 823, 828, 831, 841, 847, 848, 849, 850, 852, 853, 856, 858, 862, 925, 926, 927, 928, 931, 932, 933, 936, 939, 945, 946, 948, 968, 972, 975, 976, 977, 980, 982, 983, 986, 987], "b": [0, 8, 9, 10, 22, 24, 54, 60, 73, 91, 93, 99, 101, 102, 107, 111, 112, 121, 123, 124, 136, 137, 138, 143, 147, 161, 164, 180, 185, 213, 215, 234, 238, 240, 245, 249, 252, 283, 290, 319, 332, 334, 337, 341, 342, 343, 359, 360, 362, 365, 366, 367, 370, 388, 432, 450, 491, 496, 516, 538, 539, 540, 541, 557, 558, 560, 561, 578, 596, 597, 598, 599, 608, 619, 622, 624, 626, 630, 637, 638, 655, 669, 679, 680, 739, 740, 757, 758, 795, 821, 823, 824, 827, 828, 835, 862, 884, 885, 894, 921, 923, 927, 928, 929, 931, 934, 936, 941, 945, 946, 961, 972, 980, 983, 985, 986, 987], "o": [0, 16, 18, 25, 27, 34, 45, 55, 56, 58, 59, 75, 77, 82, 87, 115, 143, 167, 172, 177, 179, 194, 212, 221, 235, 237, 244, 273, 274, 278, 281, 284, 291, 314, 323, 332, 334, 337, 353, 362, 364, 367, 369, 373, 375, 395, 397, 398, 400, 423, 425, 484, 554, 577, 616, 617, 642, 776, 804, 819, 859, 899, 900, 923, 925, 927, 928, 931, 932, 934, 935, 945, 946, 947, 972, 975, 978, 980, 981, 984, 985, 987], "m": [0, 8, 9, 11, 18, 24, 25, 40, 53, 54, 58, 59, 60, 73, 74, 85, 121, 140, 161, 163, 179, 197, 235, 239, 266, 291, 294, 305, 323, 324, 331, 332, 334, 335, 341, 343, 350, 353, 359, 360, 362, 364, 367, 369, 371, 373, 395, 396, 400, 407, 423, 424, 450, 463, 478, 482, 484, 486, 491, 589, 595, 599, 614, 621, 635, 636, 639, 643, 658, 666, 675, 690, 705, 707, 708, 744, 745, 794, 819, 884, 910, 911, 921, 923, 925, 927, 928, 929, 931, 932, 933, 934, 935, 939, 941, 945, 947, 955, 980, 981, 982, 983, 986, 987, 988], "r": [0, 8, 10, 11, 12, 13, 15, 22, 23, 24, 25, 35, 39, 60, 69, 71, 72, 73, 74, 78, 85, 93, 96, 99, 102, 103, 107, 111, 112, 113, 121, 129, 136, 137, 138, 142, 143, 144, 146, 147, 151, 161, 163, 164, 168, 179, 186, 189, 197, 204, 209, 212, 221, 224, 227, 234, 235, 238, 240, 241, 242, 245, 248, 250, 252, 255, 260, 264, 266, 284, 300, 312, 319, 332, 334, 338, 341, 348, 350, 359, 360, 362, 364, 365, 366, 367, 369, 370, 379, 383, 388, 401, 403, 415, 419, 424, 428, 432, 433, 434, 448, 454, 463, 470, 484, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 517, 518, 519, 520, 538, 539, 540, 541, 556, 559, 560, 561, 577, 585, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 635, 636, 642, 646, 666, 671, 672, 673, 677, 679, 730, 734, 737, 746, 760, 763, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 797, 798, 799, 805, 806, 819, 824, 835, 842, 843, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 860, 897, 921, 923, 925, 927, 928, 931, 932, 933, 934, 935, 938, 939, 941, 945, 946, 947, 951, 966, 972, 976, 979, 982, 983, 984, 985, 987], "d": [0, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 27, 28, 29, 33, 34, 38, 44, 45, 46, 55, 56, 58, 65, 75, 80, 83, 85, 88, 93, 95, 109, 135, 143, 179, 187, 193, 195, 197, 204, 207, 209, 210, 211, 212, 224, 234, 235, 243, 252, 259, 260, 266, 270, 287, 288, 291, 297, 298, 303, 312, 331, 332, 334, 339, 343, 348, 360, 362, 364, 365, 367, 369, 370, 372, 373, 395, 397, 402, 410, 413, 438, 443, 453, 476, 484, 486, 507, 508, 515, 516, 531, 532, 540, 564, 565, 569, 572, 573, 594, 595, 598, 619, 620, 621, 630, 638, 639, 642, 643, 647, 649, 655, 658, 671, 672, 673, 675, 705, 713, 717, 727, 730, 737, 758, 783, 785, 787, 788, 789, 804, 815, 819, 821, 824, 835, 840, 857, 858, 862, 923, 925, 927, 928, 929, 930, 931, 933, 939, 941, 943, 946, 947, 954, 962, 963, 964, 975, 977, 979, 980, 982, 983, 984, 985, 986], "perrot": [0, 972], "e": [0, 4, 8, 10, 11, 15, 23, 24, 29, 49, 52, 56, 64, 71, 73, 74, 75, 77, 78, 88, 90, 91, 102, 108, 110, 111, 114, 123, 129, 132, 133, 143, 150, 151, 152, 156, 159, 168, 169, 179, 180, 181, 197, 199, 200, 212, 231, 235, 236, 238, 240, 241, 249, 250, 259, 266, 275, 278, 280, 282, 306, 312, 316, 317, 318, 319, 323, 324, 325, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 348, 349, 350, 353, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 388, 390, 392, 395, 396, 397, 400, 404, 413, 419, 420, 421, 422, 423, 425, 426, 446, 448, 450, 451, 452, 453, 474, 483, 485, 486, 488, 490, 491, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 527, 531, 532, 538, 539, 540, 541, 543, 544, 547, 553, 554, 556, 557, 558, 559, 560, 561, 567, 572, 573, 580, 583, 584, 585, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 634, 637, 638, 640, 642, 644, 647, 649, 651, 654, 655, 658, 659, 677, 678, 679, 680, 687, 690, 691, 704, 712, 716, 734, 737, 744, 745, 746, 749, 750, 752, 759, 760, 764, 769, 770, 771, 772, 773, 775, 787, 788, 789, 790, 791, 792, 794, 798, 799, 800, 804, 805, 806, 811, 813, 816, 818, 819, 820, 821, 823, 824, 826, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 847, 848, 854, 855, 856, 857, 858, 862, 878, 883, 884, 886, 889, 890, 899, 906, 917, 920, 921, 923, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 941, 942, 945, 946, 947, 952, 954, 955, 964, 965, 966, 972, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "journal": [0, 74, 152, 235, 241, 331, 332, 334, 362, 364, 369, 402, 412, 423, 484, 491, 577, 585, 595, 639, 642, 643, 655, 665, 680, 683, 684, 707, 708, 735, 773, 778, 824, 835, 920, 921, 925, 927, 928, 929, 932, 938, 943, 945, 946], "research": [0, 150, 235, 241, 332, 334, 348, 362, 451, 463, 585, 595, 642, 684, 773, 778, 920, 928, 932, 934, 946, 951, 952, 955], "volum": [0, 61, 72, 140, 332, 334, 362, 364, 372, 423, 484, 718, 927, 946, 955], "page": [0, 16, 199, 282, 323, 332, 334, 337, 339, 341, 343, 345, 351, 361, 362, 364, 423, 466, 467, 468, 578, 594, 778, 842, 884, 921, 931, 932, 957, 966, 970, 972, 976, 977], "want": [0, 4, 12, 22, 23, 24, 59, 65, 133, 147, 151, 179, 180, 181, 227, 235, 249, 270, 292, 295, 310, 319, 323, 324, 325, 335, 336, 338, 339, 341, 342, 343, 348, 349, 350, 351, 353, 356, 360, 361, 362, 363, 364, 369, 370, 371, 450, 453, 454, 460, 485, 499, 604, 605, 606, 608, 609, 616, 618, 624, 625, 626, 713, 794, 797, 813, 820, 840, 847, 920, 927, 930, 931, 932, 935, 937, 941, 942, 946, 951, 952, 957, 965, 972, 986], "its": [0, 4, 9, 12, 13, 18, 24, 31, 33, 60, 61, 71, 73, 75, 78, 82, 83, 90, 107, 111, 123, 133, 135, 140, 142, 151, 152, 154, 156, 158, 168, 192, 196, 197, 201, 206, 214, 217, 219, 221, 226, 227, 234, 238, 240, 242, 244, 253, 255, 259, 260, 275, 283, 290, 295, 308, 310, 311, 314, 318, 319, 324, 325, 330, 331, 332, 333, 337, 338, 339, 341, 342, 345, 348, 349, 350, 351, 353, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 378, 391, 392, 393, 395, 396, 400, 404, 406, 410, 413, 414, 415, 417, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 447, 453, 473, 481, 483, 484, 487, 488, 490, 491, 492, 494, 500, 505, 506, 507, 508, 509, 510, 514, 515, 516, 533, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 577, 594, 595, 621, 622, 624, 635, 636, 637, 638, 642, 646, 658, 674, 678, 679, 685, 686, 690, 727, 730, 732, 744, 745, 746, 769, 776, 777, 790, 791, 792, 794, 795, 796, 798, 799, 800, 807, 808, 812, 817, 820, 821, 823, 839, 840, 843, 847, 848, 855, 857, 867, 868, 873, 879, 899, 901, 920, 926, 927, 928, 930, 931, 932, 933, 934, 937, 938, 939, 944, 945, 946, 947, 951, 955, 957, 959, 961, 964, 965, 966, 974, 975, 976, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988], "api": [0, 12, 46, 148, 205, 207, 216, 253, 311, 312, 325, 326, 330, 331, 337, 338, 340, 341, 346, 347, 348, 349, 351, 353, 356, 367, 369, 370, 380, 381, 384, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 446, 454, 458, 460, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 513, 514, 516, 517, 518, 519, 520, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 561, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 608, 627, 638, 639, 640, 641, 642, 744, 745, 749, 750, 774, 792, 794, 796, 797, 800, 804, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 845, 851, 852, 897, 899, 920, 929, 930, 931, 934, 941, 945, 951, 952, 955, 957, 961, 963, 968, 969, 970, 971, 980, 981, 983, 984, 985, 986, 987, 988], "design": [0, 13, 73, 118, 138, 150, 151, 160, 226, 273, 318, 325, 331, 337, 342, 348, 349, 350, 351, 352, 362, 369, 371, 372, 465, 478, 582, 583, 598, 615, 619, 626, 630, 635, 746, 764, 765, 783, 785, 921, 927, 928, 931, 932, 941, 951, 952, 955, 959, 974, 981], "mai": [0, 8, 18, 23, 35, 40, 42, 51, 65, 78, 85, 98, 108, 133, 151, 156, 159, 168, 185, 204, 238, 240, 242, 243, 268, 278, 288, 298, 310, 311, 312, 319, 323, 324, 325, 329, 331, 332, 333, 334, 336, 337, 339, 341, 342, 345, 348, 350, 351, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 383, 390, 391, 392, 394, 395, 396, 397, 399, 401, 402, 403, 404, 409, 412, 415, 419, 422, 432, 433, 434, 437, 438, 439, 446, 458, 459, 465, 484, 485, 488, 490, 494, 497, 498, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 524, 531, 544, 547, 552, 560, 561, 567, 570, 584, 585, 587, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 622, 623, 624, 626, 627, 628, 629, 631, 634, 636, 638, 639, 641, 642, 643, 645, 647, 655, 662, 665, 666, 668, 669, 671, 672, 673, 675, 687, 705, 712, 734, 735, 746, 748, 749, 750, 751, 760, 761, 762, 763, 765, 766, 769, 773, 776, 781, 782, 783, 784, 785, 787, 790, 791, 792, 794, 796, 798, 799, 800, 806, 807, 808, 811, 813, 823, 825, 826, 827, 828, 830, 836, 839, 840, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 860, 865, 887, 888, 899, 920, 921, 923, 925, 927, 928, 931, 932, 933, 934, 935, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 952, 957, 963, 964, 972, 974, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "consid": [0, 4, 12, 13, 23, 35, 61, 65, 74, 85, 89, 108, 109, 111, 128, 132, 133, 147, 152, 179, 181, 235, 238, 242, 246, 253, 259, 260, 273, 282, 295, 303, 306, 310, 319, 323, 324, 325, 329, 336, 337, 339, 343, 345, 348, 350, 358, 362, 367, 368, 369, 370, 371, 372, 373, 374, 389, 395, 400, 407, 424, 458, 459, 471, 483, 499, 500, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 535, 536, 538, 539, 541, 543, 557, 558, 570, 582, 583, 596, 602, 608, 609, 610, 612, 621, 629, 638, 639, 640, 642, 643, 644, 646, 650, 652, 655, 657, 659, 665, 675, 679, 683, 705, 735, 737, 741, 790, 791, 792, 794, 796, 798, 799, 800, 803, 805, 806, 811, 821, 842, 843, 852, 853, 855, 856, 857, 858, 915, 920, 926, 927, 928, 929, 931, 932, 934, 937, 938, 939, 941, 945, 946, 947, 952, 957, 964, 975, 976, 980, 984, 985, 987], "softwar": [0, 323, 334, 337, 345, 348, 350, 370, 577, 585, 608, 921, 955], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 323, 325, 329, 330, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 383, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 454, 456, 457, 458, 459, 460, 462, 465, 469, 471, 473, 474, 476, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 634, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 665, 667, 668, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 683, 684, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 712, 713, 717, 718, 720, 722, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 874, 875, 876, 877, 878, 879, 882, 884, 886, 887, 888, 889, 891, 893, 894, 895, 896, 898, 899, 900, 902, 905, 919, 920, 921, 923, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 950, 951, 952, 955, 958, 960, 961, 962, 963, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988], "2013": [0, 156, 334, 366, 367, 486, 675, 705, 923, 931, 950, 973, 974], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 13, 15, 16, 36, 42, 43, 61, 62, 74, 102, 153, 171, 174, 188, 189, 240, 241, 242, 269, 277, 306, 334, 335, 343, 345, 359, 360, 362, 366, 367, 369, 372, 424, 466, 467, 468, 488, 490, 497, 505, 506, 507, 508, 515, 516, 540, 557, 558, 560, 561, 565, 569, 572, 573, 584, 598, 599, 608, 619, 622, 624, 630, 637, 639, 642, 643, 655, 665, 674, 675, 680, 705, 735, 785, 819, 855, 856, 857, 858, 920, 925, 927, 928, 931, 933, 934, 935, 939, 943, 945, 947, 965, 975, 980, 984, 985, 986, 987], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 370, 783, 933, 950], "languag": [0, 312, 342, 356, 367, 370, 945, 951, 952, 955, 958], "data": [0, 3, 6, 8, 11, 13, 14, 15, 18, 19, 20, 23, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 48, 49, 50, 51, 54, 55, 57, 60, 63, 65, 66, 68, 72, 74, 81, 83, 84, 85, 88, 89, 94, 96, 102, 104, 107, 108, 109, 110, 111, 115, 116, 117, 119, 121, 123, 124, 125, 126, 130, 134, 135, 136, 137, 139, 142, 146, 148, 151, 152, 157, 158, 161, 162, 164, 168, 169, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 206, 209, 210, 211, 214, 216, 219, 221, 222, 223, 224, 225, 227, 229, 233, 235, 237, 238, 239, 240, 243, 249, 252, 253, 256, 257, 259, 260, 261, 262, 263, 264, 266, 269, 270, 272, 274, 275, 276, 280, 282, 284, 285, 288, 289, 291, 292, 294, 295, 297, 302, 303, 306, 310, 315, 316, 317, 318, 322, 324, 326, 329, 330, 331, 333, 334, 337, 339, 340, 343, 344, 345, 346, 349, 353, 356, 358, 359, 360, 361, 364, 367, 368, 369, 370, 373, 374, 375, 377, 379, 380, 381, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 409, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 470, 471, 472, 473, 474, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 523, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 565, 567, 568, 572, 573, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 654, 655, 657, 658, 660, 661, 663, 667, 668, 670, 674, 676, 677, 678, 679, 680, 683, 685, 686, 687, 689, 690, 691, 703, 704, 706, 710, 712, 713, 718, 732, 733, 734, 736, 737, 738, 740, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 865, 866, 867, 868, 871, 872, 873, 883, 884, 894, 897, 902, 903, 905, 906, 907, 908, 909, 912, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 958, 959, 961, 962, 964, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "mine": [0, 235, 311, 332, 362, 373, 395, 461, 513, 670, 683, 689, 732, 927, 931, 937, 943], "108": [0, 973], "122": [0, 101, 147, 152, 183, 211, 343, 932], "high": [0, 4, 9, 11, 12, 23, 25, 28, 33, 36, 40, 45, 52, 57, 60, 68, 73, 74, 87, 88, 102, 104, 105, 106, 111, 112, 114, 116, 125, 126, 135, 141, 147, 150, 152, 153, 154, 174, 180, 181, 193, 199, 200, 201, 206, 210, 221, 227, 233, 237, 241, 242, 250, 259, 260, 268, 270, 275, 277, 278, 290, 295, 297, 298, 310, 311, 316, 317, 323, 332, 334, 337, 342, 345, 346, 348, 349, 359, 360, 361, 362, 366, 368, 369, 370, 371, 372, 395, 397, 399, 400, 402, 419, 432, 433, 434, 503, 504, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 594, 620, 621, 629, 639, 642, 643, 675, 680, 691, 695, 705, 738, 739, 754, 756, 788, 789, 793, 822, 823, 827, 849, 851, 852, 855, 856, 857, 858, 900, 920, 925, 926, 927, 928, 930, 931, 934, 935, 937, 939, 941, 943, 946, 947, 948, 951, 952, 957, 958, 960, 966, 972, 973, 975, 976, 980, 983, 984, 985, 986, 987], "qualiti": [0, 6, 22, 33, 42, 44, 45, 53, 88, 107, 151, 185, 229, 233, 242, 243, 244, 337, 345, 348, 350, 356, 357, 361, 362, 364, 367, 402, 412, 419, 424, 507, 508, 509, 510, 514, 515, 692, 760, 839, 840, 855, 856, 857, 858, 884, 926, 928, 936, 943, 947, 951, 952, 955, 961, 962, 968], "png": [0, 29, 859], "svg": 0, "logo": [0, 366, 753], "avail": [0, 5, 11, 12, 13, 37, 51, 52, 88, 106, 109, 110, 133, 135, 140, 144, 150, 151, 152, 168, 179, 187, 197, 200, 215, 232, 233, 238, 239, 242, 258, 259, 260, 266, 278, 280, 281, 282, 283, 285, 290, 292, 319, 323, 331, 332, 334, 335, 336, 337, 338, 342, 346, 349, 350, 353, 356, 359, 362, 363, 366, 367, 368, 369, 370, 371, 372, 373, 397, 400, 401, 402, 403, 419, 420, 421, 422, 423, 424, 425, 426, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 458, 485, 499, 505, 506, 507, 508, 509, 510, 514, 515, 538, 541, 543, 544, 560, 561, 582, 583, 607, 615, 620, 622, 623, 624, 626, 639, 646, 649, 681, 682, 746, 749, 750, 760, 770, 771, 776, 777, 779, 780, 781, 782, 794, 805, 806, 815, 824, 831, 835, 840, 891, 892, 899, 921, 925, 928, 930, 931, 932, 933, 934, 937, 941, 944, 945, 946, 950, 951, 952, 955, 957, 961, 966, 968, 972, 977, 978, 979, 980, 981, 982, 985, 986, 988], "doc": [0, 4, 8, 18, 310, 312, 324, 335, 337, 341, 342, 345, 350, 353, 355, 356, 370, 538, 539, 541, 727, 730, 739, 740, 771, 966, 972, 976, 986], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 331, 334, 336, 337, 338, 340, 341, 343, 345, 346, 348, 349, 353, 356, 359, 363, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 916, 917, 918, 919, 928, 941, 947, 951, 955, 965, 966, 982, 986], "directori": [0, 8, 255, 331, 335, 337, 339, 343, 345, 350, 353, 363, 392, 396, 400, 436, 449, 808, 809, 986], "driven": [0, 951, 955], "howev": [0, 4, 5, 7, 13, 22, 23, 25, 33, 43, 45, 49, 55, 66, 69, 71, 75, 77, 90, 93, 102, 104, 108, 111, 112, 118, 130, 133, 135, 140, 141, 152, 153, 160, 168, 179, 200, 203, 204, 206, 212, 235, 242, 249, 252, 253, 258, 269, 273, 282, 306, 310, 311, 319, 323, 324, 325, 331, 332, 334, 335, 336, 337, 339, 343, 345, 348, 350, 356, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 391, 394, 397, 399, 401, 404, 409, 446, 458, 482, 501, 517, 531, 532, 533, 539, 556, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 580, 582, 583, 588, 593, 605, 606, 622, 637, 642, 645, 650, 712, 714, 746, 749, 750, 760, 771, 775, 776, 787, 805, 806, 811, 820, 821, 826, 849, 850, 852, 863, 900, 920, 921, 924, 925, 926, 927, 928, 930, 931, 932, 934, 935, 936, 938, 939, 941, 945, 946, 947, 957, 961, 964, 981, 982, 984, 985], "institut": [0, 334, 934], "privat": [0, 341, 350, 351, 863, 955, 972, 980, 982, 983, 985, 986], "grant": [0, 337], "assur": [0, 350, 744, 745, 979, 980, 981, 982, 983, 984, 985], "sustain": 0, "like": [0, 4, 12, 18, 48, 53, 55, 64, 80, 83, 88, 93, 95, 101, 105, 111, 114, 135, 141, 151, 159, 179, 227, 235, 238, 239, 242, 243, 249, 262, 271, 273, 278, 280, 290, 298, 319, 323, 325, 329, 331, 332, 335, 336, 337, 339, 341, 344, 345, 346, 348, 349, 350, 356, 358, 362, 363, 365, 366, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 462, 463, 465, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 529, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 712, 713, 717, 718, 719, 721, 722, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 865, 872, 873, 881, 886, 894, 895, 899, 902, 903, 904, 916, 918, 920, 923, 925, 926, 927, 928, 931, 933, 934, 935, 937, 938, 941, 946, 947, 951, 952, 954, 955, 957, 964, 966, 969, 972, 975, 976, 979, 980, 982, 983, 984, 986, 987], "thank": [0, 4, 16, 23, 78, 153, 156, 179, 244, 336, 345, 955, 972, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "funder": 0, "member": [0, 310, 311, 332, 337, 340, 351, 362, 377, 393, 398, 401, 403, 442, 505, 506, 513, 531, 608, 609, 616, 618, 626, 627, 628, 654, 655, 665, 667, 680, 685, 686, 706, 735, 742, 746, 847, 927, 934, 957, 972, 984, 987], "consortium": [0, 955], "foundat": [0, 118, 337, 934], "face": [0, 3, 32, 49, 84, 88, 106, 148, 205, 330, 337, 341, 362, 367, 369, 371, 399, 422, 443, 444, 445, 471, 482, 483, 487, 489, 490, 491, 508, 534, 607, 623, 663, 760, 774, 791, 828, 852, 870, 934, 947, 948, 949, 960, 965, 968, 972, 980], "2022": [0, 324, 369, 655, 986, 987], "microsoft": [0, 12, 335, 338, 353], "m\u00fcller": [0, 28, 274, 275, 351, 367, 485, 814, 935, 941, 945, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 986], "2020": [0, 332, 982, 983, 984, 985], "quansight": 0, "lab": [0, 332, 418, 486, 845, 955, 983], "2021": [0, 335, 337, 353, 621, 984, 985], "columbia": 0, "univers": [0, 143, 332, 334, 340, 362, 367, 370, 540, 737, 783, 787, 842, 927, 929, 931, 933], "2016": [0, 204, 331, 362, 920, 977, 978], "sydnei": 0, "2017": [0, 235, 331, 360, 362, 373, 395, 931, 978, 979], "receiv": [0, 123, 148, 228, 232, 312, 319, 337, 339, 345, 350, 366, 369, 454, 608, 652, 656, 658, 676, 731, 737, 738, 765, 774, 776, 777, 815, 852, 932, 935, 936, 945, 982, 983], "improv": [0, 4, 22, 23, 30, 71, 72, 75, 90, 96, 99, 100, 107, 109, 110, 111, 113, 118, 129, 147, 151, 156, 165, 179, 187, 197, 236, 238, 253, 271, 278, 301, 311, 319, 324, 335, 340, 342, 343, 345, 346, 348, 350, 351, 356, 361, 367, 369, 371, 399, 400, 481, 482, 484, 487, 488, 489, 491, 492, 493, 496, 504, 507, 508, 509, 510, 511, 512, 514, 515, 552, 560, 561, 593, 602, 614, 616, 617, 618, 622, 623, 624, 625, 626, 628, 635, 637, 642, 678, 679, 733, 736, 737, 797, 805, 806, 822, 824, 835, 855, 856, 858, 884, 925, 927, 928, 931, 934, 935, 945, 946, 947, 950, 951, 952, 955, 964, 972, 973, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 15, 22, 23, 25, 31, 62, 96, 115, 120, 150, 151, 164, 174, 179, 180, 181, 197, 202, 210, 215, 232, 235, 238, 242, 244, 245, 273, 281, 282, 310, 318, 323, 332, 336, 337, 339, 344, 346, 350, 351, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 374, 389, 390, 393, 397, 399, 414, 417, 444, 448, 450, 454, 458, 459, 460, 475, 477, 479, 480, 481, 483, 485, 486, 487, 492, 495, 496, 498, 499, 500, 511, 512, 513, 542, 543, 544, 545, 546, 548, 549, 550, 556, 560, 561, 570, 582, 593, 596, 597, 598, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 619, 622, 623, 624, 625, 627, 630, 631, 632, 633, 634, 637, 640, 648, 650, 652, 657, 659, 662, 663, 665, 668, 670, 673, 676, 678, 679, 680, 684, 685, 687, 688, 689, 690, 691, 692, 693, 701, 703, 707, 731, 732, 733, 736, 737, 738, 744, 745, 749, 750, 771, 788, 789, 794, 811, 812, 815, 821, 824, 827, 831, 835, 839, 840, 842, 843, 847, 848, 851, 852, 853, 864, 882, 884, 896, 898, 922, 923, 927, 929, 931, 932, 934, 935, 936, 938, 941, 946, 962, 964, 966, 973, 975, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988], "It": [0, 4, 7, 8, 9, 15, 23, 33, 36, 49, 53, 66, 71, 73, 75, 85, 88, 89, 95, 102, 104, 107, 111, 118, 133, 140, 141, 142, 146, 147, 151, 152, 153, 159, 167, 168, 176, 179, 193, 196, 197, 199, 200, 206, 211, 230, 231, 233, 235, 236, 238, 241, 242, 253, 256, 259, 260, 261, 263, 264, 266, 273, 277, 278, 280, 294, 298, 306, 310, 311, 312, 318, 319, 323, 324, 325, 330, 332, 334, 335, 337, 339, 341, 342, 343, 345, 346, 348, 349, 350, 353, 356, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 385, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 402, 409, 412, 417, 419, 424, 428, 435, 437, 446, 458, 465, 474, 483, 485, 486, 488, 490, 491, 499, 500, 503, 504, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 539, 546, 552, 556, 557, 558, 561, 564, 565, 569, 570, 572, 573, 577, 580, 581, 582, 583, 591, 592, 593, 596, 597, 600, 602, 603, 604, 605, 608, 610, 611, 612, 613, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 631, 632, 633, 634, 637, 639, 641, 642, 643, 645, 646, 647, 648, 650, 652, 654, 658, 659, 660, 666, 672, 683, 691, 692, 696, 707, 708, 711, 714, 730, 732, 746, 748, 749, 750, 752, 758, 759, 760, 784, 785, 790, 791, 792, 794, 797, 798, 799, 800, 804, 805, 806, 810, 811, 812, 816, 817, 818, 822, 825, 827, 836, 839, 840, 844, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 871, 884, 899, 902, 905, 907, 908, 909, 910, 911, 912, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 941, 942, 944, 945, 946, 947, 951, 955, 957, 963, 964, 965, 966, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "provid": [0, 5, 8, 11, 22, 25, 33, 38, 55, 74, 85, 105, 106, 116, 118, 135, 141, 151, 152, 158, 165, 167, 168, 180, 200, 204, 207, 208, 226, 235, 236, 237, 241, 263, 266, 270, 273, 277, 280, 281, 283, 285, 296, 310, 311, 314, 319, 323, 325, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 343, 345, 346, 348, 349, 350, 352, 353, 356, 358, 359, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 382, 388, 391, 393, 394, 395, 397, 399, 400, 402, 443, 444, 446, 448, 451, 482, 483, 484, 488, 490, 497, 501, 502, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 538, 541, 543, 544, 551, 555, 561, 577, 582, 583, 584, 593, 596, 597, 602, 606, 607, 608, 609, 610, 611, 612, 613, 616, 618, 621, 623, 626, 627, 628, 631, 644, 649, 661, 684, 690, 713, 723, 727, 737, 741, 745, 746, 748, 749, 750, 751, 753, 754, 755, 756, 758, 759, 760, 765, 766, 767, 777, 779, 782, 783, 784, 785, 786, 787, 790, 791, 792, 794, 795, 796, 798, 799, 800, 818, 819, 823, 825, 843, 847, 848, 851, 852, 855, 856, 857, 858, 862, 873, 878, 892, 907, 908, 909, 920, 921, 923, 926, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 941, 944, 945, 946, 947, 948, 951, 952, 955, 957, 961, 964, 966, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "2012": [0, 74, 360, 369, 505, 506, 513, 589, 692, 920, 924, 931, 950, 972], "full": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 323, 324, 325, 330, 332, 335, 337, 342, 345, 348, 350, 351, 353, 361, 362, 364, 366, 367, 370, 392, 396, 397, 399, 409, 438, 439, 442, 446, 447, 450, 451, 452, 453, 454, 455, 457, 460, 485, 487, 491, 509, 510, 517, 518, 582, 598, 600, 604, 619, 630, 671, 672, 677, 694, 695, 697, 699, 700, 702, 734, 744, 745, 757, 785, 873, 920, 927, 930, 933, 934, 938, 941, 944, 952, 964, 972, 976, 978, 980, 982, 983, 985, 986], "time": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 314, 315, 316, 317, 318, 319, 323, 324, 325, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 345, 348, 350, 351, 353, 358, 359, 360, 361, 362, 364, 365, 367, 369, 370, 372, 373, 388, 392, 394, 395, 396, 397, 400, 402, 405, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 422, 446, 449, 451, 469, 473, 484, 486, 488, 490, 497, 512, 517, 518, 519, 520, 540, 560, 569, 577, 578, 579, 580, 584, 589, 590, 593, 596, 600, 602, 604, 610, 612, 614, 616, 617, 623, 626, 627, 628, 635, 636, 640, 642, 644, 741, 744, 745, 746, 748, 749, 750, 751, 753, 755, 760, 761, 762, 765, 767, 769, 770, 771, 772, 773, 776, 778, 783, 784, 785, 786, 787, 788, 789, 796, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 818, 821, 822, 823, 827, 831, 839, 840, 844, 845, 849, 852, 853, 861, 886, 897, 920, 921, 923, 924, 927, 928, 930, 931, 932, 933, 934, 935, 936, 938, 939, 941, 943, 944, 945, 946, 947, 951, 955, 957, 962, 964, 965, 966, 972, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "host": [0, 332, 337, 341, 345, 346, 840, 899, 966], "other": [0, 4, 8, 12, 22, 25, 27, 28, 30, 33, 36, 40, 48, 52, 61, 63, 66, 78, 87, 88, 90, 93, 102, 104, 107, 108, 112, 114, 120, 128, 146, 147, 148, 150, 151, 152, 153, 156, 158, 172, 179, 197, 199, 200, 201, 203, 206, 207, 208, 210, 212, 216, 219, 223, 226, 230, 232, 235, 236, 237, 244, 245, 258, 259, 260, 273, 277, 278, 280, 281, 283, 287, 298, 305, 308, 310, 311, 314, 318, 319, 323, 329, 330, 332, 333, 334, 337, 339, 341, 342, 343, 345, 346, 349, 350, 351, 353, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 395, 398, 400, 402, 407, 419, 438, 447, 453, 484, 485, 491, 499, 501, 502, 510, 511, 512, 517, 518, 531, 538, 539, 541, 547, 552, 560, 561, 562, 563, 570, 577, 578, 580, 589, 593, 602, 608, 609, 621, 622, 623, 624, 625, 626, 629, 637, 642, 646, 649, 654, 668, 712, 723, 727, 734, 739, 746, 749, 750, 751, 752, 753, 755, 760, 763, 765, 768, 769, 770, 771, 772, 773, 775, 777, 795, 803, 808, 820, 824, 828, 835, 847, 848, 849, 850, 851, 852, 853, 878, 920, 921, 923, 924, 925, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 944, 945, 946, 947, 949, 952, 954, 955, 957, 961, 964, 965, 968, 973, 975, 976, 978, 979, 980, 981, 985, 986, 987], "event": [0, 4, 15, 179, 197, 238, 362, 538, 539, 586, 783, 872, 927, 932, 933, 951, 955, 978], "pari": [0, 334, 363, 416, 713, 816, 942, 986], "saclai": 0, "center": [0, 4, 7, 8, 9, 13, 22, 24, 30, 33, 34, 36, 38, 39, 41, 44, 45, 49, 51, 54, 55, 56, 58, 59, 74, 82, 90, 92, 95, 109, 110, 111, 112, 147, 152, 160, 171, 173, 179, 180, 190, 191, 202, 203, 206, 207, 221, 224, 225, 236, 246, 258, 261, 263, 269, 273, 275, 276, 284, 289, 296, 298, 299, 300, 305, 311, 312, 332, 333, 334, 342, 361, 362, 364, 365, 367, 368, 369, 375, 391, 393, 394, 397, 398, 399, 402, 404, 409, 410, 411, 412, 413, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 451, 462, 474, 484, 485, 491, 494, 500, 556, 559, 560, 561, 582, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 628, 640, 644, 744, 813, 814, 817, 826, 828, 837, 838, 847, 848, 925, 927, 928, 930, 938, 973, 975, 976, 977, 978, 979, 980, 983, 984, 985, 986], "scienc": [0, 34, 73, 143, 331, 334, 348, 362, 391, 404, 488, 490, 497, 638, 639, 643, 795, 921, 923, 927, 928, 931, 934, 943, 952, 955, 960, 980], "onenyu": [0, 109, 161, 797], "moor": [0, 684, 931, 955], "environ": [0, 323, 332, 334, 335, 337, 343, 345, 348, 353, 356, 363, 449, 951, 952, 955, 979, 980], "student": [0, 87, 235, 928, 952, 955], "t\u00e9l\u00e9com": [0, 949], "paristech": [0, 22, 23, 38, 206, 949], "rv": [0, 109, 239, 273, 750, 758, 760, 920, 972, 973, 976, 977, 978, 979, 980], "thierri": [0, 221, 223, 955, 978, 979, 986], "guillemot": [0, 221, 223, 978, 979], "labex": 0, "digicosm": 0, "goix": [0, 976, 978, 979, 980, 981], "mathurin": [0, 983, 985, 986], "massia": [0, 983, 985, 986], "2019": [0, 152, 335, 362, 402, 412, 642, 928, 938, 941, 980, 981, 982], "dure": [0, 4, 5, 12, 46, 53, 66, 69, 78, 90, 103, 108, 115, 130, 135, 140, 151, 152, 154, 168, 180, 187, 233, 237, 253, 282, 283, 323, 325, 335, 337, 339, 342, 350, 351, 362, 363, 367, 369, 370, 372, 373, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 563, 564, 565, 567, 569, 570, 572, 573, 575, 577, 578, 579, 580, 582, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 738, 744, 745, 746, 749, 750, 760, 769, 770, 771, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 835, 838, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 920, 921, 923, 927, 928, 934, 941, 943, 961, 966, 968, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988], "phd": [0, 362, 369, 952, 955], "chan": [0, 786, 828], "zuckerberg": 0, "initi": [0, 7, 12, 16, 32, 41, 52, 53, 55, 59, 74, 112, 119, 120, 121, 136, 141, 148, 151, 159, 172, 194, 199, 200, 204, 220, 223, 235, 253, 282, 289, 298, 311, 319, 324, 332, 337, 339, 345, 346, 348, 350, 362, 367, 369, 371, 372, 374, 393, 394, 397, 398, 399, 400, 401, 402, 403, 409, 410, 411, 412, 428, 462, 465, 481, 482, 483, 487, 488, 490, 493, 495, 496, 497, 498, 503, 504, 509, 510, 543, 557, 558, 560, 561, 569, 570, 577, 590, 595, 596, 597, 598, 602, 603, 608, 610, 611, 612, 613, 616, 617, 618, 619, 621, 626, 627, 628, 630, 631, 634, 640, 641, 642, 644, 645, 744, 745, 778, 797, 804, 805, 806, 843, 870, 883, 884, 900, 905, 906, 923, 927, 928, 935, 936, 937, 945, 947, 951, 963, 965, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "were": [0, 4, 29, 65, 68, 73, 74, 108, 111, 130, 133, 140, 147, 179, 180, 207, 244, 246, 270, 271, 278, 281, 282, 284, 285, 290, 310, 312, 318, 319, 331, 332, 334, 337, 338, 341, 348, 350, 359, 363, 369, 370, 414, 417, 418, 446, 511, 512, 538, 541, 552, 749, 750, 765, 772, 844, 845, 881, 920, 931, 932, 947, 954, 965, 966, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "through": [0, 7, 104, 108, 143, 151, 199, 211, 230, 235, 238, 258, 277, 278, 296, 303, 312, 318, 334, 335, 337, 339, 344, 346, 350, 351, 353, 362, 365, 367, 369, 371, 372, 414, 417, 422, 485, 507, 508, 511, 514, 515, 516, 531, 543, 544, 547, 597, 601, 603, 605, 608, 609, 611, 613, 615, 618, 626, 627, 638, 641, 670, 752, 824, 835, 839, 840, 855, 856, 857, 858, 890, 920, 921, 928, 931, 933, 934, 935, 937, 939, 941, 945, 946, 947, 955, 957, 964, 966, 972, 978, 979, 980, 981, 983, 984, 985, 987], "program": [0, 46, 319, 324, 325, 334, 335, 337, 343, 348, 458, 585, 620, 837, 838, 927, 946, 947, 951, 952, 972, 974], "immanuel": [0, 972, 973, 977], "bayer": [0, 972, 973, 977], "kemal": [0, 19, 20, 974, 975], "eren": [0, 19, 20, 974, 975], "tr\u00e9segni": [0, 974], "hamzeh": [0, 975, 976], "alsalhi": [0, 975, 976], "issam": [0, 268, 978], "laradji": [0, 268, 978], "maheshakya": [0, 975, 976, 977], "wijewardena": [0, 975, 976, 977], "xue": [0, 976, 977, 978, 980, 981, 984], "nelson": [0, 978, 979, 984], "yenchen": [0, 978], "lin": [0, 484, 608, 946, 977, 978, 979, 980], "neurodebian": 0, "debian": [0, 323, 335, 343], "packag": [0, 42, 49, 146, 253, 324, 330, 331, 334, 335, 337, 338, 339, 341, 343, 346, 348, 350, 353, 364, 369, 370, 402, 428, 596, 597, 899, 921, 927, 930, 934, 941, 947, 955, 960, 972, 978, 980, 981, 982], "dr": [0, 334, 362, 986], "jame": [0, 334, 366, 778, 932, 972, 973, 974, 975, 978, 979, 980, 981, 982, 984, 985], "haxbi": 0, "dartmouth": 0, "colleg": [0, 150], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 18, 22, 23, 25, 33, 40, 46, 49, 51, 53, 57, 62, 65, 68, 71, 73, 74, 78, 81, 85, 100, 101, 111, 114, 115, 118, 119, 129, 135, 137, 140, 141, 142, 143, 144, 146, 147, 148, 151, 152, 153, 154, 156, 158, 160, 162, 167, 168, 169, 173, 174, 179, 180, 187, 188, 193, 196, 197, 199, 201, 206, 210, 215, 222, 223, 224, 229, 230, 235, 236, 237, 238, 241, 243, 256, 259, 260, 264, 269, 270, 273, 278, 281, 282, 283, 284, 285, 294, 295, 297, 298, 306, 308, 310, 311, 312, 318, 319, 323, 324, 325, 330, 331, 332, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 353, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 383, 394, 397, 399, 401, 403, 409, 413, 415, 432, 433, 434, 449, 458, 459, 465, 473, 474, 484, 486, 491, 498, 504, 506, 507, 508, 509, 510, 511, 512, 514, 515, 517, 518, 520, 522, 524, 538, 556, 559, 561, 582, 583, 585, 589, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 620, 622, 623, 628, 629, 632, 633, 639, 642, 643, 647, 648, 650, 651, 652, 657, 658, 665, 670, 675, 676, 687, 688, 689, 695, 703, 705, 706, 712, 731, 733, 736, 737, 738, 741, 744, 764, 765, 781, 782, 783, 784, 785, 786, 787, 791, 799, 806, 808, 815, 848, 850, 853, 855, 856, 857, 858, 867, 868, 899, 920, 921, 923, 926, 927, 928, 930, 931, 932, 933, 934, 935, 937, 938, 941, 944, 945, 946, 947, 950, 951, 952, 954, 955, 957, 962, 964, 965, 966, 969, 972, 973, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "particip": [0, 336, 337, 351, 955], "could": [0, 4, 9, 13, 25, 33, 38, 49, 65, 66, 85, 88, 100, 101, 108, 111, 130, 135, 140, 147, 150, 151, 152, 179, 180, 188, 197, 203, 211, 212, 229, 235, 256, 261, 264, 283, 294, 295, 310, 314, 325, 337, 343, 345, 350, 353, 356, 360, 366, 369, 370, 374, 424, 483, 488, 557, 558, 579, 621, 748, 753, 755, 920, 921, 927, 928, 938, 939, 941, 946, 952, 965, 969, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986], "attend": 0, "psf": [0, 337], "dataia": 0, "possibl": [0, 4, 16, 24, 33, 45, 65, 71, 85, 102, 115, 135, 151, 152, 153, 179, 183, 196, 197, 211, 235, 236, 237, 238, 240, 241, 242, 244, 245, 252, 280, 298, 306, 310, 311, 319, 323, 324, 325, 330, 331, 332, 335, 337, 338, 339, 340, 341, 343, 345, 348, 349, 350, 353, 356, 359, 360, 361, 362, 363, 365, 366, 367, 369, 370, 372, 374, 376, 383, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 412, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 446, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 637, 638, 639, 640, 641, 642, 654, 659, 671, 672, 673, 677, 705, 706, 727, 732, 734, 737, 744, 745, 746, 748, 749, 750, 752, 758, 759, 760, 764, 765, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 865, 867, 868, 871, 876, 899, 902, 905, 920, 923, 926, 927, 928, 930, 931, 932, 933, 934, 939, 941, 946, 947, 952, 955, 957, 964, 965, 966, 972, 973, 975, 976, 977, 978, 979, 980, 982, 983, 985, 986, 987, 988], "tinyclu": 0, "french": [0, 197], "associ": [0, 11, 22, 23, 73, 135, 150, 151, 224, 287, 289, 310, 345, 362, 364, 366, 367, 369, 370, 399, 419, 420, 421, 422, 423, 424, 425, 426, 443, 444, 445, 474, 507, 511, 514, 555, 556, 580, 595, 608, 609, 616, 618, 624, 625, 626, 639, 645, 649, 680, 688, 771, 791, 799, 813, 825, 836, 844, 853, 855, 857, 873, 930, 931, 934, 941, 944, 955, 965, 972, 984], "fond": [0, 955], "de": [0, 12, 22, 23, 24, 25, 68, 103, 118, 135, 136, 138, 139, 140, 141, 142, 144, 170, 211, 212, 289, 306, 334, 585, 638, 713, 927, 928, 952, 973, 974, 975, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 38, 40, 46, 57, 61, 66, 106, 111, 118, 130, 140, 146, 152, 153, 168, 179, 180, 181, 197, 200, 211, 229, 232, 235, 236, 238, 244, 298, 306, 311, 318, 323, 332, 334, 337, 342, 343, 345, 348, 351, 362, 364, 367, 370, 372, 443, 444, 450, 454, 460, 596, 597, 847, 921, 927, 928, 931, 936, 937, 938, 952, 955, 962, 964, 965, 972], "our": [0, 4, 5, 7, 11, 12, 38, 49, 51, 64, 65, 73, 74, 78, 85, 86, 98, 100, 105, 108, 111, 112, 128, 133, 135, 140, 142, 150, 151, 152, 153, 154, 179, 197, 201, 203, 229, 235, 238, 241, 242, 270, 273, 281, 283, 292, 295, 301, 302, 303, 306, 310, 311, 312, 319, 324, 336, 341, 342, 345, 348, 349, 350, 351, 362, 366, 369, 370, 373, 395, 400, 513, 594, 642, 658, 670, 675, 687, 705, 790, 791, 792, 794, 796, 798, 799, 800, 920, 921, 927, 928, 931, 937, 941, 944, 945, 946, 952, 955, 957, 964, 965, 966, 979, 980, 982, 983, 986, 987], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 323, 324, 329, 334, 335, 338, 339, 341, 345, 348, 349, 350, 351, 353, 356, 359, 360, 362, 363, 365, 366, 367, 371, 372, 388, 451, 485, 489, 491, 493, 496, 509, 510, 561, 566, 571, 574, 588, 589, 590, 591, 606, 616, 618, 623, 626, 637, 639, 642, 643, 649, 659, 746, 768, 776, 777, 778, 780, 786, 794, 805, 809, 828, 920, 925, 927, 928, 930, 931, 932, 938, 939, 945, 946, 952, 955, 957, 968, 972, 976, 977, 980, 984, 985, 986, 987, 988], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 13, 15, 18, 22, 23, 25, 31, 34, 35, 36, 38, 39, 44, 48, 49, 50, 55, 59, 69, 75, 82, 85, 87, 88, 99, 104, 106, 107, 111, 120, 121, 133, 140, 141, 143, 148, 150, 151, 152, 158, 165, 171, 172, 173, 179, 180, 181, 182, 188, 190, 194, 196, 197, 199, 200, 206, 212, 216, 219, 222, 224, 226, 233, 236, 237, 238, 239, 241, 242, 243, 245, 247, 252, 253, 258, 270, 273, 274, 278, 280, 281, 282, 283, 285, 287, 289, 290, 291, 295, 298, 303, 307, 310, 311, 312, 315, 318, 319, 323, 324, 325, 330, 332, 333, 334, 335, 337, 339, 341, 342, 343, 345, 346, 348, 349, 350, 351, 358, 359, 360, 361, 362, 363, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 379, 380, 381, 383, 384, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 453, 458, 459, 465, 477, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 533, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 650, 651, 652, 655, 659, 663, 664, 665, 666, 667, 668, 670, 671, 672, 675, 677, 678, 679, 681, 682, 684, 685, 686, 687, 694, 695, 697, 699, 700, 702, 705, 710, 718, 723, 727, 730, 731, 732, 733, 734, 735, 736, 737, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 752, 753, 755, 756, 758, 760, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 867, 868, 869, 873, 875, 876, 877, 878, 889, 894, 899, 906, 915, 920, 921, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 936, 938, 941, 944, 945, 946, 947, 951, 952, 955, 957, 958, 960, 961, 963, 964, 965, 966, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986], "handl": [0, 4, 65, 108, 114, 118, 156, 212, 237, 242, 244, 253, 280, 310, 312, 323, 329, 331, 335, 337, 338, 339, 346, 348, 350, 370, 446, 494, 527, 531, 532, 535, 536, 538, 539, 541, 560, 585, 596, 597, 602, 608, 609, 610, 611, 612, 618, 625, 626, 628, 631, 670, 737, 812, 821, 822, 847, 852, 859, 885, 928, 931, 932, 933, 934, 937, 939, 946, 947, 951, 952, 955, 968, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "non": [0, 3, 5, 9, 10, 13, 22, 23, 30, 33, 45, 52, 57, 69, 73, 75, 86, 87, 88, 90, 98, 101, 108, 115, 116, 118, 129, 130, 132, 139, 141, 147, 148, 151, 152, 153, 157, 158, 165, 172, 173, 178, 180, 181, 183, 185, 194, 195, 197, 202, 203, 207, 208, 209, 210, 212, 221, 223, 227, 228, 229, 235, 244, 253, 257, 271, 273, 275, 277, 278, 281, 282, 283, 284, 291, 293, 295, 300, 301, 306, 307, 310, 311, 312, 318, 319, 323, 324, 329, 332, 333, 337, 338, 339, 342, 343, 345, 346, 348, 350, 351, 360, 361, 362, 363, 366, 368, 369, 370, 371, 372, 374, 388, 392, 396, 400, 402, 406, 412, 413, 414, 415, 417, 418, 438, 446, 447, 453, 454, 458, 476, 482, 485, 486, 488, 490, 494, 497, 499, 501, 502, 503, 507, 508, 509, 510, 511, 512, 514, 515, 516, 522, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 585, 588, 593, 600, 602, 607, 608, 609, 610, 614, 615, 616, 618, 619, 622, 626, 627, 628, 635, 636, 637, 638, 639, 640, 641, 642, 644, 648, 649, 652, 656, 657, 662, 665, 667, 669, 670, 675, 676, 677, 684, 686, 688, 689, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 731, 734, 737, 738, 741, 744, 745, 746, 747, 751, 753, 754, 755, 756, 758, 764, 770, 774, 777, 796, 798, 799, 800, 803, 808, 809, 811, 812, 813, 816, 820, 821, 822, 823, 824, 825, 827, 828, 834, 835, 836, 837, 838, 840, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 867, 868, 882, 884, 888, 890, 894, 920, 921, 922, 923, 924, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 942, 943, 944, 945, 946, 947, 952, 964, 965, 966, 967, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "profit": 0, "organ": [0, 11, 73, 331, 336, 337, 351, 796, 951], "which": [0, 4, 7, 10, 12, 13, 14, 15, 16, 18, 20, 23, 24, 25, 33, 35, 36, 39, 40, 42, 45, 49, 51, 52, 53, 60, 62, 64, 65, 66, 69, 71, 73, 74, 78, 83, 87, 89, 90, 91, 96, 102, 103, 104, 108, 109, 110, 111, 114, 116, 117, 118, 119, 120, 121, 123, 128, 130, 132, 133, 135, 136, 140, 141, 142, 146, 147, 150, 151, 152, 154, 156, 158, 159, 168, 172, 179, 180, 181, 185, 187, 193, 195, 196, 197, 199, 200, 201, 203, 206, 207, 210, 211, 212, 213, 215, 216, 221, 222, 226, 227, 229, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 252, 253, 258, 259, 260, 269, 273, 275, 276, 277, 278, 280, 282, 283, 284, 285, 287, 289, 290, 291, 298, 308, 310, 311, 312, 314, 318, 319, 323, 324, 325, 329, 331, 332, 334, 335, 337, 338, 339, 341, 342, 343, 345, 346, 348, 349, 350, 351, 352, 353, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 412, 413, 414, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 437, 473, 481, 482, 483, 484, 487, 488, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 523, 524, 529, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 560, 561, 562, 563, 564, 565, 567, 569, 572, 577, 578, 579, 580, 582, 583, 584, 590, 592, 593, 594, 597, 598, 599, 602, 604, 605, 606, 608, 609, 611, 616, 618, 619, 621, 623, 624, 625, 626, 627, 628, 630, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 657, 659, 666, 667, 669, 670, 672, 674, 675, 683, 684, 685, 686, 692, 695, 705, 707, 727, 728, 729, 730, 731, 732, 738, 744, 745, 746, 749, 750, 751, 752, 754, 756, 760, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 798, 799, 800, 801, 802, 805, 808, 812, 815, 819, 821, 823, 826, 827, 828, 829, 831, 839, 840, 842, 843, 844, 847, 849, 852, 853, 855, 856, 857, 858, 859, 863, 876, 879, 883, 884, 886, 899, 900, 903, 906, 912, 915, 920, 921, 922, 923, 924, 925, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 943, 944, 945, 946, 947, 950, 951, 952, 955, 957, 959, 961, 964, 965, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "manag": [0, 78, 219, 322, 331, 335, 338, 339, 341, 345, 348, 350, 351, 369, 400, 418, 576, 845, 925, 947, 952, 955, 966, 968, 985], "board": 0, "scipi": [0, 13, 16, 18, 31, 37, 42, 43, 49, 50, 71, 72, 75, 86, 88, 91, 93, 110, 151, 154, 165, 169, 181, 222, 226, 227, 232, 235, 243, 247, 253, 258, 263, 271, 281, 282, 287, 288, 323, 331, 332, 335, 337, 339, 343, 346, 348, 349, 350, 353, 355, 362, 367, 370, 400, 401, 402, 403, 407, 412, 413, 446, 453, 458, 482, 484, 485, 491, 494, 531, 532, 535, 536, 538, 539, 560, 561, 598, 599, 603, 607, 608, 609, 613, 616, 618, 619, 620, 622, 624, 626, 627, 628, 630, 634, 637, 641, 642, 645, 649, 709, 712, 727, 728, 729, 730, 739, 740, 750, 758, 760, 774, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 811, 820, 826, 827, 828, 830, 834, 837, 838, 847, 849, 850, 852, 853, 886, 902, 905, 920, 921, 927, 929, 932, 934, 935, 941, 945, 946, 950, 952, 960, 965, 966, 974, 976, 978, 979, 980, 981, 982, 984, 985, 986, 987], "mission": [0, 955], "foster": [0, 980], "comput": [0, 4, 6, 7, 11, 13, 24, 33, 35, 37, 38, 42, 48, 50, 52, 53, 55, 56, 64, 66, 72, 73, 74, 75, 86, 95, 98, 102, 105, 106, 110, 111, 112, 113, 132, 135, 140, 142, 143, 146, 151, 152, 153, 154, 156, 159, 160, 164, 165, 166, 167, 168, 179, 181, 187, 193, 196, 197, 200, 203, 207, 209, 210, 212, 215, 216, 218, 231, 233, 235, 236, 237, 238, 242, 244, 246, 253, 255, 257, 259, 260, 262, 263, 266, 273, 280, 284, 285, 288, 290, 298, 306, 310, 311, 312, 318, 324, 325, 326, 331, 332, 334, 337, 342, 343, 344, 346, 348, 349, 350, 352, 353, 356, 357, 359, 360, 361, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 407, 409, 411, 412, 413, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 466, 481, 482, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 524, 532, 535, 536, 539, 540, 541, 543, 544, 553, 554, 555, 556, 559, 560, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 577, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 665, 666, 667, 668, 669, 670, 674, 675, 676, 678, 679, 680, 683, 685, 687, 688, 689, 691, 692, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 776, 777, 778, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 804, 805, 806, 813, 814, 817, 818, 823, 824, 825, 826, 827, 828, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 881, 882, 883, 884, 896, 897, 904, 906, 912, 920, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 941, 943, 944, 945, 946, 947, 951, 952, 955, 961, 962, 965, 966, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "particular": [0, 4, 11, 13, 33, 35, 36, 55, 65, 71, 83, 90, 94, 108, 111, 114, 139, 146, 151, 152, 179, 181, 187, 211, 215, 232, 236, 238, 244, 253, 262, 266, 273, 280, 281, 284, 311, 312, 319, 323, 331, 332, 335, 336, 337, 339, 341, 342, 343, 345, 346, 349, 350, 353, 362, 366, 367, 369, 370, 371, 372, 419, 423, 446, 494, 513, 559, 603, 608, 613, 622, 624, 634, 637, 662, 677, 734, 780, 795, 866, 868, 921, 923, 925, 927, 931, 934, 935, 936, 937, 939, 941, 952, 955, 965, 972, 975, 979, 980, 981, 983, 985, 986, 987], "As": [0, 4, 7, 23, 25, 27, 36, 39, 49, 52, 53, 61, 75, 78, 90, 99, 100, 105, 108, 110, 112, 117, 128, 135, 140, 147, 151, 153, 156, 158, 161, 168, 170, 179, 183, 187, 197, 204, 224, 230, 232, 233, 235, 236, 238, 248, 252, 258, 274, 283, 290, 298, 311, 312, 314, 316, 317, 319, 323, 324, 332, 335, 336, 337, 339, 341, 342, 349, 350, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 443, 504, 512, 516, 569, 582, 605, 606, 622, 624, 637, 684, 707, 713, 790, 791, 792, 794, 796, 827, 920, 925, 927, 928, 930, 931, 932, 934, 938, 941, 945, 946, 947, 952, 955, 957, 961, 964, 965, 966, 972, 978, 983, 988], "fiscal": 0, "home": [0, 12, 118, 332, 335, 345, 353, 361, 436, 449, 629, 955], "ensur": [0, 37, 52, 75, 83, 105, 154, 179, 200, 230, 238, 270, 318, 319, 323, 324, 337, 339, 341, 342, 343, 351, 353, 360, 362, 363, 366, 374, 419, 483, 484, 491, 561, 577, 646, 655, 731, 738, 769, 840, 867, 868, 884, 890, 897, 927, 928, 931, 941, 947, 961, 974, 976, 977, 979, 980, 982, 983, 984, 985, 986, 987, 988], "monei": [0, 197, 955], "when": [0, 4, 9, 10, 11, 22, 23, 24, 25, 35, 36, 39, 51, 55, 62, 64, 65, 66, 71, 73, 74, 78, 85, 88, 89, 90, 93, 102, 107, 108, 109, 111, 114, 118, 119, 120, 130, 135, 146, 150, 151, 152, 153, 154, 158, 159, 168, 170, 172, 176, 179, 181, 184, 195, 206, 207, 208, 212, 219, 222, 224, 231, 234, 235, 236, 237, 238, 242, 244, 245, 253, 255, 259, 260, 261, 273, 275, 277, 278, 280, 281, 282, 283, 284, 289, 290, 292, 298, 301, 302, 306, 310, 311, 312, 314, 319, 323, 324, 325, 331, 332, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 353, 356, 359, 360, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 378, 383, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 439, 440, 441, 442, 446, 450, 451, 452, 453, 454, 455, 458, 459, 460, 462, 465, 474, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 528, 531, 532, 533, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 556, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 650, 651, 652, 654, 655, 657, 658, 662, 663, 666, 676, 677, 678, 679, 681, 683, 684, 687, 691, 695, 697, 700, 703, 704, 706, 710, 712, 716, 717, 718, 720, 723, 727, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 742, 744, 745, 746, 749, 750, 751, 752, 760, 764, 765, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 834, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 866, 867, 868, 874, 878, 882, 883, 884, 885, 887, 888, 891, 899, 900, 920, 921, 923, 925, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 941, 943, 944, 945, 946, 947, 952, 955, 957, 963, 964, 965, 966, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "need": [0, 4, 9, 12, 29, 42, 44, 49, 52, 75, 87, 108, 110, 111, 112, 118, 133, 135, 140, 146, 147, 151, 167, 181, 196, 197, 200, 206, 209, 211, 216, 221, 222, 226, 227, 233, 235, 237, 238, 240, 253, 255, 278, 280, 290, 298, 306, 311, 319, 323, 324, 325, 331, 332, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 356, 359, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 378, 388, 392, 396, 399, 415, 453, 491, 501, 522, 532, 533, 538, 539, 540, 541, 577, 585, 588, 589, 590, 592, 599, 616, 618, 621, 626, 629, 642, 670, 671, 672, 673, 730, 734, 744, 745, 746, 749, 750, 760, 761, 762, 769, 777, 780, 788, 789, 805, 808, 811, 815, 820, 821, 825, 842, 849, 852, 920, 921, 923, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 941, 942, 944, 945, 946, 947, 952, 955, 963, 964, 965, 966, 972, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "keep": [0, 6, 38, 69, 88, 90, 132, 146, 150, 151, 152, 153, 154, 179, 180, 181, 187, 197, 226, 230, 233, 277, 278, 283, 288, 298, 310, 311, 314, 319, 323, 324, 329, 337, 341, 349, 350, 362, 363, 364, 365, 366, 367, 383, 400, 415, 432, 433, 434, 435, 443, 444, 484, 490, 491, 494, 497, 504, 506, 508, 510, 512, 515, 518, 520, 545, 548, 550, 552, 553, 561, 584, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 622, 623, 626, 627, 628, 629, 658, 764, 781, 782, 791, 799, 805, 806, 843, 848, 850, 853, 856, 858, 927, 932, 936, 939, 941, 952, 955, 957, 962, 964, 966, 968, 972, 977, 980, 981, 985, 986], "while": [0, 4, 7, 8, 10, 12, 16, 22, 25, 31, 33, 35, 39, 40, 44, 57, 61, 67, 69, 83, 89, 90, 99, 102, 105, 115, 118, 133, 136, 141, 143, 144, 146, 150, 151, 152, 153, 156, 158, 160, 168, 173, 179, 181, 195, 206, 209, 210, 213, 222, 223, 227, 229, 230, 234, 235, 236, 238, 242, 243, 244, 245, 246, 248, 255, 273, 274, 275, 278, 280, 283, 295, 298, 310, 312, 318, 319, 324, 329, 330, 331, 332, 333, 336, 337, 339, 341, 342, 343, 345, 346, 348, 350, 351, 356, 360, 361, 362, 365, 366, 367, 369, 370, 371, 372, 373, 374, 395, 414, 417, 418, 433, 435, 446, 471, 482, 502, 507, 508, 509, 510, 514, 515, 516, 517, 518, 519, 520, 525, 532, 538, 539, 540, 541, 544, 547, 556, 584, 593, 596, 597, 599, 606, 607, 608, 609, 626, 627, 628, 629, 658, 678, 679, 687, 703, 723, 727, 732, 733, 736, 737, 741, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 763, 764, 769, 770, 771, 772, 773, 775, 783, 794, 796, 798, 799, 800, 807, 808, 809, 810, 811, 824, 835, 840, 845, 847, 848, 855, 856, 857, 858, 863, 888, 920, 921, 924, 925, 927, 928, 930, 931, 932, 933, 934, 937, 938, 941, 943, 946, 947, 951, 952, 957, 963, 964, 966, 972, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 42, 179, 197, 278, 345, 348, 350, 367, 369, 370, 471, 728, 729, 946, 951, 955, 980, 981, 982], "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 332, 337, 339, 342, 346, 351, 353, 363, 367, 369, 371, 394, 511, 512, 535, 536, 670, 887, 888, 941, 951, 952, 957, 966, 983], "toward": [0, 24, 25, 58, 75, 105, 111, 117, 135, 153, 158, 183, 184, 204, 337, 350, 362, 398, 402, 412, 626, 628, 645, 822, 930, 945, 947, 950, 952], "cover": [0, 48, 156, 179, 197, 319, 329, 332, 337, 349, 585, 670, 741, 931, 932, 950], "travel": 0, "expens": [0, 51, 118, 135, 150, 152, 207, 232, 244, 298, 310, 311, 312, 325, 343, 350, 362, 363, 366, 369, 370, 399, 418, 458, 746, 749, 750, 760, 771, 845, 847, 928, 930, 946, 951, 955, 966, 976], "well": [0, 4, 9, 12, 22, 23, 25, 35, 44, 49, 52, 53, 57, 64, 71, 78, 100, 102, 109, 111, 116, 118, 140, 142, 150, 151, 152, 153, 156, 167, 177, 179, 180, 181, 183, 187, 199, 200, 201, 204, 206, 210, 215, 223, 235, 242, 244, 246, 250, 253, 258, 259, 260, 281, 282, 283, 284, 285, 306, 311, 312, 319, 332, 334, 336, 337, 341, 343, 345, 346, 348, 349, 350, 351, 360, 362, 364, 366, 367, 369, 372, 373, 376, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 409, 410, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 474, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 650, 671, 672, 673, 734, 737, 739, 742, 744, 745, 746, 749, 750, 760, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 882, 883, 920, 921, 923, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 941, 944, 945, 947, 948, 951, 952, 955, 965, 966, 972, 973, 976, 978, 979, 980, 983], "budget": [0, 108, 783, 784, 785, 786, 787, 920], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 153, 154, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 323, 324, 325, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 349, 350, 351, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 382, 383, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 441, 443, 445, 446, 447, 450, 451, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 527, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 712, 713, 715, 717, 718, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 873, 878, 881, 882, 884, 886, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 902, 905, 906, 912, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 949, 951, 952, 954, 955, 957, 958, 961, 962, 963, 964, 965, 970, 974], "note": [0, 4, 5, 7, 8, 11, 12, 13, 18, 24, 29, 33, 49, 61, 65, 66, 73, 75, 77, 78, 83, 88, 102, 103, 107, 111, 112, 115, 133, 135, 142, 146, 150, 151, 152, 153, 156, 167, 168, 172, 179, 180, 181, 183, 187, 193, 195, 197, 199, 200, 201, 203, 206, 207, 209, 211, 212, 213, 222, 230, 231, 235, 238, 241, 242, 243, 252, 253, 255, 259, 260, 269, 273, 274, 277, 280, 281, 282, 283, 284, 285, 288, 290, 292, 298, 310, 318, 323, 324, 331, 334, 335, 337, 338, 339, 341, 343, 344, 348, 349, 350, 353, 357, 360, 361, 362, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 383, 385, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 414, 415, 418, 419, 422, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 440, 446, 448, 454, 459, 465, 469, 477, 480, 484, 488, 489, 490, 491, 493, 494, 497, 499, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 535, 536, 538, 539, 540, 541, 543, 544, 547, 549, 550, 552, 553, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 580, 582, 583, 585, 586, 588, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 645, 646, 649, 650, 653, 657, 658, 663, 665, 670, 671, 672, 673, 677, 678, 679, 681, 683, 687, 690, 691, 695, 703, 704, 707, 712, 713, 717, 719, 723, 727, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 760, 761, 762, 763, 764, 765, 766, 767, 769, 771, 772, 773, 775, 777, 780, 781, 782, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 815, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 860, 863, 873, 874, 883, 884, 894, 899, 906, 920, 921, 923, 924, 925, 926, 928, 929, 930, 931, 932, 934, 935, 937, 938, 939, 941, 944, 945, 946, 947, 948, 950, 951, 952, 954, 957, 964, 965, 966, 968, 970, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988], "regard": [0, 5, 7, 11, 49, 65, 90, 125, 135, 140, 152, 153, 168, 176, 181, 201, 212, 237, 244, 245, 306, 311, 333, 337, 338, 342, 348, 350, 356, 361, 362, 367, 369, 370, 372, 394, 397, 402, 409, 412, 451, 564, 569, 606, 608, 651, 692, 745, 752, 772, 790, 791, 924, 927, 931, 933, 934, 936, 938, 945, 946, 947, 959, 966, 979, 982], "might": [0, 4, 5, 28, 38, 40, 55, 57, 64, 99, 107, 116, 130, 141, 147, 151, 152, 153, 156, 179, 197, 206, 235, 237, 269, 282, 308, 319, 323, 324, 331, 335, 337, 338, 339, 341, 342, 343, 345, 348, 350, 353, 356, 363, 366, 367, 368, 369, 370, 372, 385, 394, 438, 446, 451, 453, 458, 465, 473, 486, 505, 506, 507, 514, 529, 530, 532, 560, 561, 577, 600, 604, 605, 606, 608, 609, 626, 628, 642, 706, 741, 749, 750, 772, 797, 813, 828, 840, 859, 861, 863, 867, 868, 884, 900, 920, 921, 923, 925, 927, 928, 930, 931, 933, 934, 938, 939, 941, 946, 947, 966, 973, 975, 980, 981, 983, 986, 987], "pai": [0, 197, 337, 927], "dn": [0, 934], "continu": [0, 16, 18, 38, 108, 109, 135, 148, 152, 180, 187, 197, 200, 203, 218, 222, 226, 227, 270, 272, 278, 282, 283, 318, 332, 335, 339, 340, 341, 342, 345, 348, 350, 351, 353, 362, 367, 369, 442, 542, 545, 546, 549, 550, 557, 558, 559, 582, 596, 597, 602, 603, 607, 610, 611, 612, 613, 675, 691, 705, 758, 760, 811, 813, 815, 817, 818, 827, 828, 844, 856, 894, 920, 927, 928, 931, 932, 934, 935, 941, 947, 952, 954, 955, 957, 964, 969, 972, 974, 975, 980, 985, 986, 987], "integr": [0, 38, 65, 130, 143, 168, 270, 282, 335, 339, 340, 341, 343, 345, 350, 353, 367, 372, 665, 704, 735, 906, 930, 938, 955, 960, 973, 975, 976, 984, 985], "servic": [0, 4, 207, 337, 341, 955, 980], "azur": [0, 337], "cirru": [0, 337], "cl": [0, 8, 12, 15, 344, 350, 857], "circlecl": 0, "free": [0, 5, 140, 141, 147, 178, 226, 273, 331, 336, 337, 338, 345, 348, 353, 370, 372, 402, 559, 621, 804, 853, 920, 923, 927, 931, 952, 980], "cpu": [0, 56, 236, 253, 285, 323, 324, 335, 343, 350, 353, 370, 446, 582, 597, 601, 603, 605, 608, 609, 611, 613, 615, 616, 618, 626, 629, 746, 760, 769, 770, 771, 792, 800, 840, 899, 931, 957, 961, 966, 977, 986, 987], "server": [0, 323, 334, 335, 446, 980], "anaconda": [0, 324, 335, 341], "inc": [0, 234, 921, 943, 955], "storag": [0, 312, 350, 608, 609, 616, 618, 626, 627, 628, 847, 934, 946, 975, 980], "thei": [0, 4, 24, 25, 33, 46, 52, 75, 87, 100, 105, 106, 108, 110, 112, 114, 129, 132, 135, 136, 140, 151, 152, 165, 168, 174, 179, 180, 197, 200, 203, 206, 212, 229, 232, 235, 236, 238, 244, 253, 255, 269, 273, 278, 282, 284, 310, 311, 316, 317, 319, 323, 324, 325, 330, 332, 333, 334, 335, 336, 337, 338, 339, 341, 345, 346, 348, 349, 350, 351, 359, 361, 362, 363, 364, 365, 367, 369, 371, 372, 374, 391, 393, 397, 403, 404, 409, 417, 446, 458, 459, 483, 485, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 538, 541, 560, 569, 579, 593, 596, 597, 602, 608, 609, 610, 611, 612, 620, 622, 626, 628, 631, 637, 711, 712, 714, 717, 723, 738, 746, 760, 777, 783, 784, 785, 786, 787, 805, 808, 810, 816, 827, 828, 849, 852, 855, 856, 857, 858, 862, 920, 921, 923, 925, 927, 930, 931, 932, 933, 934, 936, 937, 938, 939, 941, 942, 943, 945, 946, 947, 955, 957, 961, 963, 964, 966, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986], "stage": [0, 7, 24, 66, 104, 109, 112, 335, 341, 358, 362, 369, 398, 503, 504, 509, 510, 511, 512, 538, 539, 541, 552, 928, 941, 950, 980, 984], "nightli": [0, 324, 340, 341], "build": [0, 4, 7, 16, 29, 39, 62, 68, 89, 107, 109, 115, 121, 130, 132, 145, 146, 148, 151, 187, 240, 243, 253, 270, 271, 274, 312, 319, 323, 324, 325, 333, 339, 340, 341, 342, 343, 350, 353, 355, 361, 362, 363, 366, 369, 370, 393, 440, 451, 453, 474, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 535, 536, 538, 539, 541, 577, 578, 580, 641, 663, 664, 747, 751, 755, 764, 768, 770, 809, 826, 828, 855, 856, 857, 858, 860, 880, 920, 921, 928, 931, 935, 937, 941, 946, 947, 951, 952, 955, 958, 960, 964, 965, 972, 975, 977, 978, 979, 981, 984], "applic": [3, 5, 18, 45, 73, 148, 156, 179, 196, 201, 229, 238, 273, 323, 325, 332, 334, 337, 339, 343, 345, 346, 348, 350, 362, 366, 367, 368, 369, 372, 374, 395, 402, 446, 448, 482, 483, 484, 503, 504, 579, 638, 639, 640, 644, 662, 678, 679, 687, 732, 733, 736, 774, 920, 927, 928, 929, 930, 931, 935, 937, 943, 947, 951, 952, 955, 964, 966, 972, 973, 978, 980, 983], "problem": [3, 4, 5, 6, 11, 13, 14, 24, 33, 50, 52, 61, 85, 99, 102, 106, 111, 112, 135, 148, 153, 156, 158, 165, 168, 172, 173, 179, 181, 196, 197, 201, 206, 207, 213, 218, 233, 235, 240, 244, 245, 249, 253, 258, 265, 277, 283, 295, 298, 306, 307, 310, 311, 319, 323, 332, 333, 334, 335, 336, 338, 339, 342, 343, 346, 348, 350, 360, 361, 362, 364, 366, 368, 369, 370, 371, 372, 373, 374, 395, 397, 399, 400, 402, 407, 412, 415, 428, 453, 458, 459, 465, 466, 467, 468, 473, 474, 478, 481, 483, 487, 489, 492, 493, 494, 495, 496, 497, 498, 501, 502, 507, 511, 514, 517, 521, 523, 539, 560, 581, 593, 598, 600, 602, 604, 605, 606, 607, 608, 609, 614, 615, 616, 618, 619, 622, 623, 624, 625, 626, 627, 629, 630, 635, 636, 637, 638, 639, 641, 643, 645, 658, 666, 678, 679, 684, 688, 733, 736, 737, 744, 745, 747, 748, 749, 750, 751, 753, 754, 755, 756, 761, 762, 763, 764, 765, 766, 768, 776, 777, 778, 788, 789, 790, 791, 792, 793, 794, 796, 798, 799, 800, 814, 815, 821, 831, 837, 838, 847, 848, 855, 857, 873, 884, 921, 922, 926, 927, 928, 930, 931, 932, 933, 934, 935, 939, 941, 945, 948, 952, 953, 955, 958, 959, 960, 966, 967, 968, 972, 973, 975, 977, 978, 979, 981, 982, 984, 985, 986, 987, 988], "medium": [3, 148, 212, 250, 298, 362, 367, 372, 593, 924, 927], "size": [3, 4, 5, 6, 8, 9, 11, 12, 13, 22, 27, 28, 30, 33, 35, 36, 38, 40, 42, 43, 48, 50, 52, 53, 55, 56, 57, 61, 62, 67, 71, 72, 73, 74, 75, 77, 78, 83, 85, 86, 87, 88, 89, 91, 93, 95, 102, 110, 111, 114, 115, 129, 135, 137, 138, 141, 142, 148, 150, 152, 153, 158, 159, 160, 161, 163, 165, 169, 174, 177, 180, 181, 182, 185, 192, 193, 199, 204, 206, 209, 210, 211, 212, 214, 215, 223, 229, 231, 233, 235, 237, 238, 240, 241, 259, 260, 261, 268, 271, 274, 275, 276, 277, 281, 284, 288, 292, 294, 296, 297, 298, 308, 310, 311, 312, 314, 323, 324, 325, 332, 333, 337, 342, 346, 348, 349, 350, 353, 359, 360, 361, 364, 366, 367, 370, 372, 373, 395, 396, 398, 399, 400, 407, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 443, 444, 445, 465, 477, 484, 486, 488, 490, 497, 507, 508, 509, 510, 511, 512, 514, 515, 537, 538, 541, 544, 582, 583, 593, 607, 616, 617, 629, 633, 642, 645, 655, 669, 687, 689, 692, 730, 740, 748, 751, 752, 756, 763, 766, 767, 769, 772, 774, 783, 784, 785, 787, 790, 791, 792, 793, 794, 796, 798, 799, 800, 805, 806, 823, 825, 836, 841, 845, 849, 850, 851, 852, 853, 855, 856, 857, 858, 861, 883, 887, 888, 894, 895, 897, 900, 906, 921, 923, 924, 926, 927, 928, 930, 931, 932, 933, 934, 935, 938, 941, 943, 945, 946, 947, 955, 960, 962, 964, 965, 975, 976, 977, 978, 979, 980, 982, 987, 988], "interact": [3, 81, 112, 148, 179, 204, 208, 236, 281, 336, 338, 339, 341, 343, 348, 350, 351, 363, 509, 510, 511, 512, 582, 583, 823, 827, 920, 923, 927, 928, 929, 936, 938, 941, 950, 952, 974, 979, 986, 987], "user": [3, 23, 63, 85, 144, 148, 151, 167, 199, 226, 232, 242, 244, 253, 259, 260, 263, 280, 281, 282, 283, 284, 285, 319, 323, 324, 326, 331, 335, 336, 337, 339, 341, 343, 344, 345, 348, 349, 350, 353, 356, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 373, 374, 375, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 569, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 804, 807, 808, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 880, 884, 920, 921, 927, 928, 930, 931, 932, 934, 941, 945, 949, 952, 955, 959, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "interfac": [3, 98, 148, 330, 331, 338, 339, 346, 348, 350, 366, 372, 373, 392, 396, 400, 446, 649, 746, 749, 750, 760, 808, 809, 833, 916, 920, 934, 946, 951, 952, 955, 972, 974, 977, 978, 980, 981, 986], "compress": [3, 11, 44, 148, 273, 332, 362, 367, 370, 602, 622, 642, 778, 902, 905, 927, 941, 965, 972, 981], "sens": [3, 4, 23, 141, 148, 151, 156, 210, 273, 288, 298, 319, 323, 338, 350, 362, 364, 366, 412, 419, 420, 421, 422, 423, 424, 425, 426, 602, 605, 606, 622, 747, 757, 844, 925, 927, 934, 935, 937, 941, 944], "tomographi": [3, 148, 602, 622, 927], "reconstruct": [3, 85, 86, 90, 148, 178, 202, 203, 284, 367, 370, 432, 433, 434, 481, 483, 485, 487, 488, 489, 490, 492, 493, 498, 533, 537, 602, 622, 638, 639, 643, 839, 840, 927, 928, 986], "l1": [3, 7, 27, 36, 75, 77, 148, 157, 164, 168, 190, 194, 208, 236, 253, 283, 346, 348, 361, 362, 364, 367, 392, 396, 400, 407, 414, 419, 420, 421, 422, 423, 424, 425, 426, 428, 446, 452, 454, 481, 487, 488, 489, 490, 492, 493, 497, 498, 508, 515, 539, 540, 541, 547, 596, 597, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 618, 620, 622, 626, 627, 628, 629, 631, 638, 684, 711, 717, 722, 727, 728, 729, 760, 774, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 820, 828, 834, 847, 848, 854, 856, 858, 870, 913, 927, 929, 931, 934, 941, 945, 946, 947, 964, 977, 979, 985], "prior": [3, 42, 43, 52, 62, 134, 135, 148, 153, 158, 160, 220, 222, 226, 227, 235, 337, 339, 341, 350, 353, 362, 365, 367, 369, 372, 415, 473, 486, 498, 499, 500, 501, 509, 535, 536, 561, 563, 564, 565, 569, 572, 573, 580, 594, 595, 596, 597, 601, 602, 604, 605, 606, 610, 611, 612, 622, 628, 631, 666, 744, 783, 784, 785, 786, 787, 808, 809, 823, 849, 852, 898, 920, 923, 925, 927, 930, 931, 933, 939, 947, 948, 975, 977, 978, 979, 980, 981, 982, 985, 988], "lasso": [3, 95, 118, 123, 148, 151, 157, 283, 323, 348, 364, 365, 367, 369, 370, 371, 421, 422, 428, 451, 474, 481, 487, 489, 492, 493, 495, 496, 498, 547, 596, 597, 599, 600, 601, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 622, 628, 631, 632, 633, 634, 635, 636, 671, 672, 673, 734, 769, 770, 771, 809, 828, 920, 931, 945, 953, 961, 964, 968, 972, 976, 977, 978, 980, 981, 983, 985, 986], "recognit": [3, 9, 148, 271, 278, 330, 342, 367, 369, 371, 444, 452, 482, 484, 491, 658, 663, 690, 718, 737, 738, 744, 760, 774, 828, 852, 923, 927, 931, 932, 936, 946, 948, 957, 960, 968, 972], "eigenfac": [3, 148, 332, 367, 444, 491, 663, 760, 774, 828, 852, 948, 960, 972], "svm": [3, 7, 9, 10, 11, 15, 23, 25, 27, 28, 29, 64, 66, 68, 119, 122, 124, 127, 131, 148, 157, 172, 206, 212, 213, 217, 218, 229, 232, 233, 234, 235, 237, 238, 240, 241, 242, 243, 245, 246, 250, 275, 280, 282, 286, 290, 293, 296, 305, 306, 310, 323, 326, 332, 339, 343, 350, 356, 363, 366, 367, 369, 371, 388, 444, 454, 462, 465, 491, 505, 506, 513, 517, 518, 527, 543, 544, 549, 550, 555, 589, 593, 618, 626, 627, 628, 639, 647, 648, 650, 652, 663, 684, 691, 746, 760, 766, 770, 771, 774, 776, 777, 794, 808, 809, 821, 828, 843, 844, 919, 920, 923, 926, 928, 929, 931, 932, 936, 944, 946, 948, 953, 957, 960, 961, 962, 966, 968, 969, 972, 973, 974, 976, 977, 978, 979], "imag": [3, 6, 13, 29, 32, 42, 44, 47, 50, 53, 64, 80, 84, 85, 106, 131, 139, 148, 170, 200, 208, 211, 214, 233, 262, 270, 271, 281, 287, 288, 329, 330, 332, 334, 337, 342, 345, 348, 350, 353, 355, 362, 367, 392, 396, 402, 412, 443, 444, 445, 446, 452, 453, 456, 457, 484, 485, 487, 491, 557, 558, 641, 647, 687, 774, 818, 927, 931, 932, 934, 936, 943, 947, 951, 955, 957, 962, 963, 965, 966, 968, 972, 975, 980, 981, 985, 987, 988], "denois": [3, 84, 148, 367, 446, 485, 487, 491, 534, 537, 774, 818], "kernel": [3, 6, 9, 10, 11, 15, 27, 28, 68, 84, 95, 119, 124, 126, 131, 134, 136, 137, 138, 139, 142, 146, 180, 193, 205, 206, 213, 217, 229, 233, 235, 237, 240, 241, 245, 250, 254, 283, 289, 292, 293, 295, 298, 299, 300, 303, 304, 307, 319, 323, 326, 329, 339, 348, 350, 360, 362, 363, 366, 369, 370, 383, 391, 398, 402, 411, 412, 415, 432, 433, 434, 441, 446, 448, 452, 454, 464, 483, 484, 485, 491, 494, 504, 506, 508, 510, 512, 515, 518, 520, 543, 544, 560, 561, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 622, 623, 626, 627, 628, 629, 638, 640, 641, 642, 645, 684, 707, 708, 710, 715, 716, 723, 724, 725, 726, 746, 757, 760, 774, 776, 781, 782, 788, 789, 791, 793, 799, 806, 808, 809, 814, 818, 820, 821, 828, 842, 843, 847, 848, 849, 850, 851, 852, 853, 856, 858, 920, 926, 927, 928, 931, 932, 934, 937, 944, 945, 951, 953, 957, 961, 962, 967, 968, 972, 973, 974, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "pca": [3, 6, 63, 66, 68, 78, 81, 84, 87, 96, 148, 200, 202, 211, 213, 217, 234, 253, 257, 262, 283, 319, 329, 339, 350, 361, 362, 363, 368, 378, 423, 426, 446, 452, 454, 464, 482, 483, 484, 485, 489, 490, 493, 494, 499, 593, 608, 638, 640, 642, 746, 770, 774, 797, 804, 807, 808, 810, 818, 826, 828, 923, 925, 928, 934, 941, 945, 947, 962, 967, 968, 972, 974, 975, 976, 978, 979, 980, 983, 985, 986, 987], "libsvm": [3, 148, 156, 296, 330, 343, 437, 458, 513, 847, 848, 849, 850, 851, 852, 853, 946, 951, 968, 972, 974, 980, 983, 986], "gui": [3, 148, 437, 851, 852, 964, 972, 973, 983], "model": [3, 5, 6, 9, 10, 12, 14, 15, 19, 20, 22, 23, 25, 35, 36, 37, 44, 45, 50, 51, 53, 56, 63, 65, 71, 75, 78, 84, 85, 99, 102, 104, 107, 109, 110, 111, 113, 115, 117, 118, 121, 123, 124, 126, 127, 129, 138, 139, 141, 142, 143, 144, 147, 149, 150, 154, 159, 161, 163, 165, 169, 170, 172, 174, 175, 176, 180, 181, 183, 185, 187, 191, 192, 194, 195, 196, 206, 209, 213, 221, 223, 224, 225, 229, 230, 231, 233, 236, 238, 240, 241, 243, 244, 248, 249, 252, 253, 255, 257, 259, 260, 262, 266, 274, 277, 280, 282, 284, 285, 287, 288, 295, 297, 298, 299, 300, 301, 302, 303, 304, 306, 308, 311, 312, 315, 316, 317, 319, 326, 329, 331, 332, 340, 343, 350, 352, 358, 359, 360, 362, 363, 365, 367, 368, 369, 370, 371, 372, 381, 383, 385, 388, 393, 399, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 438, 439, 446, 448, 451, 452, 453, 459, 472, 474, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 538, 539, 541, 543, 544, 547, 552, 556, 559, 560, 561, 565, 577, 584, 585, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 651, 656, 661, 671, 672, 673, 683, 684, 690, 691, 699, 702, 734, 737, 738, 739, 744, 745, 746, 749, 750, 752, 760, 761, 762, 763, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 793, 794, 795, 797, 799, 804, 805, 806, 808, 809, 811, 813, 815, 820, 821, 823, 824, 825, 827, 828, 832, 833, 835, 836, 837, 838, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 921, 923, 924, 925, 928, 929, 932, 934, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 951, 952, 953, 955, 958, 960, 962, 966, 967, 968, 972, 973, 974, 975, 976, 977], "complex": [3, 9, 14, 15, 135, 140, 146, 148, 193, 196, 205, 212, 228, 244, 274, 280, 283, 284, 286, 298, 312, 313, 333, 337, 342, 348, 363, 367, 369, 372, 373, 391, 395, 397, 398, 400, 417, 439, 450, 451, 452, 464, 484, 491, 501, 507, 508, 509, 510, 512, 514, 515, 554, 580, 588, 606, 608, 626, 627, 683, 699, 746, 774, 776, 804, 808, 809, 813, 821, 828, 843, 847, 850, 853, 855, 856, 857, 858, 920, 921, 923, 924, 926, 930, 932, 937, 941, 944, 952, 953, 955, 968, 973, 975, 981, 982, 985], "influenc": [3, 9, 73, 74, 148, 151, 161, 221, 243, 273, 298, 306, 319, 325, 364, 367, 369, 383, 391, 404, 415, 432, 433, 434, 439, 451, 504, 506, 508, 510, 512, 515, 518, 520, 561, 578, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 622, 623, 626, 628, 629, 683, 699, 774, 781, 782, 790, 791, 798, 799, 806, 825, 826, 836, 848, 850, 853, 856, 858, 867, 920, 925, 926, 934, 937, 941, 945, 946, 955, 975, 980, 981], "core": [3, 45, 60, 106, 107, 148, 285, 322, 324, 326, 335, 337, 340, 345, 350, 353, 362, 367, 369, 373, 395, 399, 400, 405, 407, 449, 488, 539, 544, 608, 609, 616, 618, 626, 783, 784, 785, 786, 787, 792, 800, 927, 934, 937, 946, 949, 952, 953, 955, 964, 966, 968, 974, 976, 977, 979, 982, 986, 987], "classif": [3, 6, 7, 21, 22, 23, 25, 28, 41, 65, 66, 67, 79, 88, 98, 99, 101, 103, 105, 106, 107, 109, 112, 116, 122, 129, 130, 131, 132, 134, 151, 152, 156, 157, 171, 172, 179, 187, 205, 207, 211, 215, 218, 224, 228, 232, 233, 234, 235, 236, 244, 250, 254, 255, 261, 263, 266, 267, 275, 287, 294, 298, 301, 304, 306, 307, 309, 311, 312, 319, 323, 325, 326, 330, 331, 332, 334, 339, 342, 346, 349, 350, 357, 360, 362, 363, 366, 367, 370, 371, 379, 388, 419, 425, 432, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 453, 454, 460, 462, 464, 465, 469, 470, 472, 473, 491, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 519, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 554, 555, 556, 559, 560, 561, 563, 564, 572, 582, 583, 593, 608, 609, 616, 618, 624, 625, 626, 647, 653, 655, 657, 658, 662, 663, 665, 666, 668, 675, 676, 678, 679, 683, 687, 690, 691, 692, 703, 705, 707, 708, 731, 732, 733, 735, 736, 737, 738, 741, 743, 746, 747, 749, 750, 751, 752, 760, 764, 765, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 790, 795, 797, 798, 804, 805, 806, 808, 812, 815, 820, 821, 828, 831, 833, 842, 843, 844, 847, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 870, 873, 881, 920, 921, 923, 924, 925, 928, 929, 933, 936, 938, 939, 941, 942, 944, 950, 951, 953, 954, 955, 957, 958, 962, 963, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987], "text": [3, 7, 11, 12, 14, 15, 18, 28, 29, 36, 40, 49, 52, 55, 57, 59, 64, 73, 74, 109, 159, 173, 206, 210, 217, 221, 223, 228, 241, 242, 246, 258, 261, 263, 268, 275, 283, 286, 288, 305, 323, 325, 326, 329, 330, 331, 337, 342, 348, 350, 362, 363, 365, 366, 367, 369, 372, 397, 399, 418, 437, 438, 439, 449, 453, 458, 471, 486, 494, 514, 565, 575, 602, 608, 616, 618, 624, 626, 647, 653, 655, 657, 663, 667, 678, 686, 740, 742, 746, 760, 774, 783, 785, 787, 790, 795, 808, 809, 811, 812, 820, 843, 844, 845, 847, 859, 860, 861, 881, 920, 923, 927, 929, 931, 932, 933, 935, 938, 941, 943, 945, 946, 950, 952, 955, 958, 968, 972, 973, 974, 975, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988], "outlier": [3, 40, 73, 74, 111, 114, 148, 157, 181, 182, 185, 205, 254, 272, 308, 332, 350, 362, 364, 369, 419, 420, 423, 424, 425, 426, 440, 441, 442, 446, 460, 462, 472, 474, 513, 589, 599, 620, 621, 622, 626, 627, 628, 629, 642, 652, 794, 798, 809, 815, 817, 818, 820, 824, 825, 826, 828, 833, 836, 850, 851, 853, 931, 945, 946, 951, 953, 967, 968, 972, 977, 978, 980], "detect": [3, 8, 10, 58, 60, 73, 75, 105, 114, 148, 160, 205, 228, 235, 238, 254, 297, 332, 335, 337, 341, 348, 350, 361, 362, 364, 366, 370, 399, 419, 420, 423, 424, 425, 426, 438, 439, 441, 442, 446, 460, 462, 465, 472, 487, 488, 489, 496, 513, 514, 538, 541, 546, 589, 627, 652, 676, 738, 774, 794, 798, 809, 815, 828, 847, 851, 923, 927, 952, 953, 955, 961, 966, 967, 968, 972, 975, 978, 979, 980, 982, 984, 985, 987], "set": [3, 4, 5, 6, 7, 8, 11, 13, 15, 23, 24, 25, 27, 28, 33, 37, 38, 40, 41, 42, 45, 46, 49, 50, 52, 53, 55, 57, 59, 60, 61, 64, 65, 67, 73, 74, 75, 78, 81, 84, 85, 90, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 120, 123, 129, 130, 133, 135, 141, 142, 143, 148, 150, 151, 152, 153, 154, 158, 163, 164, 167, 168, 170, 172, 174, 175, 178, 179, 180, 181, 183, 184, 187, 192, 193, 197, 199, 200, 201, 206, 207, 208, 209, 211, 212, 219, 221, 223, 225, 226, 229, 230, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 249, 252, 255, 259, 260, 261, 262, 263, 266, 269, 270, 271, 273, 275, 277, 278, 280, 282, 283, 287, 288, 291, 292, 295, 297, 300, 306, 310, 311, 312, 316, 317, 319, 323, 324, 325, 329, 330, 332, 334, 335, 337, 339, 341, 342, 344, 345, 349, 350, 351, 353, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 384, 385, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 438, 439, 443, 445, 446, 447, 449, 452, 453, 454, 458, 459, 460, 465, 473, 474, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 647, 648, 650, 651, 652, 653, 663, 664, 669, 671, 672, 675, 676, 677, 678, 679, 680, 683, 687, 689, 690, 694, 695, 697, 699, 700, 702, 705, 728, 729, 731, 732, 733, 734, 736, 738, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 867, 868, 878, 879, 884, 888, 899, 900, 901, 902, 905, 906, 912, 915, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 951, 952, 958, 960, 961, 962, 965, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "predict": [3, 6, 7, 8, 11, 21, 23, 24, 25, 27, 29, 31, 33, 40, 44, 51, 53, 57, 64, 65, 66, 67, 69, 77, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 125, 126, 130, 134, 135, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 151, 152, 153, 156, 158, 161, 162, 163, 171, 174, 175, 176, 177, 180, 181, 182, 185, 186, 187, 188, 193, 194, 196, 197, 206, 207, 209, 211, 214, 222, 223, 224, 225, 226, 227, 228, 229, 233, 235, 237, 238, 241, 244, 245, 249, 252, 256, 259, 260, 261, 264, 265, 271, 273, 274, 278, 280, 281, 282, 283, 284, 288, 290, 291, 292, 294, 295, 297, 298, 304, 305, 306, 307, 310, 311, 315, 316, 317, 318, 319, 322, 324, 326, 329, 332, 334, 337, 339, 344, 346, 350, 352, 356, 357, 358, 360, 361, 362, 363, 367, 369, 370, 371, 379, 383, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 415, 419, 432, 433, 434, 437, 451, 458, 474, 484, 491, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 527, 532, 543, 544, 552, 556, 560, 561, 563, 564, 565, 566, 572, 575, 577, 578, 580, 581, 582, 583, 584, 585, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 647, 648, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 662, 664, 665, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 687, 690, 691, 692, 695, 697, 699, 701, 705, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 794, 795, 798, 799, 805, 806, 808, 815, 828, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 905, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 932, 933, 934, 935, 937, 938, 939, 944, 945, 946, 947, 950, 951, 952, 954, 955, 958, 960, 961, 962, 966, 968, 969, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "latenc": [3, 7, 109, 148, 322, 474, 515, 622, 628, 774, 828, 853, 896, 905, 951, 968, 975], "speci": [3, 148, 254, 332, 368, 448, 656, 738, 793, 851, 862, 931, 937, 972], "distribut": [3, 4, 8, 9, 10, 25, 33, 35, 40, 48, 49, 52, 57, 69, 72, 73, 74, 83, 99, 101, 111, 114, 128, 135, 144, 148, 150, 151, 156, 158, 179, 181, 183, 201, 203, 206, 210, 221, 226, 227, 231, 235, 241, 243, 254, 258, 272, 273, 275, 278, 287, 288, 303, 306, 323, 324, 332, 333, 334, 335, 337, 338, 341, 342, 343, 350, 356, 360, 361, 362, 364, 366, 367, 368, 372, 374, 397, 399, 419, 420, 421, 422, 423, 424, 425, 426, 438, 448, 453, 465, 466, 467, 468, 469, 473, 482, 483, 486, 500, 501, 502, 513, 561, 575, 590, 592, 594, 595, 598, 608, 609, 619, 629, 630, 638, 639, 640, 642, 656, 658, 673, 701, 738, 744, 745, 750, 751, 758, 760, 764, 765, 774, 784, 787, 793, 797, 804, 811, 824, 825, 826, 827, 828, 835, 836, 837, 842, 843, 851, 862, 886, 899, 920, 925, 927, 929, 930, 931, 933, 934, 936, 937, 943, 944, 949, 951, 952, 957, 961, 965, 967, 968, 972, 978, 979, 980, 981, 982, 983, 984, 985, 988], "relat": [3, 7, 12, 16, 40, 57, 86, 88, 90, 148, 149, 151, 174, 215, 228, 242, 285, 310, 318, 326, 332, 333, 336, 340, 341, 342, 344, 345, 346, 348, 350, 351, 352, 356, 361, 362, 363, 364, 365, 366, 367, 369, 372, 400, 414, 419, 446, 499, 500, 512, 513, 589, 623, 627, 642, 672, 692, 767, 771, 806, 807, 809, 812, 813, 818, 821, 822, 823, 824, 827, 835, 851, 920, 925, 931, 932, 934, 935, 938, 941, 946, 947, 948, 949, 952, 968, 972, 976, 977, 978, 980, 981, 984, 985], "featur": [3, 5, 6, 7, 8, 10, 11, 14, 23, 24, 25, 27, 30, 32, 38, 53, 55, 58, 63, 64, 65, 66, 73, 74, 78, 80, 81, 82, 83, 85, 87, 89, 93, 94, 96, 97, 98, 107, 113, 117, 118, 119, 121, 128, 130, 135, 136, 137, 140, 141, 143, 146, 147, 149, 150, 151, 152, 157, 162, 165, 166, 168, 175, 179, 180, 181, 183, 184, 188, 194, 195, 196, 205, 208, 210, 218, 219, 228, 232, 235, 241, 242, 244, 245, 249, 252, 256, 261, 262, 264, 267, 270, 272, 273, 276, 279, 281, 284, 285, 293, 294, 295, 298, 306, 309, 312, 315, 317, 318, 319, 326, 329, 330, 331, 332, 333, 334, 335, 339, 340, 342, 344, 345, 346, 348, 349, 350, 351, 352, 353, 356, 360, 362, 364, 365, 366, 367, 368, 372, 373, 374, 375, 378, 382, 383, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 458, 459, 460, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 529, 530, 531, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 568, 569, 570, 572, 573, 575, 577, 578, 579, 580, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 635, 636, 637, 638, 639, 640, 641, 642, 653, 663, 671, 672, 673, 690, 707, 708, 712, 713, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 730, 734, 739, 740, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 867, 868, 881, 896, 906, 907, 908, 912, 920, 923, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 942, 943, 944, 945, 946, 947, 950, 951, 952, 953, 954, 955, 957, 958, 962, 963, 964, 968, 969, 970, 971, 972, 973, 974, 980, 981, 982, 983, 984, 985, 986, 987, 988], "engin": [3, 36, 104, 140, 148, 323, 331, 334, 362, 368, 370, 372, 414, 446, 512, 589, 623, 767, 771, 806, 807, 809, 812, 813, 818, 821, 822, 823, 827, 921, 931, 941, 949, 978], "topic": [3, 7, 8, 64, 148, 310, 311, 312, 332, 333, 366, 367, 370, 438, 447, 486, 488, 490, 497, 538, 541, 927, 932, 951, 952, 966, 977, 979], "extract": [3, 4, 6, 8, 11, 12, 16, 46, 63, 64, 65, 77, 85, 148, 183, 194, 228, 271, 310, 312, 319, 326, 329, 332, 334, 339, 343, 346, 348, 362, 363, 366, 367, 400, 402, 405, 406, 412, 414, 438, 439, 443, 444, 453, 454, 481, 484, 485, 486, 487, 488, 489, 490, 491, 493, 495, 496, 497, 533, 534, 538, 539, 541, 543, 544, 547, 549, 581, 668, 737, 746, 760, 785, 807, 808, 852, 884, 895, 920, 928, 932, 936, 941, 945, 951, 955, 958, 962, 963, 968, 972, 973, 981, 984], "neg": [3, 4, 15, 22, 55, 69, 71, 78, 110, 111, 115, 148, 151, 157, 179, 197, 225, 226, 232, 235, 238, 242, 244, 245, 253, 273, 277, 284, 310, 343, 350, 351, 362, 366, 369, 370, 371, 373, 374, 383, 391, 395, 402, 415, 419, 432, 433, 434, 438, 481, 483, 485, 486, 487, 488, 490, 492, 494, 497, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 538, 541, 542, 545, 546, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 561, 585, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 619, 620, 622, 623, 627, 628, 629, 630, 637, 648, 649, 654, 655, 662, 663, 665, 668, 669, 671, 672, 673, 676, 678, 679, 680, 684, 687, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 731, 732, 733, 734, 736, 740, 744, 745, 769, 774, 781, 782, 791, 794, 799, 806, 815, 824, 826, 827, 831, 835, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 882, 884, 899, 929, 931, 932, 934, 935, 936, 937, 945, 946, 966, 967, 968, 972, 978, 979, 980, 981, 982, 983, 985, 986, 987], "matrix": [3, 7, 9, 13, 18, 19, 20, 29, 31, 35, 37, 40, 57, 64, 72, 73, 74, 75, 77, 85, 86, 87, 96, 142, 148, 154, 157, 165, 180, 184, 207, 210, 211, 226, 228, 242, 270, 284, 287, 288, 310, 311, 312, 318, 323, 326, 332, 333, 334, 337, 339, 343, 346, 348, 349, 350, 359, 363, 364, 365, 370, 371, 372, 373, 374, 383, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 402, 404, 407, 409, 410, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 442, 446, 447, 450, 451, 452, 453, 454, 455, 458, 459, 460, 469, 471, 473, 474, 476, 477, 479, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 535, 536, 538, 539, 540, 541, 543, 544, 553, 554, 555, 556, 557, 558, 559, 561, 570, 579, 580, 581, 585, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 657, 662, 663, 664, 665, 666, 668, 678, 679, 680, 683, 687, 688, 689, 690, 703, 704, 707, 708, 709, 710, 712, 713, 715, 716, 717, 721, 723, 724, 726, 727, 728, 729, 730, 732, 733, 736, 737, 743, 744, 745, 746, 749, 750, 760, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 812, 813, 814, 815, 817, 819, 820, 821, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 863, 865, 866, 867, 868, 873, 882, 883, 884, 885, 888, 889, 890, 894, 895, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 917, 921, 923, 925, 927, 928, 932, 933, 934, 935, 941, 942, 943, 944, 945, 947, 948, 965, 966, 967, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "factor": [3, 24, 28, 40, 42, 49, 57, 84, 90, 95, 116, 148, 151, 204, 206, 215, 246, 247, 253, 254, 268, 269, 273, 275, 282, 284, 323, 324, 343, 346, 350, 359, 361, 362, 369, 370, 372, 391, 393, 404, 419, 423, 424, 426, 428, 438, 454, 464, 465, 477, 482, 485, 486, 488, 490, 491, 494, 495, 496, 497, 499, 500, 511, 512, 513, 538, 541, 547, 563, 599, 600, 601, 604, 605, 606, 632, 633, 642, 669, 732, 746, 749, 750, 770, 794, 828, 841, 843, 851, 883, 884, 920, 927, 928, 934, 944, 948, 951, 967, 968, 972, 973, 975, 976, 978, 986, 988], "latent": [3, 16, 96, 148, 271, 311, 365, 370, 372, 438, 482, 486, 488, 489, 490, 493, 494, 538, 541, 804, 930, 951, 966, 967, 968, 974, 977], "dirichlet": [3, 148, 221, 222, 227, 230, 370, 438, 486, 488, 490, 538, 541, 744, 951, 967, 968, 972, 977, 978], "alloc": [3, 23, 56, 148, 247, 282, 333, 337, 338, 362, 370, 394, 397, 409, 438, 486, 488, 490, 534, 538, 541, 596, 602, 610, 612, 749, 750, 752, 772, 775, 920, 941, 951, 967, 968, 976, 977, 982, 983], "visual": [3, 4, 9, 15, 23, 27, 29, 39, 42, 45, 48, 52, 55, 56, 73, 82, 84, 87, 89, 95, 112, 114, 116, 120, 121, 143, 147, 148, 152, 154, 163, 170, 179, 181, 197, 204, 205, 208, 211, 216, 217, 226, 228, 229, 231, 232, 236, 245, 258, 262, 263, 267, 269, 273, 277, 278, 280, 282, 288, 326, 329, 333, 335, 343, 344, 359, 364, 366, 367, 368, 369, 389, 392, 396, 404, 422, 446, 452, 454, 457, 460, 464, 472, 482, 484, 491, 514, 516, 521, 581, 583, 608, 639, 642, 647, 648, 650, 651, 652, 668, 676, 731, 738, 747, 748, 751, 752, 763, 764, 765, 766, 767, 774, 805, 809, 828, 852, 861, 880, 926, 928, 929, 934, 935, 937, 938, 941, 947, 951, 957, 968, 975, 982, 983, 984, 986], "stock": [3, 148, 362, 364, 404, 422, 639, 960], "market": [3, 148, 362, 364, 404, 422, 639, 955, 960], "wikipedia": [3, 22, 148, 345, 361, 362, 545, 557, 558, 586, 606, 618, 621, 632, 633, 645, 654, 655, 657, 659, 662, 666, 668, 675, 678, 679, 680, 683, 684, 687, 692, 705, 732, 734, 735, 737, 738, 739, 740, 790, 791, 796, 797, 798, 799, 826, 841, 855, 856, 923, 927, 931, 934, 943, 947, 966, 972, 979], "princip": [3, 76, 84, 87, 89, 90, 92, 94, 116, 148, 199, 211, 213, 262, 278, 282, 329, 362, 365, 374, 434, 481, 482, 483, 484, 485, 487, 489, 490, 491, 492, 493, 494, 495, 496, 500, 607, 638, 639, 640, 642, 643, 774, 797, 809, 828, 883, 884, 928, 934, 967, 968, 972], "eigenvector": [3, 42, 78, 81, 148, 221, 362, 402, 412, 484, 485, 491, 500, 638, 639, 641, 645, 928, 972, 976, 986], "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 335, 337, 339, 341, 348, 350, 353, 359, 362, 363, 365, 369, 400, 406, 418, 438, 439, 458, 459, 487, 496, 507, 508, 509, 510, 514, 515, 516, 595, 596, 597, 600, 601, 602, 603, 604, 605, 610, 611, 612, 613, 631, 632, 633, 634, 746, 749, 750, 760, 767, 769, 806, 808, 845, 855, 856, 857, 858, 888, 889, 915, 920, 927, 928, 930, 931, 941, 943, 945, 951, 955, 963, 966, 977, 979, 982, 985, 986], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 330, 332, 334, 335, 341, 342, 345, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 460, 947, 962, 964, 966, 968, 976, 977, 980, 984, 985, 986], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 323, 324, 326, 334, 336, 337, 339, 340, 341, 343, 344, 345, 346, 347, 349, 350, 353, 355, 356, 361, 373, 374, 378, 389, 390, 406, 411, 421, 435, 457, 458, 481, 493, 497, 505, 522, 523, 527, 533, 542, 545, 546, 548, 551, 553, 562, 566, 570, 571, 574, 579, 588, 592, 597, 600, 601, 604, 610, 611, 613, 617, 625, 648, 649, 658, 665, 671, 672, 673, 675, 677, 679, 680, 684, 688, 692, 693, 695, 696, 700, 703, 705, 712, 713, 717, 718, 720, 722, 730, 732, 741, 753, 754, 755, 756, 757, 758, 759, 776, 778, 780, 782, 784, 788, 789, 798, 799, 800, 802, 810, 811, 814, 816, 819, 829, 832, 834, 835, 837, 838, 839, 842, 848, 857, 858, 859, 860, 873, 882, 884, 886, 887, 889, 893, 894, 895, 902, 919, 921, 929, 952, 953, 955, 958, 961, 962, 966, 968, 973, 974, 975, 976, 978, 979, 980, 982, 985, 987, 988], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 323, 324, 335, 337, 338, 339, 341, 342, 343, 344, 345, 348, 350, 351, 353, 358, 362, 364, 366, 369, 372, 373, 374, 388, 394, 395, 397, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 412, 414, 417, 421, 422, 481, 482, 483, 484, 485, 487, 489, 491, 492, 493, 495, 496, 498, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 532, 542, 544, 545, 546, 548, 549, 550, 552, 560, 561, 584, 590, 596, 597, 599, 601, 602, 603, 605, 606, 610, 611, 612, 613, 632, 633, 638, 639, 640, 641, 642, 643, 644, 730, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 780, 781, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 805, 806, 807, 810, 842, 843, 847, 848, 849, 850, 851, 852, 853, 855, 856, 878, 879, 899, 902, 905, 920, 930, 932, 935, 944, 946, 947, 951, 952, 955, 957, 964, 966, 972, 975, 977, 979, 980, 981, 982, 986, 987], "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 323, 324, 325, 331, 335, 336, 337, 338, 340, 341, 343, 345, 346, 348, 349, 350, 353, 356, 361, 362, 363, 364, 370, 373, 374, 395, 453, 483, 511, 512, 552, 584, 596, 637, 746, 749, 750, 752, 760, 771, 773, 878, 928, 935, 941, 944, 945, 946, 947, 948, 950, 951, 954, 955, 959, 966, 973, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 337, 345, 941], "jupyterlit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 338, 343, 363, 418, 845, 947, 950, 951, 952, 983, 986], "introduc": [4, 71, 73, 74, 90, 132, 148, 153, 158, 205, 210, 242, 285, 312, 330, 333, 335, 337, 339, 341, 342, 345, 348, 350, 353, 360, 362, 364, 366, 367, 369, 370, 384, 392, 393, 394, 396, 397, 399, 409, 414, 418, 432, 433, 434, 435, 446, 454, 465, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 505, 506, 516, 517, 518, 519, 520, 531, 532, 533, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 608, 614, 635, 636, 638, 639, 642, 774, 792, 797, 800, 804, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 841, 845, 925, 927, 930, 933, 934, 937, 941, 943, 945, 946, 957, 964, 972, 973, 978, 980, 981, 982, 984, 985, 986, 987, 988], "differ": [4, 5, 7, 10, 12, 13, 14, 15, 22, 25, 27, 28, 31, 32, 33, 39, 41, 42, 45, 49, 52, 53, 59, 60, 61, 62, 64, 65, 66, 73, 77, 78, 81, 82, 83, 85, 87, 88, 90, 93, 94, 95, 98, 102, 104, 107, 108, 111, 113, 118, 119, 120, 121, 123, 126, 128, 133, 134, 135, 136, 137, 140, 141, 142, 146, 147, 148, 150, 151, 153, 156, 158, 159, 165, 166, 167, 168, 170, 176, 179, 180, 181, 183, 184, 185, 186, 187, 197, 199, 200, 201, 204, 206, 208, 211, 212, 215, 221, 223, 224, 225, 226, 227, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 249, 250, 253, 259, 260, 262, 268, 269, 272, 277, 278, 280, 293, 297, 298, 302, 306, 307, 310, 311, 312, 319, 323, 324, 325, 331, 332, 334, 335, 336, 337, 340, 342, 344, 346, 349, 350, 353, 356, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 385, 388, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 408, 409, 412, 414, 425, 428, 440, 443, 444, 446, 453, 454, 458, 459, 462, 464, 472, 487, 488, 489, 490, 496, 497, 499, 500, 505, 506, 513, 538, 539, 540, 541, 544, 561, 563, 564, 565, 569, 572, 573, 577, 582, 583, 584, 588, 593, 594, 597, 599, 601, 603, 605, 608, 611, 616, 617, 618, 626, 627, 628, 630, 640, 642, 644, 648, 649, 650, 651, 654, 655, 656, 657, 659, 665, 667, 668, 676, 677, 678, 679, 680, 683, 686, 692, 706, 707, 708, 717, 727, 731, 732, 733, 735, 736, 738, 739, 740, 742, 745, 746, 748, 749, 750, 751, 752, 755, 760, 761, 762, 763, 764, 765, 766, 769, 771, 772, 775, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 801, 804, 808, 813, 817, 818, 820, 824, 825, 826, 828, 832, 833, 834, 835, 836, 837, 838, 847, 849, 852, 855, 856, 857, 858, 895, 920, 921, 923, 924, 926, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 941, 944, 945, 946, 947, 948, 951, 952, 955, 957, 959, 960, 961, 965, 966, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "strategi": [4, 48, 50, 53, 56, 65, 108, 113, 118, 132, 146, 147, 148, 153, 168, 179, 187, 197, 208, 217, 228, 236, 238, 240, 244, 245, 267, 272, 280, 281, 284, 312, 322, 339, 343, 349, 350, 366, 369, 370, 371, 374, 388, 389, 390, 402, 412, 422, 452, 454, 462, 464, 472, 483, 488, 501, 502, 511, 512, 517, 518, 521, 538, 539, 541, 542, 544, 552, 577, 578, 580, 584, 595, 597, 601, 603, 605, 611, 613, 615, 623, 625, 641, 645, 654, 663, 704, 706, 742, 746, 749, 750, 752, 760, 763, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 805, 813, 818, 842, 847, 849, 852, 855, 856, 857, 858, 902, 920, 921, 930, 932, 933, 934, 935, 937, 939, 941, 945, 946, 947, 951, 961, 966, 968, 975, 976, 977, 980, 981, 982, 983, 984, 985, 986, 988], "leverag": [4, 8, 33, 45, 78, 197, 310, 311, 323, 324, 335, 366, 369, 823, 920, 927, 957, 975, 987], "task": [4, 7, 88, 98, 105, 106, 112, 131, 132, 143, 148, 157, 179, 195, 199, 232, 312, 323, 325, 332, 334, 335, 336, 337, 341, 342, 343, 346, 348, 349, 350, 367, 369, 370, 371, 372, 398, 411, 443, 455, 465, 542, 545, 546, 548, 549, 550, 554, 555, 556, 559, 582, 583, 596, 597, 602, 603, 610, 611, 612, 613, 624, 631, 634, 657, 676, 678, 679, 703, 731, 733, 736, 738, 747, 751, 764, 768, 897, 898, 928, 931, 932, 933, 934, 942, 944, 946, 947, 949, 950, 952, 953, 954, 955, 957, 964, 965, 966, 968, 972, 977, 981, 987], "highli": [4, 9, 66, 73, 74, 87, 96, 114, 174, 184, 235, 238, 244, 269, 311, 323, 324, 337, 339, 343, 360, 362, 366, 369, 370, 402, 412, 446, 513, 621, 642, 758, 760, 804, 927, 931, 934, 935, 937, 945, 946, 950], "depend": [4, 5, 7, 33, 49, 69, 89, 108, 111, 112, 115, 118, 128, 132, 141, 146, 148, 149, 151, 156, 159, 183, 197, 200, 205, 206, 212, 226, 235, 236, 240, 241, 242, 253, 269, 273, 278, 282, 285, 295, 306, 311, 312, 319, 323, 324, 325, 330, 337, 339, 340, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 361, 362, 364, 366, 367, 369, 370, 371, 372, 373, 389, 390, 391, 395, 397, 399, 400, 402, 404, 407, 409, 410, 412, 414, 419, 434, 439, 440, 441, 443, 446, 450, 451, 452, 454, 455, 460, 484, 485, 491, 494, 501, 509, 510, 512, 538, 539, 540, 541, 552, 554, 557, 558, 561, 577, 582, 583, 588, 590, 598, 608, 609, 619, 621, 623, 626, 627, 628, 630, 637, 640, 641, 644, 645, 678, 690, 727, 730, 739, 740, 744, 745, 765, 773, 790, 791, 792, 794, 796, 797, 798, 799, 800, 806, 807, 809, 821, 822, 825, 828, 841, 848, 849, 852, 856, 865, 920, 921, 923, 924, 925, 927, 928, 930, 931, 933, 934, 935, 936, 939, 943, 945, 946, 947, 957, 964, 966, 968, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 987], "busi": [4, 179, 235, 345, 348, 737, 927, 931, 955], "dai": [4, 12, 140, 152, 180, 324, 334, 337, 827, 955, 978, 979, 986, 987], "week": [4, 336, 337, 351, 955, 986], "yearli": 4, "season": [4, 140, 152, 180, 336, 372], "perform": [4, 7, 18, 22, 23, 24, 25, 29, 32, 44, 45, 49, 52, 53, 57, 59, 61, 62, 64, 65, 68, 71, 78, 88, 95, 98, 99, 106, 108, 110, 112, 113, 117, 118, 123, 132, 133, 136, 146, 147, 148, 151, 152, 153, 154, 156, 168, 179, 181, 185, 186, 187, 196, 197, 200, 201, 203, 206, 211, 213, 215, 223, 226, 228, 230, 231, 232, 233, 235, 236, 237, 240, 241, 243, 244, 246, 248, 250, 252, 253, 266, 271, 273, 275, 277, 280, 286, 298, 301, 304, 310, 312, 319, 322, 324, 325, 332, 334, 339, 340, 341, 343, 345, 346, 348, 349, 350, 352, 356, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 371, 372, 373, 374, 380, 391, 393, 394, 395, 397, 398, 400, 402, 404, 405, 409, 411, 418, 419, 432, 433, 434, 435, 444, 452, 462, 465, 481, 482, 483, 485, 487, 489, 492, 493, 494, 495, 496, 498, 500, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 531, 532, 533, 538, 539, 540, 541, 551, 552, 553, 560, 561, 577, 580, 588, 590, 595, 601, 604, 605, 606, 608, 614, 615, 616, 617, 618, 620, 623, 625, 626, 627, 628, 632, 633, 635, 637, 639, 640, 643, 644, 653, 654, 655, 657, 658, 662, 663, 675, 678, 679, 687, 689, 691, 704, 705, 706, 727, 732, 733, 735, 736, 737, 741, 742, 743, 744, 745, 746, 749, 750, 757, 758, 760, 764, 769, 770, 771, 773, 774, 777, 780, 781, 783, 784, 785, 786, 787, 788, 789, 795, 797, 803, 804, 805, 806, 808, 809, 811, 814, 815, 817, 818, 820, 821, 822, 824, 825, 828, 830, 832, 833, 834, 835, 836, 837, 838, 842, 843, 845, 849, 850, 851, 852, 853, 855, 856, 857, 858, 867, 868, 904, 915, 920, 921, 923, 925, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 944, 945, 946, 947, 951, 952, 955, 957, 958, 961, 964, 967, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 323, 324, 325, 326, 330, 331, 332, 335, 336, 337, 338, 339, 341, 342, 343, 345, 346, 348, 349, 350, 352, 353, 356, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 920, 921, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 951, 952, 957, 961, 962, 963, 964, 965, 966, 969, 972, 973, 974, 975, 976, 977, 978, 979], "preprocess": [4, 5, 6, 10, 28, 38, 40, 45, 49, 53, 57, 64, 65, 66, 67, 69, 78, 85, 96, 104, 108, 129, 140, 153, 156, 158, 160, 167, 168, 170, 179, 180, 185, 195, 197, 200, 207, 208, 216, 219, 232, 242, 244, 249, 261, 262, 268, 269, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 291, 298, 301, 311, 325, 326, 329, 331, 334, 337, 342, 349, 350, 359, 362, 363, 366, 370, 371, 414, 415, 416, 417, 439, 517, 531, 532, 538, 539, 540, 541, 580, 608, 609, 622, 624, 626, 628, 637, 690, 777, 808, 809, 847, 848, 849, 850, 852, 853, 921, 927, 932, 935, 942, 945, 946, 948, 951, 954, 955, 957, 962, 963, 966, 968, 972, 973, 974, 975, 976, 977, 978, 979], "splinetransform": [4, 180, 283, 823, 941, 985, 987, 988], "class": [4, 8, 9, 10, 13, 15, 18, 21, 22, 23, 25, 27, 31, 36, 51, 53, 66, 82, 83, 90, 94, 97, 98, 106, 114, 119, 135, 136, 139, 143, 144, 146, 148, 156, 157, 169, 170, 171, 187, 191, 194, 195, 200, 206, 213, 215, 221, 222, 223, 228, 229, 230, 235, 237, 241, 245, 246, 252, 253, 256, 258, 261, 262, 263, 264, 278, 280, 284, 287, 289, 290, 293, 294, 298, 299, 307, 310, 311, 312, 325, 326, 329, 331, 332, 333, 334, 337, 338, 339, 341, 342, 343, 344, 346, 348, 349, 353, 358, 360, 362, 363, 365, 367, 371, 372, 376, 377, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 411, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 454, 458, 459, 460, 462, 464, 465, 469, 472, 473, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 670, 676, 678, 679, 680, 684, 685, 686, 687, 688, 689, 690, 691, 692, 703, 704, 706, 731, 732, 733, 735, 736, 737, 738, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 771, 772, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 872, 873, 874, 875, 876, 878, 879, 891, 897, 899, 901, 902, 915, 920, 921, 922, 923, 925, 926, 927, 928, 932, 933, 935, 938, 939, 941, 942, 944, 947, 952, 953, 955, 957, 961, 964, 966, 968, 969, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "extrapol": [4, 135, 158, 180, 209, 238, 827, 931, 941, 947, 985, 987], "option": [4, 27, 42, 48, 93, 112, 141, 147, 160, 180, 238, 244, 281, 310, 314, 319, 325, 331, 332, 333, 335, 337, 338, 340, 342, 343, 345, 346, 348, 350, 351, 353, 356, 362, 363, 365, 366, 367, 369, 370, 373, 384, 392, 393, 395, 396, 397, 398, 399, 402, 409, 411, 412, 413, 446, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 497, 499, 507, 508, 512, 514, 515, 517, 518, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 578, 580, 582, 583, 584, 585, 588, 589, 590, 591, 592, 596, 602, 607, 608, 609, 620, 623, 625, 626, 627, 628, 630, 632, 633, 637, 638, 639, 642, 644, 645, 654, 661, 663, 667, 671, 673, 684, 685, 686, 706, 707, 708, 713, 715, 716, 720, 723, 724, 725, 726, 727, 730, 739, 740, 742, 749, 750, 752, 772, 774, 775, 779, 780, 781, 782, 788, 789, 792, 797, 800, 804, 807, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 825, 826, 827, 828, 839, 840, 847, 855, 856, 857, 858, 859, 861, 874, 917, 920, 921, 927, 930, 931, 934, 941, 944, 946, 947, 952, 954, 964, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "load": [4, 6, 11, 14, 29, 42, 44, 49, 65, 66, 80, 85, 96, 107, 119, 121, 131, 140, 156, 160, 175, 176, 179, 187, 195, 214, 215, 219, 231, 240, 252, 253, 257, 262, 269, 270, 290, 291, 315, 323, 326, 329, 332, 334, 340, 343, 349, 356, 361, 365, 366, 367, 369, 432, 433, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 482, 484, 493, 788, 789, 884, 941, 952, 958, 960, 962, 968, 972, 977, 979, 980, 982, 983, 984, 985, 986, 987, 988], "openml": [4, 65, 118, 140, 151, 179, 187, 195, 197, 207, 252, 270, 330, 353, 446, 968, 980, 982, 985], "repositori": [4, 8, 156, 330, 332, 334, 335, 337, 339, 341, 345, 351, 353, 454, 951, 954, 968], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 323, 324, 325, 331, 332, 335, 336, 337, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 352, 353, 356, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 438, 445, 446, 450, 452, 453, 454, 456, 457, 458, 460, 462, 465, 471, 474, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 527, 529, 530, 531, 532, 533, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 638, 639, 640, 641, 642, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 665, 667, 668, 671, 672, 673, 675, 676, 677, 678, 679, 680, 683, 684, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 712, 713, 717, 718, 720, 722, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 835, 836, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 874, 879, 882, 884, 886, 887, 888, 889, 891, 893, 894, 895, 899, 902, 905, 919, 920, 921, 923, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 941, 942, 943, 944, 945, 946, 947, 952, 955, 957, 960, 961, 962, 963, 964, 965, 966, 968, 969, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987], "fetch_openml": [4, 5, 65, 69, 108, 118, 140, 151, 152, 153, 179, 187, 195, 197, 207, 215, 219, 252, 253, 270, 280, 284, 331, 341, 980, 982, 983, 984, 985, 986, 987], "bike_shar": 4, "bike_sharing_demand": [4, 152], "version": [4, 42, 49, 65, 85, 90, 137, 147, 152, 153, 156, 177, 180, 181, 187, 193, 195, 215, 219, 252, 270, 278, 280, 281, 282, 283, 285, 298, 310, 323, 326, 332, 336, 337, 338, 339, 340, 343, 345, 346, 348, 350, 351, 353, 355, 356, 361, 362, 365, 367, 369, 370, 372, 373, 374, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 450, 451, 452, 454, 455, 458, 459, 460, 462, 464, 472, 473, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 657, 658, 663, 664, 668, 671, 672, 673, 674, 676, 677, 678, 679, 680, 683, 688, 689, 690, 692, 695, 702, 703, 705, 706, 707, 708, 710, 715, 716, 717, 718, 727, 733, 734, 736, 738, 744, 745, 746, 747, 748, 749, 750, 751, 752, 759, 760, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 835, 836, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 865, 867, 868, 878, 879, 881, 883, 884, 892, 894, 897, 898, 899, 901, 906, 912, 917, 918, 920, 923, 925, 928, 931, 933, 935, 937, 939, 944, 945, 947, 949, 952, 954, 965, 970], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 123, 126, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 159, 161, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 319, 323, 324, 325, 331, 332, 334, 335, 337, 339, 341, 342, 343, 344, 346, 348, 349, 350, 353, 354, 355, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 383, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 409, 410, 412, 413, 414, 415, 418, 419, 421, 422, 423, 424, 425, 428, 432, 433, 434, 435, 443, 446, 450, 451, 454, 457, 458, 459, 460, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 527, 531, 532, 533, 534, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 553, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 653, 654, 655, 656, 658, 663, 665, 666, 667, 668, 671, 672, 673, 674, 675, 677, 678, 679, 680, 683, 684, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 712, 713, 717, 718, 720, 722, 725, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 831, 835, 840, 841, 843, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 860, 862, 867, 868, 873, 881, 882, 883, 884, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 899, 902, 904, 905, 918, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 949, 957, 958, 961, 962, 963, 964, 965, 969, 970, 972, 973, 974, 976, 977, 988], "as_fram": [4, 5, 65, 69, 108, 118, 140, 151, 152, 153, 167, 168, 179, 187, 195, 197, 215, 219, 253, 270, 278, 280, 282, 284, 285, 331, 332, 439, 440, 441, 442, 446, 450, 451, 452, 454, 455, 460, 982, 983, 984, 985], "trueparser": [4, 5, 8, 65, 69, 108, 118, 140, 151, 152, 153, 179, 187, 195, 197, 207, 215, 219, 252, 253, 270, 280, 284, 446, 987], "panda": [4, 5, 12, 23, 64, 65, 66, 67, 69, 105, 108, 111, 115, 118, 140, 146, 150, 151, 152, 153, 158, 168, 179, 187, 195, 197, 207, 215, 216, 219, 226, 233, 235, 236, 238, 246, 247, 252, 253, 270, 278, 280, 283, 284, 306, 310, 311, 331, 332, 335, 336, 337, 339, 340, 350, 353, 355, 363, 384, 393, 394, 396, 397, 399, 414, 416, 418, 432, 433, 434, 435, 439, 440, 441, 442, 446, 450, 451, 452, 454, 455, 460, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 516, 517, 518, 519, 520, 531, 532, 533, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 577, 578, 579, 580, 582, 583, 585, 588, 589, 590, 591, 592, 638, 639, 642, 746, 749, 750, 760, 774, 792, 797, 800, 804, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 845, 863, 920, 921, 941, 951, 952, 966, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "df": [4, 23, 25, 118, 150, 152, 158, 179, 197, 226, 235, 277, 311, 342, 370, 540, 541, 920, 921], "frame": [4, 15, 65, 140, 152, 179, 332, 337, 348, 351, 439, 440, 441, 442, 446, 450, 451, 452, 454, 455, 460, 951, 962, 984], "To": [4, 8, 15, 24, 25, 29, 42, 52, 71, 73, 75, 78, 81, 90, 108, 111, 112, 120, 123, 133, 140, 141, 144, 146, 147, 150, 151, 156, 160, 167, 179, 180, 181, 187, 197, 210, 211, 217, 219, 226, 230, 232, 233, 235, 237, 238, 240, 242, 252, 270, 273, 278, 280, 281, 282, 283, 284, 285, 308, 311, 314, 319, 323, 324, 330, 331, 335, 337, 338, 339, 341, 342, 343, 345, 348, 350, 356, 359, 362, 363, 364, 365, 366, 367, 369, 370, 398, 399, 400, 411, 414, 417, 442, 446, 452, 453, 457, 458, 481, 487, 488, 489, 491, 493, 494, 495, 496, 507, 508, 509, 510, 514, 515, 519, 547, 552, 577, 582, 596, 597, 602, 603, 606, 608, 609, 610, 611, 612, 613, 634, 650, 662, 677, 712, 734, 740, 749, 750, 770, 777, 819, 837, 838, 847, 848, 855, 856, 857, 858, 874, 884, 899, 918, 920, 921, 926, 927, 928, 929, 931, 932, 933, 934, 937, 938, 941, 945, 946, 947, 954, 955, 957, 961, 963, 964, 966, 972, 975, 977, 978, 979, 981, 983], "get": [4, 5, 9, 12, 15, 16, 18, 33, 44, 48, 51, 86, 90, 111, 120, 130, 133, 135, 140, 141, 146, 151, 152, 153, 154, 172, 181, 194, 197, 199, 213, 233, 236, 237, 239, 243, 246, 252, 253, 258, 266, 274, 280, 288, 291, 295, 298, 300, 303, 308, 310, 312, 314, 324, 326, 330, 331, 332, 335, 337, 338, 339, 342, 343, 344, 345, 350, 353, 356, 358, 362, 363, 364, 366, 367, 369, 370, 371, 372, 376, 377, 378, 382, 383, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 412, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 645, 649, 671, 672, 673, 675, 681, 682, 691, 705, 712, 713, 718, 734, 737, 744, 745, 746, 749, 750, 760, 769, 770, 771, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 862, 875, 876, 877, 883, 884, 920, 926, 927, 928, 930, 931, 941, 944, 945, 946, 947, 952, 954, 961, 964, 965, 966, 969, 972, 975, 978, 980, 983, 985, 986], "quick": [4, 90, 218, 337, 339, 343, 353, 556, 774, 931, 932, 941, 955, 964, 969], "understand": [4, 9, 81, 140, 148, 152, 230, 233, 282, 283, 295, 310, 313, 319, 336, 337, 338, 343, 348, 352, 362, 369, 370, 454, 774, 805, 806, 855, 856, 857, 858, 861, 920, 921, 928, 930, 947, 950, 951, 955, 972, 986], "pattern": [4, 15, 58, 75, 84, 135, 146, 148, 152, 283, 310, 311, 312, 319, 334, 337, 339, 359, 362, 363, 367, 369, 370, 398, 414, 416, 454, 482, 484, 491, 505, 506, 588, 658, 674, 690, 718, 737, 738, 744, 828, 923, 925, 927, 931, 932, 938, 946, 948, 952, 955, 984], "let": [4, 5, 49, 59, 65, 69, 85, 90, 98, 105, 108, 111, 112, 115, 135, 141, 142, 147, 151, 152, 153, 160, 168, 179, 181, 197, 199, 203, 230, 235, 238, 242, 310, 312, 318, 319, 332, 337, 339, 343, 348, 359, 362, 366, 369, 370, 450, 454, 460, 484, 596, 597, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 613, 631, 634, 814, 821, 822, 927, 928, 929, 930, 931, 938, 939, 941, 946, 947, 955, 964, 966, 982], "u": [4, 10, 11, 12, 15, 16, 31, 46, 48, 51, 85, 93, 108, 109, 135, 144, 150, 151, 152, 176, 180, 187, 197, 200, 203, 210, 218, 219, 222, 223, 227, 230, 235, 238, 242, 277, 310, 318, 324, 326, 332, 337, 341, 343, 345, 348, 353, 359, 362, 365, 367, 369, 370, 383, 413, 415, 432, 433, 434, 481, 487, 495, 496, 500, 502, 504, 506, 508, 510, 512, 515, 518, 520, 538, 539, 541, 561, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 622, 623, 628, 629, 631, 634, 639, 643, 654, 670, 689, 704, 781, 782, 791, 799, 806, 828, 841, 848, 850, 853, 856, 858, 884, 925, 930, 931, 938, 941, 949, 955, 966, 969, 982], "look": [4, 5, 49, 85, 88, 90, 111, 112, 135, 140, 141, 147, 151, 152, 181, 199, 203, 206, 227, 230, 235, 237, 270, 310, 319, 324, 325, 331, 332, 335, 337, 339, 341, 343, 345, 348, 349, 362, 365, 367, 368, 369, 370, 398, 438, 439, 507, 508, 509, 510, 514, 515, 552, 553, 581, 609, 642, 828, 855, 856, 857, 858, 927, 928, 941, 945, 946, 948, 966, 972, 980, 982], "averag": [4, 23, 25, 33, 35, 36, 40, 48, 55, 57, 102, 103, 107, 111, 114, 119, 120, 121, 140, 152, 160, 168, 179, 186, 197, 215, 238, 240, 243, 245, 252, 273, 280, 291, 310, 319, 323, 332, 334, 339, 359, 360, 364, 366, 370, 372, 373, 374, 388, 389, 392, 395, 396, 397, 399, 440, 443, 444, 473, 481, 482, 483, 487, 488, 490, 491, 497, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 519, 520, 537, 582, 583, 598, 608, 609, 616, 617, 619, 622, 624, 626, 627, 628, 630, 637, 650, 653, 654, 656, 657, 658, 663, 670, 671, 672, 674, 675, 677, 678, 679, 683, 684, 685, 687, 688, 689, 692, 694, 695, 697, 699, 700, 702, 705, 713, 730, 731, 732, 733, 734, 736, 737, 742, 743, 744, 745, 772, 794, 814, 917, 921, 926, 927, 932, 935, 937, 938, 945, 946, 947, 964, 966, 972, 975, 976, 977, 979, 980, 981, 982, 983, 986, 987], "per": [4, 10, 44, 49, 59, 82, 104, 108, 140, 142, 151, 152, 179, 194, 197, 219, 222, 231, 242, 244, 273, 282, 306, 310, 312, 323, 332, 333, 337, 342, 343, 346, 348, 350, 360, 362, 366, 367, 368, 369, 370, 372, 398, 400, 407, 411, 414, 418, 437, 450, 452, 453, 454, 458, 460, 462, 465, 473, 482, 484, 485, 486, 489, 491, 493, 499, 500, 511, 512, 519, 533, 538, 541, 560, 561, 582, 583, 591, 592, 608, 609, 616, 618, 621, 623, 624, 625, 626, 628, 642, 646, 663, 666, 670, 690, 703, 707, 708, 730, 732, 744, 745, 769, 776, 777, 778, 780, 781, 784, 786, 804, 807, 813, 815, 817, 818, 821, 822, 828, 845, 847, 848, 849, 850, 851, 852, 853, 872, 873, 884, 906, 920, 923, 927, 930, 931, 932, 935, 938, 945, 946, 947, 951, 952, 964, 966, 974, 975, 976, 977, 978, 979, 980, 981, 984, 985, 986, 988], "hour": [4, 151, 152, 337, 343, 928, 950], "sundai": 4, "weekend": 4, "clearli": [4, 55, 88, 152, 211, 336, 337, 348, 350, 367, 369, 932, 938], "distinguish": [4, 36, 73, 83, 90, 181, 232, 332, 339, 350, 369, 372, 920, 931, 934, 937], "commut": 4, "morn": 4, "even": [4, 13, 25, 36, 38, 48, 69, 78, 88, 111, 141, 151, 152, 153, 168, 179, 180, 187, 197, 203, 204, 212, 222, 241, 273, 275, 277, 278, 292, 311, 312, 319, 325, 332, 336, 337, 338, 339, 341, 342, 345, 348, 350, 360, 361, 362, 364, 366, 367, 369, 370, 372, 392, 394, 396, 397, 398, 399, 409, 411, 482, 485, 507, 508, 509, 510, 514, 515, 532, 539, 544, 577, 578, 580, 589, 608, 609, 645, 655, 662, 692, 710, 716, 723, 727, 730, 735, 737, 771, 839, 840, 855, 856, 857, 858, 884, 900, 920, 921, 923, 925, 927, 930, 931, 934, 936, 937, 939, 941, 943, 945, 946, 947, 955, 966, 979, 980, 981, 984, 986], "leisur": 4, "more": [4, 6, 7, 8, 11, 12, 13, 18, 23, 24, 25, 27, 28, 33, 35, 36, 39, 40, 42, 45, 48, 49, 52, 55, 62, 69, 73, 80, 81, 83, 85, 88, 92, 93, 100, 102, 105, 106, 108, 110, 111, 112, 113, 114, 118, 133, 135, 141, 144, 147, 151, 152, 156, 158, 159, 165, 168, 170, 173, 177, 179, 180, 181, 194, 195, 196, 197, 199, 203, 206, 211, 212, 213, 217, 221, 223, 224, 226, 227, 229, 233, 235, 236, 237, 238, 242, 244, 253, 255, 263, 268, 269, 271, 273, 274, 275, 278, 280, 281, 282, 284, 285, 288, 295, 298, 303, 306, 308, 310, 311, 312, 314, 315, 319, 323, 324, 325, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 349, 350, 351, 353, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 524, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 880, 882, 884, 886, 894, 897, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 951, 952, 953, 954, 955, 957, 961, 962, 963, 964, 965, 966, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "spread": [4, 36, 201, 236, 273, 287, 288, 289, 292, 323, 337, 362, 402, 412, 465, 825, 836, 844, 931], "peak": [4, 25, 152, 360, 366, 986], "middl": [4, 22, 55, 90, 99, 307, 334, 938, 941], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 154, 156, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 284, 285, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 331, 340, 344, 353, 355, 389, 452, 581, 582, 647, 648, 650, 651, 652, 752, 861, 951, 960, 962, 963, 964, 969, 981, 984, 985, 986, 987], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 154, 156, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 284, 285, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 337, 344, 389, 452, 581, 582, 647, 648, 650, 651, 652, 752, 962, 963, 964, 969, 986], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 154, 156, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 284, 285, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 344, 389, 452, 581, 582, 647, 648, 650, 651, 652, 752, 861, 938, 962, 963, 964, 969], "fig": [4, 5, 7, 8, 10, 14, 23, 25, 38, 39, 41, 49, 52, 55, 59, 61, 67, 71, 73, 78, 81, 85, 90, 91, 92, 96, 98, 104, 105, 108, 111, 112, 115, 116, 118, 120, 138, 144, 146, 152, 154, 156, 159, 167, 170, 173, 174, 176, 177, 179, 180, 187, 192, 194, 197, 199, 200, 201, 202, 203, 204, 207, 209, 215, 216, 226, 230, 231, 232, 235, 236, 237, 238, 241, 244, 245, 246, 252, 253, 255, 257, 258, 266, 269, 270, 273, 274, 275, 277, 278, 280, 284, 285, 295, 305, 306, 307, 308, 310, 311, 312, 314, 344, 962], "ax": [4, 5, 7, 8, 10, 12, 14, 15, 23, 25, 27, 28, 29, 36, 38, 39, 41, 49, 51, 52, 59, 61, 66, 67, 69, 73, 75, 78, 81, 83, 85, 91, 92, 96, 98, 101, 104, 105, 108, 115, 116, 118, 119, 120, 138, 139, 144, 146, 150, 151, 152, 153, 154, 156, 158, 159, 162, 168, 170, 171, 174, 176, 177, 179, 180, 181, 183, 184, 187, 188, 190, 192, 194, 197, 199, 200, 201, 202, 203, 204, 207, 212, 215, 216, 218, 221, 223, 226, 230, 231, 232, 235, 237, 238, 239, 241, 242, 244, 245, 246, 247, 249, 252, 253, 255, 256, 257, 258, 261, 263, 264, 268, 269, 270, 273, 275, 276, 277, 278, 280, 281, 284, 285, 294, 295, 296, 299, 300, 305, 306, 307, 308, 310, 311, 312, 314, 315, 339, 340, 367, 372, 389, 484, 491, 500, 581, 582, 647, 648, 650, 651, 652, 668, 752, 861, 931, 934, 938, 969, 982], "subplot": [4, 5, 6, 8, 10, 11, 13, 14, 27, 28, 29, 31, 35, 39, 40, 46, 47, 49, 50, 51, 52, 55, 57, 60, 61, 67, 69, 72, 73, 74, 75, 77, 78, 82, 83, 85, 86, 87, 88, 90, 95, 96, 99, 101, 102, 104, 105, 107, 108, 112, 115, 116, 118, 119, 120, 128, 137, 139, 144, 146, 147, 151, 152, 154, 156, 159, 162, 170, 171, 173, 174, 177, 178, 179, 180, 181, 183, 187, 192, 195, 197, 199, 200, 203, 204, 206, 207, 209, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 226, 227, 230, 231, 232, 235, 237, 238, 240, 241, 242, 244, 245, 246, 248, 249, 252, 253, 255, 256, 257, 258, 261, 262, 264, 265, 266, 268, 269, 270, 271, 274, 275, 276, 277, 278, 280, 284, 285, 290, 292, 295, 296, 298, 305, 306, 307, 308, 310, 311, 312, 314, 315, 344, 962], "figsiz": [4, 5, 6, 10, 12, 13, 14, 23, 24, 25, 27, 28, 29, 31, 35, 36, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 57, 59, 60, 61, 67, 69, 73, 75, 77, 78, 80, 81, 82, 83, 85, 88, 89, 90, 91, 92, 95, 96, 99, 101, 102, 108, 109, 110, 111, 112, 116, 118, 119, 128, 137, 139, 143, 144, 146, 147, 151, 152, 154, 156, 158, 159, 162, 169, 173, 176, 177, 178, 179, 180, 181, 183, 185, 187, 190, 193, 195, 197, 199, 200, 201, 203, 204, 206, 207, 209, 211, 213, 214, 215, 216, 221, 223, 224, 227, 230, 231, 232, 237, 238, 239, 242, 244, 245, 249, 252, 253, 255, 268, 269, 271, 273, 274, 275, 276, 277, 278, 284, 285, 287, 289, 296, 298, 302, 303, 305, 306, 307, 308, 310, 311, 312, 861, 962], "4": [4, 5, 6, 7, 9, 10, 16, 19, 23, 24, 25, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 51, 53, 54, 55, 57, 59, 60, 61, 66, 67, 74, 75, 77, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 98, 100, 102, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 123, 129, 138, 140, 141, 143, 144, 146, 147, 151, 152, 156, 158, 159, 161, 162, 169, 170, 171, 172, 176, 177, 178, 179, 180, 185, 186, 187, 189, 192, 193, 197, 199, 206, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 235, 236, 237, 240, 242, 244, 246, 249, 252, 253, 255, 257, 258, 259, 260, 263, 268, 270, 271, 273, 274, 276, 277, 280, 281, 283, 285, 289, 290, 295, 297, 301, 302, 303, 306, 307, 308, 310, 311, 319, 324, 331, 332, 334, 335, 337, 342, 343, 346, 348, 349, 350, 353, 354, 355, 360, 362, 363, 364, 366, 367, 369, 370, 371, 372, 374, 388, 390, 391, 392, 394, 396, 397, 398, 399, 401, 402, 403, 409, 410, 412, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 446, 454, 462, 463, 466, 467, 468, 478, 482, 483, 484, 485, 487, 488, 489, 490, 494, 496, 497, 499, 500, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 514, 515, 520, 527, 531, 532, 539, 540, 541, 543, 544, 553, 557, 558, 564, 567, 569, 572, 577, 578, 579, 580, 583, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 627, 629, 630, 634, 637, 639, 640, 642, 643, 648, 649, 652, 656, 657, 665, 666, 675, 676, 683, 692, 693, 695, 696, 697, 698, 700, 701, 705, 717, 718, 730, 731, 737, 738, 741, 743, 744, 745, 746, 747, 748, 751, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 774, 777, 778, 779, 782, 783, 784, 785, 787, 796, 805, 806, 807, 813, 814, 815, 820, 821, 823, 824, 826, 831, 835, 841, 847, 848, 850, 851, 853, 855, 856, 857, 873, 881, 883, 884, 886, 888, 889, 895, 899, 902, 920, 921, 924, 925, 926, 927, 929, 931, 932, 933, 934, 941, 942, 945, 946, 949, 957, 961, 962, 963, 964, 966, 970, 973, 974, 975, 977, 978, 979, 981, 985, 986, 987], "average_week_demand": 4, "groupbi": [4, 67, 152, 187, 197], "weekdai": [4, 152], "count": [4, 14, 23, 25, 37, 45, 49, 64, 83, 119, 120, 152, 179, 181, 210, 219, 244, 253, 281, 282, 311, 312, 332, 334, 341, 346, 350, 351, 360, 361, 362, 367, 369, 370, 399, 439, 486, 494, 531, 538, 539, 540, 541, 544, 554, 567, 590, 647, 655, 665, 668, 678, 679, 687, 703, 732, 733, 735, 736, 783, 787, 788, 789, 797, 800, 811, 859, 861, 886, 896, 920, 923, 927, 931, 933, 934, 941, 947, 955, 966, 972, 975, 977, 980, 981, 983, 984], "mean": [4, 5, 8, 11, 13, 22, 23, 25, 31, 32, 33, 36, 38, 40, 46, 49, 50, 65, 72, 73, 74, 75, 78, 83, 85, 88, 89, 90, 92, 93, 101, 102, 107, 108, 111, 112, 118, 119, 120, 124, 132, 135, 140, 142, 144, 146, 148, 151, 152, 159, 161, 168, 170, 172, 175, 179, 181, 183, 185, 186, 188, 194, 195, 196, 197, 202, 204, 206, 209, 210, 211, 212, 213, 215, 216, 217, 219, 221, 222, 223, 224, 226, 227, 231, 232, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 264, 273, 276, 278, 280, 283, 290, 298, 301, 306, 308, 309, 310, 312, 319, 323, 329, 331, 332, 334, 337, 338, 339, 341, 342, 343, 345, 346, 348, 349, 350, 359, 360, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 383, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 408, 409, 410, 411, 412, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 438, 451, 452, 454, 456, 462, 469, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 533, 538, 539, 540, 541, 544, 547, 552, 556, 557, 558, 559, 560, 561, 563, 572, 577, 578, 580, 582, 584, 585, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 634, 638, 639, 640, 641, 642, 643, 644, 645, 654, 655, 657, 659, 662, 663, 666, 667, 673, 675, 678, 679, 680, 685, 686, 687, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 706, 723, 727, 728, 730, 732, 733, 734, 736, 737, 739, 740, 742, 744, 745, 746, 749, 750, 752, 760, 764, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 794, 795, 796, 798, 799, 801, 802, 804, 805, 806, 807, 809, 810, 812, 813, 817, 818, 820, 824, 826, 828, 833, 835, 836, 838, 840, 842, 843, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 863, 867, 868, 870, 905, 906, 912, 916, 920, 921, 922, 925, 927, 928, 930, 933, 934, 935, 936, 938, 939, 944, 945, 946, 947, 951, 955, 961, 964, 966, 967, 968, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "plot": [4, 5, 6, 9, 11, 12, 14, 15, 23, 24, 25, 26, 28, 29, 30, 32, 33, 36, 38, 39, 41, 50, 51, 53, 54, 55, 56, 57, 60, 66, 67, 69, 72, 73, 74, 78, 79, 81, 85, 88, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 110, 111, 113, 115, 116, 117, 124, 126, 128, 129, 131, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 148, 149, 150, 151, 153, 154, 156, 157, 161, 162, 164, 166, 167, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 193, 194, 196, 197, 201, 202, 203, 204, 205, 206, 209, 210, 212, 213, 214, 219, 221, 222, 223, 225, 227, 228, 229, 230, 235, 236, 238, 240, 241, 245, 246, 247, 249, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 273, 274, 275, 276, 277, 278, 281, 284, 285, 288, 289, 292, 293, 294, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 316, 317, 318, 326, 337, 340, 346, 348, 352, 353, 357, 360, 362, 364, 366, 368, 369, 389, 392, 400, 406, 414, 421, 446, 451, 452, 454, 462, 465, 469, 473, 474, 503, 507, 510, 512, 514, 515, 519, 520, 560, 572, 581, 582, 583, 607, 608, 622, 626, 647, 648, 650, 651, 652, 653, 668, 676, 699, 731, 733, 736, 737, 738, 752, 763, 769, 770, 771, 772, 775, 786, 790, 806, 809, 821, 822, 825, 828, 847, 852, 855, 856, 861, 924, 925, 927, 928, 930, 931, 934, 935, 937, 945, 946, 947, 951, 952, 961, 962, 964, 968, 973, 975, 976, 981, 982, 983, 984, 985, 986, 987], "_": [4, 5, 7, 8, 11, 12, 14, 23, 24, 25, 29, 30, 36, 39, 46, 49, 53, 58, 62, 64, 75, 83, 85, 90, 91, 93, 95, 102, 103, 104, 128, 135, 140, 141, 142, 150, 151, 152, 156, 158, 162, 163, 164, 166, 167, 168, 171, 176, 177, 179, 181, 192, 196, 200, 203, 207, 212, 219, 230, 235, 237, 238, 239, 241, 242, 244, 256, 261, 264, 271, 275, 278, 281, 284, 285, 288, 289, 306, 310, 312, 315, 339, 343, 350, 367, 369, 370, 482, 483, 484, 485, 486, 488, 489, 490, 493, 497, 516, 547, 602, 603, 613, 634, 638, 639, 640, 641, 646, 648, 650, 713, 746, 760, 792, 800, 821, 921, 927, 928, 931, 933, 934, 935, 938, 939, 941, 946, 947, 964, 979], "hourli": [4, 151], "xtick": [4, 6, 8, 11, 27, 36, 40, 42, 46, 47, 48, 53, 54, 57, 75, 77, 81, 88, 108, 109, 110, 137, 138, 139, 143, 162, 169, 175, 192, 206, 213, 222, 223, 224, 227, 234, 235, 249, 257, 266, 271, 287, 298, 301, 302, 303, 304, 647, 962], "24": [4, 5, 61, 148, 152, 253, 279, 280, 341, 353, 362, 369, 370, 388, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 410, 412, 414, 419, 420, 421, 422, 423, 424, 425, 426, 439, 440, 441, 442, 446, 454, 465, 466, 467, 468, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 493, 494, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 563, 577, 578, 579, 580, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 648, 650, 652, 658, 664, 676, 695, 702, 744, 745, 746, 749, 750, 760, 767, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 809, 811, 812, 813, 814, 817, 818, 820, 822, 823, 824, 825, 826, 828, 837, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 878, 879, 906, 912, 920, 938, 941, 949, 970, 972, 980, 981, 982, 983, 985], "rang": [4, 5, 6, 7, 8, 10, 12, 15, 16, 18, 23, 24, 25, 27, 29, 30, 33, 34, 36, 38, 42, 43, 44, 46, 47, 55, 56, 58, 59, 60, 71, 72, 74, 75, 99, 101, 102, 103, 105, 111, 117, 128, 132, 136, 151, 152, 156, 168, 169, 173, 177, 179, 180, 186, 187, 195, 197, 200, 202, 209, 210, 214, 221, 223, 226, 227, 230, 234, 235, 236, 238, 239, 240, 242, 243, 244, 246, 247, 248, 249, 252, 257, 263, 266, 271, 273, 278, 280, 284, 285, 288, 298, 310, 311, 315, 318, 324, 331, 332, 334, 337, 339, 343, 346, 350, 356, 362, 366, 369, 372, 391, 411, 419, 421, 422, 423, 424, 425, 426, 428, 431, 441, 444, 445, 464, 477, 491, 503, 504, 509, 510, 513, 538, 539, 541, 579, 582, 588, 590, 598, 599, 619, 621, 626, 630, 642, 662, 680, 695, 737, 774, 780, 794, 796, 798, 799, 804, 818, 825, 826, 827, 832, 833, 836, 837, 840, 841, 883, 884, 899, 920, 927, 931, 935, 945, 952, 955, 960, 961, 962, 964, 977, 978, 979, 980, 982, 985], "7": [4, 12, 13, 14, 15, 18, 24, 27, 31, 35, 38, 40, 42, 49, 50, 51, 55, 59, 60, 62, 66, 73, 75, 88, 98, 102, 114, 118, 119, 144, 150, 151, 152, 154, 156, 161, 163, 172, 178, 180, 193, 197, 199, 206, 211, 212, 217, 221, 222, 225, 226, 230, 235, 239, 241, 242, 246, 248, 252, 253, 255, 258, 259, 261, 270, 273, 277, 280, 283, 284, 287, 290, 295, 297, 302, 306, 307, 311, 312, 319, 332, 334, 335, 337, 341, 342, 343, 353, 354, 355, 366, 367, 369, 370, 371, 372, 390, 395, 398, 400, 401, 402, 403, 412, 421, 422, 441, 482, 483, 484, 485, 486, 488, 494, 511, 512, 538, 541, 550, 577, 578, 580, 597, 599, 608, 611, 642, 671, 672, 673, 675, 677, 693, 694, 695, 699, 700, 702, 734, 741, 744, 747, 748, 753, 756, 763, 764, 767, 771, 774, 778, 788, 789, 797, 806, 807, 820, 821, 842, 843, 884, 887, 888, 895, 920, 921, 926, 927, 929, 931, 932, 934, 935, 937, 941, 945, 946, 949, 957, 961, 964, 970, 973, 974, 975, 978, 979, 980, 981, 985], "xticklabel": [4, 10, 108, 152], "sun": [4, 152, 980, 985, 986], "mon": [4, 152], "tue": [4, 152, 978], "wed": [4, 152], "thu": [4, 5, 22, 23, 24, 25, 36, 49, 55, 71, 75, 88, 90, 102, 104, 106, 108, 129, 135, 140, 141, 152, 167, 168, 179, 181, 197, 206, 212, 216, 223, 233, 235, 240, 241, 242, 280, 283, 314, 319, 323, 324, 332, 339, 343, 348, 350, 360, 362, 366, 367, 369, 370, 372, 373, 388, 390, 413, 465, 477, 503, 504, 505, 506, 507, 508, 513, 514, 515, 553, 556, 560, 572, 577, 582, 583, 593, 595, 608, 627, 655, 668, 674, 737, 742, 748, 753, 755, 767, 779, 782, 817, 847, 922, 923, 924, 925, 926, 927, 928, 931, 932, 937, 938, 939, 941, 943, 944, 945, 946, 952, 954, 955, 972, 974, 978, 980, 981, 982, 984, 988], "fri": [4, 152, 332], "sat": [4, 152, 370], "xlabel": [4, 8, 9, 22, 23, 24, 25, 30, 33, 37, 56, 71, 72, 74, 75, 77, 78, 81, 87, 93, 99, 100, 101, 103, 108, 109, 110, 111, 112, 113, 117, 121, 123, 124, 128, 129, 132, 135, 136, 137, 138, 140, 141, 142, 151, 158, 161, 162, 164, 166, 167, 168, 169, 172, 173, 179, 181, 182, 183, 184, 186, 188, 189, 193, 197, 210, 212, 213, 230, 234, 235, 239, 240, 244, 245, 248, 249, 250, 255, 256, 259, 260, 295, 297, 298, 301, 310, 315, 316, 317, 581], "ylabel": [4, 8, 9, 22, 23, 24, 25, 27, 30, 31, 33, 56, 71, 72, 74, 75, 77, 78, 81, 87, 93, 99, 100, 101, 103, 109, 110, 111, 112, 113, 117, 121, 123, 124, 128, 129, 132, 135, 136, 137, 138, 140, 141, 142, 151, 158, 161, 162, 164, 166, 167, 168, 169, 172, 173, 179, 181, 182, 183, 184, 186, 188, 189, 197, 210, 212, 213, 230, 234, 235, 238, 239, 240, 244, 245, 248, 249, 250, 256, 295, 298, 301, 310, 315, 316, 317, 581], "number": [4, 5, 7, 8, 10, 12, 13, 18, 23, 24, 25, 29, 30, 32, 34, 35, 37, 39, 40, 42, 43, 44, 45, 46, 49, 50, 52, 56, 57, 58, 62, 64, 65, 66, 67, 69, 75, 77, 78, 82, 83, 85, 87, 89, 90, 93, 98, 99, 100, 102, 106, 107, 109, 110, 111, 112, 114, 118, 120, 129, 130, 133, 143, 144, 147, 148, 151, 152, 156, 168, 178, 179, 180, 181, 186, 187, 193, 194, 195, 196, 197, 199, 206, 210, 213, 216, 221, 222, 224, 226, 227, 229, 230, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 253, 255, 259, 260, 273, 275, 276, 280, 281, 282, 283, 284, 285, 291, 298, 302, 303, 306, 311, 312, 314, 318, 319, 324, 325, 329, 331, 332, 333, 334, 335, 337, 340, 341, 343, 344, 345, 346, 348, 349, 350, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 383, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 523, 531, 532, 533, 534, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 653, 654, 655, 657, 662, 663, 664, 666, 668, 670, 673, 677, 678, 679, 680, 683, 684, 687, 689, 701, 704, 723, 727, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 836, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 867, 868, 871, 883, 884, 887, 888, 899, 900, 902, 905, 906, 923, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 943, 945, 946, 947, 948, 951, 952, 954, 957, 964, 965, 966, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "rental": [4, 152, 938], "target": [4, 6, 16, 18, 24, 27, 29, 30, 41, 48, 63, 68, 78, 81, 89, 92, 94, 98, 100, 106, 107, 108, 111, 112, 115, 117, 118, 119, 121, 126, 128, 131, 133, 135, 137, 140, 141, 147, 148, 150, 151, 152, 153, 154, 158, 162, 172, 175, 179, 181, 184, 187, 188, 200, 207, 209, 210, 211, 212, 214, 215, 216, 223, 229, 233, 236, 238, 240, 241, 244, 245, 253, 256, 261, 264, 265, 269, 273, 281, 282, 284, 287, 288, 291, 292, 294, 295, 298, 302, 304, 305, 310, 311, 315, 316, 317, 318, 319, 323, 325, 326, 329, 330, 331, 332, 333, 334, 339, 341, 342, 345, 346, 349, 352, 362, 366, 369, 372, 384, 388, 389, 390, 393, 396, 414, 415, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 458, 460, 470, 474, 481, 482, 484, 486, 487, 489, 492, 493, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 517, 518, 519, 520, 523, 532, 533, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 577, 578, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 647, 648, 650, 651, 652, 657, 658, 659, 662, 663, 668, 670, 671, 672, 673, 675, 676, 677, 678, 679, 684, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 731, 732, 733, 734, 736, 737, 738, 741, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 795, 797, 798, 799, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 825, 826, 827, 828, 831, 836, 839, 840, 842, 843, 844, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 867, 893, 894, 895, 922, 923, 924, 927, 928, 931, 935, 938, 939, 945, 946, 947, 952, 954, 955, 957, 962, 964, 966, 968, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "absolut": [4, 69, 89, 108, 133, 151, 179, 181, 185, 197, 339, 362, 364, 366, 367, 369, 370, 371, 372, 373, 395, 400, 406, 407, 481, 487, 492, 495, 496, 498, 499, 500, 508, 510, 511, 512, 515, 538, 540, 541, 543, 547, 552, 569, 577, 582, 596, 599, 600, 602, 604, 606, 621, 626, 628, 632, 633, 649, 654, 667, 671, 685, 686, 694, 695, 697, 702, 704, 706, 717, 742, 748, 752, 763, 766, 772, 774, 786, 788, 789, 793, 812, 817, 820, 832, 856, 858, 917, 927, 928, 941, 945, 947, 964, 965, 973, 978, 983, 984, 985, 986], "basi": [4, 6, 13, 90, 135, 140, 142, 180, 270, 283, 298, 329, 335, 338, 362, 367, 369, 402, 484, 572, 582, 589, 641, 827, 929, 941, 946, 953, 961, 962, 965, 968, 980, 982, 985], "max": [4, 8, 9, 10, 11, 12, 16, 18, 23, 25, 28, 36, 40, 48, 53, 57, 62, 66, 70, 75, 81, 85, 88, 96, 99, 101, 107, 116, 123, 125, 126, 128, 129, 137, 139, 140, 147, 148, 161, 166, 167, 168, 172, 174, 181, 182, 185, 193, 195, 197, 202, 210, 213, 233, 234, 235, 246, 248, 252, 253, 255, 259, 260, 266, 268, 270, 273, 275, 276, 278, 283, 290, 292, 297, 304, 307, 323, 362, 364, 367, 419, 420, 421, 422, 423, 424, 425, 426, 427, 462, 486, 505, 506, 507, 508, 509, 510, 513, 514, 515, 556, 577, 581, 582, 598, 599, 619, 630, 641, 642, 646, 649, 654, 655, 690, 706, 738, 739, 740, 746, 805, 806, 817, 818, 820, 827, 833, 834, 855, 856, 857, 858, 899, 927, 929, 934, 941, 945, 946, 964, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "rescal": [4, 42, 43, 90, 160, 167, 202, 273, 308, 364, 374, 419, 420, 421, 422, 423, 424, 425, 426, 483, 488, 596, 599, 602, 820, 826, 849, 850, 851, 852, 853, 931, 941, 965, 976, 977], "variabl": [4, 9, 11, 12, 15, 33, 64, 102, 105, 108, 111, 112, 125, 126, 128, 142, 143, 146, 147, 152, 153, 156, 168, 179, 183, 184, 197, 201, 227, 235, 238, 245, 278, 319, 323, 325, 332, 334, 335, 337, 339, 341, 342, 345, 350, 362, 363, 364, 365, 367, 369, 370, 371, 400, 432, 433, 434, 437, 449, 451, 458, 465, 482, 484, 486, 491, 494, 503, 509, 510, 554, 556, 557, 558, 590, 600, 601, 604, 605, 611, 632, 633, 645, 659, 696, 747, 748, 751, 753, 754, 755, 756, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 773, 776, 780, 781, 811, 825, 836, 848, 920, 921, 923, 927, 930, 931, 932, 933, 934, 936, 938, 939, 941, 945, 947, 951, 952, 954, 957, 958, 960, 962, 972, 977, 980, 982, 985, 987], "rel": [4, 6, 8, 16, 25, 56, 90, 105, 140, 156, 159, 179, 197, 224, 259, 260, 274, 281, 284, 298, 310, 311, 332, 336, 339, 345, 350, 360, 362, 366, 369, 370, 372, 391, 394, 397, 399, 409, 471, 474, 481, 484, 487, 491, 507, 508, 509, 510, 514, 515, 516, 554, 599, 608, 609, 621, 640, 644, 678, 696, 746, 749, 750, 752, 760, 772, 775, 788, 789, 793, 805, 806, 817, 818, 828, 843, 847, 848, 849, 852, 854, 855, 856, 857, 858, 927, 928, 931, 933, 934, 935, 937, 954, 962], "so": [4, 9, 12, 15, 16, 38, 44, 51, 56, 60, 74, 107, 110, 117, 135, 140, 151, 153, 156, 159, 179, 180, 206, 235, 253, 259, 260, 263, 269, 270, 274, 281, 290, 298, 306, 312, 318, 319, 323, 324, 325, 331, 332, 336, 337, 339, 341, 342, 343, 345, 346, 350, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 375, 376, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 446, 458, 459, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 557, 558, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 645, 655, 658, 666, 675, 690, 705, 737, 744, 745, 746, 749, 750, 752, 753, 760, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 837, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 884, 897, 906, 920, 921, 923, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 937, 941, 943, 944, 945, 946, 952, 955, 964, 965, 966, 972, 974, 975, 978, 979, 980, 981, 982, 983, 985, 986], "error": [4, 5, 7, 13, 16, 25, 69, 71, 72, 74, 89, 95, 97, 98, 99, 102, 105, 108, 112, 135, 146, 148, 151, 168, 175, 179, 181, 183, 185, 186, 193, 197, 209, 212, 227, 228, 231, 235, 236, 240, 249, 259, 260, 284, 297, 306, 310, 311, 334, 335, 337, 339, 340, 341, 342, 346, 348, 350, 356, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 394, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 446, 453, 465, 474, 481, 487, 492, 493, 495, 498, 503, 504, 505, 506, 508, 509, 510, 511, 512, 514, 515, 517, 525, 542, 545, 546, 548, 549, 550, 556, 579, 582, 593, 596, 597, 598, 601, 603, 605, 611, 613, 615, 619, 621, 623, 625, 627, 628, 630, 635, 638, 639, 642, 643, 646, 648, 651, 652, 659, 662, 670, 671, 672, 676, 689, 692, 693, 694, 695, 696, 697, 699, 700, 702, 705, 713, 727, 731, 737, 738, 746, 749, 750, 752, 760, 770, 771, 772, 774, 775, 776, 777, 778, 783, 784, 785, 787, 788, 789, 795, 796, 798, 799, 800, 803, 806, 809, 821, 822, 827, 828, 845, 847, 849, 850, 851, 856, 858, 865, 866, 867, 868, 871, 894, 915, 918, 920, 921, 922, 924, 925, 926, 928, 932, 935, 939, 941, 945, 946, 947, 953, 964, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "easili": [4, 9, 28, 130, 154, 182, 195, 211, 216, 219, 235, 237, 244, 258, 275, 337, 339, 350, 351, 363, 369, 370, 372, 399, 925, 927, 928, 941, 945, 946, 947, 958, 961, 966, 978], "interpret": [4, 25, 133, 142, 148, 149, 150, 152, 179, 180, 195, 197, 229, 235, 237, 238, 271, 274, 277, 282, 310, 312, 323, 335, 337, 338, 343, 345, 346, 350, 352, 360, 362, 363, 368, 370, 402, 414, 415, 417, 446, 491, 522, 561, 589, 593, 603, 622, 623, 641, 642, 645, 651, 678, 702, 707, 708, 732, 739, 740, 752, 761, 771, 772, 774, 777, 809, 821, 828, 899, 925, 927, 931, 932, 938, 941, 947, 951, 957, 965, 972, 973, 977, 980, 985, 987], "fraction": [4, 23, 25, 109, 111, 179, 187, 197, 306, 311, 360, 366, 369, 389, 390, 399, 400, 406, 407, 465, 477, 507, 508, 509, 510, 514, 515, 516, 540, 543, 552, 616, 617, 618, 621, 626, 627, 628, 653, 671, 672, 673, 683, 741, 743, 748, 752, 772, 773, 787, 815, 849, 850, 851, 855, 856, 857, 858, 897, 927, 931, 934, 938, 939, 941, 946, 947, 952, 973, 974, 975, 986], "maximum": [4, 8, 11, 25, 30, 33, 52, 71, 72, 73, 74, 75, 87, 104, 107, 109, 136, 142, 148, 157, 167, 245, 255, 259, 260, 266, 273, 293, 311, 314, 316, 317, 323, 342, 343, 349, 350, 359, 360, 362, 364, 365, 367, 369, 370, 372, 373, 374, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 404, 407, 409, 411, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 448, 459, 461, 462, 463, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 502, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 533, 534, 547, 560, 577, 581, 582, 585, 587, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 624, 626, 627, 628, 629, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 666, 693, 730, 744, 746, 749, 750, 752, 760, 767, 772, 797, 804, 805, 806, 812, 813, 817, 818, 820, 823, 824, 825, 827, 835, 836, 841, 842, 843, 844, 847, 848, 852, 855, 856, 857, 858, 859, 861, 864, 871, 920, 926, 927, 928, 930, 931, 933, 934, 935, 937, 941, 945, 946, 947, 965, 979, 980, 982, 983, 986, 987], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 22, 23, 25, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 53, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 107, 108, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 126, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 148, 150, 151, 152, 153, 154, 156, 157, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 202, 206, 207, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 268, 269, 270, 271, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 306, 307, 308, 310, 311, 314, 315, 316, 317, 318, 323, 325, 326, 329, 332, 334, 337, 340, 342, 343, 346, 348, 350, 356, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 378, 383, 384, 385, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 451, 459, 460, 474, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 525, 527, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 561, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 644, 647, 648, 650, 651, 652, 661, 672, 684, 699, 737, 744, 745, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 835, 836, 837, 838, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 876, 915, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 951, 952, 953, 955, 961, 962, 963, 964, 965, 966, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "method": [4, 8, 16, 18, 19, 22, 23, 24, 25, 32, 33, 37, 45, 46, 49, 50, 51, 52, 53, 56, 60, 63, 72, 73, 76, 85, 88, 90, 94, 95, 96, 104, 105, 106, 112, 118, 128, 133, 146, 156, 166, 168, 180, 187, 196, 198, 200, 206, 212, 219, 220, 237, 242, 244, 253, 259, 260, 262, 273, 277, 280, 282, 283, 310, 311, 312, 318, 319, 323, 324, 325, 326, 329, 334, 335, 337, 338, 339, 343, 344, 346, 348, 349, 352, 356, 358, 359, 360, 363, 364, 365, 366, 367, 368, 370, 371, 372, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 409, 412, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 454, 462, 464, 472, 475, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 660, 661, 680, 681, 684, 685, 690, 691, 712, 717, 718, 723, 727, 732, 737, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 835, 836, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 870, 884, 891, 892, 897, 900, 915, 916, 919, 920, 921, 925, 926, 927, 928, 931, 932, 933, 934, 935, 936, 939, 941, 943, 944, 945, 946, 947, 948, 951, 953, 955, 957, 961, 963, 964, 966, 967, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "minim": [4, 12, 52, 61, 71, 72, 111, 135, 143, 158, 175, 177, 179, 181, 187, 197, 199, 209, 210, 221, 226, 236, 244, 245, 273, 280, 283, 295, 306, 314, 326, 336, 337, 340, 345, 348, 350, 360, 362, 364, 367, 369, 391, 392, 396, 400, 413, 488, 490, 497, 507, 508, 509, 510, 514, 515, 559, 560, 561, 591, 596, 599, 607, 608, 617, 621, 622, 624, 628, 629, 637, 642, 644, 645, 697, 729, 795, 797, 806, 824, 835, 841, 855, 856, 857, 858, 922, 927, 928, 931, 934, 935, 941, 943, 944, 945, 946, 951, 953, 964, 965, 968, 976, 981, 982], "squar": [4, 5, 56, 65, 72, 73, 74, 76, 86, 96, 102, 112, 114, 135, 140, 148, 151, 157, 158, 160, 168, 175, 179, 181, 183, 184, 189, 196, 197, 209, 210, 212, 224, 244, 245, 249, 277, 282, 283, 285, 295, 310, 329, 334, 337, 343, 346, 350, 360, 362, 364, 365, 367, 368, 369, 373, 374, 383, 391, 393, 394, 395, 397, 399, 400, 407, 409, 410, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 451, 481, 487, 489, 491, 493, 497, 499, 502, 504, 506, 508, 509, 510, 512, 515, 518, 520, 540, 541, 542, 545, 546, 548, 549, 550, 554, 555, 556, 559, 561, 565, 572, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 632, 633, 636, 637, 638, 640, 642, 644, 646, 649, 659, 671, 672, 673, 699, 700, 707, 708, 712, 718, 719, 734, 774, 781, 782, 790, 791, 794, 796, 798, 799, 806, 809, 828, 847, 848, 850, 852, 853, 854, 856, 858, 882, 904, 917, 922, 924, 925, 934, 935, 939, 945, 947, 953, 964, 965, 968, 972, 975, 977, 979, 980, 982, 983, 984, 985, 986, 988], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 22, 24, 25, 27, 30, 33, 34, 40, 41, 45, 50, 51, 52, 53, 56, 58, 65, 66, 68, 77, 78, 85, 86, 87, 93, 95, 97, 98, 99, 104, 105, 107, 109, 111, 115, 118, 119, 120, 121, 123, 124, 131, 132, 133, 134, 135, 140, 142, 145, 146, 150, 151, 157, 160, 163, 167, 168, 174, 179, 181, 183, 184, 186, 187, 196, 197, 205, 206, 207, 212, 219, 220, 221, 223, 224, 226, 228, 229, 232, 233, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 253, 254, 260, 273, 275, 283, 284, 301, 306, 311, 312, 315, 323, 324, 325, 326, 329, 335, 337, 340, 341, 344, 345, 346, 347, 353, 356, 357, 360, 362, 365, 367, 370, 371, 373, 374, 375, 376, 377, 380, 381, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 411, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 440, 441, 442, 445, 446, 448, 451, 452, 474, 477, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 525, 526, 527, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 637, 638, 639, 640, 641, 642, 647, 648, 650, 651, 652, 657, 658, 661, 662, 663, 666, 668, 670, 671, 672, 673, 675, 676, 677, 678, 679, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 731, 732, 733, 734, 736, 737, 738, 741, 744, 745, 746, 749, 750, 751, 752, 757, 758, 760, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 835, 836, 838, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 860, 866, 867, 868, 870, 872, 873, 876, 878, 879, 880, 892, 915, 919, 926, 928, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 952, 953, 955, 957, 958, 960, 962, 964, 965, 966, 967, 968, 969, 972, 974, 975, 976, 977, 978, 979, 983, 984, 985, 986, 987, 988], "condit": [4, 12, 23, 25, 75, 106, 111, 148, 149, 151, 168, 181, 184, 197, 238, 283, 318, 343, 348, 352, 359, 362, 364, 367, 369, 371, 401, 414, 422, 423, 428, 446, 463, 473, 474, 486, 489, 490, 491, 493, 495, 497, 499, 500, 512, 577, 582, 583, 593, 600, 601, 602, 604, 605, 606, 620, 622, 623, 624, 625, 632, 633, 637, 647, 662, 667, 668, 685, 686, 742, 783, 784, 785, 786, 787, 806, 809, 812, 821, 822, 825, 884, 925, 927, 928, 929, 931, 933, 934, 936, 941, 947, 951, 964, 968, 973, 975, 976, 977, 979, 980, 982, 984, 986, 987], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25, 30, 32, 33, 40, 42, 44, 46, 48, 49, 50, 51, 52, 53, 55, 56, 61, 65, 66, 67, 69, 71, 72, 73, 74, 80, 85, 86, 87, 88, 89, 90, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 121, 124, 125, 126, 129, 133, 135, 136, 137, 140, 141, 142, 144, 145, 146, 148, 150, 151, 152, 153, 156, 157, 158, 159, 162, 163, 167, 174, 179, 180, 181, 184, 186, 187, 193, 195, 196, 197, 199, 200, 201, 202, 204, 206, 207, 209, 210, 211, 212, 213, 219, 221, 222, 226, 227, 229, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 248, 250, 252, 253, 256, 259, 260, 261, 264, 266, 273, 278, 281, 282, 283, 285, 288, 292, 294, 295, 297, 298, 300, 301, 310, 311, 312, 314, 317, 318, 319, 323, 324, 325, 326, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 382, 384, 385, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 445, 446, 447, 448, 449, 451, 453, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 525, 526, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 560, 561, 562, 569, 572, 573, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 654, 655, 656, 659, 661, 662, 668, 670, 671, 676, 678, 679, 683, 684, 686, 691, 692, 694, 695, 697, 699, 700, 702, 705, 707, 708, 712, 713, 715, 716, 717, 718, 719, 722, 724, 725, 726, 727, 730, 731, 732, 733, 736, 737, 738, 739, 740, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 839, 840, 841, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 860, 862, 864, 865, 867, 868, 870, 871, 874, 878, 879, 880, 882, 883, 884, 886, 888, 891, 892, 894, 895, 896, 899, 901, 902, 905, 906, 912, 915, 917, 918, 919, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 950, 951, 952, 955, 958, 960, 961, 965, 966, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "median": [4, 33, 65, 69, 73, 74, 111, 146, 147, 151, 181, 185, 196, 208, 273, 281, 283, 284, 332, 364, 369, 371, 391, 404, 408, 411, 424, 502, 504, 508, 515, 547, 577, 580, 585, 620, 621, 629, 671, 702, 795, 826, 837, 856, 858, 921, 941, 947, 975, 976], "measur": [4, 7, 8, 10, 11, 18, 23, 33, 34, 45, 53, 55, 56, 86, 102, 103, 111, 114, 121, 135, 140, 148, 150, 151, 152, 156, 168, 173, 178, 179, 185, 197, 228, 233, 235, 241, 242, 248, 278, 310, 311, 323, 332, 334, 339, 343, 350, 359, 360, 361, 364, 366, 367, 368, 369, 370, 399, 402, 412, 448, 465, 488, 490, 497, 501, 507, 508, 509, 510, 513, 514, 515, 554, 557, 558, 561, 577, 608, 640, 642, 648, 649, 652, 654, 655, 657, 659, 662, 663, 666, 667, 670, 674, 675, 676, 678, 680, 685, 686, 688, 689, 692, 696, 704, 705, 706, 731, 732, 733, 735, 736, 738, 739, 742, 769, 771, 774, 794, 825, 836, 855, 856, 857, 858, 921, 927, 929, 934, 936, 937, 939, 945, 947, 961, 964, 972, 975, 977, 978, 980, 982], "test": [4, 6, 8, 10, 11, 15, 22, 23, 24, 25, 28, 29, 30, 64, 65, 77, 90, 98, 99, 102, 104, 105, 106, 109, 110, 111, 112, 113, 123, 126, 127, 129, 132, 135, 136, 148, 150, 151, 152, 153, 154, 156, 163, 168, 174, 175, 179, 180, 181, 186, 187, 194, 195, 197, 203, 207, 212, 214, 223, 228, 229, 230, 233, 234, 235, 236, 237, 239, 240, 242, 243, 245, 246, 247, 252, 261, 262, 268, 270, 275, 278, 291, 298, 306, 312, 319, 323, 324, 331, 332, 334, 340, 341, 342, 343, 348, 349, 350, 352, 353, 355, 357, 360, 363, 364, 367, 369, 370, 371, 372, 379, 381, 383, 386, 387, 388, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 438, 439, 443, 447, 448, 452, 454, 474, 481, 487, 489, 493, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 517, 518, 519, 520, 542, 544, 545, 546, 548, 549, 550, 552, 554, 555, 556, 558, 559, 560, 561, 577, 578, 580, 585, 586, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 649, 662, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 795, 798, 799, 805, 806, 808, 832, 833, 835, 836, 837, 838, 842, 843, 845, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 876, 878, 879, 926, 927, 930, 931, 934, 935, 939, 941, 945, 946, 947, 951, 952, 954, 955, 958, 961, 962, 968, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988], "discuss": [4, 49, 53, 151, 168, 199, 204, 238, 310, 319, 325, 332, 334, 337, 342, 343, 345, 348, 350, 351, 362, 364, 368, 369, 372, 448, 632, 633, 790, 791, 796, 798, 799, 921, 925, 927, 928, 931, 934, 941, 948, 952, 975], "choos": [4, 11, 12, 40, 41, 42, 46, 49, 55, 57, 61, 71, 91, 92, 107, 118, 123, 124, 133, 151, 154, 172, 213, 215, 230, 240, 247, 314, 319, 323, 324, 325, 326, 339, 342, 345, 350, 362, 364, 366, 369, 370, 372, 373, 394, 395, 397, 399, 409, 473, 482, 488, 509, 510, 532, 552, 608, 609, 622, 624, 629, 637, 638, 639, 643, 675, 705, 746, 749, 750, 760, 815, 855, 856, 857, 858, 921, 922, 926, 927, 928, 929, 930, 934, 941, 944, 945, 946, 958, 960, 964, 965, 974, 975, 979, 981, 983], "focu": [4, 9, 25, 85, 135, 227, 263, 323, 342, 360, 369, 503, 504, 509, 511, 512, 628, 928, 934, 941, 951, 952], "intuit": [4, 28, 40, 48, 57, 90, 102, 108, 128, 135, 151, 152, 180, 181, 201, 206, 236, 258, 275, 278, 295, 298, 311, 337, 350, 360, 362, 364, 366, 368, 731, 732, 733, 736, 819, 923, 927, 928, 931, 932, 938, 941, 942, 946, 955, 964, 966, 972], "than": [4, 5, 7, 11, 12, 13, 18, 25, 27, 28, 36, 40, 43, 49, 66, 69, 73, 75, 78, 83, 85, 88, 90, 93, 98, 99, 101, 102, 104, 105, 107, 108, 111, 133, 135, 141, 146, 151, 152, 153, 156, 158, 165, 168, 179, 181, 185, 195, 196, 197, 203, 206, 212, 213, 222, 232, 233, 235, 236, 237, 238, 241, 244, 252, 253, 259, 260, 271, 273, 277, 278, 282, 284, 288, 310, 311, 312, 319, 323, 324, 325, 331, 332, 333, 336, 337, 339, 342, 343, 345, 350, 351, 356, 359, 360, 361, 362, 364, 365, 366, 367, 369, 370, 371, 372, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 402, 404, 407, 410, 413, 414, 417, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 443, 444, 446, 459, 464, 465, 473, 481, 484, 485, 486, 487, 488, 490, 491, 492, 494, 497, 498, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 523, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 561, 577, 578, 580, 584, 590, 592, 593, 594, 595, 596, 597, 602, 603, 605, 608, 609, 610, 611, 612, 613, 616, 617, 618, 621, 622, 624, 626, 627, 628, 629, 632, 637, 642, 644, 646, 654, 655, 662, 670, 671, 672, 673, 684, 685, 688, 713, 728, 729, 730, 732, 734, 742, 744, 745, 746, 749, 750, 756, 760, 765, 767, 769, 770, 771, 772, 773, 776, 778, 779, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 794, 796, 797, 798, 799, 800, 802, 805, 806, 811, 821, 823, 825, 826, 828, 830, 836, 837, 841, 844, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 873, 884, 886, 887, 894, 900, 902, 905, 920, 921, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 941, 945, 946, 947, 951, 952, 957, 961, 964, 965, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "root": [4, 15, 73, 160, 318, 334, 337, 345, 362, 393, 451, 491, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 589, 700, 855, 856, 857, 858, 859, 861, 937, 947, 974, 980, 981, 982, 983, 986, 987], "metric": [4, 6, 7, 11, 18, 19, 20, 22, 23, 24, 27, 29, 32, 34, 40, 44, 45, 48, 53, 55, 59, 64, 69, 75, 98, 99, 104, 110, 112, 113, 118, 130, 136, 146, 148, 150, 151, 153, 163, 168, 174, 175, 179, 181, 183, 185, 197, 202, 207, 210, 211, 215, 218, 228, 229, 231, 232, 233, 235, 236, 238, 242, 244, 245, 252, 253, 255, 263, 266, 271, 273, 278, 280, 281, 283, 284, 285, 287, 288, 290, 291, 310, 311, 319, 323, 326, 329, 332, 337, 339, 348, 349, 350, 352, 357, 360, 367, 368, 369, 372, 373, 379, 388, 392, 395, 396, 400, 407, 419, 470, 485, 499, 500, 501, 503, 505, 507, 508, 509, 511, 512, 514, 515, 517, 519, 528, 552, 560, 570, 578, 584, 588, 589, 590, 591, 592, 593, 608, 609, 613, 616, 618, 624, 625, 626, 638, 640, 642, 644, 646, 746, 749, 750, 752, 760, 769, 770, 771, 773, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 814, 820, 842, 843, 847, 849, 852, 855, 857, 921, 923, 926, 932, 937, 939, 951, 952, 961, 962, 966, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979], "studi": [4, 55, 111, 179, 197, 238, 241, 242, 310, 332, 334, 366, 371, 646, 658, 707, 708, 773, 929, 931, 945, 957], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 22, 23, 24, 25, 27, 28, 30, 31, 35, 36, 38, 39, 40, 41, 48, 50, 51, 52, 55, 56, 57, 60, 61, 65, 66, 67, 68, 69, 74, 77, 78, 81, 82, 83, 87, 89, 90, 91, 92, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 150, 151, 152, 153, 154, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 194, 195, 197, 199, 200, 201, 204, 207, 209, 210, 211, 212, 213, 215, 216, 218, 219, 221, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 314, 315, 316, 317, 318, 319, 329, 330, 331, 332, 335, 337, 339, 342, 344, 346, 349, 350, 356, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 375, 379, 380, 381, 383, 384, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 437, 448, 450, 452, 455, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 476, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 649, 650, 651, 652, 656, 661, 675, 684, 690, 691, 705, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 737, 738, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 867, 872, 873, 893, 894, 895, 902, 905, 918, 920, 921, 922, 923, 925, 926, 927, 929, 931, 932, 933, 934, 935, 936, 938, 941, 945, 946, 947, 952, 957, 961, 962, 964, 968, 969, 972, 973, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "hist": [4, 23, 25, 49, 69, 101, 179, 181, 210, 241, 258, 273, 277, 284], "bin": [4, 22, 23, 25, 49, 69, 101, 179, 210, 241, 258, 273, 274, 275, 276, 277, 335, 345, 353, 360, 368, 369, 389, 390, 398, 411, 511, 512, 811, 813, 827, 886, 965, 980, 981, 982, 986], "30": [4, 8, 10, 14, 35, 36, 50, 55, 65, 67, 71, 91, 93, 107, 111, 117, 123, 135, 136, 139, 141, 152, 156, 158, 173, 177, 179, 197, 199, 200, 204, 211, 214, 225, 235, 240, 249, 253, 262, 263, 277, 278, 287, 288, 292, 296, 299, 301, 304, 323, 332, 334, 342, 343, 366, 370, 373, 395, 400, 407, 450, 485, 488, 489, 491, 493, 520, 542, 545, 546, 548, 598, 642, 684, 732, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 843, 856, 920, 925, 931, 932, 934, 939, 962, 972, 973, 979, 980, 981], "rent": 4, "fleet": 4, "input": [4, 6, 10, 28, 30, 67, 85, 89, 98, 107, 111, 112, 141, 142, 143, 151, 156, 158, 179, 182, 183, 187, 194, 197, 209, 210, 212, 219, 230, 257, 258, 270, 274, 275, 276, 277, 280, 283, 285, 298, 304, 307, 312, 331, 334, 337, 340, 342, 346, 347, 348, 349, 350, 359, 360, 363, 366, 367, 368, 369, 370, 371, 372, 374, 380, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 396, 398, 399, 400, 404, 407, 408, 411, 414, 415, 417, 418, 419, 422, 432, 433, 434, 439, 453, 459, 466, 467, 468, 470, 474, 478, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 561, 570, 572, 577, 578, 579, 580, 581, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 635, 636, 637, 638, 639, 640, 642, 643, 646, 647, 648, 649, 650, 651, 652, 671, 672, 673, 677, 694, 695, 697, 699, 700, 702, 703, 710, 716, 717, 720, 721, 723, 727, 728, 729, 730, 734, 744, 745, 746, 749, 750, 752, 760, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 794, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 864, 865, 866, 867, 868, 869, 873, 878, 883, 895, 904, 906, 912, 917, 918, 921, 923, 925, 927, 928, 929, 930, 931, 933, 934, 935, 936, 938, 939, 943, 944, 945, 946, 947, 951, 952, 955, 957, 961, 962, 968, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "annot": [4, 9, 24, 120, 156, 200, 239, 242, 310, 337, 338, 339, 362, 666, 861, 931, 947, 981], "log": [4, 19, 23, 24, 25, 71, 85, 111, 118, 129, 136, 137, 139, 140, 141, 144, 164, 167, 168, 172, 179, 183, 184, 189, 197, 210, 212, 225, 263, 278, 310, 332, 334, 335, 337, 341, 345, 346, 350, 359, 360, 362, 363, 364, 367, 369, 370, 372, 398, 401, 410, 415, 420, 421, 422, 423, 424, 425, 426, 482, 486, 491, 499, 500, 501, 503, 505, 507, 509, 512, 514, 540, 541, 543, 544, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 592, 595, 598, 608, 609, 619, 621, 626, 630, 690, 700, 704, 744, 745, 746, 749, 750, 760, 783, 784, 785, 786, 787, 788, 789, 793, 804, 805, 812, 813, 841, 844, 849, 852, 854, 855, 857, 882, 920, 923, 925, 927, 928, 933, 934, 936, 939, 941, 945, 947, 951, 952, 964, 974, 975, 976, 981, 982, 983, 986], "describ": [4, 51, 118, 151, 197, 211, 235, 244, 319, 323, 324, 330, 332, 334, 336, 337, 339, 342, 345, 350, 351, 359, 362, 364, 365, 366, 367, 369, 370, 412, 419, 423, 424, 441, 443, 445, 446, 447, 450, 451, 452, 453, 454, 455, 460, 466, 467, 468, 478, 557, 558, 595, 609, 664, 744, 745, 783, 785, 823, 884, 920, 923, 926, 927, 930, 931, 933, 937, 945, 946, 947, 954, 957, 963, 964, 980, 982], "weather": [4, 140, 152, 372, 927, 931], "includ": [4, 29, 73, 108, 110, 150, 151, 153, 179, 197, 236, 253, 269, 273, 283, 284, 298, 303, 310, 312, 319, 323, 324, 331, 333, 335, 337, 338, 339, 341, 342, 343, 345, 346, 350, 351, 353, 359, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 395, 400, 406, 416, 419, 420, 421, 422, 423, 424, 425, 426, 439, 440, 441, 446, 450, 451, 452, 454, 455, 460, 484, 491, 507, 514, 524, 582, 588, 596, 597, 602, 610, 611, 612, 615, 631, 638, 639, 647, 663, 678, 679, 684, 686, 687, 720, 732, 733, 736, 742, 746, 748, 749, 750, 759, 760, 763, 766, 771, 774, 796, 798, 799, 800, 821, 822, 823, 827, 844, 855, 857, 859, 861, 867, 868, 871, 873, 876, 920, 927, 930, 931, 932, 934, 935, 941, 945, 946, 947, 951, 952, 954, 955, 964, 966, 972, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "both": [4, 5, 7, 9, 10, 14, 15, 23, 24, 38, 50, 59, 65, 71, 73, 77, 78, 90, 93, 98, 102, 105, 108, 117, 118, 121, 128, 129, 133, 135, 142, 144, 150, 151, 152, 153, 158, 165, 167, 168, 179, 180, 181, 184, 185, 187, 197, 203, 212, 213, 221, 222, 223, 224, 225, 226, 235, 236, 237, 238, 242, 244, 246, 250, 253, 265, 273, 277, 278, 280, 282, 289, 290, 295, 300, 306, 310, 311, 312, 318, 319, 323, 324, 325, 330, 331, 332, 333, 335, 337, 339, 343, 344, 346, 348, 349, 350, 351, 353, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 372, 375, 388, 397, 402, 409, 412, 418, 425, 432, 433, 434, 435, 438, 439, 446, 447, 450, 452, 455, 457, 458, 459, 484, 488, 490, 497, 501, 505, 506, 507, 513, 514, 515, 516, 517, 527, 538, 539, 541, 547, 557, 558, 577, 582, 583, 593, 607, 608, 609, 622, 624, 626, 628, 637, 649, 654, 662, 666, 680, 685, 706, 710, 716, 723, 727, 732, 737, 738, 742, 749, 750, 752, 777, 805, 806, 820, 824, 835, 840, 845, 847, 848, 855, 857, 871, 885, 894, 906, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 941, 944, 945, 946, 947, 951, 952, 954, 955, 961, 964, 965, 966, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "numer": [4, 18, 61, 65, 69, 106, 108, 118, 140, 143, 152, 153, 168, 179, 197, 217, 219, 263, 283, 312, 331, 332, 334, 340, 342, 343, 348, 349, 350, 362, 364, 369, 370, 371, 372, 374, 375, 391, 394, 397, 409, 421, 422, 425, 428, 439, 440, 441, 446, 450, 451, 452, 454, 455, 460, 481, 483, 485, 490, 497, 517, 531, 540, 561, 567, 570, 577, 580, 582, 583, 596, 602, 604, 622, 637, 640, 644, 664, 737, 741, 746, 749, 750, 752, 760, 770, 771, 772, 775, 783, 784, 785, 786, 787, 805, 806, 811, 816, 821, 822, 859, 860, 861, 867, 868, 883, 884, 920, 921, 927, 928, 932, 939, 941, 942, 947, 954, 955, 957, 966, 972, 973, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "categor": [4, 65, 97, 104, 118, 148, 151, 152, 153, 179, 197, 217, 219, 283, 285, 325, 329, 331, 332, 339, 342, 350, 363, 370, 416, 417, 439, 440, 446, 455, 511, 512, 531, 532, 557, 558, 582, 583, 598, 608, 609, 619, 630, 659, 771, 783, 784, 785, 786, 787, 809, 811, 815, 816, 819, 821, 822, 842, 843, 921, 927, 938, 939, 947, 951, 952, 953, 954, 955, 966, 968, 972, 973, 976, 977, 980, 982, 984, 987], "inform": [4, 5, 8, 11, 12, 13, 23, 25, 30, 33, 34, 45, 49, 53, 61, 62, 64, 65, 78, 80, 81, 82, 92, 105, 106, 127, 129, 130, 132, 135, 140, 148, 151, 152, 154, 156, 157, 158, 159, 180, 194, 196, 197, 216, 223, 224, 226, 230, 232, 235, 236, 237, 240, 242, 244, 259, 260, 263, 283, 301, 306, 310, 311, 312, 315, 318, 319, 323, 326, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 342, 343, 345, 348, 349, 350, 351, 356, 359, 366, 367, 369, 370, 371, 372, 402, 412, 442, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 460, 465, 474, 478, 484, 485, 488, 489, 491, 493, 507, 511, 512, 514, 537, 539, 540, 542, 543, 544, 545, 546, 549, 550, 556, 557, 558, 559, 589, 590, 606, 608, 637, 641, 645, 647, 651, 654, 655, 665, 675, 679, 692, 704, 705, 706, 735, 737, 742, 744, 745, 746, 747, 748, 749, 750, 751, 753, 755, 760, 764, 771, 783, 787, 788, 789, 793, 797, 809, 820, 825, 828, 832, 833, 835, 836, 837, 838, 843, 846, 849, 852, 855, 857, 859, 861, 921, 923, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 942, 945, 947, 952, 955, 963, 964, 965, 966, 972, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "alreadi": [4, 6, 10, 15, 53, 90, 118, 133, 151, 207, 213, 218, 236, 242, 253, 283, 337, 338, 342, 348, 350, 360, 364, 366, 368, 369, 374, 388, 449, 473, 483, 517, 518, 584, 596, 599, 614, 615, 616, 617, 618, 624, 626, 627, 628, 635, 636, 649, 717, 783, 803, 811, 817, 818, 820, 825, 830, 832, 833, 834, 836, 837, 838, 844, 847, 848, 870, 920, 937, 941, 942, 952, 957, 962, 966, 969, 973, 977, 980, 984, 985, 986, 987], "expand": [4, 15, 45, 60, 208, 281, 319, 329, 369, 395, 400, 449, 507, 508, 509, 510, 514, 515, 516, 855, 856, 857, 858, 931, 973, 980, 981], "complementari": [4, 370], "column": [4, 19, 20, 55, 63, 66, 69, 81, 105, 107, 108, 111, 115, 118, 140, 146, 148, 150, 151, 152, 153, 168, 179, 180, 187, 197, 214, 216, 226, 235, 236, 246, 247, 270, 278, 282, 283, 284, 285, 310, 311, 312, 323, 331, 332, 334, 337, 339, 343, 346, 348, 349, 350, 359, 362, 363, 365, 367, 369, 370, 371, 374, 377, 401, 403, 414, 416, 417, 421, 422, 428, 437, 438, 439, 440, 441, 442, 444, 446, 450, 451, 452, 454, 455, 458, 459, 460, 461, 463, 465, 476, 481, 484, 487, 492, 494, 498, 505, 507, 508, 514, 515, 516, 517, 531, 532, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 560, 577, 580, 582, 583, 584, 596, 598, 602, 608, 610, 612, 614, 615, 619, 630, 635, 636, 647, 663, 668, 669, 678, 679, 687, 703, 712, 717, 718, 719, 722, 732, 733, 736, 737, 746, 749, 750, 760, 769, 774, 779, 782, 783, 784, 785, 786, 787, 788, 789, 808, 812, 813, 814, 815, 821, 822, 823, 827, 828, 829, 831, 847, 849, 852, 855, 857, 863, 867, 868, 873, 884, 894, 907, 908, 910, 918, 920, 921, 927, 929, 931, 932, 939, 941, 946, 952, 972, 974, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "x": [4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 22, 23, 24, 25, 27, 28, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 199, 200, 201, 204, 206, 207, 209, 210, 211, 212, 213, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 323, 330, 331, 332, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 356, 360, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 380, 381, 382, 383, 384, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 437, 443, 444, 445, 448, 450, 451, 452, 455, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 656, 660, 661, 674, 684, 691, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 737, 739, 740, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 871, 883, 884, 886, 891, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 920, 921, 922, 923, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 941, 943, 944, 945, 946, 947, 952, 957, 961, 962, 964, 965, 966, 969, 972, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988], "drop": [4, 5, 65, 69, 78, 140, 150, 151, 152, 154, 179, 197, 219, 245, 282, 285, 311, 341, 345, 363, 367, 369, 414, 417, 517, 518, 519, 520, 645, 652, 738, 807, 821, 827, 921, 927, 931, 939, 941, 951, 972, 973, 977, 980, 981, 982, 983, 984, 985, 986, 987], "axi": [4, 5, 7, 11, 12, 13, 14, 16, 18, 23, 24, 31, 33, 35, 36, 43, 44, 46, 48, 49, 50, 56, 65, 66, 69, 75, 78, 82, 83, 85, 86, 87, 88, 89, 95, 99, 101, 102, 105, 107, 114, 117, 121, 126, 129, 139, 140, 144, 146, 150, 151, 160, 164, 166, 168, 171, 172, 173, 179, 183, 184, 188, 191, 193, 194, 196, 197, 200, 201, 204, 206, 210, 211, 214, 215, 221, 223, 225, 226, 231, 232, 236, 237, 242, 244, 245, 250, 252, 253, 258, 259, 260, 263, 264, 265, 271, 273, 277, 288, 290, 292, 294, 297, 298, 301, 302, 303, 304, 305, 306, 308, 310, 311, 315, 316, 317, 318, 339, 346, 350, 360, 362, 370, 374, 389, 396, 414, 417, 481, 483, 486, 487, 489, 491, 493, 500, 535, 562, 581, 582, 635, 636, 651, 712, 728, 729, 730, 731, 752, 776, 817, 818, 825, 826, 828, 830, 832, 833, 834, 836, 837, 838, 861, 863, 867, 868, 886, 906, 912, 921, 931, 938, 941, 946, 963, 965, 980, 982, 984], "onli": [4, 7, 11, 13, 14, 22, 23, 24, 25, 27, 30, 33, 35, 36, 41, 45, 49, 53, 61, 64, 65, 66, 68, 69, 74, 81, 88, 89, 96, 99, 101, 105, 106, 107, 108, 110, 117, 118, 128, 129, 130, 133, 135, 137, 140, 142, 144, 147, 148, 150, 151, 152, 156, 157, 162, 168, 175, 179, 180, 182, 185, 187, 188, 197, 199, 200, 206, 208, 210, 212, 216, 219, 221, 222, 223, 226, 227, 231, 233, 235, 237, 238, 241, 242, 243, 244, 246, 247, 253, 256, 259, 261, 264, 266, 270, 273, 274, 278, 282, 283, 287, 288, 290, 294, 295, 298, 303, 306, 307, 310, 311, 312, 314, 315, 318, 319, 323, 324, 325, 330, 331, 332, 334, 335, 337, 339, 341, 342, 343, 344, 345, 346, 348, 350, 351, 353, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 439, 440, 441, 442, 444, 446, 447, 450, 451, 452, 453, 454, 455, 458, 459, 460, 462, 466, 469, 473, 474, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 649, 657, 659, 663, 675, 678, 679, 683, 685, 686, 687, 690, 691, 692, 705, 707, 709, 723, 727, 728, 729, 730, 732, 733, 736, 737, 739, 740, 741, 744, 745, 746, 748, 749, 750, 752, 760, 764, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 865, 867, 868, 871, 873, 876, 884, 886, 889, 891, 897, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 941, 942, 943, 945, 946, 947, 951, 952, 955, 964, 965, 966, 969, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 984, 986, 987, 988], "present": [4, 5, 39, 45, 83, 85, 93, 104, 111, 114, 132, 141, 144, 158, 161, 168, 179, 206, 209, 226, 233, 238, 241, 244, 245, 253, 273, 276, 278, 311, 334, 335, 339, 342, 348, 350, 362, 364, 367, 369, 370, 380, 381, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 439, 440, 441, 442, 446, 450, 451, 452, 453, 454, 455, 460, 481, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 499, 500, 513, 516, 519, 520, 531, 532, 533, 538, 539, 541, 567, 577, 578, 579, 580, 600, 604, 627, 638, 639, 640, 641, 662, 678, 679, 687, 691, 718, 732, 733, 736, 744, 745, 746, 749, 750, 758, 760, 772, 790, 791, 792, 794, 796, 798, 799, 800, 807, 812, 820, 821, 822, 823, 824, 826, 839, 840, 851, 859, 861, 862, 884, 915, 930, 931, 932, 933, 938, 941, 950, 952, 975, 980, 982, 983, 984, 986, 987], "date": [4, 64, 140, 152, 332, 334, 337, 341, 351, 363, 952], "datetim": [4, 16, 140, 152], "http": [4, 6, 7, 8, 12, 16, 22, 65, 112, 118, 147, 156, 179, 187, 195, 197, 204, 207, 215, 252, 253, 270, 331, 332, 334, 335, 337, 341, 342, 343, 345, 348, 350, 353, 362, 366, 371, 393, 399, 402, 412, 437, 442, 446, 450, 452, 458, 459, 460, 480, 481, 484, 486, 487, 491, 545, 586, 591, 594, 599, 608, 614, 616, 617, 618, 621, 626, 629, 632, 633, 635, 636, 641, 642, 645, 655, 671, 672, 673, 707, 708, 718, 783, 785, 786, 787, 790, 791, 796, 797, 798, 799, 804, 826, 840, 841, 842, 855, 856, 927, 929, 931, 934, 944, 947, 954, 955, 962, 977, 982], "pydata": [4, 950, 955], "org": [4, 12, 13, 14, 16, 22, 29, 33, 42, 44, 56, 61, 65, 156, 170, 171, 179, 187, 195, 197, 200, 207, 211, 236, 238, 252, 270, 287, 288, 289, 292, 310, 311, 312, 324, 330, 335, 337, 340, 343, 345, 351, 353, 366, 545, 586, 618, 621, 626, 645, 655, 718, 790, 791, 796, 797, 798, 799, 826, 841, 855, 856, 927, 931, 947, 949, 968, 980, 984], "stabl": [4, 151, 173, 177, 181, 253, 281, 311, 335, 337, 341, 343, 346, 350, 353, 366, 370, 374, 421, 422, 428, 483, 605, 622, 624, 637, 642, 673, 701, 883, 884, 927, 933, 934, 941, 952, 972, 973, 978, 983, 985], "user_guid": 4, "timeseri": 4, "html": [4, 8, 65, 156, 217, 332, 334, 337, 338, 341, 345, 363, 366, 370, 437, 458, 459, 608, 783, 787, 880, 929, 951, 952, 983, 984, 985, 986, 987], "compon": [4, 5, 16, 40, 53, 57, 64, 67, 76, 77, 84, 86, 87, 89, 90, 92, 93, 94, 96, 116, 140, 148, 150, 199, 210, 211, 213, 221, 222, 225, 226, 227, 234, 236, 254, 271, 278, 282, 323, 329, 332, 337, 339, 343, 346, 348, 361, 362, 363, 365, 370, 372, 374, 376, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 412, 413, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 452, 454, 465, 471, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 523, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 645, 678, 679, 687, 732, 733, 736, 744, 745, 746, 749, 750, 760, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 883, 884, 923, 928, 941, 943, 946, 951, 952, 953, 955, 960, 966, 967, 968, 972, 974, 978, 979, 980, 981, 983, 984, 985, 986, 987], "now": [4, 5, 7, 16, 49, 52, 65, 78, 90, 98, 100, 104, 105, 107, 108, 111, 112, 118, 121, 133, 135, 140, 141, 142, 147, 150, 151, 152, 153, 156, 158, 160, 165, 167, 168, 180, 181, 203, 211, 231, 235, 238, 246, 247, 278, 281, 282, 284, 285, 289, 298, 306, 310, 311, 312, 319, 323, 325, 332, 337, 338, 339, 343, 348, 349, 350, 359, 366, 367, 369, 370, 374, 443, 458, 459, 462, 486, 499, 529, 530, 532, 577, 580, 599, 603, 608, 613, 634, 675, 705, 744, 745, 749, 750, 780, 795, 906, 920, 921, 927, 931, 937, 940, 941, 946, 947, 950, 952, 957, 964, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988], "introspect": [4, 6, 65, 343, 509, 510, 538, 539, 541, 941, 962], "value_count": [4, 152], "heavy_rain": [4, 152], "cannot": [4, 36, 51, 69, 75, 85, 90, 106, 151, 152, 179, 197, 273, 298, 325, 336, 338, 343, 350, 351, 362, 363, 364, 366, 367, 369, 370, 372, 415, 471, 488, 489, 490, 493, 497, 560, 563, 564, 565, 567, 569, 570, 572, 573, 575, 601, 605, 632, 642, 661, 667, 727, 749, 750, 795, 796, 798, 799, 800, 808, 809, 818, 819, 829, 865, 867, 868, 920, 921, 925, 927, 928, 932, 937, 941, 946, 947, 952, 955, 961, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "train": [4, 5, 6, 7, 8, 10, 11, 15, 22, 24, 25, 27, 28, 29, 30, 51, 53, 59, 64, 65, 69, 77, 78, 81, 85, 88, 90, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 118, 119, 120, 123, 130, 135, 136, 137, 140, 141, 142, 143, 144, 148, 150, 151, 152, 153, 154, 156, 162, 163, 165, 167, 168, 170, 171, 172, 174, 175, 179, 180, 181, 183, 186, 187, 188, 191, 193, 194, 197, 206, 209, 211, 214, 215, 223, 225, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 256, 259, 260, 261, 262, 264, 266, 268, 269, 270, 273, 275, 277, 278, 280, 283, 286, 287, 288, 291, 292, 294, 297, 305, 306, 312, 313, 316, 317, 319, 323, 324, 325, 329, 334, 339, 342, 348, 349, 350, 356, 358, 360, 362, 363, 364, 365, 367, 369, 370, 371, 372, 374, 388, 391, 392, 394, 395, 397, 399, 401, 402, 403, 404, 409, 415, 419, 420, 422, 423, 424, 425, 426, 432, 433, 434, 435, 437, 438, 439, 443, 447, 448, 450, 454, 474, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 577, 578, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 637, 638, 639, 641, 642, 646, 653, 690, 737, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 808, 813, 814, 817, 818, 821, 822, 826, 827, 828, 832, 833, 835, 836, 837, 838, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 905, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 941, 945, 946, 947, 951, 952, 953, 955, 958, 961, 962, 968, 969, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "learn": [4, 6, 7, 8, 9, 10, 15, 16, 23, 24, 25, 28, 29, 31, 32, 33, 45, 51, 62, 64, 69, 74, 75, 84, 90, 95, 98, 102, 103, 104, 106, 107, 113, 115, 116, 117, 118, 123, 124, 125, 126, 130, 133, 135, 138, 140, 146, 147, 149, 153, 155, 165, 167, 168, 193, 197, 203, 205, 206, 211, 213, 218, 219, 228, 232, 234, 235, 238, 240, 241, 243, 249, 253, 257, 258, 259, 260, 261, 266, 267, 270, 271, 273, 274, 278, 279, 286, 290, 292, 297, 304, 306, 310, 311, 312, 314, 315, 316, 317, 319, 324, 326, 329, 330, 331, 332, 334, 336, 340, 343, 344, 345, 346, 349, 350, 352, 356, 357, 358, 359, 360, 362, 363, 364, 366, 368, 370, 371, 372, 376, 377, 379, 380, 381, 383, 384, 388, 389, 390, 393, 394, 397, 399, 400, 407, 409, 414, 415, 417, 418, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 458, 459, 460, 462, 464, 465, 466, 467, 468, 470, 472, 474, 475, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 521, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 549, 552, 553, 560, 561, 564, 569, 572, 576, 578, 580, 584, 588, 590, 591, 593, 594, 595, 596, 598, 602, 607, 608, 618, 619, 626, 627, 628, 630, 638, 639, 640, 641, 642, 646, 650, 651, 658, 663, 667, 668, 671, 672, 673, 675, 684, 690, 692, 697, 705, 727, 728, 729, 734, 737, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 782, 783, 784, 785, 786, 787, 790, 792, 797, 804, 805, 806, 807, 809, 811, 813, 815, 818, 820, 821, 822, 823, 826, 827, 828, 831, 839, 840, 842, 843, 844, 845, 847, 848, 849, 852, 855, 856, 857, 858, 870, 878, 879, 897, 898, 920, 921, 923, 924, 925, 927, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 941, 942, 945, 946, 947, 948, 950, 954, 959, 961, 962, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "simplifi": [4, 65, 167, 298, 336, 338, 342, 365, 465, 512, 807, 808, 931, 933, 941], "represent": [4, 16, 19, 49, 65, 85, 88, 116, 151, 152, 156, 199, 200, 201, 217, 263, 271, 311, 312, 319, 329, 331, 339, 350, 356, 362, 363, 367, 368, 369, 413, 481, 485, 487, 490, 492, 498, 516, 538, 540, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 580, 593, 596, 602, 608, 609, 610, 612, 616, 618, 626, 627, 628, 718, 744, 745, 752, 804, 817, 821, 822, 826, 828, 840, 847, 859, 861, 864, 880, 897, 923, 928, 930, 932, 934, 935, 936, 938, 941, 946, 952, 957, 958, 960, 964, 966, 972, 973, 976, 983, 984, 985, 986, 987, 988], "collaps": [4, 152, 273, 298, 348], "those": [4, 7, 12, 16, 18, 55, 65, 100, 111, 133, 150, 152, 153, 154, 179, 181, 197, 204, 210, 214, 215, 227, 229, 235, 238, 241, 269, 273, 278, 295, 298, 310, 311, 312, 323, 324, 331, 337, 339, 341, 342, 343, 344, 348, 350, 353, 359, 360, 362, 366, 367, 369, 370, 372, 398, 400, 411, 414, 418, 444, 445, 446, 453, 507, 508, 514, 515, 519, 520, 531, 642, 647, 662, 668, 685, 746, 749, 750, 758, 760, 767, 790, 791, 792, 794, 796, 797, 798, 799, 800, 849, 852, 855, 856, 857, 858, 920, 923, 927, 930, 931, 933, 934, 935, 938, 941, 947, 950, 951, 955, 957, 966, 972, 975, 978, 979, 980, 985, 986, 987], "rain": [4, 152, 927], "replac": [4, 23, 73, 89, 135, 142, 146, 152, 165, 180, 215, 238, 253, 275, 282, 300, 335, 337, 339, 341, 343, 346, 350, 356, 363, 366, 369, 370, 392, 396, 453, 465, 505, 506, 513, 532, 538, 539, 540, 541, 557, 558, 577, 580, 584, 589, 591, 677, 734, 758, 760, 807, 808, 811, 830, 843, 850, 900, 902, 905, 920, 921, 927, 931, 941, 946, 947, 951, 952, 972, 973, 974, 976, 977, 978, 979, 980, 982, 983, 984, 985, 987], "to_replac": [4, 152], "valu": [4, 5, 7, 9, 11, 12, 13, 15, 16, 18, 20, 24, 25, 29, 33, 36, 38, 40, 42, 49, 55, 56, 57, 61, 65, 67, 69, 71, 73, 75, 85, 88, 96, 101, 103, 104, 105, 106, 108, 111, 112, 114, 115, 117, 118, 128, 129, 132, 133, 135, 138, 141, 143, 150, 151, 152, 153, 154, 156, 158, 159, 161, 165, 167, 168, 169, 170, 172, 177, 179, 180, 181, 183, 185, 194, 197, 198, 202, 206, 207, 208, 209, 210, 211, 212, 215, 218, 219, 221, 227, 229, 231, 233, 235, 236, 238, 240, 241, 242, 244, 246, 247, 248, 250, 253, 266, 268, 269, 271, 273, 274, 275, 276, 277, 278, 282, 290, 298, 303, 306, 310, 311, 312, 314, 318, 319, 323, 324, 325, 326, 329, 330, 331, 332, 334, 338, 339, 340, 342, 343, 344, 346, 348, 349, 350, 352, 353, 359, 360, 361, 362, 363, 364, 365, 366, 370, 371, 372, 373, 374, 375, 376, 383, 384, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 437, 440, 441, 443, 446, 447, 448, 451, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 718, 720, 723, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 757, 758, 760, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 864, 865, 866, 867, 868, 871, 872, 873, 874, 876, 884, 886, 891, 893, 894, 895, 899, 907, 908, 909, 920, 923, 924, 925, 926, 927, 928, 930, 932, 933, 934, 935, 936, 937, 938, 942, 944, 945, 946, 947, 955, 957, 962, 964, 965, 966, 967, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "inplac": [4, 152, 197, 247, 404, 432, 433, 434, 435, 803, 811, 814, 817, 818, 820, 824, 825, 826, 828, 830, 832, 833, 834, 835, 836, 837, 838, 904, 907, 908, 909, 913, 914, 981], "expect": [4, 5, 10, 22, 33, 40, 49, 78, 83, 90, 102, 104, 105, 108, 111, 130, 135, 141, 148, 149, 153, 165, 170, 179, 180, 181, 187, 197, 210, 216, 222, 223, 226, 227, 242, 253, 278, 310, 311, 319, 323, 324, 337, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 358, 360, 362, 363, 364, 366, 369, 370, 371, 383, 414, 415, 417, 418, 419, 432, 433, 434, 446, 473, 482, 486, 488, 491, 502, 504, 505, 506, 508, 510, 512, 513, 515, 517, 518, 520, 522, 535, 536, 538, 539, 541, 545, 547, 556, 561, 577, 582, 583, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 622, 623, 624, 625, 628, 629, 645, 654, 655, 666, 684, 737, 741, 781, 782, 783, 784, 785, 786, 787, 791, 794, 799, 806, 809, 814, 821, 822, 825, 828, 837, 838, 845, 847, 848, 849, 850, 851, 852, 853, 856, 858, 894, 920, 927, 931, 933, 937, 941, 945, 946, 947, 954, 962, 965, 966, 968, 972, 973, 974, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988], "balanc": [4, 6, 49, 61, 148, 184, 228, 238, 273, 325, 348, 350, 366, 367, 369, 452, 465, 484, 490, 491, 497, 507, 511, 514, 590, 608, 609, 616, 618, 624, 625, 626, 653, 658, 678, 692, 731, 736, 746, 747, 764, 808, 847, 849, 852, 855, 857, 872, 873, 920, 946, 947, 962, 972, 974, 977, 978, 981, 982, 986], "order": [4, 13, 22, 43, 59, 60, 66, 71, 80, 95, 106, 107, 108, 112, 126, 140, 150, 151, 154, 156, 168, 172, 175, 179, 180, 185, 193, 197, 201, 210, 223, 230, 233, 235, 242, 252, 271, 273, 278, 282, 283, 306, 310, 312, 319, 323, 324, 332, 337, 339, 342, 343, 346, 350, 353, 356, 362, 363, 364, 366, 367, 368, 369, 370, 372, 374, 391, 394, 397, 399, 400, 405, 406, 407, 409, 414, 438, 439, 440, 445, 447, 465, 484, 485, 489, 490, 491, 493, 497, 501, 503, 505, 506, 507, 509, 513, 514, 517, 531, 538, 541, 543, 544, 547, 556, 557, 558, 560, 572, 577, 581, 590, 608, 609, 615, 626, 635, 636, 638, 639, 643, 647, 649, 652, 654, 662, 663, 668, 675, 678, 679, 687, 689, 690, 703, 705, 727, 732, 733, 736, 737, 738, 741, 746, 747, 749, 750, 751, 753, 757, 760, 764, 765, 769, 776, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 798, 805, 808, 819, 821, 822, 823, 827, 828, 831, 832, 833, 835, 836, 837, 838, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 867, 868, 873, 884, 895, 900, 921, 927, 928, 931, 932, 934, 935, 941, 944, 945, 946, 947, 952, 961, 963, 964, 966, 972, 974, 975, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "sensit": [4, 40, 73, 74, 102, 111, 152, 181, 182, 206, 273, 298, 324, 325, 351, 364, 369, 402, 412, 642, 662, 663, 737, 926, 927, 928, 930, 931, 935, 937, 945, 946, 957, 965, 976], "splitter": [4, 350, 366, 388, 422, 517, 518, 544, 552, 597, 601, 603, 605, 611, 613, 615, 623, 625, 746, 748, 749, 750, 751, 752, 760, 761, 762, 763, 765, 766, 768, 769, 770, 771, 772, 773, 775, 779, 782, 855, 856, 857, 858, 952, 978, 979, 980, 981], "evalu": [4, 5, 6, 10, 11, 22, 29, 32, 45, 65, 66, 88, 98, 105, 106, 108, 109, 111, 129, 138, 148, 154, 156, 159, 168, 181, 186, 197, 205, 228, 229, 232, 233, 235, 238, 240, 241, 242, 244, 246, 247, 249, 252, 262, 266, 278, 282, 298, 310, 319, 326, 330, 332, 339, 343, 350, 352, 361, 363, 370, 371, 372, 397, 399, 438, 441, 442, 443, 446, 459, 470, 486, 501, 511, 512, 513, 517, 518, 541, 544, 552, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 581, 582, 583, 584, 597, 603, 609, 623, 625, 647, 649, 651, 652, 653, 654, 655, 661, 663, 664, 665, 667, 668, 675, 676, 685, 686, 691, 703, 704, 705, 706, 735, 742, 744, 745, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 779, 785, 788, 789, 794, 806, 808, 815, 832, 833, 835, 836, 837, 838, 849, 852, 855, 870, 878, 905, 923, 927, 929, 933, 934, 937, 938, 939, 942, 945, 947, 951, 955, 957, 958, 961, 962, 964, 967, 968, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 985], "forecast": [4, 235, 360, 931, 951], "realist": [4, 8, 237, 244, 245, 295, 931], "gap": [4, 332, 366, 421, 422, 428, 538, 596, 597, 602, 603, 610, 611, 612, 613, 631, 634, 767, 855, 856, 857, 858, 927, 928, 980, 984, 986], "between": [4, 5, 8, 9, 11, 12, 33, 34, 35, 36, 38, 39, 49, 55, 56, 61, 77, 88, 90, 94, 98, 102, 108, 111, 128, 135, 140, 141, 143, 148, 150, 151, 152, 153, 158, 165, 170, 174, 175, 179, 180, 181, 183, 184, 187, 197, 199, 206, 211, 215, 228, 231, 234, 235, 236, 237, 238, 240, 241, 242, 244, 255, 259, 260, 262, 263, 273, 278, 283, 290, 298, 306, 310, 311, 312, 318, 319, 323, 324, 332, 337, 339, 346, 348, 349, 350, 356, 359, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 382, 391, 392, 395, 396, 400, 402, 403, 404, 406, 407, 408, 413, 419, 420, 421, 422, 423, 424, 425, 426, 441, 443, 444, 445, 446, 447, 448, 452, 464, 465, 471, 474, 477, 484, 486, 487, 488, 489, 490, 491, 496, 497, 499, 503, 504, 509, 510, 512, 513, 534, 538, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 570, 577, 582, 583, 584, 589, 592, 595, 596, 597, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 620, 626, 628, 629, 631, 634, 638, 640, 642, 644, 645, 646, 649, 651, 653, 654, 655, 657, 659, 660, 664, 665, 666, 667, 669, 673, 674, 675, 678, 679, 680, 683, 685, 686, 692, 701, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 739, 740, 742, 743, 744, 745, 746, 748, 749, 755, 763, 764, 766, 773, 774, 776, 778, 790, 791, 792, 794, 795, 796, 798, 799, 800, 801, 802, 805, 806, 812, 815, 816, 818, 819, 821, 822, 825, 826, 827, 833, 836, 837, 841, 852, 855, 856, 857, 858, 860, 881, 900, 920, 923, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 945, 946, 947, 948, 952, 964, 965, 972, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "side": [4, 15, 25, 54, 111, 172, 197, 201, 209, 273, 310, 319, 332, 348, 360, 363, 366, 367, 370, 465, 927, 928, 931, 933, 946, 981], "split": [4, 5, 6, 11, 14, 16, 22, 24, 28, 29, 64, 90, 98, 104, 105, 107, 110, 111, 112, 113, 114, 123, 129, 150, 151, 163, 174, 175, 179, 182, 187, 197, 207, 222, 223, 229, 230, 233, 235, 240, 242, 245, 262, 268, 270, 274, 275, 284, 290, 298, 310, 312, 318, 332, 344, 349, 350, 353, 360, 362, 367, 369, 370, 388, 393, 394, 422, 423, 429, 430, 447, 481, 487, 489, 492, 496, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 538, 539, 541, 544, 552, 597, 601, 603, 605, 611, 613, 615, 623, 625, 645, 654, 655, 667, 680, 686, 706, 742, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 779, 782, 788, 789, 805, 806, 832, 833, 835, 836, 837, 838, 855, 856, 857, 858, 902, 920, 927, 928, 934, 937, 938, 939, 945, 947, 952, 957, 961, 962, 964, 965, 966, 968, 972, 975, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988], "limit": [4, 8, 16, 33, 38, 52, 61, 75, 105, 106, 112, 118, 146, 151, 152, 153, 158, 179, 180, 196, 210, 242, 275, 283, 312, 319, 324, 338, 339, 342, 348, 350, 351, 362, 365, 367, 371, 413, 418, 509, 510, 511, 512, 582, 600, 608, 609, 629, 632, 633, 638, 727, 767, 796, 798, 799, 800, 821, 845, 849, 850, 851, 852, 853, 899, 920, 927, 928, 930, 931, 938, 939, 941, 952, 957, 968, 980, 982, 985, 986], "cv": [4, 12, 22, 23, 24, 50, 65, 66, 67, 71, 93, 108, 110, 123, 124, 132, 146, 147, 151, 168, 178, 181, 231, 233, 234, 235, 236, 237, 238, 240, 241, 245, 249, 285, 298, 306, 349, 350, 360, 366, 369, 388, 422, 517, 518, 544, 552, 597, 601, 603, 605, 609, 611, 613, 615, 623, 625, 746, 748, 749, 750, 751, 752, 760, 761, 762, 763, 765, 766, 768, 769, 770, 771, 772, 773, 775, 779, 782, 855, 856, 920, 923, 926, 927, 931, 952, 961, 962, 966, 974, 978, 979, 980, 981, 982, 984, 986, 988], "fold": [4, 62, 71, 107, 110, 123, 132, 151, 168, 223, 230, 231, 233, 235, 236, 238, 245, 290, 306, 319, 332, 340, 341, 349, 350, 362, 371, 388, 422, 443, 486, 517, 518, 544, 552, 597, 601, 603, 605, 609, 611, 613, 615, 623, 625, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 779, 782, 849, 852, 920, 927, 931, 946, 961, 972, 974, 976, 977, 978, 980, 981, 983, 984], "1000": [4, 8, 14, 24, 28, 33, 66, 69, 77, 95, 102, 104, 105, 110, 111, 115, 120, 125, 128, 156, 165, 171, 182, 201, 209, 212, 221, 225, 233, 235, 241, 244, 246, 258, 260, 274, 277, 281, 282, 284, 299, 300, 307, 310, 311, 342, 343, 349, 360, 370, 388, 423, 429, 430, 481, 482, 487, 492, 493, 495, 496, 498, 503, 514, 582, 596, 597, 601, 602, 603, 605, 610, 611, 612, 613, 616, 617, 618, 622, 626, 627, 628, 637, 642, 648, 651, 713, 825, 836, 842, 847, 848, 920, 924, 946, 961, 964, 979, 981], "datapoint": [4, 38, 48, 51, 139, 142, 162, 211, 212, 230, 235, 252, 304, 372, 452, 507, 508, 509, 510, 514, 515, 516, 561, 855, 856, 857, 858, 924], "should": [4, 5, 6, 8, 9, 14, 16, 23, 25, 28, 33, 49, 102, 108, 111, 133, 146, 151, 156, 158, 159, 179, 181, 197, 206, 211, 212, 235, 238, 241, 242, 244, 253, 274, 275, 289, 298, 306, 311, 319, 323, 324, 325, 332, 335, 336, 337, 339, 341, 342, 344, 345, 346, 349, 350, 353, 356, 360, 362, 364, 366, 367, 369, 370, 371, 372, 373, 374, 376, 391, 393, 394, 395, 396, 397, 399, 400, 402, 404, 407, 408, 409, 412, 413, 414, 417, 424, 432, 433, 434, 435, 437, 446, 453, 458, 459, 466, 471, 473, 474, 477, 482, 483, 486, 499, 507, 508, 511, 512, 513, 514, 515, 517, 531, 532, 535, 536, 538, 539, 541, 543, 544, 547, 552, 557, 558, 570, 577, 578, 579, 581, 582, 583, 585, 588, 589, 590, 593, 595, 596, 597, 598, 599, 602, 603, 604, 606, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 621, 622, 623, 625, 626, 627, 628, 629, 630, 634, 637, 639, 640, 641, 642, 643, 644, 645, 646, 651, 659, 676, 677, 720, 723, 727, 728, 729, 730, 731, 734, 737, 738, 748, 754, 756, 763, 764, 765, 766, 770, 774, 776, 777, 788, 789, 790, 791, 792, 793, 794, 796, 798, 805, 806, 811, 812, 815, 816, 817, 819, 820, 821, 822, 830, 834, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 867, 871, 873, 876, 884, 891, 897, 900, 902, 905, 906, 907, 908, 909, 910, 911, 912, 920, 921, 925, 926, 927, 928, 931, 932, 934, 936, 937, 938, 941, 944, 945, 946, 947, 952, 954, 955, 962, 966, 969, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "enough": [4, 33, 40, 57, 107, 135, 146, 152, 153, 168, 179, 211, 213, 277, 312, 319, 335, 337, 341, 351, 360, 361, 362, 364, 366, 369, 517, 518, 539, 746, 749, 750, 752, 760, 772, 884, 920, 925, 928, 930, 937, 941, 946, 951, 955, 978], "quantifi": [4, 33, 45, 71, 140, 197, 242, 339, 350, 357, 361, 523, 811, 926, 939, 941, 968], "repres": [4, 8, 10, 12, 14, 24, 29, 40, 44, 45, 46, 49, 82, 85, 87, 94, 95, 105, 106, 114, 151, 158, 166, 171, 181, 183, 184, 188, 201, 203, 211, 215, 224, 229, 232, 235, 238, 242, 258, 275, 310, 312, 318, 325, 329, 332, 334, 339, 348, 349, 350, 351, 356, 360, 362, 366, 367, 368, 369, 370, 371, 389, 393, 402, 413, 420, 421, 422, 423, 424, 425, 426, 438, 440, 441, 442, 444, 446, 448, 450, 451, 452, 454, 455, 460, 484, 486, 488, 490, 491, 497, 505, 513, 531, 538, 541, 579, 582, 584, 590, 626, 628, 647, 651, 692, 738, 746, 748, 759, 760, 763, 766, 771, 773, 774, 777, 778, 784, 790, 791, 792, 794, 795, 796, 798, 799, 800, 805, 806, 815, 821, 844, 867, 868, 888, 921, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 939, 941, 942, 944, 945, 947, 957, 962, 963, 965, 978, 980, 983, 984, 987], "bit": [4, 44, 49, 71, 88, 177, 181, 273, 298, 311, 319, 323, 332, 335, 369, 370, 532, 539, 608, 778, 867, 868, 928, 932, 950, 959, 966, 972, 975, 978, 980, 981, 984, 985, 986], "less": [4, 5, 8, 48, 49, 55, 83, 85, 88, 96, 105, 111, 112, 135, 142, 151, 161, 179, 181, 183, 212, 222, 224, 235, 236, 244, 246, 249, 274, 277, 278, 282, 284, 310, 311, 319, 323, 325, 332, 337, 339, 348, 350, 362, 366, 367, 369, 370, 374, 390, 392, 394, 396, 398, 400, 402, 407, 410, 412, 413, 432, 433, 434, 446, 465, 481, 485, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 540, 546, 569, 577, 584, 597, 611, 626, 628, 642, 651, 671, 672, 673, 674, 685, 701, 713, 728, 729, 734, 742, 744, 745, 748, 749, 750, 756, 772, 783, 784, 785, 787, 788, 789, 790, 791, 792, 794, 796, 797, 798, 799, 800, 811, 823, 825, 826, 828, 830, 836, 837, 847, 848, 855, 856, 857, 858, 873, 887, 920, 921, 923, 924, 925, 928, 930, 931, 934, 936, 941, 945, 946, 947, 951, 964, 966, 972, 973, 975, 976, 978, 979, 980, 982, 986, 987], "half": [4, 22, 88, 211, 214, 233, 235, 247, 332, 333, 367, 413, 472, 512, 543, 547, 552, 719, 807, 815, 931, 934, 947], "contigu": [4, 20, 339, 348, 359, 366, 370, 394, 397, 399, 409, 596, 597, 602, 603, 610, 611, 612, 613, 631, 634, 730, 765, 788, 789, 847, 849, 850, 851, 852, 853, 946, 975, 982, 986], "model_select": [4, 5, 6, 7, 10, 22, 23, 25, 28, 29, 50, 65, 66, 67, 68, 69, 71, 78, 90, 93, 98, 104, 105, 108, 109, 110, 111, 112, 113, 114, 117, 118, 123, 124, 129, 130, 132, 135, 146, 147, 148, 150, 151, 153, 154, 156, 174, 179, 181, 186, 187, 194, 195, 197, 207, 212, 217, 218, 219, 223, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 255, 257, 261, 262, 268, 270, 271, 275, 277, 278, 280, 281, 282, 285, 290, 291, 298, 301, 306, 314, 318, 319, 326, 337, 339, 342, 349, 350, 363, 366, 369, 388, 389, 508, 510, 517, 518, 529, 609, 647, 648, 650, 652, 691, 776, 779, 797, 805, 806, 808, 855, 856, 857, 858, 920, 921, 926, 931, 933, 934, 939, 941, 946, 952, 961, 962, 966, 969, 978, 979], "timeseriessplit": [4, 230, 366, 978, 979, 984], "ts_cv": 4, "n_split": [4, 99, 110, 146, 147, 151, 223, 230, 235, 237, 240, 245, 290, 298, 306, 319, 366, 747, 748, 749, 750, 751, 753, 754, 755, 756, 759, 761, 762, 763, 764, 765, 766, 767, 771, 961, 978, 980], "5": [4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 22, 23, 24, 27, 28, 29, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 55, 56, 57, 59, 60, 61, 62, 64, 65, 67, 69, 72, 73, 74, 75, 77, 78, 81, 83, 85, 86, 87, 88, 89, 91, 92, 93, 95, 98, 99, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 123, 126, 128, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 159, 160, 161, 162, 165, 167, 169, 170, 171, 173, 174, 176, 177, 179, 180, 181, 182, 183, 185, 187, 190, 191, 192, 193, 194, 195, 197, 200, 201, 202, 204, 206, 209, 210, 211, 212, 213, 214, 217, 219, 221, 222, 223, 224, 225, 226, 227, 230, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 248, 249, 250, 252, 253, 255, 257, 258, 259, 260, 262, 263, 265, 266, 268, 269, 270, 271, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 290, 291, 292, 296, 297, 298, 299, 300, 302, 303, 305, 306, 307, 308, 310, 311, 315, 316, 317, 319, 332, 334, 335, 337, 339, 342, 343, 348, 349, 350, 353, 354, 355, 360, 362, 363, 366, 367, 369, 370, 371, 372, 373, 374, 388, 389, 390, 391, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 408, 412, 414, 416, 419, 422, 432, 433, 434, 435, 440, 443, 444, 454, 466, 467, 471, 473, 474, 476, 478, 481, 483, 484, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 502, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 532, 542, 543, 544, 547, 552, 560, 563, 564, 565, 566, 569, 570, 572, 573, 575, 577, 578, 579, 580, 581, 582, 583, 584, 588, 591, 593, 596, 597, 601, 602, 603, 605, 606, 607, 609, 610, 611, 612, 613, 615, 616, 617, 618, 620, 622, 626, 627, 628, 630, 631, 634, 638, 639, 641, 642, 645, 646, 649, 653, 655, 659, 662, 663, 671, 672, 673, 675, 676, 677, 679, 684, 687, 688, 690, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 718, 730, 731, 733, 734, 736, 737, 738, 741, 743, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 802, 805, 806, 807, 808, 813, 814, 815, 817, 818, 820, 821, 823, 824, 825, 827, 828, 835, 836, 841, 847, 848, 849, 850, 851, 852, 853, 855, 857, 873, 882, 883, 884, 886, 888, 889, 894, 895, 899, 902, 920, 921, 923, 926, 927, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 941, 943, 945, 946, 949, 953, 957, 961, 962, 964, 965, 966, 968, 970, 973, 974, 975, 977, 979, 980, 982, 986, 987, 988], "48": [4, 41, 92, 334, 343, 362, 460, 547, 695, 772, 783, 920, 933, 941], "max_train_s": [4, 366, 767, 979], "10000": [4, 11, 27, 39, 58, 66, 67, 112, 123, 165, 172, 187, 195, 212, 248, 282, 295, 319, 325, 369, 370, 511, 512, 594, 629, 825, 853, 943, 962, 966], "test_siz": [4, 5, 6, 10, 22, 23, 25, 28, 29, 65, 98, 104, 109, 110, 112, 113, 117, 150, 156, 174, 179, 186, 187, 194, 195, 232, 233, 237, 242, 244, 248, 252, 261, 262, 268, 270, 271, 275, 277, 278, 282, 298, 306, 319, 342, 366, 648, 748, 763, 766, 767, 774, 776, 797, 921, 933, 934, 961, 962, 972, 973, 978, 979, 984], "manual": [4, 42, 151, 152, 154, 163, 180, 190, 237, 253, 290, 296, 310, 312, 323, 324, 332, 337, 341, 342, 349, 353, 362, 366, 367, 368, 388, 399, 517, 798, 821, 827, 920, 925, 927, 930, 931, 934, 941, 952, 957, 958, 966, 980, 982], "inspect": [4, 28, 51, 56, 101, 105, 112, 114, 115, 119, 130, 135, 140, 141, 151, 152, 153, 154, 162, 171, 188, 216, 235, 238, 247, 256, 261, 264, 278, 280, 281, 282, 283, 285, 294, 295, 296, 299, 300, 310, 315, 324, 326, 339, 350, 362, 363, 369, 370, 414, 503, 504, 507, 508, 509, 510, 514, 515, 516, 777, 808, 809, 855, 856, 857, 858, 919, 931, 932, 935, 938, 939, 946, 951, 966, 968, 975], "variou": [4, 12, 32, 33, 53, 55, 56, 74, 77, 88, 148, 151, 157, 189, 198, 199, 200, 210, 277, 281, 310, 312, 318, 319, 323, 331, 332, 333, 334, 337, 339, 342, 349, 351, 360, 361, 362, 364, 388, 392, 422, 452, 464, 465, 475, 507, 508, 509, 510, 511, 512, 514, 515, 517, 518, 519, 520, 544, 552, 597, 601, 603, 605, 608, 611, 613, 615, 616, 618, 623, 625, 626, 641, 642, 649, 746, 749, 750, 752, 760, 768, 769, 770, 771, 772, 773, 774, 775, 808, 847, 848, 920, 921, 928, 931, 934, 938, 941, 945, 947, 951, 955, 965, 966, 972, 975, 976], "check": [4, 5, 8, 16, 42, 49, 51, 89, 118, 135, 148, 150, 152, 153, 165, 167, 168, 179, 200, 228, 244, 283, 289, 306, 318, 323, 324, 335, 336, 337, 338, 339, 340, 341, 343, 344, 346, 348, 350, 353, 356, 363, 394, 401, 402, 415, 452, 458, 459, 481, 486, 487, 498, 511, 512, 596, 597, 602, 603, 610, 611, 612, 613, 626, 628, 631, 637, 639, 642, 643, 752, 763, 772, 786, 804, 812, 852, 855, 856, 857, 858, 867, 868, 869, 878, 879, 890, 891, 893, 915, 916, 917, 919, 926, 927, 928, 931, 946, 952, 955, 972, 973, 975, 979, 983, 984, 985, 986, 987], "all_split": 4, "list": [4, 8, 9, 10, 12, 13, 15, 16, 18, 23, 29, 36, 40, 45, 57, 64, 95, 96, 103, 110, 118, 124, 154, 216, 230, 233, 235, 236, 238, 239, 244, 248, 262, 275, 280, 281, 282, 283, 284, 285, 291, 301, 311, 312, 325, 331, 332, 335, 336, 337, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 353, 360, 361, 362, 363, 366, 368, 369, 370, 383, 385, 388, 400, 406, 407, 414, 415, 416, 422, 428, 432, 433, 434, 438, 439, 440, 441, 442, 446, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 473, 482, 500, 501, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 538, 539, 541, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 582, 584, 585, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 620, 622, 623, 628, 629, 631, 634, 642, 646, 647, 649, 660, 662, 663, 666, 668, 674, 682, 695, 703, 727, 730, 732, 737, 741, 744, 745, 746, 749, 750, 752, 757, 758, 760, 769, 770, 771, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 812, 816, 819, 821, 822, 827, 844, 848, 850, 853, 855, 856, 857, 858, 859, 860, 861, 863, 867, 868, 869, 873, 875, 876, 877, 879, 887, 888, 890, 892, 902, 905, 915, 920, 921, 927, 931, 933, 934, 935, 938, 939, 942, 947, 949, 951, 952, 955, 957, 961, 963, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "train_0": 4, "test_0": 4, "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 323, 324, 331, 332, 334, 335, 337, 338, 339, 341, 342, 343, 344, 346, 348, 349, 350, 353, 354, 355, 356, 358, 359, 360, 362, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 383, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 712, 713, 715, 716, 717, 718, 720, 722, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 867, 868, 873, 878, 879, 881, 883, 884, 886, 887, 888, 889, 891, 893, 894, 896, 897, 899, 900, 901, 902, 905, 906, 912, 920, 921, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 949, 952, 953, 957, 961, 962, 963, 964, 965, 966, 968, 969, 970], "iloc": [4, 118, 151, 152, 197, 235], "last": [4, 40, 53, 80, 109, 111, 151, 158, 179, 180, 187, 192, 206, 227, 238, 246, 247, 278, 282, 284, 290, 314, 323, 332, 335, 339, 341, 342, 345, 350, 353, 362, 363, 370, 374, 389, 393, 397, 409, 414, 418, 465, 483, 509, 510, 511, 512, 533, 534, 537, 543, 544, 547, 560, 632, 633, 635, 636, 647, 648, 650, 651, 652, 657, 731, 744, 745, 749, 750, 765, 788, 789, 793, 808, 813, 821, 827, 862, 887, 906, 920, 926, 927, 928, 930, 931, 932, 935, 945, 952, 957, 964, 972, 979, 980, 981, 986], "train_4": 4, "test_4": 4, "readi": [4, 7, 140, 180, 332, 341, 345], "tree": [4, 7, 24, 25, 28, 37, 40, 57, 97, 98, 101, 102, 103, 108, 109, 110, 111, 112, 114, 118, 119, 143, 146, 152, 154, 200, 214, 216, 239, 253, 258, 266, 273, 274, 278, 282, 319, 323, 326, 332, 334, 343, 349, 350, 352, 360, 362, 368, 373, 388, 392, 393, 394, 395, 396, 398, 400, 407, 413, 445, 450, 454, 464, 465, 469, 494, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 581, 582, 583, 584, 608, 638, 642, 653, 737, 752, 772, 774, 783, 788, 789, 790, 791, 792, 793, 794, 796, 798, 799, 800, 809, 812, 821, 879, 921, 928, 931, 932, 937, 938, 951, 952, 953, 968, 972, 973, 974, 975, 976, 977, 978, 979], "often": [4, 18, 22, 23, 30, 64, 68, 116, 139, 146, 151, 152, 180, 197, 200, 223, 237, 240, 273, 278, 298, 308, 310, 311, 312, 323, 324, 331, 332, 334, 337, 339, 342, 345, 348, 349, 350, 352, 356, 360, 362, 363, 364, 366, 367, 369, 370, 372, 374, 418, 471, 474, 483, 486, 582, 596, 597, 602, 603, 610, 611, 612, 613, 622, 624, 637, 677, 818, 826, 833, 845, 920, 921, 923, 926, 927, 928, 929, 930, 931, 933, 934, 936, 937, 938, 941, 944, 945, 947, 957, 959, 964, 965, 966, 973, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "flexibl": [4, 23, 108, 146, 179, 274, 295, 312, 339, 344, 366, 372, 624, 847, 848, 920, 925, 927, 931, 935, 941, 952, 955, 981, 985], "effici": [4, 5, 12, 13, 38, 42, 49, 85, 116, 156, 168, 172, 181, 187, 258, 310, 323, 329, 331, 337, 339, 340, 342, 343, 348, 350, 356, 359, 361, 362, 367, 368, 369, 372, 374, 393, 394, 397, 399, 400, 402, 404, 407, 409, 411, 412, 446, 483, 484, 485, 488, 490, 491, 494, 513, 516, 524, 538, 541, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 582, 583, 584, 588, 590, 605, 608, 609, 614, 616, 618, 623, 625, 626, 627, 628, 629, 635, 636, 638, 649, 675, 705, 712, 728, 729, 744, 745, 746, 760, 777, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 813, 825, 836, 840, 847, 856, 858, 884, 899, 920, 923, 925, 927, 928, 930, 931, 932, 934, 935, 936, 937, 939, 941, 942, 943, 944, 945, 946, 951, 955, 957, 961, 964, 965, 966, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "heteorogen": 4, "tabular": [4, 152, 339, 939], "mix": [4, 57, 63, 86, 87, 148, 179, 273, 331, 339, 348, 350, 363, 367, 374, 414, 416, 417, 446, 483, 488, 490, 497, 550, 554, 580, 596, 597, 602, 608, 609, 610, 611, 612, 613, 618, 626, 628, 631, 746, 760, 774, 808, 821, 822, 828, 895, 902, 905, 927, 936, 965, 984, 986, 987], "long": [4, 11, 12, 40, 57, 99, 111, 140, 147, 151, 153, 179, 213, 238, 266, 273, 281, 310, 311, 319, 324, 337, 345, 348, 350, 351, 356, 361, 362, 372, 403, 448, 488, 626, 627, 628, 749, 750, 783, 784, 785, 786, 787, 805, 806, 816, 931, 937, 941, 942, 944, 945, 950, 954, 974, 978, 984, 986], "sampl": [4, 5, 8, 13, 22, 23, 24, 25, 29, 30, 31, 33, 35, 37, 38, 39, 42, 44, 45, 49, 51, 52, 53, 54, 55, 60, 73, 74, 75, 78, 81, 83, 85, 89, 90, 94, 95, 99, 100, 101, 102, 103, 104, 107, 108, 110, 111, 112, 114, 119, 120, 121, 130, 132, 135, 140, 141, 142, 144, 146, 148, 151, 152, 156, 157, 165, 167, 168, 179, 181, 183, 187, 193, 195, 196, 197, 199, 206, 210, 211, 213, 215, 221, 222, 224, 225, 226, 227, 228, 230, 235, 237, 238, 239, 241, 243, 247, 249, 252, 253, 256, 257, 258, 259, 260, 262, 263, 264, 273, 275, 276, 277, 278, 280, 282, 283, 285, 287, 289, 290, 291, 292, 293, 294, 296, 298, 300, 306, 310, 311, 315, 318, 323, 326, 330, 332, 333, 336, 337, 339, 340, 348, 349, 359, 360, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 379, 381, 383, 384, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 404, 406, 407, 408, 411, 412, 413, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 560, 561, 577, 578, 579, 580, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 637, 638, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 655, 657, 658, 659, 660, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 712, 713, 717, 718, 719, 720, 722, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 867, 868, 872, 873, 884, 888, 900, 902, 905, 906, 909, 912, 920, 921, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 951, 952, 954, 957, 963, 964, 965, 966, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "larg": [4, 12, 13, 20, 24, 33, 35, 39, 43, 45, 46, 48, 49, 67, 69, 85, 89, 102, 104, 111, 114, 116, 129, 140, 141, 153, 158, 159, 168, 170, 179, 181, 184, 185, 197, 211, 232, 238, 241, 244, 255, 262, 270, 273, 275, 283, 284, 298, 303, 311, 312, 323, 332, 337, 343, 346, 348, 349, 350, 353, 356, 361, 364, 366, 367, 368, 369, 371, 372, 373, 375, 393, 395, 397, 400, 401, 402, 403, 408, 412, 423, 425, 449, 464, 484, 486, 488, 490, 494, 497, 499, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 517, 518, 532, 538, 539, 541, 584, 591, 593, 600, 604, 607, 608, 609, 614, 621, 622, 624, 627, 629, 635, 637, 639, 641, 642, 643, 645, 695, 728, 729, 746, 754, 756, 760, 764, 773, 783, 784, 785, 786, 787, 788, 789, 794, 805, 806, 813, 817, 818, 826, 828, 839, 840, 847, 848, 852, 853, 855, 856, 857, 858, 883, 884, 920, 923, 925, 927, 928, 930, 933, 934, 935, 939, 944, 945, 946, 947, 951, 952, 955, 962, 964, 965, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "here": [4, 8, 9, 12, 13, 16, 22, 52, 53, 61, 71, 75, 80, 81, 83, 87, 88, 90, 92, 93, 94, 96, 99, 102, 108, 112, 118, 130, 133, 135, 143, 144, 151, 152, 153, 156, 158, 168, 172, 179, 185, 194, 195, 197, 199, 201, 206, 211, 216, 222, 223, 224, 229, 232, 233, 235, 237, 238, 240, 244, 245, 247, 253, 255, 262, 269, 270, 271, 275, 278, 282, 284, 287, 289, 298, 306, 308, 312, 314, 319, 323, 324, 325, 331, 332, 335, 336, 337, 338, 339, 341, 342, 343, 345, 348, 349, 356, 358, 359, 362, 363, 365, 366, 367, 368, 369, 370, 373, 375, 388, 391, 392, 393, 394, 395, 396, 397, 399, 402, 414, 422, 425, 486, 488, 489, 493, 494, 517, 518, 519, 520, 531, 532, 534, 538, 541, 544, 552, 578, 580, 597, 601, 603, 605, 611, 613, 615, 623, 625, 639, 641, 645, 649, 662, 675, 695, 705, 741, 746, 749, 750, 752, 760, 768, 769, 770, 771, 772, 773, 775, 784, 788, 789, 812, 820, 823, 826, 839, 840, 850, 897, 920, 923, 927, 928, 929, 930, 931, 934, 937, 941, 943, 944, 945, 946, 951, 952, 954, 955, 957, 958, 964, 972, 980, 985], "ordin": [4, 49, 65, 118, 276, 282, 285, 331, 350, 369, 446, 517, 659, 813, 816, 821, 822, 927, 928, 941, 952, 980, 986], "encod": [4, 8, 11, 44, 65, 85, 104, 118, 151, 152, 153, 178, 179, 244, 274, 275, 276, 282, 284, 285, 298, 310, 312, 329, 331, 333, 339, 342, 348, 350, 363, 366, 367, 369, 370, 372, 437, 446, 453, 476, 481, 487, 489, 490, 492, 494, 495, 496, 498, 501, 511, 512, 516, 517, 519, 531, 538, 539, 541, 580, 598, 608, 609, 619, 630, 684, 748, 753, 755, 811, 813, 815, 816, 819, 821, 822, 831, 920, 921, 927, 928, 931, 933, 934, 936, 945, 951, 952, 968, 973, 974, 980, 984, 986, 987], "know": [4, 49, 61, 108, 130, 133, 135, 144, 151, 197, 213, 235, 252, 284, 287, 306, 323, 337, 348, 356, 362, 365, 366, 367, 370, 450, 454, 460, 596, 602, 608, 609, 675, 705, 746, 760, 832, 833, 835, 836, 837, 838, 855, 856, 857, 858, 920, 930, 931, 932, 934, 943, 978, 979, 982, 984], "treat": [4, 6, 65, 108, 118, 146, 151, 179, 244, 282, 290, 319, 337, 348, 350, 359, 369, 370, 393, 511, 512, 538, 539, 541, 557, 558, 582, 588, 595, 621, 624, 703, 737, 817, 818, 824, 825, 828, 832, 835, 836, 838, 921, 923, 927, 931, 932, 938, 941, 945, 947, 962, 976, 984, 988], "dedic": [4, 233, 308, 335, 341, 343, 348, 351, 353, 358, 362, 534, 622, 624, 637, 920, 951, 957, 980], "rule": [4, 156, 315, 318, 319, 323, 334, 337, 338, 339, 348, 350, 351, 357, 361, 362, 366, 367, 369, 371, 486, 499, 500, 501, 502, 503, 511, 512, 519, 520, 552, 584, 595, 608, 609, 616, 618, 626, 627, 628, 656, 657, 746, 749, 750, 752, 760, 771, 773, 797, 847, 860, 920, 925, 933, 934, 945, 947, 952, 957, 964, 968, 974, 977, 984], "pass": [4, 7, 8, 19, 20, 34, 108, 115, 130, 160, 180, 207, 209, 210, 216, 218, 226, 233, 236, 280, 283, 303, 312, 319, 323, 324, 325, 332, 337, 338, 339, 342, 343, 344, 345, 346, 348, 350, 356, 362, 363, 366, 367, 369, 370, 372, 373, 374, 388, 389, 391, 394, 395, 397, 399, 400, 402, 404, 407, 409, 410, 412, 414, 415, 417, 419, 422, 424, 438, 441, 442, 445, 447, 453, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 531, 532, 538, 539, 541, 543, 544, 547, 557, 558, 560, 561, 567, 570, 576, 581, 582, 584, 589, 590, 591, 592, 593, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 622, 626, 627, 628, 629, 631, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 681, 682, 691, 712, 723, 727, 728, 729, 730, 737, 739, 740, 744, 745, 746, 748, 749, 750, 751, 752, 758, 760, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 812, 813, 815, 819, 821, 822, 823, 825, 828, 836, 837, 838, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 867, 868, 874, 878, 879, 883, 884, 886, 888, 890, 891, 899, 901, 902, 905, 920, 921, 927, 929, 931, 932, 933, 934, 935, 938, 941, 944, 945, 946, 952, 955, 957, 961, 969, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "explicitli": [4, 42, 105, 135, 142, 146, 147, 180, 209, 312, 319, 324, 331, 333, 337, 338, 339, 341, 348, 350, 358, 366, 370, 372, 499, 500, 529, 530, 547, 577, 598, 608, 609, 619, 630, 659, 676, 731, 737, 738, 749, 750, 779, 782, 788, 789, 814, 837, 838, 899, 920, 921, 923, 925, 927, 928, 931, 933, 934, 941, 955, 966, 972, 975, 976, 977, 978, 979, 980, 981, 984, 985, 986], "logic": [4, 324, 338, 339, 344, 358, 369, 947, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "integ": [4, 16, 44, 49, 65, 151, 179, 197, 281, 282, 319, 323, 331, 332, 334, 339, 342, 346, 349, 350, 362, 363, 366, 367, 369, 370, 385, 388, 412, 414, 417, 422, 437, 446, 448, 451, 452, 453, 455, 458, 459, 462, 464, 465, 469, 472, 500, 509, 510, 511, 512, 513, 517, 518, 522, 532, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 577, 578, 579, 580, 582, 583, 594, 601, 605, 609, 615, 623, 625, 626, 649, 664, 684, 746, 748, 749, 750, 751, 753, 755, 760, 761, 762, 763, 765, 766, 768, 771, 779, 782, 784, 787, 788, 789, 813, 821, 822, 827, 828, 831, 841, 843, 855, 856, 857, 858, 863, 894, 895, 896, 900, 921, 927, 932, 934, 941, 944, 946, 947, 957, 964, 966, 972, 974, 975, 978, 979, 980, 981, 982, 983, 985, 986, 987], "lexicograph": [4, 350, 517, 737, 741, 790, 798], "ad": [4, 13, 69, 93, 95, 98, 109, 129, 135, 141, 142, 158, 181, 203, 212, 235, 236, 237, 273, 281, 282, 283, 284, 285, 311, 336, 337, 341, 343, 348, 350, 351, 367, 369, 370, 371, 372, 392, 393, 394, 396, 397, 399, 402, 409, 412, 414, 464, 472, 482, 485, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 532, 539, 540, 541, 543, 552, 557, 558, 561, 563, 577, 579, 591, 592, 598, 600, 604, 608, 609, 619, 626, 628, 630, 645, 664, 724, 726, 744, 745, 746, 760, 769, 776, 786, 805, 806, 807, 821, 827, 829, 844, 855, 856, 857, 858, 874, 920, 924, 926, 927, 928, 932, 934, 935, 937, 952, 955, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "benefit": [4, 51, 68, 69, 151, 193, 203, 209, 211, 255, 284, 323, 337, 346, 350, 360, 362, 398, 411, 418, 458, 517, 518, 608, 609, 616, 618, 626, 627, 628, 845, 847, 920, 926, 934, 939, 941, 952, 955, 972, 975, 976, 977, 984, 985, 986, 987], "prevent": [4, 99, 111, 130, 150, 180, 273, 298, 314, 319, 337, 339, 341, 348, 349, 362, 367, 370, 393, 399, 438, 439, 540, 541, 561, 677, 734, 805, 806, 832, 833, 835, 836, 837, 838, 931, 933, 936, 937, 947, 964, 974, 975, 977, 979, 981, 982, 983, 984, 985, 986, 987], "ani": [4, 8, 9, 13, 18, 27, 40, 42, 52, 62, 115, 128, 133, 140, 141, 142, 150, 151, 152, 153, 168, 179, 197, 206, 209, 210, 222, 226, 227, 235, 236, 238, 241, 244, 266, 273, 274, 277, 280, 282, 283, 285, 298, 312, 319, 323, 324, 325, 331, 332, 334, 335, 337, 339, 341, 342, 343, 345, 349, 350, 351, 353, 358, 359, 360, 361, 362, 363, 366, 367, 368, 369, 370, 371, 385, 391, 398, 399, 400, 402, 404, 406, 407, 411, 414, 417, 438, 439, 458, 459, 473, 484, 487, 489, 496, 501, 507, 508, 509, 510, 514, 515, 516, 517, 518, 519, 520, 529, 530, 532, 538, 539, 541, 543, 553, 560, 561, 570, 577, 582, 583, 598, 608, 609, 616, 618, 619, 626, 627, 628, 629, 630, 642, 646, 649, 650, 654, 666, 667, 669, 673, 685, 686, 701, 704, 706, 723, 727, 728, 729, 730, 739, 740, 742, 746, 749, 750, 758, 759, 777, 780, 788, 789, 794, 798, 807, 808, 812, 813, 817, 819, 821, 822, 837, 838, 841, 844, 847, 855, 856, 857, 858, 859, 861, 863, 867, 868, 901, 915, 920, 921, 923, 926, 927, 928, 931, 932, 933, 934, 937, 938, 939, 941, 943, 944, 945, 946, 947, 951, 957, 959, 963, 964, 966, 973, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "unknown": [4, 15, 51, 151, 235, 287, 289, 325, 332, 350, 356, 359, 370, 815, 821, 822, 894, 930, 941, 957, 976, 980, 984, 985], "sake": [4, 111, 147, 151, 179, 278, 310, 312, 345, 348, 620, 649], "simplic": [4, 13, 28, 310, 312, 350, 368, 934, 935, 936, 946], "try": [4, 6, 11, 14, 15, 23, 35, 49, 88, 107, 135, 147, 150, 152, 156, 158, 168, 222, 223, 235, 253, 266, 300, 310, 311, 332, 335, 336, 337, 339, 342, 343, 345, 348, 350, 356, 362, 365, 366, 370, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 453, 517, 527, 539, 608, 623, 625, 639, 643, 746, 749, 750, 758, 760, 769, 770, 771, 773, 826, 828, 847, 920, 927, 928, 937, 946, 947, 952, 954, 955, 957, 959, 962, 964, 965, 966, 974, 975, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987], "default": [4, 14, 23, 25, 27, 38, 41, 42, 44, 54, 85, 129, 135, 146, 152, 158, 159, 168, 179, 180, 197, 208, 210, 217, 219, 224, 230, 238, 244, 252, 253, 260, 273, 277, 280, 281, 285, 307, 310, 311, 312, 314, 319, 323, 324, 331, 332, 335, 339, 340, 341, 342, 343, 344, 346, 348, 349, 350, 353, 356, 360, 362, 363, 366, 367, 369, 370, 371, 373, 374, 375, 376, 378, 379, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 657, 658, 659, 661, 662, 663, 664, 666, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 683, 684, 685, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 871, 873, 874, 876, 878, 883, 884, 885, 886, 887, 888, 889, 894, 896, 899, 900, 901, 902, 904, 905, 906, 912, 915, 917, 918, 920, 921, 923, 925, 927, 930, 931, 932, 934, 935, 937, 938, 941, 943, 945, 946, 957, 961, 964, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "hyper": [4, 65, 229, 235, 240, 271, 298, 319, 339, 348, 349, 350, 357, 366, 369, 371, 594, 595, 750, 758, 760, 804, 926, 927, 931, 934, 945, 946, 957, 968, 972, 986], "paramet": [4, 5, 9, 10, 11, 13, 14, 15, 40, 50, 53, 55, 56, 57, 65, 66, 67, 72, 74, 75, 83, 85, 103, 107, 112, 113, 123, 124, 130, 133, 135, 140, 142, 144, 146, 147, 148, 151, 152, 158, 159, 160, 161, 164, 166, 167, 168, 170, 179, 181, 183, 184, 187, 196, 197, 203, 204, 206, 208, 211, 212, 215, 221, 223, 224, 226, 227, 229, 234, 235, 236, 239, 240, 243, 246, 247, 248, 250, 253, 255, 259, 260, 266, 268, 269, 271, 273, 274, 275, 280, 281, 283, 284, 285, 291, 293, 295, 300, 303, 307, 308, 310, 311, 312, 314, 315, 316, 317, 319, 323, 324, 325, 326, 329, 330, 332, 340, 342, 343, 344, 345, 346, 348, 357, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 928, 930, 933, 934, 935, 936, 937, 938, 939, 941, 943, 944, 945, 947, 951, 952, 958, 960, 962, 963, 964, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "pipelin": [4, 28, 50, 53, 65, 68, 78, 104, 108, 127, 129, 146, 147, 152, 153, 156, 158, 167, 168, 179, 180, 185, 193, 197, 200, 205, 206, 207, 211, 216, 219, 228, 232, 234, 242, 249, 253, 255, 261, 262, 268, 271, 275, 278, 280, 281, 282, 283, 284, 285, 291, 310, 311, 319, 323, 326, 329, 331, 332, 337, 340, 350, 366, 370, 372, 376, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 438, 452, 465, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 557, 560, 561, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 647, 648, 650, 651, 652, 663, 744, 745, 746, 749, 750, 760, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 920, 921, 927, 934, 935, 940, 941, 945, 946, 951, 952, 953, 955, 958, 960, 968, 972, 973, 975, 976, 977, 978, 979], "make_pipelin": [4, 28, 53, 78, 104, 108, 118, 129, 130, 146, 147, 151, 152, 156, 158, 167, 168, 179, 180, 185, 193, 197, 200, 206, 207, 208, 216, 217, 219, 232, 242, 253, 262, 268, 275, 278, 280, 281, 282, 283, 284, 285, 311, 319, 349, 363, 366, 517, 626, 628, 800, 808, 832, 833, 835, 836, 837, 838, 847, 848, 849, 850, 852, 853, 921, 934, 941, 945, 946, 975, 982, 985], "ordinalencod": [4, 108, 118, 152, 153, 179, 285, 331, 350, 369, 531, 784, 816, 821, 933, 941, 980, 981, 984, 985, 986, 987, 988], "compos": [4, 5, 23, 63, 64, 65, 69, 78, 101, 108, 118, 148, 151, 152, 153, 179, 181, 197, 208, 217, 219, 281, 283, 284, 285, 326, 349, 351, 362, 363, 366, 372, 465, 562, 930, 972], "columntransform": [4, 64, 65, 152, 153, 179, 197, 217, 219, 283, 284, 285, 329, 331, 348, 349, 416, 417, 579, 813, 920, 921, 952, 968, 980, 981, 982, 983, 984, 985, 986, 987], "ensembl": [4, 7, 10, 24, 25, 28, 51, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 146, 147, 152, 153, 154, 179, 200, 206, 214, 215, 217, 218, 232, 247, 252, 275, 280, 281, 282, 283, 285, 310, 319, 323, 326, 341, 342, 349, 350, 360, 362, 366, 371, 388, 454, 465, 582, 583, 585, 608, 749, 750, 774, 778, 809, 812, 821, 851, 855, 857, 858, 920, 931, 932, 937, 938, 947, 951, 952, 953, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979], "histgradientboostingregressor": [4, 7, 108, 111, 112, 115, 118, 146, 152, 179, 280, 281, 282, 283, 285, 341, 369, 510, 582, 583, 585, 921, 938, 981, 982, 983, 984, 985, 986, 987, 988], "cross_valid": [4, 108, 118, 151, 181, 231, 238, 337, 349, 525, 769, 770, 931, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 987, 988], "categorical_column": [4, 108, 151, 153, 417], "holidai": 4, "workingdai": 4, "clear": [4, 15, 55, 66, 151, 278, 332, 336, 337, 339, 348, 349, 350, 363, 368, 861, 862, 920, 925, 983, 984, 985], "misti": 4, "spring": [4, 152], "fall": [4, 111, 142, 234, 235, 337, 339, 361, 362, 370, 385, 397, 458, 459, 676, 677, 741, 825, 836, 930, 931, 941, 957, 965, 981], "winter": 4, "fals": [4, 5, 7, 8, 10, 11, 13, 14, 15, 19, 20, 22, 24, 25, 29, 30, 35, 38, 40, 42, 43, 59, 62, 64, 65, 66, 67, 72, 74, 83, 89, 91, 94, 95, 98, 105, 108, 111, 112, 121, 123, 135, 140, 141, 142, 143, 151, 152, 153, 154, 158, 159, 165, 179, 180, 184, 185, 187, 195, 197, 199, 202, 213, 215, 219, 221, 232, 235, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 253, 257, 263, 266, 269, 270, 273, 274, 280, 282, 283, 284, 285, 289, 298, 300, 306, 307, 310, 311, 331, 337, 338, 339, 342, 350, 360, 362, 363, 364, 366, 367, 369, 370, 371, 372, 374, 375, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 399, 401, 402, 403, 404, 409, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 458, 459, 460, 462, 465, 473, 474, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 587, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 644, 645, 647, 648, 649, 651, 652, 653, 658, 659, 661, 662, 663, 664, 665, 668, 675, 676, 677, 678, 679, 680, 687, 691, 692, 699, 700, 703, 705, 710, 712, 716, 717, 718, 723, 727, 731, 732, 733, 734, 736, 738, 741, 743, 744, 745, 746, 749, 750, 751, 752, 757, 760, 764, 765, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 794, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 847, 848, 849, 850, 851, 852, 853, 859, 860, 861, 865, 866, 867, 868, 878, 885, 891, 893, 896, 897, 901, 902, 905, 912, 917, 918, 920, 921, 927, 931, 934, 941, 945, 946, 965, 966, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "ordinal_encod": [4, 108], "gbrt_pipelin": 4, "transform": [4, 5, 6, 8, 10, 13, 23, 40, 42, 43, 44, 47, 50, 52, 57, 63, 68, 78, 80, 87, 88, 90, 92, 94, 95, 97, 108, 130, 141, 147, 148, 151, 152, 156, 171, 179, 180, 187, 193, 195, 197, 200, 203, 206, 211, 213, 219, 223, 232, 233, 236, 244, 253, 255, 261, 262, 263, 273, 274, 275, 276, 277, 278, 280, 285, 298, 301, 310, 312, 319, 326, 331, 332, 333, 334, 337, 339, 342, 346, 350, 358, 360, 361, 362, 364, 367, 369, 370, 371, 372, 378, 382, 384, 388, 392, 393, 394, 396, 397, 399, 402, 414, 415, 416, 417, 418, 432, 433, 434, 435, 438, 439, 446, 453, 458, 459, 464, 465, 474, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 500, 507, 509, 511, 514, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 586, 588, 589, 590, 591, 592, 603, 608, 613, 623, 626, 634, 638, 639, 640, 641, 642, 644, 663, 702, 703, 734, 746, 749, 750, 760, 774, 777, 783, 792, 797, 800, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 845, 847, 849, 852, 853, 876, 878, 920, 921, 923, 925, 927, 928, 931, 932, 935, 945, 946, 948, 951, 952, 953, 957, 962, 963, 966, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "remaind": [4, 108, 151, 168, 179, 181, 197, 285, 306, 314, 363, 414, 417, 972, 979, 980, 981, 984, 985], "passthrough": [4, 66, 108, 151, 152, 179, 197, 285, 363, 414, 417, 517, 518, 807, 808, 941, 981, 983, 986, 987], "short": [4, 5, 108, 114, 170, 233, 270, 337, 345, 366, 370, 374, 927, 928, 934, 977, 982, 983, 984, 985, 986, 987], "name": [4, 6, 7, 10, 11, 12, 16, 18, 23, 25, 27, 28, 33, 40, 41, 53, 57, 65, 67, 69, 75, 86, 92, 102, 103, 104, 108, 109, 111, 118, 151, 153, 168, 177, 179, 181, 185, 186, 194, 196, 197, 199, 200, 206, 212, 214, 215, 219, 223, 230, 232, 236, 238, 239, 242, 244, 245, 253, 261, 262, 268, 269, 275, 277, 284, 291, 303, 310, 311, 312, 324, 325, 331, 332, 335, 337, 339, 341, 342, 344, 345, 350, 353, 356, 359, 362, 363, 366, 369, 370, 372, 376, 378, 382, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 438, 439, 440, 441, 442, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 526, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 637, 638, 639, 640, 641, 642, 647, 648, 649, 650, 652, 658, 659, 663, 681, 682, 728, 729, 744, 745, 746, 749, 750, 752, 758, 760, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 866, 867, 868, 871, 875, 876, 877, 879, 892, 894, 901, 915, 919, 920, 925, 927, 931, 932, 938, 939, 941, 947, 952, 961, 962, 964, 966, 972, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "easier": [4, 40, 57, 61, 75, 108, 158, 164, 208, 232, 233, 273, 298, 310, 319, 332, 337, 339, 342, 345, 348, 353, 364, 366, 418, 465, 845, 878, 926, 931, 938, 947, 952, 955, 966, 981, 986], "specifi": [4, 85, 108, 109, 136, 142, 168, 180, 187, 221, 243, 323, 324, 331, 335, 337, 339, 346, 349, 350, 356, 362, 363, 366, 367, 369, 371, 372, 374, 376, 388, 392, 396, 400, 402, 413, 414, 417, 419, 420, 422, 423, 424, 425, 426, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 453, 465, 481, 483, 487, 488, 490, 491, 496, 497, 502, 507, 509, 510, 511, 512, 514, 517, 518, 533, 534, 543, 544, 547, 552, 560, 561, 570, 581, 582, 583, 588, 593, 596, 597, 598, 601, 602, 603, 605, 606, 608, 609, 610, 611, 612, 613, 615, 618, 619, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 637, 641, 648, 649, 650, 652, 659, 661, 678, 679, 687, 703, 720, 728, 729, 732, 733, 736, 746, 748, 749, 750, 752, 753, 755, 759, 760, 763, 768, 769, 770, 771, 772, 773, 775, 779, 782, 783, 784, 786, 787, 788, 789, 793, 821, 823, 826, 827, 843, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 879, 886, 915, 921, 927, 928, 930, 931, 934, 938, 939, 941, 944, 945, 946, 961, 965, 972, 978, 979, 980, 981, 983, 984, 986, 987, 988], "next": [4, 7, 23, 55, 73, 107, 108, 112, 121, 142, 150, 154, 172, 176, 179, 207, 214, 218, 219, 223, 230, 241, 252, 278, 282, 288, 310, 314, 318, 319, 326, 335, 337, 339, 341, 359, 362, 363, 366, 369, 458, 459, 560, 584, 642, 648, 650, 652, 730, 744, 745, 774, 897, 920, 924, 930, 931, 941, 955, 969, 972, 985, 986], "verbose_feature_names_out": [4, 108, 151, 152, 153, 219, 283, 284, 285, 363, 414, 417, 985], "categorical_featur": [4, 65, 108, 152, 282, 283, 284, 285, 342, 369, 511, 512, 582, 583, 938, 980, 984, 987], "set_output": [4, 108, 148, 152, 205, 278, 340, 384, 393, 394, 396, 397, 399, 414, 418, 432, 433, 434, 435, 446, 454, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 516, 517, 518, 519, 520, 531, 532, 533, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 608, 638, 639, 642, 774, 792, 797, 800, 804, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 845, 987], "across": [4, 56, 62, 77, 123, 151, 168, 173, 200, 230, 232, 235, 253, 273, 278, 338, 339, 346, 350, 356, 361, 362, 366, 370, 374, 388, 391, 400, 402, 404, 407, 410, 412, 419, 422, 424, 438, 441, 442, 445, 447, 453, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 501, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 517, 518, 538, 541, 544, 552, 557, 558, 560, 561, 582, 583, 584, 589, 590, 591, 592, 596, 597, 600, 602, 603, 604, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 626, 628, 629, 635, 636, 639, 640, 641, 642, 643, 644, 645, 654, 655, 667, 680, 706, 737, 740, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 758, 760, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 793, 797, 804, 805, 806, 813, 817, 818, 825, 826, 828, 836, 839, 840, 842, 843, 847, 848, 849, 852, 855, 856, 883, 884, 902, 905, 920, 927, 929, 931, 941, 945, 947, 952, 955, 966, 972, 975, 978, 979, 980, 981, 982], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 18, 23, 25, 30, 31, 33, 36, 37, 44, 48, 51, 53, 56, 64, 69, 83, 85, 87, 88, 91, 93, 95, 102, 104, 108, 109, 110, 111, 118, 138, 141, 143, 144, 147, 159, 167, 168, 171, 176, 179, 180, 187, 188, 189, 197, 199, 200, 213, 215, 221, 222, 223, 224, 226, 227, 230, 233, 234, 235, 236, 238, 243, 246, 249, 253, 258, 263, 266, 269, 271, 273, 275, 278, 280, 291, 294, 298, 308, 310, 311, 312, 323, 332, 337, 339, 343, 344, 348, 363, 366, 370, 374, 458, 483, 547, 560, 561, 730, 821, 874, 879, 891, 931, 938, 946, 962], "cv_result": [4, 65, 233, 234, 236, 238, 760, 771, 931], "score": [4, 8, 11, 15, 19, 20, 22, 23, 24, 28, 30, 33, 53, 55, 65, 66, 67, 69, 71, 75, 78, 93, 98, 101, 107, 108, 110, 111, 114, 117, 118, 124, 125, 129, 133, 146, 148, 150, 151, 152, 153, 154, 156, 170, 171, 174, 179, 181, 185, 187, 195, 197, 206, 211, 212, 215, 219, 225, 228, 233, 235, 236, 237, 238, 239, 240, 243, 244, 246, 247, 248, 249, 250, 252, 260, 261, 262, 268, 269, 270, 275, 278, 280, 281, 282, 283, 290, 291, 298, 306, 310, 311, 314, 319, 332, 337, 339, 342, 349, 350, 356, 357, 359, 360, 361, 363, 365, 367, 369, 371, 379, 381, 383, 388, 394, 397, 399, 402, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 452, 454, 482, 486, 491, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 542, 543, 544, 545, 546, 548, 549, 550, 552, 553, 554, 556, 559, 560, 561, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 685, 686, 687, 688, 689, 691, 704, 705, 706, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 749, 750, 752, 760, 765, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 793, 794, 795, 797, 798, 799, 804, 805, 806, 808, 828, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 886, 920, 923, 927, 929, 934, 937, 939, 941, 945, 952, 960, 962, 964, 966, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "neg_mean_absolute_error": [4, 118, 181, 931], "neg_root_mean_squared_error": [4, 931], "mae": [4, 118, 179, 181, 508, 515, 694, 856, 858, 931, 947, 979, 980, 984, 985], "test_neg_mean_absolute_error": [4, 181], "rmse": [4, 74, 699, 983], "test_neg_root_mean_squared_error": 4, "print": [4, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 24, 27, 29, 34, 38, 39, 42, 43, 44, 45, 46, 48, 49, 53, 55, 56, 58, 62, 64, 65, 67, 68, 69, 73, 77, 78, 83, 85, 88, 93, 94, 96, 102, 105, 106, 107, 108, 110, 112, 123, 125, 129, 130, 132, 133, 135, 136, 138, 140, 144, 150, 152, 153, 154, 156, 163, 164, 165, 166, 170, 171, 174, 175, 179, 181, 182, 186, 187, 194, 195, 197, 200, 201, 204, 208, 210, 212, 215, 219, 224, 229, 233, 234, 235, 236, 238, 240, 243, 244, 248, 253, 257, 264, 266, 269, 270, 271, 275, 278, 280, 281, 282, 284, 287, 288, 291, 298, 310, 311, 312, 314, 318, 319, 323, 331, 332, 335, 338, 339, 345, 350, 356, 363, 366, 369, 370, 372, 414, 417, 418, 422, 428, 452, 462, 491, 494, 499, 500, 509, 510, 511, 512, 514, 515, 519, 520, 527, 533, 534, 538, 539, 541, 562, 567, 580, 596, 597, 599, 600, 602, 603, 604, 606, 610, 611, 612, 613, 616, 617, 626, 627, 634, 663, 667, 686, 742, 744, 745, 747, 748, 751, 753, 754, 755, 756, 759, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 777, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 805, 806, 807, 808, 809, 810, 818, 824, 828, 835, 845, 846, 847, 848, 849, 852, 860, 871, 891, 899, 921, 931, 932, 933, 934, 939, 947, 957, 961, 962, 964, 965, 966, 972, 974, 980, 981, 983, 987], "3f": [4, 6, 8, 11, 14, 16, 20, 22, 24, 34, 36, 43, 44, 45, 53, 65, 67, 69, 78, 105, 106, 129, 133, 135, 136, 137, 139, 144, 150, 152, 153, 159, 163, 165, 171, 179, 181, 185, 194, 195, 197, 200, 210, 212, 233, 235, 236, 238, 241, 243, 246, 253, 268, 291, 310, 311, 312, 939, 962], "std": [4, 11, 12, 33, 42, 46, 50, 56, 61, 72, 74, 75, 86, 87, 88, 105, 107, 108, 118, 124, 144, 146, 147, 151, 159, 164, 188, 210, 233, 234, 235, 237, 238, 240, 243, 245, 249, 250, 290, 301, 311, 319, 350, 362, 366, 369, 465, 556, 559, 828, 838, 941, 965, 980, 984], "n": [4, 5, 7, 8, 10, 11, 14, 16, 18, 29, 30, 31, 33, 35, 36, 53, 64, 69, 73, 77, 83, 85, 88, 90, 93, 95, 96, 101, 102, 105, 109, 120, 128, 135, 139, 144, 152, 159, 175, 179, 180, 194, 196, 197, 199, 209, 210, 211, 213, 221, 223, 224, 233, 235, 238, 240, 241, 242, 244, 245, 253, 258, 271, 275, 277, 278, 282, 285, 288, 306, 318, 323, 331, 334, 335, 337, 341, 343, 346, 350, 353, 359, 360, 362, 365, 366, 367, 368, 369, 370, 372, 373, 395, 396, 397, 398, 400, 419, 421, 424, 428, 439, 465, 466, 467, 468, 473, 478, 488, 490, 491, 497, 507, 508, 509, 510, 513, 514, 515, 516, 538, 539, 540, 541, 557, 558, 564, 577, 599, 621, 629, 642, 646, 649, 656, 657, 704, 751, 754, 756, 761, 762, 765, 784, 788, 789, 793, 813, 839, 841, 855, 856, 857, 858, 882, 887, 888, 906, 910, 911, 920, 923, 925, 927, 928, 931, 932, 933, 934, 935, 937, 938, 941, 943, 945, 946, 947, 957, 964, 966, 972, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986], "quit": [4, 49, 52, 78, 102, 123, 133, 151, 152, 177, 197, 243, 283, 310, 323, 342, 349, 362, 370, 926, 928, 933, 955, 980], "good": [4, 9, 23, 25, 36, 40, 42, 45, 48, 49, 53, 68, 74, 78, 95, 107, 110, 111, 136, 140, 146, 151, 168, 179, 180, 185, 194, 204, 206, 210, 215, 222, 224, 229, 235, 241, 250, 271, 278, 282, 287, 292, 298, 311, 319, 323, 324, 325, 336, 338, 339, 340, 343, 348, 350, 356, 359, 360, 362, 364, 366, 367, 369, 370, 371, 372, 388, 390, 395, 484, 509, 511, 512, 540, 580, 590, 597, 598, 606, 608, 609, 611, 619, 630, 640, 644, 672, 680, 691, 713, 773, 841, 884, 920, 926, 927, 928, 931, 932, 934, 935, 936, 938, 939, 941, 945, 946, 947, 952, 955, 957, 961, 964, 966, 978], "trial": [4, 240, 397, 399, 410, 621, 744, 745, 927, 978], "without": [4, 5, 13, 22, 32, 38, 51, 62, 69, 90, 110, 113, 115, 118, 129, 133, 142, 148, 150, 151, 152, 168, 187, 206, 210, 213, 216, 218, 229, 236, 240, 242, 254, 273, 274, 278, 280, 306, 311, 325, 332, 333, 335, 337, 338, 339, 341, 342, 343, 346, 348, 349, 350, 356, 362, 363, 367, 369, 370, 371, 372, 385, 390, 392, 408, 419, 424, 446, 454, 465, 482, 484, 505, 506, 513, 529, 530, 561, 577, 584, 589, 609, 642, 650, 730, 749, 750, 751, 758, 760, 773, 774, 790, 797, 801, 807, 808, 811, 814, 817, 818, 820, 824, 825, 826, 828, 832, 847, 863, 899, 900, 920, 921, 925, 927, 928, 931, 934, 937, 941, 945, 946, 947, 951, 952, 957, 958, 966, 969, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 987], "tune": [4, 40, 65, 90, 132, 135, 146, 152, 168, 184, 196, 203, 229, 240, 255, 274, 298, 310, 319, 323, 324, 325, 349, 350, 357, 361, 362, 366, 369, 371, 372, 402, 412, 509, 510, 544, 563, 564, 565, 567, 569, 570, 572, 573, 575, 593, 609, 640, 644, 804, 925, 926, 927, 928, 930, 931, 934, 935, 937, 945, 958, 968, 972, 986], "just": [4, 28, 78, 85, 108, 133, 169, 176, 200, 211, 235, 242, 246, 253, 268, 298, 319, 332, 336, 337, 338, 339, 341, 342, 345, 348, 349, 350, 359, 362, 363, 366, 369, 371, 372, 374, 418, 483, 492, 496, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 529, 534, 560, 561, 596, 602, 607, 608, 610, 612, 616, 617, 618, 626, 627, 628, 797, 805, 806, 920, 927, 930, 931, 932, 935, 939, 941, 945, 952, 964, 972, 976, 978, 980, 984], "had": [4, 9, 43, 111, 140, 273, 283, 319, 337, 338, 370, 373, 395, 921, 931, 955, 957, 972, 973, 979, 980, 981, 982, 983, 987], "explicit": [4, 148, 152, 156, 205, 323, 324, 325, 336, 338, 348, 350, 351, 363, 370, 376, 422, 449, 451, 452, 491, 501, 502, 588, 589, 591, 626, 746, 747, 754, 792, 800, 808, 847, 852, 895, 899, 923, 925, 927, 931, 941, 947, 951, 972, 976, 981, 982, 985], "them": [4, 5, 8, 29, 35, 36, 45, 49, 51, 55, 60, 61, 64, 65, 78, 85, 87, 90, 98, 99, 100, 114, 128, 133, 135, 146, 147, 151, 152, 153, 156, 158, 174, 180, 181, 197, 210, 216, 233, 235, 236, 238, 244, 255, 273, 278, 283, 291, 298, 312, 318, 323, 325, 332, 335, 337, 338, 339, 340, 341, 345, 348, 350, 351, 352, 356, 360, 361, 362, 363, 366, 367, 369, 370, 372, 395, 397, 399, 400, 407, 414, 417, 443, 444, 458, 496, 517, 518, 519, 520, 557, 558, 566, 570, 571, 574, 582, 589, 614, 642, 717, 720, 723, 727, 728, 729, 730, 738, 746, 760, 767, 773, 812, 822, 826, 828, 837, 838, 844, 855, 856, 897, 920, 921, 927, 930, 931, 932, 934, 935, 936, 941, 946, 947, 950, 951, 954, 955, 957, 964, 965, 966, 972, 973, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988], "But": [4, 9, 49, 150, 180, 181, 235, 253, 273, 337, 348, 362, 365, 368, 369, 412, 695, 855, 856, 920, 931, 946, 952], "much": [4, 6, 7, 9, 18, 23, 35, 36, 73, 75, 83, 88, 95, 104, 111, 112, 118, 119, 120, 135, 146, 147, 151, 152, 153, 154, 156, 176, 177, 181, 210, 235, 237, 238, 241, 246, 270, 274, 278, 282, 283, 285, 298, 303, 310, 311, 319, 323, 325, 332, 337, 338, 339, 342, 345, 348, 349, 353, 361, 364, 365, 366, 367, 368, 369, 370, 371, 397, 398, 446, 484, 485, 486, 488, 509, 510, 511, 512, 608, 609, 616, 618, 626, 627, 628, 642, 728, 729, 749, 750, 764, 823, 840, 847, 920, 923, 926, 927, 928, 930, 931, 932, 934, 935, 937, 939, 943, 944, 946, 947, 952, 955, 961, 962, 964, 965, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988], "monoton": [4, 23, 97, 148, 152, 197, 209, 281, 360, 511, 512, 585, 586, 644, 656, 824, 835, 849, 852, 928, 932, 941, 946, 979, 983, 987], "relationship": [4, 100, 141, 150, 151, 158, 179, 181, 182, 242, 274, 350, 362, 364, 366, 372, 412, 586, 664, 928, 931, 933, 934, 938, 939, 964, 977], "case": [4, 7, 8, 23, 25, 33, 45, 48, 52, 56, 61, 65, 66, 74, 78, 90, 93, 102, 104, 111, 112, 118, 130, 132, 133, 135, 142, 151, 152, 165, 168, 170, 179, 180, 181, 184, 187, 193, 195, 196, 197, 206, 210, 211, 212, 216, 226, 229, 232, 234, 235, 236, 238, 241, 242, 244, 253, 260, 270, 273, 275, 278, 280, 283, 310, 311, 312, 318, 319, 323, 324, 325, 331, 332, 335, 337, 338, 339, 341, 342, 343, 344, 346, 348, 349, 350, 351, 353, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 388, 391, 394, 395, 397, 401, 403, 413, 414, 417, 424, 446, 458, 459, 465, 489, 491, 492, 493, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 531, 532, 538, 541, 543, 544, 547, 552, 556, 559, 560, 561, 575, 577, 578, 580, 582, 597, 598, 603, 606, 607, 608, 609, 611, 613, 616, 618, 619, 622, 624, 625, 626, 630, 632, 633, 634, 635, 636, 637, 649, 653, 658, 659, 662, 668, 670, 671, 672, 675, 677, 678, 683, 684, 687, 691, 692, 694, 695, 697, 699, 702, 703, 705, 712, 727, 730, 732, 734, 737, 741, 743, 745, 746, 749, 750, 752, 760, 764, 768, 769, 770, 771, 772, 773, 775, 777, 785, 788, 789, 790, 791, 792, 794, 796, 797, 798, 799, 800, 808, 815, 817, 818, 821, 822, 823, 826, 827, 828, 831, 837, 838, 839, 840, 847, 849, 852, 855, 856, 862, 863, 873, 884, 885, 899, 920, 921, 923, 925, 926, 928, 929, 930, 932, 933, 934, 935, 937, 938, 941, 945, 946, 947, 951, 952, 954, 955, 957, 966, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "usual": [4, 36, 71, 72, 74, 110, 111, 113, 118, 150, 152, 165, 179, 180, 229, 232, 235, 244, 245, 274, 283, 298, 319, 323, 324, 335, 337, 339, 345, 348, 349, 350, 359, 362, 363, 366, 367, 369, 370, 371, 400, 406, 488, 490, 492, 497, 509, 510, 557, 558, 580, 590, 608, 609, 616, 618, 626, 627, 628, 642, 675, 707, 752, 772, 776, 847, 884, 920, 921, 923, 926, 927, 928, 930, 931, 932, 935, 936, 937, 938, 941, 945, 946, 947, 957, 963, 964, 987], "hot": [4, 65, 104, 106, 118, 151, 179, 244, 274, 275, 282, 298, 350, 369, 370, 501, 516, 531, 598, 608, 609, 619, 630, 811, 813, 815, 816, 819, 821, 822, 927, 941, 980, 986, 987], "For": [4, 8, 9, 12, 13, 18, 25, 29, 33, 36, 40, 42, 44, 45, 49, 52, 53, 55, 62, 67, 73, 78, 82, 86, 102, 104, 106, 111, 112, 114, 116, 129, 130, 133, 135, 137, 142, 146, 147, 151, 152, 167, 168, 179, 180, 183, 184, 187, 196, 197, 199, 201, 204, 206, 207, 209, 210, 211, 219, 226, 232, 235, 236, 242, 250, 252, 253, 263, 268, 270, 271, 275, 277, 278, 280, 281, 282, 283, 284, 285, 290, 292, 298, 300, 306, 310, 311, 312, 314, 315, 318, 319, 323, 325, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 353, 356, 358, 359, 360, 361, 362, 363, 366, 367, 369, 370, 371, 372, 373, 378, 383, 388, 391, 393, 394, 395, 396, 397, 399, 400, 401, 404, 406, 407, 408, 410, 411, 412, 414, 415, 416, 418, 422, 424, 432, 433, 434, 435, 439, 446, 448, 453, 464, 465, 473, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 500, 501, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 531, 533, 534, 535, 536, 538, 539, 541, 542, 543, 544, 547, 552, 557, 558, 559, 560, 561, 564, 569, 572, 573, 577, 578, 579, 580, 581, 582, 583, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 637, 638, 639, 642, 643, 645, 649, 651, 654, 656, 657, 678, 679, 687, 690, 691, 712, 718, 727, 732, 733, 736, 737, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 760, 768, 769, 770, 771, 772, 773, 775, 777, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 808, 814, 817, 818, 820, 821, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 867, 873, 894, 915, 920, 921, 923, 924, 925, 926, 927, 928, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 945, 946, 947, 950, 954, 955, 957, 964, 965, 966, 972, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "consist": [4, 7, 24, 29, 33, 51, 52, 64, 73, 81, 83, 85, 108, 114, 121, 133, 138, 140, 143, 147, 179, 197, 212, 241, 244, 270, 278, 280, 283, 306, 311, 319, 323, 330, 332, 334, 337, 339, 343, 344, 345, 346, 349, 350, 351, 360, 362, 364, 368, 369, 370, 372, 380, 381, 383, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 440, 447, 481, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 504, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 541, 561, 577, 578, 579, 580, 585, 588, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 622, 623, 624, 627, 628, 629, 637, 638, 639, 640, 641, 649, 650, 684, 744, 745, 753, 776, 777, 778, 780, 781, 782, 783, 791, 792, 794, 796, 799, 800, 806, 811, 812, 813, 815, 819, 820, 823, 824, 826, 827, 839, 840, 843, 847, 848, 850, 851, 853, 856, 858, 867, 869, 890, 902, 905, 920, 923, 924, 925, 927, 928, 930, 931, 932, 934, 935, 941, 944, 946, 947, 950, 951, 952, 955, 957, 964, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988], "scale": [4, 5, 12, 23, 25, 33, 36, 39, 42, 43, 51, 53, 56, 65, 66, 72, 75, 78, 87, 90, 91, 115, 133, 135, 136, 137, 140, 141, 142, 148, 152, 156, 159, 160, 167, 179, 181, 193, 194, 195, 197, 198, 201, 206, 212, 226, 232, 235, 236, 237, 242, 269, 270, 271, 272, 273, 281, 284, 292, 293, 295, 298, 319, 322, 323, 329, 330, 331, 334, 337, 342, 346, 348, 349, 350, 361, 362, 363, 367, 369, 371, 372, 397, 400, 401, 407, 414, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 451, 460, 464, 465, 474, 484, 488, 490, 491, 497, 499, 500, 511, 512, 532, 540, 541, 547, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 582, 591, 594, 595, 596, 597, 599, 602, 608, 609, 610, 611, 612, 622, 624, 626, 627, 628, 631, 637, 638, 639, 640, 642, 644, 649, 653, 666, 690, 696, 706, 708, 718, 724, 726, 752, 760, 763, 774, 775, 776, 788, 789, 790, 805, 806, 809, 812, 817, 818, 820, 823, 825, 826, 828, 832, 833, 834, 836, 837, 839, 840, 847, 848, 849, 850, 851, 852, 853, 907, 908, 909, 920, 923, 924, 927, 931, 932, 933, 934, 935, 939, 945, 946, 952, 955, 957, 964, 965, 967, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987], "same": [4, 7, 8, 15, 24, 31, 33, 36, 40, 49, 52, 53, 59, 65, 66, 83, 85, 87, 90, 93, 95, 100, 102, 105, 108, 109, 111, 112, 116, 133, 135, 151, 152, 154, 165, 167, 168, 173, 179, 180, 181, 187, 197, 215, 216, 226, 230, 231, 232, 233, 235, 236, 238, 240, 241, 243, 248, 253, 258, 270, 273, 274, 276, 278, 280, 282, 290, 298, 306, 310, 311, 312, 318, 319, 323, 324, 325, 331, 332, 334, 336, 337, 339, 341, 343, 346, 348, 349, 350, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 385, 389, 390, 400, 406, 415, 419, 420, 421, 422, 423, 424, 425, 426, 428, 443, 445, 446, 448, 454, 458, 459, 481, 482, 486, 487, 488, 489, 490, 493, 497, 499, 501, 502, 503, 504, 507, 509, 510, 511, 512, 514, 515, 517, 518, 539, 540, 552, 553, 556, 560, 561, 563, 572, 577, 578, 579, 582, 583, 596, 599, 602, 603, 605, 608, 609, 613, 616, 617, 618, 622, 623, 624, 625, 626, 627, 628, 634, 637, 649, 654, 655, 662, 663, 665, 667, 675, 680, 681, 685, 704, 705, 706, 727, 728, 729, 735, 737, 739, 741, 742, 744, 745, 746, 747, 749, 750, 752, 754, 755, 760, 764, 765, 769, 770, 771, 772, 773, 774, 775, 790, 791, 792, 796, 798, 799, 800, 811, 812, 813, 817, 818, 820, 822, 823, 824, 825, 826, 827, 828, 829, 836, 847, 848, 855, 857, 869, 873, 884, 892, 897, 902, 905, 906, 916, 920, 921, 923, 925, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 941, 945, 946, 947, 952, 961, 966, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "minmaxscal": [4, 5, 66, 129, 156, 200, 269, 282, 325, 363, 414, 833, 921, 941, 974, 977, 980, 982, 983, 984, 988], "although": [4, 9, 23, 105, 118, 150, 176, 197, 206, 223, 252, 319, 325, 339, 350, 362, 363, 367, 370, 446, 763, 766, 819, 930, 932, 933, 934, 937, 947, 957, 964, 965, 966, 972, 980, 987], "doe": [4, 7, 8, 9, 12, 22, 23, 25, 28, 36, 42, 49, 52, 64, 66, 67, 78, 96, 104, 107, 113, 118, 133, 141, 151, 152, 176, 179, 185, 197, 199, 200, 201, 204, 206, 209, 210, 211, 213, 223, 224, 230, 235, 237, 238, 242, 244, 245, 252, 253, 266, 273, 275, 277, 283, 284, 290, 291, 296, 298, 306, 308, 310, 311, 312, 323, 331, 335, 337, 338, 339, 341, 345, 349, 350, 356, 360, 361, 362, 363, 366, 367, 369, 370, 371, 372, 385, 391, 393, 397, 399, 400, 404, 406, 417, 423, 429, 437, 449, 453, 458, 477, 485, 487, 488, 489, 491, 494, 496, 499, 500, 507, 508, 509, 510, 511, 512, 514, 515, 531, 532, 533, 538, 539, 541, 543, 544, 547, 552, 556, 560, 582, 588, 599, 600, 601, 604, 605, 606, 609, 621, 632, 633, 648, 650, 652, 657, 677, 678, 679, 683, 685, 687, 692, 695, 727, 732, 733, 736, 737, 741, 746, 749, 750, 760, 805, 809, 810, 811, 813, 815, 817, 820, 821, 822, 825, 828, 836, 839, 840, 844, 847, 848, 855, 856, 857, 858, 862, 867, 871, 884, 887, 888, 897, 899, 915, 920, 921, 923, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 937, 939, 941, 945, 946, 947, 966, 972, 973, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988], "result": [4, 5, 6, 9, 13, 18, 22, 23, 24, 25, 27, 29, 33, 36, 38, 39, 40, 41, 42, 44, 49, 50, 55, 57, 61, 65, 67, 69, 74, 78, 85, 88, 90, 92, 96, 102, 103, 104, 105, 108, 111, 112, 114, 116, 117, 126, 132, 133, 135, 137, 139, 143, 146, 151, 152, 153, 154, 159, 164, 165, 168, 169, 174, 180, 181, 183, 187, 193, 194, 197, 199, 200, 203, 206, 209, 211, 216, 221, 226, 227, 229, 230, 233, 235, 236, 238, 241, 242, 243, 244, 246, 247, 250, 253, 255, 259, 268, 269, 270, 273, 274, 275, 278, 280, 282, 284, 285, 287, 290, 292, 298, 302, 303, 306, 310, 312, 316, 317, 323, 324, 325, 331, 332, 334, 337, 339, 341, 342, 343, 345, 348, 349, 350, 351, 356, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 385, 391, 392, 394, 396, 397, 400, 401, 402, 403, 404, 405, 407, 409, 412, 414, 417, 419, 420, 421, 422, 423, 424, 425, 426, 429, 439, 458, 459, 461, 463, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 529, 530, 531, 532, 534, 538, 539, 541, 557, 558, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 580, 581, 582, 584, 586, 590, 593, 602, 603, 608, 614, 615, 616, 617, 626, 627, 628, 636, 639, 640, 641, 642, 643, 644, 645, 658, 660, 662, 667, 674, 675, 677, 678, 679, 680, 681, 685, 686, 687, 703, 705, 706, 713, 720, 723, 727, 728, 729, 730, 732, 733, 734, 736, 740, 741, 744, 745, 746, 748, 749, 750, 751, 756, 760, 761, 762, 763, 765, 766, 769, 775, 776, 777, 779, 780, 781, 782, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 810, 812, 813, 821, 822, 825, 826, 836, 840, 844, 847, 849, 852, 855, 856, 857, 858, 859, 860, 867, 868, 883, 884, 886, 890, 896, 902, 905, 921, 923, 925, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 941, 943, 945, 946, 947, 951, 952, 954, 957, 961, 962, 964, 965, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "becaus": [4, 5, 18, 23, 25, 36, 43, 46, 65, 75, 78, 104, 106, 111, 133, 136, 139, 142, 151, 152, 154, 159, 165, 172, 179, 185, 187, 197, 212, 222, 232, 235, 236, 241, 252, 253, 269, 270, 271, 273, 277, 278, 289, 298, 306, 310, 311, 312, 314, 319, 323, 324, 332, 339, 342, 345, 348, 349, 350, 356, 359, 360, 362, 366, 367, 368, 369, 370, 372, 375, 383, 397, 398, 411, 415, 425, 432, 433, 434, 484, 486, 502, 504, 506, 508, 510, 512, 515, 518, 520, 538, 541, 557, 558, 561, 582, 583, 585, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 622, 623, 626, 627, 628, 629, 630, 639, 649, 659, 662, 663, 671, 672, 673, 695, 712, 734, 737, 741, 746, 760, 772, 776, 781, 782, 791, 794, 796, 798, 799, 800, 806, 817, 818, 826, 828, 832, 833, 835, 836, 837, 838, 848, 850, 853, 856, 858, 895, 921, 923, 924, 925, 926, 927, 928, 929, 931, 932, 934, 936, 938, 941, 946, 947, 955, 965, 978, 979, 981, 982, 983, 984, 986], "compar": [4, 5, 18, 22, 23, 25, 32, 33, 39, 45, 50, 52, 53, 59, 66, 74, 76, 78, 88, 93, 95, 97, 99, 100, 102, 107, 108, 111, 116, 118, 133, 139, 146, 147, 148, 151, 153, 154, 157, 161, 163, 167, 168, 174, 176, 179, 182, 185, 187, 189, 196, 197, 199, 200, 203, 205, 208, 211, 216, 218, 223, 224, 228, 230, 232, 240, 242, 244, 246, 254, 258, 262, 263, 267, 272, 274, 278, 282, 310, 311, 312, 318, 319, 325, 332, 334, 337, 339, 359, 360, 362, 364, 365, 366, 367, 369, 371, 372, 391, 392, 393, 395, 396, 398, 399, 400, 402, 408, 413, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 440, 452, 454, 462, 464, 472, 474, 478, 481, 487, 501, 502, 511, 512, 513, 515, 521, 589, 594, 595, 603, 605, 607, 608, 613, 616, 618, 626, 627, 634, 645, 655, 662, 665, 680, 687, 692, 735, 745, 746, 760, 774, 781, 790, 794, 797, 801, 805, 808, 809, 816, 817, 818, 820, 823, 824, 825, 826, 828, 833, 836, 849, 851, 852, 920, 923, 924, 925, 927, 928, 930, 931, 932, 933, 934, 935, 937, 941, 942, 945, 946, 947, 950, 951, 964, 965, 972, 974, 979, 980, 985], "onehotencod": [4, 65, 104, 108, 118, 151, 152, 179, 197, 208, 217, 219, 281, 283, 331, 350, 363, 369, 416, 417, 516, 531, 532, 811, 815, 816, 819, 822, 941, 973, 976, 980, 981, 983, 984, 985, 986, 987, 988], "linear_model": [4, 7, 8, 10, 13, 23, 25, 27, 50, 65, 67, 69, 78, 104, 118, 120, 121, 123, 125, 132, 133, 135, 146, 148, 150, 151, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 206, 207, 208, 209, 214, 217, 219, 231, 238, 243, 244, 248, 249, 252, 271, 274, 275, 278, 280, 281, 282, 283, 284, 291, 310, 319, 323, 325, 326, 336, 337, 339, 343, 345, 346, 349, 350, 363, 369, 389, 415, 487, 489, 492, 493, 495, 496, 498, 517, 518, 519, 520, 547, 581, 582, 584, 585, 588, 590, 591, 592, 593, 650, 651, 737, 760, 769, 770, 771, 779, 780, 781, 782, 806, 823, 827, 847, 848, 851, 854, 879, 923, 926, 927, 931, 932, 937, 939, 941, 945, 961, 962, 964, 966, 972, 973, 974, 975, 976, 977, 978, 979], "ridgecv": [4, 69, 118, 133, 151, 214, 350, 369, 518, 593, 622, 625, 927, 972, 974, 978, 979, 980, 981, 982, 983, 984, 985, 986], "numpi": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 77, 78, 81, 83, 85, 86, 87, 88, 89, 91, 92, 93, 95, 96, 98, 100, 101, 102, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 124, 126, 128, 129, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 204, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 315, 316, 317, 318, 319, 323, 330, 331, 332, 335, 337, 338, 339, 340, 341, 343, 345, 346, 348, 349, 350, 353, 355, 356, 358, 359, 362, 363, 366, 367, 368, 369, 370, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 410, 412, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 435, 440, 443, 444, 446, 453, 456, 458, 459, 481, 484, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 500, 501, 502, 519, 520, 531, 532, 538, 539, 541, 577, 578, 579, 580, 581, 582, 583, 593, 596, 597, 599, 602, 603, 607, 608, 609, 610, 611, 612, 613, 616, 618, 620, 622, 626, 627, 628, 634, 638, 641, 642, 643, 645, 649, 652, 653, 656, 657, 659, 662, 664, 675, 676, 683, 684, 687, 688, 703, 705, 722, 728, 730, 731, 732, 737, 738, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 771, 774, 776, 777, 780, 781, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 811, 812, 815, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 847, 849, 850, 852, 853, 855, 870, 882, 884, 888, 889, 890, 893, 894, 900, 902, 905, 918, 920, 921, 926, 927, 929, 931, 932, 934, 937, 941, 943, 946, 950, 952, 954, 957, 960, 961, 962, 964, 965, 966, 972, 975, 976, 978, 979, 980, 982, 984, 985, 986, 987, 988], "np": [4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 77, 78, 83, 86, 87, 88, 89, 91, 92, 93, 95, 96, 98, 100, 101, 102, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 124, 126, 128, 129, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 204, 206, 209, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 224, 225, 226, 227, 229, 230, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 315, 316, 317, 318, 319, 323, 331, 332, 337, 339, 342, 343, 346, 348, 350, 359, 362, 363, 366, 367, 368, 369, 370, 372, 375, 377, 380, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 410, 412, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 435, 446, 447, 458, 459, 470, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 500, 501, 502, 507, 508, 509, 510, 511, 513, 514, 515, 516, 519, 520, 531, 532, 535, 536, 538, 539, 543, 544, 547, 556, 559, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 618, 620, 621, 622, 624, 625, 626, 627, 628, 631, 632, 633, 634, 641, 642, 645, 652, 653, 656, 657, 659, 662, 664, 665, 675, 676, 683, 684, 687, 688, 690, 703, 705, 712, 718, 722, 727, 730, 731, 732, 737, 738, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 774, 775, 776, 777, 780, 781, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 796, 798, 799, 800, 804, 805, 812, 813, 815, 821, 822, 823, 824, 825, 827, 828, 835, 836, 839, 840, 842, 843, 844, 847, 849, 850, 852, 853, 855, 856, 857, 858, 865, 867, 868, 870, 872, 873, 882, 884, 889, 893, 894, 896, 900, 902, 905, 907, 908, 909, 920, 921, 926, 927, 929, 931, 932, 934, 935, 937, 941, 942, 943, 945, 946, 947, 957, 961, 962, 964, 965, 966, 973, 975, 978, 980, 981, 983, 984, 985, 986, 987], "one_hot_encod": [4, 108], "handle_unknown": [4, 65, 104, 108, 118, 152, 153, 208, 217, 219, 281, 284, 821, 822, 941, 976, 980, 984, 985], "ignor": [4, 6, 8, 16, 40, 45, 57, 65, 104, 108, 115, 118, 152, 167, 179, 194, 208, 217, 219, 227, 269, 270, 278, 281, 284, 311, 337, 339, 341, 343, 350, 353, 362, 363, 369, 370, 380, 381, 385, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 411, 414, 417, 419, 420, 421, 422, 423, 424, 425, 426, 433, 434, 438, 453, 458, 459, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 501, 507, 508, 509, 510, 513, 514, 515, 516, 529, 531, 532, 533, 538, 539, 540, 541, 552, 553, 577, 578, 579, 580, 582, 583, 585, 589, 593, 599, 600, 601, 604, 605, 606, 608, 614, 615, 626, 627, 628, 638, 639, 640, 641, 642, 657, 663, 664, 675, 678, 679, 687, 704, 705, 712, 718, 723, 727, 732, 733, 736, 737, 744, 745, 747, 748, 749, 751, 753, 754, 755, 756, 759, 761, 762, 763, 764, 765, 766, 767, 792, 793, 794, 796, 797, 800, 807, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 847, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 881, 906, 927, 928, 931, 933, 937, 941, 946, 962, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987], "sparse_output": [4, 108, 219, 284, 516, 815, 819, 821, 831, 941, 987], "alpha": [4, 5, 7, 8, 10, 12, 13, 15, 16, 22, 24, 28, 33, 36, 38, 41, 48, 51, 55, 60, 69, 75, 78, 85, 87, 88, 90, 91, 92, 94, 95, 99, 101, 102, 107, 111, 114, 115, 117, 118, 119, 133, 135, 138, 140, 141, 142, 143, 144, 146, 147, 151, 158, 159, 160, 161, 163, 164, 165, 167, 168, 173, 174, 176, 177, 179, 180, 181, 183, 184, 188, 191, 192, 197, 199, 200, 203, 211, 212, 218, 221, 235, 236, 237, 238, 239, 242, 243, 245, 247, 248, 250, 252, 253, 256, 258, 261, 263, 268, 270, 273, 274, 275, 276, 278, 281, 283, 284, 289, 291, 295, 296, 299, 300, 303, 307, 308, 310, 323, 332, 339, 343, 348, 364, 365, 367, 369, 371, 372, 374, 421, 422, 428, 477, 481, 483, 485, 486, 487, 488, 489, 490, 492, 493, 495, 496, 497, 498, 510, 545, 546, 548, 561, 563, 565, 566, 573, 581, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 613, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 637, 672, 697, 783, 784, 785, 787, 805, 806, 843, 855, 856, 857, 858, 920, 926, 927, 931, 933, 935, 939, 944, 945, 946, 947, 961, 964, 966, 969, 972, 974, 975, 976, 977, 979, 980, 984, 985, 986, 987], "logspac": [4, 12, 67, 71, 93, 123, 124, 133, 136, 141, 151, 172, 183, 184, 210, 212, 225, 236, 248, 250, 257, 268, 275, 278, 298, 306, 920, 926, 927, 961, 962, 964], "6": [4, 9, 10, 11, 12, 15, 24, 28, 36, 40, 42, 45, 46, 48, 51, 52, 55, 56, 57, 58, 59, 60, 62, 67, 69, 71, 72, 73, 75, 81, 85, 87, 95, 100, 112, 115, 117, 123, 128, 133, 138, 142, 143, 146, 147, 151, 152, 156, 158, 159, 172, 177, 179, 180, 181, 183, 193, 197, 199, 200, 203, 206, 209, 210, 213, 216, 217, 221, 222, 223, 224, 226, 227, 230, 234, 235, 236, 237, 238, 244, 245, 246, 247, 250, 252, 255, 258, 266, 268, 273, 275, 277, 278, 280, 283, 284, 292, 298, 299, 301, 303, 306, 308, 311, 312, 317, 319, 331, 332, 334, 335, 342, 343, 349, 353, 354, 355, 360, 362, 363, 366, 367, 369, 370, 371, 394, 398, 399, 400, 401, 402, 403, 412, 432, 433, 434, 435, 455, 474, 480, 488, 490, 491, 497, 513, 519, 520, 543, 544, 561, 564, 565, 575, 577, 578, 580, 594, 595, 620, 639, 643, 671, 677, 687, 694, 695, 699, 700, 702, 718, 734, 737, 744, 745, 747, 748, 753, 755, 756, 758, 763, 764, 767, 772, 774, 783, 784, 785, 787, 788, 789, 796, 798, 799, 800, 815, 816, 818, 821, 823, 826, 827, 831, 862, 884, 887, 889, 894, 920, 921, 925, 927, 928, 931, 941, 942, 945, 946, 949, 957, 961, 962, 964, 970, 973, 974, 975, 980, 985], "25": [4, 5, 6, 7, 9, 10, 11, 22, 24, 38, 41, 73, 77, 82, 91, 93, 95, 99, 103, 111, 129, 136, 146, 159, 169, 206, 223, 235, 266, 268, 273, 275, 287, 288, 310, 317, 319, 323, 343, 366, 369, 370, 395, 427, 451, 454, 520, 547, 628, 683, 743, 763, 774, 800, 818, 823, 825, 826, 836, 837, 839, 840, 926, 927, 931, 932, 934, 941, 962, 972, 974, 980, 983], "naive_linear_pipelin": 4, "14": [4, 11, 34, 45, 55, 57, 58, 61, 74, 90, 128, 152, 168, 201, 206, 211, 234, 240, 241, 249, 252, 253, 276, 277, 285, 305, 308, 324, 332, 334, 349, 353, 362, 366, 448, 460, 503, 504, 535, 536, 585, 593, 642, 760, 764, 814, 924, 927, 931, 941, 946, 949, 957, 970, 972, 973, 975, 976, 980, 985], "three": [4, 7, 24, 36, 37, 42, 53, 71, 81, 82, 99, 104, 105, 108, 110, 119, 120, 121, 130, 143, 151, 171, 176, 179, 181, 188, 190, 212, 221, 224, 281, 302, 324, 330, 334, 341, 353, 359, 362, 366, 367, 368, 370, 401, 412, 448, 659, 886, 924, 926, 927, 928, 931, 934, 941, 945, 946, 950, 957, 965, 972], "higher": [4, 52, 73, 88, 93, 102, 104, 111, 114, 135, 137, 142, 143, 151, 152, 153, 156, 179, 180, 197, 203, 204, 227, 229, 233, 235, 238, 249, 258, 278, 298, 311, 312, 319, 323, 332, 335, 339, 359, 362, 364, 369, 371, 372, 373, 395, 398, 399, 421, 428, 459, 482, 489, 493, 498, 503, 504, 507, 508, 509, 510, 511, 512, 514, 515, 516, 523, 538, 541, 557, 558, 569, 577, 581, 585, 587, 596, 597, 602, 603, 610, 611, 612, 613, 626, 628, 629, 654, 673, 677, 701, 734, 744, 746, 749, 750, 752, 760, 767, 772, 775, 794, 797, 823, 839, 840, 841, 849, 850, 851, 852, 853, 860, 923, 927, 928, 930, 931, 934, 938, 941, 945, 946, 964, 966, 973, 978, 980, 987], "suspect": 4, "origin": [4, 5, 13, 15, 19, 20, 27, 42, 43, 44, 47, 51, 53, 68, 69, 85, 87, 88, 95, 116, 129, 130, 135, 137, 139, 140, 146, 147, 152, 156, 167, 168, 199, 200, 201, 203, 204, 210, 211, 212, 227, 232, 238, 261, 271, 274, 278, 288, 304, 310, 312, 319, 332, 334, 336, 337, 339, 341, 342, 348, 350, 356, 359, 363, 366, 367, 369, 370, 372, 373, 374, 375, 385, 392, 394, 395, 396, 397, 400, 409, 413, 414, 415, 425, 432, 433, 434, 443, 444, 445, 451, 469, 481, 484, 485, 487, 488, 489, 490, 491, 493, 494, 503, 504, 505, 506, 509, 511, 512, 513, 515, 517, 518, 519, 520, 523, 526, 531, 534, 544, 557, 558, 564, 580, 582, 588, 591, 592, 593, 599, 621, 642, 646, 651, 677, 712, 718, 773, 794, 808, 812, 813, 816, 817, 821, 822, 824, 825, 826, 828, 836, 839, 840, 841, 844, 849, 852, 865, 867, 868, 872, 873, 902, 905, 924, 925, 927, 928, 930, 931, 934, 937, 942, 943, 944, 945, 948, 951, 955, 957, 966, 975, 976, 978, 980, 982, 984, 986], "mere": [4, 235, 350, 775, 945], "min": [4, 9, 10, 11, 12, 13, 23, 25, 28, 48, 53, 69, 81, 85, 88, 101, 107, 110, 111, 116, 126, 137, 139, 140, 141, 147, 161, 167, 168, 174, 181, 182, 185, 193, 200, 210, 211, 213, 252, 259, 260, 266, 268, 270, 273, 275, 276, 278, 292, 297, 304, 307, 346, 362, 365, 367, 432, 433, 434, 435, 462, 484, 485, 488, 490, 491, 499, 500, 513, 577, 581, 582, 604, 605, 606, 607, 632, 633, 654, 690, 706, 729, 749, 750, 797, 805, 806, 818, 827, 833, 884, 896, 927, 931, 934, 941, 978, 981, 983, 984, 987], "properli": [4, 23, 115, 140, 230, 280, 325, 335, 337, 341, 345, 353, 368, 847, 848, 849, 850, 851, 852, 853, 920, 975, 977, 979, 980, 982, 983, 984, 985, 986, 987], "automat": [4, 8, 12, 42, 58, 60, 65, 93, 123, 132, 158, 182, 221, 222, 233, 236, 273, 281, 285, 291, 300, 324, 326, 332, 335, 337, 339, 341, 345, 350, 353, 358, 362, 363, 364, 367, 369, 370, 371, 384, 400, 402, 406, 412, 414, 415, 417, 446, 449, 465, 491, 499, 501, 507, 511, 514, 538, 541, 544, 552, 593, 595, 596, 597, 602, 603, 608, 609, 610, 611, 612, 613, 616, 617, 618, 622, 624, 625, 626, 628, 631, 634, 637, 638, 641, 645, 748, 763, 766, 774, 784, 805, 806, 809, 810, 812, 821, 822, 839, 840, 847, 849, 852, 855, 857, 861, 873, 902, 905, 920, 922, 925, 930, 935, 941, 945, 947, 951, 952, 961, 972, 975, 976, 977, 983, 986, 987], "term": [4, 13, 14, 23, 29, 53, 90, 102, 108, 111, 140, 150, 167, 168, 179, 181, 183, 193, 196, 197, 233, 237, 253, 268, 283, 306, 310, 312, 325, 326, 337, 339, 341, 348, 356, 361, 362, 364, 366, 367, 369, 372, 394, 397, 399, 402, 409, 412, 474, 485, 488, 490, 494, 497, 499, 538, 539, 540, 541, 554, 557, 558, 582, 583, 590, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 618, 619, 620, 622, 623, 624, 625, 626, 628, 630, 637, 645, 805, 806, 823, 827, 829, 847, 848, 849, 850, 851, 852, 853, 920, 922, 925, 926, 927, 928, 931, 932, 933, 935, 936, 941, 945, 946, 957, 966, 980, 986, 987], "raw": [4, 12, 14, 33, 74, 87, 118, 140, 151, 156, 271, 289, 312, 323, 332, 345, 350, 360, 361, 362, 364, 367, 370, 419, 424, 451, 452, 453, 509, 510, 511, 513, 532, 538, 539, 540, 541, 584, 627, 640, 644, 655, 735, 794, 851, 928, 931, 935, 937, 938, 941, 944, 963, 965, 973, 977, 980, 983], "recogn": [4, 26, 78, 106, 148, 180, 283, 343, 362, 370, 452, 647, 663, 774, 852, 931, 957], "increas": [4, 7, 14, 24, 33, 39, 52, 53, 56, 69, 88, 100, 102, 107, 115, 129, 135, 140, 151, 152, 156, 159, 161, 170, 179, 180, 181, 183, 197, 204, 210, 223, 235, 236, 237, 242, 248, 268, 274, 275, 278, 282, 288, 298, 306, 311, 312, 314, 323, 324, 325, 336, 345, 346, 360, 362, 364, 367, 369, 370, 373, 391, 395, 402, 413, 428, 482, 486, 503, 504, 509, 510, 511, 512, 517, 518, 538, 541, 577, 585, 586, 587, 595, 600, 601, 604, 605, 606, 608, 609, 616, 618, 626, 627, 628, 632, 633, 635, 636, 642, 656, 657, 662, 731, 738, 749, 750, 777, 796, 798, 799, 800, 803, 805, 806, 847, 848, 884, 920, 922, 926, 927, 928, 930, 931, 934, 945, 946, 947, 955, 972, 974, 977, 981, 983, 984, 987], "8": [4, 5, 6, 7, 8, 9, 12, 13, 23, 24, 25, 28, 29, 31, 33, 39, 40, 41, 44, 46, 49, 55, 57, 59, 60, 64, 66, 69, 74, 77, 81, 82, 83, 85, 86, 89, 90, 94, 96, 102, 104, 108, 110, 111, 113, 116, 119, 120, 123, 132, 133, 136, 138, 141, 143, 144, 147, 150, 152, 154, 156, 158, 159, 164, 170, 173, 179, 180, 187, 189, 195, 197, 199, 200, 201, 203, 204, 207, 211, 212, 213, 215, 217, 218, 221, 222, 223, 225, 226, 227, 230, 231, 233, 234, 235, 236, 238, 239, 240, 242, 245, 246, 252, 255, 257, 261, 265, 268, 270, 271, 273, 275, 276, 277, 278, 280, 289, 291, 292, 295, 298, 302, 303, 305, 307, 310, 311, 312, 317, 319, 324, 331, 332, 334, 335, 337, 342, 343, 353, 354, 355, 360, 362, 366, 367, 369, 370, 371, 372, 390, 394, 395, 397, 399, 400, 402, 412, 419, 420, 421, 422, 423, 424, 425, 426, 433, 434, 435, 437, 440, 452, 453, 464, 481, 484, 488, 490, 493, 495, 497, 499, 500, 505, 506, 515, 520, 532, 538, 539, 540, 541, 578, 579, 598, 608, 620, 626, 639, 642, 643, 644, 645, 649, 652, 656, 657, 659, 665, 671, 676, 677, 678, 690, 694, 695, 699, 700, 702, 731, 732, 734, 737, 738, 742, 744, 747, 748, 753, 756, 763, 764, 767, 774, 777, 786, 788, 789, 795, 805, 806, 807, 813, 820, 849, 852, 882, 884, 888, 920, 921, 927, 928, 929, 931, 934, 939, 941, 945, 949, 955, 957, 961, 962, 963, 964, 965, 969, 970, 973, 974, 975, 979, 980, 985, 986, 988], "strong": [4, 148, 150, 151, 157, 172, 176, 183, 185, 212, 361, 367, 369, 372, 474, 599, 622, 924, 925, 927, 928, 930, 938, 946, 964], "similar": [4, 5, 7, 12, 16, 23, 24, 33, 45, 47, 52, 55, 69, 78, 85, 89, 111, 132, 135, 142, 150, 151, 152, 153, 179, 181, 193, 199, 201, 202, 203, 206, 212, 227, 232, 235, 238, 241, 242, 243, 252, 253, 273, 283, 297, 306, 311, 312, 319, 323, 329, 331, 333, 335, 336, 337, 339, 342, 343, 346, 348, 350, 356, 359, 360, 362, 365, 366, 367, 369, 370, 371, 372, 373, 391, 392, 394, 395, 396, 400, 402, 404, 405, 453, 458, 459, 486, 532, 539, 540, 541, 560, 627, 642, 645, 653, 655, 665, 669, 674, 677, 678, 680, 683, 687, 689, 704, 709, 710, 735, 739, 740, 743, 744, 745, 770, 775, 820, 840, 843, 847, 848, 849, 850, 868, 920, 923, 924, 926, 927, 928, 930, 932, 934, 935, 937, 938, 941, 943, 944, 945, 946, 947, 951, 952, 957, 965, 968, 972, 976, 977, 978, 980, 984, 985], "magnitud": [4, 95, 101, 136, 147, 151, 196, 240, 273, 278, 283, 323, 332, 343, 362, 369, 372, 563, 602, 654, 828, 927, 931, 935, 941, 945, 947, 974, 981], "18": [4, 8, 36, 40, 55, 57, 99, 144, 190, 206, 211, 235, 277, 310, 311, 312, 337, 343, 363, 366, 367, 370, 397, 409, 442, 450, 451, 452, 454, 455, 460, 485, 486, 488, 490, 491, 507, 508, 509, 510, 513, 514, 515, 516, 519, 521, 522, 523, 524, 525, 527, 528, 539, 544, 549, 550, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 596, 599, 608, 609, 621, 664, 668, 680, 683, 684, 690, 692, 744, 745, 767, 781, 804, 805, 806, 812, 818, 826, 827, 837, 847, 848, 855, 856, 857, 858, 859, 883, 884, 920, 929, 931, 941, 949, 970, 972, 973, 976, 977, 979, 980, 982, 983], "20": [4, 7, 8, 14, 15, 23, 24, 25, 30, 31, 35, 36, 39, 42, 43, 46, 50, 56, 62, 71, 75, 83, 85, 91, 95, 99, 101, 107, 111, 114, 118, 119, 121, 126, 128, 129, 130, 141, 150, 152, 153, 161, 168, 169, 171, 175, 176, 178, 179, 180, 183, 188, 191, 192, 193, 196, 202, 210, 215, 223, 225, 235, 236, 238, 239, 241, 246, 247, 249, 253, 257, 258, 259, 260, 261, 264, 277, 278, 281, 282, 283, 284, 287, 288, 291, 295, 297, 301, 303, 308, 311, 312, 316, 317, 330, 334, 337, 339, 341, 342, 343, 353, 362, 369, 370, 392, 397, 399, 414, 415, 419, 421, 422, 428, 438, 439, 440, 441, 442, 444, 446, 447, 450, 452, 454, 455, 462, 465, 466, 473, 481, 486, 487, 492, 495, 496, 498, 502, 505, 506, 509, 510, 511, 512, 513, 519, 520, 532, 539, 542, 544, 547, 549, 579, 580, 595, 599, 608, 616, 617, 618, 626, 628, 646, 654, 658, 663, 666, 674, 675, 688, 705, 706, 716, 739, 740, 744, 745, 746, 760, 770, 771, 772, 775, 777, 780, 781, 782, 785, 786, 793, 794, 805, 806, 807, 808, 810, 812, 813, 821, 822, 823, 824, 842, 843, 845, 846, 851, 859, 865, 867, 868, 920, 927, 931, 934, 937, 938, 941, 944, 949, 954, 955, 958, 964, 968, 970, 972, 978, 981, 984, 986, 987], "discret": [4, 42, 95, 97, 134, 148, 152, 179, 197, 272, 276, 325, 329, 332, 333, 341, 349, 350, 362, 367, 369, 370, 372, 389, 390, 398, 402, 410, 411, 412, 442, 464, 465, 470, 472, 503, 509, 521, 538, 539, 542, 545, 546, 549, 550, 557, 558, 560, 561, 562, 566, 567, 568, 607, 608, 691, 743, 746, 757, 774, 783, 784, 787, 809, 813, 821, 822, 825, 828, 836, 847, 852, 855, 856, 894, 920, 927, 928, 929, 931, 932, 934, 947, 951, 957, 968, 974, 977, 985, 986, 987], "manner": [4, 69, 85, 130, 152, 156, 223, 284, 285, 324, 337, 343, 362, 367, 369, 370, 659, 788, 789, 920, 931, 947, 975, 982], "uniqu": [4, 15, 22, 27, 38, 43, 44, 52, 53, 58, 62, 105, 106, 112, 113, 153, 194, 197, 223, 244, 262, 290, 310, 311, 312, 331, 339, 346, 350, 362, 363, 366, 369, 370, 391, 400, 404, 406, 414, 417, 446, 499, 500, 501, 503, 504, 507, 508, 509, 510, 511, 512, 514, 515, 516, 560, 583, 584, 585, 616, 618, 626, 647, 659, 703, 731, 746, 748, 760, 771, 776, 777, 780, 786, 795, 800, 805, 819, 821, 822, 831, 847, 849, 855, 856, 857, 858, 872, 884, 894, 895, 927, 932, 955, 964, 980, 983, 984, 986, 987, 988], "decid": [4, 11, 52, 55, 65, 227, 232, 235, 242, 332, 337, 351, 370, 372, 400, 407, 509, 510, 585, 596, 597, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 613, 621, 631, 634, 744, 790, 791, 792, 794, 796, 798, 799, 800, 811, 930, 937, 955, 985], "therebi": [4, 151, 366, 369, 923, 982], "assumpt": [4, 9, 23, 25, 32, 71, 72, 88, 140, 148, 150, 179, 206, 273, 343, 348, 349, 352, 360, 361, 362, 364, 366, 367, 370, 372, 397, 401, 403, 438, 453, 462, 482, 484, 491, 600, 604, 745, 746, 749, 750, 760, 785, 839, 840, 925, 927, 931, 932, 933, 934, 936, 937, 938, 941, 944, 947, 979, 985], "impli": [4, 135, 311, 312, 367, 369, 372, 424, 523, 532, 560, 561, 572, 684, 871, 927, 928, 966, 983], "give": [4, 12, 13, 22, 23, 35, 40, 45, 55, 57, 59, 65, 69, 87, 110, 135, 140, 144, 146, 151, 152, 168, 170, 176, 179, 180, 181, 206, 227, 232, 237, 244, 255, 259, 262, 271, 283, 284, 291, 323, 325, 332, 334, 336, 337, 339, 343, 345, 348, 349, 350, 351, 356, 359, 360, 361, 362, 363, 364, 367, 369, 370, 374, 385, 397, 399, 401, 409, 422, 446, 449, 453, 483, 488, 499, 500, 501, 502, 507, 508, 514, 515, 516, 543, 544, 547, 557, 558, 588, 597, 611, 615, 626, 670, 685, 688, 741, 746, 749, 750, 760, 769, 770, 771, 773, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 825, 826, 828, 836, 927, 931, 934, 935, 936, 938, 939, 941, 945, 946, 947, 951, 955, 957, 959, 964, 965, 966, 972, 976, 979, 980, 982, 983, 984, 986], "lot": [4, 75, 151, 332, 337, 338, 339, 345, 367, 369, 749, 750, 839, 840, 920, 943, 945, 946, 951, 952, 955, 965, 966, 972, 977, 979, 980, 981, 982, 984], "addit": [4, 5, 7, 12, 13, 14, 61, 65, 75, 85, 88, 99, 103, 105, 108, 109, 132, 140, 141, 142, 147, 151, 152, 158, 163, 168, 180, 181, 203, 216, 237, 244, 249, 252, 273, 281, 282, 289, 312, 316, 319, 323, 324, 329, 330, 331, 332, 333, 335, 336, 337, 339, 342, 343, 345, 348, 349, 351, 353, 356, 361, 362, 364, 366, 367, 370, 371, 372, 373, 384, 392, 393, 395, 396, 400, 407, 419, 424, 446, 453, 482, 484, 486, 487, 489, 491, 492, 493, 499, 503, 504, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 532, 533, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 561, 562, 569, 578, 580, 581, 585, 588, 589, 590, 591, 592, 593, 594, 595, 620, 637, 638, 642, 648, 649, 652, 691, 707, 708, 737, 744, 745, 752, 777, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 804, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 825, 826, 827, 828, 829, 839, 840, 847, 848, 878, 884, 899, 920, 925, 927, 931, 932, 934, 935, 938, 941, 943, 944, 945, 946, 947, 951, 957, 968, 972, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "level": [4, 9, 11, 12, 15, 25, 37, 49, 85, 104, 107, 126, 134, 139, 140, 142, 148, 151, 152, 190, 191, 192, 193, 194, 197, 206, 210, 211, 225, 235, 238, 244, 245, 259, 266, 296, 297, 299, 300, 302, 304, 311, 318, 323, 332, 334, 335, 337, 343, 350, 352, 353, 360, 367, 370, 376, 404, 443, 444, 453, 471, 481, 486, 487, 497, 511, 512, 517, 518, 561, 572, 575, 616, 617, 618, 626, 627, 628, 637, 640, 642, 644, 666, 672, 677, 734, 769, 770, 771, 773, 776, 777, 804, 805, 806, 860, 920, 927, 931, 932, 934, 939, 945, 947, 951, 952, 966, 975, 983, 986, 987], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "rate": [4, 98, 103, 108, 128, 152, 179, 186, 197, 210, 215, 232, 235, 242, 244, 245, 269, 270, 271, 325, 337, 362, 363, 367, 371, 416, 486, 503, 504, 509, 510, 511, 512, 542, 545, 546, 548, 549, 550, 556, 594, 595, 618, 626, 627, 628, 642, 648, 652, 676, 731, 738, 804, 805, 806, 841, 920, 927, 928, 931, 934, 935, 945, 947, 955, 976, 980, 981], "10": [4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 19, 23, 24, 25, 27, 28, 29, 31, 33, 35, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 66, 68, 71, 72, 73, 74, 75, 77, 78, 83, 87, 88, 89, 90, 91, 95, 96, 98, 99, 101, 102, 104, 105, 107, 109, 111, 112, 115, 116, 119, 121, 124, 126, 133, 136, 137, 139, 141, 142, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 163, 169, 173, 177, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 195, 196, 197, 200, 201, 206, 209, 210, 211, 212, 214, 215, 216, 218, 224, 225, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 243, 246, 249, 252, 258, 260, 268, 269, 270, 271, 273, 274, 276, 277, 278, 280, 281, 282, 283, 284, 287, 288, 289, 291, 296, 298, 300, 301, 302, 303, 305, 306, 308, 310, 311, 319, 323, 331, 332, 333, 334, 335, 337, 339, 342, 343, 348, 349, 350, 353, 354, 355, 359, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 375, 389, 394, 397, 399, 401, 402, 403, 409, 410, 412, 425, 442, 443, 450, 451, 452, 454, 460, 461, 462, 463, 466, 470, 471, 474, 478, 481, 485, 486, 487, 488, 489, 491, 492, 494, 496, 498, 502, 505, 506, 507, 508, 511, 512, 514, 515, 516, 517, 518, 520, 532, 543, 544, 549, 550, 561, 567, 569, 577, 580, 582, 584, 585, 590, 592, 593, 594, 599, 609, 614, 615, 616, 617, 619, 620, 622, 623, 625, 626, 627, 628, 635, 636, 641, 642, 655, 665, 675, 691, 705, 718, 744, 745, 746, 747, 748, 749, 750, 757, 760, 761, 762, 763, 764, 766, 767, 772, 774, 776, 777, 783, 784, 785, 787, 788, 789, 795, 804, 805, 806, 814, 818, 821, 822, 825, 836, 844, 850, 853, 855, 856, 860, 884, 888, 895, 899, 901, 917, 920, 921, 927, 928, 929, 931, 932, 934, 935, 937, 938, 941, 945, 946, 949, 957, 961, 962, 964, 965, 966, 969, 970, 973, 974, 975, 980, 982, 983, 984, 986, 987], "better": [4, 5, 9, 18, 22, 28, 46, 68, 69, 71, 72, 73, 74, 78, 81, 85, 88, 102, 110, 111, 118, 128, 139, 140, 146, 153, 159, 165, 168, 179, 180, 181, 187, 194, 196, 197, 203, 211, 212, 226, 229, 235, 237, 238, 241, 244, 245, 271, 277, 278, 284, 285, 298, 310, 311, 312, 314, 319, 323, 332, 336, 337, 338, 339, 341, 342, 343, 345, 350, 352, 356, 360, 362, 364, 366, 367, 368, 369, 370, 372, 399, 400, 488, 490, 497, 509, 510, 511, 512, 557, 558, 580, 621, 627, 642, 659, 674, 683, 688, 691, 712, 745, 773, 783, 784, 785, 786, 787, 788, 789, 794, 805, 806, 825, 826, 836, 839, 840, 847, 848, 899, 920, 921, 923, 924, 925, 927, 928, 930, 931, 933, 934, 935, 939, 941, 944, 945, 947, 952, 954, 955, 959, 961, 966, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "confirm": [4, 78, 102, 108, 111, 153, 179, 181, 238, 241, 244, 278, 312, 341, 920, 941, 980], "progress": [4, 7, 8, 85, 121, 147, 172, 258, 284, 334, 337, 341, 342, 351, 353, 358, 362, 509, 510, 642, 777, 779, 782, 797, 805, 806, 955, 964, 966, 972, 974, 981, 986], "veri": [4, 23, 25, 35, 36, 38, 40, 46, 48, 55, 57, 73, 74, 75, 77, 83, 88, 91, 111, 116, 123, 140, 146, 151, 152, 153, 168, 179, 180, 181, 184, 187, 197, 203, 206, 212, 221, 237, 238, 241, 242, 244, 245, 250, 253, 270, 273, 283, 287, 290, 298, 308, 312, 319, 323, 332, 336, 337, 339, 342, 343, 345, 348, 349, 350, 356, 360, 362, 364, 366, 367, 368, 369, 370, 371, 372, 393, 397, 402, 412, 421, 422, 428, 450, 454, 460, 507, 508, 511, 512, 514, 515, 517, 518, 539, 540, 572, 600, 601, 604, 605, 606, 614, 632, 633, 635, 641, 642, 645, 655, 692, 695, 739, 744, 746, 754, 756, 760, 763, 766, 788, 789, 813, 817, 818, 819, 828, 839, 840, 849, 852, 855, 856, 857, 858, 884, 920, 923, 924, 926, 927, 928, 929, 930, 931, 934, 935, 937, 938, 939, 941, 943, 944, 945, 946, 947, 948, 950, 951, 952, 954, 955, 964, 965, 972, 977, 978, 980, 983, 985, 987], "new": [4, 7, 8, 10, 46, 51, 53, 55, 64, 65, 93, 98, 101, 103, 104, 111, 117, 118, 130, 133, 135, 141, 147, 153, 154, 179, 185, 193, 206, 234, 237, 242, 257, 259, 281, 284, 288, 297, 319, 324, 325, 331, 332, 334, 335, 336, 339, 340, 341, 343, 345, 346, 349, 350, 351, 353, 362, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 450, 451, 452, 454, 455, 458, 459, 460, 462, 473, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 524, 531, 532, 533, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 654, 658, 663, 664, 668, 671, 672, 673, 674, 676, 677, 680, 683, 688, 689, 690, 692, 695, 702, 703, 706, 710, 715, 716, 718, 727, 734, 737, 738, 744, 745, 746, 749, 750, 752, 759, 760, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 835, 836, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 865, 867, 868, 870, 878, 879, 883, 884, 894, 897, 899, 901, 906, 912, 918, 920, 921, 923, 927, 931, 932, 934, 935, 936, 937, 941, 943, 944, 945, 946, 952, 955, 957, 958, 961, 964, 966, 970, 974, 980, 981, 982, 983, 984, 985, 986, 987, 988], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 332, 337, 928, 950], "1440": 4, "caus": [4, 23, 25, 111, 136, 151, 177, 179, 184, 197, 312, 319, 335, 342, 360, 362, 367, 368, 370, 372, 394, 397, 399, 409, 459, 482, 532, 539, 560, 561, 783, 784, 785, 787, 812, 821, 823, 826, 827, 867, 868, 920, 921, 927, 931, 939, 941, 944, 952, 957, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985], "signific": [4, 111, 129, 148, 197, 228, 235, 252, 253, 319, 331, 332, 348, 362, 365, 366, 369, 454, 482, 484, 499, 500, 577, 608, 609, 616, 618, 626, 627, 628, 765, 773, 847, 849, 850, 851, 852, 853, 930, 931, 934, 972, 974, 975, 976, 980], "overfit": [4, 104, 111, 148, 152, 153, 158, 206, 223, 228, 230, 236, 240, 250, 268, 274, 275, 277, 278, 298, 314, 316, 317, 332, 350, 360, 366, 369, 388, 438, 439, 517, 518, 607, 746, 749, 750, 760, 770, 771, 805, 806, 808, 823, 827, 926, 935, 937, 939, 947, 955, 964, 975], "avoid": [4, 7, 12, 40, 52, 57, 66, 104, 151, 152, 181, 188, 197, 202, 219, 230, 236, 240, 256, 261, 263, 264, 277, 278, 294, 295, 311, 324, 335, 337, 338, 339, 341, 342, 343, 350, 351, 353, 356, 360, 362, 364, 366, 369, 370, 373, 391, 393, 395, 402, 412, 418, 443, 444, 445, 449, 458, 459, 484, 489, 493, 496, 535, 536, 584, 596, 597, 602, 603, 610, 611, 612, 613, 631, 634, 639, 641, 643, 645, 662, 746, 747, 751, 757, 760, 769, 770, 771, 808, 811, 817, 818, 820, 825, 826, 827, 828, 830, 832, 833, 834, 836, 837, 838, 840, 845, 884, 925, 928, 930, 931, 934, 935, 937, 939, 941, 946, 947, 952, 966, 968, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "kbinsdiscret": [4, 49, 148, 179, 197, 272, 275, 285, 462, 607, 811, 827, 856, 941, 980, 984, 985, 986, 988], "re": [4, 8, 13, 24, 51, 65, 108, 138, 150, 197, 222, 226, 238, 240, 244, 281, 312, 324, 337, 338, 341, 345, 349, 351, 366, 370, 419, 420, 421, 422, 423, 424, 425, 426, 505, 506, 511, 512, 513, 596, 602, 610, 612, 748, 763, 766, 855, 856, 857, 858, 927, 932, 934, 941, 946, 952, 955, 966, 972, 976, 977, 979, 981], "fine": [4, 33, 107, 195, 227, 233, 316, 317, 334, 341, 350, 370, 884, 934, 937, 952, 982], "grain": [4, 28, 33, 211, 227, 275, 343, 370, 952], "still": [4, 29, 40, 49, 52, 57, 75, 89, 106, 108, 111, 118, 135, 141, 150, 151, 153, 158, 179, 181, 197, 211, 238, 244, 273, 282, 283, 311, 319, 325, 331, 336, 337, 339, 341, 342, 343, 345, 348, 350, 362, 366, 369, 370, 373, 391, 395, 404, 424, 446, 577, 582, 585, 587, 667, 705, 727, 730, 739, 740, 749, 750, 763, 766, 826, 828, 847, 865, 920, 921, 925, 927, 930, 934, 937, 939, 946, 947, 950, 952, 955, 972, 974, 977, 978, 980, 981, 982, 985, 986, 987], "express": [4, 7, 12, 135, 140, 151, 235, 236, 282, 295, 312, 331, 332, 337, 338, 343, 362, 367, 370, 400, 406, 407, 538, 539, 541, 666, 746, 752, 760, 769, 770, 771, 772, 775, 795, 927, 931, 935, 941, 942, 947, 980], "advantag": [4, 5, 35, 52, 85, 90, 179, 180, 206, 222, 236, 284, 319, 350, 360, 366, 367, 370, 372, 392, 396, 410, 484, 539, 599, 624, 625, 712, 776, 777, 778, 808, 809, 847, 848, 849, 850, 851, 852, 853, 920, 923, 926, 927, 928, 931, 932, 934, 935, 941, 945, 946, 947, 975], "final": [4, 24, 36, 38, 64, 65, 73, 75, 78, 82, 90, 98, 100, 102, 104, 108, 109, 112, 118, 121, 130, 140, 147, 150, 152, 156, 158, 167, 168, 176, 179, 181, 196, 197, 200, 206, 219, 225, 233, 241, 253, 280, 281, 298, 323, 325, 335, 337, 338, 341, 349, 350, 359, 360, 362, 363, 366, 369, 370, 388, 393, 397, 398, 402, 409, 412, 414, 486, 505, 506, 517, 518, 520, 577, 597, 603, 609, 629, 640, 644, 669, 746, 776, 777, 808, 809, 844, 847, 920, 921, 927, 928, 931, 934, 937, 938, 941, 944, 955, 964, 977, 980, 981, 982, 983, 985], "observ": [4, 5, 7, 9, 11, 13, 15, 22, 25, 33, 36, 39, 49, 57, 65, 71, 73, 74, 75, 86, 87, 90, 93, 98, 102, 103, 105, 111, 114, 117, 125, 126, 133, 135, 138, 140, 141, 142, 144, 151, 152, 153, 158, 159, 174, 175, 177, 179, 180, 181, 183, 193, 197, 203, 204, 209, 210, 231, 235, 237, 238, 242, 253, 259, 266, 278, 290, 297, 298, 303, 306, 310, 311, 312, 316, 317, 332, 334, 350, 360, 362, 363, 364, 365, 366, 367, 368, 371, 372, 392, 394, 396, 397, 399, 409, 419, 420, 421, 422, 423, 424, 425, 426, 474, 482, 501, 502, 513, 560, 561, 596, 602, 607, 651, 666, 668, 707, 767, 786, 794, 827, 927, 930, 931, 935, 936, 937, 938, 944, 945, 946, 947, 954, 958, 960, 961, 963, 973, 985, 986, 987], "complet": [4, 33, 34, 35, 40, 45, 48, 53, 57, 78, 116, 128, 130, 133, 148, 153, 154, 185, 205, 206, 233, 278, 280, 311, 319, 332, 337, 341, 342, 345, 348, 363, 366, 367, 369, 370, 392, 396, 399, 402, 412, 413, 414, 417, 445, 486, 487, 488, 489, 494, 496, 508, 519, 520, 531, 537, 538, 539, 541, 577, 578, 579, 580, 599, 607, 621, 623, 654, 655, 665, 666, 667, 680, 685, 686, 706, 735, 742, 776, 779, 782, 791, 807, 808, 809, 810, 870, 916, 920, 925, 927, 931, 932, 934, 946, 947, 957, 966, 972, 975, 979, 980, 981, 982, 983, 984, 985], "induct": [4, 32, 111, 148, 350, 362, 369, 376, 392, 462, 514, 577, 842, 843, 891, 915, 927, 944, 974], "bia": [4, 25, 71, 97, 105, 106, 111, 148, 151, 153, 158, 159, 161, 183, 240, 268, 306, 319, 332, 339, 350, 360, 364, 368, 369, 372, 474, 506, 509, 510, 557, 558, 564, 592, 598, 599, 608, 609, 619, 620, 630, 805, 806, 821, 823, 827, 832, 833, 835, 836, 837, 838, 856, 926, 927, 930, 931, 935, 936, 939, 945, 964], "preserv": [4, 44, 90, 203, 210, 230, 339, 340, 361, 366, 367, 370, 531, 538, 539, 541, 596, 602, 646, 649, 723, 727, 764, 765, 766, 831, 867, 868, 921, 927, 928, 941, 943, 961, 972, 975, 976, 980, 981, 982, 983, 985, 986, 987, 988], "smooth": [4, 42, 43, 50, 140, 172, 180, 195, 298, 334, 351, 362, 368, 372, 398, 399, 487, 488, 489, 496, 507, 508, 509, 510, 514, 515, 516, 540, 541, 569, 572, 626, 783, 784, 785, 787, 825, 836, 855, 856, 857, 858, 927, 933, 941, 945, 946, 947, 966], "local": [4, 35, 52, 56, 85, 88, 115, 140, 141, 148, 152, 180, 198, 201, 203, 206, 215, 254, 316, 317, 324, 334, 335, 337, 341, 343, 345, 353, 362, 367, 369, 370, 372, 397, 402, 412, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 452, 488, 490, 494, 497, 499, 509, 510, 513, 516, 560, 561, 638, 639, 640, 641, 642, 643, 645, 646, 707, 708, 791, 794, 797, 799, 809, 818, 840, 843, 851, 897, 929, 930, 934, 935, 947, 965, 967, 968, 976, 980, 984, 987], "attempt": [4, 50, 152, 175, 185, 230, 310, 323, 336, 350, 362, 374, 400, 407, 418, 581, 638, 639, 643, 764, 790, 791, 792, 794, 796, 798, 799, 800, 826, 828, 845, 867, 868, 927, 928, 934, 947, 957, 979, 984], "each": [4, 7, 8, 10, 11, 12, 14, 16, 23, 24, 25, 29, 31, 33, 37, 39, 40, 43, 45, 49, 53, 55, 56, 64, 65, 67, 69, 77, 78, 80, 82, 83, 85, 86, 90, 93, 94, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 114, 116, 117, 118, 119, 120, 121, 129, 131, 133, 137, 139, 144, 146, 147, 150, 151, 152, 154, 156, 158, 165, 166, 168, 173, 177, 179, 180, 181, 183, 184, 187, 194, 197, 200, 206, 207, 210, 211, 212, 213, 216, 217, 219, 221, 224, 226, 229, 230, 231, 233, 235, 238, 240, 241, 244, 245, 252, 253, 256, 258, 262, 264, 266, 268, 269, 271, 273, 274, 275, 276, 278, 280, 282, 283, 284, 287, 288, 289, 292, 298, 304, 306, 311, 312, 314, 315, 318, 319, 323, 324, 325, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 343, 345, 346, 348, 349, 350, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 409, 410, 411, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 469, 472, 473, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 657, 658, 660, 663, 669, 674, 677, 678, 679, 687, 688, 694, 695, 697, 699, 700, 702, 703, 707, 708, 711, 712, 713, 714, 715, 717, 718, 719, 720, 722, 723, 725, 727, 728, 729, 730, 732, 733, 734, 736, 737, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 836, 837, 838, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 873, 878, 879, 884, 886, 887, 899, 907, 908, 909, 912, 921, 923, 925, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 955, 957, 961, 963, 964, 965, 966, 972, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "sine": [4, 135, 140, 141, 148, 173, 185, 220, 316, 333, 565, 744, 745, 930, 947], "cosin": [4, 36, 249, 253, 258, 329, 332, 350, 362, 367, 368, 392, 396, 400, 407, 485, 540, 541, 570, 646, 709, 710, 711, 714, 719, 720, 723, 727, 728, 729, 788, 789, 793, 820, 934, 947, 968, 982], "match": [4, 33, 41, 85, 88, 92, 148, 156, 157, 179, 201, 209, 312, 332, 335, 339, 341, 362, 367, 369, 370, 382, 399, 414, 416, 458, 459, 465, 476, 481, 487, 492, 498, 501, 517, 518, 522, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 577, 578, 579, 580, 608, 614, 615, 635, 636, 649, 653, 654, 655, 663, 665, 669, 683, 735, 788, 789, 793, 797, 811, 812, 813, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 847, 854, 860, 871, 899, 928, 930, 931, 933, 934, 953, 957, 966, 968, 972, 978, 979, 980, 982, 984, 985], "togeth": [4, 12, 47, 55, 65, 107, 118, 135, 141, 151, 160, 200, 203, 231, 284, 301, 315, 319, 339, 341, 348, 349, 350, 356, 362, 369, 370, 377, 401, 403, 517, 518, 639, 665, 746, 760, 808, 809, 927, 928, 932, 938, 941, 947, 948, 955, 958, 960, 978], "equival": [4, 14, 52, 108, 114, 132, 135, 140, 151, 197, 226, 244, 253, 278, 312, 319, 323, 335, 343, 346, 349, 350, 362, 363, 364, 365, 366, 367, 369, 371, 372, 392, 394, 395, 396, 397, 399, 400, 407, 419, 424, 459, 484, 491, 508, 511, 512, 513, 515, 538, 541, 563, 566, 569, 571, 574, 596, 597, 598, 602, 604, 608, 609, 616, 617, 618, 619, 622, 626, 627, 630, 633, 637, 638, 643, 658, 659, 672, 683, 690, 696, 697, 698, 710, 719, 728, 729, 744, 745, 749, 750, 754, 756, 779, 782, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 805, 811, 817, 818, 820, 823, 824, 825, 826, 828, 835, 837, 838, 871, 882, 917, 920, 925, 927, 928, 929, 931, 937, 941, 945, 946, 947, 980, 981, 982, 983, 985, 986], "importantli": [4, 13, 86, 152, 156, 273, 362], "jump": [4, 180, 273, 334, 337, 370, 827], "functiontransform": [4, 64, 104, 179, 197, 291, 415, 941, 977, 978, 980, 985, 986, 987], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 15, 16, 18, 22, 23, 25, 30, 31, 33, 36, 44, 49, 51, 56, 64, 69, 83, 91, 93, 95, 102, 104, 110, 111, 114, 118, 138, 141, 143, 147, 158, 159, 167, 168, 171, 179, 180, 187, 188, 189, 197, 215, 218, 219, 224, 226, 230, 231, 232, 233, 234, 235, 236, 238, 239, 242, 249, 253, 258, 263, 266, 271, 273, 275, 278, 280, 294, 298, 310, 312, 314, 318, 323, 330, 331, 332, 337, 338, 339, 343, 344, 346, 348, 350, 360, 361, 362, 363, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 890, 891, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 904, 905, 906, 912, 915, 916, 917, 918, 919, 921, 931, 934, 938, 939, 946, 947, 952, 957, 962, 964, 966, 969, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "lambda": [4, 7, 8, 10, 18, 51, 67, 110, 124, 159, 197, 235, 236, 277, 291, 358, 362, 367, 369, 370, 594, 595, 596, 597, 812, 824, 927, 941, 961, 980, 986], "sin": [4, 13, 35, 86, 100, 110, 111, 115, 117, 128, 135, 141, 142, 144, 158, 159, 173, 180, 185, 201, 212, 227, 265, 274, 281, 305, 316, 317, 372, 466, 565, 649, 713, 965], "pi": [4, 13, 31, 35, 36, 86, 95, 115, 117, 128, 135, 159, 167, 173, 180, 201, 221, 222, 223, 226, 227, 249, 266, 281, 317, 353, 368, 372, 466, 467, 468, 565, 592, 925, 926, 927, 933, 965], "cos_transform": 4, "co": [4, 12, 13, 17, 35, 36, 115, 117, 140, 148, 151, 180, 201, 235, 249, 284, 317, 341, 368, 370, 399, 401, 403, 438, 461, 541, 649, 669, 713, 742, 926, 941, 955, 967, 968], "effect": [4, 6, 25, 33, 35, 36, 41, 42, 49, 52, 57, 63, 78, 88, 90, 111, 113, 115, 132, 135, 136, 140, 142, 148, 149, 151, 152, 154, 179, 180, 181, 184, 185, 198, 203, 219, 222, 226, 235, 236, 237, 240, 243, 244, 271, 272, 274, 281, 286, 298, 303, 306, 307, 308, 310, 311, 312, 319, 324, 335, 337, 339, 342, 348, 350, 360, 362, 363, 367, 368, 369, 370, 372, 373, 400, 415, 440, 446, 450, 464, 474, 475, 507, 508, 509, 510, 514, 515, 516, 538, 539, 540, 541, 556, 559, 599, 607, 608, 609, 622, 623, 624, 637, 641, 642, 653, 702, 734, 744, 751, 757, 765, 774, 794, 805, 806, 812, 817, 818, 820, 824, 825, 826, 828, 833, 836, 844, 847, 848, 852, 855, 856, 857, 858, 867, 868, 884, 897, 905, 920, 925, 927, 928, 930, 931, 932, 938, 941, 944, 946, 947, 962, 964, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "expans": [4, 146, 282, 400, 823, 981], "synthet": [4, 13, 23, 25, 28, 33, 38, 45, 105, 111, 116, 135, 140, 142, 152, 169, 181, 196, 268, 275, 306, 319, 323, 330, 340, 351, 362, 364, 371, 608, 609, 847, 848, 854, 925, 964, 978], "beyond": [4, 25, 180, 181, 323, 325, 336, 337, 348, 360, 369, 852, 928, 932, 941, 946, 952, 980], "23": [4, 24, 31, 46, 88, 148, 271, 277, 279, 282, 283, 334, 343, 353, 369, 375, 383, 391, 397, 402, 404, 412, 415, 417, 418, 425, 432, 433, 434, 440, 442, 450, 451, 452, 454, 455, 460, 462, 464, 472, 474, 488, 489, 490, 493, 497, 504, 506, 508, 510, 511, 512, 515, 518, 519, 520, 557, 558, 561, 577, 580, 582, 585, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 619, 620, 622, 623, 625, 628, 629, 630, 667, 679, 727, 774, 780, 781, 782, 791, 799, 806, 809, 821, 828, 835, 836, 845, 848, 850, 853, 856, 858, 865, 867, 868, 878, 879, 884, 931, 949, 970, 972, 973, 979, 980, 981, 984], "pd": [4, 12, 23, 65, 66, 67, 105, 111, 115, 140, 146, 150, 151, 152, 153, 158, 168, 179, 187, 197, 215, 216, 219, 226, 233, 235, 236, 238, 246, 247, 278, 283, 284, 306, 310, 311, 342, 350, 363, 414, 416, 577, 578, 579, 580, 582, 727, 865, 867, 868, 920, 921, 938, 941, 983, 985, 986, 987], "hour_df": 4, "datafram": [4, 23, 64, 65, 66, 67, 108, 111, 115, 140, 146, 150, 151, 153, 158, 168, 187, 197, 216, 219, 226, 233, 235, 236, 238, 246, 247, 278, 283, 284, 285, 306, 310, 311, 331, 332, 337, 339, 342, 350, 363, 384, 393, 394, 396, 397, 399, 414, 416, 417, 418, 432, 433, 434, 435, 439, 440, 441, 442, 446, 450, 451, 452, 454, 455, 460, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 516, 517, 518, 519, 520, 531, 532, 533, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 638, 639, 642, 746, 749, 750, 760, 774, 792, 797, 800, 804, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 845, 863, 890, 902, 905, 920, 921, 952, 966, 975, 976, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988], "arang": [4, 11, 13, 15, 36, 53, 55, 60, 67, 72, 73, 93, 96, 98, 107, 108, 109, 110, 112, 113, 116, 120, 129, 135, 137, 142, 143, 146, 147, 154, 163, 179, 182, 184, 188, 202, 209, 211, 230, 235, 238, 243, 246, 252, 253, 266, 268, 275, 283, 287, 288, 290, 292, 298, 305, 310, 312, 316, 317, 318, 319, 348, 359, 366, 370, 415, 494, 774, 823, 827, 926, 927, 935, 941, 945, 962], "26": [4, 42, 50, 73, 87, 214, 248, 343, 520, 598, 678, 732, 824, 835, 884, 931, 941, 972, 975, 976, 984], "reshap": [4, 5, 6, 9, 13, 15, 22, 27, 29, 31, 42, 43, 44, 46, 47, 49, 50, 53, 66, 73, 77, 85, 88, 95, 102, 106, 107, 116, 126, 131, 135, 137, 138, 139, 140, 141, 142, 144, 158, 170, 176, 192, 193, 195, 196, 200, 202, 204, 206, 211, 214, 225, 233, 257, 259, 266, 268, 270, 271, 274, 275, 276, 280, 283, 284, 292, 297, 298, 302, 303, 304, 307, 308, 348, 359, 367, 369, 370, 396, 415, 534, 581, 774, 823, 827, 927, 941, 962, 965, 977], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 14, 18, 40, 45, 48, 49, 53, 57, 81, 86, 89, 96, 116, 156, 170, 195, 197, 199, 200, 201, 202, 203, 204, 209, 210, 213, 215, 219, 253, 257, 269, 273, 274, 278, 280, 283, 285, 298, 310, 311, 312, 319, 329, 332, 339, 342, 343, 350, 358, 363, 367, 370, 371, 378, 384, 393, 394, 396, 397, 399, 414, 416, 418, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 638, 639, 640, 641, 642, 792, 797, 800, 804, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 845, 921, 923, 927, 932, 934, 941, 942, 943, 957, 962, 965, 966, 976, 977, 978, 980, 981, 982, 984, 986, 988], "hour_co": 4, "2d": [4, 32, 40, 43, 44, 45, 49, 56, 57, 84, 116, 148, 173, 180, 185, 199, 201, 204, 206, 209, 210, 295, 298, 331, 333, 337, 339, 346, 350, 362, 363, 367, 370, 372, 392, 402, 412, 414, 417, 438, 440, 441, 442, 443, 444, 450, 451, 452, 454, 460, 464, 483, 491, 499, 534, 536, 585, 593, 607, 622, 641, 687, 728, 769, 773, 777, 815, 863, 867, 868, 883, 894, 917, 918, 925, 927, 928, 931, 938, 942, 947, 957, 963, 972, 976, 979, 980, 981, 984, 986], "scatter": [4, 9, 11, 12, 15, 22, 27, 28, 31, 34, 35, 38, 39, 40, 41, 45, 48, 51, 52, 53, 54, 55, 57, 62, 73, 78, 81, 82, 83, 87, 89, 90, 91, 92, 94, 100, 101, 107, 114, 116, 117, 119, 126, 128, 135, 136, 137, 139, 141, 142, 143, 144, 150, 151, 156, 159, 162, 169, 171, 175, 176, 177, 180, 181, 182, 188, 191, 192, 193, 196, 199, 200, 201, 202, 203, 204, 206, 211, 212, 213, 221, 222, 223, 224, 225, 226, 227, 230, 236, 238, 249, 253, 259, 260, 261, 262, 263, 264, 265, 268, 273, 275, 276, 278, 284, 289, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 310, 315, 316, 317, 364, 581, 651, 925, 927, 964], "color": [4, 7, 8, 9, 10, 11, 12, 15, 22, 23, 24, 25, 28, 30, 31, 32, 34, 36, 38, 40, 41, 42, 43, 45, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 71, 72, 73, 74, 75, 78, 82, 83, 85, 86, 87, 89, 92, 93, 94, 95, 98, 100, 107, 108, 109, 110, 113, 114, 115, 116, 118, 120, 123, 126, 135, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 151, 153, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 171, 173, 175, 177, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 193, 196, 197, 200, 201, 202, 204, 206, 210, 211, 212, 213, 216, 221, 222, 223, 224, 225, 226, 227, 230, 234, 236, 238, 239, 240, 241, 242, 244, 245, 246, 248, 250, 252, 255, 256, 258, 259, 260, 261, 264, 265, 266, 268, 273, 274, 275, 277, 278, 281, 289, 290, 292, 296, 297, 298, 299, 300, 302, 304, 305, 307, 315, 316, 331, 332, 334, 345, 362, 369, 370, 397, 443, 444, 456, 533, 534, 728, 905, 945, 947, 977, 982, 984], "map": [4, 5, 10, 11, 16, 18, 24, 49, 90, 103, 110, 113, 116, 124, 135, 148, 156, 179, 199, 201, 205, 236, 239, 244, 256, 261, 264, 266, 272, 273, 291, 298, 304, 311, 312, 331, 338, 348, 350, 360, 361, 362, 363, 366, 367, 369, 370, 376, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 446, 448, 452, 459, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 711, 714, 744, 745, 746, 749, 750, 757, 758, 760, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 835, 836, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 889, 920, 923, 928, 931, 933, 943, 946, 980, 981, 982, 984, 985, 986, 987], "space": [4, 8, 10, 18, 28, 42, 44, 49, 52, 53, 55, 56, 58, 60, 64, 65, 68, 78, 85, 87, 94, 96, 104, 107, 111, 116, 130, 135, 141, 156, 180, 199, 200, 201, 203, 210, 211, 212, 215, 216, 222, 227, 243, 246, 247, 253, 262, 263, 275, 282, 310, 311, 312, 318, 319, 323, 329, 332, 333, 334, 337, 344, 348, 349, 350, 359, 361, 362, 365, 367, 368, 369, 370, 372, 394, 397, 398, 399, 402, 412, 414, 415, 416, 417, 432, 433, 434, 448, 482, 484, 485, 488, 489, 490, 491, 493, 494, 499, 523, 532, 538, 539, 541, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 582, 583, 588, 590, 591, 592, 593, 638, 639, 640, 642, 643, 644, 646, 649, 746, 749, 750, 760, 778, 788, 789, 796, 797, 798, 799, 808, 813, 814, 820, 825, 839, 840, 841, 860, 888, 923, 924, 925, 926, 927, 929, 931, 932, 934, 935, 936, 937, 941, 942, 943, 944, 945, 946, 947, 951, 952, 957, 964, 966, 967, 968, 972, 973, 975, 980, 981, 982, 986, 987], "akin": [4, 180, 350], "sort": [4, 8, 10, 12, 18, 19, 22, 55, 102, 108, 111, 117, 133, 158, 179, 180, 197, 214, 235, 236, 239, 249, 265, 305, 310, 316, 317, 337, 341, 345, 346, 350, 366, 369, 370, 372, 484, 491, 505, 516, 531, 560, 567, 647, 662, 668, 678, 679, 687, 703, 732, 733, 736, 738, 746, 771, 783, 784, 785, 786, 787, 788, 789, 796, 798, 799, 800, 803, 813, 819, 821, 822, 825, 827, 836, 849, 852, 884, 889, 927, 934, 937, 941, 955, 966, 972, 976, 982, 983, 984, 986, 987], "analog": [4, 113, 343, 369, 931, 932, 946, 981], "clock": 4, "25th": [4, 826], "back": [4, 90, 217, 324, 337, 339, 351, 356, 363, 370, 385, 394, 397, 409, 432, 433, 434, 458, 459, 483, 484, 485, 488, 490, 491, 494, 531, 580, 608, 609, 616, 618, 626, 627, 628, 677, 813, 815, 816, 817, 821, 822, 823, 825, 826, 828, 839, 840, 847, 927, 931, 935, 952, 957, 966, 975, 980, 982, 983, 986], "natur": [4, 28, 111, 142, 151, 152, 156, 179, 180, 196, 197, 203, 221, 227, 244, 337, 339, 350, 367, 369, 370, 373, 395, 400, 407, 501, 540, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 642, 654, 690, 704, 706, 790, 791, 792, 794, 796, 798, 799, 800, 827, 882, 927, 928, 930, 931, 934, 936, 941, 945, 951, 954, 972, 980], "sp": [4, 151, 921, 965], "c": [4, 6, 7, 8, 11, 12, 15, 18, 22, 23, 25, 27, 28, 31, 35, 36, 38, 39, 41, 48, 51, 52, 54, 55, 56, 60, 65, 66, 68, 78, 81, 82, 83, 90, 91, 92, 99, 101, 102, 107, 108, 114, 116, 117, 119, 120, 124, 126, 131, 136, 137, 138, 139, 143, 156, 162, 164, 169, 170, 171, 172, 174, 176, 177, 183, 186, 188, 190, 191, 192, 193, 195, 196, 199, 200, 201, 203, 204, 211, 212, 213, 217, 222, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 238, 240, 244, 246, 253, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 271, 273, 274, 275, 278, 280, 281, 282, 283, 284, 285, 289, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 310, 315, 316, 317, 323, 324, 331, 332, 334, 335, 337, 338, 339, 340, 342, 345, 346, 348, 353, 359, 360, 362, 363, 364, 365, 366, 367, 369, 371, 375, 388, 393, 394, 397, 399, 409, 418, 425, 473, 478, 484, 488, 490, 491, 497, 499, 500, 540, 557, 558, 560, 581, 589, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 620, 622, 623, 629, 635, 636, 638, 639, 642, 643, 658, 664, 665, 668, 680, 684, 690, 691, 707, 708, 746, 760, 773, 783, 784, 785, 786, 787, 788, 789, 795, 797, 804, 819, 821, 822, 823, 827, 842, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 862, 867, 868, 894, 920, 923, 924, 927, 928, 929, 931, 933, 934, 936, 938, 941, 943, 945, 946, 947, 951, 955, 957, 961, 962, 964, 965, 972, 973, 975, 977, 978, 979, 980, 981, 983, 984, 985], "colorbar": [4, 11, 27, 36, 85, 96, 106, 114, 131, 136, 138, 139, 141, 152, 199, 210, 225, 246, 273, 298, 647, 984], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "simpl": [4, 15, 25, 65, 69, 71, 77, 78, 85, 109, 142, 148, 152, 180, 196, 218, 236, 254, 284, 294, 310, 312, 315, 319, 335, 337, 339, 340, 341, 342, 344, 348, 349, 350, 351, 359, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 376, 382, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 412, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 464, 472, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 735, 737, 744, 745, 746, 749, 750, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 923, 925, 926, 927, 928, 930, 931, 934, 941, 943, 945, 947, 952, 955, 957, 966, 969, 972], "wors": [4, 78, 136, 152, 185, 235, 243, 278, 319, 362, 372, 383, 415, 432, 433, 434, 502, 504, 506, 508, 510, 512, 515, 518, 520, 560, 561, 585, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 619, 620, 622, 623, 628, 629, 630, 655, 671, 672, 673, 677, 734, 781, 782, 791, 799, 806, 848, 850, 853, 856, 858, 931, 941, 981], "further": [4, 23, 38, 65, 71, 78, 85, 102, 107, 109, 132, 135, 140, 151, 153, 158, 199, 204, 232, 235, 236, 242, 285, 298, 311, 318, 323, 337, 348, 350, 361, 362, 364, 367, 369, 370, 372, 402, 412, 465, 482, 485, 532, 564, 572, 578, 608, 609, 616, 618, 626, 627, 628, 641, 645, 686, 723, 727, 730, 739, 740, 784, 790, 791, 798, 799, 826, 828, 847, 849, 852, 884, 930, 931, 933, 934, 935, 937, 941, 945, 946, 964, 966, 981, 985], "analyz": [4, 7, 16, 237, 244, 285, 310, 312, 342, 343, 362, 370, 453, 538, 539, 541, 737, 928, 931, 938, 939, 947, 966, 972, 981], "reason": [4, 8, 12, 38, 49, 111, 133, 151, 152, 156, 179, 180, 187, 197, 206, 210, 211, 215, 232, 235, 236, 241, 253, 274, 278, 311, 312, 319, 323, 324, 325, 332, 336, 337, 339, 341, 345, 348, 349, 350, 351, 362, 363, 364, 367, 369, 370, 372, 458, 482, 524, 588, 596, 602, 604, 622, 637, 642, 712, 746, 760, 792, 797, 804, 823, 844, 920, 921, 926, 927, 928, 931, 933, 934, 935, 937, 941, 945, 946, 955, 966, 981, 982, 983, 984, 985, 986, 987, 988], "disappoint": 4, "outcom": [4, 151, 350, 519, 608, 659, 691, 741, 776, 842, 843, 844, 849, 852, 927, 931, 947, 954, 966, 976, 980, 982], "altern": [4, 24, 65, 78, 105, 106, 112, 118, 153, 163, 179, 197, 207, 224, 227, 244, 280, 311, 312, 319, 332, 340, 341, 343, 348, 350, 351, 353, 357, 359, 360, 362, 363, 364, 366, 367, 369, 370, 372, 392, 393, 396, 397, 402, 408, 413, 449, 488, 490, 491, 497, 503, 504, 507, 508, 509, 510, 514, 515, 516, 532, 538, 539, 541, 567, 570, 593, 642, 656, 658, 720, 723, 727, 730, 748, 777, 812, 818, 821, 833, 840, 842, 855, 856, 857, 858, 898, 899, 925, 927, 928, 930, 931, 934, 935, 939, 941, 943, 944, 946, 947, 952, 961, 966, 968, 977, 979, 985, 986], "larger": [4, 7, 25, 33, 35, 38, 43, 73, 75, 83, 95, 102, 112, 136, 141, 142, 147, 151, 152, 156, 159, 194, 195, 196, 204, 210, 212, 221, 227, 236, 238, 244, 245, 253, 255, 268, 269, 271, 273, 298, 311, 312, 330, 332, 337, 343, 348, 350, 359, 360, 362, 363, 364, 366, 367, 369, 370, 372, 391, 394, 399, 400, 402, 404, 406, 465, 477, 491, 494, 511, 512, 513, 517, 518, 532, 539, 593, 602, 622, 623, 624, 625, 629, 637, 642, 654, 669, 685, 744, 793, 794, 825, 827, 828, 836, 841, 883, 884, 902, 905, 923, 924, 927, 928, 930, 931, 934, 935, 939, 941, 945, 946, 964, 966, 976, 977, 980, 981, 982, 985, 986], "periodic_spline_transform": 4, "n_spline": [4, 827], "none": [4, 8, 9, 10, 15, 16, 24, 30, 35, 37, 38, 40, 48, 51, 57, 87, 90, 95, 103, 107, 108, 110, 113, 126, 136, 142, 143, 154, 158, 179, 180, 187, 190, 197, 199, 212, 213, 229, 235, 236, 247, 258, 260, 264, 277, 282, 283, 288, 291, 296, 298, 299, 302, 303, 305, 310, 311, 332, 334, 337, 339, 344, 346, 350, 362, 366, 369, 372, 373, 374, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 650, 651, 652, 653, 657, 658, 659, 661, 662, 663, 664, 666, 668, 670, 671, 672, 673, 675, 676, 677, 678, 679, 681, 683, 684, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 836, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 866, 867, 868, 870, 871, 872, 873, 876, 878, 883, 884, 887, 888, 889, 890, 894, 897, 899, 900, 902, 905, 906, 912, 915, 916, 918, 920, 927, 931, 941, 944, 947, 957, 961, 966, 968, 972, 973, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "degre": [4, 15, 31, 87, 101, 140, 146, 150, 152, 156, 158, 167, 168, 180, 212, 217, 221, 222, 223, 226, 227, 235, 249, 271, 282, 283, 295, 305, 367, 371, 402, 448, 485, 491, 589, 590, 593, 606, 724, 744, 746, 794, 823, 827, 849, 850, 851, 852, 853, 923, 924, 926, 927, 928, 929, 931, 932, 934, 937, 938, 941, 944, 946, 964, 975, 981, 985, 986], "n_knot": [4, 180, 283, 827, 941, 985], "include_bia": [4, 158, 249, 823, 827, 986], "knot": [4, 180, 283, 827, 941, 985], "linspac": [4, 8, 9, 10, 11, 13, 22, 24, 27, 31, 33, 34, 36, 38, 45, 73, 74, 86, 95, 100, 109, 111, 135, 136, 138, 139, 140, 141, 142, 144, 152, 158, 159, 161, 169, 173, 179, 180, 181, 185, 189, 190, 191, 192, 193, 197, 204, 206, 209, 210, 212, 213, 225, 235, 237, 238, 242, 243, 244, 245, 249, 258, 259, 265, 266, 274, 276, 284, 285, 297, 298, 301, 303, 304, 306, 307, 308, 581, 582, 752, 772, 788, 789, 965], "again": [4, 62, 66, 111, 151, 203, 236, 319, 341, 346, 350, 351, 362, 363, 364, 369, 370, 422, 517, 518, 584, 597, 601, 603, 605, 611, 613, 615, 642, 920, 927, 931, 945, 969, 972, 980], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 15, 16, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 37, 42, 43, 44, 47, 48, 49, 50, 53, 55, 56, 61, 64, 68, 69, 73, 85, 86, 88, 91, 100, 105, 106, 107, 108, 111, 112, 113, 116, 117, 126, 129, 131, 136, 137, 139, 141, 142, 146, 147, 148, 152, 153, 163, 167, 168, 179, 181, 186, 188, 191, 192, 193, 194, 195, 198, 200, 202, 206, 209, 210, 211, 212, 214, 215, 221, 223, 225, 226, 227, 233, 235, 237, 238, 241, 242, 244, 245, 253, 258, 259, 263, 266, 268, 270, 275, 276, 280, 282, 285, 289, 290, 292, 295, 297, 298, 301, 302, 303, 304, 307, 308, 310, 311, 318, 323, 330, 331, 332, 337, 339, 350, 359, 360, 362, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 380, 381, 383, 384, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 869, 872, 873, 878, 882, 884, 886, 889, 893, 895, 900, 902, 906, 907, 908, 909, 910, 911, 912, 921, 926, 927, 931, 932, 933, 934, 935, 937, 941, 942, 943, 944, 945, 946, 947, 962, 963, 965, 966, 972, 974, 975, 977, 978, 979, 980, 981, 982, 986], "concat": [4, 146, 150, 168, 197, 821], "cmap": [4, 5, 6, 11, 12, 13, 15, 19, 20, 28, 29, 31, 35, 36, 42, 43, 46, 47, 49, 50, 53, 73, 75, 80, 81, 85, 88, 92, 96, 101, 106, 107, 126, 131, 138, 139, 152, 158, 162, 170, 171, 188, 191, 192, 193, 195, 200, 201, 202, 210, 211, 214, 229, 230, 253, 256, 257, 259, 261, 262, 264, 266, 268, 270, 271, 273, 275, 287, 288, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 307, 308, 315, 647, 962, 963], "cm": [4, 6, 11, 12, 13, 15, 19, 20, 22, 28, 29, 31, 34, 35, 42, 43, 45, 46, 47, 48, 49, 50, 53, 55, 56, 62, 73, 75, 80, 81, 85, 88, 92, 101, 106, 107, 126, 131, 138, 139, 152, 162, 171, 188, 191, 192, 193, 195, 200, 201, 202, 207, 210, 211, 214, 229, 230, 253, 257, 259, 263, 266, 268, 270, 271, 273, 275, 285, 287, 288, 292, 294, 295, 296, 297, 298, 299, 300, 302, 304, 307, 308, 315, 334, 363, 647, 860, 931, 941, 947, 962, 963], "tab20b": 4, "stai": [4, 24, 33, 95, 151, 311, 336, 337, 341, 350, 351, 936, 978], "midnight": 4, "fewer": [4, 13, 24, 99, 107, 109, 179, 323, 338, 371, 372, 398, 411, 503, 544, 646, 778, 888, 927, 932, 934, 977, 978, 979], "most": [4, 6, 8, 12, 13, 18, 22, 25, 48, 49, 57, 71, 77, 78, 94, 105, 112, 118, 128, 129, 130, 132, 133, 140, 147, 150, 151, 152, 153, 154, 156, 179, 180, 197, 216, 221, 227, 232, 233, 238, 242, 243, 245, 262, 273, 280, 283, 288, 298, 310, 311, 312, 319, 323, 324, 325, 332, 333, 335, 337, 339, 341, 342, 343, 345, 348, 350, 351, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 394, 395, 400, 406, 407, 410, 418, 446, 453, 471, 474, 482, 484, 489, 493, 499, 501, 511, 512, 516, 517, 538, 539, 541, 543, 554, 561, 577, 580, 599, 608, 622, 624, 626, 628, 637, 638, 642, 645, 674, 677, 695, 707, 708, 712, 734, 741, 744, 745, 749, 750, 765, 776, 777, 790, 791, 792, 794, 796, 797, 798, 799, 800, 823, 825, 832, 833, 835, 836, 837, 838, 845, 883, 884, 886, 894, 899, 920, 921, 925, 926, 927, 928, 929, 930, 931, 932, 934, 937, 938, 939, 944, 945, 946, 947, 950, 951, 952, 955, 962, 964, 966, 974, 975, 978, 979, 980, 981, 982, 983, 985, 987], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "successfulli": [4, 13, 277, 336, 341, 370, 945], "reduc": [4, 7, 38, 41, 42, 43, 44, 49, 65, 66, 71, 102, 109, 111, 113, 116, 130, 151, 158, 159, 177, 184, 187, 208, 210, 215, 236, 242, 262, 275, 278, 285, 311, 312, 319, 329, 331, 334, 337, 343, 348, 350, 360, 361, 362, 364, 366, 367, 369, 370, 371, 373, 395, 396, 400, 407, 410, 443, 484, 494, 499, 505, 506, 507, 508, 513, 514, 515, 523, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 560, 577, 593, 602, 622, 623, 624, 625, 637, 642, 645, 730, 746, 749, 750, 752, 760, 769, 770, 771, 772, 775, 825, 836, 839, 840, 855, 856, 857, 858, 920, 923, 925, 926, 927, 928, 931, 934, 943, 944, 948, 957, 965, 972, 974, 975, 976, 977, 978, 981, 982, 983, 984, 986, 988], "choic": [4, 7, 36, 42, 60, 64, 71, 93, 135, 136, 142, 146, 168, 180, 215, 229, 233, 235, 238, 258, 282, 310, 311, 319, 323, 335, 339, 342, 348, 353, 362, 364, 366, 368, 369, 371, 372, 402, 412, 421, 422, 423, 424, 425, 426, 428, 488, 490, 491, 497, 509, 588, 597, 598, 606, 608, 609, 611, 619, 630, 642, 655, 777, 790, 791, 796, 798, 799, 825, 828, 836, 838, 847, 848, 871, 920, 925, 927, 928, 929, 931, 932, 937, 939, 944, 945, 946, 947, 979, 982, 983, 987], "arbitrari": [4, 78, 85, 86, 87, 104, 142, 158, 179, 196, 197, 233, 273, 277, 282, 318, 324, 337, 348, 350, 363, 366, 367, 369, 370, 374, 400, 405, 407, 415, 482, 483, 509, 510, 531, 589, 598, 619, 630, 638, 747, 748, 753, 755, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 812, 814, 827, 920, 922, 923, 927, 928, 931, 934, 941, 952, 966, 972, 973, 976, 978, 979, 980, 982, 986], "held": [4, 8, 65, 93, 112, 153, 187, 223, 238, 243, 252, 369, 509, 510, 511, 512, 651, 746, 749, 750, 760, 805, 806, 818, 920, 921, 930, 939, 966], "point": [4, 9, 11, 13, 15, 24, 28, 33, 34, 36, 37, 44, 45, 48, 53, 55, 59, 62, 73, 74, 77, 81, 82, 83, 84, 88, 90, 91, 101, 107, 108, 116, 137, 142, 143, 148, 151, 152, 153, 158, 162, 168, 171, 173, 175, 177, 179, 180, 181, 185, 188, 191, 192, 196, 197, 199, 200, 201, 202, 203, 206, 209, 211, 215, 223, 227, 229, 232, 236, 237, 242, 244, 245, 252, 253, 256, 257, 258, 259, 260, 261, 262, 264, 266, 268, 274, 275, 277, 287, 288, 292, 294, 297, 298, 299, 300, 302, 303, 307, 308, 311, 312, 315, 319, 323, 324, 325, 331, 332, 333, 334, 335, 336, 337, 339, 341, 342, 343, 345, 348, 350, 351, 361, 362, 367, 368, 369, 370, 373, 374, 391, 392, 393, 394, 395, 397, 398, 399, 400, 402, 404, 405, 406, 407, 408, 410, 411, 419, 422, 424, 448, 454, 462, 464, 465, 469, 472, 475, 480, 483, 485, 491, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 560, 561, 578, 581, 582, 583, 587, 588, 589, 594, 595, 601, 605, 607, 620, 621, 623, 625, 626, 628, 629, 632, 633, 638, 639, 640, 641, 642, 643, 644, 649, 651, 656, 657, 660, 663, 667, 672, 674, 680, 685, 686, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 713, 728, 729, 744, 745, 746, 760, 769, 778, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 805, 806, 813, 827, 841, 842, 843, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 865, 923, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 941, 943, 944, 946, 947, 951, 952, 961, 964, 965, 966, 972, 973, 974, 976, 978, 979, 980, 983, 984, 985, 986, 987], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 104, 273], "96": [4, 44, 57, 142, 206, 334, 366, 920, 926, 931, 941, 972], "insight": [4, 7, 151, 152, 180, 181, 197, 270, 273, 310, 318, 360, 746, 749, 750, 760, 771, 938, 947, 955], "last_hour": 4, "slice": [4, 16, 107, 188, 201, 204, 211, 256, 261, 264, 283, 284, 294, 332, 338, 339, 346, 363, 414, 417, 443, 444, 458, 496, 589, 723, 727, 730, 863, 887, 888, 902, 984, 986], "suptitl": [4, 5, 14, 29, 30, 31, 35, 36, 46, 49, 52, 55, 62, 69, 85, 88, 96, 107, 108, 115, 118, 144, 151, 152, 173, 178, 194, 195, 199, 200, 201, 214, 224, 231, 271, 273, 275, 280, 282, 287, 288, 292, 305, 306, 315], "label": [4, 6, 7, 11, 12, 13, 15, 19, 22, 23, 24, 25, 29, 30, 34, 36, 38, 39, 41, 42, 43, 44, 45, 47, 48, 51, 53, 55, 58, 59, 60, 61, 62, 67, 69, 71, 72, 73, 74, 77, 78, 82, 83, 87, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 117, 118, 121, 124, 129, 135, 136, 140, 141, 142, 143, 144, 146, 148, 151, 154, 156, 158, 159, 161, 162, 163, 167, 168, 169, 173, 179, 180, 181, 182, 185, 186, 187, 188, 189, 194, 196, 197, 200, 201, 202, 206, 211, 212, 213, 215, 216, 223, 229, 230, 233, 234, 236, 237, 238, 239, 241, 244, 245, 246, 247, 248, 249, 250, 252, 258, 260, 262, 265, 269, 271, 273, 274, 278, 280, 281, 284, 286, 290, 292, 305, 306, 310, 311, 314, 315, 316, 317, 325, 329, 330, 331, 336, 337, 339, 342, 346, 350, 351, 359, 360, 361, 372, 373, 379, 380, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 412, 415, 419, 437, 438, 439, 443, 444, 445, 446, 452, 453, 458, 459, 462, 464, 465, 469, 472, 473, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 517, 519, 520, 542, 543, 544, 545, 546, 548, 549, 550, 554, 555, 556, 559, 560, 581, 608, 609, 616, 617, 618, 623, 624, 625, 626, 627, 628, 647, 648, 650, 652, 653, 654, 655, 657, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 674, 675, 676, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 703, 704, 705, 706, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 794, 795, 797, 798, 805, 806, 808, 812, 815, 816, 819, 821, 822, 831, 842, 843, 844, 847, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 867, 872, 873, 894, 895, 902, 920, 927, 928, 932, 933, 934, 935, 937, 938, 941, 945, 946, 947, 951, 953, 957, 962, 964, 965, 966, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "actual": [4, 25, 42, 55, 69, 78, 99, 156, 168, 179, 187, 223, 231, 238, 312, 319, 323, 325, 334, 335, 337, 339, 342, 343, 348, 349, 350, 360, 362, 367, 370, 371, 385, 459, 465, 466, 477, 488, 490, 497, 512, 513, 595, 598, 608, 609, 616, 617, 618, 619, 620, 622, 624, 626, 627, 628, 630, 637, 641, 645, 651, 654, 659, 665, 671, 672, 673, 734, 744, 749, 750, 765, 766, 794, 825, 847, 853, 875, 876, 877, 906, 923, 930, 931, 934, 938, 939, 979, 980, 986, 987, 988], "black": [4, 9, 10, 11, 24, 31, 40, 45, 51, 73, 74, 83, 85, 99, 107, 128, 135, 136, 140, 141, 144, 147, 151, 152, 158, 167, 168, 169, 171, 175, 179, 180, 181, 185, 188, 191, 192, 197, 206, 221, 224, 256, 258, 268, 269, 271, 292, 308, 315, 316, 317, 337, 353, 355, 362, 369, 372, 505, 506, 581, 937, 938, 947, 951, 957], "One": [4, 9, 12, 22, 27, 45, 82, 90, 93, 106, 108, 111, 114, 148, 151, 154, 157, 194, 206, 216, 226, 235, 242, 245, 262, 274, 293, 295, 311, 323, 334, 337, 349, 350, 362, 365, 367, 368, 369, 370, 373, 395, 399, 422, 424, 428, 462, 516, 589, 608, 616, 618, 623, 625, 626, 627, 737, 753, 754, 776, 777, 778, 809, 810, 821, 851, 894, 921, 923, 927, 928, 929, 930, 931, 932, 934, 935, 938, 939, 941, 946, 953, 968, 976, 978, 985, 987], "legend": [4, 7, 8, 9, 11, 22, 24, 30, 33, 36, 56, 66, 67, 69, 71, 72, 73, 74, 77, 78, 87, 89, 93, 94, 95, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 129, 135, 136, 140, 141, 142, 143, 144, 151, 152, 156, 158, 159, 161, 163, 164, 167, 168, 169, 173, 179, 180, 181, 182, 185, 186, 187, 188, 189, 192, 193, 194, 196, 197, 202, 209, 210, 211, 212, 213, 216, 223, 230, 232, 234, 235, 237, 238, 239, 240, 242, 244, 245, 247, 248, 249, 250, 258, 259, 260, 265, 269, 274, 278, 281, 284, 289, 297, 300, 305, 310, 314, 315, 316, 317, 650], "draw": [4, 7, 15, 55, 144, 151, 175, 216, 237, 242, 298, 344, 365, 367, 368, 369, 505, 506, 507, 508, 513, 514, 515, 516, 561, 584, 651, 752, 859, 861, 930, 951, 960, 985, 986], "conclus": [4, 90, 151, 153, 179, 181, 235, 237, 319, 369, 960], "abov": [4, 23, 24, 33, 40, 61, 64, 101, 104, 109, 111, 121, 132, 133, 151, 152, 154, 165, 179, 181, 185, 190, 210, 213, 235, 241, 258, 275, 278, 281, 283, 311, 312, 318, 319, 323, 324, 325, 331, 332, 334, 335, 336, 337, 339, 341, 343, 348, 350, 351, 362, 363, 364, 366, 367, 368, 370, 372, 392, 396, 414, 417, 439, 445, 446, 447, 473, 540, 584, 654, 704, 746, 758, 760, 769, 811, 812, 825, 830, 836, 844, 894, 920, 921, 923, 925, 927, 928, 931, 934, 936, 938, 941, 945, 946, 947, 952, 957, 958, 964, 965, 966, 978], "problemat": [4, 231, 363, 921, 980], "captur": [4, 9, 12, 33, 35, 78, 111, 115, 128, 140, 151, 158, 179, 227, 281, 298, 345, 369, 370, 371, 521, 538, 539, 541, 794, 898, 931, 936, 944, 948, 964, 984], "big": [4, 40, 55, 57, 183, 184, 200, 227, 324, 337, 343, 351, 364, 370, 374, 488, 511, 512, 752, 772, 783, 784, 785, 786, 787, 952, 955, 981, 982, 983, 984, 985, 986, 987, 988], "goe": [4, 33, 104, 318, 337, 369, 421, 422, 428, 507, 508, 514, 515, 516, 855, 856, 857, 858, 941, 945], "artifact": [4, 13, 42, 43, 273, 325, 341], "discontinu": [4, 348], "fail": [4, 50, 61, 86, 93, 143, 158, 235, 280, 324, 335, 337, 339, 340, 345, 351, 353, 365, 366, 391, 422, 424, 626, 627, 628, 805, 806, 878, 920, 928, 972, 973, 976, 977, 979, 980, 981, 982, 983, 984, 986, 987], "intra": [4, 538, 541, 739, 740], "variat": [4, 12, 33, 115, 140, 141, 148, 151, 184, 220, 222, 227, 232, 252, 281, 298, 334, 366, 367, 372, 394, 397, 409, 486, 593, 622, 624, 625, 744, 745, 764, 765, 767, 920, 931, 941, 944, 947, 951, 962, 964, 967, 968, 975, 977, 978], "harmon": [4, 33, 242, 311, 362, 485, 491, 678, 679, 685, 732, 742, 931], "phase": [4, 173, 323, 577, 923, 928, 934, 955, 980, 982], "potenti": [4, 71, 147, 150, 152, 158, 259, 260, 268, 312, 323, 324, 350, 353, 362, 366, 369, 370, 418, 432, 433, 434, 435, 446, 474, 499, 507, 508, 511, 512, 514, 515, 523, 556, 561, 584, 712, 837, 838, 845, 855, 856, 857, 858, 899, 937, 945, 951, 966, 975, 982, 983, 986], "fix": [4, 6, 8, 23, 31, 42, 65, 95, 104, 107, 135, 136, 140, 143, 151, 181, 197, 227, 238, 243, 268, 280, 281, 282, 283, 284, 285, 311, 323, 324, 331, 333, 335, 336, 337, 339, 340, 345, 348, 350, 351, 363, 366, 367, 369, 370, 372, 402, 412, 422, 454, 462, 481, 487, 490, 492, 498, 499, 509, 510, 514, 515, 538, 541, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 580, 603, 613, 620, 634, 637, 641, 645, 657, 734, 744, 760, 767, 790, 791, 793, 796, 798, 799, 815, 831, 855, 856, 884, 898, 920, 927, 930, 931, 934, 941, 952, 954, 962, 966, 970, 971, 973, 974, 980, 981, 982, 983, 984, 986, 987, 988], "two": [4, 7, 9, 11, 14, 22, 24, 27, 33, 35, 36, 39, 55, 59, 64, 65, 69, 73, 77, 78, 81, 82, 83, 85, 87, 88, 90, 94, 97, 100, 106, 107, 108, 111, 114, 115, 116, 119, 130, 133, 135, 136, 137, 138, 141, 142, 146, 147, 148, 151, 152, 153, 158, 162, 167, 168, 169, 170, 175, 179, 180, 181, 187, 188, 191, 196, 197, 201, 203, 204, 206, 211, 213, 215, 221, 222, 223, 225, 226, 227, 230, 232, 236, 242, 256, 258, 261, 262, 264, 266, 273, 275, 278, 280, 281, 283, 284, 289, 294, 295, 298, 299, 300, 307, 310, 311, 312, 315, 319, 330, 331, 332, 333, 334, 335, 337, 339, 341, 343, 344, 345, 348, 350, 351, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 407, 409, 414, 419, 420, 421, 422, 423, 424, 425, 426, 438, 440, 441, 442, 443, 444, 446, 448, 450, 451, 452, 453, 454, 455, 457, 460, 464, 469, 472, 486, 488, 490, 494, 497, 499, 500, 503, 510, 520, 531, 534, 540, 541, 542, 545, 546, 548, 549, 550, 552, 553, 556, 557, 558, 560, 561, 570, 571, 574, 578, 582, 589, 593, 595, 620, 621, 623, 642, 649, 653, 654, 655, 662, 665, 666, 669, 671, 672, 673, 680, 681, 684, 685, 687, 690, 692, 703, 704, 706, 712, 713, 720, 723, 726, 727, 728, 729, 730, 734, 735, 741, 742, 743, 744, 777, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 805, 806, 812, 813, 820, 821, 822, 823, 841, 842, 843, 847, 855, 857, 858, 894, 910, 911, 917, 920, 921, 923, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 943, 944, 945, 946, 947, 948, 957, 961, 964, 965, 966, 969, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "onc": [4, 8, 46, 130, 133, 135, 200, 233, 236, 253, 280, 284, 310, 312, 318, 319, 323, 325, 331, 332, 337, 341, 342, 343, 344, 345, 349, 350, 351, 362, 363, 365, 366, 367, 369, 370, 371, 372, 399, 401, 403, 422, 458, 459, 488, 494, 501, 509, 510, 540, 541, 547, 569, 577, 597, 601, 603, 605, 611, 613, 615, 616, 617, 618, 626, 627, 628, 647, 662, 666, 668, 685, 730, 747, 751, 754, 764, 783, 784, 785, 786, 787, 859, 927, 928, 934, 941, 945, 946, 947, 957, 966, 969, 972, 980, 982, 983, 984, 985], "specif": [4, 11, 12, 25, 40, 57, 60, 64, 66, 118, 140, 143, 151, 152, 156, 197, 230, 235, 273, 280, 281, 285, 310, 311, 312, 319, 323, 324, 332, 337, 340, 342, 343, 345, 348, 350, 353, 358, 361, 362, 363, 366, 367, 369, 370, 371, 372, 446, 453, 484, 501, 507, 514, 517, 518, 519, 520, 524, 538, 541, 543, 547, 562, 563, 564, 565, 567, 568, 569, 570, 572, 573, 575, 590, 593, 596, 597, 602, 608, 622, 637, 647, 662, 663, 695, 746, 747, 748, 753, 754, 755, 760, 771, 784, 876, 878, 879, 894, 907, 908, 909, 925, 927, 928, 930, 931, 933, 934, 936, 938, 941, 945, 947, 948, 949, 950, 966, 968, 972, 976, 980, 981, 982, 983, 986, 987], "furthermor": [4, 33, 141, 152, 153, 216, 218, 253, 310, 311, 323, 325, 344, 362, 367, 369, 370, 512, 540, 556, 569, 654, 685, 695, 704, 706, 742, 847, 927, 939, 975, 979], "enforc": [4, 12, 49, 85, 140, 173, 262, 323, 337, 364, 367, 369, 372, 458, 477, 481, 487, 489, 492, 493, 495, 496, 498, 511, 512, 827, 867, 868, 921, 928, 974, 980, 982, 984, 988], "behav": [4, 12, 44, 48, 52, 230, 273, 282, 298, 319, 337, 343, 348, 349, 362, 366, 828, 927, 941, 946, 948, 952, 966, 972, 979, 981, 985, 986], "similarli": [4, 12, 33, 83, 114, 152, 168, 179, 207, 235, 268, 273, 298, 319, 324, 333, 335, 339, 342, 350, 351, 359, 365, 366, 370, 926, 928, 929, 931, 938, 945, 946, 948, 957, 961, 980, 986], "spiki": 4, "instanc": [4, 8, 10, 22, 24, 25, 49, 51, 53, 102, 130, 147, 152, 153, 162, 208, 231, 233, 244, 246, 247, 256, 264, 280, 292, 294, 295, 301, 310, 311, 312, 322, 323, 324, 331, 332, 334, 335, 336, 337, 339, 341, 342, 343, 345, 346, 348, 350, 353, 359, 360, 362, 363, 366, 367, 369, 370, 371, 372, 373, 374, 376, 384, 385, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 412, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 438, 441, 442, 445, 446, 447, 453, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 527, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 560, 561, 570, 577, 578, 579, 580, 582, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 650, 651, 652, 657, 670, 678, 679, 687, 720, 723, 727, 728, 729, 730, 732, 733, 736, 737, 738, 739, 740, 744, 745, 746, 748, 749, 750, 751, 752, 753, 755, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 836, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 867, 868, 870, 878, 879, 883, 884, 899, 900, 901, 902, 905, 915, 916, 920, 921, 927, 928, 931, 933, 934, 937, 939, 941, 945, 946, 947, 952, 954, 957, 964, 965, 966, 968, 972, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "shorter": [4, 141, 224, 348, 362, 367, 372, 400, 407, 513, 647, 933, 937, 966, 983], "necessarili": [4, 28, 66, 88, 151, 179, 187, 197, 211, 212, 222, 275, 311, 331, 341, 360, 362, 369, 577, 796, 798, 799, 800, 925, 928, 930, 931], "creat": [4, 5, 8, 11, 15, 20, 24, 25, 27, 29, 33, 35, 37, 39, 40, 42, 45, 48, 53, 55, 57, 65, 66, 73, 78, 87, 90, 101, 104, 107, 108, 111, 114, 117, 131, 132, 135, 137, 140, 141, 142, 144, 147, 150, 152, 158, 160, 162, 165, 175, 180, 181, 191, 192, 201, 211, 216, 218, 226, 230, 231, 233, 235, 245, 252, 256, 261, 263, 264, 275, 277, 278, 280, 283, 284, 292, 294, 295, 299, 300, 303, 306, 307, 308, 312, 314, 316, 317, 319, 324, 332, 333, 335, 336, 337, 339, 341, 342, 343, 344, 345, 346, 349, 350, 353, 360, 362, 363, 366, 368, 369, 370, 372, 389, 401, 403, 415, 416, 449, 465, 466, 467, 468, 496, 503, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 538, 539, 541, 547, 578, 580, 581, 582, 583, 647, 648, 650, 651, 652, 738, 746, 748, 752, 756, 760, 764, 769, 770, 771, 778, 809, 821, 849, 852, 855, 856, 857, 858, 862, 865, 887, 888, 892, 904, 916, 921, 927, 930, 931, 932, 934, 938, 941, 942, 943, 945, 946, 947, 951, 952, 955, 962, 964, 965, 969, 972, 973, 975, 978, 982, 985, 986, 987, 988], "turn": [4, 29, 71, 146, 147, 151, 194, 195, 211, 235, 257, 312, 323, 325, 332, 348, 350, 351, 361, 362, 363, 365, 367, 370, 371, 372, 531, 532, 539, 557, 558, 777, 781, 849, 852, 870, 921, 925, 933, 936, 941, 955, 966, 977, 979, 980, 985], "downstream": [4, 73, 312, 370, 481, 484, 487, 491, 492, 556, 821, 941, 982], "freedom": [4, 87, 140, 167, 168, 170, 235, 491, 606, 744, 927, 975], "underfit": [4, 111, 135, 148, 153, 228, 250, 268, 607, 746, 749, 750, 760, 770, 771, 808, 823, 926, 927], "approxim": [4, 5, 25, 30, 42, 49, 73, 89, 90, 95, 103, 110, 111, 136, 151, 159, 175, 179, 180, 193, 197, 205, 206, 209, 212, 227, 235, 240, 249, 254, 262, 273, 275, 276, 278, 280, 283, 310, 312, 316, 317, 319, 326, 329, 334, 346, 348, 350, 359, 360, 363, 365, 366, 367, 369, 372, 374, 375, 376, 384, 399, 419, 420, 423, 424, 425, 426, 432, 433, 434, 441, 446, 452, 471, 474, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 509, 510, 532, 539, 560, 561, 569, 588, 589, 590, 591, 592, 607, 608, 609, 622, 624, 626, 627, 629, 637, 642, 707, 708, 713, 744, 747, 764, 769, 773, 774, 788, 789, 792, 796, 798, 799, 800, 804, 808, 809, 814, 818, 820, 821, 825, 836, 847, 852, 853, 883, 884, 905, 924, 925, 926, 927, 928, 930, 934, 935, 936, 937, 938, 939, 943, 945, 946, 947, 951, 952, 966, 968, 972, 973, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986], "especi": [4, 8, 51, 108, 111, 151, 179, 285, 302, 311, 319, 324, 331, 337, 345, 348, 350, 360, 362, 370, 394, 399, 451, 488, 507, 508, 509, 510, 514, 515, 516, 596, 597, 598, 600, 602, 603, 604, 608, 609, 610, 611, 612, 613, 619, 630, 645, 655, 695, 783, 784, 785, 786, 787, 855, 856, 857, 858, 927, 933, 934, 939, 941, 955, 975, 980, 984, 985, 986], "sharp": [4, 152, 938, 941], "rush": [4, 337], "flatter": [4, 23], "accur": [4, 9, 20, 23, 24, 73, 85, 113, 135, 142, 151, 152, 194, 197, 235, 242, 246, 284, 310, 311, 319, 336, 360, 362, 364, 367, 369, 370, 371, 388, 394, 397, 401, 403, 409, 481, 488, 490, 492, 493, 495, 496, 497, 557, 558, 584, 749, 750, 788, 789, 883, 884, 923, 928, 931, 947, 986], "tend": [4, 12, 25, 33, 35, 39, 48, 52, 151, 152, 168, 179, 183, 184, 197, 221, 224, 232, 236, 252, 271, 312, 323, 325, 337, 339, 350, 360, 362, 364, 367, 369, 371, 388, 398, 603, 794, 825, 836, 884, 927, 928, 934, 947, 966], "under": [4, 7, 11, 22, 23, 25, 37, 62, 71, 72, 93, 108, 111, 152, 179, 206, 215, 235, 242, 244, 245, 274, 306, 331, 337, 339, 341, 343, 345, 350, 353, 356, 360, 362, 364, 366, 367, 370, 371, 401, 403, 420, 421, 422, 423, 424, 425, 426, 482, 489, 491, 493, 604, 605, 606, 652, 656, 657, 658, 665, 691, 703, 737, 738, 744, 745, 793, 927, 928, 929, 931, 934, 941, 945, 946, 947, 951, 952, 966, 972, 974, 975, 977, 980, 984], "These": [4, 5, 7, 25, 47, 85, 87, 91, 104, 107, 148, 152, 168, 179, 180, 181, 183, 207, 242, 252, 253, 257, 271, 273, 279, 284, 288, 290, 319, 323, 324, 330, 333, 334, 337, 339, 341, 344, 346, 348, 350, 353, 356, 359, 360, 361, 362, 365, 367, 369, 370, 371, 372, 393, 398, 448, 458, 459, 465, 488, 517, 518, 552, 553, 618, 626, 627, 656, 682, 705, 727, 741, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 793, 794, 813, 920, 922, 925, 927, 928, 931, 932, 942, 944, 946, 951, 957, 961, 966, 972, 978, 980, 981, 982, 985], "systemat": [4, 235, 339, 662, 677, 931, 987], "reveal": [4, 151, 153, 310, 343, 359, 928], "form": [4, 9, 18, 29, 38, 55, 62, 85, 121, 142, 143, 151, 212, 227, 235, 287, 319, 331, 334, 337, 339, 341, 350, 351, 359, 361, 362, 365, 366, 367, 368, 369, 370, 372, 374, 376, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 409, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 649, 744, 745, 746, 749, 750, 751, 754, 756, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 873, 920, 922, 924, 925, 927, 928, 931, 932, 935, 936, 937, 941, 946, 951, 957, 964, 978, 982, 984], "explain": [4, 5, 12, 51, 67, 77, 78, 94, 111, 135, 140, 141, 152, 153, 179, 197, 206, 227, 245, 248, 310, 311, 324, 335, 337, 341, 356, 358, 365, 367, 372, 443, 471, 474, 484, 491, 494, 499, 575, 598, 606, 619, 630, 671, 672, 673, 677, 734, 927, 934, 947, 950, 951, 962, 964, 965, 983, 985, 986], "lack": [4, 337, 339, 348, 366, 773, 862, 946, 986], "deriv": [4, 18, 95, 96, 110, 140, 143, 153, 167, 168, 172, 180, 324, 332, 339, 360, 364, 366, 368, 369, 370, 372, 374, 392, 396, 415, 483, 556, 567, 572, 598, 619, 626, 630, 805, 806, 821, 827, 847, 848, 925, 927, 928, 931, 935, 937, 946, 972, 973, 974, 979, 980, 981, 987], "address": [4, 44, 310, 332, 337, 362, 370, 607, 927, 928, 933, 934, 935, 936, 937, 941, 955, 964, 980], "section": [4, 33, 85, 90, 102, 118, 123, 124, 125, 126, 140, 144, 150, 151, 152, 158, 167, 168, 181, 203, 207, 217, 233, 235, 238, 244, 278, 282, 310, 311, 312, 319, 330, 332, 335, 337, 338, 339, 341, 342, 343, 344, 345, 351, 356, 360, 361, 363, 365, 366, 367, 369, 370, 371, 372, 390, 394, 409, 484, 564, 569, 572, 587, 595, 737, 745, 849, 852, 920, 925, 927, 931, 932, 934, 935, 937, 938, 945, 946, 948, 950, 964, 966, 972, 974, 975, 976, 979], "margin": [4, 12, 23, 25, 136, 137, 139, 140, 141, 148, 151, 152, 157, 235, 273, 293, 296, 298, 300, 334, 360, 361, 367, 369, 372, 462, 560, 561, 595, 626, 684, 777, 825, 836, 849, 852, 927, 931, 933, 937, 938, 941, 945, 946, 964, 979, 981], "construct": [4, 11, 64, 66, 99, 101, 103, 106, 118, 197, 207, 217, 219, 252, 266, 274, 276, 281, 284, 331, 334, 339, 346, 350, 362, 366, 367, 369, 370, 373, 385, 392, 393, 395, 396, 400, 402, 407, 413, 415, 417, 469, 485, 491, 494, 505, 506, 531, 537, 589, 638, 640, 641, 760, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 807, 808, 809, 810, 812, 852, 866, 868, 883, 884, 894, 920, 921, 923, 927, 928, 931, 932, 934, 941, 944, 946, 947, 952, 957, 961, 977, 979, 980, 983, 986], "polynomialfeatur": [4, 158, 179, 180, 185, 217, 249, 282, 827, 927, 941, 976, 980, 981, 982, 985, 986], "coars": [4, 107, 343, 398, 411], "too": [4, 7, 12, 16, 40, 46, 52, 57, 68, 75, 89, 111, 146, 153, 180, 200, 210, 222, 229, 233, 242, 250, 270, 298, 310, 316, 317, 323, 334, 337, 343, 345, 348, 350, 362, 364, 366, 369, 370, 371, 374, 388, 399, 488, 538, 541, 629, 642, 657, 783, 784, 785, 786, 787, 813, 826, 828, 926, 928, 930, 931, 933, 934, 938, 964, 973, 976, 979, 980, 981, 982, 984], "mani": [4, 7, 10, 18, 51, 68, 71, 75, 105, 106, 107, 109, 112, 129, 133, 153, 179, 199, 210, 222, 229, 235, 242, 243, 247, 253, 273, 278, 280, 281, 282, 283, 284, 310, 319, 323, 325, 332, 334, 336, 337, 349, 350, 351, 359, 362, 363, 364, 367, 369, 370, 371, 372, 374, 453, 503, 504, 507, 508, 509, 510, 514, 515, 516, 538, 541, 556, 559, 577, 589, 600, 604, 608, 609, 616, 618, 626, 627, 628, 642, 645, 649, 723, 727, 746, 750, 760, 805, 806, 821, 826, 828, 847, 855, 856, 857, 858, 920, 921, 923, 927, 928, 930, 931, 932, 933, 934, 937, 938, 939, 941, 944, 946, 948, 950, 951, 952, 955, 964, 966, 972, 974, 975, 977, 978, 979, 980, 981, 982, 986, 987], "featureunion": [4, 68, 329, 350, 361, 414, 579, 810, 921, 952, 955, 968, 973, 976, 977, 978, 980, 981, 982, 983, 984, 986, 987, 988], "hour_workday_interact": 4, "interaction_onli": [4, 823, 927, 941], "combin": [4, 12, 23, 25, 56, 64, 65, 67, 68, 85, 94, 95, 97, 109, 113, 135, 141, 147, 148, 151, 179, 196, 197, 203, 206, 211, 235, 236, 244, 246, 247, 262, 269, 282, 283, 285, 301, 312, 315, 323, 329, 333, 334, 337, 342, 349, 350, 359, 360, 362, 363, 366, 367, 368, 369, 370, 371, 372, 374, 375, 396, 414, 416, 417, 423, 425, 426, 429, 430, 431, 439, 446, 458, 459, 465, 471, 474, 476, 481, 487, 488, 490, 492, 497, 499, 510, 512, 515, 517, 518, 560, 564, 566, 571, 574, 580, 584, 593, 596, 597, 602, 603, 608, 609, 610, 611, 612, 613, 616, 618, 622, 623, 624, 625, 626, 628, 629, 631, 634, 679, 737, 746, 749, 750, 757, 758, 769, 771, 775, 807, 809, 813, 821, 822, 823, 828, 847, 905, 920, 923, 924, 927, 931, 932, 934, 937, 941, 944, 945, 948, 955, 962, 964, 966, 972, 977, 980, 983, 984, 985, 987, 988], "ones": [4, 11, 31, 39, 65, 74, 114, 135, 156, 184, 206, 209, 235, 243, 246, 260, 277, 288, 308, 323, 324, 337, 345, 350, 362, 364, 366, 369, 400, 482, 516, 531, 560, 561, 594, 595, 608, 609, 620, 626, 653, 743, 748, 753, 764, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 823, 827, 889, 927, 931, 936, 937, 941, 946, 964, 972, 980, 981, 982], "previou": [4, 39, 49, 65, 85, 102, 108, 111, 118, 135, 140, 141, 150, 151, 152, 165, 180, 210, 212, 235, 238, 242, 273, 278, 284, 310, 311, 312, 319, 323, 332, 337, 339, 342, 343, 345, 348, 350, 351, 353, 362, 369, 370, 418, 496, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 580, 596, 598, 602, 603, 608, 610, 612, 616, 617, 618, 619, 626, 627, 628, 630, 657, 765, 779, 782, 797, 805, 806, 844, 861, 927, 931, 935, 941, 952, 957, 966, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "nice": [4, 62, 180, 273, 323, 367, 966], "improvemnt": 4, "cyclic_spline_interactions_pipelin": 4, "highlight": [4, 73, 83, 135, 136, 141, 197, 277, 310, 312, 326, 337, 341, 342, 345, 348, 372, 394, 397, 414, 417, 440, 441, 446, 451, 454, 462, 465, 474, 488, 511, 512, 514, 515, 517, 549, 552, 578, 580, 584, 590, 596, 598, 602, 608, 619, 630, 638, 667, 697, 737, 746, 749, 750, 760, 774, 790, 792, 809, 813, 818, 821, 822, 823, 827, 828, 844, 845, 847, 852, 856, 879, 928, 931, 939, 941, 946, 982, 983, 984, 985, 986, 987], "anoth": [4, 33, 85, 90, 113, 133, 135, 143, 147, 151, 168, 187, 204, 206, 216, 222, 235, 237, 238, 241, 245, 263, 312, 314, 319, 323, 325, 331, 332, 335, 337, 339, 343, 348, 350, 356, 359, 362, 366, 367, 369, 370, 371, 373, 393, 395, 402, 405, 412, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 458, 488, 490, 497, 623, 626, 642, 659, 669, 752, 807, 808, 920, 926, 927, 928, 931, 932, 934, 937, 941, 945, 946, 957, 964, 965, 966, 981, 982], "either": [4, 10, 27, 65, 107, 108, 151, 167, 169, 207, 230, 239, 244, 258, 318, 323, 324, 329, 332, 335, 337, 338, 339, 343, 350, 356, 360, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 374, 393, 397, 402, 437, 446, 462, 474, 483, 484, 486, 494, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 532, 533, 534, 538, 539, 540, 541, 543, 544, 547, 552, 557, 558, 560, 561, 572, 577, 580, 582, 583, 600, 604, 606, 614, 626, 628, 632, 633, 640, 647, 648, 652, 656, 657, 661, 662, 670, 673, 675, 676, 677, 684, 688, 689, 691, 701, 705, 718, 723, 727, 731, 734, 737, 738, 741, 746, 749, 750, 752, 760, 768, 769, 770, 771, 772, 773, 775, 778, 837, 838, 844, 847, 848, 855, 856, 857, 858, 862, 891, 920, 927, 931, 932, 933, 934, 935, 936, 939, 941, 945, 946, 957, 965, 966, 972, 975, 981, 982, 983, 986], "after": [4, 16, 19, 20, 24, 42, 49, 64, 65, 69, 74, 87, 99, 109, 116, 118, 121, 129, 140, 142, 144, 146, 151, 156, 172, 179, 215, 216, 219, 224, 235, 244, 253, 261, 263, 273, 274, 277, 278, 310, 311, 325, 332, 334, 335, 336, 337, 339, 341, 343, 344, 345, 348, 350, 351, 356, 358, 359, 362, 363, 366, 367, 370, 371, 372, 374, 393, 397, 400, 401, 402, 403, 406, 412, 465, 482, 486, 503, 504, 509, 510, 511, 512, 547, 577, 580, 608, 609, 616, 617, 618, 623, 625, 626, 627, 628, 642, 662, 675, 705, 741, 744, 745, 749, 750, 797, 804, 808, 821, 827, 847, 852, 853, 920, 921, 925, 927, 931, 935, 936, 941, 943, 945, 946, 947, 952, 957, 964, 966, 972, 975, 979, 980, 983, 984, 987], "quadrat": [4, 26, 140, 144, 148, 193, 237, 283, 361, 391, 408, 411, 499, 500, 573, 598, 608, 609, 619, 626, 630, 666, 852, 853, 927, 928, 931, 934, 937, 941, 945, 946, 953, 968, 973], "tractabl": [4, 366, 584, 951, 985], "nystr\u00f6m": 4, "latter": [4, 14, 226, 235, 244, 245, 261, 278, 306, 325, 334, 337, 350, 366, 369, 370, 376, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 691, 744, 745, 746, 749, 750, 755, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 898, 934, 981], "kernel_approxim": [4, 146, 148, 155, 156, 193, 206, 211, 282, 326, 627, 707, 708, 814, 923, 957, 973, 979, 988], "nystroem": [4, 146, 193, 206, 211, 329, 590, 591, 592, 627, 814, 852, 853, 968, 973, 979, 982, 984, 985, 986], "cyclic_spline_poly_pipelin": 4, "poli": [4, 15, 126, 156, 235, 295, 302, 305, 402, 485, 570, 714, 723, 746, 823, 849, 850, 851, 852, 853, 927, 941, 964], "n_compon": [4, 5, 6, 12, 14, 40, 48, 52, 53, 54, 64, 67, 68, 77, 78, 81, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 116, 156, 178, 199, 200, 201, 202, 203, 204, 206, 210, 211, 213, 217, 221, 222, 223, 224, 225, 226, 227, 234, 257, 262, 271, 278, 282, 284, 311, 339, 342, 343, 350, 365, 367, 374, 401, 402, 412, 414, 432, 433, 434, 435, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 589, 590, 591, 592, 638, 639, 640, 641, 642, 643, 644, 645, 646, 744, 745, 797, 804, 807, 839, 840, 841, 884, 923, 925, 928, 930, 934, 962, 965, 973, 974, 978, 979, 980, 981, 982, 983, 984, 986], "300": [4, 19, 20, 31, 34, 53, 88, 99, 100, 101, 147, 169, 204, 206, 210, 225, 238, 263, 276, 282, 287, 304, 306, 339, 394, 397, 398, 409, 411, 589, 594, 595, 629, 640, 642, 644, 805, 927, 982], "random_st": [4, 5, 6, 7, 10, 12, 14, 18, 19, 20, 22, 23, 24, 25, 27, 28, 34, 38, 39, 40, 42, 44, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 64, 65, 69, 75, 78, 83, 85, 87, 90, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 120, 121, 123, 129, 130, 132, 135, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 160, 161, 165, 171, 178, 179, 182, 183, 185, 186, 187, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 211, 213, 214, 215, 216, 218, 219, 221, 223, 224, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 252, 253, 257, 261, 262, 263, 268, 269, 270, 271, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 290, 296, 298, 299, 300, 306, 307, 310, 311, 314, 318, 319, 339, 342, 346, 349, 350, 358, 362, 363, 366, 367, 369, 370, 374, 385, 388, 389, 391, 394, 397, 399, 401, 402, 403, 404, 408, 409, 410, 412, 419, 424, 438, 441, 442, 445, 447, 453, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 533, 534, 543, 544, 557, 558, 560, 561, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 582, 583, 584, 585, 588, 589, 590, 591, 592, 596, 597, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 624, 626, 627, 628, 629, 637, 639, 640, 641, 642, 643, 644, 645, 647, 648, 650, 651, 652, 684, 737, 740, 744, 745, 748, 749, 750, 751, 752, 758, 760, 761, 762, 763, 764, 765, 766, 772, 773, 774, 776, 778, 779, 780, 781, 782, 793, 797, 804, 805, 806, 808, 813, 825, 836, 839, 840, 847, 848, 849, 852, 855, 856, 857, 858, 860, 861, 883, 884, 900, 902, 905, 920, 921, 923, 926, 931, 932, 933, 934, 935, 938, 939, 941, 946, 947, 957, 961, 962, 966, 969, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985], "almost": [4, 109, 110, 181, 187, 249, 278, 290, 319, 330, 332, 341, 343, 348, 349, 350, 362, 366, 367, 420, 421, 422, 423, 425, 426, 427, 744, 920, 926, 927, 930, 931, 946, 965, 966, 980, 985], "rival": [4, 844, 944], "intermedi": [4, 7, 48, 104, 111, 298, 370, 509, 510, 569, 808, 931, 984], "compound": [4, 197, 370, 560, 562, 630, 673, 701, 927, 966], "one_hot_poly_pipelin": 4, "competit": [4, 111, 310, 594, 934], "low": [4, 11, 12, 33, 46, 74, 78, 87, 89, 93, 102, 114, 153, 172, 174, 179, 181, 193, 199, 201, 206, 210, 215, 221, 222, 224, 227, 229, 235, 237, 241, 242, 250, 259, 260, 270, 277, 290, 297, 298, 310, 318, 333, 334, 337, 342, 345, 350, 353, 359, 360, 361, 366, 367, 370, 393, 399, 471, 474, 485, 532, 539, 553, 629, 642, 646, 655, 675, 691, 738, 793, 884, 896, 899, 920, 923, 926, 927, 928, 930, 931, 934, 936, 937, 938, 939, 941, 943, 946, 947, 953, 968, 973, 976, 977, 978, 980, 981, 986, 987], "rank": [4, 16, 23, 73, 89, 93, 105, 131, 153, 154, 197, 233, 235, 243, 333, 357, 359, 360, 364, 365, 367, 369, 370, 458, 459, 471, 474, 499, 500, 543, 544, 556, 598, 607, 619, 630, 646, 649, 670, 675, 676, 688, 689, 705, 741, 749, 750, 884, 920, 922, 923, 928, 939, 941, 955, 968, 973, 978, 981, 982, 986, 987], "fact": [4, 11, 18, 23, 74, 78, 111, 153, 210, 219, 331, 344, 348, 350, 365, 367, 368, 369, 370, 599, 618, 620, 654, 925, 927, 934, 941, 945, 946, 952, 955, 986], "smoother": [4, 5, 111, 152, 270, 368], "allow": [4, 51, 53, 68, 69, 89, 90, 102, 103, 116, 135, 140, 142, 144, 173, 179, 197, 200, 207, 210, 216, 218, 219, 221, 235, 252, 280, 281, 282, 283, 285, 303, 310, 318, 319, 323, 331, 335, 337, 338, 339, 341, 344, 346, 350, 351, 360, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 392, 395, 396, 414, 416, 417, 473, 474, 484, 503, 504, 509, 510, 511, 512, 517, 518, 532, 533, 539, 543, 544, 547, 553, 560, 561, 565, 577, 578, 580, 584, 588, 593, 596, 597, 602, 603, 608, 610, 611, 612, 613, 626, 628, 631, 632, 633, 634, 638, 642, 711, 714, 723, 727, 730, 739, 740, 744, 745, 746, 748, 749, 750, 753, 755, 757, 760, 767, 774, 794, 803, 810, 811, 814, 815, 820, 831, 840, 842, 843, 844, 847, 848, 855, 856, 857, 858, 865, 867, 868, 878, 879, 895, 920, 921, 923, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 941, 943, 944, 945, 946, 947, 951, 952, 955, 957, 969, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "find": [4, 5, 6, 12, 16, 36, 42, 43, 44, 45, 48, 49, 52, 60, 67, 73, 74, 85, 87, 89, 90, 96, 109, 118, 135, 152, 167, 168, 181, 187, 199, 201, 203, 204, 209, 226, 234, 235, 236, 246, 261, 262, 263, 278, 280, 300, 301, 306, 310, 311, 314, 324, 334, 335, 337, 338, 339, 342, 343, 346, 348, 349, 350, 351, 359, 362, 364, 365, 367, 369, 370, 371, 373, 392, 395, 396, 400, 401, 402, 403, 412, 481, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 508, 515, 532, 539, 560, 561, 597, 600, 603, 604, 605, 606, 608, 609, 621, 638, 657, 678, 679, 687, 731, 732, 733, 736, 737, 741, 746, 760, 790, 791, 792, 794, 796, 798, 799, 800, 821, 822, 827, 839, 840, 841, 855, 856, 858, 864, 883, 884, 886, 920, 921, 923, 926, 927, 928, 930, 931, 932, 935, 937, 941, 945, 946, 947, 950, 952, 955, 957, 959, 961, 962, 964, 965, 966, 972, 979, 980, 981, 982, 984, 986, 987], "function": [4, 5, 6, 7, 8, 14, 19, 20, 33, 42, 49, 50, 52, 54, 61, 64, 69, 85, 88, 90, 98, 108, 110, 111, 112, 113, 129, 135, 138, 139, 140, 141, 142, 143, 147, 148, 150, 151, 152, 157, 158, 161, 166, 177, 179, 180, 185, 187, 192, 193, 195, 197, 199, 207, 209, 212, 216, 218, 226, 233, 235, 236, 237, 238, 243, 244, 249, 253, 268, 273, 280, 281, 283, 284, 292, 295, 296, 297, 298, 299, 300, 304, 306, 308, 310, 311, 315, 319, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 348, 349, 350, 353, 356, 360, 362, 363, 364, 365, 367, 368, 370, 371, 373, 374, 388, 391, 394, 395, 396, 397, 398, 400, 402, 404, 407, 408, 409, 410, 411, 414, 415, 419, 421, 422, 424, 428, 438, 439, 441, 442, 445, 447, 453, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 522, 525, 531, 532, 538, 539, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 554, 557, 558, 559, 560, 561, 565, 567, 569, 570, 572, 573, 577, 578, 581, 582, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 650, 652, 653, 654, 656, 661, 662, 666, 669, 671, 672, 673, 677, 681, 683, 684, 687, 689, 690, 691, 699, 704, 706, 710, 711, 712, 714, 717, 720, 723, 727, 728, 729, 730, 731, 732, 734, 738, 739, 740, 741, 743, 744, 745, 746, 748, 749, 750, 751, 752, 757, 758, 760, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 817, 818, 820, 824, 825, 826, 827, 828, 831, 833, 836, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 865, 874, 876, 877, 878, 883, 884, 897, 898, 899, 901, 902, 905, 906, 915, 920, 921, 922, 924, 926, 928, 929, 932, 934, 935, 936, 937, 938, 939, 941, 944, 945, 947, 951, 952, 953, 957, 960, 961, 962, 966, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "abl": [4, 5, 9, 22, 43, 56, 75, 78, 89, 90, 115, 141, 151, 168, 179, 195, 197, 203, 241, 246, 298, 319, 323, 324, 325, 331, 335, 337, 339, 341, 342, 348, 364, 366, 370, 435, 453, 484, 773, 820, 920, 921, 927, 930, 931, 932, 937, 941, 944, 947, 948, 952, 957, 965, 966, 978, 979, 983], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 35, 156, 255, 306, 312, 323, 358, 364, 370, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 756, 788, 789, 855, 856, 857, 858, 920, 931, 934, 947, 955, 960, 964, 975, 976], "depth": [4, 98, 104, 108, 112, 114, 119, 314, 316, 317, 318, 323, 335, 337, 341, 349, 369, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 788, 789, 793, 855, 856, 857, 858, 859, 861, 889, 936, 937, 947, 974, 975, 983], "accuraci": [4, 7, 8, 15, 23, 27, 28, 30, 65, 66, 67, 99, 105, 109, 110, 116, 129, 132, 136, 154, 156, 179, 187, 194, 195, 223, 234, 235, 236, 237, 239, 241, 250, 255, 261, 262, 263, 271, 275, 278, 290, 298, 301, 319, 323, 339, 349, 350, 361, 362, 366, 369, 370, 371, 379, 388, 399, 419, 421, 422, 428, 482, 484, 491, 499, 500, 501, 503, 505, 507, 508, 509, 511, 514, 515, 517, 519, 560, 584, 608, 609, 616, 618, 621, 624, 625, 626, 642, 647, 653, 658, 663, 668, 683, 687, 692, 703, 712, 736, 741, 743, 772, 776, 777, 778, 779, 780, 783, 784, 785, 786, 787, 790, 795, 797, 798, 805, 842, 843, 847, 849, 852, 855, 857, 883, 884, 920, 925, 926, 927, 928, 932, 934, 935, 939, 943, 945, 947, 961, 966, 980, 981], "On": [4, 16, 62, 77, 78, 90, 102, 111, 128, 139, 151, 152, 167, 168, 181, 210, 212, 221, 223, 230, 231, 232, 237, 238, 240, 273, 275, 277, 278, 281, 298, 323, 335, 338, 339, 341, 348, 350, 356, 360, 362, 366, 367, 369, 371, 372, 593, 606, 641, 684, 710, 920, 924, 927, 930, 931, 933, 937, 944, 946, 961, 964], "contrari": [4, 13, 151, 200, 204, 221, 238, 273, 310, 331, 362, 446, 494, 556, 763, 927, 933, 937], "significantli": [4, 22, 23, 33, 71, 72, 109, 133, 151, 152, 153, 179, 187, 195, 197, 235, 253, 281, 282, 311, 312, 319, 324, 341, 362, 367, 369, 370, 375, 419, 424, 429, 430, 488, 490, 497, 508, 515, 596, 597, 602, 603, 610, 611, 612, 613, 634, 642, 788, 789, 923, 927, 928, 934, 939, 946, 972, 974, 975, 979, 980, 985, 986, 987], "over": [4, 7, 8, 9, 15, 22, 24, 25, 28, 33, 46, 51, 66, 68, 85, 102, 114, 128, 132, 135, 143, 146, 150, 152, 161, 173, 179, 187, 197, 206, 235, 236, 238, 240, 242, 243, 244, 247, 258, 266, 268, 269, 275, 283, 284, 287, 310, 311, 323, 324, 325, 332, 333, 336, 337, 338, 339, 343, 349, 350, 358, 360, 361, 362, 363, 366, 367, 368, 369, 370, 372, 374, 399, 414, 422, 459, 483, 484, 486, 487, 488, 489, 496, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 531, 532, 538, 539, 541, 544, 552, 582, 583, 584, 594, 595, 596, 597, 602, 603, 608, 610, 611, 612, 613, 615, 616, 617, 618, 626, 627, 628, 635, 636, 647, 666, 668, 688, 712, 737, 740, 744, 746, 749, 750, 752, 757, 758, 760, 769, 770, 771, 772, 773, 775, 804, 805, 806, 807, 823, 827, 847, 864, 873, 899, 920, 927, 928, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 944, 945, 946, 947, 951, 952, 955, 962, 965, 972, 975, 976, 978, 979, 980, 981, 982, 983, 985], "compet": 4, "access": [4, 45, 71, 222, 227, 310, 318, 323, 324, 337, 338, 339, 345, 348, 350, 351, 362, 364, 365, 369, 370, 372, 400, 407, 414, 486, 517, 518, 519, 520, 567, 649, 806, 807, 808, 862, 892, 927, 930, 931, 937, 938, 939, 945, 946, 952, 955, 957, 965, 966, 972, 974, 978, 979, 980, 981, 984, 986, 987, 988], "requir": [4, 7, 13, 23, 41, 42, 44, 49, 52, 53, 62, 64, 81, 89, 91, 92, 104, 108, 112, 114, 118, 133, 152, 168, 176, 179, 197, 199, 201, 207, 210, 219, 236, 244, 246, 253, 255, 273, 278, 282, 283, 310, 311, 312, 331, 334, 335, 337, 339, 341, 343, 345, 348, 350, 351, 353, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 379, 388, 389, 390, 395, 400, 402, 407, 412, 414, 417, 419, 432, 433, 434, 446, 458, 471, 474, 485, 491, 499, 500, 501, 503, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 522, 529, 530, 531, 560, 561, 569, 577, 582, 583, 584, 593, 608, 609, 616, 618, 621, 624, 625, 626, 627, 628, 636, 639, 641, 642, 643, 645, 649, 673, 678, 679, 691, 696, 698, 701, 712, 733, 736, 746, 749, 750, 753, 755, 760, 771, 776, 777, 778, 779, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 798, 799, 800, 805, 808, 809, 810, 812, 822, 823, 824, 826, 828, 835, 839, 840, 842, 843, 847, 848, 849, 852, 855, 856, 857, 858, 897, 917, 920, 925, 926, 927, 928, 931, 932, 933, 934, 935, 937, 938, 941, 945, 946, 947, 952, 957, 964, 966, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "geograph": [4, 11, 266, 332, 448], "repartit": 4, "immobil": 4, "quant": 4, "predictionerrordisplai": [4, 69, 118, 151, 231, 285, 931, 987], "nrow": [4, 5, 29, 52, 61, 67, 85, 144, 152, 179, 181, 187, 197, 199, 200, 203, 237, 238, 253, 275, 277, 278, 285, 288, 305, 306, 962], "ncol": [4, 5, 29, 49, 52, 61, 85, 90, 96, 152, 179, 180, 181, 187, 197, 199, 200, 209, 231, 237, 238, 246, 253, 269, 274, 275, 277, 278, 285, 305, 306, 311], "13": [4, 10, 11, 40, 90, 95, 107, 109, 110, 112, 146, 156, 188, 236, 239, 241, 273, 277, 298, 332, 334, 337, 343, 349, 366, 374, 460, 463, 482, 483, 501, 502, 532, 585, 589, 683, 764, 792, 807, 814, 839, 840, 927, 931, 932, 937, 938, 941, 946, 949, 957, 970, 972, 974, 975, 978, 979, 980, 981, 984], "sharex": [4, 7, 14, 67, 83, 90, 119, 144, 152, 181, 237, 258, 290, 962], "sharei": [4, 69, 83, 90, 96, 119, 144, 152, 179, 181, 187, 237, 246, 258, 274, 305, 306, 311], "row": [4, 18, 19, 20, 23, 25, 40, 55, 69, 81, 83, 107, 116, 119, 146, 180, 181, 207, 210, 215, 216, 275, 318, 323, 332, 339, 346, 349, 350, 359, 362, 365, 370, 377, 393, 394, 397, 399, 400, 401, 403, 406, 407, 409, 414, 418, 438, 440, 441, 442, 443, 444, 445, 450, 451, 452, 454, 455, 460, 461, 463, 484, 492, 498, 501, 540, 541, 570, 582, 593, 596, 597, 602, 603, 610, 611, 612, 613, 631, 634, 642, 646, 647, 660, 668, 669, 674, 707, 708, 712, 715, 717, 718, 719, 720, 722, 723, 725, 727, 728, 729, 730, 744, 745, 777, 783, 784, 785, 786, 787, 793, 796, 797, 798, 799, 800, 803, 814, 818, 820, 823, 834, 837, 838, 841, 845, 863, 867, 868, 884, 902, 905, 909, 911, 913, 914, 918, 920, 921, 925, 927, 929, 931, 932, 934, 941, 942, 945, 946, 952, 979, 980, 981, 982, 987], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 69, 118, 151, 231, 285, 651], "residual_vs_predict": [4, 69, 231, 285, 651], "axis_idx": 4, "kind": [4, 9, 12, 22, 23, 69, 94, 118, 128, 151, 152, 226, 229, 231, 244, 282, 285, 295, 298, 310, 324, 325, 330, 332, 337, 339, 343, 348, 349, 360, 362, 365, 366, 367, 369, 370, 371, 438, 439, 453, 458, 459, 471, 474, 538, 582, 583, 651, 876, 927, 933, 938, 947, 975, 984, 986, 987], "enumer": [4, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 25, 27, 28, 31, 33, 35, 36, 37, 38, 39, 40, 41, 46, 54, 55, 56, 57, 64, 72, 74, 75, 78, 86, 88, 95, 98, 102, 109, 110, 112, 113, 123, 137, 139, 144, 154, 159, 161, 170, 179, 200, 201, 204, 206, 211, 214, 215, 221, 222, 223, 224, 226, 227, 230, 237, 238, 244, 245, 258, 262, 263, 265, 271, 275, 276, 287, 288, 290, 292, 296, 298, 305, 306, 310, 315, 332, 509, 510, 514, 515, 730, 747, 748, 751, 753, 754, 755, 756, 759, 761, 762, 763, 764, 765, 766, 767], "pred": [4, 7, 11, 29, 307, 310, 332, 598, 619, 630, 647, 652, 656, 668, 678, 679, 687, 732, 733, 736, 737, 931], "zip": [4, 5, 8, 12, 22, 24, 28, 29, 33, 34, 36, 38, 41, 45, 58, 59, 60, 69, 78, 83, 85, 86, 89, 94, 95, 96, 99, 101, 103, 118, 119, 141, 146, 148, 151, 152, 153, 164, 170, 171, 179, 187, 188, 199, 210, 222, 226, 227, 233, 237, 238, 239, 242, 244, 253, 258, 261, 268, 269, 270, 275, 277, 278, 291, 295, 306, 307, 315, 335, 369, 772, 966], "disp": [4, 29, 101, 114, 115, 229, 238, 278, 281, 295, 300, 389, 581, 647, 650, 651, 797], "from_predict": [4, 29, 69, 118, 151, 215, 231, 242, 244, 283, 287, 310, 344, 389, 581, 647, 648, 650, 651, 652, 668, 676, 731, 733, 736, 737, 738, 931, 969, 985, 986, 987], "y_true": [4, 18, 29, 54, 69, 118, 138, 179, 189, 197, 224, 290, 337, 383, 389, 390, 415, 432, 433, 434, 502, 504, 506, 507, 508, 510, 512, 514, 515, 518, 520, 561, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 622, 623, 628, 629, 647, 648, 650, 651, 652, 653, 657, 658, 659, 662, 663, 668, 670, 671, 672, 673, 675, 676, 677, 678, 679, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 731, 732, 733, 734, 736, 737, 738, 741, 743, 781, 782, 791, 799, 806, 848, 850, 853, 856, 858, 931, 973, 978, 979, 980, 981, 983, 984, 986, 987], "y_pred": [4, 6, 7, 23, 27, 29, 31, 40, 52, 57, 64, 69, 98, 111, 112, 118, 130, 151, 179, 181, 186, 189, 194, 196, 197, 206, 207, 215, 231, 233, 238, 260, 264, 271, 278, 290, 291, 319, 337, 344, 350, 369, 383, 390, 415, 432, 433, 434, 499, 502, 504, 506, 507, 508, 510, 512, 514, 515, 517, 518, 520, 561, 581, 585, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 624, 625, 626, 628, 629, 630, 647, 648, 650, 651, 652, 653, 658, 662, 663, 668, 671, 672, 673, 677, 678, 679, 683, 687, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 732, 733, 734, 736, 737, 743, 746, 749, 750, 760, 769, 779, 781, 782, 791, 799, 806, 808, 847, 848, 849, 850, 851, 852, 853, 856, 858, 931, 933, 962, 978, 979, 981, 983, 987, 988], "scatter_kwarg": [4, 69, 118, 151, 651], "set_xtick": [4, 8, 10, 15, 28, 31, 39, 55, 59, 96, 116, 120, 152, 154, 170, 195, 211, 221, 246, 247, 252, 268, 270, 275, 276, 295], "num": [4, 12, 65, 133, 135, 140, 141, 142, 152, 153, 181, 242, 243, 284, 582, 920], "set_ytick": [4, 15, 28, 31, 39, 55, 59, 96, 116, 146, 147, 154, 170, 195, 221, 246, 268, 270, 275, 276, 295, 312], "loc": [4, 7, 8, 9, 22, 24, 30, 36, 66, 69, 72, 73, 74, 77, 87, 89, 93, 94, 95, 98, 101, 102, 103, 109, 110, 111, 112, 113, 115, 118, 120, 121, 124, 129, 135, 136, 142, 144, 151, 152, 161, 163, 164, 169, 173, 179, 180, 181, 182, 185, 186, 189, 192, 193, 196, 197, 202, 209, 210, 211, 212, 213, 223, 224, 230, 233, 234, 235, 238, 239, 242, 245, 248, 249, 250, 258, 259, 260, 269, 274, 277, 278, 281, 284, 289, 297, 300, 305, 310, 315, 317, 760, 825, 836], "upper": [4, 7, 9, 22, 66, 69, 72, 73, 74, 98, 101, 102, 103, 110, 111, 112, 113, 118, 120, 129, 144, 151, 173, 179, 185, 186, 189, 193, 196, 197, 210, 213, 214, 234, 235, 236, 258, 259, 260, 269, 278, 290, 297, 300, 305, 362, 368, 413, 538, 539, 541, 545, 563, 564, 565, 567, 569, 570, 572, 573, 575, 582, 583, 585, 587, 600, 604, 627, 684, 821, 849, 850, 851, 871, 930, 931, 934, 941, 945, 946, 947, 980], "bbox_to_anchor": [4, 33, 144, 240, 305], "set_aspect": [4, 138, 190, 223, 307], "equal": [4, 11, 12, 24, 33, 35, 49, 55, 73, 78, 99, 111, 138, 151, 180, 181, 183, 190, 196, 216, 223, 226, 229, 233, 235, 244, 263, 275, 298, 300, 307, 311, 332, 333, 337, 339, 350, 359, 360, 362, 366, 367, 369, 370, 375, 388, 391, 392, 393, 394, 396, 397, 399, 404, 409, 413, 419, 424, 429, 430, 453, 462, 465, 469, 482, 483, 484, 489, 491, 493, 494, 499, 500, 501, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 538, 543, 544, 547, 549, 550, 557, 558, 575, 578, 579, 582, 583, 584, 585, 587, 591, 592, 595, 599, 608, 609, 621, 649, 653, 668, 670, 678, 717, 732, 736, 737, 741, 743, 746, 747, 749, 750, 759, 760, 764, 769, 776, 780, 781, 788, 789, 790, 791, 796, 797, 798, 799, 800, 805, 806, 811, 812, 813, 820, 823, 826, 827, 828, 830, 837, 844, 847, 848, 854, 855, 856, 857, 858, 873, 884, 906, 912, 925, 927, 931, 932, 934, 935, 937, 941, 945, 946, 947, 965, 966, 973, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987], "adjust": [4, 9, 32, 34, 45, 53, 71, 111, 148, 206, 211, 218, 236, 280, 291, 306, 311, 344, 362, 367, 369, 370, 474, 503, 504, 507, 509, 511, 512, 514, 608, 609, 616, 618, 624, 625, 626, 654, 655, 658, 664, 665, 704, 706, 735, 742, 783, 784, 786, 787, 818, 839, 840, 847, 848, 849, 852, 855, 857, 873, 930, 931, 935, 941, 964, 969, 972, 978], "box": [4, 10, 27, 152, 153, 200, 273, 277, 344, 367, 369, 462, 505, 506, 824, 835, 859, 861, 931, 932, 938, 941, 947, 951, 957, 980], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 141, 143, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 314, 315, 316, 317, 318, 324, 325, 337, 343, 348, 349, 351, 353, 359, 360, 364, 366, 367, 368, 369, 371, 372, 389, 452, 509, 543, 544, 581, 582, 647, 648, 650, 651, 652, 663, 752, 859, 860, 861, 920, 925, 926, 928, 930, 931, 933, 934, 935, 937, 938, 941, 945, 946, 952, 961, 962, 966, 974, 976, 977, 979, 981, 982, 983, 984, 986], "seem": [4, 9, 42, 111, 152, 179, 203, 206, 236, 269, 277, 311, 336, 337, 342, 366, 451, 927, 931], "regim": [4, 350, 847, 848, 930], "overal": [4, 39, 44, 102, 118, 140, 197, 232, 253, 278, 311, 323, 336, 337, 343, 359, 360, 369, 372, 397, 399, 414, 421, 422, 428, 499, 928, 931, 947, 955, 982], "closer": [4, 25, 33, 88, 90, 117, 135, 152, 158, 312, 360, 362, 367, 399, 503, 578, 662, 790, 791, 796, 798, 799, 800, 946, 979], "diagon": [4, 23, 36, 75, 77, 197, 215, 223, 226, 227, 229, 298, 359, 362, 364, 372, 403, 428, 431, 461, 463, 477, 482, 500, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 600, 601, 604, 605, 606, 632, 633, 651, 665, 739, 744, 745, 792, 800, 925, 927, 930, 931, 934, 941, 978, 980, 981, 982], "obtain": [4, 7, 9, 12, 25, 44, 52, 53, 65, 68, 69, 90, 93, 108, 111, 112, 116, 123, 137, 139, 151, 152, 179, 181, 193, 203, 221, 222, 223, 231, 235, 236, 237, 241, 244, 278, 283, 296, 311, 312, 318, 319, 332, 334, 348, 350, 356, 360, 362, 364, 365, 367, 369, 370, 371, 372, 388, 393, 419, 446, 482, 483, 505, 506, 507, 508, 509, 510, 513, 514, 515, 543, 556, 564, 595, 609, 611, 616, 618, 622, 624, 626, 627, 637, 658, 662, 675, 688, 705, 740, 752, 773, 776, 777, 780, 794, 805, 825, 836, 849, 852, 855, 856, 884, 921, 923, 925, 927, 928, 930, 931, 932, 934, 935, 937, 938, 941, 945, 946, 978, 980, 983, 985, 986, 987], "slightli": [4, 23, 59, 75, 102, 108, 111, 114, 118, 133, 135, 136, 137, 153, 158, 179, 202, 204, 243, 253, 280, 295, 312, 336, 337, 348, 360, 362, 369, 370, 372, 374, 538, 539, 541, 588, 608, 749, 750, 847, 849, 852, 883, 884, 920, 927, 941, 945, 946, 981, 985, 986], "cost": [4, 35, 88, 135, 148, 156, 199, 211, 237, 244, 280, 298, 311, 312, 313, 337, 343, 345, 348, 360, 362, 369, 428, 450, 487, 488, 489, 496, 507, 508, 509, 510, 514, 515, 552, 560, 569, 577, 596, 597, 602, 603, 610, 611, 612, 613, 618, 622, 624, 626, 628, 637, 638, 642, 774, 847, 848, 849, 852, 855, 856, 857, 858, 884, 923, 927, 928, 931, 934, 944, 945, 946, 953, 968, 978, 981, 982], "durat": [4, 8, 179, 197, 255, 312, 324, 897, 898, 927], "regressor": [4, 69, 78, 112, 117, 118, 121, 135, 140, 147, 148, 151, 157, 159, 161, 179, 182, 196, 197, 281, 282, 323, 337, 339, 348, 350, 360, 363, 372, 383, 387, 415, 432, 433, 434, 435, 474, 501, 502, 503, 504, 505, 506, 507, 508, 510, 512, 515, 516, 517, 518, 519, 520, 555, 556, 559, 561, 582, 583, 585, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 617, 619, 620, 622, 623, 628, 629, 651, 776, 777, 780, 781, 782, 791, 799, 804, 805, 806, 809, 815, 823, 828, 848, 850, 853, 855, 856, 857, 858, 861, 876, 878, 920, 921, 927, 931, 932, 934, 939, 945, 953, 961, 968, 972, 973, 977, 978, 979, 981, 982, 985, 986, 987], "mlpregressor": [4, 152, 216, 325, 804, 805, 935, 980, 981, 982, 983, 984, 985, 986, 987, 988], "hidden": [4, 152, 270, 271, 345, 359, 367, 804, 805, 806, 935, 936, 951, 972, 983], "layer": [4, 148, 152, 195, 216, 267, 270, 271, 323, 345, 369, 464, 465, 472, 517, 774, 804, 805, 806, 809, 828, 936, 953, 968, 978], "cyclic": [4, 596, 597, 602, 603, 610, 611, 612, 613, 984], "within": [4, 55, 104, 105, 106, 117, 130, 132, 133, 175, 180, 181, 191, 197, 216, 233, 234, 238, 248, 273, 274, 282, 296, 299, 306, 312, 319, 323, 332, 337, 341, 346, 348, 350, 351, 359, 362, 363, 366, 368, 369, 373, 395, 398, 411, 413, 414, 419, 424, 465, 499, 517, 518, 519, 520, 543, 544, 582, 642, 646, 649, 660, 674, 730, 744, 745, 751, 752, 764, 765, 772, 773, 788, 789, 790, 791, 796, 798, 799, 800, 807, 808, 809, 821, 832, 833, 835, 836, 837, 838, 849, 850, 851, 852, 853, 855, 856, 857, 858, 920, 925, 927, 928, 934, 937, 941, 944, 946, 947, 952, 955, 957, 961, 964, 966, 974, 975, 979, 980, 985, 986], "finer": [4, 33, 255, 298, 324, 362, 366, 920, 934, 982], "resolut": [4, 11, 16, 95, 152, 265, 266, 298, 351, 957, 982], "taken": [4, 7, 28, 38, 49, 113, 140, 151, 210, 211, 224, 241, 275, 332, 334, 336, 337, 341, 350, 356, 361, 362, 366, 370, 372, 374, 391, 483, 533, 534, 596, 597, 600, 602, 603, 604, 608, 609, 610, 611, 612, 613, 627, 629, 631, 634, 645, 821, 822, 841, 844, 850, 851, 931, 933, 941, 943, 978, 981, 984, 985], "everi": [4, 85, 146, 177, 180, 200, 212, 222, 227, 244, 283, 319, 332, 335, 337, 339, 341, 345, 350, 351, 362, 364, 366, 367, 370, 391, 404, 458, 481, 486, 489, 495, 507, 509, 510, 514, 540, 541, 553, 596, 597, 599, 602, 603, 609, 610, 611, 612, 613, 614, 615, 616, 618, 622, 623, 624, 625, 626, 635, 636, 637, 642, 646, 703, 720, 728, 729, 759, 797, 855, 857, 859, 861, 873, 924, 926, 931, 932, 933, 941, 947, 955, 961, 972, 976, 978, 981, 985], "offer": [4, 339, 345, 348, 349, 353, 366, 367, 369, 370, 920, 921, 932, 935, 947, 951, 952, 955, 978], "view": [4, 15, 27, 38, 42, 71, 87, 152, 176, 181, 217, 323, 325, 337, 362, 370, 486, 595, 607, 788, 789, 862, 927, 928], "gaussian": [4, 5, 9, 25, 27, 28, 31, 40, 42, 43, 52, 56, 71, 72, 73, 74, 75, 82, 86, 87, 88, 95, 100, 101, 111, 114, 147, 158, 169, 206, 210, 223, 224, 258, 266, 277, 295, 326, 329, 333, 339, 342, 350, 362, 364, 367, 368, 374, 402, 419, 420, 421, 422, 423, 424, 425, 426, 446, 454, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 480, 482, 494, 499, 500, 513, 560, 561, 563, 564, 565, 567, 568, 569, 572, 573, 575, 577, 593, 594, 622, 627, 630, 653, 673, 690, 701, 725, 744, 745, 746, 760, 783, 784, 785, 786, 787, 788, 789, 793, 824, 828, 835, 839, 840, 841, 925, 927, 928, 929, 937, 953, 955, 965, 967, 968, 972, 973, 975, 976, 978, 979, 980, 982, 984, 986], "random": [4, 5, 6, 7, 11, 12, 13, 19, 20, 22, 23, 24, 25, 28, 30, 31, 33, 35, 36, 40, 41, 44, 46, 48, 50, 52, 53, 55, 56, 57, 59, 60, 61, 65, 69, 71, 72, 73, 74, 75, 77, 78, 83, 86, 87, 88, 91, 92, 93, 97, 100, 102, 104, 105, 106, 107, 110, 111, 113, 114, 115, 118, 121, 126, 128, 129, 132, 135, 136, 139, 141, 142, 144, 146, 147, 148, 149, 150, 158, 159, 160, 161, 163, 168, 169, 173, 174, 177, 178, 179, 180, 181, 182, 185, 186, 188, 192, 193, 196, 197, 199, 200, 202, 203, 204, 205, 206, 211, 212, 214, 215, 221, 222, 224, 225, 226, 227, 228, 230, 232, 235, 236, 238, 240, 242, 244, 245, 246, 247, 249, 252, 253, 258, 259, 260, 265, 268, 274, 276, 277, 281, 282, 284, 287, 288, 291, 292, 297, 298, 300, 301, 303, 304, 305, 306, 308, 310, 311, 316, 317, 323, 324, 326, 329, 333, 340, 342, 348, 349, 350, 357, 360, 362, 370, 371, 385, 391, 394, 397, 399, 401, 402, 403, 404, 408, 409, 410, 412, 414, 419, 420, 421, 422, 423, 424, 425, 426, 438, 439, 441, 442, 445, 446, 447, 452, 453, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 485, 486, 488, 489, 490, 491, 494, 497, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 523, 532, 533, 534, 539, 557, 558, 560, 561, 577, 580, 582, 584, 589, 590, 591, 592, 593, 596, 597, 599, 600, 602, 603, 604, 608, 610, 611, 612, 613, 620, 621, 622, 626, 627, 628, 629, 639, 640, 641, 642, 643, 644, 645, 651, 654, 655, 658, 680, 692, 730, 740, 744, 745, 746, 748, 749, 750, 751, 758, 760, 761, 762, 763, 764, 765, 766, 767, 773, 774, 779, 781, 782, 783, 784, 785, 787, 788, 789, 793, 797, 804, 805, 806, 808, 811, 813, 822, 825, 836, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 870, 883, 884, 902, 905, 921, 923, 926, 928, 930, 931, 935, 936, 937, 939, 941, 946, 947, 951, 952, 953, 957, 961, 962, 964, 965, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "constant": [4, 95, 102, 138, 142, 147, 151, 167, 180, 181, 183, 197, 208, 217, 238, 265, 269, 271, 274, 276, 281, 306, 308, 319, 329, 339, 346, 350, 359, 369, 372, 383, 415, 432, 433, 434, 461, 463, 484, 488, 490, 497, 499, 500, 501, 502, 504, 506, 508, 510, 512, 515, 518, 520, 540, 556, 559, 561, 563, 577, 580, 582, 583, 585, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 626, 627, 628, 629, 630, 637, 639, 643, 645, 671, 672, 673, 677, 724, 726, 734, 781, 782, 791, 799, 805, 806, 813, 824, 827, 835, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 925, 927, 928, 931, 933, 934, 941, 945, 947, 968, 975, 980, 982, 984, 985, 986], "varianc": [4, 5, 25, 40, 52, 57, 67, 71, 73, 77, 78, 85, 86, 87, 90, 93, 94, 96, 97, 113, 142, 148, 151, 157, 159, 168, 179, 181, 184, 197, 226, 232, 235, 238, 244, 245, 248, 262, 268, 273, 278, 311, 319, 329, 333, 346, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 372, 374, 392, 396, 399, 413, 471, 474, 482, 483, 484, 491, 494, 499, 500, 505, 506, 508, 509, 510, 515, 553, 557, 558, 561, 575, 593, 594, 595, 602, 606, 607, 610, 612, 622, 623, 624, 625, 626, 637, 660, 677, 734, 744, 745, 786, 797, 812, 818, 824, 826, 828, 833, 835, 837, 838, 856, 858, 906, 907, 908, 912, 925, 926, 927, 929, 934, 935, 936, 943, 945, 946, 947, 948, 953, 962, 964, 965, 968, 972, 980, 982, 983, 984, 985, 986, 987], "poisson": [4, 148, 157, 213, 333, 369, 414, 415, 446, 473, 502, 508, 512, 515, 598, 619, 622, 630, 656, 673, 694, 698, 699, 701, 774, 808, 809, 812, 813, 821, 822, 823, 828, 856, 858, 888, 927, 947, 982, 983, 984, 985, 986], "gamma": [4, 5, 6, 7, 9, 11, 15, 28, 29, 90, 119, 126, 156, 193, 206, 211, 212, 233, 235, 237, 240, 246, 250, 282, 287, 288, 290, 292, 295, 297, 298, 301, 302, 304, 305, 308, 365, 367, 372, 402, 485, 512, 569, 570, 589, 590, 591, 593, 594, 595, 598, 630, 635, 641, 673, 696, 701, 708, 715, 724, 725, 726, 744, 757, 760, 842, 843, 844, 849, 850, 851, 852, 853, 920, 923, 926, 927, 929, 944, 946, 957, 961, 962, 964, 972, 973, 975, 976, 977, 979, 980, 982, 983, 986, 987, 988], "achiev": [4, 12, 16, 18, 25, 28, 88, 99, 107, 109, 116, 143, 156, 179, 187, 232, 235, 242, 278, 290, 298, 301, 306, 310, 319, 323, 325, 331, 332, 334, 339, 343, 348, 350, 359, 360, 362, 366, 367, 369, 370, 503, 508, 515, 590, 599, 626, 628, 657, 689, 712, 749, 750, 784, 828, 920, 921, 923, 927, 931, 941, 944, 946, 954, 966, 985], "gridsearchcv": [4, 50, 63, 65, 67, 68, 71, 93, 148, 212, 217, 226, 228, 233, 234, 235, 236, 240, 243, 246, 255, 257, 271, 275, 282, 298, 319, 324, 339, 348, 350, 363, 366, 452, 470, 490, 491, 525, 549, 557, 603, 653, 691, 757, 760, 808, 818, 847, 855, 920, 927, 931, 935, 945, 946, 951, 952, 961, 962, 966, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987], "tweedieregressor": [4, 281, 284, 598, 619, 927, 983, 986, 987], "power": [4, 7, 16, 109, 150, 180, 197, 227, 238, 243, 257, 273, 274, 277, 287, 295, 323, 324, 349, 360, 362, 365, 368, 369, 370, 373, 395, 432, 433, 434, 482, 485, 491, 494, 580, 630, 644, 649, 673, 696, 698, 701, 790, 791, 798, 799, 801, 802, 823, 824, 825, 835, 836, 883, 884, 927, 928, 931, 939, 941, 945, 946, 955, 975, 978, 980, 982, 983, 985], "param_grid": [4, 6, 65, 66, 67, 68, 111, 212, 217, 226, 234, 235, 239, 240, 243, 246, 255, 275, 298, 350, 363, 369, 691, 746, 749, 757, 758, 920, 931, 961, 962], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 315, 316, 317, 318, 324, 331, 332, 334, 343, 350, 359, 362, 368, 370, 373, 383, 395, 415, 432, 433, 434, 438, 439, 440, 441, 442, 443, 444, 445, 447, 450, 451, 452, 454, 455, 460, 462, 464, 465, 469, 472, 473, 486, 487, 494, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 518, 520, 533, 534, 540, 544, 546, 561, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 626, 627, 628, 629, 647, 654, 655, 663, 678, 679, 680, 683, 687, 688, 706, 718, 732, 733, 736, 741, 742, 743, 746, 760, 769, 770, 771, 781, 782, 783, 784, 791, 793, 799, 806, 823, 827, 848, 850, 853, 855, 856, 857, 858, 884, 920, 927, 928, 931, 932, 933, 934, 941, 945, 946, 947, 962, 966, 973, 978, 980, 988], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 324, 337, 338, 339, 340, 341, 343, 348, 350, 353, 370, 952, 954, 966], "000": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 332, 343, 369, 370, 440, 511, 512, 594, 627, 945, 966, 983], "second": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 323, 332, 339, 341, 343, 350, 359, 362, 366, 367, 369, 370, 372, 414, 417, 438, 440, 441, 442, 444, 446, 450, 452, 454, 460, 503, 533, 538, 539, 540, 541, 571, 574, 581, 582, 649, 662, 666, 707, 708, 712, 713, 715, 716, 723, 724, 725, 726, 727, 730, 746, 749, 750, 760, 772, 778, 779, 782, 785, 796, 798, 799, 800, 805, 806, 920, 921, 925, 926, 927, 928, 931, 932, 933, 934, 935, 938, 941, 942, 947, 957, 963, 965, 987], "plot_cyclical_feature_engin": 4, "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 324, 335, 337, 338, 341, 343, 345, 350, 353, 370, 373, 391, 395, 404, 411, 415, 448, 480, 594, 596, 597, 602, 603, 610, 611, 612, 613, 631, 634, 817, 818, 820, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 879, 931, 951, 964, 966, 972, 974, 978, 982, 986], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 338, 363, 418, 845, 947, 951, 952, 983, 986], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 332, 337, 339, 350, 353, 355, 962, 972, 976, 979], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 337, 341, 350, 353, 355, 966, 972, 979], "kernelpca": [5, 363, 367, 483, 484, 491, 494, 638, 640, 642, 814, 941, 973, 974, 978, 981, 982, 983, 984, 985, 986], "take": [5, 8, 27, 42, 49, 52, 61, 69, 73, 81, 83, 85, 99, 107, 135, 137, 140, 144, 151, 156, 162, 187, 188, 203, 223, 224, 230, 236, 240, 244, 245, 252, 253, 256, 259, 260, 261, 263, 264, 273, 284, 290, 294, 295, 298, 308, 311, 312, 315, 323, 324, 325, 331, 332, 335, 337, 339, 342, 343, 344, 345, 348, 350, 351, 360, 362, 363, 365, 366, 367, 369, 370, 371, 372, 374, 388, 394, 397, 399, 400, 402, 407, 408, 409, 411, 413, 419, 469, 483, 488, 489, 490, 496, 497, 531, 542, 545, 546, 548, 549, 550, 560, 561, 566, 570, 571, 574, 582, 593, 599, 621, 623, 624, 625, 626, 629, 641, 642, 649, 655, 657, 659, 669, 678, 679, 687, 691, 692, 705, 720, 723, 727, 728, 729, 730, 732, 733, 736, 737, 746, 747, 751, 752, 760, 764, 772, 790, 791, 792, 794, 796, 797, 798, 799, 800, 812, 842, 843, 847, 848, 849, 850, 851, 852, 853, 871, 901, 920, 923, 927, 928, 930, 931, 932, 934, 936, 937, 938, 941, 946, 947, 955, 957, 961, 963, 969, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "exact": [5, 7, 75, 90, 140, 183, 211, 253, 319, 323, 324, 331, 337, 339, 346, 348, 349, 350, 362, 371, 372, 385, 432, 433, 434, 438, 446, 484, 485, 491, 511, 512, 588, 592, 596, 642, 746, 760, 769, 770, 771, 849, 852, 920, 923, 927, 928, 937, 941, 945, 946, 979, 980, 982], "usp": 5, "digit": [5, 26, 32, 47, 66, 79, 122, 131, 148, 170, 186, 195, 198, 203, 210, 211, 233, 234, 237, 257, 262, 267, 269, 270, 286, 330, 337, 343, 362, 368, 369, 371, 392, 396, 397, 452, 491, 494, 499, 516, 608, 638, 639, 640, 641, 642, 654, 655, 663, 667, 668, 686, 740, 742, 770, 774, 790, 797, 804, 808, 809, 818, 828, 833, 840, 843, 852, 859, 860, 861, 920, 926, 928, 931, 934, 936, 944, 957, 961, 964, 965, 968, 976], "reproduc": [5, 12, 55, 99, 151, 156, 167, 244, 271, 324, 326, 336, 337, 339, 340, 345, 348, 350, 356, 362, 366, 367, 370, 374, 391, 404, 410, 419, 424, 438, 441, 442, 445, 447, 453, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 557, 558, 560, 561, 584, 589, 590, 591, 592, 596, 597, 600, 602, 603, 604, 610, 611, 612, 613, 616, 617, 618, 621, 626, 628, 629, 639, 640, 642, 643, 644, 740, 744, 745, 748, 749, 750, 751, 752, 758, 760, 761, 762, 763, 764, 765, 766, 772, 773, 774, 778, 779, 782, 793, 797, 804, 805, 806, 813, 825, 836, 839, 840, 847, 848, 849, 852, 883, 884, 902, 905, 923, 951, 954, 972, 980, 985, 986], "sect": 5, "bak\u0131r": [5, 367, 485], "g\u00f6khan": [5, 367, 485], "h": [5, 6, 44, 53, 85, 86, 98, 99, 100, 116, 137, 151, 223, 258, 261, 268, 275, 284, 292, 294, 312, 334, 343, 362, 364, 367, 368, 369, 370, 373, 395, 469, 482, 485, 488, 490, 497, 503, 517, 518, 532, 540, 557, 558, 639, 643, 654, 658, 706, 783, 787, 788, 789, 794, 804, 819, 828, 923, 925, 927, 928, 929, 931, 933, 935, 936, 945, 947, 962, 978, 983, 987, 988], "jason": [5, 367, 485, 843, 978, 980, 984, 987], "weston": [5, 367, 485, 543, 544, 843], "bernhard": [5, 367, 485, 779, 814, 843, 932, 937, 946, 978], "sch\u00f6lkopf": [5, 367, 485, 814, 937, 941, 946], "pre": [5, 65, 108, 151, 168, 273, 312, 326, 335, 337, 350, 353, 364, 366, 367, 369, 370, 371, 373, 374, 394, 395, 397, 409, 483, 485, 640, 662, 712, 811, 852, 931, 936, 941, 946, 947, 951, 952, 968, 975, 980, 986], "advanc": [5, 148, 205, 207, 235, 325, 362, 367, 439, 451, 485, 582, 589, 732, 744, 797, 806, 809, 828, 856, 923, 934, 941, 955, 969, 974], "neural": [5, 6, 28, 235, 270, 326, 348, 350, 356, 366, 367, 369, 374, 483, 485, 488, 490, 497, 517, 518, 589, 595, 646, 690, 744, 797, 804, 805, 806, 814, 923, 927, 928, 929, 931, 934, 937, 941, 945, 947, 951, 953, 955, 962, 967, 968, 972, 984], "system": [5, 90, 235, 242, 319, 323, 324, 325, 332, 334, 337, 338, 339, 340, 345, 348, 353, 362, 367, 369, 373, 395, 428, 485, 489, 493, 500, 589, 595, 600, 601, 604, 605, 606, 632, 633, 675, 705, 718, 744, 797, 842, 843, 899, 927, 931, 934, 943, 951, 952, 955, 966, 972, 980, 981], "16": [5, 18, 25, 39, 46, 47, 50, 61, 73, 85, 88, 128, 152, 172, 178, 179, 180, 197, 199, 200, 211, 214, 237, 239, 257, 271, 273, 277, 280, 311, 316, 332, 334, 335, 343, 349, 353, 354, 355, 366, 367, 370, 393, 428, 447, 452, 484, 485, 520, 539, 545, 546, 557, 558, 589, 600, 601, 604, 605, 606, 607, 632, 633, 759, 764, 774, 823, 848, 856, 920, 927, 931, 941, 946, 949, 957, 966, 970, 972, 973, 977, 978, 980, 981], "2004": [5, 235, 332, 334, 362, 364, 367, 423, 485, 557, 558, 639, 643, 655, 692, 732, 843, 925, 927, 928, 933, 946, 964], "449": [5, 367, 485], "456": [5, 367, 485], "author": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 25, 27, 29, 33, 35, 36, 38, 42, 43, 44, 48, 49, 50, 51, 52, 56, 60, 61, 62, 64, 65, 66, 68, 69, 75, 85, 87, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 117, 118, 133, 135, 136, 138, 139, 140, 141, 142, 144, 147, 156, 158, 159, 161, 164, 166, 167, 168, 170, 171, 172, 173, 179, 180, 181, 183, 184, 186, 187, 194, 195, 196, 197, 199, 200, 201, 202, 204, 206, 209, 211, 212, 213, 215, 221, 223, 224, 234, 236, 238, 239, 241, 248, 252, 253, 255, 258, 265, 266, 268, 271, 273, 274, 276, 277, 278, 287, 288, 289, 290, 292, 306, 310, 311, 312, 331, 337, 341, 345, 348, 350, 351, 366, 401, 484, 815, 923, 949, 951, 975], "fr": [5, 7, 8, 9, 10, 22, 23, 27, 33, 38, 50, 52, 69, 75, 141, 158, 164, 166, 170, 172, 173, 184, 200, 201, 206, 209, 236, 238, 241, 248, 265, 278, 306, 310, 311, 312, 481, 487, 608, 614, 635, 636, 707, 708, 929, 931], "licenc": [5, 331], "bsd": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 25, 27, 28, 29, 33, 35, 36, 38, 41, 42, 43, 44, 47, 48, 49, 50, 52, 56, 60, 61, 62, 64, 65, 67, 68, 69, 75, 80, 81, 85, 87, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 117, 118, 133, 135, 136, 138, 139, 140, 141, 142, 144, 147, 156, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 184, 186, 187, 195, 196, 197, 200, 201, 202, 204, 206, 209, 211, 212, 213, 215, 221, 223, 236, 239, 241, 248, 252, 253, 255, 261, 262, 263, 265, 266, 268, 271, 273, 274, 275, 276, 277, 278, 287, 288, 289, 290, 292, 302, 303, 306, 307, 310, 311, 312, 343], "claus": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 23, 25, 27, 28, 29, 33, 35, 36, 38, 41, 42, 43, 44, 47, 48, 49, 50, 52, 56, 60, 61, 62, 64, 65, 67, 68, 69, 75, 80, 81, 85, 87, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 117, 118, 133, 135, 136, 138, 139, 140, 141, 142, 144, 147, 156, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 184, 186, 187, 195, 196, 197, 200, 201, 206, 211, 212, 213, 215, 221, 223, 236, 241, 248, 252, 253, 255, 261, 262, 263, 265, 266, 268, 273, 274, 275, 276, 277, 278, 302, 303, 306, 307, 310, 311, 312], "normal": [5, 12, 16, 18, 24, 26, 31, 33, 36, 40, 42, 52, 56, 57, 61, 67, 69, 71, 72, 73, 77, 78, 86, 91, 99, 100, 102, 110, 111, 114, 115, 128, 138, 141, 142, 147, 148, 150, 151, 157, 158, 159, 160, 161, 163, 169, 172, 174, 177, 181, 182, 183, 185, 193, 202, 215, 221, 226, 227, 229, 232, 235, 241, 258, 259, 272, 274, 278, 281, 284, 290, 298, 311, 312, 319, 326, 329, 332, 333, 334, 337, 342, 346, 349, 350, 359, 360, 362, 363, 365, 368, 369, 370, 374, 391, 399, 401, 402, 403, 412, 414, 415, 425, 432, 433, 434, 439, 446, 462, 465, 469, 476, 477, 483, 486, 491, 492, 494, 498, 499, 502, 503, 504, 507, 508, 509, 510, 512, 513, 514, 515, 516, 529, 530, 532, 538, 539, 540, 541, 561, 575, 577, 589, 600, 601, 604, 605, 606, 608, 609, 614, 615, 619, 622, 626, 630, 637, 641, 645, 647, 653, 654, 656, 668, 673, 675, 683, 685, 690, 694, 698, 699, 701, 704, 705, 706, 710, 719, 741, 742, 743, 749, 750, 774, 776, 785, 787, 793, 794, 797, 808, 809, 812, 813, 816, 817, 818, 821, 822, 823, 824, 825, 826, 828, 832, 833, 835, 836, 837, 838, 842, 843, 855, 856, 857, 858, 883, 884, 888, 907, 908, 913, 914, 920, 925, 927, 928, 929, 930, 933, 937, 942, 944, 946, 947, 962, 964, 965, 966, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "pixel": [5, 6, 13, 29, 43, 44, 49, 85, 97, 131, 148, 156, 210, 233, 270, 271, 334, 362, 367, 369, 370, 371, 443, 444, 445, 514, 535, 536, 557, 558, 584, 934, 936, 947, 962, 965], "train_test_split": [5, 6, 7, 10, 22, 23, 25, 28, 29, 65, 69, 78, 90, 98, 104, 105, 109, 110, 111, 112, 113, 114, 117, 129, 130, 150, 151, 153, 154, 156, 174, 179, 186, 187, 194, 195, 197, 207, 218, 219, 229, 232, 233, 238, 242, 244, 248, 252, 261, 262, 268, 270, 271, 275, 277, 278, 280, 281, 282, 291, 314, 318, 319, 342, 349, 363, 366, 369, 388, 389, 508, 510, 517, 518, 647, 648, 650, 652, 746, 776, 779, 797, 805, 806, 808, 857, 858, 920, 921, 931, 933, 934, 939, 941, 946, 962, 969, 972, 973, 975, 976, 977, 978, 979, 981, 985], "data_id": [5, 108, 140, 151, 179, 197, 207, 331, 446], "41082": 5, "return_x_i": [5, 7, 14, 53, 64, 65, 66, 67, 85, 108, 109, 121, 123, 124, 125, 129, 146, 147, 153, 156, 164, 166, 167, 168, 170, 175, 176, 186, 194, 195, 207, 214, 218, 219, 231, 234, 237, 242, 243, 250, 252, 255, 262, 269, 270, 271, 278, 280, 282, 284, 285, 290, 301, 312, 314, 330, 342, 343, 349, 356, 362, 363, 366, 369, 371, 438, 439, 440, 441, 442, 444, 445, 446, 447, 450, 451, 452, 454, 455, 460, 482, 483, 484, 485, 508, 511, 512, 517, 518, 542, 545, 546, 548, 549, 550, 552, 560, 569, 570, 572, 573, 588, 589, 608, 609, 618, 623, 624, 625, 638, 639, 640, 641, 651, 737, 749, 750, 752, 776, 781, 792, 797, 800, 856, 857, 858, 921, 926, 931, 932, 933, 934, 941, 957, 961, 962, 964, 965, 969, 978, 980, 982, 985], "idea": [5, 49, 73, 74, 133, 140, 151, 180, 199, 258, 298, 314, 323, 324, 337, 342, 343, 364, 365, 366, 367, 368, 369, 371, 557, 558, 927, 928, 931, 934, 937, 950, 955, 966], "noisi": [5, 30, 45, 57, 86, 129, 135, 141, 178, 181, 183, 202, 209, 227, 236, 242, 244, 245, 278, 316, 317, 319, 362, 370, 373, 395, 400, 471, 474, 884, 926, 928, 934, 946, 951], "100": [5, 7, 10, 12, 15, 16, 18, 23, 25, 27, 31, 33, 38, 46, 49, 52, 56, 61, 65, 66, 69, 72, 73, 85, 87, 88, 95, 100, 114, 117, 120, 136, 140, 143, 144, 151, 152, 154, 156, 158, 159, 161, 163, 165, 169, 170, 171, 173, 178, 179, 180, 181, 188, 189, 190, 192, 194, 195, 201, 202, 204, 209, 210, 211, 212, 216, 221, 223, 227, 230, 231, 233, 235, 238, 240, 245, 246, 249, 258, 259, 260, 271, 274, 275, 277, 283, 291, 292, 296, 297, 299, 300, 301, 305, 306, 308, 310, 311, 314, 317, 318, 323, 325, 332, 334, 337, 339, 342, 343, 359, 362, 363, 366, 367, 368, 369, 370, 388, 392, 396, 399, 421, 422, 428, 440, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 478, 480, 481, 484, 486, 487, 489, 494, 495, 496, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 560, 581, 582, 583, 589, 590, 591, 592, 596, 597, 598, 599, 602, 603, 608, 609, 610, 611, 612, 613, 615, 617, 619, 621, 630, 631, 634, 638, 639, 640, 641, 643, 695, 744, 745, 748, 772, 773, 778, 783, 784, 785, 787, 788, 789, 793, 805, 806, 824, 826, 837, 920, 921, 924, 928, 931, 932, 938, 941, 943, 957, 961, 965, 966, 980, 981, 982, 985, 986], "nois": [5, 10, 13, 19, 20, 25, 28, 30, 36, 40, 45, 48, 50, 56, 57, 62, 69, 78, 85, 86, 88, 90, 93, 100, 102, 111, 115, 116, 134, 135, 140, 148, 158, 160, 161, 163, 168, 169, 174, 177, 178, 181, 182, 184, 196, 202, 204, 206, 208, 209, 212, 235, 243, 248, 249, 265, 268, 269, 275, 281, 305, 316, 317, 319, 333, 339, 342, 360, 362, 367, 369, 371, 373, 395, 402, 461, 463, 464, 465, 466, 467, 468, 472, 474, 475, 480, 482, 484, 491, 557, 558, 561, 563, 564, 565, 566, 567, 571, 572, 574, 575, 594, 595, 599, 600, 601, 603, 604, 605, 606, 613, 614, 615, 621, 629, 642, 825, 836, 842, 924, 926, 927, 928, 931, 934, 944, 964, 965, 973, 978, 983, 985, 986], "approach": [5, 8, 53, 58, 61, 89, 133, 135, 146, 151, 154, 161, 167, 179, 181, 187, 197, 199, 310, 311, 312, 325, 336, 337, 343, 346, 350, 353, 356, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 388, 394, 398, 402, 412, 470, 482, 532, 539, 585, 608, 609, 624, 625, 777, 793, 884, 920, 921, 927, 928, 931, 932, 934, 935, 941, 945, 946, 950, 951, 955, 959, 964, 965, 976], "copi": [5, 12, 16, 40, 57, 69, 88, 102, 146, 147, 151, 152, 153, 165, 172, 185, 195, 197, 200, 253, 287, 288, 290, 292, 311, 315, 324, 334, 337, 339, 341, 342, 343, 348, 350, 385, 388, 391, 393, 394, 395, 397, 399, 404, 409, 432, 433, 434, 435, 450, 452, 460, 482, 483, 484, 485, 491, 498, 503, 504, 509, 511, 512, 522, 540, 547, 557, 558, 560, 561, 578, 580, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 615, 621, 622, 624, 629, 631, 634, 635, 636, 681, 718, 746, 760, 788, 789, 803, 811, 814, 817, 818, 819, 820, 824, 825, 826, 828, 830, 832, 833, 834, 835, 836, 837, 838, 842, 843, 847, 849, 850, 851, 852, 853, 862, 865, 867, 868, 902, 904, 905, 941, 946, 947, 952, 958, 961, 966, 972, 975, 978, 980, 981, 982, 984, 985, 986, 987], "add": [5, 12, 15, 16, 23, 24, 25, 29, 30, 36, 40, 50, 69, 73, 74, 78, 86, 107, 110, 129, 133, 135, 140, 141, 142, 146, 147, 161, 163, 168, 174, 180, 182, 194, 202, 206, 210, 212, 242, 244, 245, 253, 265, 275, 277, 280, 282, 283, 301, 305, 306, 311, 323, 335, 336, 337, 338, 339, 341, 343, 345, 350, 353, 360, 366, 369, 370, 371, 465, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 552, 577, 578, 580, 582, 608, 609, 644, 647, 767, 788, 789, 844, 874, 899, 920, 921, 930, 937, 941, 944, 945, 952, 964, 965, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "corrupt": [5, 93, 163, 185, 196, 348, 804, 927, 939], "uncorrupt": 5, "base": [5, 12, 14, 16, 23, 24, 25, 45, 51, 52, 53, 62, 64, 65, 69, 73, 85, 86, 98, 100, 110, 111, 112, 116, 118, 121, 127, 130, 135, 140, 141, 143, 152, 153, 154, 168, 179, 180, 187, 196, 197, 199, 206, 213, 232, 233, 238, 253, 266, 271, 273, 274, 276, 278, 282, 284, 292, 296, 311, 314, 323, 324, 326, 331, 332, 333, 334, 335, 338, 339, 340, 345, 350, 351, 352, 360, 363, 367, 368, 370, 372, 373, 374, 388, 395, 397, 398, 399, 400, 402, 406, 407, 411, 413, 414, 415, 416, 417, 437, 451, 458, 459, 482, 483, 485, 486, 487, 488, 489, 491, 496, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 528, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 556, 557, 558, 560, 561, 566, 567, 568, 571, 574, 582, 583, 585, 586, 595, 596, 598, 600, 601, 602, 604, 605, 606, 614, 619, 621, 622, 623, 624, 625, 630, 632, 633, 635, 636, 637, 640, 642, 654, 667, 675, 684, 685, 686, 688, 690, 704, 705, 706, 742, 746, 748, 749, 750, 752, 753, 755, 760, 764, 765, 766, 772, 778, 779, 782, 790, 791, 792, 794, 796, 798, 799, 800, 805, 806, 810, 813, 820, 821, 823, 827, 836, 839, 840, 842, 843, 844, 849, 850, 851, 852, 853, 855, 856, 857, 858, 870, 878, 892, 899, 900, 920, 922, 923, 925, 926, 928, 931, 932, 933, 934, 935, 936, 937, 938, 941, 943, 944, 945, 946, 947, 950, 951, 952, 953, 955, 961, 968, 972, 974, 975, 976, 977, 978, 979, 980, 983], "solv": [5, 6, 61, 135, 168, 211, 235, 336, 337, 338, 339, 342, 348, 362, 364, 366, 367, 372, 397, 403, 412, 428, 481, 487, 488, 489, 493, 495, 496, 497, 498, 585, 587, 596, 602, 604, 605, 614, 615, 620, 622, 624, 627, 635, 636, 637, 778, 847, 848, 851, 884, 922, 925, 927, 928, 931, 932, 945, 946, 947, 950, 951, 955, 959, 962, 966, 978, 982, 985], "x_train": [5, 6, 7, 8, 10, 22, 23, 24, 25, 28, 29, 64, 65, 69, 71, 77, 78, 90, 98, 99, 102, 105, 109, 110, 111, 112, 113, 114, 117, 125, 126, 129, 130, 141, 142, 143, 144, 150, 151, 152, 153, 154, 156, 159, 163, 174, 176, 177, 180, 186, 187, 193, 194, 195, 197, 207, 214, 218, 219, 223, 225, 229, 232, 233, 238, 242, 244, 248, 252, 259, 261, 262, 268, 270, 271, 275, 277, 278, 280, 281, 282, 290, 291, 297, 310, 314, 318, 319, 323, 331, 339, 342, 349, 363, 366, 369, 388, 389, 459, 508, 509, 510, 517, 518, 647, 648, 650, 652, 774, 776, 779, 797, 805, 806, 808, 857, 858, 921, 931, 933, 934, 935, 937, 939, 941, 945, 946, 961, 962, 969], "x_test": [5, 6, 7, 8, 10, 22, 23, 24, 25, 28, 29, 64, 65, 69, 71, 77, 78, 90, 98, 99, 102, 104, 105, 109, 110, 111, 112, 113, 114, 117, 125, 126, 129, 130, 140, 143, 150, 151, 152, 153, 154, 156, 159, 163, 169, 174, 176, 177, 185, 186, 187, 193, 194, 195, 197, 207, 209, 214, 218, 219, 223, 229, 232, 233, 238, 242, 244, 248, 249, 252, 259, 261, 262, 268, 270, 271, 275, 277, 278, 280, 281, 282, 290, 291, 297, 310, 314, 316, 317, 318, 319, 323, 331, 339, 342, 349, 363, 366, 369, 389, 420, 421, 422, 423, 424, 425, 426, 459, 508, 509, 510, 517, 518, 647, 648, 650, 652, 774, 776, 779, 797, 805, 806, 808, 857, 858, 921, 931, 933, 934, 935, 937, 941, 945, 946, 961, 962, 964, 969, 972], "y_train": [5, 6, 7, 8, 10, 22, 23, 24, 25, 28, 29, 64, 65, 69, 77, 78, 90, 98, 99, 102, 105, 109, 110, 111, 112, 113, 114, 117, 125, 126, 129, 130, 141, 142, 143, 144, 150, 151, 152, 153, 154, 156, 159, 163, 174, 176, 177, 180, 186, 187, 194, 195, 207, 214, 218, 219, 223, 229, 232, 233, 238, 242, 244, 248, 252, 261, 262, 268, 270, 271, 275, 278, 280, 281, 282, 287, 288, 290, 291, 292, 310, 314, 318, 319, 323, 331, 339, 342, 349, 363, 366, 369, 388, 389, 508, 509, 510, 517, 518, 647, 648, 650, 652, 774, 776, 779, 797, 805, 806, 808, 857, 858, 921, 931, 933, 934, 939, 941, 946, 961, 962, 969], "y_test": [5, 6, 7, 8, 10, 22, 23, 24, 25, 28, 29, 64, 65, 69, 77, 78, 90, 98, 99, 102, 104, 105, 109, 110, 111, 112, 113, 114, 117, 125, 126, 129, 130, 143, 150, 151, 152, 153, 154, 156, 163, 174, 176, 179, 185, 186, 187, 194, 195, 197, 207, 214, 218, 219, 223, 229, 232, 233, 238, 242, 244, 248, 252, 261, 262, 268, 270, 271, 275, 278, 280, 281, 282, 290, 291, 310, 314, 318, 319, 331, 342, 349, 363, 366, 369, 389, 508, 509, 510, 517, 518, 647, 648, 650, 652, 774, 776, 779, 797, 805, 806, 808, 857, 858, 931, 933, 934, 941, 946, 961, 962, 969, 972], "stratifi": [5, 90, 105, 114, 129, 153, 194, 207, 219, 230, 235, 238, 244, 261, 262, 280, 339, 350, 501, 509, 517, 518, 552, 609, 616, 618, 626, 746, 749, 750, 752, 760, 761, 762, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 779, 782, 797, 805, 902, 931, 934, 961, 977, 978, 979, 981, 982, 985], "train_siz": [5, 7, 10, 117, 136, 156, 195, 212, 237, 248, 282, 285, 306, 748, 752, 763, 766, 772, 774, 926, 961, 972, 973, 978, 979], "1_000": [5, 44, 66, 90, 135, 140, 142, 152, 210, 232, 651], "rng": [5, 19, 20, 28, 33, 46, 74, 78, 85, 87, 93, 100, 111, 114, 115, 117, 135, 136, 139, 141, 142, 144, 146, 147, 150, 153, 158, 159, 160, 161, 168, 173, 180, 181, 186, 193, 206, 212, 214, 215, 221, 230, 238, 241, 246, 247, 268, 277, 281, 282, 284, 287, 288, 292, 301, 306, 316, 317, 319, 324, 339, 342, 420, 424, 425, 426, 593, 599, 620, 622, 628, 758, 783, 784, 785, 787, 788, 789, 793, 796, 798, 799, 800, 825, 836, 839, 840, 842, 843, 844, 853, 957], "randomst": [5, 13, 19, 20, 22, 28, 33, 46, 56, 74, 75, 78, 85, 87, 93, 100, 110, 111, 114, 115, 117, 129, 135, 136, 139, 141, 142, 144, 146, 147, 150, 153, 158, 159, 160, 161, 168, 173, 180, 181, 186, 193, 202, 206, 212, 215, 221, 224, 230, 238, 241, 242, 244, 245, 246, 247, 268, 274, 276, 277, 281, 282, 284, 287, 288, 292, 301, 306, 316, 317, 339, 342, 346, 350, 367, 374, 391, 394, 397, 399, 401, 402, 403, 404, 408, 409, 410, 412, 419, 420, 424, 425, 426, 438, 441, 442, 445, 447, 453, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 533, 534, 557, 558, 560, 561, 577, 582, 584, 589, 590, 591, 592, 593, 596, 597, 599, 600, 602, 603, 604, 608, 609, 610, 611, 612, 613, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 637, 639, 640, 641, 642, 643, 644, 645, 651, 730, 740, 744, 745, 748, 749, 750, 751, 752, 758, 760, 761, 762, 763, 764, 765, 766, 772, 773, 774, 778, 779, 782, 783, 784, 785, 787, 788, 789, 793, 797, 804, 805, 806, 813, 825, 836, 839, 840, 842, 843, 844, 847, 848, 849, 852, 853, 855, 856, 857, 858, 870, 883, 884, 900, 902, 905, 941, 957, 968], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 88, 197, 246, 330, 339, 340, 349, 350, 366, 525, 961, 962, 972, 979, 980, 981, 985], "qualit": [5, 6, 49, 56, 111, 179, 285, 332, 362, 390, 651, 962, 987], "assess": [5, 33, 55, 109, 111, 151, 179, 197, 215, 231, 232, 234, 238, 360, 369, 651, 692, 930, 931, 937, 952, 987], "plot_digit": 5, "small": [5, 11, 20, 25, 35, 44, 45, 49, 71, 75, 78, 82, 90, 100, 102, 108, 110, 111, 140, 142, 151, 152, 159, 165, 169, 170, 180, 185, 194, 196, 197, 223, 235, 242, 247, 255, 266, 269, 271, 273, 275, 277, 282, 287, 292, 298, 303, 311, 325, 330, 332, 334, 337, 340, 346, 350, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 392, 394, 396, 397, 399, 408, 409, 413, 425, 446, 448, 488, 490, 497, 505, 506, 507, 511, 512, 514, 532, 539, 540, 552, 557, 558, 600, 604, 605, 606, 608, 609, 629, 632, 633, 695, 749, 750, 764, 773, 776, 805, 806, 813, 840, 849, 852, 884, 920, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 938, 939, 941, 943, 944, 947, 952, 955, 964, 965, 972, 973, 975, 977, 978, 979, 980, 981, 983, 984, 986, 987, 988], "img": [5, 46, 61, 456, 536], "ravel": [5, 9, 13, 15, 16, 18, 24, 27, 31, 38, 49, 50, 53, 73, 95, 100, 102, 107, 111, 116, 117, 118, 126, 135, 137, 139, 140, 141, 142, 151, 158, 169, 170, 172, 179, 192, 193, 200, 204, 206, 210, 212, 219, 223, 225, 238, 242, 244, 253, 258, 259, 265, 266, 268, 269, 270, 271, 275, 276, 284, 292, 297, 298, 302, 303, 304, 305, 307, 308, 310, 316, 317, 415, 443, 444, 445, 581, 668, 918, 931], "imshow": [5, 6, 13, 27, 29, 36, 42, 43, 44, 46, 47, 49, 50, 53, 75, 80, 85, 88, 96, 137, 138, 139, 143, 154, 170, 195, 200, 214, 246, 257, 271, 287, 288, 298, 304, 307, 331, 582, 647, 962, 963, 986], "grei": [5, 31, 245, 273, 332], "off": [5, 12, 13, 33, 35, 36, 43, 44, 48, 49, 71, 75, 77, 85, 200, 211, 214, 229, 234, 236, 237, 273, 288, 292, 298, 308, 310, 332, 337, 339, 362, 364, 369, 371, 393, 503, 504, 509, 510, 538, 541, 584, 606, 642, 665, 744, 745, 746, 749, 750, 760, 771, 888, 930, 936, 946, 952, 972, 976, 977, 979], "fontsiz": [5, 8, 10, 14, 31, 46, 55, 82, 88, 107, 128, 138, 139, 141, 144, 152, 159, 169, 178, 190, 200, 201, 224, 230, 239, 240, 241, 246, 247, 271, 277, 305, 861], "mse": [5, 7, 71, 72, 111, 112, 146, 147, 179, 181, 185, 249, 597, 603, 699, 931, 947, 983, 985], "quantit": [5, 6, 23, 56, 111, 121, 231, 249, 334, 962], "nmse": [5, 249], "2f": [5, 8, 11, 18, 28, 35, 38, 40, 42, 46, 48, 57, 59, 62, 77, 83, 88, 95, 111, 117, 118, 128, 151, 152, 154, 156, 159, 168, 170, 175, 179, 194, 195, 196, 197, 206, 210, 234, 238, 239, 241, 243, 244, 245, 261, 262, 268, 275, 278, 284, 298, 310, 311, 319, 363, 366, 369, 772], "linear": [5, 10, 13, 15, 25, 26, 27, 28, 33, 52, 68, 69, 78, 85, 90, 94, 98, 102, 104, 116, 118, 121, 123, 124, 126, 128, 131, 133, 139, 141, 146, 147, 149, 150, 152, 156, 161, 165, 167, 168, 169, 174, 176, 177, 180, 181, 187, 191, 193, 195, 196, 197, 198, 201, 203, 209, 212, 213, 214, 217, 229, 231, 232, 233, 235, 238, 240, 241, 242, 243, 244, 245, 249, 258, 261, 262, 271, 273, 274, 275, 282, 283, 293, 295, 298, 299, 300, 302, 303, 306, 307, 310, 316, 317, 324, 326, 329, 333, 334, 335, 339, 340, 342, 350, 352, 360, 362, 365, 366, 367, 368, 369, 370, 371, 372, 374, 393, 405, 415, 417, 425, 432, 433, 434, 446, 451, 452, 462, 465, 471, 474, 482, 483, 484, 485, 486, 489, 491, 493, 494, 498, 499, 500, 504, 516, 532, 539, 543, 544, 556, 559, 564, 570, 585, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 637, 638, 639, 640, 641, 642, 643, 657, 666, 699, 702, 714, 716, 723, 734, 746, 757, 761, 771, 774, 788, 789, 793, 797, 804, 805, 806, 809, 814, 815, 818, 821, 823, 825, 826, 827, 828, 836, 840, 847, 848, 849, 850, 851, 852, 853, 920, 922, 923, 924, 926, 931, 934, 935, 936, 937, 938, 939, 945, 946, 951, 953, 955, 957, 960, 961, 966, 967, 968, 972, 973, 975, 976, 977, 978, 979, 980, 983, 984, 985, 986], "radial": [5, 90, 135, 140, 142, 298, 329, 402, 572, 641, 929, 946, 968], "rbf": [5, 6, 10, 11, 15, 27, 28, 90, 119, 126, 135, 136, 137, 139, 140, 141, 142, 144, 148, 193, 205, 206, 212, 233, 235, 237, 240, 292, 293, 295, 302, 304, 305, 329, 363, 367, 369, 402, 452, 454, 485, 491, 560, 561, 562, 563, 566, 569, 570, 571, 573, 574, 589, 590, 591, 592, 593, 626, 641, 714, 723, 725, 746, 757, 760, 766, 808, 828, 842, 843, 847, 849, 850, 851, 852, 853, 920, 923, 924, 928, 931, 937, 941, 944, 957, 962, 968, 978, 983], "decomposit": [5, 6, 14, 16, 53, 64, 66, 67, 68, 78, 81, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 116, 199, 200, 202, 211, 213, 217, 234, 257, 262, 278, 284, 311, 325, 326, 330, 343, 346, 350, 359, 363, 369, 399, 401, 402, 403, 412, 432, 433, 434, 445, 499, 506, 561, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 622, 623, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 744, 745, 797, 804, 807, 810, 826, 856, 883, 884, 927, 928, 931, 948, 951, 953, 960, 962, 967, 968, 972, 973, 974, 975, 976, 977, 978, 979], "32": [5, 47, 150, 153, 214, 284, 331, 335, 342, 350, 359, 369, 370, 396, 514, 515, 532, 539, 584, 626, 827, 867, 868, 896, 939, 965, 972, 975, 978, 980, 981, 984, 985, 986], "kernel_pca": [5, 90, 363], "400": [5, 24, 85, 98, 113, 117, 135, 147, 185, 204, 247, 269, 311, 332, 367, 445, 966], "1e": [5, 6, 7, 10, 16, 24, 42, 85, 135, 138, 140, 141, 142, 143, 144, 146, 151, 159, 172, 179, 180, 186, 193, 197, 202, 206, 212, 216, 221, 224, 227, 233, 243, 246, 270, 283, 291, 296, 298, 306, 310, 343, 374, 394, 397, 402, 409, 412, 421, 422, 428, 432, 433, 434, 481, 482, 483, 486, 487, 488, 489, 490, 492, 493, 495, 496, 497, 509, 510, 511, 512, 542, 547, 561, 563, 564, 565, 569, 570, 572, 573, 575, 577, 588, 590, 591, 592, 594, 595, 596, 597, 598, 599, 602, 603, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 637, 639, 640, 641, 642, 643, 644, 645, 677, 690, 734, 744, 745, 760, 783, 784, 785, 786, 787, 788, 789, 797, 805, 806, 813, 842, 843, 847, 848, 849, 850, 851, 852, 853, 917, 920, 931, 935, 939, 941, 945, 962, 966, 980, 985, 986, 987], "fit_inverse_transform": [5, 90, 485, 981], "5e": [5, 85, 164, 545, 546, 548], "inde": [5, 7, 23, 35, 36, 49, 53, 75, 78, 90, 102, 132, 133, 135, 151, 153, 158, 167, 168, 179, 181, 237, 238, 242, 244, 253, 273, 278, 311, 319, 323, 336, 342, 349, 350, 351, 364, 369, 517, 518, 927, 941, 945, 986], "least": [5, 14, 73, 74, 76, 88, 109, 112, 143, 148, 157, 158, 172, 179, 181, 184, 187, 196, 197, 210, 235, 252, 278, 282, 283, 298, 311, 312, 323, 330, 332, 334, 336, 337, 341, 343, 345, 348, 350, 351, 361, 362, 364, 365, 366, 367, 369, 370, 371, 372, 373, 395, 398, 400, 406, 407, 408, 411, 424, 432, 433, 434, 435, 444, 466, 481, 487, 489, 491, 492, 493, 495, 496, 497, 498, 499, 507, 508, 509, 510, 512, 514, 515, 516, 543, 552, 585, 593, 596, 598, 600, 601, 602, 603, 604, 605, 606, 607, 613, 614, 615, 616, 617, 618, 619, 621, 622, 624, 626, 628, 629, 630, 632, 633, 634, 635, 636, 637, 642, 647, 662, 666, 668, 734, 747, 751, 752, 758, 760, 761, 762, 764, 765, 767, 769, 772, 773, 774, 805, 806, 809, 820, 828, 852, 855, 856, 857, 858, 876, 894, 921, 924, 928, 931, 934, 943, 945, 946, 947, 952, 953, 955, 964, 968, 972, 974, 975, 978, 979, 983], "hope": [5, 197, 350, 361, 981], "remov": [5, 14, 15, 16, 50, 64, 69, 133, 146, 147, 151, 154, 236, 273, 280, 281, 282, 310, 311, 314, 319, 329, 332, 336, 337, 338, 341, 342, 346, 350, 362, 363, 366, 369, 370, 372, 373, 388, 393, 395, 397, 399, 400, 407, 409, 438, 439, 476, 484, 485, 487, 489, 491, 496, 503, 504, 505, 506, 507, 508, 514, 515, 517, 518, 519, 520, 529, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 561, 580, 582, 583, 588, 594, 600, 601, 604, 605, 606, 608, 614, 615, 621, 642, 649, 690, 717, 727, 728, 729, 772, 795, 807, 808, 812, 813, 821, 825, 826, 828, 836, 850, 851, 853, 855, 856, 857, 858, 862, 878, 879, 881, 892, 921, 928, 934, 947, 953, 958, 968, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "think": [5, 33, 152, 337, 368, 930, 952, 954, 955, 957], "happen": [5, 104, 167, 273, 311, 319, 323, 324, 336, 337, 341, 342, 343, 348, 350, 351, 353, 362, 364, 366, 369, 388, 465, 522, 608, 734, 826, 828, 847, 927, 931, 932, 946, 952, 966, 980, 984, 985, 987, 988], "ridg": [5, 10, 13, 50, 69, 118, 133, 134, 146, 148, 151, 152, 157, 158, 179, 180, 205, 214, 310, 323, 326, 348, 367, 369, 474, 485, 489, 493, 561, 565, 572, 575, 593, 594, 595, 597, 599, 607, 611, 623, 624, 625, 628, 637, 651, 699, 746, 760, 781, 853, 926, 931, 939, 941, 945, 946, 953, 964, 968, 972, 973, 974, 975, 976, 977, 979, 981, 982, 985, 986, 987], "x_reconstructed_kernel_pca": [5, 90], "inverse_transform": [5, 47, 50, 90, 130, 257, 311, 367, 370, 396, 415, 432, 433, 434, 483, 484, 485, 488, 489, 490, 491, 493, 494, 531, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 580, 746, 749, 750, 760, 808, 812, 813, 815, 816, 817, 818, 819, 821, 822, 824, 825, 826, 828, 839, 840, 941, 942, 943, 974, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987], "x_reconstructed_pca": [5, 90], "lower": [5, 15, 24, 27, 28, 30, 53, 72, 78, 85, 87, 93, 98, 99, 102, 107, 111, 114, 135, 137, 139, 141, 152, 153, 164, 165, 169, 179, 180, 181, 182, 192, 199, 203, 209, 210, 214, 223, 227, 234, 235, 237, 238, 242, 243, 245, 248, 257, 259, 260, 275, 278, 284, 290, 298, 304, 310, 311, 312, 315, 332, 337, 360, 361, 362, 365, 366, 367, 368, 369, 370, 373, 395, 398, 414, 417, 448, 459, 482, 484, 491, 494, 503, 509, 510, 511, 512, 513, 538, 539, 541, 553, 561, 563, 564, 565, 567, 569, 570, 572, 573, 575, 582, 583, 585, 587, 627, 629, 662, 666, 674, 677, 683, 688, 744, 745, 794, 796, 798, 799, 800, 802, 849, 850, 851, 854, 871, 926, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 943, 945, 946, 947, 964, 974, 975, 980, 987], "analysi": [5, 7, 9, 23, 26, 32, 52, 58, 84, 86, 87, 89, 90, 92, 94, 108, 148, 151, 152, 168, 200, 220, 232, 235, 236, 240, 254, 273, 278, 311, 326, 329, 332, 334, 337, 339, 351, 359, 362, 364, 369, 370, 374, 390, 397, 398, 423, 425, 426, 432, 433, 435, 452, 454, 462, 465, 481, 482, 483, 484, 485, 487, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 505, 506, 588, 638, 640, 641, 642, 643, 660, 669, 674, 675, 705, 737, 738, 739, 740, 744, 746, 770, 774, 790, 797, 808, 809, 814, 824, 828, 835, 883, 884, 921, 927, 928, 930, 931, 941, 950, 951, 953, 955, 958, 967, 968, 972, 973, 974, 976, 981], "favor": [5, 75, 221, 227, 348, 364, 369, 583, 679, 754, 756, 807, 878, 920, 939, 974, 976, 978, 979, 981, 984, 985, 986, 987, 988], "background": [5, 11, 43, 61, 114, 271, 275, 332, 337, 345, 362, 443, 444, 928, 936, 945, 982], "plot_digits_denois": 5, "dataset": [6, 7, 9, 10, 11, 13, 14, 15, 18, 19, 20, 24, 27, 28, 30, 32, 33, 34, 37, 38, 39, 41, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 62, 65, 66, 67, 68, 69, 73, 74, 75, 78, 84, 88, 89, 90, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 129, 130, 131, 132, 133, 134, 143, 146, 147, 153, 154, 156, 157, 160, 162, 164, 165, 166, 167, 169, 170, 171, 172, 175, 176, 178, 182, 183, 186, 187, 191, 192, 193, 194, 195, 196, 201, 203, 204, 205, 207, 210, 212, 213, 214, 215, 218, 219, 221, 223, 224, 225, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 250, 252, 253, 255, 256, 257, 261, 262, 263, 264, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 296, 298, 299, 300, 301, 302, 306, 307, 308, 311, 312, 313, 314, 316, 317, 318, 319, 324, 325, 326, 339, 340, 341, 343, 349, 350, 352, 353, 356, 358, 359, 360, 362, 363, 366, 367, 368, 369, 370, 371, 377, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 408, 409, 419, 420, 423, 424, 425, 426, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 496, 499, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 533, 534, 538, 539, 540, 542, 543, 544, 545, 546, 548, 549, 550, 552, 553, 560, 561, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 578, 581, 582, 583, 584, 585, 588, 589, 590, 593, 596, 597, 599, 601, 602, 603, 605, 607, 608, 609, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 629, 638, 639, 640, 641, 642, 647, 648, 650, 651, 652, 653, 654, 658, 678, 704, 706, 736, 737, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 790, 791, 792, 794, 796, 797, 798, 799, 800, 801, 804, 805, 806, 808, 809, 812, 813, 821, 822, 826, 828, 829, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 867, 868, 872, 873, 920, 921, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 943, 944, 945, 946, 947, 951, 952, 954, 955, 958, 960, 961, 962, 965, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979], "excerpt": [6, 943, 962], "wild": [6, 330, 443, 444, 458, 459, 962, 968, 972], "aka": [6, 268, 310, 348, 370, 402, 486, 488, 490, 494, 497, 531, 532, 565, 572, 601, 602, 604, 605, 606, 608, 609, 612, 616, 617, 618, 620, 626, 627, 628, 690, 815, 819, 821, 927, 935, 945, 957, 962, 974, 986], "lfw": [6, 332, 443, 444, 962, 972], "vi": [6, 8, 332, 649, 962, 980, 983], "www": [6, 65, 156, 179, 195, 197, 207, 252, 270, 331, 332, 337, 345, 353, 362, 366, 393, 399, 437, 458, 459, 481, 484, 487, 491, 594, 608, 614, 621, 635, 636, 797, 804, 855, 856, 927, 944, 962], "umass": [6, 332, 962], "edu": [6, 8, 11, 16, 42, 109, 142, 156, 161, 199, 224, 234, 258, 266, 277, 331, 332, 334, 362, 399, 437, 452, 458, 459, 460, 484, 591, 594, 599, 608, 616, 617, 626, 629, 632, 633, 783, 785, 786, 787, 797, 804, 840, 842, 855, 856, 927, 929, 962], "funnel": [6, 443, 444, 962], "tgz": [6, 962], "233mb": [6, 962], "randomizedsearchcv": [6, 65, 135, 236, 243, 282, 319, 349, 525, 920, 931, 945, 951, 962, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987], "fetch_lfw_peopl": [6, 332, 962, 987], "classification_report": [6, 29, 64, 130, 233, 271, 287, 288, 931, 962, 966, 974, 976, 980, 981, 982, 984], "confusionmatrixdisplai": [6, 29, 229, 283, 287, 310, 581, 668, 931, 962, 982, 983, 985, 986, 987], "standardscal": [6, 10, 28, 40, 45, 53, 57, 65, 67, 78, 96, 118, 151, 158, 167, 168, 170, 179, 195, 197, 207, 208, 216, 217, 219, 232, 242, 261, 262, 268, 275, 278, 280, 281, 283, 284, 285, 298, 301, 319, 325, 337, 339, 342, 346, 349, 363, 366, 382, 416, 417, 517, 600, 601, 604, 605, 606, 614, 615, 626, 628, 808, 809, 812, 825, 838, 847, 848, 849, 850, 852, 853, 921, 928, 935, 941, 945, 946, 948, 962, 974, 976, 977, 980, 981, 982, 983, 984, 985, 988], "svc": [6, 15, 23, 25, 27, 28, 29, 64, 68, 119, 124, 126, 131, 148, 156, 211, 213, 217, 229, 233, 235, 237, 240, 241, 242, 245, 246, 250, 275, 280, 282, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 307, 308, 310, 323, 339, 343, 350, 356, 363, 366, 369, 418, 465, 505, 647, 648, 650, 652, 746, 763, 775, 777, 808, 844, 845, 847, 849, 919, 920, 926, 929, 931, 932, 941, 957, 961, 962, 964, 969, 972, 973, 974, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986], "util": [6, 8, 10, 11, 44, 51, 56, 80, 118, 135, 179, 181, 187, 195, 201, 209, 214, 224, 241, 243, 253, 275, 280, 290, 298, 310, 324, 326, 331, 332, 335, 337, 338, 339, 340, 348, 349, 350, 358, 362, 363, 366, 367, 370, 403, 418, 521, 522, 523, 527, 620, 649, 746, 768, 774, 775, 815, 920, 926, 929, 931, 932, 941, 942, 951, 955, 958, 962, 968, 972, 973, 975, 976, 978, 979], "loguniform": [6, 135, 243, 920, 962, 982], "disk": [6, 13, 332, 335, 337, 342, 350, 356, 962], "arrai": [6, 7, 8, 10, 11, 12, 13, 15, 18, 29, 30, 31, 36, 40, 42, 44, 49, 56, 57, 59, 64, 66, 74, 77, 83, 86, 87, 99, 110, 112, 114, 117, 120, 124, 133, 136, 137, 138, 143, 158, 172, 173, 176, 179, 180, 186, 196, 200, 201, 206, 210, 216, 219, 221, 222, 223, 225, 226, 230, 231, 233, 235, 239, 240, 252, 266, 276, 280, 284, 288, 294, 301, 310, 317, 318, 319, 323, 324, 330, 331, 332, 337, 338, 339, 340, 342, 343, 345, 347, 348, 349, 350, 356, 359, 362, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 465, 474, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 531, 532, 533, 534, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 863, 864, 865, 867, 868, 869, 872, 873, 881, 882, 883, 884, 885, 886, 888, 889, 890, 893, 894, 895, 902, 903, 904, 905, 906, 907, 908, 909, 917, 918, 921, 926, 927, 929, 931, 932, 934, 935, 937, 938, 941, 942, 943, 945, 946, 947, 950, 955, 961, 962, 963, 964, 965, 966, 968, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "lfw_peopl": [6, 332, 962], "min_faces_per_person": [6, 332, 444, 962], "70": [6, 11, 61, 65, 67, 152, 221, 235, 288, 332, 334, 366, 443, 444, 663, 675, 705, 746, 760, 920, 941, 962], "resiz": [6, 42, 43, 216, 332, 443, 444, 962], "n_sampl": [6, 7, 10, 14, 22, 23, 24, 25, 29, 30, 33, 34, 35, 37, 38, 39, 40, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 64, 69, 71, 72, 73, 74, 75, 78, 83, 85, 86, 90, 93, 98, 99, 101, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 125, 126, 132, 144, 146, 147, 150, 158, 160, 161, 163, 165, 167, 169, 171, 173, 174, 178, 179, 180, 182, 183, 187, 191, 194, 196, 197, 199, 200, 201, 202, 203, 204, 206, 210, 211, 222, 224, 225, 226, 227, 232, 233, 235, 238, 239, 242, 244, 245, 246, 247, 248, 249, 253, 263, 275, 276, 277, 281, 282, 284, 289, 296, 299, 300, 306, 310, 311, 319, 330, 334, 337, 339, 342, 346, 348, 349, 350, 362, 364, 365, 366, 367, 369, 373, 374, 375, 377, 379, 380, 381, 383, 384, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 444, 451, 454, 458, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 571, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 719, 720, 721, 722, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 872, 873, 884, 886, 888, 893, 900, 902, 905, 906, 907, 908, 909, 910, 911, 912, 920, 923, 927, 931, 932, 934, 935, 941, 942, 943, 945, 946, 947, 957, 962, 963, 964, 965, 966, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "w": [6, 12, 13, 15, 27, 31, 36, 38, 41, 44, 53, 59, 92, 95, 146, 163, 178, 183, 196, 213, 221, 222, 223, 226, 227, 246, 271, 283, 284, 303, 306, 312, 319, 332, 334, 343, 356, 362, 363, 367, 369, 370, 374, 379, 383, 388, 415, 419, 422, 424, 432, 433, 434, 473, 488, 490, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 517, 518, 519, 520, 538, 539, 541, 560, 561, 585, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 643, 649, 674, 675, 705, 746, 760, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 790, 791, 794, 795, 798, 799, 805, 806, 840, 842, 843, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 881, 886, 927, 931, 935, 936, 941, 943, 945, 946, 962, 966, 982, 986, 987, 988], "info": [6, 38, 65, 85, 151, 152, 233, 334, 336, 341, 350, 370, 962], "n_featur": [6, 8, 14, 23, 24, 25, 27, 28, 29, 30, 36, 48, 53, 55, 56, 71, 72, 73, 74, 75, 82, 83, 85, 93, 99, 101, 103, 105, 130, 132, 133, 146, 147, 156, 158, 161, 163, 165, 173, 174, 178, 182, 183, 194, 196, 200, 206, 210, 211, 221, 226, 232, 238, 242, 244, 245, 247, 248, 263, 268, 275, 280, 281, 282, 284, 306, 310, 311, 312, 319, 323, 330, 331, 337, 339, 342, 348, 349, 350, 362, 364, 365, 367, 369, 370, 373, 374, 375, 377, 379, 380, 381, 383, 384, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 408, 409, 410, 411, 413, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 439, 440, 441, 442, 444, 451, 454, 458, 459, 462, 465, 466, 469, 471, 473, 474, 476, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 660, 674, 707, 708, 709, 710, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 739, 740, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 808, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 884, 906, 907, 908, 909, 910, 911, 912, 923, 927, 932, 934, 935, 941, 945, 946, 947, 957, 962, 963, 965, 966, 972, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987], "id": [6, 197, 266, 318, 331, 332, 337, 345, 364, 366, 370, 444, 445, 446, 859, 861, 879, 962, 966, 980, 981, 984], "person": [6, 238, 332, 336, 366, 370, 443, 444, 445, 941, 962, 980], "target_nam": [6, 18, 48, 89, 94, 150, 188, 200, 223, 229, 236, 244, 245, 256, 291, 310, 315, 330, 332, 438, 439, 441, 442, 443, 444, 446, 447, 450, 452, 453, 454, 455, 460, 663, 931, 947, 957, 962, 966, 982], "n_class": [6, 27, 33, 82, 83, 99, 101, 105, 107, 130, 132, 194, 200, 211, 213, 223, 242, 243, 244, 262, 263, 280, 315, 319, 337, 339, 350, 369, 388, 438, 439, 452, 465, 469, 473, 499, 500, 501, 503, 505, 507, 509, 511, 514, 517, 519, 543, 544, 554, 560, 584, 589, 608, 609, 616, 617, 618, 624, 625, 626, 627, 647, 657, 666, 668, 684, 687, 690, 703, 737, 741, 746, 749, 750, 760, 769, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 790, 795, 797, 798, 805, 808, 815, 816, 819, 822, 831, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 857, 872, 873, 927, 931, 932, 935, 942, 945, 946, 954, 962, 977, 978, 979, 981, 982, 983], "42": [6, 22, 23, 24, 25, 28, 42, 51, 71, 87, 93, 105, 106, 108, 111, 112, 114, 118, 129, 130, 147, 151, 153, 154, 156, 158, 163, 168, 171, 173, 174, 181, 185, 186, 187, 193, 194, 196, 200, 206, 212, 215, 218, 234, 236, 239, 253, 259, 260, 261, 268, 274, 275, 276, 278, 280, 282, 284, 290, 296, 298, 310, 311, 319, 324, 339, 342, 343, 350, 362, 366, 369, 370, 373, 388, 395, 438, 442, 474, 481, 487, 494, 507, 508, 515, 516, 517, 518, 520, 627, 744, 748, 772, 774, 788, 789, 793, 797, 800, 839, 840, 842, 843, 844, 857, 858, 934, 941, 962, 966, 969, 972], "scaler": [6, 65, 67, 148, 195, 211, 217, 219, 261, 272, 278, 285, 298, 301, 319, 342, 363, 366, 440, 608, 609, 622, 624, 637, 808, 817, 818, 820, 824, 825, 826, 828, 832, 833, 834, 835, 836, 837, 838, 935, 941, 945, 962, 972, 977, 980, 985], "unlabel": [6, 213, 282, 287, 288, 289, 291, 292, 350, 361, 362, 842, 843, 844, 930, 957, 960, 962, 964, 984], "unsupervis": [6, 12, 33, 45, 66, 67, 78, 85, 104, 116, 206, 213, 259, 260, 297, 310, 311, 319, 326, 329, 332, 339, 349, 350, 361, 362, 367, 368, 369, 370, 384, 393, 396, 482, 484, 486, 487, 489, 492, 493, 499, 513, 516, 517, 519, 520, 532, 533, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 578, 580, 584, 585, 588, 589, 590, 591, 592, 627, 691, 746, 749, 750, 752, 760, 772, 775, 790, 791, 794, 796, 797, 798, 799, 804, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 825, 826, 827, 828, 839, 840, 844, 851, 928, 931, 937, 944, 953, 957, 958, 960, 962, 968, 972, 975, 985], "dimension": [6, 9, 10, 18, 28, 36, 40, 50, 52, 53, 57, 63, 65, 67, 68, 77, 78, 83, 85, 93, 99, 104, 116, 125, 126, 135, 137, 138, 142, 148, 175, 180, 196, 198, 200, 201, 203, 206, 210, 211, 213, 222, 223, 254, 257, 275, 295, 310, 319, 323, 329, 332, 333, 334, 337, 346, 350, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 396, 397, 399, 415, 419, 423, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 447, 450, 451, 452, 454, 455, 460, 465, 469, 482, 484, 485, 488, 489, 490, 491, 494, 497, 499, 513, 516, 523, 549, 557, 581, 590, 591, 592, 602, 638, 639, 640, 641, 642, 643, 644, 646, 649, 660, 674, 744, 745, 746, 774, 788, 789, 790, 793, 796, 797, 804, 808, 809, 812, 818, 823, 828, 839, 840, 841, 847, 851, 884, 917, 922, 923, 926, 927, 932, 933, 937, 943, 944, 945, 946, 947, 953, 955, 957, 958, 960, 962, 963, 965, 966, 967, 968, 972, 973, 974, 975, 977, 978, 979, 981, 984, 987], "reduct": [6, 18, 50, 52, 63, 67, 78, 85, 102, 116, 148, 198, 200, 201, 210, 213, 254, 284, 295, 319, 323, 329, 361, 362, 363, 365, 367, 369, 371, 418, 432, 433, 434, 435, 452, 480, 482, 484, 485, 488, 489, 490, 491, 494, 497, 499, 503, 504, 507, 508, 509, 510, 514, 515, 516, 549, 557, 608, 609, 638, 639, 640, 641, 642, 643, 730, 746, 774, 790, 797, 804, 808, 809, 818, 828, 845, 847, 855, 856, 857, 858, 923, 928, 943, 947, 952, 953, 955, 962, 968, 973, 974, 975, 978, 986, 987, 988], "150": [6, 81, 83, 103, 123, 200, 204, 206, 248, 334, 366, 371, 454, 552, 769, 770, 771, 931, 961, 962, 963], "top": [6, 12, 13, 14, 15, 16, 27, 31, 33, 35, 37, 38, 39, 40, 41, 47, 57, 59, 65, 82, 87, 104, 107, 118, 121, 151, 179, 181, 190, 194, 206, 215, 216, 221, 223, 224, 227, 232, 236, 244, 245, 258, 273, 275, 281, 287, 288, 298, 310, 319, 335, 337, 343, 348, 359, 360, 362, 367, 368, 369, 437, 537, 538, 541, 549, 675, 705, 741, 859, 861, 920, 923, 927, 929, 939, 955, 962, 965, 966, 986], "t0": [6, 8, 11, 14, 16, 35, 38, 40, 42, 44, 46, 48, 53, 57, 59, 88, 165, 194, 195, 196, 201, 204, 206, 210, 212, 236, 310, 311, 312, 626, 627, 628, 962], "svd_solver": [6, 85, 93, 367, 485, 491, 962, 978], "whiten": [6, 85, 86, 87, 257, 367, 374, 483, 484, 491, 826, 828, 962, 976, 978, 986, 987], "done": [6, 8, 9, 11, 14, 16, 18, 44, 46, 48, 49, 88, 130, 133, 140, 151, 152, 156, 158, 165, 196, 212, 226, 233, 236, 239, 244, 253, 276, 282, 310, 311, 312, 319, 324, 331, 335, 337, 339, 341, 344, 345, 346, 348, 350, 362, 364, 366, 367, 369, 392, 393, 396, 400, 402, 422, 432, 433, 434, 435, 439, 485, 511, 512, 532, 556, 578, 580, 582, 584, 593, 594, 595, 609, 690, 744, 745, 746, 760, 765, 766, 812, 826, 916, 920, 921, 924, 927, 928, 931, 933, 934, 935, 941, 944, 945, 946, 947, 952, 957, 961, 962, 964, 966, 972, 974, 979, 982, 984], "components_": [6, 14, 53, 78, 85, 87, 88, 91, 96, 210, 211, 271, 278, 284, 350, 363, 367, 395, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 493, 494, 589, 797, 804, 839, 840, 943, 962, 976, 978, 984, 987], "project": [6, 8, 11, 13, 16, 41, 53, 62, 81, 84, 85, 87, 89, 91, 92, 148, 152, 176, 199, 200, 201, 203, 205, 211, 213, 257, 262, 266, 295, 311, 323, 326, 329, 331, 335, 336, 342, 343, 346, 350, 351, 353, 359, 365, 367, 368, 374, 391, 401, 402, 412, 424, 432, 433, 434, 435, 439, 452, 454, 481, 483, 484, 485, 487, 489, 491, 492, 493, 494, 498, 499, 523, 532, 539, 591, 592, 599, 638, 641, 645, 646, 778, 797, 825, 839, 840, 841, 883, 884, 925, 927, 928, 929, 932, 934, 935, 937, 944, 947, 949, 954, 955, 957, 962, 965, 968, 972, 973, 975, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "orthonorm": [6, 346, 883, 962], "x_train_pca": [6, 962], "x_test_pca": [6, 90, 962], "classifi": [6, 7, 8, 9, 21, 24, 26, 27, 29, 51, 64, 65, 66, 67, 90, 98, 100, 101, 103, 105, 106, 107, 110, 116, 119, 120, 129, 130, 132, 148, 153, 156, 157, 169, 170, 171, 177, 186, 188, 191, 194, 206, 211, 218, 229, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 250, 251, 255, 256, 261, 262, 264, 268, 271, 275, 282, 283, 286, 287, 288, 290, 291, 293, 294, 297, 299, 300, 301, 306, 307, 308, 312, 332, 334, 337, 339, 342, 348, 350, 362, 363, 366, 370, 371, 372, 379, 386, 388, 389, 390, 438, 439, 446, 454, 462, 464, 465, 472, 481, 486, 487, 492, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 543, 544, 552, 556, 560, 572, 579, 581, 582, 583, 599, 608, 609, 616, 618, 621, 622, 623, 624, 625, 626, 647, 648, 650, 652, 653, 657, 658, 659, 662, 663, 668, 670, 675, 676, 678, 679, 683, 684, 687, 688, 689, 690, 691, 692, 703, 705, 731, 732, 733, 736, 737, 738, 741, 743, 746, 749, 750, 752, 760, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 795, 796, 798, 799, 804, 805, 806, 808, 809, 815, 828, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 876, 878, 920, 921, 923, 926, 927, 928, 931, 932, 933, 936, 939, 941, 944, 945, 946, 947, 951, 952, 953, 955, 957, 958, 960, 961, 962, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987], "1e3": [6, 7, 10, 135, 141, 146, 212, 246, 920, 962], "1e5": [6, 140, 160, 162, 169, 246, 563, 564, 565, 569, 570, 572, 573, 575, 836, 841, 943, 962, 964], "clf": [6, 9, 10, 11, 12, 15, 22, 23, 24, 25, 28, 29, 34, 44, 47, 50, 53, 58, 65, 81, 91, 92, 103, 110, 113, 114, 119, 123, 126, 129, 130, 132, 137, 139, 154, 169, 171, 172, 176, 177, 183, 186, 188, 191, 192, 193, 195, 202, 207, 208, 211, 213, 215, 219, 225, 232, 236, 240, 241, 243, 246, 247, 256, 259, 260, 261, 264, 268, 275, 278, 280, 281, 282, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310, 314, 315, 318, 323, 332, 349, 350, 356, 363, 366, 369, 371, 389, 499, 500, 503, 505, 507, 509, 511, 513, 514, 517, 543, 544, 547, 582, 584, 588, 589, 590, 591, 592, 594, 595, 598, 602, 608, 609, 610, 611, 612, 616, 618, 619, 622, 623, 624, 625, 626, 627, 630, 647, 648, 650, 652, 737, 746, 749, 750, 760, 776, 777, 778, 780, 783, 784, 785, 786, 787, 794, 795, 805, 847, 849, 851, 852, 855, 859, 861, 921, 923, 927, 931, 932, 934, 935, 937, 938, 945, 946, 947, 957, 961, 962, 966], "class_weight": [6, 300, 350, 507, 511, 514, 608, 609, 616, 618, 624, 625, 626, 627, 847, 849, 850, 851, 852, 853, 854, 855, 857, 920, 945, 946, 962, 972, 973, 975, 976, 977, 978, 980, 986, 987], "n_iter": [6, 16, 65, 135, 158, 187, 199, 200, 204, 236, 243, 253, 271, 300, 339, 343, 349, 374, 404, 428, 482, 483, 487, 489, 494, 495, 496, 497, 594, 595, 596, 597, 602, 603, 610, 611, 612, 613, 631, 632, 633, 634, 635, 636, 637, 642, 644, 749, 750, 758, 760, 804, 806, 883, 884, 920, 945, 962, 973, 978, 979, 980, 984, 986, 987], "found": [6, 18, 19, 20, 96, 105, 132, 135, 141, 183, 213, 233, 236, 237, 238, 278, 280, 283, 285, 298, 312, 323, 325, 331, 334, 336, 337, 339, 348, 350, 351, 359, 362, 365, 366, 367, 369, 370, 372, 385, 392, 395, 396, 409, 422, 507, 508, 509, 510, 514, 515, 538, 540, 560, 561, 578, 586, 597, 601, 603, 605, 611, 613, 615, 621, 622, 624, 626, 628, 637, 638, 662, 669, 746, 749, 750, 760, 785, 790, 791, 797, 819, 821, 822, 855, 856, 857, 858, 862, 915, 919, 920, 923, 927, 928, 930, 932, 933, 934, 935, 941, 945, 946, 952, 954, 957, 962, 966, 972, 975, 976, 979, 980, 982, 986], "grid": [6, 8, 10, 11, 23, 24, 25, 38, 50, 56, 65, 66, 68, 71, 75, 107, 109, 116, 139, 148, 150, 151, 152, 168, 197, 204, 211, 212, 216, 221, 226, 228, 232, 234, 236, 239, 240, 252, 255, 257, 258, 266, 271, 275, 276, 278, 295, 298, 304, 310, 339, 344, 348, 350, 357, 363, 366, 368, 369, 370, 372, 398, 411, 414, 422, 448, 452, 465, 472, 581, 582, 583, 597, 600, 603, 604, 606, 609, 611, 613, 626, 663, 677, 691, 734, 737, 746, 749, 750, 757, 760, 762, 774, 775, 852, 924, 926, 931, 934, 938, 952, 957, 958, 960, 962, 964, 968, 972, 975, 976, 977, 979, 980, 986], "search": [6, 42, 50, 65, 66, 67, 68, 111, 130, 135, 148, 197, 212, 226, 228, 236, 239, 240, 247, 253, 255, 257, 271, 275, 285, 298, 310, 319, 326, 334, 335, 337, 339, 348, 350, 357, 362, 363, 366, 369, 370, 371, 372, 373, 394, 398, 400, 402, 407, 408, 411, 414, 421, 422, 428, 452, 465, 472, 507, 508, 509, 510, 514, 515, 516, 529, 549, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 578, 603, 626, 638, 639, 642, 643, 663, 677, 734, 737, 746, 749, 750, 757, 758, 760, 762, 774, 775, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 852, 855, 856, 857, 858, 889, 919, 924, 926, 928, 931, 934, 935, 945, 947, 951, 952, 957, 958, 960, 962, 968, 972, 974, 975, 976, 977, 978, 979, 980, 984, 986, 987], "best_estimator_": [6, 50, 67, 68, 71, 93, 212, 226, 236, 239, 257, 746, 749, 750, 760, 920, 961, 962, 979], "from_estim": [6, 23, 25, 28, 51, 101, 104, 114, 115, 119, 152, 162, 171, 188, 212, 216, 218, 229, 232, 237, 238, 242, 245, 256, 261, 264, 278, 280, 281, 282, 283, 285, 294, 295, 296, 299, 300, 315, 344, 360, 389, 581, 582, 583, 647, 648, 650, 651, 652, 668, 676, 731, 733, 736, 737, 738, 752, 926, 931, 938, 962, 969, 985, 986, 987], "display_label": [6, 229, 647, 962, 984], "xticks_rot": [6, 647, 962], "vertic": [6, 16, 55, 110, 154, 168, 210, 211, 239, 252, 273, 276, 303, 305, 350, 359, 362, 367, 465, 647, 730, 962], "tight_layout": [6, 8, 23, 25, 28, 31, 36, 48, 60, 67, 69, 78, 85, 86, 96, 101, 105, 107, 112, 116, 118, 120, 137, 139, 144, 146, 150, 151, 153, 154, 158, 159, 169, 177, 179, 187, 190, 194, 197, 199, 211, 215, 230, 231, 247, 252, 253, 255, 265, 274, 275, 276, 277, 278, 280, 284, 296, 311, 314, 315, 962], "plot_galleri": [6, 85, 962], "n_row": [6, 18, 85, 359, 377, 401, 403, 461, 463, 962], "n_col": [6, 18, 85, 214, 377, 401, 403, 461, 463, 582, 962], "portrait": [6, 367, 962], "figur": [6, 7, 8, 9, 10, 12, 13, 15, 22, 23, 24, 25, 27, 28, 31, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 71, 75, 77, 80, 81, 82, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 98, 99, 100, 101, 102, 109, 110, 111, 112, 113, 116, 117, 121, 123, 124, 126, 128, 129, 132, 136, 137, 138, 139, 142, 143, 147, 151, 152, 153, 158, 164, 169, 172, 173, 176, 178, 180, 181, 183, 185, 190, 193, 194, 195, 196, 201, 202, 203, 206, 210, 211, 212, 213, 214, 216, 221, 223, 224, 227, 229, 234, 239, 240, 249, 258, 262, 263, 266, 268, 271, 273, 275, 276, 280, 282, 287, 288, 289, 296, 298, 302, 303, 315, 316, 317, 337, 362, 368, 369, 370, 372, 389, 581, 582, 647, 648, 650, 651, 652, 752, 861, 920, 924, 927, 930, 931, 934, 935, 938, 945, 946, 947, 962, 964, 965, 985], "subplots_adjust": [6, 7, 13, 14, 27, 31, 35, 38, 40, 41, 46, 47, 50, 57, 59, 73, 75, 82, 83, 87, 88, 95, 99, 101, 102, 118, 151, 178, 179, 194, 197, 206, 213, 221, 223, 224, 227, 230, 246, 248, 258, 266, 268, 271, 275, 282, 288, 295, 298, 962], "bottom": [6, 8, 12, 13, 14, 27, 33, 35, 38, 40, 41, 47, 49, 57, 59, 82, 83, 109, 116, 121, 179, 190, 206, 221, 223, 224, 227, 232, 235, 246, 258, 273, 288, 290, 298, 337, 360, 362, 368, 537, 859, 925, 927, 931, 952, 962, 965], "left": [6, 7, 12, 13, 14, 15, 22, 30, 35, 38, 40, 41, 47, 57, 59, 66, 69, 74, 75, 82, 83, 87, 88, 99, 102, 104, 105, 108, 111, 118, 120, 138, 144, 147, 151, 164, 172, 179, 180, 181, 183, 190, 192, 193, 196, 197, 206, 210, 213, 215, 216, 221, 223, 224, 227, 231, 232, 233, 234, 236, 244, 245, 247, 258, 259, 260, 266, 268, 271, 273, 284, 288, 297, 298, 318, 337, 339, 341, 359, 362, 365, 366, 368, 369, 370, 372, 422, 432, 433, 434, 435, 443, 448, 499, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 537, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 585, 589, 593, 601, 605, 744, 745, 746, 749, 750, 753, 760, 821, 828, 855, 856, 857, 858, 859, 871, 884, 902, 905, 920, 923, 925, 927, 929, 931, 933, 938, 943, 945, 947, 961, 962, 964, 965, 979, 981, 986], "01": [6, 8, 10, 13, 15, 36, 40, 47, 57, 85, 87, 102, 109, 110, 112, 115, 116, 133, 144, 152, 160, 163, 170, 186, 191, 192, 199, 200, 206, 210, 211, 212, 223, 227, 229, 234, 235, 240, 242, 258, 269, 273, 281, 300, 316, 317, 332, 334, 342, 362, 371, 399, 421, 465, 482, 489, 493, 545, 546, 548, 592, 596, 604, 608, 628, 646, 665, 746, 760, 841, 900, 927, 931, 935, 941, 943, 945, 962, 966], "right": [6, 7, 11, 12, 13, 14, 15, 28, 35, 38, 39, 40, 41, 47, 49, 55, 57, 59, 72, 73, 75, 82, 83, 87, 88, 90, 93, 95, 98, 99, 101, 102, 103, 111, 112, 113, 120, 129, 135, 138, 147, 169, 180, 181, 182, 183, 185, 186, 189, 190, 206, 209, 210, 221, 223, 224, 226, 227, 230, 231, 235, 238, 242, 245, 246, 248, 258, 266, 268, 271, 273, 275, 278, 288, 298, 300, 306, 308, 310, 315, 318, 319, 326, 337, 348, 351, 359, 362, 365, 367, 368, 369, 372, 414, 432, 433, 434, 435, 484, 491, 494, 507, 508, 509, 510, 511, 512, 514, 515, 516, 537, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 577, 585, 626, 628, 813, 855, 856, 857, 858, 859, 871, 884, 920, 923, 925, 927, 929, 931, 933, 934, 938, 943, 945, 946, 947, 951, 952, 955, 958, 962, 964, 965, 974, 980, 986, 988], "99": [6, 23, 40, 47, 57, 85, 197, 206, 210, 221, 223, 236, 273, 324, 330, 334, 341, 366, 369, 370, 442, 597, 611, 621, 737, 795, 900, 926, 931, 941, 945, 962, 968, 974], "90": [6, 10, 14, 95, 96, 110, 111, 112, 140, 154, 159, 176, 178, 181, 186, 221, 244, 246, 275, 319, 323, 337, 343, 366, 513, 730, 746, 772, 777, 926, 931, 962, 966, 987], "hspace": [6, 13, 14, 40, 41, 57, 85, 197, 206, 221, 223, 224, 227, 258, 282, 288, 295, 962], "35": [6, 7, 9, 11, 101, 120, 152, 158, 167, 206, 494, 598, 599, 606, 652, 656, 657, 676, 690, 705, 731, 738, 781, 920, 927, 931, 937, 938, 941, 962, 966, 972, 974], "grai": [6, 13, 42, 43, 46, 47, 49, 85, 88, 113, 177, 179, 197, 210, 213, 214, 242, 270, 334, 367, 443, 444, 452, 471, 962, 965, 983], "ytick": [6, 11, 27, 36, 40, 42, 46, 47, 48, 53, 54, 57, 75, 77, 81, 88, 109, 112, 124, 129, 137, 138, 139, 143, 162, 169, 175, 192, 206, 213, 222, 223, 224, 227, 230, 249, 257, 266, 271, 287, 298, 302, 303, 304, 310, 962], "portion": [6, 8, 74, 244, 323, 332, 334, 337, 343, 350, 737, 769, 786, 920, 930, 934, 962, 966], "pred_nam": [6, 962], "rsplit": [6, 16, 236, 962], "true_nam": [6, 962], "ntrue": [6, 287, 288, 962], "prediction_titl": [6, 962], "signif": [6, 962], "eigenface_titl": [6, 962], "convolut": [6, 143, 962], "network": [6, 270, 323, 324, 325, 326, 331, 332, 348, 350, 351, 356, 362, 367, 369, 374, 446, 483, 485, 517, 518, 646, 690, 805, 806, 899, 927, 929, 931, 945, 947, 951, 953, 962, 967, 968, 972, 986], "famili": [6, 323, 325, 350, 362, 365, 367, 369, 370, 371, 542, 545, 546, 548, 549, 550, 556, 805, 806, 824, 835, 927, 941, 945, 962, 964, 976, 986], "outsid": [6, 9, 18, 107, 180, 181, 209, 219, 348, 370, 585, 827, 937, 962, 980], "scope": [6, 323, 325, 337, 348, 370, 951, 952, 962], "scikit": [6, 8, 10, 12, 15, 16, 28, 29, 46, 64, 104, 118, 130, 133, 147, 148, 151, 167, 168, 197, 205, 218, 219, 228, 232, 253, 258, 260, 279, 310, 311, 314, 315, 319, 324, 325, 326, 329, 331, 332, 333, 334, 336, 337, 340, 343, 344, 345, 346, 349, 350, 355, 356, 358, 359, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 376, 377, 379, 380, 381, 383, 384, 389, 394, 397, 400, 407, 409, 414, 415, 417, 418, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 454, 462, 465, 474, 488, 511, 512, 514, 515, 517, 526, 531, 532, 533, 535, 536, 539, 549, 552, 561, 576, 578, 580, 584, 588, 590, 596, 598, 602, 608, 619, 630, 638, 650, 651, 667, 697, 727, 728, 729, 737, 746, 747, 748, 749, 750, 751, 752, 760, 763, 764, 765, 766, 767, 774, 776, 777, 790, 792, 809, 811, 813, 815, 818, 820, 821, 822, 823, 827, 828, 831, 844, 845, 847, 852, 856, 878, 879, 897, 898, 920, 921, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 941, 944, 945, 946, 947, 950, 954, 960, 961, 962, 964, 965, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "librari": [6, 235, 283, 285, 316, 319, 329, 331, 332, 335, 336, 337, 338, 343, 348, 349, 350, 353, 358, 608, 847, 848, 849, 850, 852, 853, 899, 927, 931, 946, 947, 951, 952, 955, 962, 966, 970, 975, 979, 980, 981, 982, 983, 985], "reader": [6, 38, 283, 325, 337, 962], "pytorch": [6, 348, 951, 952, 962], "tensorflow": [6, 348, 951, 962], "implement": [6, 7, 13, 15, 16, 42, 51, 74, 85, 147, 156, 164, 168, 193, 197, 199, 206, 212, 233, 235, 244, 253, 255, 258, 276, 280, 281, 282, 283, 284, 310, 312, 323, 324, 325, 331, 332, 334, 335, 337, 338, 339, 342, 343, 345, 346, 350, 353, 356, 358, 359, 361, 364, 366, 367, 368, 369, 371, 372, 373, 374, 375, 388, 393, 394, 395, 397, 398, 399, 400, 425, 443, 446, 458, 482, 483, 484, 485, 486, 488, 491, 492, 493, 503, 504, 505, 507, 508, 511, 512, 513, 517, 522, 532, 538, 539, 541, 543, 547, 551, 560, 561, 582, 583, 590, 591, 595, 596, 603, 607, 608, 609, 613, 614, 618, 621, 622, 624, 625, 626, 627, 628, 634, 635, 636, 637, 638, 641, 642, 645, 657, 661, 670, 684, 687, 727, 731, 737, 738, 744, 746, 749, 750, 752, 760, 764, 765, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 783, 784, 785, 786, 787, 790, 791, 793, 796, 798, 799, 804, 805, 806, 808, 829, 837, 838, 844, 847, 848, 849, 850, 851, 852, 853, 883, 884, 896, 899, 900, 902, 920, 921, 923, 925, 927, 928, 929, 930, 932, 933, 935, 936, 937, 941, 943, 944, 947, 948, 949, 951, 952, 953, 955, 957, 962, 963, 964, 965, 966, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "plot_face_recognit": 6, "demonstr": [7, 18, 19, 20, 23, 32, 36, 56, 64, 66, 103, 112, 130, 143, 148, 180, 218, 219, 223, 227, 228, 238, 241, 244, 249, 255, 258, 265, 272, 275, 277, 282, 286, 288, 289, 292, 296, 306, 310, 312, 319, 325, 332, 333, 337, 342, 348, 358, 362, 366, 369, 397, 452, 462, 470, 653, 663, 691, 745, 746, 813, 843, 855, 920, 921, 925, 931, 932, 933, 934, 941, 944, 947, 950], "diabet": [7, 112, 121, 122, 133, 147, 148, 166, 167, 168, 175, 176, 231, 330, 369, 451, 602, 603, 746, 751, 769, 770, 771, 939, 957, 961, 968], "regress": [7, 10, 13, 23, 25, 27, 50, 63, 65, 73, 74, 76, 88, 97, 102, 104, 109, 117, 134, 146, 147, 148, 150, 151, 152, 157, 161, 163, 165, 169, 173, 174, 176, 180, 182, 183, 184, 195, 205, 207, 214, 219, 231, 248, 249, 252, 254, 271, 274, 278, 282, 283, 284, 285, 293, 310, 313, 324, 325, 326, 329, 330, 332, 334, 337, 339, 342, 345, 346, 348, 349, 350, 357, 364, 365, 366, 367, 371, 383, 388, 414, 415, 424, 434, 439, 440, 442, 446, 451, 452, 454, 455, 462, 466, 467, 468, 474, 478, 481, 485, 487, 489, 491, 492, 493, 495, 496, 498, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 514, 515, 516, 517, 520, 521, 542, 543, 544, 545, 546, 547, 548, 549, 550, 554, 555, 556, 559, 560, 561, 564, 565, 572, 573, 575, 582, 583, 584, 585, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 644, 651, 656, 671, 672, 673, 677, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 734, 746, 749, 750, 752, 760, 771, 772, 774, 775, 779, 781, 782, 790, 791, 796, 798, 799, 805, 806, 808, 809, 812, 813, 815, 821, 822, 823, 825, 828, 831, 836, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 861, 867, 870, 872, 888, 920, 921, 923, 926, 928, 938, 939, 941, 942, 951, 952, 953, 954, 955, 957, 960, 963, 968, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987], "patient": [7, 121, 133, 147, 334, 345, 366, 927, 964], "diseas": [7, 121, 147, 238, 334, 662, 931, 964], "newsgroup": [7, 14, 18, 210, 236, 291, 311, 312, 330, 359, 370, 438, 439, 958, 968], "post": [7, 14, 18, 64, 148, 284, 310, 311, 312, 313, 323, 332, 336, 337, 341, 342, 349, 362, 398, 438, 439, 450, 662, 774, 855, 931, 947, 955, 966, 983], "written": [7, 26, 80, 148, 186, 283, 324, 334, 337, 338, 339, 343, 345, 348, 350, 363, 368, 437, 452, 458, 663, 774, 852, 859, 925, 927, 931, 935, 936, 945, 950, 957, 958, 963, 966, 981], "about": [7, 11, 26, 40, 49, 52, 57, 64, 78, 80, 107, 130, 144, 148, 150, 151, 154, 196, 206, 232, 233, 235, 237, 242, 258, 278, 280, 282, 283, 284, 285, 288, 312, 318, 319, 323, 324, 326, 330, 332, 336, 337, 341, 342, 343, 349, 350, 351, 356, 366, 367, 370, 372, 389, 442, 444, 445, 446, 447, 450, 451, 452, 454, 455, 460, 465, 511, 512, 543, 544, 557, 558, 564, 583, 590, 626, 628, 692, 746, 760, 777, 868, 921, 927, 928, 930, 932, 934, 937, 938, 941, 942, 944, 946, 947, 949, 951, 955, 957, 958, 964, 966, 977, 978], "sgdclassifi": [7, 8, 186, 187, 188, 189, 190, 191, 192, 211, 243, 291, 300, 310, 319, 323, 325, 343, 350, 360, 361, 370, 588, 590, 591, 592, 596, 608, 616, 618, 847, 852, 923, 927, 932, 945, 946, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 985, 986, 987, 988], "stochast": [7, 53, 110, 113, 148, 156, 157, 201, 203, 206, 211, 261, 262, 267, 283, 362, 367, 369, 412, 438, 446, 452, 453, 454, 464, 472, 486, 494, 509, 510, 521, 554, 577, 589, 608, 609, 618, 622, 624, 626, 627, 628, 629, 637, 638, 639, 640, 642, 774, 797, 804, 805, 806, 809, 818, 851, 883, 884, 905, 920, 934, 935, 937, 953, 967, 968, 972, 973, 976, 977, 979, 981, 983], "gradient": [7, 42, 61, 97, 104, 115, 118, 121, 140, 141, 148, 157, 206, 211, 273, 350, 362, 372, 402, 412, 416, 417, 438, 446, 451, 453, 454, 465, 470, 503, 504, 509, 510, 511, 512, 521, 536, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 584, 585, 589, 598, 599, 608, 609, 618, 619, 622, 624, 626, 627, 628, 630, 637, 642, 644, 645, 690, 691, 697, 699, 749, 750, 751, 771, 774, 804, 805, 806, 809, 821, 822, 851, 905, 928, 931, 934, 935, 936, 937, 951, 953, 968, 972, 973, 975, 976, 977, 978, 979, 981, 982, 985, 987], "descent": [7, 13, 148, 157, 164, 206, 211, 283, 367, 369, 421, 422, 428, 438, 446, 453, 481, 487, 488, 489, 490, 492, 493, 495, 496, 497, 498, 521, 589, 596, 597, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 618, 622, 624, 626, 627, 628, 631, 632, 633, 634, 637, 644, 774, 805, 806, 809, 847, 851, 905, 928, 935, 937, 946, 953, 964, 968, 972, 975, 976, 977, 979, 981, 983, 985, 986, 987], "nusvr": [7, 323, 853, 946, 974, 980, 982, 983, 984, 986, 987], "nu": [7, 9, 11, 144, 193, 206, 297, 323, 369, 372, 569, 627, 849, 850, 851, 937, 945, 946, 983, 987], "support": [7, 8, 9, 10, 15, 22, 25, 27, 29, 42, 66, 97, 103, 109, 117, 129, 152, 180, 189, 190, 191, 197, 211, 212, 218, 229, 240, 242, 253, 273, 277, 284, 291, 292, 294, 295, 298, 299, 301, 303, 306, 323, 324, 325, 326, 331, 335, 337, 339, 341, 342, 343, 344, 346, 347, 349, 350, 351, 362, 366, 367, 370, 372, 388, 391, 400, 402, 403, 414, 416, 417, 419, 424, 437, 446, 462, 488, 490, 491, 494, 497, 499, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 561, 563, 564, 565, 567, 569, 570, 572, 573, 575, 577, 582, 583, 593, 595, 607, 608, 609, 620, 621, 622, 624, 625, 626, 627, 628, 637, 640, 644, 657, 663, 678, 679, 687, 692, 717, 727, 728, 729, 732, 733, 736, 737, 746, 749, 750, 752, 760, 771, 772, 780, 781, 786, 788, 789, 792, 794, 795, 800, 808, 809, 813, 819, 821, 822, 824, 828, 835, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 873, 878, 879, 919, 920, 921, 923, 924, 925, 927, 930, 931, 932, 933, 934, 935, 937, 938, 941, 942, 945, 947, 949, 951, 952, 953, 955, 957, 960, 962, 966, 968, 969, 972, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "vector": [7, 8, 9, 10, 12, 14, 15, 18, 19, 24, 25, 27, 29, 32, 36, 44, 66, 80, 85, 87, 129, 135, 143, 160, 166, 183, 184, 191, 195, 211, 212, 215, 218, 233, 235, 236, 240, 259, 271, 273, 292, 294, 295, 297, 298, 299, 301, 302, 303, 306, 308, 311, 323, 325, 326, 342, 343, 346, 348, 350, 359, 360, 362, 364, 365, 366, 367, 369, 372, 373, 374, 388, 394, 395, 396, 397, 399, 400, 401, 403, 414, 415, 417, 418, 432, 433, 434, 435, 437, 439, 447, 459, 462, 471, 474, 481, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 499, 500, 501, 502, 517, 518, 519, 520, 531, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 568, 569, 570, 572, 573, 575, 588, 590, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 622, 623, 624, 625, 626, 627, 628, 636, 637, 638, 639, 641, 642, 643, 645, 649, 669, 684, 712, 717, 718, 719, 720, 722, 723, 724, 726, 727, 746, 749, 750, 760, 772, 775, 776, 777, 783, 784, 785, 786, 787, 790, 791, 792, 794, 795, 796, 798, 799, 800, 805, 806, 813, 815, 820, 828, 831, 834, 845, 847, 848, 849, 850, 851, 852, 853, 854, 867, 881, 883, 884, 894, 900, 920, 923, 924, 925, 927, 928, 929, 931, 932, 933, 935, 936, 937, 941, 945, 947, 953, 957, 960, 963, 966, 968, 969, 972, 973, 974, 975, 976, 978, 980, 981, 983, 985], "gradientboostingregressor": [7, 111, 112, 118, 121, 323, 342, 348, 369, 504, 512, 582, 583, 927, 931, 932, 972, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986], "forward": [7, 133, 282, 323, 337, 371, 458, 459, 489, 493, 503, 509, 510, 535, 536, 552, 635, 636, 812, 927, 952, 984], "wise": [7, 24, 44, 143, 180, 206, 245, 273, 311, 323, 350, 360, 362, 366, 367, 371, 408, 481, 484, 487, 491, 495, 496, 499, 500, 503, 505, 506, 509, 510, 542, 545, 546, 548, 549, 550, 556, 590, 602, 650, 703, 776, 825, 837, 838, 841, 904, 906, 907, 908, 909, 912, 923, 925, 931, 932, 945, 952, 972, 977, 980, 981, 982], "fashion": [7, 104, 109, 187, 244, 324, 350, 359, 360, 367, 369, 503, 507, 508, 509, 510, 514, 515, 516, 552, 577, 774, 797, 812, 815, 821, 831, 855, 856, 857, 858, 902, 921, 927, 941, 981], "notic": [7, 23, 24, 49, 52, 73, 102, 104, 111, 132, 158, 206, 218, 232, 233, 235, 236, 238, 244, 245, 253, 278, 310, 311, 312, 319, 342, 366, 446, 491, 513, 920, 930, 931, 937, 966, 969, 985], "faster": [7, 18, 35, 59, 67, 85, 99, 104, 108, 111, 133, 152, 156, 165, 179, 181, 194, 195, 197, 212, 253, 255, 270, 281, 283, 284, 310, 311, 312, 323, 331, 337, 345, 346, 350, 361, 362, 367, 371, 372, 374, 394, 397, 399, 401, 402, 403, 412, 458, 481, 482, 483, 486, 487, 488, 489, 490, 492, 493, 495, 496, 497, 498, 503, 509, 510, 511, 512, 593, 596, 597, 602, 603, 608, 609, 610, 611, 612, 613, 622, 624, 634, 637, 641, 645, 649, 675, 705, 727, 728, 729, 788, 789, 793, 805, 806, 823, 825, 827, 836, 840, 884, 900, 920, 924, 927, 932, 934, 935, 938, 943, 945, 946, 947, 951, 954, 962, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "10_000": [7, 23, 69, 104, 111, 150, 156, 210, 238, 253, 509, 510, 825], "vari": [7, 31, 40, 42, 57, 69, 105, 107, 132, 148, 151, 152, 168, 170, 173, 177, 204, 211, 226, 231, 235, 238, 267, 273, 278, 286, 298, 301, 319, 323, 325, 332, 350, 392, 396, 450, 458, 464, 465, 472, 509, 510, 514, 515, 596, 597, 600, 601, 602, 603, 604, 605, 610, 611, 612, 613, 631, 634, 653, 712, 765, 772, 774, 775, 805, 809, 813, 828, 844, 852, 855, 856, 905, 923, 926, 927, 931, 934, 935, 944, 947, 955, 979, 980], "relev": [7, 9, 18, 70, 131, 148, 158, 173, 235, 236, 242, 319, 323, 325, 332, 334, 336, 337, 339, 341, 342, 343, 350, 364, 365, 371, 372, 420, 424, 484, 491, 595, 605, 675, 689, 705, 749, 750, 777, 826, 828, 859, 860, 861, 931, 932, 937, 948, 952, 975, 980, 984, 986], "select": [7, 9, 32, 40, 52, 57, 63, 65, 68, 75, 83, 84, 101, 106, 108, 111, 118, 124, 130, 140, 142, 151, 152, 154, 156, 157, 159, 187, 194, 197, 200, 206, 210, 212, 220, 221, 233, 234, 235, 236, 240, 257, 273, 278, 282, 287, 288, 291, 293, 298, 306, 310, 311, 312, 319, 323, 324, 326, 332, 334, 335, 337, 339, 345, 349, 350, 359, 362, 363, 364, 367, 369, 370, 372, 394, 396, 397, 399, 401, 403, 408, 409, 410, 414, 416, 417, 422, 423, 426, 438, 439, 442, 443, 446, 447, 451, 452, 454, 462, 465, 482, 484, 485, 490, 491, 494, 499, 501, 508, 509, 510, 513, 515, 531, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 577, 581, 582, 595, 596, 597, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 621, 623, 626, 628, 632, 633, 641, 642, 647, 662, 666, 668, 703, 739, 740, 744, 745, 746, 749, 750, 751, 752, 760, 770, 771, 772, 774, 776, 790, 791, 792, 794, 796, 798, 799, 800, 808, 809, 813, 818, 824, 828, 844, 847, 848, 852, 855, 856, 857, 858, 863, 900, 901, 925, 926, 928, 931, 932, 934, 935, 937, 941, 944, 945, 946, 947, 948, 951, 952, 953, 955, 957, 958, 960, 964, 965, 966, 968, 972, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 986, 987], "ham": [7, 400, 407, 531, 649, 653, 659, 683, 690, 727, 728, 729, 743, 934], "loss": [7, 22, 23, 24, 25, 109, 110, 111, 112, 113, 135, 136, 148, 157, 161, 169, 172, 181, 184, 186, 187, 191, 197, 212, 243, 269, 278, 283, 291, 295, 296, 300, 306, 310, 348, 350, 360, 361, 367, 372, 414, 415, 446, 458, 459, 482, 488, 489, 490, 493, 497, 502, 503, 504, 508, 509, 510, 511, 512, 515, 593, 596, 599, 608, 609, 616, 617, 618, 619, 620, 621, 622, 626, 627, 628, 629, 653, 656, 659, 672, 683, 684, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 743, 746, 749, 750, 760, 770, 771, 774, 805, 806, 808, 809, 812, 813, 821, 822, 823, 828, 847, 848, 853, 854, 856, 858, 884, 888, 924, 927, 935, 939, 944, 945, 946, 947, 966, 972, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988], "eustach": [7, 8, 10, 955, 974, 975], "diemert": [7, 8, 10, 955, 974, 975], "maria": [7, 112, 118, 133, 147, 362, 983, 984, 985, 986, 987], "telenczuk": [7, 112, 118, 133, 147, 981, 984, 985, 987], "github": [7, 8, 112, 118, 147, 253, 331, 335, 336, 340, 341, 342, 343, 345, 348, 350, 351, 353, 356, 358, 402, 412, 458, 486, 641, 642, 645, 934, 950, 951, 954, 955, 966, 977, 982], "com": [7, 8, 11, 12, 14, 15, 19, 20, 22, 38, 44, 52, 60, 64, 65, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 117, 118, 135, 138, 140, 142, 144, 147, 159, 179, 181, 186, 196, 197, 200, 202, 204, 209, 221, 223, 224, 236, 239, 253, 273, 274, 277, 278, 310, 311, 331, 332, 335, 337, 341, 342, 343, 345, 348, 353, 362, 393, 402, 412, 458, 484, 486, 491, 621, 641, 645, 655, 934, 949, 954, 977, 979, 982], "maikia": [7, 112, 118, 147, 980, 981, 983, 984], "lemaitre58": [7, 118, 135, 140, 142, 144, 200, 273], "gmail": [7, 11, 14, 15, 22, 38, 44, 52, 60, 64, 65, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 117, 118, 135, 138, 140, 142, 144, 159, 179, 181, 196, 197, 200, 202, 209, 221, 223, 224, 236, 239, 273, 278, 310, 311], "licens": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 25, 27, 28, 29, 33, 35, 36, 38, 41, 42, 43, 44, 47, 48, 49, 50, 52, 56, 60, 61, 62, 64, 65, 67, 68, 69, 75, 80, 81, 85, 87, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 117, 118, 133, 135, 136, 138, 139, 140, 141, 142, 144, 147, 156, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 184, 186, 187, 195, 196, 197, 200, 201, 202, 204, 206, 209, 211, 212, 213, 215, 221, 223, 236, 239, 241, 248, 252, 253, 255, 261, 262, 263, 265, 266, 268, 271, 273, 274, 275, 276, 277, 278, 287, 288, 289, 290, 292, 302, 303, 306, 307, 310, 311, 312, 331, 350, 356, 947, 955], "mean_squared_error": [7, 111, 112, 175, 179, 181, 183, 185, 197, 319, 369, 691, 701, 931, 973, 975, 982, 983], "hamming_loss": [7, 653, 743, 931, 974, 978, 981], "seed": [7, 11, 24, 31, 35, 36, 40, 41, 48, 50, 52, 54, 55, 57, 59, 60, 65, 71, 72, 73, 83, 86, 91, 92, 102, 107, 126, 128, 153, 163, 169, 174, 177, 182, 185, 188, 192, 196, 202, 222, 224, 225, 226, 227, 238, 241, 249, 258, 259, 260, 265, 303, 304, 308, 311, 319, 324, 339, 346, 348, 350, 362, 366, 367, 394, 397, 398, 400, 402, 407, 409, 410, 411, 412, 421, 422, 423, 486, 494, 503, 504, 505, 506, 509, 510, 577, 596, 597, 602, 603, 610, 611, 612, 613, 627, 639, 641, 643, 645, 744, 745, 750, 779, 782, 797, 850, 870, 883, 884, 896, 900, 920, 921, 926, 928, 964, 976, 977, 981, 982], "fetch_20newsgroups_vector": [7, 194, 210, 332, 972, 982, 984], "spars": [7, 12, 13, 16, 35, 36, 52, 70, 84, 104, 116, 148, 157, 174, 178, 195, 210, 212, 236, 253, 281, 285, 306, 309, 312, 318, 323, 329, 331, 332, 333, 337, 339, 340, 341, 342, 348, 349, 350, 361, 362, 363, 369, 370, 372, 373, 377, 389, 391, 393, 394, 395, 397, 399, 400, 401, 402, 403, 407, 409, 410, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 437, 438, 439, 446, 447, 453, 458, 473, 474, 476, 477, 478, 479, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 531, 532, 535, 536, 538, 539, 540, 541, 543, 544, 553, 554, 555, 556, 557, 558, 559, 579, 580, 581, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 662, 663, 664, 678, 679, 680, 683, 687, 688, 689, 703, 704, 709, 710, 712, 716, 717, 727, 728, 729, 730, 732, 733, 734, 736, 743, 746, 749, 750, 760, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 790, 791, 792, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 812, 813, 815, 817, 818, 819, 820, 821, 823, 825, 826, 828, 829, 830, 831, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 863, 865, 866, 867, 868, 873, 881, 884, 885, 888, 889, 890, 894, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 917, 921, 924, 927, 928, 929, 931, 932, 934, 944, 946, 947, 952, 953, 964, 965, 966, 967, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "generate_data": [7, 30], "load_diabet": [7, 112, 121, 123, 133, 147, 164, 166, 167, 168, 175, 176, 216, 231, 285, 369, 508, 512, 518, 623, 651, 769, 770, 771, 856, 858, 939, 961, 964, 978, 983, 986], "elif": [7, 8, 15, 31, 159, 181, 213, 215, 223, 258, 824], "subset": [7, 18, 24, 25, 29, 64, 65, 73, 74, 105, 107, 108, 123, 130, 152, 168, 180, 194, 195, 196, 197, 209, 211, 214, 215, 233, 236, 238, 244, 245, 247, 278, 282, 287, 291, 310, 311, 312, 319, 332, 337, 345, 348, 350, 359, 360, 362, 363, 366, 369, 370, 372, 379, 388, 399, 414, 416, 417, 419, 438, 439, 442, 443, 447, 458, 499, 500, 501, 503, 505, 506, 507, 509, 511, 512, 513, 514, 517, 519, 552, 560, 579, 589, 590, 591, 592, 601, 605, 608, 616, 618, 621, 624, 625, 626, 627, 628, 629, 647, 653, 654, 663, 666, 668, 680, 683, 704, 706, 740, 743, 748, 772, 774, 776, 777, 778, 779, 783, 784, 785, 786, 787, 790, 795, 798, 805, 814, 842, 843, 847, 849, 852, 855, 857, 863, 900, 920, 927, 931, 932, 942, 944, 946, 947, 966, 975, 980, 981, 983, 985], "regression_data": 7, "classification_data": 7, "calcul": [7, 30, 42, 54, 73, 97, 103, 119, 147, 148, 154, 175, 184, 196, 211, 234, 235, 241, 245, 249, 252, 296, 303, 319, 323, 344, 350, 359, 360, 362, 366, 367, 369, 373, 389, 392, 394, 395, 396, 398, 400, 401, 403, 405, 406, 421, 422, 428, 431, 486, 497, 503, 514, 519, 547, 561, 570, 582, 583, 584, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 622, 623, 624, 625, 629, 631, 634, 638, 640, 642, 644, 657, 666, 678, 679, 684, 685, 687, 693, 703, 713, 718, 720, 721, 722, 723, 727, 730, 732, 733, 736, 737, 738, 739, 740, 742, 753, 755, 769, 773, 786, 788, 789, 826, 827, 828, 833, 837, 847, 848, 873, 886, 923, 925, 927, 928, 929, 931, 933, 934, 935, 939, 941, 944, 946, 961, 964, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "given": [7, 10, 11, 25, 33, 45, 53, 55, 71, 77, 86, 90, 114, 116, 118, 135, 142, 151, 152, 179, 180, 197, 200, 206, 210, 211, 214, 216, 231, 235, 236, 237, 238, 244, 259, 260, 261, 275, 283, 306, 311, 312, 317, 323, 325, 332, 336, 337, 339, 341, 343, 345, 346, 348, 350, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 379, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 406, 408, 409, 410, 411, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 428, 431, 432, 433, 434, 437, 446, 451, 453, 455, 473, 486, 488, 489, 490, 493, 497, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 538, 539, 540, 541, 543, 551, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 581, 582, 594, 596, 599, 601, 602, 603, 605, 608, 609, 611, 613, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 637, 638, 641, 647, 648, 649, 650, 651, 652, 654, 655, 656, 662, 664, 667, 668, 670, 673, 675, 676, 683, 685, 686, 689, 701, 704, 705, 707, 708, 713, 723, 727, 730, 731, 733, 736, 737, 738, 741, 742, 744, 745, 746, 749, 750, 752, 758, 760, 764, 770, 771, 772, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 815, 818, 819, 821, 822, 823, 824, 825, 827, 828, 833, 834, 836, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 857, 862, 871, 872, 873, 915, 919, 920, 923, 925, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 941, 944, 945, 946, 947, 955, 957, 961, 962, 964, 965, 966, 972, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986], "round": [7, 9, 23, 77, 146, 147, 186, 197, 235, 241, 275, 277, 400, 406, 407, 514, 515, 543, 544, 547, 577, 642, 663, 748, 758, 813, 844, 859, 861, 921, 935, 947, 974, 976, 978, 980, 981, 983, 985, 986, 988], "changing_param": 7, "collect": [7, 9, 10, 12, 15, 18, 23, 73, 103, 114, 121, 133, 140, 147, 154, 167, 172, 193, 202, 209, 238, 259, 297, 300, 311, 312, 323, 332, 334, 341, 353, 366, 367, 369, 370, 372, 414, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 519, 520, 531, 533, 534, 538, 539, 540, 541, 582, 748, 752, 753, 755, 902, 905, 920, 926, 927, 931, 937, 942, 952, 955, 961, 966, 974, 984], "chang": [7, 15, 23, 24, 85, 89, 90, 102, 112, 136, 146, 150, 151, 154, 180, 181, 183, 184, 216, 217, 230, 235, 242, 245, 277, 280, 281, 282, 283, 284, 285, 288, 298, 312, 319, 323, 324, 325, 332, 335, 339, 340, 341, 342, 345, 348, 350, 360, 362, 366, 369, 370, 372, 385, 388, 391, 397, 399, 402, 404, 409, 412, 418, 421, 422, 428, 443, 444, 446, 454, 458, 459, 462, 463, 464, 472, 476, 481, 485, 486, 487, 488, 489, 490, 496, 497, 499, 500, 501, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 538, 539, 541, 543, 544, 547, 552, 560, 561, 563, 564, 565, 567, 569, 570, 572, 573, 575, 577, 585, 597, 599, 600, 601, 603, 604, 605, 606, 608, 609, 611, 613, 614, 615, 620, 622, 624, 629, 637, 642, 650, 654, 657, 662, 666, 667, 678, 679, 685, 686, 690, 704, 705, 706, 727, 733, 734, 736, 742, 744, 745, 746, 747, 748, 749, 750, 751, 760, 764, 765, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 780, 781, 783, 784, 785, 787, 788, 789, 794, 795, 807, 810, 812, 821, 835, 836, 841, 842, 845, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 865, 867, 868, 879, 884, 897, 898, 899, 901, 920, 921, 922, 930, 931, 932, 934, 941, 944, 945, 946, 947, 949, 952, 957, 964, 966, 970, 971], "affect": [7, 23, 73, 142, 150, 151, 183, 203, 216, 238, 245, 278, 319, 323, 324, 325, 333, 350, 352, 362, 365, 366, 368, 370, 373, 375, 395, 400, 407, 423, 425, 429, 499, 500, 519, 662, 737, 746, 749, 750, 751, 760, 764, 765, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 828, 838, 852, 930, 934, 946, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 25, 341, 360, 366, 783, 933, 986], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 12, 15, 16, 23, 30, 33, 36, 40, 46, 56, 65, 93, 99, 102, 103, 109, 111, 124, 147, 154, 172, 183, 184, 186, 187, 194, 197, 211, 212, 235, 238, 244, 245, 248, 252, 268, 269, 290, 298, 301, 310, 311, 312, 314, 318, 343, 350, 363, 370, 608, 609, 847, 848, 854, 874, 941, 961], "start_tim": [7, 10, 18, 105, 106, 118, 135, 168, 200], "elapsed_tim": [7, 35, 62, 105, 106, 118, 196], "float": [7, 10, 12, 15, 18, 37, 41, 42, 43, 44, 49, 55, 56, 60, 61, 62, 65, 88, 92, 126, 143, 151, 165, 169, 202, 234, 235, 239, 243, 306, 312, 323, 331, 332, 337, 346, 350, 362, 363, 370, 371, 373, 374, 375, 379, 381, 383, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 442, 443, 444, 446, 448, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 533, 534, 538, 541, 542, 543, 544, 545, 546, 547, 548, 552, 553, 560, 561, 563, 564, 565, 566, 567, 569, 570, 572, 573, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 708, 715, 718, 724, 725, 726, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 752, 760, 763, 766, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 802, 804, 805, 806, 808, 811, 814, 815, 821, 822, 824, 826, 828, 829, 830, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 865, 867, 868, 871, 881, 882, 894, 906, 912, 917, 921, 931, 932, 934, 935, 941, 946, 947, 972, 973, 974, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 18, 102, 110, 112, 194, 195, 197, 278], "prediction_performance_label": 7, "dictionari": [7, 8, 32, 84, 115, 148, 178, 311, 312, 330, 331, 332, 339, 348, 350, 362, 370, 399, 414, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 457, 460, 476, 481, 487, 488, 489, 490, 492, 493, 494, 495, 496, 498, 517, 518, 519, 520, 531, 532, 534, 537, 538, 539, 582, 583, 584, 614, 635, 636, 651, 663, 746, 749, 750, 757, 758, 760, 771, 807, 812, 821, 855, 856, 857, 858, 862, 872, 920, 927, 931, 946, 957, 966, 967, 968, 972, 980, 983, 984, 985, 986, 987], "necessari": [7, 13, 103, 179, 184, 221, 235, 236, 242, 255, 316, 323, 332, 335, 336, 337, 338, 339, 340, 341, 345, 348, 362, 364, 369, 402, 412, 438, 439, 441, 442, 443, 444, 445, 447, 484, 594, 595, 596, 602, 606, 607, 610, 611, 612, 613, 614, 615, 621, 623, 625, 626, 641, 645, 742, 811, 820, 830, 834, 840, 920, 923, 927, 930, 933, 941, 947, 966, 972, 980], "defin": [7, 9, 12, 49, 52, 61, 64, 65, 67, 78, 85, 90, 98, 99, 100, 118, 133, 135, 142, 143, 144, 152, 153, 158, 180, 183, 187, 196, 197, 206, 210, 216, 218, 221, 226, 235, 236, 238, 242, 244, 245, 246, 247, 253, 273, 281, 298, 306, 310, 311, 323, 333, 336, 337, 338, 339, 343, 344, 346, 348, 349, 350, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 372, 378, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 409, 413, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 439, 469, 470, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 572, 573, 577, 578, 579, 580, 582, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 646, 647, 649, 658, 660, 666, 671, 672, 673, 674, 677, 680, 687, 690, 694, 695, 697, 699, 700, 702, 703, 706, 709, 715, 730, 734, 739, 740, 744, 745, 746, 749, 750, 752, 760, 771, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 834, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 871, 873, 876, 882, 915, 920, 921, 927, 928, 929, 930, 932, 933, 934, 936, 937, 938, 939, 941, 943, 945, 946, 947, 952, 962, 965, 968, 969, 974, 978, 979, 980, 982, 983, 984, 986, 987, 988], "complexity_label": [7, 10], "type": [7, 15, 49, 63, 64, 74, 81, 95, 107, 110, 140, 148, 150, 151, 152, 156, 179, 181, 219, 220, 223, 226, 230, 241, 242, 244, 245, 302, 306, 310, 312, 318, 319, 324, 326, 330, 331, 332, 334, 335, 337, 338, 340, 341, 342, 343, 348, 349, 353, 356, 358, 359, 363, 370, 414, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 446, 458, 459, 465, 517, 522, 531, 532, 535, 536, 538, 539, 541, 550, 554, 567, 577, 579, 580, 588, 606, 608, 622, 624, 629, 637, 639, 642, 643, 651, 657, 664, 666, 678, 679, 687, 690, 732, 733, 736, 737, 744, 745, 746, 752, 760, 772, 774, 775, 790, 791, 792, 794, 795, 796, 798, 799, 800, 801, 802, 808, 809, 810, 813, 815, 821, 822, 828, 849, 850, 851, 852, 853, 863, 865, 867, 868, 871, 875, 876, 894, 895, 902, 905, 918, 921, 923, 928, 930, 931, 932, 933, 934, 935, 941, 943, 947, 954, 955, 959, 964, 965, 966, 972, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 13, 50, 77, 129, 130, 133, 150, 151, 158, 161, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 178, 182, 183, 184, 188, 194, 195, 213, 219, 248, 284, 296, 303, 307, 310, 319, 332, 339, 350, 365, 371, 415, 432, 433, 434, 499, 543, 544, 547, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 847, 848, 849, 850, 851, 852, 853, 915, 925, 927, 945, 946, 964, 972, 974, 977, 979, 984, 986], "toarrai": [7, 291, 318, 363, 370, 516, 532, 538, 540, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 821, 837, 838, 902, 905, 921, 934, 941], "count_nonzero": [7, 10, 323], "configur": [7, 10, 65, 66, 152, 217, 219, 310, 322, 335, 337, 339, 343, 345, 348, 350, 353, 358, 363, 370, 371, 384, 393, 394, 396, 397, 399, 402, 412, 414, 418, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 516, 517, 518, 519, 520, 531, 532, 533, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 576, 577, 578, 579, 580, 582, 585, 588, 589, 590, 591, 592, 638, 639, 640, 641, 642, 644, 645, 737, 792, 797, 800, 804, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 845, 897, 898, 928, 931, 941, 946, 951, 966, 968, 976, 979, 980, 981, 982, 984, 986, 987], "penalti": [7, 10, 27, 75, 148, 157, 158, 168, 172, 179, 194, 195, 208, 243, 268, 283, 291, 303, 310, 323, 345, 348, 361, 364, 367, 371, 421, 422, 423, 424, 425, 426, 428, 452, 481, 487, 488, 489, 490, 492, 493, 497, 498, 547, 593, 596, 597, 598, 599, 602, 603, 604, 607, 608, 609, 610, 611, 612, 618, 619, 620, 622, 626, 628, 630, 631, 637, 760, 828, 847, 848, 850, 852, 853, 854, 920, 927, 930, 935, 941, 945, 946, 964, 966, 974, 977, 979, 981, 982, 984, 985, 987], "elasticnet": [7, 10, 160, 170, 243, 248, 323, 343, 348, 367, 597, 602, 607, 608, 609, 610, 611, 612, 613, 618, 626, 628, 631, 927, 945, 972, 973, 976, 977, 978, 980, 981, 983, 984, 985, 986], "001": [7, 13, 29, 40, 57, 188, 206, 221, 235, 237, 290, 334, 343, 366, 486, 487, 489, 496, 577, 594, 595, 596, 597, 602, 603, 610, 611, 612, 613, 616, 617, 618, 626, 627, 628, 629, 631, 634, 639, 640, 643, 644, 744, 745, 805, 806, 842, 843, 849, 850, 851, 852, 853, 920, 957, 966], "modified_hub": [7, 626, 945], "fit_intercept": [7, 158, 159, 165, 184, 193, 206, 243, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 637, 847, 848, 854, 927, 945, 976, 980, 981, 982, 984, 985, 986], "tol": [7, 10, 16, 67, 85, 109, 146, 159, 170, 172, 186, 187, 193, 195, 206, 216, 224, 271, 283, 306, 310, 339, 343, 369, 374, 394, 397, 399, 402, 409, 412, 421, 422, 428, 432, 433, 434, 481, 482, 483, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 509, 510, 511, 512, 552, 577, 588, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 622, 624, 626, 627, 628, 629, 630, 632, 633, 635, 636, 637, 638, 639, 641, 643, 645, 744, 745, 760, 797, 805, 806, 842, 843, 847, 848, 849, 850, 851, 852, 853, 917, 927, 945, 946, 962, 966, 976, 977, 979, 980, 981, 982, 983, 985, 986, 987], "n_iter_no_chang": [7, 109, 187, 283, 310, 342, 350, 369, 509, 510, 511, 512, 616, 617, 618, 626, 627, 628, 805, 806, 945, 980, 983], "l1_ratio": [7, 10, 14, 163, 164, 170, 243, 248, 323, 348, 367, 488, 490, 497, 596, 597, 602, 608, 609, 610, 611, 612, 613, 618, 626, 628, 631, 927, 945, 973, 975, 977, 984, 986], "75": [7, 10, 30, 40, 75, 102, 142, 143, 147, 158, 161, 186, 219, 223, 224, 235, 248, 258, 273, 308, 310, 319, 501, 608, 656, 662, 683, 688, 694, 702, 705, 741, 746, 826, 837, 844, 860, 931, 933, 941, 947, 950, 962, 974], "9": [7, 9, 22, 24, 25, 27, 28, 29, 38, 40, 46, 53, 57, 59, 75, 82, 98, 107, 108, 109, 110, 111, 116, 118, 125, 126, 138, 142, 147, 150, 151, 152, 161, 170, 192, 193, 196, 197, 199, 202, 210, 211, 215, 221, 222, 223, 224, 238, 242, 244, 252, 255, 257, 258, 261, 262, 263, 268, 269, 273, 275, 276, 277, 288, 290, 292, 298, 302, 308, 319, 334, 335, 343, 349, 353, 354, 355, 360, 363, 364, 366, 369, 370, 390, 400, 407, 432, 433, 434, 435, 440, 470, 477, 484, 488, 489, 490, 497, 510, 517, 520, 533, 541, 557, 558, 577, 580, 584, 589, 597, 608, 611, 642, 659, 672, 675, 690, 697, 718, 727, 728, 729, 744, 747, 749, 750, 764, 767, 772, 774, 777, 785, 786, 790, 791, 796, 799, 805, 806, 814, 820, 823, 884, 888, 920, 927, 931, 935, 941, 945, 946, 949, 957, 961, 966, 970, 973, 974, 975, 977, 986], "non_zero": [7, 12], "coeffici": [7, 10, 34, 45, 53, 55, 71, 72, 75, 85, 88, 130, 148, 149, 150, 157, 163, 164, 165, 166, 170, 172, 173, 174, 175, 176, 177, 181, 182, 194, 197, 219, 270, 282, 283, 284, 310, 311, 312, 323, 333, 337, 339, 350, 352, 361, 364, 365, 367, 371, 372, 375, 383, 402, 415, 417, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 446, 474, 476, 477, 481, 485, 487, 489, 492, 493, 498, 502, 504, 506, 508, 510, 512, 515, 518, 520, 532, 539, 543, 547, 559, 561, 564, 577, 585, 586, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 641, 653, 666, 669, 678, 683, 687, 692, 699, 702, 724, 726, 734, 735, 739, 740, 743, 761, 771, 774, 781, 782, 791, 799, 806, 809, 821, 828, 847, 848, 849, 850, 851, 852, 853, 856, 858, 922, 925, 927, 945, 946, 964, 972, 976, 977, 979, 980, 981, 983, 984, 985, 986], "misclassif": [7, 743, 945, 946, 947, 973], "ratio": [7, 49, 61, 67, 94, 148, 210, 212, 224, 228, 323, 337, 362, 364, 366, 369, 400, 406, 443, 444, 465, 491, 499, 500, 501, 608, 660, 662, 666, 674, 685, 688, 731, 732, 733, 736, 742, 771, 774, 794, 840, 900, 925, 937, 947, 962, 987], "sparsifi": [7, 163, 323, 608, 609, 616, 618, 626, 627, 628, 847, 915, 974], "15": [7, 12, 13, 14, 27, 28, 31, 36, 40, 50, 56, 57, 61, 67, 73, 75, 83, 95, 99, 103, 107, 108, 128, 132, 135, 139, 146, 150, 152, 176, 181, 193, 197, 201, 204, 206, 223, 224, 230, 238, 240, 243, 246, 247, 249, 256, 257, 261, 264, 268, 269, 273, 275, 277, 288, 296, 298, 301, 305, 308, 315, 331, 332, 337, 349, 366, 369, 370, 391, 404, 440, 447, 481, 487, 505, 506, 548, 594, 602, 611, 613, 618, 626, 628, 642, 690, 764, 777, 800, 920, 926, 927, 928, 931, 934, 935, 941, 946, 949, 957, 962, 970, 974, 984, 986, 987], "05": [7, 8, 14, 22, 24, 27, 33, 40, 55, 57, 59, 60, 62, 69, 82, 90, 102, 109, 111, 116, 129, 144, 159, 178, 181, 193, 203, 204, 206, 221, 223, 224, 227, 235, 242, 245, 246, 258, 261, 266, 273, 275, 280, 284, 288, 290, 303, 334, 371, 400, 406, 542, 545, 546, 548, 563, 564, 565, 569, 570, 572, 573, 575, 582, 583, 599, 640, 644, 705, 746, 797, 847, 848, 927, 935, 941], "n_support_vector": 7, "len": [7, 8, 10, 11, 15, 16, 18, 27, 28, 29, 33, 34, 37, 39, 40, 45, 46, 47, 55, 56, 57, 58, 59, 60, 64, 66, 88, 91, 95, 96, 99, 102, 107, 108, 109, 125, 126, 131, 132, 135, 143, 147, 152, 154, 178, 179, 197, 202, 206, 209, 210, 211, 214, 215, 221, 223, 224, 230, 233, 235, 236, 243, 244, 246, 249, 252, 253, 260, 262, 263, 268, 274, 275, 276, 287, 288, 291, 298, 305, 308, 310, 311, 312, 318, 348, 350, 372, 388, 396, 400, 406, 414, 457, 465, 500, 519, 520, 532, 547, 582, 583, 731, 746, 760, 770, 774, 776, 779, 842, 843, 964, 965, 966, 981, 984], "support_vectors_": [7, 10, 15, 299, 302, 303, 849, 850, 851, 852, 853, 946], "squared_error": [7, 95, 111, 112, 283, 369, 508, 509, 510, 512, 515, 621, 626, 628, 643, 856, 858, 945, 985], "learning_r": [7, 98, 99, 110, 111, 112, 113, 204, 253, 269, 271, 281, 283, 369, 503, 504, 509, 510, 511, 512, 618, 626, 627, 628, 642, 804, 805, 806, 928, 938, 945, 973, 981, 985], "max_depth": [7, 28, 98, 99, 100, 101, 104, 107, 110, 111, 112, 113, 116, 117, 119, 146, 200, 232, 247, 282, 283, 314, 316, 317, 318, 349, 350, 369, 503, 504, 507, 508, 509, 510, 511, 512, 514, 515, 516, 749, 750, 772, 855, 856, 857, 858, 859, 860, 861, 920, 938, 947, 981, 983], "n_estim": [7, 10, 24, 28, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 116, 117, 120, 146, 154, 200, 214, 218, 223, 232, 247, 275, 280, 282, 323, 349, 350, 369, 371, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 582, 749, 750, 920, 937, 938, 969, 980], "n_tree": 7, "loop": [7, 8, 102, 111, 151, 230, 240, 318, 323, 337, 338, 343, 362, 366, 371, 596, 597, 602, 603, 609, 610, 611, 612, 613, 920, 944, 945, 961, 975, 976, 979, 984, 985], "previous": [7, 49, 52, 65, 141, 151, 233, 242, 284, 332, 345, 348, 353, 362, 367, 370, 391, 394, 404, 474, 484, 491, 599, 608, 609, 616, 618, 626, 627, 628, 847, 899, 927, 941, 951, 969, 972, 973, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "subsequ": [7, 29, 53, 69, 88, 130, 167, 181, 237, 240, 253, 255, 298, 319, 337, 339, 343, 350, 362, 363, 369, 372, 388, 446, 458, 503, 504, 509, 511, 512, 616, 618, 626, 749, 750, 776, 777, 780, 783, 784, 785, 786, 787, 805, 823, 827, 921, 930, 932, 981, 982, 986], "relax": [7, 362, 370, 403, 944, 979], "sgd": [7, 8, 148, 157, 186, 193, 206, 243, 269, 270, 283, 310, 319, 325, 454, 462, 599, 616, 617, 618, 621, 626, 627, 628, 629, 805, 806, 920, 935, 953, 968, 972, 975, 976, 977, 979, 983, 985], "svr": [7, 10, 148, 205, 280, 293, 323, 506, 517, 518, 543, 544, 593, 628, 746, 848, 850, 852, 924, 964, 972, 974, 976, 977, 980, 982, 983, 984, 985, 986, 987], "optim": [7, 13, 25, 49, 50, 52, 55, 66, 71, 72, 85, 98, 110, 112, 132, 135, 136, 140, 141, 142, 167, 168, 172, 187, 195, 212, 233, 240, 243, 248, 252, 257, 271, 273, 278, 284, 290, 300, 306, 310, 311, 312, 319, 323, 326, 331, 334, 337, 339, 340, 348, 350, 353, 357, 359, 360, 362, 364, 366, 367, 369, 371, 372, 373, 395, 398, 399, 400, 402, 407, 411, 412, 422, 423, 429, 481, 484, 485, 487, 489, 493, 507, 508, 509, 510, 524, 560, 561, 569, 570, 585, 588, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 618, 619, 620, 622, 623, 624, 626, 627, 628, 630, 631, 632, 633, 634, 637, 640, 642, 644, 645, 651, 672, 679, 746, 760, 790, 791, 792, 794, 796, 797, 798, 799, 800, 805, 806, 824, 835, 839, 840, 847, 848, 849, 850, 851, 852, 853, 923, 924, 925, 926, 927, 931, 932, 933, 934, 935, 936, 945, 946, 947, 951, 955, 961, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 986, 987], "few": [7, 14, 18, 35, 42, 48, 89, 108, 138, 141, 142, 168, 177, 179, 197, 212, 221, 237, 238, 242, 270, 273, 277, 280, 281, 282, 283, 284, 285, 287, 306, 312, 323, 332, 333, 334, 337, 339, 349, 351, 356, 359, 360, 362, 366, 367, 371, 372, 388, 399, 511, 512, 538, 541, 605, 642, 645, 840, 884, 899, 927, 928, 930, 931, 934, 935, 944, 946, 947, 955, 957, 964, 965, 966, 978], "drawn": [7, 48, 73, 102, 132, 135, 144, 150, 216, 242, 257, 333, 362, 368, 369, 372, 374, 419, 420, 421, 422, 423, 424, 425, 426, 465, 473, 483, 505, 506, 513, 561, 577, 582, 591, 784, 839, 840, 857, 858, 927, 941, 943, 975], "boost": [7, 97, 98, 99, 100, 104, 115, 118, 121, 148, 343, 350, 371, 398, 416, 417, 446, 451, 454, 465, 470, 503, 504, 509, 510, 511, 512, 582, 583, 584, 585, 690, 691, 697, 699, 749, 750, 751, 771, 774, 809, 821, 822, 927, 931, 951, 953, 968, 972, 973, 975, 977, 978, 979, 981, 985], "detriment": [7, 132, 324, 371, 927], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 52, 55, 60, 62, 67, 69, 73, 83, 108, 147, 154, 179, 207, 209, 216, 221, 238, 246, 274, 278, 290, 310, 311, 962], "add_subplot": [7, 15, 23, 25, 38, 41, 59, 62, 81, 91, 92, 98, 152, 176, 194, 201, 203, 287, 288, 344], "111": [7, 8, 15, 62, 81, 91, 92, 98, 176, 194, 203, 253, 800, 975], "line1": [7, 12, 202], "tab": [7, 49, 115, 118, 135, 140, 142, 167, 168, 281, 363, 979], "blue": [7, 19, 20, 24, 31, 83, 85, 102, 105, 113, 115, 118, 120, 131, 140, 142, 156, 159, 167, 168, 175, 177, 202, 210, 229, 230, 235, 269, 278, 281, 289, 334, 362, 367], "set_xlabel": [7, 10, 41, 49, 55, 66, 67, 69, 81, 83, 90, 98, 144, 146, 147, 150, 152, 153, 156, 168, 174, 176, 177, 179, 181, 194, 195, 211, 215, 235, 237, 241, 246, 247, 258, 273, 274, 278, 290, 311, 312, 314], "y1_label": 7, "set_ylabel": [7, 8, 10, 41, 49, 55, 60, 66, 67, 69, 73, 81, 83, 90, 96, 98, 105, 144, 152, 156, 168, 170, 174, 176, 177, 179, 181, 194, 211, 215, 221, 235, 237, 241, 246, 247, 252, 258, 273, 274, 278, 280, 290, 306, 311, 314, 962], "spine": [7, 14, 190, 273], "set_color": [7, 190], "get_color": 7, "yaxi": [7, 10, 41, 55, 81, 91, 92, 176, 199, 201, 204, 221, 253, 258, 310], "tick_param": [7, 14, 121, 221, 235, 277, 290], "ax2": [7, 52, 55, 60, 62, 73, 83, 108, 147, 154, 179, 207, 216, 221, 238, 246, 263, 274, 278, 290, 310], "frameon": [7, 185], "line2": [7, 12, 202, 307], "orang": [7, 49, 83, 86, 87, 93, 113, 115, 142, 147, 167, 168, 189, 213, 224, 256, 264, 281, 317, 932], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 15, 23, 56, 146, 179, 181, 219, 230, 237, 275, 291, 310, 311, 312, 344, 348, 821], "prediction_perform": 7, "deduc": 7, "guarante": [7, 8, 73, 74, 151, 187, 210, 252, 253, 273, 311, 319, 325, 331, 345, 346, 362, 366, 367, 370, 486, 595, 608, 609, 618, 622, 624, 626, 628, 637, 644, 763, 766, 788, 789, 826, 828, 840, 841, 854, 923, 927, 928, 930, 934, 939, 943, 947, 965, 982], "aspect": [7, 53, 78, 85, 139, 152, 199, 206, 262, 304, 323, 324, 325, 337, 350, 362, 608, 609, 947, 955], "plot_model_complexity_influ": 7, "doesn": [8, 179, 222, 270, 298, 345, 350, 362, 370, 371, 375, 385, 425, 582, 583, 616, 618, 626, 666, 780, 790, 791, 805, 930, 931, 947, 976], "t": [8, 11, 12, 15, 16, 24, 27, 31, 35, 36, 38, 39, 40, 48, 50, 53, 66, 71, 72, 73, 75, 77, 83, 86, 87, 91, 93, 95, 96, 98, 99, 102, 103, 109, 110, 111, 112, 113, 117, 118, 133, 136, 138, 139, 140, 143, 144, 148, 151, 152, 153, 154, 158, 160, 166, 173, 176, 177, 178, 179, 180, 197, 198, 200, 201, 202, 203, 213, 222, 225, 227, 234, 235, 253, 265, 266, 270, 280, 283, 284, 287, 288, 290, 294, 295, 298, 299, 302, 303, 306, 311, 312, 317, 318, 319, 323, 324, 331, 332, 334, 337, 339, 341, 343, 345, 348, 349, 350, 353, 360, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 375, 379, 383, 385, 388, 397, 398, 400, 406, 413, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 445, 446, 463, 464, 465, 469, 470, 475, 480, 482, 484, 491, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 517, 518, 519, 520, 540, 541, 544, 557, 558, 560, 561, 577, 578, 580, 581, 582, 583, 585, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 642, 646, 654, 660, 666, 667, 675, 685, 686, 704, 705, 706, 716, 737, 738, 741, 742, 746, 749, 750, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 794, 795, 798, 799, 804, 805, 806, 814, 819, 821, 822, 828, 840, 842, 843, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 884, 895, 920, 925, 927, 930, 931, 932, 933, 934, 935, 936, 937, 938, 941, 945, 946, 947, 954, 957, 964, 965, 966, 967, 968, 973, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988], "memori": [8, 50, 66, 89, 109, 255, 280, 282, 284, 285, 311, 312, 324, 325, 331, 337, 340, 346, 350, 363, 366, 367, 370, 373, 374, 392, 393, 394, 395, 396, 397, 399, 400, 404, 407, 409, 418, 423, 429, 446, 453, 458, 483, 484, 485, 488, 505, 506, 507, 508, 513, 514, 515, 531, 532, 538, 539, 541, 596, 597, 598, 602, 603, 608, 609, 610, 611, 612, 613, 616, 618, 619, 626, 627, 628, 629, 630, 631, 634, 727, 728, 729, 730, 746, 752, 760, 769, 770, 771, 772, 775, 776, 777, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 808, 809, 826, 828, 837, 838, 840, 845, 847, 848, 855, 856, 857, 858, 868, 900, 916, 927, 933, 934, 941, 943, 944, 946, 947, 951, 952, 955, 957, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "onlin": [8, 14, 32, 85, 88, 148, 157, 193, 325, 332, 336, 342, 350, 362, 367, 370, 372, 393, 397, 399, 445, 452, 481, 486, 487, 488, 489, 495, 496, 532, 534, 608, 616, 617, 618, 626, 628, 774, 783, 784, 785, 786, 787, 790, 791, 796, 798, 799, 817, 818, 828, 847, 848, 923, 927, 935, 937, 950, 953, 955, 964, 968, 972, 976, 977, 979, 987], "partial_fit": [8, 46, 85, 284, 325, 339, 350, 362, 367, 393, 399, 484, 486, 487, 488, 539, 547, 608, 609, 616, 617, 618, 626, 627, 628, 776, 777, 780, 781, 783, 784, 785, 786, 787, 804, 805, 806, 817, 818, 828, 847, 927, 933, 935, 972, 974, 975, 976, 977, 978, 979, 980, 983, 985, 986, 987], "fed": [8, 118, 319, 332, 370, 920, 936, 941, 983], "batch": [8, 11, 59, 85, 89, 266, 284, 325, 346, 350, 370, 391, 393, 397, 399, 401, 403, 481, 483, 484, 486, 487, 488, 489, 490, 492, 493, 495, 496, 614, 635, 636, 751, 764, 765, 783, 784, 785, 786, 787, 805, 806, 817, 818, 828, 840, 887, 897, 935, 936, 945, 972, 976, 977, 980, 981, 982, 983, 985, 987, 988], "remain": [8, 23, 25, 65, 105, 110, 112, 132, 151, 179, 195, 221, 233, 237, 241, 244, 359, 363, 364, 366, 370, 414, 417, 465, 466, 471, 478, 484, 520, 560, 561, 649, 712, 718, 748, 749, 750, 751, 754, 756, 783, 784, 785, 787, 888, 920, 921, 930, 931, 935, 941, 947, 952, 974, 980, 986], "hashingvector": [8, 312, 325, 439, 538, 540, 973, 979, 980, 981, 982, 985], "where": [8, 11, 12, 13, 15, 16, 18, 22, 23, 24, 29, 49, 52, 73, 78, 83, 85, 88, 91, 95, 96, 98, 101, 103, 108, 109, 111, 115, 130, 133, 135, 141, 144, 147, 151, 158, 163, 171, 180, 188, 189, 190, 192, 196, 197, 199, 201, 202, 206, 207, 210, 213, 217, 227, 231, 232, 235, 237, 241, 242, 244, 246, 247, 271, 273, 275, 276, 277, 278, 280, 282, 283, 288, 289, 296, 306, 307, 308, 314, 315, 319, 323, 324, 325, 331, 333, 334, 336, 337, 339, 341, 343, 344, 345, 348, 349, 350, 353, 356, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 383, 388, 395, 397, 398, 402, 411, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 446, 481, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 532, 533, 534, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 559, 560, 561, 563, 565, 569, 572, 573, 575, 577, 578, 579, 580, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 638, 641, 642, 643, 646, 649, 657, 662, 666, 674, 678, 679, 680, 688, 691, 704, 712, 717, 718, 719, 722, 730, 731, 732, 733, 736, 739, 741, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 769, 771, 772, 773, 775, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 791, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 811, 818, 821, 823, 824, 827, 828, 833, 835, 841, 842, 843, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 875, 876, 877, 878, 884, 916, 920, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 945, 946, 947, 952, 954, 957, 958, 972, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "word": [8, 14, 18, 64, 135, 210, 213, 298, 311, 312, 323, 332, 333, 337, 339, 342, 350, 359, 362, 364, 365, 366, 367, 403, 461, 473, 484, 486, 491, 538, 539, 541, 646, 777, 787, 844, 925, 929, 933, 936, 941, 944, 945, 955, 964, 965, 972, 980], "federicov": 8, "itertool": [8, 38, 40, 57, 119, 152, 164, 222, 227, 235, 242, 244, 369], "pathlib": [8, 987], "path": [8, 15, 16, 148, 157, 164, 168, 314, 331, 335, 337, 341, 345, 346, 350, 392, 396, 400, 436, 437, 438, 449, 450, 451, 453, 454, 455, 458, 459, 498, 507, 508, 513, 514, 515, 516, 543, 544, 547, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 631, 632, 633, 634, 635, 636, 638, 808, 809, 854, 855, 856, 857, 858, 889, 920, 927, 928, 937, 951, 952, 972, 973, 976, 978, 979, 981, 982, 984, 985, 987, 988], "hashlib": 8, "sha256": [8, 987], "tarfil": 8, "sy": [8, 12, 15, 18, 187, 210, 253, 291, 312, 332, 348, 567], "rcparam": [8, 206, 211], "htmlparser": 8, "urllib": [8, 16], "request": [8, 16, 42, 179, 197, 283, 324, 331, 335, 336, 340, 350, 351, 356, 367, 370, 371, 399, 522, 561, 582, 649, 934, 966, 978, 979, 980], "urlretriev": 8, "get_data_hom": 8, "feature_extract": [8, 14, 18, 42, 43, 46, 47, 50, 61, 64, 88, 148, 236, 291, 309, 310, 311, 312, 325, 326, 332, 362, 363, 370, 414, 453, 494, 821, 929, 965, 966, 972, 973, 974, 975, 978, 979], "passiveaggressiveclassifi": [8, 186, 323, 325, 927, 932, 973, 976, 977, 979, 980, 983, 985], "perceptron": [8, 148, 152, 186, 189, 195, 216, 267, 325, 348, 370, 464, 465, 472, 616, 626, 774, 804, 805, 806, 809, 828, 929, 932, 936, 945, 953, 968, 976, 978, 979, 980, 984], "naive_bay": [8, 22, 23, 25, 28, 116, 120, 236, 237, 310, 319, 325, 326, 332, 363, 369, 388, 519, 809, 925, 932, 933, 966, 973, 974, 976, 977, 978, 979], "multinomialnb": [8, 325, 332, 363, 370, 783, 784, 785, 786, 933, 966, 974, 976, 979, 980, 984, 985, 987], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 15, 65, 114, 138, 141, 143, 151, 152, 179, 197, 200, 207, 233, 273, 318, 319, 324, 332, 335, 336, 337, 339, 341, 342, 343, 350, 362, 363, 364, 366, 367, 369, 371, 374, 391, 393, 401, 403, 404, 409, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 437, 438, 441, 442, 446, 447, 453, 458, 459, 464, 472, 477, 481, 482, 487, 488, 489, 490, 492, 495, 496, 498, 502, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 531, 538, 539, 540, 541, 547, 552, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 581, 582, 583, 585, 586, 587, 588, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 640, 644, 645, 647, 648, 650, 652, 654, 662, 691, 710, 716, 723, 727, 738, 746, 749, 750, 751, 752, 760, 764, 765, 768, 771, 772, 774, 777, 779, 782, 783, 784, 785, 787, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 805, 806, 812, 834, 847, 848, 849, 850, 851, 852, 853, 859, 861, 865, 867, 868, 869, 871, 883, 884, 904, 915, 919, 920, 921, 926, 927, 931, 936, 937, 943, 945, 946, 955, 979, 980, 981], "builder": [8, 10, 341], "__file__": [8, 10, 985], "global": [8, 10, 38, 52, 85, 179, 199, 200, 219, 244, 270, 281, 319, 323, 324, 343, 348, 350, 362, 372, 393, 402, 412, 418, 540, 576, 582, 638, 641, 642, 645, 657, 678, 679, 687, 732, 733, 736, 737, 764, 843, 845, 899, 901, 920, 928, 931, 937, 947, 955, 980, 987], "21578": [8, 985], "uci": [8, 278, 331, 334, 450, 452, 454, 460], "ml": [8, 331, 334, 342, 450, 452, 460, 927, 929, 951, 952, 955], "uncompress": [8, 458, 459, 966], "reuterspars": 8, "pars": [8, 16, 323, 331, 332, 338, 458], "sgml": [8, 323], "file": [8, 12, 15, 29, 44, 323, 325, 331, 332, 334, 335, 337, 341, 342, 343, 345, 348, 356, 363, 367, 437, 443, 444, 446, 453, 458, 459, 484, 529, 530, 538, 539, 541, 859, 934, 947, 951, 954, 958, 972, 973, 975, 978, 979, 980, 981, 984, 985, 986, 987], "yield": [8, 9, 23, 41, 71, 72, 73, 74, 109, 111, 174, 179, 194, 197, 240, 252, 268, 273, 295, 300, 310, 311, 319, 323, 325, 331, 342, 350, 359, 362, 364, 366, 367, 369, 370, 371, 372, 388, 399, 418, 422, 458, 459, 487, 488, 489, 491, 496, 503, 504, 509, 510, 511, 512, 517, 518, 544, 552, 597, 601, 602, 603, 605, 611, 613, 615, 623, 625, 636, 649, 675, 730, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 771, 772, 773, 775, 779, 782, 839, 840, 878, 885, 887, 888, 923, 925, 927, 928, 931, 946, 947, 961, 977, 978, 980, 983, 985], "__init__": [8, 15, 51, 143, 253, 298, 337, 339, 341, 342, 343, 344, 350, 370, 376, 891, 973, 978, 980, 985, 986, 987, 988], "self": [8, 15, 18, 23, 25, 51, 143, 148, 253, 286, 292, 298, 331, 337, 338, 339, 342, 343, 344, 345, 362, 370, 372, 376, 379, 383, 384, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 450, 458, 459, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 653, 744, 745, 746, 749, 750, 760, 765, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 891, 897, 905, 934, 952, 953, 955, 968, 974, 979, 986], "latin": [8, 370], "_reset": 8, "handle_starttag": 8, "tag": [8, 45, 65, 206, 289, 331, 336, 340, 341, 345, 348, 350, 370, 446, 776, 952, 954, 977, 981, 982, 983, 986, 987, 988], "attr": [8, 51], "start_": 8, "getattr": [8, 273, 339, 350], "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 64, 216, 285, 334], "topic_d": 8, "fd": 8, "chunk": [8, 46, 323, 324, 362, 367, 373, 395, 399, 418, 488, 727, 730, 776, 777, 783, 784, 785, 786, 787, 845, 933, 979, 980, 981, 982, 983], "feed": [8, 78, 180, 312, 332, 342, 348, 362, 370, 821, 932], "decod": [8, 266, 332, 350, 453, 519, 538, 539, 541, 972, 973], "close": [8, 12, 16, 22, 23, 25, 34, 35, 42, 50, 55, 61, 71, 72, 75, 90, 102, 108, 111, 114, 118, 135, 136, 140, 142, 151, 153, 185, 200, 206, 212, 215, 221, 227, 235, 236, 259, 260, 273, 280, 298, 303, 311, 319, 332, 337, 339, 345, 348, 350, 351, 360, 361, 362, 365, 366, 369, 372, 400, 405, 422, 458, 459, 482, 513, 578, 593, 597, 611, 622, 624, 637, 655, 695, 744, 764, 765, 783, 784, 785, 787, 794, 868, 920, 924, 925, 927, 928, 930, 931, 932, 934, 937, 938, 941, 946, 955, 964, 975, 979, 980, 981], "handle_data": 8, "start_reut": 8, "attribut": [8, 23, 29, 45, 65, 94, 105, 106, 109, 129, 133, 179, 187, 215, 226, 233, 234, 239, 247, 262, 266, 283, 312, 318, 325, 326, 330, 331, 332, 334, 337, 340, 344, 348, 358, 359, 360, 362, 363, 364, 365, 367, 369, 370, 371, 372, 377, 378, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 457, 460, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 647, 648, 650, 651, 652, 685, 742, 744, 745, 746, 749, 750, 752, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 891, 892, 915, 925, 927, 932, 934, 935, 937, 941, 944, 945, 946, 947, 955, 957, 963, 966, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "end_reut": 8, "sub": [8, 33, 44, 49, 52, 55, 64, 95, 214, 221, 282, 287, 288, 295, 298, 307, 332, 337, 339, 343, 363, 369, 370, 486, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 621, 892, 927, 931, 945, 966, 982, 986], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 14, 16, 28, 42, 66, 75, 85, 88, 99, 102, 107, 109, 110, 112, 113, 133, 146, 148, 158, 159, 187, 194, 223, 224, 228, 230, 246, 268, 275, 282, 288, 290, 298, 337, 339, 343, 345, 346, 349, 350, 357, 362, 365, 367, 369, 371, 374, 388, 391, 392, 394, 396, 397, 398, 399, 402, 404, 409, 411, 412, 413, 421, 422, 428, 432, 433, 434, 461, 465, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 504, 509, 510, 511, 512, 514, 517, 518, 531, 532, 538, 539, 541, 543, 544, 552, 560, 577, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 782, 797, 804, 805, 806, 807, 808, 812, 819, 821, 823, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 862, 883, 884, 890, 897, 921, 927, 928, 930, 931, 934, 935, 936, 944, 945, 946, 947, 952, 955, 961, 965, 966, 968, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988], "archiv": [8, 331, 332, 334, 335, 356, 362, 393, 452, 460, 707, 708, 929, 946, 966], "exist": [8, 9, 16, 18, 49, 197, 235, 270, 273, 331, 336, 339, 340, 343, 348, 350, 351, 353, 356, 362, 366, 367, 369, 370, 372, 377, 385, 388, 401, 403, 418, 449, 499, 505, 506, 507, 508, 514, 515, 535, 539, 547, 553, 582, 583, 595, 626, 627, 628, 630, 648, 650, 652, 711, 714, 718, 747, 748, 751, 753, 754, 755, 756, 759, 761, 762, 763, 764, 765, 766, 767, 793, 808, 813, 821, 822, 915, 923, 928, 930, 931, 935, 937, 938, 941, 951, 955, 965, 972, 979, 981, 982, 983, 984, 985, 986, 987, 988], "str": [8, 10, 15, 53, 55, 94, 96, 107, 197, 215, 235, 247, 253, 263, 296, 310, 331, 332, 346, 370, 373, 374, 378, 382, 389, 390, 392, 393, 394, 395, 396, 397, 399, 400, 402, 407, 414, 415, 416, 417, 418, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 501, 511, 512, 516, 517, 518, 519, 520, 526, 531, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 567, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 609, 616, 617, 621, 623, 625, 626, 628, 638, 639, 642, 646, 647, 648, 649, 650, 652, 654, 657, 659, 661, 663, 676, 678, 679, 681, 682, 687, 706, 720, 723, 727, 728, 729, 730, 731, 732, 733, 736, 738, 739, 740, 746, 749, 750, 752, 757, 758, 760, 769, 770, 771, 772, 773, 775, 780, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 845, 859, 860, 861, 863, 866, 867, 868, 871, 874, 876, 880, 892, 894, 915, 916, 919, 987], "kei": [8, 9, 10, 16, 18, 38, 108, 118, 146, 150, 197, 218, 236, 238, 239, 281, 282, 283, 284, 285, 325, 330, 339, 342, 343, 344, 348, 350, 353, 362, 363, 366, 372, 414, 422, 511, 512, 517, 518, 519, 520, 538, 541, 544, 567, 576, 582, 583, 584, 609, 746, 749, 750, 758, 760, 771, 807, 808, 862, 872, 896, 952, 966, 969, 978, 984, 985, 987, 988], "download_url": 8, "ic": [8, 152, 282, 331, 334, 352, 452, 460, 582, 583, 968, 984, 985], "databas": [8, 278, 323, 325, 332, 334, 362, 367, 369, 370, 373, 393, 395, 460, 505, 506, 840, 943], "reuters21578": 8, "mld": 8, "tar": [8, 341], "gz": [8, 341, 353, 458, 459], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "els": [8, 11, 12, 15, 18, 37, 40, 45, 51, 57, 75, 89, 102, 107, 111, 143, 151, 152, 168, 181, 197, 200, 206, 210, 212, 213, 214, 235, 236, 239, 246, 253, 258, 266, 268, 269, 275, 310, 311, 318, 337, 341, 343, 369, 370, 372, 374, 388, 399, 458, 470, 483, 519, 575, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 620, 622, 623, 624, 626, 629, 631, 632, 633, 634, 653, 659, 717, 737, 741, 743, 749, 750, 774, 812, 821, 824, 834, 847, 848, 862, 893, 895, 897, 918, 947], "mkdir": [8, 343, 345], "parent": [8, 150, 337, 341, 350, 362, 393, 413, 972], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 210, 310, 312, 332, 343, 849, 850, 851, 852, 853, 946], "1e6": [8, 10, 172, 210, 310, 312, 323, 486, 841, 931, 943], "current_sz_mb": 8, "stdout": [8, 85, 187, 777, 797, 805, 806], "write": [8, 16, 147, 323, 324, 331, 335, 336, 340, 341, 342, 343, 345, 346, 348, 350, 353, 363, 367, 370, 942, 952, 966, 973, 985], "rdownload": 8, "archive_path": 8, "filenam": [8, 16, 291, 332, 343, 356, 438, 450, 453, 454, 457, 538, 539, 541, 966, 972, 977, 980, 981], "reporthook": 8, "tamper": 8, "assert": [8, 16, 44, 86, 210, 235, 244, 324, 340, 952], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 16, 201, 331, 332, 336, 337, 341, 343, 348, 349, 351, 353, 356, 363, 370, 437, 446, 458, 459, 921, 955, 960, 975, 979, 980, 982], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 370, 453, 538, 539, 541, 974], "alternate_sign": [8, 370, 532, 539, 979], "data_stream": 8, "binari": [8, 13, 23, 25, 98, 103, 114, 116, 130, 143, 151, 156, 170, 172, 179, 187, 200, 207, 218, 232, 233, 238, 244, 250, 252, 257, 298, 304, 318, 319, 331, 332, 333, 339, 341, 342, 350, 353, 356, 359, 360, 361, 362, 369, 370, 372, 388, 389, 390, 402, 437, 450, 458, 459, 470, 473, 499, 500, 503, 505, 509, 511, 512, 516, 517, 518, 531, 538, 539, 541, 543, 544, 552, 560, 577, 578, 579, 580, 582, 583, 608, 609, 616, 618, 623, 624, 625, 626, 650, 653, 657, 658, 659, 662, 663, 665, 668, 670, 676, 678, 679, 683, 684, 687, 688, 689, 690, 691, 692, 731, 732, 733, 736, 737, 738, 741, 743, 746, 747, 749, 750, 751, 752, 760, 764, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 783, 794, 804, 815, 819, 821, 831, 847, 849, 852, 894, 921, 932, 933, 934, 935, 936, 938, 939, 941, 942, 943, 945, 946, 947, 954, 957, 969, 973, 975, 976, 977, 979, 980, 981, 982, 986, 987], "acq": 8, "chosen": [8, 42, 67, 118, 136, 151, 152, 168, 180, 183, 196, 213, 229, 230, 232, 238, 311, 319, 323, 348, 362, 364, 365, 369, 372, 391, 399, 401, 403, 404, 410, 446, 473, 485, 507, 508, 509, 510, 514, 515, 597, 603, 606, 608, 609, 611, 613, 621, 626, 627, 628, 629, 630, 640, 644, 741, 744, 745, 746, 749, 750, 760, 778, 797, 847, 855, 856, 857, 858, 884, 920, 923, 925, 927, 928, 930, 932, 937, 938, 945, 961, 962, 964, 965, 980], "evenli": [8, 35, 48, 111, 230, 370, 888, 966], "care": [8, 112, 323, 325, 341, 343, 348, 350, 351, 360, 362, 364, 370, 388, 410, 419, 590, 608, 609, 616, 618, 626, 627, 628, 645, 847, 928, 946, 955], "all_class": 8, "positive_class": [8, 662], "partial_fit_classifi": 8, "max_it": [8, 14, 16, 23, 27, 28, 66, 67, 85, 88, 104, 120, 123, 125, 146, 147, 151, 152, 165, 171, 172, 186, 187, 188, 191, 192, 194, 199, 200, 201, 202, 216, 217, 221, 223, 224, 227, 248, 263, 268, 269, 270, 282, 283, 284, 287, 288, 295, 310, 311, 343, 350, 369, 374, 391, 394, 397, 398, 399, 404, 409, 411, 421, 422, 428, 432, 433, 434, 481, 482, 483, 485, 486, 487, 488, 489, 490, 493, 495, 496, 497, 498, 511, 512, 577, 588, 590, 591, 592, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 622, 624, 626, 627, 628, 629, 630, 632, 633, 637, 638, 639, 640, 643, 644, 744, 745, 760, 797, 805, 806, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 921, 923, 927, 934, 935, 944, 945, 962, 966, 973, 976, 979, 980, 981, 982, 984, 986, 987], "nb": [8, 93, 116, 319, 785, 933], "multinomi": [8, 27, 148, 157, 194, 213, 230, 244, 332, 333, 337, 367, 369, 446, 462, 473, 501, 503, 509, 511, 519, 608, 609, 690, 774, 782, 783, 784, 785, 786, 787, 828, 870, 931, 932, 947, 953, 966, 968, 972, 976, 978, 979, 980, 985, 986], "passiv": [8, 186, 616, 617, 953, 968, 973], "aggress": [8, 186, 616, 617, 749, 750, 953, 968, 973], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 40, 362, 367, 399, 484, 626, 804, 805, 806, 951, 972], "tupl": [8, 44, 45, 95, 152, 197, 330, 331, 332, 339, 350, 366, 374, 385, 401, 403, 414, 417, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 454, 455, 458, 460, 462, 463, 464, 472, 483, 496, 511, 512, 517, 518, 519, 520, 532, 533, 534, 537, 538, 539, 541, 577, 582, 583, 584, 662, 669, 730, 732, 744, 746, 760, 771, 788, 789, 807, 808, 818, 819, 823, 826, 833, 837, 849, 850, 851, 852, 853, 862, 868, 869, 871, 875, 876, 877, 878, 892, 898, 915, 938, 978, 979, 983, 984, 985], "x_text": 8, "befor": [8, 12, 23, 38, 64, 66, 69, 78, 118, 129, 142, 144, 145, 148, 151, 152, 154, 160, 167, 168, 172, 235, 242, 255, 274, 277, 278, 283, 301, 319, 323, 324, 332, 335, 337, 339, 340, 342, 343, 345, 346, 348, 350, 351, 352, 356, 362, 363, 364, 366, 367, 371, 374, 375, 394, 397, 398, 399, 409, 411, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 440, 451, 484, 487, 488, 489, 490, 491, 494, 496, 497, 511, 512, 515, 517, 519, 520, 527, 538, 539, 541, 561, 577, 578, 580, 600, 601, 604, 605, 606, 614, 615, 616, 617, 618, 621, 626, 628, 637, 642, 644, 649, 744, 745, 751, 752, 764, 765, 767, 770, 772, 774, 788, 789, 796, 797, 798, 799, 800, 803, 808, 809, 812, 815, 822, 826, 827, 828, 832, 833, 835, 836, 837, 838, 844, 855, 856, 884, 915, 921, 927, 928, 931, 937, 941, 945, 946, 947, 952, 966, 972, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "exclud": [8, 18, 150, 273, 337, 341, 350, 414, 416, 678, 679, 687, 732, 733, 736, 759, 767, 823, 906, 931, 934, 981], "invalid": [8, 179, 350, 528, 621, 662, 723, 927, 931, 978, 980, 982, 983, 985, 986], "assign": [8, 16, 33, 42, 45, 52, 53, 55, 104, 114, 116, 129, 137, 192, 197, 206, 211, 213, 268, 275, 292, 306, 311, 332, 337, 339, 350, 359, 366, 367, 369, 370, 371, 372, 391, 392, 393, 394, 396, 397, 398, 399, 402, 404, 406, 409, 411, 412, 465, 486, 511, 512, 543, 544, 557, 558, 560, 608, 609, 616, 617, 618, 626, 627, 628, 654, 655, 665, 666, 667, 670, 680, 688, 692, 704, 706, 735, 740, 741, 742, 746, 749, 750, 752, 755, 760, 769, 770, 771, 772, 775, 792, 798, 800, 801, 802, 815, 842, 843, 847, 848, 849, 850, 851, 852, 853, 925, 930, 931, 932, 933, 934, 935, 936, 941, 944, 955, 957, 966, 972, 977, 979, 980], "format": [8, 11, 12, 18, 19, 20, 44, 53, 56, 64, 73, 85, 95, 102, 107, 110, 112, 123, 128, 129, 154, 156, 159, 165, 170, 179, 197, 230, 240, 242, 243, 246, 249, 257, 258, 261, 262, 277, 280, 305, 314, 318, 323, 330, 336, 337, 339, 340, 345, 346, 349, 350, 363, 366, 369, 370, 384, 393, 394, 396, 397, 399, 400, 402, 409, 414, 418, 432, 433, 434, 435, 437, 439, 446, 447, 448, 458, 459, 460, 473, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 501, 507, 508, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 534, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 596, 602, 608, 609, 610, 612, 616, 618, 626, 627, 628, 638, 639, 642, 647, 663, 670, 688, 689, 700, 717, 777, 790, 791, 792, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 834, 839, 840, 845, 847, 859, 867, 868, 889, 893, 897, 902, 905, 907, 908, 909, 910, 911, 912, 921, 931, 934, 939, 941, 942, 945, 947, 951, 957, 958, 968, 972, 973, 974, 975, 977, 978, 979, 980, 981, 983, 985, 987], "islic": [8, 40, 57], "asarrai": [8, 16, 179, 197, 271, 289, 310, 311, 339, 350, 358, 535, 536, 675, 705, 796, 798, 799, 800, 941, 946], "dtype": [8, 10, 11, 16, 44, 45, 49, 60, 64, 65, 110, 112, 113, 114, 136, 137, 138, 147, 181, 197, 215, 221, 239, 243, 260, 266, 284, 288, 318, 331, 332, 337, 339, 348, 350, 363, 366, 377, 380, 393, 394, 397, 398, 399, 400, 401, 403, 414, 416, 417, 419, 422, 424, 438, 439, 440, 441, 446, 447, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 464, 472, 492, 507, 508, 509, 510, 513, 514, 515, 516, 531, 532, 535, 536, 538, 539, 541, 543, 544, 552, 556, 577, 578, 579, 580, 582, 583, 590, 591, 594, 595, 596, 602, 606, 607, 610, 611, 612, 613, 614, 615, 621, 623, 625, 647, 664, 665, 687, 690, 704, 735, 752, 769, 771, 772, 784, 788, 789, 791, 799, 813, 819, 821, 822, 828, 841, 849, 850, 851, 852, 853, 855, 856, 857, 858, 864, 865, 867, 868, 896, 906, 907, 908, 909, 912, 918, 921, 941, 944, 946, 957, 973, 975, 976, 980, 981, 982, 983, 984, 985, 986, 987, 988], "int": [8, 10, 13, 15, 16, 18, 33, 40, 57, 74, 102, 110, 114, 125, 126, 136, 137, 138, 144, 147, 150, 160, 170, 172, 179, 197, 204, 206, 212, 215, 221, 230, 233, 234, 235, 253, 258, 260, 266, 288, 312, 332, 337, 339, 348, 350, 360, 363, 366, 370, 373, 374, 377, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 438, 441, 442, 444, 445, 446, 447, 452, 453, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 557, 558, 560, 561, 567, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 650, 651, 652, 653, 654, 655, 657, 659, 663, 667, 675, 676, 678, 679, 680, 683, 685, 686, 687, 705, 706, 718, 723, 724, 727, 728, 729, 730, 731, 732, 733, 736, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 867, 868, 870, 871, 883, 884, 886, 887, 888, 889, 896, 900, 902, 905, 910, 911, 927, 938, 972, 978, 982, 983], "iter_minibatch": 8, "minibatch_s": [8, 325], "statist": [8, 74, 98, 102, 103, 113, 123, 124, 125, 126, 128, 132, 148, 150, 151, 152, 153, 167, 228, 232, 234, 237, 244, 273, 282, 319, 326, 330, 332, 334, 337, 343, 350, 362, 363, 364, 366, 367, 369, 371, 385, 419, 424, 443, 444, 466, 467, 468, 470, 472, 491, 496, 509, 510, 512, 554, 555, 556, 559, 577, 580, 584, 585, 594, 599, 606, 640, 644, 646, 660, 666, 671, 672, 673, 680, 692, 737, 746, 762, 778, 805, 806, 824, 825, 826, 828, 832, 835, 836, 838, 852, 855, 856, 906, 920, 921, 925, 927, 928, 930, 931, 932, 933, 938, 941, 945, 946, 947, 948, 949, 950, 958, 964, 965, 977, 980, 983, 984, 986, 987], "test_stat": 8, "n_test": [8, 10, 30, 102, 235, 972, 975], "n_test_po": 8, "hold": [8, 15, 24, 25, 179, 236, 318, 330, 337, 338, 339, 360, 362, 366, 369, 370, 372, 453, 511, 512, 539, 582, 583, 584, 685, 746, 749, 750, 760, 784, 815, 816, 821, 822, 831, 921, 925, 931, 935, 945, 946, 947, 954, 957, 966, 980, 984], "n_test_docu": 8, "tick": [8, 39, 55, 138, 216, 246, 582, 772], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 16, 18, 24, 56, 74, 83, 88, 95, 110, 111, 129, 143, 151, 160, 166, 175, 179, 194, 197, 200, 202, 244, 253, 260, 263, 284, 291, 303, 306, 310, 311, 312, 318, 334, 343, 350, 359, 360, 361, 362, 364, 365, 367, 368, 369, 370, 372, 383, 393, 394, 397, 399, 409, 414, 415, 432, 433, 434, 465, 470, 473, 481, 484, 486, 487, 491, 494, 495, 496, 499, 500, 502, 504, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 518, 519, 520, 540, 541, 561, 563, 573, 575, 585, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 622, 623, 626, 627, 628, 629, 631, 634, 640, 644, 646, 649, 659, 660, 669, 675, 690, 705, 707, 708, 712, 737, 776, 777, 781, 782, 791, 795, 799, 806, 807, 827, 828, 847, 848, 850, 853, 855, 856, 857, 858, 886, 906, 912, 917, 927, 931, 932, 933, 934, 946, 947, 964, 975, 976, 978, 980, 981, 983], "cls_name": [8, 10], "stat": [8, 10, 64, 73, 91, 154, 232, 235, 243, 247, 258, 282, 287, 288, 334, 346, 349, 364, 424, 542, 545, 546, 548, 549, 550, 554, 555, 556, 559, 632, 633, 750, 758, 760, 855, 856, 886, 920, 927, 979, 981, 985], "string": [8, 65, 107, 143, 197, 208, 239, 283, 312, 323, 331, 332, 337, 338, 339, 343, 350, 356, 363, 366, 369, 370, 371, 373, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 437, 439, 440, 446, 455, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 531, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 567, 570, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 649, 659, 661, 669, 681, 711, 714, 720, 723, 727, 728, 729, 730, 739, 740, 744, 745, 746, 749, 750, 752, 760, 771, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 865, 867, 868, 875, 876, 877, 895, 899, 915, 916, 920, 921, 931, 944, 946, 957, 964, 972, 973, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "n_train": [8, 10, 30, 102, 235, 972, 975], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 160, 238, 323, 359, 364, 371, 458, 459, 499, 547, 577, 580, 594, 821, 825, 836, 921, 927, 980, 984], "mini": [8, 59, 85, 284, 325, 350, 370, 391, 393, 397, 399, 401, 403, 481, 483, 486, 487, 488, 489, 490, 492, 493, 495, 496, 935, 936, 972, 983, 985], "smaller": [8, 22, 36, 42, 75, 140, 141, 146, 164, 168, 170, 183, 210, 259, 260, 268, 273, 298, 306, 311, 337, 359, 361, 362, 364, 366, 367, 369, 371, 372, 390, 391, 400, 404, 406, 464, 484, 485, 507, 508, 509, 510, 514, 515, 543, 560, 569, 583, 596, 597, 599, 600, 602, 603, 604, 606, 608, 609, 610, 611, 612, 613, 632, 633, 642, 659, 744, 749, 750, 794, 797, 821, 839, 840, 847, 855, 856, 857, 858, 884, 925, 927, 928, 930, 931, 932, 934, 935, 937, 941, 943, 945, 946, 947, 952, 966, 980, 985], "bigger": [8, 36, 55, 192, 235, 271, 308, 311, 322, 324, 370, 389, 390, 458, 488, 794, 961, 968], "overhead": [8, 253, 324, 325, 337, 343, 346, 348, 350, 369, 392, 396, 399, 484, 649, 780, 781, 783, 784, 785, 786, 787, 788, 789, 899, 933, 934, 975, 980, 981, 984], "partial": [8, 12, 46, 76, 115, 148, 149, 197, 205, 282, 285, 334, 350, 352, 364, 365, 367, 369, 372, 414, 432, 433, 434, 435, 446, 451, 484, 486, 491, 512, 539, 582, 583, 607, 737, 774, 776, 777, 804, 805, 806, 809, 821, 822, 825, 828, 856, 928, 935, 945, 966, 968, 969, 973, 980, 981, 985], "stream": [8, 362, 367, 370, 412, 539, 817, 818, 828, 923, 951, 980, 983], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 16, 18, 27, 39, 69, 103, 108, 111, 118, 151, 177, 181, 187, 200, 212, 214, 223, 232, 238, 284, 288, 311, 330, 337, 338, 339, 346, 363, 414, 476, 511, 512, 538, 539, 541, 582, 758, 821, 842, 843, 862, 863, 889, 923, 944, 952, 957], "updat": [8, 15, 40, 57, 99, 113, 211, 280, 312, 335, 336, 337, 341, 345, 350, 362, 367, 369, 376, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 413, 415, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 744, 745, 746, 749, 750, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 862, 906, 927, 934, 935, 936, 945, 954, 955, 973, 979, 980, 981, 983, 985, 987, 988], "accumul": [8, 46, 105, 106, 168, 341, 343, 362, 370, 931, 973, 980], "acc_histori": 8, "run_histori": 8, "curv": [8, 11, 21, 33, 69, 71, 102, 104, 110, 148, 157, 158, 169, 179, 197, 199, 201, 204, 205, 207, 215, 216, 220, 228, 235, 245, 269, 280, 316, 344, 357, 361, 366, 368, 388, 389, 390, 452, 460, 465, 471, 475, 514, 582, 595, 608, 648, 650, 652, 656, 657, 658, 659, 676, 678, 690, 691, 731, 733, 736, 737, 738, 744, 745, 752, 763, 772, 774, 775, 786, 809, 828, 847, 852, 927, 928, 930, 931, 937, 947, 953, 955, 968, 969, 974, 975, 978, 982, 984, 985, 986, 987], "evolut": [8, 10, 247, 323, 325, 496], "cours": [8, 9, 156, 323, 337, 339, 367, 370, 371, 921, 926, 927, 955], "valid": [8, 13, 24, 50, 51, 65, 68, 71, 75, 93, 103, 107, 108, 109, 110, 111, 122, 127, 131, 133, 143, 148, 151, 153, 157, 167, 179, 181, 187, 197, 214, 223, 226, 228, 232, 235, 236, 237, 239, 241, 243, 244, 249, 257, 271, 274, 280, 282, 290, 298, 306, 314, 324, 332, 337, 340, 348, 349, 350, 356, 357, 360, 362, 363, 364, 367, 368, 369, 370, 371, 372, 378, 388, 393, 394, 396, 397, 399, 400, 407, 413, 414, 418, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 443, 451, 452, 454, 465, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 522, 525, 527, 532, 533, 539, 543, 544, 547, 552, 582, 584, 588, 589, 590, 591, 592, 593, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 642, 649, 651, 656, 663, 677, 711, 714, 723, 727, 728, 729, 734, 739, 740, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 779, 782, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 811, 812, 814, 820, 828, 839, 840, 842, 843, 845, 847, 849, 852, 854, 855, 856, 857, 858, 867, 868, 871, 878, 890, 921, 930, 931, 932, 935, 939, 941, 943, 945, 946, 947, 951, 952, 955, 957, 960, 968, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "consumpt": [8, 323, 484, 507, 508, 514, 515, 746, 760, 769, 770, 771, 855, 856, 857, 858, 897, 957, 972, 974, 978, 980, 981, 986], "queue": [8, 934, 975], "up": [8, 11, 33, 40, 42, 43, 44, 48, 52, 57, 64, 73, 74, 80, 83, 104, 147, 152, 158, 172, 180, 195, 196, 215, 223, 237, 240, 253, 266, 271, 274, 284, 288, 295, 312, 325, 331, 332, 337, 341, 343, 344, 345, 346, 348, 350, 351, 360, 362, 367, 369, 370, 394, 397, 398, 399, 400, 402, 406, 409, 410, 411, 458, 459, 486, 499, 500, 507, 508, 509, 510, 511, 512, 514, 515, 516, 560, 577, 582, 583, 589, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 613, 614, 631, 632, 633, 634, 642, 655, 718, 744, 745, 748, 749, 750, 752, 772, 823, 826, 837, 855, 856, 857, 858, 861, 884, 887, 888, 920, 927, 928, 931, 934, 945, 946, 952, 954, 955, 965, 966, 972, 973, 975, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988], "amount": [8, 12, 41, 49, 61, 71, 74, 85, 89, 100, 102, 141, 151, 197, 211, 282, 287, 290, 292, 298, 306, 312, 323, 324, 325, 348, 361, 362, 364, 367, 369, 370, 371, 394, 404, 419, 488, 489, 491, 493, 513, 546, 596, 597, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 613, 615, 631, 634, 642, 749, 750, 788, 789, 794, 843, 844, 857, 858, 926, 927, 930, 933, 935, 941, 943, 944, 945, 946, 964, 965, 985], "learner": [8, 98, 100, 109, 118, 325, 507, 508, 509, 510, 514, 515, 516, 532, 539, 580, 790, 791, 796, 798, 799, 933, 936, 947, 951, 952, 966], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 40, 57, 78, 138, 183, 184, 188, 190, 206, 218, 239, 261, 263, 274, 294, 296, 299, 300, 938, 969], "set_ylim": [8, 10, 15, 28, 38, 55, 66, 83, 98, 104, 115, 116, 144, 152, 154, 159, 177, 179, 180, 211, 221, 239, 242, 252, 258, 268, 273, 275, 276, 278, 281, 290, 307], "runtim": [8, 10, 53, 165, 194, 196, 211, 271, 275, 324, 339, 340, 348, 350, 361, 362, 369, 400, 513, 629, 760, 847, 848, 849, 850, 851, 852, 853, 945, 946, 975, 979, 980, 986, 987], "gcf": [8, 938], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 14, 66, 105, 108, 109, 112, 120, 129, 133, 143, 146, 152, 158, 221, 226, 234, 236, 240, 252, 278, 284, 285, 311, 339, 365, 531, 582, 598, 619, 630, 931, 938, 945, 947, 978, 979, 980, 981], "width": [8, 10, 15, 41, 49, 73, 81, 87, 88, 94, 95, 96, 102, 107, 108, 111, 120, 129, 137, 143, 162, 221, 234, 273, 275, 276, 285, 295, 334, 363, 389, 390, 402, 414, 443, 444, 456, 471, 536, 813, 860, 941, 945, 947, 963, 964, 980], "set_xticklabel": [8, 10, 73, 96, 120, 138, 152, 154, 246, 247, 252], "ymax": [8, 10, 11, 71, 166, 168, 171, 172, 180, 188, 235, 266], "set_titl": [8, 10, 14, 23, 25, 28, 29, 38, 39, 41, 49, 52, 55, 59, 60, 66, 69, 73, 81, 83, 90, 96, 104, 105, 114, 116, 118, 119, 144, 146, 147, 150, 151, 152, 153, 158, 159, 168, 170, 177, 179, 180, 181, 187, 199, 200, 203, 204, 209, 211, 212, 215, 216, 221, 229, 230, 231, 232, 235, 237, 238, 242, 246, 247, 252, 253, 257, 258, 263, 268, 269, 273, 274, 275, 276, 277, 278, 280, 284, 287, 288, 295, 306, 307, 308, 310, 314], "autolabel": [8, 109], "attach": [8, 109, 385, 793, 973, 983], "rect": [8, 48, 109, 158], "height": [8, 14, 49, 88, 108, 133, 154, 273, 310, 368, 443, 444, 456, 536], "get_height": [8, 109], "get_x": [8, 109], "get_width": [8, 109], "va": [8, 109, 246, 261, 263, 305], "setp": [8, 10, 163, 246, 249], "rotat": [8, 36, 84, 87, 90, 110, 120, 148, 154, 202, 246, 247, 252, 298, 305, 365, 367, 372, 374, 454, 482, 491, 500, 564, 647, 828, 859, 927, 983, 984], "read": [8, 16, 85, 199, 242, 280, 281, 282, 284, 323, 331, 335, 338, 339, 340, 341, 342, 344, 345, 348, 349, 350, 362, 373, 374, 375, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 409, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 566, 569, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 804, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 880, 920, 927, 931, 932, 951, 955, 966, 973, 977, 978, 979, 980, 981, 982, 983, 985], "feat": [8, 10, 341, 370], "extr": 8, "hash": [8, 97, 148, 311, 312, 323, 325, 329, 337, 340, 348, 369, 464, 494, 507, 516, 531, 532, 539, 590, 783, 896, 923, 966, 968, 973, 976, 979], "vect": [8, 64, 236, 291, 370, 966], "plot_out_of_core_classif": 8, "illustr": [9, 21, 22, 24, 28, 30, 48, 51, 52, 64, 65, 68, 69, 71, 73, 78, 83, 87, 91, 98, 99, 102, 106, 109, 113, 115, 117, 118, 128, 133, 134, 135, 136, 137, 140, 141, 142, 143, 148, 150, 152, 153, 156, 168, 175, 176, 179, 181, 183, 187, 193, 196, 197, 199, 200, 202, 204, 206, 208, 209, 211, 212, 214, 235, 242, 247, 248, 254, 278, 279, 280, 282, 290, 298, 299, 303, 304, 306, 307, 311, 312, 317, 319, 323, 334, 337, 342, 345, 349, 365, 367, 369, 370, 465, 560, 561, 563, 564, 565, 569, 572, 573, 797, 920, 927, 931, 934, 937, 943, 944, 945, 946, 955, 957], "robust": [9, 56, 58, 70, 111, 147, 148, 151, 152, 157, 181, 196, 206, 273, 325, 334, 339, 345, 362, 369, 370, 398, 419, 420, 423, 424, 425, 426, 474, 484, 509, 510, 599, 607, 620, 621, 628, 629, 699, 778, 809, 823, 825, 826, 836, 842, 882, 931, 935, 937, 941, 944, 945, 951, 953, 955, 967, 968, 972, 973, 975, 976, 977, 978, 979], "covari": [9, 12, 26, 30, 72, 77, 93, 96, 114, 135, 142, 206, 220, 222, 225, 226, 227, 326, 346, 350, 362, 365, 367, 372, 432, 433, 434, 435, 454, 465, 469, 477, 482, 484, 491, 496, 498, 499, 500, 513, 560, 561, 563, 572, 573, 594, 595, 600, 604, 606, 632, 633, 636, 639, 643, 744, 745, 746, 765, 930, 937, 941, 953, 967, 968, 972, 974, 975, 976, 977, 979, 981], "wine": [9, 218, 278, 330, 460, 968], "tool": [9, 11, 151, 233, 238, 319, 330, 331, 332, 335, 337, 339, 340, 341, 342, 343, 344, 345, 349, 350, 352, 353, 356, 361, 362, 363, 364, 437, 642, 651, 920, 926, 927, 931, 937, 941, 946, 948, 951, 952, 955, 957, 966, 979, 982, 985, 986, 987], "purpos": [9, 12, 15, 33, 78, 146, 193, 194, 195, 199, 201, 213, 224, 226, 231, 232, 298, 299, 310, 311, 319, 332, 337, 339, 349, 350, 351, 353, 355, 359, 362, 363, 367, 369, 370, 371, 372, 496, 588, 770, 771, 808, 928, 931, 932, 934, 937, 949, 951, 957, 984, 986], "awar": [9, 14, 98, 130, 144, 295, 310, 335, 339, 348, 351, 366, 370, 517, 518, 598, 604, 605, 606, 608, 609, 619, 630, 794, 823, 937, 941, 947, 969, 972, 973, 986], "thing": [9, 200, 230, 324, 325, 332, 336, 337, 339, 348, 362, 364, 370, 509, 510, 927, 941, 955, 978], "trivial": [9, 181, 314, 337, 362, 764, 849, 852, 928, 952, 972], "dimens": [9, 12, 14, 33, 36, 49, 75, 77, 81, 85, 137, 152, 162, 177, 183, 201, 203, 206, 210, 211, 216, 222, 223, 257, 258, 262, 276, 310, 311, 312, 332, 334, 338, 350, 361, 362, 367, 368, 372, 374, 393, 394, 396, 397, 398, 399, 402, 414, 415, 432, 433, 434, 443, 444, 465, 474, 475, 479, 480, 483, 491, 499, 532, 533, 534, 535, 537, 539, 547, 569, 572, 591, 594, 609, 640, 641, 642, 644, 645, 649, 713, 769, 788, 789, 793, 807, 839, 840, 841, 849, 850, 851, 852, 853, 867, 868, 869, 894, 902, 905, 921, 923, 925, 927, 928, 929, 932, 934, 935, 937, 943, 946, 957, 964, 965, 979, 981, 982, 984], "below": [9, 23, 24, 25, 29, 55, 64, 69, 73, 80, 81, 85, 103, 105, 106, 111, 128, 150, 152, 162, 175, 176, 179, 181, 195, 196, 200, 204, 208, 217, 230, 233, 238, 240, 241, 242, 273, 277, 280, 281, 282, 283, 284, 285, 302, 303, 310, 318, 319, 324, 330, 331, 335, 337, 339, 341, 342, 346, 350, 353, 362, 364, 365, 366, 367, 369, 370, 371, 372, 398, 421, 422, 428, 441, 442, 444, 445, 446, 447, 448, 450, 451, 452, 454, 455, 460, 481, 487, 492, 498, 532, 545, 546, 547, 548, 549, 550, 583, 596, 602, 608, 609, 617, 623, 625, 642, 649, 655, 692, 712, 744, 745, 746, 757, 760, 777, 808, 811, 821, 825, 830, 836, 920, 921, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 937, 938, 939, 941, 945, 946, 947, 948, 951, 959, 966, 977, 978, 979, 980, 981, 982, 983, 984, 985], "main": [9, 15, 29, 57, 78, 89, 108, 148, 206, 244, 279, 306, 310, 323, 324, 325, 330, 335, 337, 339, 341, 343, 345, 348, 349, 350, 352, 360, 361, 362, 367, 369, 370, 372, 453, 475, 480, 499, 500, 575, 663, 778, 920, 928, 930, 931, 938, 943, 952, 954, 963, 966, 972, 975, 980, 982, 983, 984, 985, 986, 987], "empir": [9, 22, 23, 32, 70, 73, 75, 148, 197, 241, 273, 360, 366, 369, 372, 397, 399, 410, 419, 420, 424, 427, 428, 482, 484, 489, 491, 493, 499, 501, 515, 540, 553, 589, 599, 617, 621, 628, 629, 666, 671, 672, 673, 773, 783, 784, 785, 787, 806, 870, 905, 923, 925, 931, 933, 935, 943, 945, 967, 968], "heterogen": [9, 22, 63, 65, 148, 152, 179, 219, 278, 280, 329, 331, 348, 414, 438, 494, 531, 541, 663, 808, 812, 847, 928, 938, 941, 951, 968, 976, 980, 982, 983], "mode": [9, 10, 42, 43, 73, 179, 206, 253, 255, 271, 280, 337, 340, 345, 346, 348, 359, 365, 369, 373, 394, 395, 397, 399, 402, 409, 412, 421, 422, 428, 432, 437, 458, 459, 507, 511, 514, 542, 545, 546, 548, 549, 550, 560, 577, 594, 595, 608, 609, 616, 618, 623, 624, 625, 626, 629, 632, 633, 639, 643, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 804, 847, 849, 852, 855, 857, 873, 883, 884, 886, 934, 937, 951, 957, 958, 965, 973, 981, 986], "stick": [9, 744, 930], "bias": [9, 25, 75, 88, 111, 117, 150, 151, 153, 183, 240, 332, 352, 360, 369, 474, 499, 804, 828, 838, 926, 930, 939, 945, 947], "yet": [9, 52, 197, 226, 236, 312, 325, 332, 336, 341, 348, 352, 353, 366, 367, 369, 370, 372, 398, 402, 411, 412, 527, 727, 915, 920, 927, 931, 937, 945, 952, 981], "extent": [9, 27, 53, 137, 138, 139, 210, 304, 307, 391, 485, 646, 744, 931], "assum": [9, 52, 142, 147, 150, 151, 168, 179, 197, 206, 209, 215, 227, 235, 244, 273, 312, 324, 336, 337, 339, 341, 343, 348, 349, 350, 352, 356, 359, 360, 362, 364, 366, 367, 369, 370, 372, 373, 378, 382, 388, 390, 395, 400, 407, 413, 419, 420, 421, 422, 423, 424, 425, 426, 453, 458, 459, 482, 492, 498, 499, 511, 512, 517, 518, 537, 538, 539, 541, 570, 582, 593, 594, 596, 597, 602, 608, 609, 610, 611, 612, 616, 617, 618, 621, 622, 626, 627, 628, 631, 635, 637, 638, 642, 659, 675, 684, 690, 705, 713, 718, 723, 727, 730, 746, 749, 750, 760, 784, 790, 791, 794, 795, 796, 798, 799, 804, 815, 828, 907, 908, 909, 921, 925, 927, 929, 930, 931, 933, 934, 936, 937, 938, 941, 945, 946, 947, 978, 984], "parametr": [9, 22, 23, 75, 209, 257, 277, 283, 360, 363, 368, 369, 388, 501, 503, 585, 635, 646, 824, 835, 878, 879, 927, 930, 933, 934, 941, 944, 947, 980, 982, 985], "therefor": [9, 13, 22, 33, 48, 49, 65, 66, 69, 73, 78, 90, 95, 99, 102, 104, 111, 116, 118, 132, 150, 153, 179, 195, 196, 221, 226, 227, 236, 238, 270, 273, 278, 287, 298, 307, 310, 311, 318, 323, 331, 335, 342, 348, 362, 363, 364, 366, 367, 369, 370, 388, 446, 485, 499, 501, 503, 504, 509, 510, 514, 515, 554, 556, 608, 609, 615, 618, 621, 626, 628, 629, 651, 662, 684, 706, 744, 808, 809, 821, 825, 836, 847, 848, 921, 925, 927, 928, 931, 933, 934, 935, 936, 939, 941, 946, 947, 952, 957, 964, 965, 966, 981, 982, 985, 986, 987, 988], "minimum": [9, 52, 73, 111, 112, 132, 168, 189, 210, 245, 259, 260, 339, 346, 353, 355, 359, 362, 369, 370, 392, 396, 400, 404, 406, 419, 420, 423, 424, 425, 426, 461, 463, 491, 502, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 544, 577, 581, 582, 585, 587, 618, 621, 626, 628, 629, 632, 633, 642, 655, 674, 728, 729, 749, 750, 769, 784, 805, 806, 817, 818, 821, 823, 827, 840, 841, 854, 855, 856, 857, 858, 864, 867, 868, 871, 887, 928, 931, 935, 937, 941, 943, 947, 972, 975, 979, 980, 984, 985], "determin": [9, 11, 13, 18, 42, 73, 101, 140, 151, 158, 159, 175, 182, 235, 273, 278, 312, 318, 319, 336, 337, 339, 346, 349, 350, 359, 360, 362, 366, 367, 369, 370, 371, 372, 383, 388, 392, 393, 394, 396, 397, 399, 400, 406, 409, 410, 411, 415, 419, 420, 422, 423, 424, 425, 426, 432, 433, 434, 438, 441, 442, 445, 447, 453, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 489, 492, 493, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 515, 517, 518, 520, 532, 533, 534, 538, 541, 544, 552, 557, 558, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 577, 585, 586, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 618, 619, 620, 622, 623, 624, 625, 626, 628, 629, 630, 637, 639, 640, 642, 643, 644, 657, 661, 672, 678, 679, 687, 732, 733, 734, 736, 737, 740, 746, 748, 749, 750, 752, 760, 768, 769, 770, 771, 772, 773, 775, 779, 781, 782, 784, 791, 793, 794, 799, 804, 805, 806, 812, 813, 821, 822, 823, 825, 836, 847, 848, 850, 853, 856, 858, 861, 882, 894, 900, 902, 905, 920, 923, 925, 930, 934, 936, 937, 941, 944, 945, 947, 957, 972, 977, 980, 981, 983, 984, 985], "concentr": [9, 90, 99, 116, 140, 148, 204, 220, 227, 275, 289, 333, 337, 369, 372, 394, 469, 744, 930, 937], "cluster": [9, 17, 19, 22, 38, 39, 42, 44, 46, 47, 49, 50, 52, 54, 56, 57, 73, 82, 92, 101, 107, 114, 154, 204, 221, 222, 223, 224, 236, 259, 260, 262, 276, 281, 285, 300, 309, 310, 312, 325, 326, 330, 332, 334, 337, 339, 342, 348, 350, 357, 368, 370, 376, 377, 380, 438, 452, 453, 454, 461, 462, 463, 464, 465, 472, 480, 491, 494, 514, 516, 539, 540, 541, 641, 642, 645, 654, 655, 660, 667, 669, 674, 680, 685, 686, 704, 706, 727, 728, 735, 739, 740, 742, 744, 745, 800, 801, 809, 813, 820, 828, 876, 878, 891, 899, 915, 921, 928, 930, 934, 937, 939, 941, 944, 948, 951, 952, 955, 957, 960, 963, 966, 967, 968, 972, 973, 974, 975, 976, 977, 978, 979], "outli": [9, 73, 350, 419, 424, 927, 937], "skew": [9, 111, 182, 210, 273, 329, 366, 589, 590, 591, 592, 824, 835, 927, 941, 968, 975, 979, 988], "Of": [9, 23, 25, 146, 323, 339, 362, 370, 921], "screen": [9, 985], "presenc": [9, 55, 57, 73, 74, 150, 273, 335, 338, 350, 364, 367, 662, 675, 705, 718, 777, 811, 819, 821, 915, 921, 927, 931, 932, 945, 975, 976, 978, 982, 984, 986], "mixtur": [9, 40, 52, 223, 224, 326, 332, 333, 350, 362, 367, 368, 372, 573, 746, 951, 952, 967, 968, 972, 976, 977, 978, 979], "univari": [9, 32, 66, 68, 127, 128, 148, 194, 293, 329, 361, 362, 363, 370, 396, 454, 475, 480, 542, 545, 546, 548, 549, 550, 552, 555, 556, 557, 558, 559, 577, 578, 579, 580, 595, 746, 751, 770, 774, 808, 809, 818, 823, 827, 828, 847, 852, 927, 946, 948, 953, 965, 968, 972, 978], "appli": [9, 14, 18, 23, 25, 29, 36, 40, 42, 43, 51, 53, 57, 65, 67, 69, 78, 85, 86, 92, 94, 96, 104, 111, 129, 135, 151, 153, 168, 184, 193, 199, 200, 201, 206, 211, 235, 236, 238, 247, 252, 262, 273, 277, 278, 281, 298, 312, 318, 319, 323, 329, 337, 339, 345, 348, 349, 350, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 374, 391, 402, 412, 414, 415, 417, 419, 424, 432, 433, 434, 435, 458, 459, 466, 467, 468, 474, 481, 482, 483, 484, 485, 487, 489, 491, 492, 493, 498, 499, 500, 503, 504, 507, 508, 509, 510, 514, 515, 516, 538, 539, 540, 541, 577, 582, 583, 588, 589, 591, 592, 608, 609, 618, 626, 627, 628, 641, 649, 651, 657, 675, 705, 707, 708, 730, 737, 739, 740, 746, 760, 774, 777, 783, 784, 785, 786, 787, 797, 807, 808, 817, 824, 825, 828, 832, 833, 835, 836, 837, 838, 843, 854, 855, 856, 857, 858, 867, 873, 876, 883, 884, 903, 921, 923, 927, 928, 929, 930, 931, 933, 935, 937, 941, 945, 946, 947, 948, 950, 955, 973, 976, 977, 978, 979, 980, 983, 984, 986], "ellipticenvelop": [9, 206, 420, 423, 424, 425, 426, 513, 937, 972, 975, 979, 980, 985], "oneclasssvm": [9, 11, 15, 193, 206, 283, 297, 513, 627, 794, 937, 945, 946, 974, 979, 980, 982, 983, 984, 985, 986, 987], "font_manag": [9, 74, 259, 297], "load_win": [9, 218, 278, 792, 800, 969, 983], "support_fract": [9, 419, 424], "contamin": [9, 73, 74, 206, 215, 259, 260, 419, 513, 794, 937, 980], "ocsvm": [9, 193], "legend1": 9, "legend2": 9, "x1": [9, 12, 15, 31, 77, 82, 101, 110, 138, 191, 202, 215, 273, 295, 339, 350, 382, 414, 459, 517, 518, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 577, 578, 579, 580, 649, 713, 811, 812, 813, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 965], "frontier": [9, 193, 259, 297, 937, 964], "xx1": [9, 101, 581], "yy1": 9, "meshgrid": [9, 11, 15, 24, 27, 31, 38, 53, 73, 107, 116, 136, 137, 138, 139, 141, 152, 190, 191, 192, 193, 204, 206, 225, 259, 266, 268, 275, 276, 292, 297, 298, 303, 304, 307, 308, 581], "500": [9, 10, 40, 46, 52, 55, 56, 58, 77, 78, 93, 95, 103, 112, 132, 135, 156, 192, 193, 200, 216, 217, 221, 222, 226, 238, 248, 253, 259, 265, 277, 281, 297, 304, 308, 323, 369, 419, 420, 424, 425, 426, 432, 433, 434, 561, 563, 564, 566, 571, 574, 575, 600, 601, 604, 605, 606, 630, 632, 633, 806, 920, 946], "clf_name": [9, 10, 310], "z1": 9, "decision_funct": [9, 11, 15, 23, 25, 51, 101, 114, 126, 191, 192, 193, 207, 215, 242, 259, 260, 268, 275, 296, 297, 298, 302, 303, 304, 308, 339, 350, 360, 369, 388, 419, 499, 500, 503, 505, 509, 511, 513, 517, 543, 544, 581, 582, 583, 608, 609, 616, 618, 624, 625, 626, 627, 648, 650, 652, 657, 670, 675, 676, 684, 688, 689, 691, 705, 731, 737, 738, 741, 746, 749, 750, 760, 769, 776, 777, 778, 779, 794, 808, 815, 844, 847, 849, 851, 852, 927, 931, 937, 938, 945, 946, 964, 972, 974, 976, 977, 978, 979, 980, 981, 982, 984, 985], "c_": [9, 11, 15, 23, 24, 25, 27, 31, 53, 73, 86, 91, 107, 110, 115, 116, 124, 126, 137, 177, 192, 193, 195, 206, 215, 259, 276, 278, 292, 297, 298, 302, 304, 307, 308, 362, 609, 664, 665, 668, 931, 961, 964, 965], "contour": [9, 11, 15, 31, 42, 43, 73, 107, 126, 138, 139, 141, 190, 191, 192, 193, 206, 211, 225, 259, 266, 296, 297, 299, 300, 302, 303, 304, 334, 581, 582, 937, 945], "linewidth": [9, 22, 30, 31, 33, 36, 53, 67, 71, 78, 83, 100, 111, 115, 135, 139, 143, 168, 169, 173, 174, 175, 177, 180, 182, 185, 193, 196, 206, 213, 215, 244, 248, 259, 263, 274, 281, 296, 297, 299, 304, 316, 962], "legend1_values_list": 9, "legend1_keys_list": 9, "cloud": [9, 39, 77, 84, 91, 148, 345, 367, 483, 491, 642, 931, 950, 951, 965], "bbox_arg": 9, "dict": [9, 10, 11, 12, 16, 24, 35, 41, 64, 67, 68, 92, 111, 113, 177, 185, 206, 214, 223, 233, 234, 236, 239, 242, 244, 253, 257, 275, 284, 291, 298, 311, 312, 325, 329, 331, 339, 348, 350, 363, 366, 373, 374, 376, 384, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 446, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 647, 648, 650, 651, 652, 663, 711, 714, 720, 728, 729, 744, 745, 746, 749, 750, 752, 757, 758, 760, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 862, 872, 873, 889, 920, 931, 941, 961, 966, 968, 972, 978, 979], "boxstyl": [9, 275], "fc": [9, 258, 332], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 24, 45, 242, 266, 303, 353, 596, 597, 600, 602, 603, 604, 610, 611, 612, 613, 614, 631, 632, 633, 634, 636], "xycoord": [9, 24], "textcoord": [9, 156], "xytext": [9, 24, 156], "bbox": [9, 12, 31, 41, 92, 221, 222, 223, 226, 227, 275], "arrowprop": [9, 24], "xlim": [9, 12, 24, 31, 40, 53, 57, 67, 71, 72, 73, 81, 87, 99, 101, 102, 103, 117, 123, 136, 137, 151, 158, 169, 171, 178, 185, 188, 193, 206, 213, 222, 227, 230, 245, 249, 259, 260, 297, 302, 303, 307, 317], "ylim": [9, 12, 22, 24, 30, 31, 33, 40, 53, 57, 71, 72, 73, 81, 87, 99, 101, 102, 108, 109, 111, 117, 120, 124, 136, 137, 151, 166, 168, 169, 171, 172, 173, 185, 188, 189, 193, 206, 213, 222, 227, 230, 234, 238, 245, 248, 249, 250, 259, 260, 297, 302, 303, 307, 310, 317], "prop": [9, 67, 74, 185, 223, 259, 297, 318], "fontproperti": [9, 74, 259, 297], "11": [9, 18, 74, 87, 138, 180, 181, 184, 232, 240, 241, 247, 257, 259, 277, 282, 297, 301, 331, 334, 335, 343, 349, 362, 365, 366, 369, 400, 407, 432, 433, 434, 435, 451, 467, 468, 562, 600, 606, 620, 665, 671, 672, 673, 727, 728, 729, 747, 750, 764, 767, 773, 800, 856, 895, 927, 929, 941, 945, 946, 949, 957, 964, 966, 970, 974, 978, 980, 981, 983, 986, 987], "ash": [9, 334, 975, 978], "malic_acid": 9, "abil": [9, 56, 73, 111, 141, 146, 150, 151, 153, 179, 197, 206, 310, 325, 353, 369, 370, 731, 732, 733, 736, 928, 931, 934, 937, 947, 952, 972, 974, 979, 981, 985, 986], "locat": [9, 23, 49, 50, 66, 73, 74, 173, 266, 282, 298, 330, 335, 337, 341, 342, 345, 346, 353, 362, 364, 368, 398, 410, 411, 419, 420, 421, 422, 423, 424, 425, 426, 438, 450, 451, 454, 455, 462, 465, 916, 921, 927, 932, 937, 941, 947, 980], "hard": [9, 179, 206, 210, 235, 237, 325, 336, 348, 350, 362, 367, 370, 484, 491, 519, 626, 849, 850, 851, 852, 853, 927, 944, 946, 947, 952, 964, 965, 966, 981, 982], "due": [9, 24, 25, 49, 55, 69, 102, 135, 151, 152, 158, 170, 177, 179, 181, 196, 197, 210, 222, 243, 244, 253, 278, 310, 311, 312, 337, 343, 350, 353, 360, 362, 366, 367, 369, 372, 394, 397, 409, 485, 489, 493, 494, 524, 621, 746, 749, 750, 754, 756, 760, 769, 770, 771, 773, 776, 780, 781, 813, 817, 818, 828, 921, 927, 928, 930, 931, 932, 934, 938, 945, 952, 965, 972, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "banana": [9, 931], "anywai": [9, 339, 615, 635, 636], "rid": [9, 945], "difficulti": [9, 25, 197, 273, 325, 337, 360, 805, 806, 930, 934], "bandwidth": [9, 40, 58, 212, 257, 258, 266, 348, 350, 362, 368, 398, 408, 411, 788, 789, 793, 924, 937, 951, 983, 987], "compromis": [9, 152, 323, 337, 597, 629, 934, 975], "risk": [9, 179, 197, 274, 306, 319, 336, 337, 350, 361, 366, 369, 517, 518, 832, 833, 835, 836, 837, 838, 927, 931, 955, 979], "x2": [9, 15, 77, 82, 101, 110, 138, 191, 215, 339, 363, 538, 579, 649, 713, 965], "xx2": 9, "yy2": 9, "19": [9, 277, 334, 341, 350, 362, 363, 370, 373, 395, 442, 466, 467, 468, 486, 490, 491, 497, 499, 500, 507, 508, 509, 510, 514, 515, 516, 532, 539, 598, 608, 609, 616, 617, 618, 621, 622, 624, 626, 628, 637, 657, 730, 734, 746, 760, 771, 776, 777, 779, 780, 794, 795, 814, 825, 845, 849, 852, 855, 856, 857, 858, 920, 931, 941, 949, 970, 972, 973, 974, 975, 977, 980], "z2": 9, "legend2_values_list": 9, "legend2_keys_list": 9, "color_intens": 9, "flavanoid": [9, 334], "plot_outlier_detection_win": 9, "goal": [10, 16, 48, 52, 78, 146, 152, 156, 179, 194, 197, 214, 215, 232, 233, 310, 324, 325, 332, 339, 342, 343, 350, 351, 352, 367, 369, 371, 492, 498, 540, 543, 688, 931, 934, 936, 937, 945, 946, 947, 949, 955, 957, 960, 964, 966, 980], "boxplot": [10, 73, 112, 151, 154, 280], "defaultdict": [10, 18, 23, 154, 238, 311, 312], "gc": 10, "make_regress": [10, 69, 158, 160, 161, 165, 182, 183, 248, 281, 319, 333, 339, 340, 349, 504, 506, 510, 515, 585, 596, 597, 599, 601, 603, 605, 613, 614, 615, 617, 621, 629, 806, 848, 931, 932, 934], "randomforestregressor": [10, 117, 118, 121, 146, 147, 282, 349, 369, 507, 508, 510, 512, 516, 518, 520, 582, 583, 857, 977, 978, 980, 981, 982, 983, 985, 986, 987, 988], "sgdregressor": [10, 190, 323, 325, 348, 361, 596, 599, 617, 621, 626, 629, 806, 848, 853, 927, 945, 974, 976, 978, 979, 980, 983, 985, 986, 987, 988], "shuffl": [10, 14, 19, 20, 22, 25, 29, 44, 55, 56, 85, 98, 105, 107, 118, 147, 187, 188, 193, 206, 236, 240, 241, 248, 253, 287, 288, 289, 290, 300, 310, 311, 319, 332, 346, 350, 357, 419, 424, 438, 439, 441, 442, 445, 447, 453, 461, 462, 463, 464, 465, 469, 472, 474, 481, 487, 489, 490, 496, 497, 503, 504, 505, 506, 514, 515, 517, 518, 552, 608, 609, 616, 617, 618, 622, 624, 626, 627, 628, 637, 746, 748, 749, 750, 751, 752, 760, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 778, 805, 806, 847, 848, 849, 852, 883, 884, 900, 902, 926, 927, 932, 939, 945, 946, 961, 966, 968, 972, 975, 976, 977, 979, 980, 981, 982, 983], "atomic_benchmark_estim": 10, "verbos": [10, 38, 46, 50, 59, 64, 66, 68, 118, 166, 236, 270, 271, 273, 283, 291, 310, 335, 341, 350, 356, 391, 394, 397, 399, 402, 404, 409, 412, 414, 417, 421, 422, 428, 481, 486, 487, 488, 489, 490, 493, 495, 496, 497, 498, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 543, 544, 577, 580, 582, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 640, 642, 644, 714, 727, 744, 745, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 777, 779, 782, 797, 804, 805, 806, 807, 808, 809, 810, 844, 847, 848, 849, 850, 851, 852, 853, 897, 952, 974, 975, 977, 979, 980, 981, 983, 984, 986, 987], "n_instanc": [10, 583], "zero": [10, 11, 13, 25, 31, 33, 36, 37, 48, 50, 72, 74, 75, 85, 88, 90, 98, 101, 102, 110, 112, 113, 117, 130, 147, 158, 165, 170, 172, 173, 178, 179, 180, 183, 184, 185, 189, 194, 197, 210, 213, 221, 225, 227, 232, 235, 240, 244, 245, 258, 273, 281, 282, 306, 311, 312, 314, 318, 323, 324, 332, 339, 343, 350, 360, 361, 362, 364, 367, 369, 370, 371, 372, 375, 402, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 437, 447, 458, 459, 473, 476, 477, 481, 482, 485, 487, 488, 489, 490, 492, 493, 497, 498, 502, 507, 508, 509, 510, 511, 512, 514, 515, 516, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 561, 586, 589, 593, 594, 595, 600, 608, 609, 614, 615, 616, 618, 621, 626, 627, 628, 635, 636, 653, 659, 662, 663, 665, 666, 674, 678, 679, 683, 687, 689, 695, 732, 733, 734, 736, 743, 744, 761, 762, 765, 766, 777, 788, 789, 790, 791, 792, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 811, 818, 820, 821, 823, 824, 825, 827, 828, 833, 834, 835, 836, 840, 847, 855, 856, 857, 858, 882, 917, 921, 927, 929, 930, 933, 934, 935, 941, 942, 943, 945, 946, 947, 957, 964, 966, 972, 974, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987], "atomic_benchmark": 10, "percentil": [10, 65, 111, 219, 273, 323, 542, 545, 546, 548, 549, 550, 553, 556, 582, 583, 697, 941, 977, 985], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 46, 68, 109, 121, 147, 180, 215, 232, 239, 298, 314, 323, 335, 337, 348, 349, 363, 365, 369, 372, 399, 433, 488, 505, 506, 507, 508, 513, 514, 515, 516, 520, 635, 636, 746, 749, 750, 760, 772, 783, 784, 785, 786, 787, 920, 931, 966, 980, 982], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 30, 61, 72, 74, 110, 133, 135, 141, 142, 152, 156, 181, 230, 235, 236, 247, 288, 306, 311, 312, 339, 346, 350, 359, 360, 361, 362, 367, 370, 371, 372, 538, 543, 557, 558, 565, 577, 584, 609, 751, 761, 762, 765, 873, 921, 930, 968, 980, 982], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 33, 40, 53, 59, 90, 101, 103, 107, 111, 126, 139, 143, 159, 162, 171, 188, 191, 197, 210, 230, 235, 242, 244, 292, 294, 296, 298, 299, 300, 302, 304, 311, 315, 332, 348, 350, 359, 360, 363, 366, 370, 372, 388, 391, 392, 396, 400, 407, 413, 428, 443, 458, 459, 532, 542, 545, 546, 548, 549, 550, 560, 563, 564, 565, 567, 569, 570, 572, 573, 575, 577, 582, 583, 593, 642, 650, 655, 656, 657, 665, 680, 689, 707, 708, 712, 715, 718, 719, 720, 721, 722, 723, 725, 727, 728, 729, 730, 731, 735, 776, 788, 789, 862, 931, 932, 933, 934, 941, 947, 972, 984, 985, 987, 988], "contain": [10, 18, 22, 25, 30, 36, 45, 51, 53, 64, 65, 101, 103, 106, 114, 141, 151, 152, 154, 156, 170, 197, 206, 215, 216, 219, 226, 233, 235, 241, 244, 245, 252, 259, 260, 262, 273, 283, 288, 291, 310, 311, 330, 331, 332, 334, 337, 339, 341, 342, 343, 344, 345, 346, 349, 350, 356, 360, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 374, 376, 384, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 450, 452, 453, 454, 458, 459, 460, 464, 465, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 650, 651, 652, 659, 662, 684, 685, 686, 717, 721, 728, 729, 737, 741, 744, 745, 746, 749, 750, 752, 760, 764, 765, 771, 772, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 860, 861, 862, 863, 866, 867, 868, 887, 888, 890, 894, 898, 900, 920, 921, 923, 929, 932, 935, 937, 941, 942, 944, 947, 957, 966, 972, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "generate_dataset": 10, "coef": [10, 50, 95, 150, 151, 158, 163, 166, 170, 171, 173, 178, 182, 183, 184, 188, 195, 219, 248, 270, 307, 474, 596, 597, 599, 602, 603, 609, 610, 611, 612, 613, 619, 630, 631, 632, 633, 634, 635, 636, 637, 935], "random_se": [10, 83, 107], "x_scaler": 10, "y_scaler": 10, "ok": [10, 337, 937], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 266, 291, 323, 657, 663, 678, 679, 687, 732, 733, 736, 737, 931, 972, 980, 981, 987], "bp": [10, 112, 334, 939], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "red": [10, 11, 24, 30, 31, 55, 73, 83, 85, 86, 87, 102, 118, 121, 144, 156, 158, 159, 169, 177, 204, 216, 230, 241, 266, 269, 274, 278, 289, 298, 317, 335, 350, 362, 367, 932], "marker": [10, 11, 16, 25, 27, 31, 33, 34, 38, 48, 53, 54, 55, 58, 59, 77, 82, 83, 87, 91, 117, 142, 143, 156, 167, 172, 174, 176, 177, 179, 181, 182, 194, 196, 200, 221, 223, 224, 230, 235, 237, 238, 239, 273, 278, 289, 314, 337, 341, 370, 980, 982, 983], "linestyl": [10, 11, 15, 30, 55, 67, 73, 93, 95, 99, 110, 120, 123, 126, 135, 138, 140, 142, 144, 153, 164, 166, 167, 168, 179, 180, 181, 185, 189, 191, 192, 197, 213, 215, 232, 234, 238, 239, 244, 258, 266, 269, 274, 296, 299, 300, 302, 303, 304, 962], "major": [10, 14, 242, 273, 277, 280, 281, 282, 283, 284, 285, 312, 323, 332, 336, 337, 340, 343, 348, 351, 362, 366, 368, 370, 372, 501, 519, 520, 644, 678, 679, 687, 732, 733, 736, 859, 861, 931, 934, 945, 952, 955, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 982, 983, 984, 985, 986, 987, 988], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 23], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 187, 344, 389, 526, 648, 650, 652, 866], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 614, 635, 636, 927, 931], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 187, 201, 204, 253], "1e2": [10, 135, 142, 212, 227, 298, 695], "randomforest": [10, 107, 323, 369, 855, 856, 977], "250": [10, 60, 111, 156, 199, 443, 642, 920, 943, 979], "plot_prediction_lat": 10, "conserv": [11, 532, 539, 839, 840, 930, 943], "biologi": 11, "south": [11, 151, 266, 368], "american": [11, 12, 74, 332, 362, 364, 368, 369, 370, 419, 424, 680, 828], "mammal": 11, "past": [11, 341, 342, 345, 348, 351, 366, 367, 369, 488, 505, 506, 628, 955, 958], "environment": [11, 197], "unsuccess": 11, "cast": [11, 49, 179, 200, 331, 350, 351, 370, 446, 594, 595, 596, 602, 606, 607, 610, 611, 612, 613, 614, 615, 623, 625, 896, 979, 980, 981, 982, 985, 987], "densiti": [11, 45, 55, 60, 69, 91, 95, 148, 165, 179, 194, 197, 203, 206, 210, 220, 227, 235, 241, 254, 259, 260, 273, 298, 310, 334, 346, 350, 362, 369, 373, 381, 395, 398, 400, 402, 414, 417, 448, 452, 486, 491, 499, 500, 744, 745, 746, 788, 789, 793, 794, 840, 925, 927, 930, 934, 936, 937, 943, 951, 953, 957, 967, 968, 974, 976, 980, 981, 987], "phillip": [11, 266, 448], "2006": [11, 266, 369, 372, 412, 448, 507, 508, 515, 516, 560, 561, 564, 569, 572, 599, 616, 617, 690, 737, 738, 744, 783, 840, 857, 858, 927, 931, 933, 936, 943, 944], "basemap": [11, 266], "coast": [11, 266], "line": [11, 16, 36, 39, 55, 64, 85, 90, 110, 134, 146, 147, 148, 151, 152, 167, 168, 169, 171, 174, 175, 177, 180, 181, 182, 187, 188, 190, 191, 206, 210, 211, 213, 215, 232, 239, 241, 242, 263, 266, 274, 282, 297, 302, 303, 307, 308, 331, 332, 335, 337, 338, 339, 341, 342, 343, 344, 345, 348, 367, 368, 369, 389, 437, 438, 439, 458, 459, 492, 503, 504, 505, 506, 560, 563, 564, 582, 620, 636, 651, 752, 899, 925, 931, 935, 938, 945, 951, 954, 964, 966, 974, 983, 985], "nation": [11, 73, 266, 332, 795], "boundari": [11, 13, 23, 24, 25, 28, 31, 53, 55, 97, 101, 107, 116, 136, 139, 148, 152, 162, 180, 206, 211, 213, 238, 256, 261, 263, 264, 266, 268, 273, 275, 278, 286, 295, 296, 298, 300, 307, 308, 315, 333, 360, 369, 370, 372, 400, 406, 454, 486, 499, 500, 519, 538, 539, 541, 581, 777, 790, 796, 798, 799, 800, 827, 843, 844, 851, 852, 855, 871, 925, 934, 937, 941, 944, 945, 946, 972, 974, 976, 985, 986, 987], "america": [11, 12, 73, 266, 795, 941], "bradypu": [11, 266, 448], "variegatu": [11, 266, 448], "brown": [11, 83, 266, 448, 578, 921, 977, 979, 980, 981, 984], "throat": [11, 266, 448], "sloth": [11, 266, 448], "microryzomi": [11, 266, 448], "minutu": [11, 266, 448], "known": [11, 16, 23, 25, 35, 45, 52, 53, 74, 94, 95, 118, 140, 142, 147, 179, 180, 197, 206, 235, 237, 244, 262, 266, 274, 283, 287, 295, 311, 325, 334, 335, 337, 340, 345, 348, 350, 353, 358, 359, 360, 362, 363, 364, 365, 366, 367, 369, 370, 372, 389, 413, 432, 434, 448, 458, 459, 494, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 538, 539, 541, 544, 559, 572, 583, 608, 609, 622, 632, 633, 644, 654, 660, 663, 668, 678, 692, 704, 706, 742, 777, 783, 784, 785, 786, 787, 790, 795, 798, 804, 831, 855, 856, 857, 858, 921, 923, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 941, 946, 947, 957, 962, 964, 965], "forest": [11, 25, 28, 97, 104, 107, 113, 114, 116, 118, 121, 146, 148, 149, 156, 206, 215, 232, 266, 282, 310, 319, 330, 349, 350, 360, 371, 413, 414, 441, 445, 446, 448, 465, 505, 506, 507, 508, 510, 513, 514, 515, 516, 580, 584, 774, 781, 808, 822, 851, 855, 856, 857, 920, 921, 932, 939, 951, 952, 953, 968, 969, 972, 973, 975, 976, 977, 978, 979, 981], "rice": [11, 266, 448, 985], "rat": [11, 266, 448], "rodent": [11, 266, 448], "live": [11, 151, 266, 337, 362, 448, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575], "peru": [11, 266, 448], "colombia": [11, 266, 448], "ecuador": [11, 266, 448], "venezuela": [11, 266, 448], "entropi": [11, 217, 247, 266, 282, 287, 288, 319, 362, 369, 374, 448, 483, 507, 514, 557, 558, 608, 667, 685, 686, 690, 742, 855, 857, 927, 928, 931, 935, 947, 974, 976, 980, 981, 986], "anderson": [11, 266, 448, 978, 984], "schapir": [11, 266, 369, 448, 503, 504], "ecolog": [11, 266, 448], "190": [11, 110, 244, 266, 343, 448], "231": [11, 266, 362, 373, 395, 448, 534], "259": [11, 201, 266, 369, 448, 517, 518], "astro": [11, 142, 199, 224], "washington": [11, 142, 199, 224, 258, 266], "bunch": [11, 330, 331, 332, 414, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 457, 460, 517, 518, 519, 520, 582, 583, 584, 807, 808, 855, 856, 857, 858, 955, 966, 977, 979, 982, 984, 988], "fetch_species_distribut": [11, 266, 981], "ll": [11, 106, 230, 266, 337, 348, 482, 491, 934, 947, 957], "otherwis": [11, 51, 57, 101, 144, 147, 160, 181, 187, 266, 319, 325, 339, 341, 343, 350, 362, 364, 366, 370, 372, 385, 386, 387, 389, 391, 392, 393, 396, 401, 403, 404, 414, 417, 432, 433, 434, 435, 446, 476, 485, 486, 488, 490, 491, 497, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 538, 540, 541, 547, 552, 560, 561, 564, 581, 582, 583, 594, 595, 596, 602, 608, 609, 610, 612, 615, 616, 617, 618, 623, 625, 626, 627, 628, 635, 636, 640, 642, 646, 647, 648, 650, 652, 653, 657, 659, 663, 664, 673, 675, 676, 677, 678, 679, 687, 690, 701, 703, 704, 705, 723, 727, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 748, 749, 750, 751, 752, 760, 764, 765, 772, 777, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 803, 805, 806, 812, 813, 815, 819, 828, 829, 832, 833, 834, 836, 837, 838, 847, 849, 850, 851, 852, 853, 862, 868, 870, 883, 884, 891, 915, 917, 926, 927, 928, 931, 934, 935, 937, 938, 941, 943, 945, 946, 951, 955, 957, 974, 980, 981, 982, 985], "improvis": [11, 266], "mpl_toolkit": [11, 41, 62, 81, 91, 92, 152, 176, 199, 201, 266], "except": [11, 15, 40, 49, 88, 187, 194, 206, 243, 253, 266, 269, 270, 273, 275, 285, 326, 330, 337, 339, 340, 341, 342, 348, 350, 356, 359, 363, 366, 367, 369, 370, 372, 383, 410, 415, 432, 433, 434, 459, 504, 506, 507, 508, 510, 512, 514, 515, 518, 520, 561, 577, 580, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 622, 623, 628, 629, 637, 661, 727, 753, 781, 782, 788, 789, 791, 794, 799, 805, 806, 812, 826, 828, 848, 850, 853, 856, 858, 888, 917, 927, 931, 946, 957, 965, 966, 973, 977, 978, 979, 980, 981, 982, 983, 985], "importerror": [11, 15, 49, 88, 253, 266, 345, 446], "construct_grid": [11, 266], "object": [11, 13, 14, 24, 40, 46, 57, 61, 64, 65, 88, 118, 123, 131, 132, 140, 148, 175, 195, 197, 205, 216, 218, 233, 266, 284, 311, 312, 319, 330, 331, 332, 337, 338, 340, 342, 343, 344, 346, 349, 350, 351, 356, 362, 363, 364, 367, 370, 371, 372, 376, 378, 382, 383, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 661, 668, 681, 682, 691, 707, 708, 730, 731, 738, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 862, 867, 868, 869, 870, 871, 874, 878, 880, 890, 891, 892, 894, 896, 897, 899, 916, 917, 919, 927, 928, 929, 930, 934, 937, 938, 941, 944, 945, 946, 951, 952, 957, 958, 960, 961, 964, 966, 968, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987], "func": [11, 69, 151, 159, 197, 266, 337, 363, 415, 649, 812, 941, 976, 978, 980, 981], "xgrid": [11, 266], "ygrid": [11, 266], "correspond": [11, 13, 15, 24, 29, 37, 49, 60, 71, 75, 87, 102, 105, 107, 114, 129, 132, 133, 136, 141, 144, 151, 168, 171, 179, 180, 188, 197, 207, 212, 219, 226, 234, 236, 238, 239, 244, 245, 266, 278, 282, 283, 284, 311, 314, 315, 319, 324, 331, 332, 333, 336, 337, 339, 341, 344, 345, 349, 350, 359, 360, 362, 364, 365, 366, 367, 369, 370, 371, 372, 377, 382, 388, 390, 392, 396, 398, 401, 403, 409, 411, 413, 414, 422, 432, 433, 434, 440, 441, 442, 443, 444, 445, 446, 484, 491, 494, 495, 496, 499, 500, 502, 505, 507, 509, 510, 511, 514, 532, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 561, 567, 580, 582, 583, 585, 593, 596, 597, 598, 602, 608, 609, 610, 611, 612, 618, 619, 621, 622, 623, 624, 625, 626, 628, 630, 631, 632, 633, 637, 640, 641, 642, 644, 653, 660, 663, 673, 674, 683, 687, 701, 703, 723, 727, 731, 737, 738, 741, 743, 744, 745, 746, 749, 750, 752, 760, 769, 777, 780, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 797, 805, 806, 815, 819, 821, 822, 825, 836, 849, 852, 855, 856, 857, 858, 872, 878, 906, 920, 921, 923, 924, 925, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 941, 942, 945, 946, 950, 957, 963, 966, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "coverag": [11, 111, 179, 197, 266, 340, 358, 448, 577, 670], "coordin": [11, 12, 13, 90, 117, 139, 164, 199, 236, 266, 323, 367, 372, 394, 397, 398, 399, 411, 421, 422, 428, 481, 487, 488, 489, 490, 492, 493, 495, 496, 497, 498, 500, 564, 596, 597, 601, 602, 603, 604, 605, 606, 608, 610, 611, 612, 613, 631, 632, 633, 634, 638, 639, 640, 643, 644, 656, 713, 718, 847, 927, 928, 946, 964, 972, 975, 976, 977, 981, 983, 985, 986, 987], "corner": [11, 13, 24, 49, 150, 232, 236, 244, 245, 266, 337, 448, 859, 861, 931, 986], "cell": [11, 29, 266, 334, 342, 642, 931, 932, 978, 986], "xmin": [11, 71, 169, 171, 188, 189, 266], "x_left_lower_corn": [11, 266, 448], "grid_siz": [11, 56, 266, 448], "xmax": [11, 71, 169, 171, 188, 189, 266], "nx": [11, 31, 266, 448], "ymin": [11, 71, 166, 168, 171, 172, 180, 188, 235, 266], "y_left_lower_corn": [11, 266, 448], "ny": [11, 31, 234, 266, 334, 448, 921, 943], "create_species_bunch": 11, "species_nam": [11, 266], "record": [11, 86, 103, 153, 312, 323, 337, 362, 364, 400, 407, 448, 570, 593, 642, 720, 723, 727, 728, 729, 730, 771, 794, 985, 986], "join": [11, 12, 18, 146, 197, 235, 275, 332, 351, 413, 966, 972, 980], "ascii": [11, 266, 370, 437, 538, 539, 541], "pt": [11, 332, 371, 824, 941], "desir": [11, 22, 101, 133, 147, 179, 181, 273, 277, 330, 337, 339, 341, 345, 356, 359, 362, 365, 366, 367, 371, 453, 488, 490, 494, 497, 517, 543, 552, 553, 614, 620, 635, 636, 658, 685, 788, 789, 793, 813, 815, 818, 819, 821, 822, 824, 825, 831, 833, 835, 836, 871, 900, 923, 925, 928, 934, 941, 945, 946, 947, 957, 972, 980, 981, 982, 985], "pts_": 11, "ix": [11, 244, 305], "searchsort": 11, "dd": [11, 12, 116, 266, 448], "ii": [11, 86, 152, 186, 230, 334, 370, 532, 533, 539, 588, 616, 617, 811, 820, 927, 941, 950], "lat": [11, 266, 448], "cov_": [11, 75], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "randint": [11, 33, 74, 83, 110, 147, 153, 202, 209, 214, 247, 282, 339, 342, 349, 750, 767, 783, 784, 785, 787, 920, 921], "land": [11, 266, 351, 369], "water": 11, "land_refer": [11, 266], "80": [11, 15, 25, 62, 74, 91, 118, 126, 152, 158, 213, 301, 302, 303, 310, 316, 319, 332, 334, 337, 360, 366, 371, 395, 460, 491, 663, 746, 760, 841, 860, 920, 926, 927, 931, 938, 944, 947, 966], "standard": [11, 12, 24, 29, 31, 56, 64, 65, 67, 73, 74, 78, 86, 99, 102, 104, 105, 106, 107, 114, 118, 133, 135, 140, 142, 144, 151, 158, 164, 168, 177, 179, 188, 199, 200, 201, 211, 226, 230, 233, 234, 235, 236, 238, 273, 278, 296, 310, 323, 324, 329, 330, 331, 333, 334, 335, 337, 339, 340, 342, 343, 346, 348, 350, 353, 356, 358, 362, 364, 365, 366, 370, 372, 418, 422, 438, 446, 451, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 472, 474, 475, 480, 482, 485, 491, 502, 540, 544, 561, 584, 594, 595, 600, 601, 604, 605, 606, 614, 615, 622, 623, 624, 625, 626, 628, 637, 639, 643, 737, 752, 767, 785, 788, 789, 790, 791, 792, 794, 796, 797, 798, 799, 800, 801, 802, 812, 817, 818, 821, 824, 825, 826, 828, 835, 836, 837, 838, 845, 847, 848, 867, 920, 923, 927, 928, 931, 933, 934, 935, 937, 945, 946, 952, 955, 957, 962, 964, 965, 966, 968, 978, 979, 980, 981, 983, 984, 985], "cov_train": 11, "train_cover_std": 11, "coastlin": [11, 266, 334], "cyl": [11, 266], "llcrnrlat": [11, 266], "urcrnrlat": [11, 266], "llcrnrlon": [11, 266], "urcrnrlon": [11, 266], "drawcoastlin": [11, 266], "drawcountri": [11, 266], "9998": [11, 266], "k": [11, 12, 15, 16, 22, 24, 27, 28, 32, 33, 34, 38, 45, 49, 51, 55, 58, 60, 68, 69, 73, 81, 82, 83, 85, 92, 93, 98, 101, 107, 111, 114, 116, 117, 119, 120, 123, 126, 129, 130, 136, 138, 139, 143, 147, 148, 151, 152, 153, 161, 162, 164, 173, 176, 183, 191, 193, 210, 212, 213, 214, 221, 224, 235, 238, 239, 244, 245, 248, 253, 255, 256, 258, 259, 260, 261, 262, 264, 265, 266, 274, 275, 276, 277, 280, 284, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 309, 310, 312, 319, 324, 331, 332, 334, 337, 345, 346, 350, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 374, 391, 394, 397, 398, 399, 400, 401, 402, 403, 409, 410, 412, 419, 422, 438, 452, 454, 456, 462, 473, 481, 487, 491, 494, 495, 496, 499, 500, 503, 505, 507, 508, 509, 531, 539, 540, 541, 542, 544, 545, 546, 548, 549, 550, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 581, 589, 590, 598, 600, 601, 603, 604, 605, 606, 608, 609, 613, 614, 615, 616, 617, 619, 629, 630, 632, 633, 634, 635, 636, 638, 641, 645, 646, 654, 655, 658, 667, 675, 686, 692, 705, 707, 708, 710, 715, 718, 723, 724, 725, 726, 728, 740, 741, 742, 744, 745, 747, 751, 753, 754, 755, 758, 761, 762, 764, 765, 767, 772, 783, 788, 789, 790, 791, 792, 793, 794, 796, 798, 799, 800, 801, 802, 809, 813, 814, 815, 819, 820, 821, 823, 824, 828, 835, 840, 854, 862, 870, 879, 884, 905, 920, 921, 923, 924, 925, 927, 928, 929, 930, 933, 935, 936, 937, 939, 944, 945, 946, 947, 951, 954, 961, 967, 968, 972, 973, 974, 975, 978, 980, 981, 982, 984, 985, 986, 987], "solid": [11, 15, 28, 30, 110, 138, 191, 192, 206, 266, 275, 955], "z": [11, 15, 31, 53, 91, 107, 126, 137, 139, 152, 189, 191, 192, 193, 199, 201, 206, 211, 225, 259, 266, 268, 275, 278, 292, 297, 298, 302, 303, 304, 308, 334, 359, 367, 369, 503, 504, 535, 589, 614, 621, 635, 636, 639, 643, 649, 673, 734, 828, 927, 928, 935, 936, 987], "float64": [11, 13, 44, 110, 112, 113, 246, 284, 285, 324, 331, 337, 339, 350, 370, 428, 446, 447, 458, 459, 492, 531, 532, 539, 541, 591, 608, 623, 625, 687, 813, 821, 822, 849, 850, 852, 853, 856, 858, 865, 867, 902, 905, 907, 908, 909, 946, 957, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "idx": [11, 15, 18, 27, 41, 95, 101, 107, 119, 144, 152, 154, 163, 171, 178, 179, 188, 200, 215, 315, 363, 366], "9999": [11, 197, 266, 290, 448, 577, 980], "coverages_land": 11, "contourf": [11, 15, 107, 193, 211, 259, 266, 268, 275, 276, 292, 297, 303, 308, 581, 582], "pts_train": 11, "pts_test": 11, "auc": [11, 23, 179, 197, 215, 232, 235, 239, 242, 244, 245, 652, 658, 737, 931, 977, 980, 984], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 31, 91, 95, 192, 193, 222, 242, 259, 260, 297, 303, 308, 362, 657, 931, 947], "fpr": [11, 207, 215, 232, 244, 245, 344, 542, 546, 648, 652, 656, 676, 738, 931, 969, 972], "tpr": [11, 207, 215, 232, 244, 245, 344, 652, 656, 738, 931, 969, 972], "threshold": [11, 23, 38, 60, 88, 95, 133, 148, 152, 154, 174, 207, 209, 232, 233, 234, 242, 252, 286, 315, 318, 350, 362, 367, 369, 371, 392, 393, 396, 419, 450, 458, 459, 481, 487, 492, 498, 499, 500, 513, 538, 541, 543, 547, 552, 553, 594, 617, 621, 626, 628, 642, 648, 650, 652, 653, 656, 657, 670, 675, 676, 688, 689, 705, 731, 737, 738, 741, 744, 745, 765, 783, 794, 795, 811, 813, 815, 830, 842, 843, 844, 852, 859, 861, 905, 927, 931, 934, 935, 937, 941, 944, 946, 947, 952, 972, 976, 977, 979, 980, 981, 982, 984, 985, 986], "roc_curv": [11, 207, 232, 244, 652, 656, 676, 731, 737, 931, 972, 973, 974, 977, 978, 980, 985], "roc_auc": [11, 235, 239, 244, 245, 344, 584, 652, 931, 969], "area": [11, 31, 114, 179, 197, 215, 232, 235, 242, 244, 245, 298, 303, 307, 334, 337, 341, 348, 360, 362, 369, 370, 652, 656, 657, 658, 691, 737, 738, 928, 931, 934, 950, 974], "roc": [11, 23, 104, 148, 205, 207, 215, 216, 228, 344, 360, 366, 454, 460, 514, 608, 652, 656, 657, 658, 676, 691, 731, 737, 738, 765, 774, 777, 815, 852, 937, 969, 974, 975, 977, 978, 982, 984], "ntime": [11, 246], "elaps": [11, 43, 62, 105, 106, 323, 414, 417, 519, 520, 807, 808, 809, 810], "plot_species_distribution_model": [11, 448], "emploi": [12, 135, 212, 364, 370, 372, 400, 428, 532, 539, 939, 955, 965, 978], "techniqu": [12, 64, 66, 87, 96, 100, 109, 125, 132, 147, 150, 187, 201, 203, 240, 257, 283, 288, 314, 325, 334, 348, 350, 361, 362, 366, 367, 368, 369, 370, 371, 397, 398, 399, 400, 484, 504, 627, 639, 643, 644, 675, 705, 923, 927, 928, 930, 931, 934, 937, 939, 943, 945, 947, 952, 955, 960, 965, 966, 985], "histor": [12, 179, 952], "quot": [12, 14, 64, 236, 310, 311, 324, 331, 332, 335, 341, 361, 438, 439, 446, 931, 943, 946, 966, 987], "quantiti": [12, 108, 235, 242, 282, 323, 350, 362, 369, 671, 672, 673, 734, 804, 920, 922, 925, 927, 977], "daili": [12, 955], "price": [12, 69, 108, 118, 921, 927, 955, 962], "link": [12, 16, 151, 152, 158, 179, 197, 221, 238, 263, 314, 324, 335, 336, 337, 338, 341, 345, 350, 362, 364, 367, 372, 511, 512, 560, 598, 619, 630, 638, 655, 866, 868, 927, 934, 947, 948, 951, 954, 960, 964, 966, 970, 972, 975, 976, 979, 980, 983], "fluctuat": [12, 55, 179, 242, 980], "normalesup": [12, 29, 42, 61, 211], "2003": [12, 359, 362, 367, 370, 401, 402, 412, 463, 465, 639, 643, 783, 785, 927, 928, 933, 943, 980], "2008": [12, 364, 366, 367, 428, 484, 513, 540, 595, 614, 635, 636, 642, 666, 675, 705, 778, 783, 787, 804, 925, 928, 929, 931, 932, 933, 936, 937, 946], "calm": 12, "ago": [12, 952], "tech": [12, 334, 786], "firm": [12, 362], "crash": [12, 337, 418, 837, 838, 845, 941, 976, 980], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 345, 804, 936, 964], "msft": 12, "ibm": [12, 18, 291, 312, 332], "twx": 12, "warner": [12, 987], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 966], "amzn": 12, "amazon": 12, "tm": [12, 934], "toyota": 12, "caj": 12, "canon": [12, 350, 369, 432, 433, 435, 717, 952, 953, 968], "sne": [12, 148, 198, 199, 200, 201, 203, 464, 475, 642, 967, 968], "soni": [12, 982, 984], "ford": 12, "hmc": 12, "honda": 12, "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 805, 806, 935], "boe": 12, "ko": [12, 24, 136], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 73, 74, 364, 419, 424], "mcdonald": 12, "pep": [12, 345, 972], "pepsi": 12, "kellogg": 12, "un": [12, 337, 360, 370, 374, 483, 539, 742, 811, 820, 830, 834, 981], "unilev": 12, "mar": [12, 949], "marriott": 12, "pg": [12, 343, 599, 927, 977], "procter": 12, "gambl": 12, "colgat": [12, 16], "palmol": 12, "ge": [12, 922, 933, 984], "electr": [12, 334, 362], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 955], "chase": [12, 972], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 955], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 323, 335, 348, 932, 949], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": 12, "instrument": [12, 86, 150], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 982], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 121], "dynam": [12, 152, 505, 506, 513, 529, 530, 626, 627, 628, 947, 951, 955, 978, 984], "rtn": 12, "raytheon": 12, "cat": [12, 65, 152, 153, 283, 284, 285, 332, 370, 532, 662, 668, 703, 732, 931, 941, 981, 982, 984], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 312, 324, 339, 343, 364, 370, 449, 532, 538, 539, 541, 859, 861, 951], "fetch": [12, 16, 118, 151, 197, 330, 331, 332, 337, 341, 342, 345, 361, 367, 446, 505, 506, 513, 538, 539, 541, 980], "histori": [12, 326, 496, 509, 510, 949, 972], "stderr": [12, 777], "url": [12, 16, 331, 334, 341], "githubusercont": 12, "master": [12, 15, 253, 337, 341, 955, 977], "financi": [12, 362, 369, 927], "csv": [12, 331, 334, 342, 954, 980, 985], "read_csv": [12, 342, 987], "close_pric": 12, "vstack": [12, 24, 52, 60, 138, 139, 161, 221, 225, 253, 266, 303, 581, 932, 980], "q": [12, 65, 77, 111, 179, 283, 359, 362, 367, 883, 927, 946], "open_pric": 12, "carri": [12, 28, 147, 235, 238, 243, 269, 275, 312, 351, 356, 370, 507, 508, 509, 510, 514, 515, 516, 855, 856, 857, 858, 955, 965], "invers": [12, 50, 70, 148, 226, 244, 298, 311, 312, 329, 350, 361, 363, 365, 366, 367, 370, 374, 396, 415, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 477, 483, 484, 485, 489, 491, 493, 507, 511, 514, 539, 540, 541, 578, 594, 595, 608, 609, 616, 618, 624, 625, 626, 627, 628, 630, 673, 692, 701, 744, 745, 790, 791, 798, 799, 805, 806, 808, 812, 815, 821, 822, 824, 839, 840, 847, 848, 849, 852, 853, 855, 857, 873, 925, 927, 931, 934, 935, 941, 945, 946, 964, 966, 967, 968, 972, 975, 980, 983, 984, 986], "correl": [12, 25, 75, 77, 78, 96, 115, 129, 132, 140, 148, 149, 150, 152, 153, 168, 174, 197, 235, 252, 281, 282, 306, 330, 333, 334, 342, 350, 352, 359, 364, 366, 371, 372, 400, 407, 432, 433, 435, 443, 444, 450, 474, 514, 556, 559, 577, 584, 585, 586, 632, 633, 692, 706, 727, 728, 729, 774, 788, 789, 825, 826, 828, 836, 922, 927, 932, 938, 941, 945, 947, 952, 953, 968, 972, 973, 974, 985, 986], "condition": [12, 25, 179, 360, 364, 707, 925], "connect": [12, 35, 40, 43, 47, 50, 57, 61, 62, 335, 337, 346, 350, 364, 392, 396, 402, 412, 413, 535, 536, 645, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 929, 934, 936, 944, 976, 985], "edge_model": 12, "graphicallassocv": [12, 75, 364, 421, 423, 424, 425, 426, 428, 980, 984, 986], "seri": [12, 75, 105, 150, 153, 161, 179, 199, 215, 219, 240, 284, 287, 329, 332, 342, 350, 362, 439, 440, 441, 442, 446, 450, 451, 452, 454, 455, 460, 491, 640, 644, 767, 863, 922, 927, 928, 932, 934, 945, 951, 975, 978, 979, 980, 984, 987], "rather": [12, 49, 75, 102, 146, 151, 179, 180, 193, 277, 278, 310, 311, 319, 324, 333, 337, 339, 342, 343, 345, 348, 349, 350, 351, 362, 366, 367, 369, 370, 372, 398, 411, 413, 515, 531, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 579, 596, 597, 602, 603, 610, 611, 612, 613, 730, 760, 779, 781, 782, 811, 847, 848, 859, 884, 925, 927, 928, 931, 933, 934, 938, 952, 961, 964, 972, 973, 974, 975, 979, 980, 981, 982, 987], "former": [12, 312, 369, 370, 515, 748, 755, 764, 933, 972, 978, 981], "recoveri": [12, 75, 178, 364], "group": [12, 33, 36, 53, 55, 120, 152, 154, 179, 200, 227, 230, 289, 311, 318, 332, 342, 350, 351, 362, 368, 369, 370, 385, 445, 538, 539, 541, 544, 668, 737, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 775, 821, 857, 858, 927, 928, 930, 931, 932, 947, 948, 949, 951, 957, 960, 961, 978, 979, 980, 981, 984, 985, 986], "amongst": [12, 947], "indic": [12, 18, 23, 24, 25, 44, 54, 55, 61, 69, 78, 85, 104, 140, 143, 147, 150, 152, 176, 201, 210, 229, 237, 238, 241, 242, 253, 266, 287, 288, 291, 310, 311, 312, 318, 324, 332, 337, 338, 339, 341, 345, 346, 348, 350, 359, 360, 362, 364, 366, 367, 369, 370, 372, 373, 377, 388, 391, 395, 400, 401, 402, 403, 405, 406, 407, 410, 414, 417, 422, 437, 458, 459, 461, 462, 463, 473, 482, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 531, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 570, 577, 578, 579, 580, 582, 583, 589, 597, 600, 601, 603, 604, 605, 611, 613, 615, 623, 625, 632, 633, 640, 642, 644, 646, 653, 657, 662, 663, 668, 669, 670, 674, 677, 678, 679, 680, 683, 687, 688, 689, 690, 703, 720, 727, 728, 729, 730, 732, 733, 734, 736, 737, 739, 740, 741, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 781, 782, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 812, 815, 819, 821, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 863, 867, 868, 873, 888, 894, 895, 921, 926, 927, 928, 931, 932, 933, 934, 935, 938, 939, 941, 942, 945, 946, 952, 957, 961, 964, 966, 972, 973, 974, 975, 976, 977, 980, 982, 983, 985, 987, 988], "reflect": [12, 36, 42, 43, 73, 83, 86, 108, 152, 153, 179, 197, 244, 257, 311, 333, 336, 341, 350, 352, 359, 400, 406, 928, 931, 937, 939, 965, 973, 981], "properti": [12, 23, 142, 143, 181, 196, 222, 255, 278, 318, 323, 326, 330, 337, 339, 353, 359, 362, 364, 367, 369, 371, 372, 377, 393, 396, 401, 402, 403, 414, 415, 432, 433, 434, 492, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 540, 541, 543, 544, 547, 560, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 582, 596, 602, 605, 610, 612, 624, 625, 649, 654, 655, 658, 746, 749, 750, 760, 776, 777, 807, 808, 821, 823, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 920, 923, 926, 927, 928, 931, 932, 934, 937, 941, 944, 946, 947, 948, 952, 957, 977, 981, 982, 986], "impact": [12, 23, 32, 33, 69, 129, 148, 150, 151, 152, 181, 197, 219, 229, 278, 285, 311, 319, 323, 324, 330, 348, 351, 362, 367, 397, 399, 486, 490, 497, 540, 616, 617, 618, 626, 627, 628, 642, 741, 746, 749, 750, 760, 771, 788, 789, 825, 836, 870, 884, 902, 905, 920, 930, 938, 946, 979, 982, 985], "affinity_propag": [12, 40], "covariance_": [12, 31, 73, 75, 419, 420, 421, 422, 423, 424, 425, 426, 499, 500, 925, 979], "n_label": [12, 83, 213, 350, 437, 473, 663, 670, 675, 688, 689, 703, 705, 739, 740, 766, 931, 978, 980], "lai": [12, 278, 937], "canva": [12, 15], "manifold": [12, 35, 48, 62, 202, 203, 204, 253, 280, 284, 285, 289, 326, 330, 350, 362, 367, 369, 452, 475, 480, 494, 499, 516, 797, 809, 818, 840, 870, 934, 967, 968, 972, 973, 975, 976, 977, 978, 979, 988], "dens": [12, 148, 157, 284, 285, 291, 323, 346, 350, 362, 367, 369, 371, 394, 397, 399, 414, 417, 446, 473, 474, 484, 485, 494, 516, 535, 536, 557, 558, 579, 602, 607, 608, 609, 616, 618, 622, 623, 626, 627, 628, 637, 638, 639, 642, 643, 709, 710, 716, 728, 739, 805, 806, 813, 820, 821, 823, 825, 826, 828, 836, 837, 838, 839, 840, 847, 848, 849, 850, 852, 853, 885, 902, 905, 921, 924, 927, 928, 931, 932, 934, 937, 941, 943, 944, 945, 946, 947, 972, 974, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988], "eigen_solv": [12, 40, 42, 61, 199, 200, 367, 402, 412, 485, 638, 639, 641, 643, 645, 928, 973, 982, 985, 986, 987], "arpack": [12, 18, 40, 42, 61, 200, 367, 401, 402, 403, 412, 485, 491, 494, 638, 639, 641, 643, 645, 928, 978, 979, 984], "don": [12, 50, 109, 151, 200, 213, 235, 253, 290, 295, 299, 306, 323, 331, 337, 339, 341, 343, 345, 348, 349, 363, 370, 596, 602, 776, 855, 856, 857, 858, 895, 920, 927, 930, 932, 935, 937, 945, 954, 966, 976, 981, 988], "control": [12, 15, 56, 89, 90, 123, 140, 142, 180, 187, 209, 210, 236, 238, 255, 281, 283, 314, 316, 317, 323, 324, 330, 333, 337, 339, 342, 345, 348, 350, 353, 356, 361, 362, 365, 366, 367, 368, 371, 372, 385, 391, 399, 404, 421, 422, 428, 481, 486, 487, 488, 489, 490, 493, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 543, 544, 546, 564, 569, 575, 577, 580, 582, 584, 589, 591, 592, 596, 597, 599, 600, 601, 602, 604, 605, 606, 622, 626, 627, 632, 633, 637, 642, 651, 659, 744, 745, 746, 748, 749, 750, 751, 752, 760, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 774, 775, 778, 779, 782, 805, 806, 827, 839, 840, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 861, 897, 918, 920, 927, 928, 930, 931, 932, 934, 937, 938, 943, 945, 946, 947, 951, 952, 953, 964, 968, 972, 974, 976, 977, 980, 981, 982, 983, 984, 985, 986], "neighbor": [12, 28, 35, 40, 43, 55, 116, 119, 125, 146, 147, 200, 201, 203, 206, 214, 215, 257, 258, 259, 260, 262, 263, 264, 266, 282, 284, 285, 310, 326, 329, 334, 346, 350, 362, 368, 369, 370, 373, 376, 384, 392, 395, 396, 398, 400, 402, 407, 408, 411, 413, 446, 452, 454, 513, 520, 552, 557, 558, 577, 578, 638, 639, 640, 641, 642, 643, 646, 730, 746, 774, 808, 809, 828, 843, 851, 905, 932, 937, 952, 953, 960, 965, 967, 968, 972, 974, 975, 976, 977, 978, 979], "node": [12, 37, 108, 112, 280, 314, 318, 345, 346, 362, 364, 367, 369, 392, 393, 396, 413, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 600, 604, 606, 632, 633, 642, 788, 789, 855, 856, 857, 858, 859, 861, 889, 899, 934, 936, 937, 938, 947, 975, 976, 977, 978, 979, 981, 984, 985, 986, 987], "plane": [12, 191, 211, 259, 297, 300, 302, 303, 308, 334, 402, 412, 925, 927, 946, 964], "node_position_model": 12, "locallylinearembed": [12, 199, 200, 201, 284, 638, 640, 642, 928, 934, 977, 978, 986, 987, 988], "n_neighbor": [12, 40, 57, 62, 119, 146, 199, 200, 201, 203, 206, 215, 253, 255, 256, 259, 260, 261, 262, 264, 265, 278, 280, 282, 310, 369, 402, 552, 557, 558, 578, 638, 639, 641, 643, 646, 790, 791, 792, 794, 796, 797, 801, 842, 843, 921, 928, 934, 937, 944, 979, 986, 988], "output": [12, 14, 15, 23, 25, 33, 49, 54, 88, 97, 102, 107, 108, 118, 125, 126, 135, 143, 146, 147, 148, 151, 175, 205, 219, 224, 229, 233, 235, 238, 242, 244, 245, 253, 274, 277, 280, 283, 284, 311, 312, 313, 318, 330, 331, 332, 334, 337, 339, 343, 345, 348, 349, 350, 360, 361, 362, 363, 365, 366, 369, 370, 371, 378, 382, 384, 388, 392, 393, 394, 396, 397, 399, 400, 402, 409, 410, 412, 413, 414, 415, 416, 417, 418, 432, 433, 434, 435, 438, 441, 442, 443, 444, 445, 446, 447, 453, 455, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 577, 578, 579, 580, 581, 582, 583, 585, 588, 589, 590, 591, 592, 596, 597, 600, 602, 603, 604, 607, 608, 610, 611, 612, 613, 616, 617, 618, 621, 623, 624, 626, 628, 629, 631, 632, 633, 634, 638, 639, 640, 642, 644, 646, 649, 650, 663, 664, 671, 672, 673, 675, 677, 684, 691, 694, 695, 697, 699, 700, 701, 702, 703, 705, 710, 716, 721, 734, 737, 744, 745, 748, 749, 750, 751, 752, 758, 760, 761, 762, 763, 764, 765, 766, 769, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 791, 792, 793, 797, 798, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 835, 836, 839, 840, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 868, 870, 873, 884, 885, 898, 918, 920, 921, 923, 925, 927, 928, 931, 932, 933, 934, 935, 938, 941, 946, 953, 957, 958, 960, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "edg": [12, 24, 42, 61, 88, 108, 202, 242, 345, 350, 359, 362, 364, 403, 511, 512, 535, 536, 538, 539, 541, 744, 785, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 813, 860, 941, 944, 955, 978, 980, 983, 986], "displai": [12, 23, 25, 31, 33, 42, 44, 55, 65, 74, 75, 77, 78, 80, 85, 109, 114, 115, 118, 148, 151, 152, 164, 166, 183, 197, 205, 206, 215, 225, 232, 236, 237, 242, 249, 263, 281, 282, 302, 315, 323, 337, 340, 344, 346, 353, 363, 367, 370, 371, 389, 414, 417, 418, 446, 491, 514, 580, 581, 582, 608, 637, 647, 648, 650, 651, 652, 663, 668, 731, 738, 746, 752, 760, 774, 808, 809, 821, 823, 828, 845, 852, 859, 860, 861, 875, 897, 918, 931, 935, 951, 968, 981, 983, 984, 986, 987, 988], "strength": [12, 118, 142, 179, 183, 236, 280, 323, 365, 369, 517, 518, 593, 598, 599, 602, 608, 609, 619, 622, 623, 624, 625, 626, 628, 630, 637, 732, 805, 806, 847, 848, 852, 853, 920, 927, 934, 937, 945, 946], "plan": [12, 331, 335, 337, 338, 351, 941, 975], "fair": [12, 369, 640, 644, 777, 932, 955], "crucial": [12, 150, 230, 323, 336, 337, 351, 362, 372, 946], "challeng": [12, 118, 135, 152, 158, 197, 206, 325, 332, 333, 362, 364, 412, 422, 931, 937, 955, 957], "overlap": [12, 33, 99, 112, 132, 202, 223, 311, 335, 359, 362, 366, 369, 370, 537, 739, 740, 747, 751, 753, 754, 755, 756, 764, 928, 941, 978], "heurist": [12, 14, 110, 310, 324, 362, 371, 399, 402, 411, 412, 458, 459, 487, 489, 496, 626, 627, 628, 641, 645, 749, 750, 849, 850, 851, 852, 853, 872, 928, 929, 934, 945, 947, 955, 964, 972, 973, 977, 981, 984, 985], "direct": [12, 77, 78, 81, 85, 87, 91, 94, 133, 185, 221, 227, 232, 262, 271, 278, 298, 303, 335, 337, 338, 341, 345, 351, 362, 365, 367, 370, 371, 402, 412, 421, 422, 428, 484, 491, 499, 538, 539, 541, 552, 591, 638, 797, 925, 927, 932, 934, 936, 952, 965, 972, 975], "nearest": [12, 13, 28, 29, 35, 36, 46, 47, 50, 53, 56, 75, 80, 85, 88, 139, 147, 170, 191, 195, 214, 257, 259, 262, 263, 271, 297, 298, 302, 303, 304, 308, 326, 329, 334, 346, 350, 362, 368, 369, 373, 376, 384, 395, 398, 400, 402, 407, 411, 412, 446, 452, 454, 557, 558, 577, 578, 580, 585, 638, 639, 641, 642, 646, 739, 740, 746, 774, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 808, 809, 813, 828, 905, 928, 937, 946, 952, 953, 960, 968, 972, 974, 975, 976, 977, 979, 980, 981, 982, 984], "along": [12, 13, 51, 54, 61, 78, 105, 111, 166, 179, 211, 239, 280, 311, 312, 319, 341, 343, 345, 346, 350, 353, 356, 359, 367, 369, 370, 371, 372, 374, 483, 500, 537, 561, 562, 580, 596, 597, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 613, 626, 628, 631, 632, 633, 634, 635, 636, 728, 729, 739, 746, 760, 817, 818, 821, 825, 826, 827, 828, 832, 833, 834, 836, 837, 838, 863, 886, 906, 912, 920, 927, 934, 941, 944, 955, 972, 977, 978, 980, 984, 985], "linecollect": [12, 202, 209, 582], "facecolor": [12, 15, 24, 31, 41, 55, 85, 92, 101, 126, 143, 199, 213, 235, 260, 275, 296, 299, 302, 303, 305], "partial_correl": 12, "precision_": [12, 75, 419, 420, 421, 422, 423, 424, 425, 426], "sqrt": [12, 73, 74, 75, 88, 91, 95, 103, 123, 158, 160, 202, 204, 217, 221, 222, 223, 226, 227, 235, 303, 362, 369, 370, 372, 413, 419, 420, 421, 422, 423, 424, 425, 426, 488, 490, 497, 507, 508, 509, 510, 514, 515, 569, 596, 597, 602, 603, 610, 611, 612, 613, 631, 634, 649, 680, 712, 713, 718, 828, 840, 855, 856, 857, 858, 923, 927, 928, 931, 933, 943, 986], "diag": [12, 75, 143, 223, 226, 367, 372, 482, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 744, 745, 927, 987], "newaxi": [12, 13, 18, 22, 38, 75, 95, 100, 136, 160, 169, 175, 180, 181, 182, 184, 185, 196, 209, 211, 249, 258, 265, 306, 316, 317, 359, 486, 927], "ab": [12, 16, 36, 69, 89, 96, 101, 108, 118, 129, 133, 154, 166, 170, 190, 192, 195, 197, 202, 235, 273, 296, 308, 362, 488, 490, 497, 577, 695, 788, 789, 823, 931], "triu": 12, "02": [12, 40, 46, 53, 57, 59, 75, 85, 88, 101, 107, 137, 150, 206, 213, 230, 242, 258, 268, 271, 273, 275, 292, 294, 315, 331, 334, 342, 366, 392, 396, 547, 608, 626, 746, 760, 827, 842, 856, 927], "nipy_spectr": [12, 35, 42, 43, 47, 48, 55, 56, 92], "start_idx": [12, 202], "end_idx": [12, 202], "sequenc": [12, 107, 167, 202, 339, 350, 363, 366, 367, 369, 370, 453, 462, 511, 512, 519, 520, 531, 532, 538, 539, 541, 596, 746, 749, 757, 774, 831, 887, 888, 894, 902, 905, 951, 972, 975, 977, 978], "line0": [12, 202], "linen": [12, 202], "x0": [12, 31, 171, 188, 202, 273, 295, 350, 382, 414, 517, 518, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 577, 578, 579, 580, 811, 812, 813, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828], "y0": [12, 202], "y1": [12, 82, 101, 202, 459, 666, 713, 932, 933], "xm": [12, 202], "ym": [12, 202], "segment": [12, 32, 43, 148, 202, 209, 332, 345, 360, 362, 370, 402, 412, 458, 459, 641, 804, 931, 951, 955, 980, 982, 984], "stop": [12, 16, 40, 57, 97, 140, 142, 148, 152, 157, 181, 281, 337, 339, 345, 346, 350, 362, 367, 369, 371, 391, 392, 394, 396, 397, 399, 402, 404, 412, 413, 421, 422, 428, 432, 433, 434, 446, 454, 458, 459, 465, 470, 482, 486, 487, 488, 489, 490, 493, 495, 496, 497, 503, 504, 507, 508, 509, 510, 511, 512, 514, 515, 521, 538, 539, 541, 552, 567, 577, 594, 595, 596, 598, 599, 602, 606, 608, 609, 616, 617, 618, 619, 621, 626, 627, 628, 630, 641, 642, 645, 664, 744, 745, 774, 805, 806, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 889, 905, 920, 927, 935, 936, 946, 947, 952, 953, 955, 968, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 987], "lc": [12, 202, 209], "zorder": [12, 31, 53, 87, 115, 126, 136, 144, 169, 177, 200, 202, 209, 212, 221, 281, 302, 303], "hot_r": [12, 273], "norm": [12, 13, 14, 16, 31, 36, 50, 88, 91, 138, 141, 158, 165, 170, 202, 221, 222, 223, 225, 227, 232, 236, 258, 273, 298, 311, 343, 346, 350, 362, 370, 371, 393, 394, 397, 409, 410, 414, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 439, 481, 484, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 539, 540, 541, 547, 593, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 622, 626, 628, 631, 634, 635, 636, 640, 642, 643, 644, 719, 785, 820, 834, 847, 849, 852, 913, 914, 924, 927, 929, 931, 941, 945, 975, 977, 979, 983], "set_arrai": [12, 202, 209], "set_linewidth": [12, 202, 209], "add_collect": [12, 202, 209], "index": [12, 14, 16, 27, 33, 34, 35, 36, 37, 45, 46, 53, 66, 104, 105, 109, 130, 140, 146, 150, 151, 153, 179, 197, 216, 219, 222, 223, 227, 230, 233, 234, 235, 236, 238, 246, 247, 253, 273, 278, 284, 287, 288, 311, 312, 332, 334, 335, 337, 339, 341, 346, 348, 350, 359, 363, 366, 367, 369, 370, 377, 394, 397, 398, 399, 400, 401, 403, 404, 407, 409, 410, 414, 417, 453, 459, 507, 508, 509, 510, 514, 515, 516, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 567, 582, 583, 590, 647, 654, 655, 662, 666, 668, 680, 687, 706, 728, 729, 735, 737, 741, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 774, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 821, 855, 856, 857, 858, 888, 902, 905, 910, 911, 931, 933, 934, 935, 945, 947, 951, 964, 966, 972, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "dx": [12, 13, 476, 649], "dy": [12, 649], "this_dx": 12, "argmin": [12, 110, 234, 339, 364, 481, 487, 495, 496, 635, 728, 729, 947], "this_di": 12, "horizontalalign": [12, 24, 28, 36, 40, 41, 57, 92, 206, 221, 268, 275], "002": [12, 334], "verticalalign": [12, 24, 35, 36], "edgecolor": [12, 15, 22, 27, 28, 31, 38, 41, 51, 55, 62, 81, 82, 83, 92, 101, 107, 114, 116, 117, 119, 120, 126, 128, 136, 137, 139, 143, 152, 162, 171, 181, 188, 191, 192, 193, 210, 211, 212, 213, 221, 224, 235, 238, 249, 256, 259, 260, 261, 264, 268, 275, 276, 278, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 308, 315, 316, 317, 581], "ptp": 12, "03": [12, 48, 85, 221, 227, 288, 334, 370, 697, 746, 927, 931], "plot_stock_market": 12, "parallel": [13, 97, 103, 107, 148, 152, 181, 236, 281, 282, 284, 303, 318, 322, 329, 337, 338, 340, 341, 348, 350, 363, 371, 373, 374, 388, 395, 398, 399, 400, 402, 407, 408, 411, 414, 417, 422, 445, 481, 483, 484, 485, 487, 489, 491, 492, 493, 495, 496, 498, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 539, 544, 552, 560, 582, 584, 589, 608, 638, 639, 640, 641, 642, 643, 644, 723, 727, 730, 746, 749, 750, 752, 757, 760, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 807, 810, 842, 843, 899, 901, 952, 961, 966, 968, 972, 975, 976, 977, 978, 980, 981, 982, 983, 984, 987], "acquir": [13, 106, 237, 984], "angl": [13, 31, 88, 221, 222, 223, 226, 227, 334, 367, 481, 487, 489, 492, 493, 495, 496, 498, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 628, 632, 633, 634, 635, 636, 642, 928, 929, 953, 968, 972], "Such": [13, 114, 135, 140, 150, 158, 168, 180, 238, 310, 350, 351, 366, 367, 369, 505, 506, 606, 921, 931, 934, 941, 947, 964, 982, 987], "ct": [13, 143, 219, 363, 414, 416, 417], "cellular": 13, "materi": [13, 351, 531, 837, 838, 950], "haar": 13, "wavelet": [13, 95, 367], "sparsiti": [13, 75, 148, 157, 172, 194, 195, 212, 311, 323, 350, 364, 367, 369, 371, 451, 452, 477, 481, 487, 488, 489, 490, 493, 495, 496, 497, 596, 602, 607, 608, 626, 628, 671, 672, 673, 817, 823, 828, 832, 924, 927, 934, 941, 960, 965, 974], "oper": [13, 18, 143, 148, 212, 228, 232, 242, 312, 323, 324, 334, 335, 337, 340, 343, 348, 350, 351, 353, 356, 358, 366, 367, 369, 370, 371, 375, 398, 411, 418, 425, 432, 433, 434, 435, 454, 483, 484, 491, 501, 502, 516, 522, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 566, 571, 574, 580, 585, 593, 608, 639, 643, 652, 656, 657, 658, 676, 723, 730, 731, 737, 738, 765, 774, 777, 788, 789, 811, 815, 820, 830, 831, 845, 852, 855, 886, 899, 904, 927, 934, 941, 946, 951, 955, 964, 976, 978, 979, 980, 982, 983, 988], "fidel": 13, "penal": [13, 27, 75, 118, 168, 172, 179, 195, 197, 278, 306, 362, 364, 367, 371, 419, 420, 421, 422, 423, 424, 425, 426, 428, 597, 602, 603, 611, 613, 626, 655, 665, 683, 735, 742, 821, 847, 854, 927, 931, 933, 935, 945, 946, 964], "account": [13, 87, 94, 140, 146, 151, 197, 235, 262, 306, 308, 311, 323, 333, 337, 350, 351, 356, 362, 365, 366, 367, 369, 370, 413, 517, 518, 577, 578, 580, 582, 583, 599, 623, 629, 654, 657, 677, 678, 679, 687, 692, 705, 732, 733, 736, 737, 747, 751, 764, 923, 925, 929, 931, 932, 933, 934, 945, 947, 977, 979, 980, 981, 984, 985, 987], "call": [13, 16, 42, 44, 46, 65, 83, 104, 110, 130, 135, 150, 152, 167, 179, 180, 197, 216, 218, 219, 235, 236, 244, 249, 250, 253, 255, 278, 282, 283, 311, 312, 318, 323, 324, 325, 332, 335, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 353, 360, 362, 363, 364, 365, 366, 367, 369, 370, 372, 374, 383, 391, 394, 397, 399, 400, 401, 402, 403, 404, 407, 410, 412, 414, 415, 418, 419, 424, 432, 433, 434, 438, 441, 442, 445, 447, 453, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 527, 532, 533, 535, 536, 538, 539, 541, 547, 552, 557, 558, 560, 561, 564, 567, 570, 577, 578, 579, 580, 581, 582, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 639, 640, 641, 642, 643, 644, 645, 647, 649, 651, 654, 681, 691, 704, 720, 723, 727, 728, 729, 730, 740, 744, 745, 746, 748, 749, 750, 751, 752, 758, 760, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 793, 794, 797, 799, 804, 805, 806, 807, 808, 811, 812, 813, 815, 817, 818, 820, 825, 828, 831, 836, 837, 838, 839, 840, 844, 847, 848, 849, 850, 852, 853, 856, 858, 874, 878, 883, 884, 897, 898, 899, 902, 905, 915, 920, 921, 923, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 939, 941, 943, 944, 946, 947, 951, 955, 957, 961, 964, 965, 966, 968, 969, 972, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "algorithm": [13, 16, 17, 26, 32, 33, 38, 39, 41, 42, 51, 52, 56, 57, 61, 72, 77, 85, 87, 98, 99, 100, 101, 148, 156, 166, 168, 182, 195, 201, 203, 205, 209, 215, 222, 223, 224, 227, 232, 235, 244, 253, 259, 260, 262, 266, 273, 275, 278, 280, 281, 282, 285, 297, 310, 311, 319, 323, 325, 330, 331, 332, 333, 334, 337, 338, 339, 340, 345, 346, 349, 350, 352, 358, 359, 361, 362, 364, 365, 366, 367, 369, 370, 372, 373, 374, 375, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 419, 424, 425, 428, 432, 433, 434, 438, 453, 461, 462, 463, 464, 465, 472, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 494, 495, 496, 497, 498, 503, 504, 505, 506, 509, 510, 513, 541, 553, 554, 560, 561, 585, 587, 589, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 624, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 654, 655, 658, 667, 669, 684, 686, 692, 723, 727, 728, 740, 742, 744, 745, 776, 785, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 804, 809, 813, 815, 828, 831, 843, 847, 848, 849, 850, 851, 852, 853, 855, 856, 867, 883, 884, 886, 896, 900, 906, 921, 923, 926, 928, 929, 931, 933, 936, 937, 941, 944, 945, 946, 950, 951, 952, 953, 955, 957, 960, 961, 963, 965, 966, 968, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "computation": [13, 71, 85, 110, 118, 135, 253, 310, 322, 338, 361, 362, 363, 366, 367, 369, 372, 488, 582, 583, 621, 712, 746, 748, 749, 750, 760, 771, 927, 928, 930, 938, 939, 943, 965, 968, 976], "comparison": [13, 18, 21, 26, 32, 38, 44, 72, 84, 86, 87, 111, 116, 121, 127, 134, 148, 153, 161, 165, 167, 170, 177, 194, 198, 201, 205, 209, 223, 228, 230, 232, 252, 268, 275, 277, 278, 280, 282, 292, 295, 309, 311, 319, 332, 334, 350, 360, 364, 365, 367, 371, 388, 394, 397, 399, 438, 454, 462, 464, 465, 472, 475, 491, 499, 500, 503, 514, 531, 532, 538, 539, 540, 541, 556, 558, 560, 561, 565, 572, 575, 589, 593, 608, 622, 638, 639, 640, 641, 642, 654, 687, 692, 728, 737, 746, 749, 760, 762, 774, 783, 786, 790, 805, 809, 817, 818, 820, 824, 825, 826, 828, 832, 833, 834, 835, 836, 837, 838, 847, 849, 850, 852, 853, 855, 920, 925, 928, 931, 933, 934, 937, 946, 969], "l2": [13, 27, 36, 75, 77, 148, 157, 164, 170, 179, 190, 194, 195, 197, 236, 253, 273, 291, 310, 311, 339, 346, 348, 362, 364, 367, 370, 392, 396, 400, 407, 474, 488, 490, 497, 508, 511, 512, 515, 539, 540, 541, 593, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 618, 619, 622, 626, 628, 630, 631, 636, 637, 638, 684, 699, 710, 711, 727, 728, 729, 760, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 805, 806, 820, 828, 834, 847, 848, 852, 853, 854, 856, 858, 914, 920, 924, 927, 929, 934, 935, 941, 945, 947, 964, 966, 974, 976, 977, 979, 981], "produc": [13, 23, 24, 40, 52, 64, 88, 111, 112, 113, 114, 241, 271, 290, 319, 332, 333, 337, 339, 342, 350, 351, 362, 363, 366, 367, 369, 391, 394, 402, 469, 486, 509, 513, 531, 538, 543, 544, 582, 583, 748, 749, 750, 758, 763, 766, 769, 813, 823, 849, 852, 922, 923, 927, 929, 930, 931, 934, 937, 938, 942, 944, 945, 946, 957, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "circular": 13, "separ": [13, 22, 23, 27, 28, 36, 55, 57, 61, 67, 73, 84, 85, 90, 99, 101, 104, 106, 116, 147, 148, 152, 153, 156, 157, 180, 200, 213, 223, 235, 238, 244, 245, 273, 275, 278, 282, 290, 293, 298, 302, 303, 310, 319, 323, 333, 334, 339, 342, 345, 348, 350, 360, 362, 363, 364, 367, 369, 370, 372, 414, 462, 469, 483, 488, 490, 491, 497, 499, 531, 538, 539, 541, 560, 588, 596, 597, 623, 626, 627, 640, 644, 674, 681, 694, 695, 697, 702, 739, 765, 780, 781, 807, 808, 849, 851, 852, 857, 858, 920, 921, 923, 925, 927, 928, 930, 937, 938, 941, 945, 946, 962, 964, 965, 972, 975, 977, 978, 982, 984, 985], "central": [13, 181, 362, 937, 951], "emmanuel": [13, 61, 972, 979, 980, 981], "gouillart": [13, 61, 972], "nsup": 13, "ndimag": [13, 42, 43, 50, 271, 965], "_weight": [13, 197], "orig": 13, "floor_x": 13, "floor": 13, "astyp": [13, 33, 37, 40, 41, 49, 55, 57, 61, 74, 92, 108, 110, 126, 150, 169, 170, 197, 202, 212, 215, 246, 253, 370, 921, 927, 979], "int64": [13, 318, 350, 370, 380, 393, 398, 400, 538, 590, 664, 665, 784, 980, 983, 985, 987], "hstack": [13, 30, 31, 38, 120, 129, 204, 214, 230, 301, 366, 807], "_generate_center_coordin": 13, "l_x": 13, "mgrid": [13, 126, 302], "build_projection_oper": 13, "n_dir": 13, "endpoint": [13, 274, 301, 585], "data_ind": 13, "weight": [13, 14, 18, 22, 50, 64, 96, 99, 111, 119, 120, 129, 147, 148, 151, 157, 168, 170, 179, 183, 184, 193, 194, 195, 197, 217, 221, 238, 242, 244, 256, 265, 267, 268, 271, 278, 280, 283, 293, 300, 310, 311, 312, 319, 333, 334, 346, 348, 350, 362, 364, 365, 367, 368, 371, 373, 379, 383, 388, 391, 394, 395, 397, 399, 403, 409, 413, 414, 415, 417, 419, 424, 432, 433, 434, 446, 465, 474, 488, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 536, 539, 540, 541, 543, 547, 552, 553, 560, 561, 578, 584, 585, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 637, 639, 643, 647, 648, 649, 650, 652, 653, 657, 658, 659, 662, 663, 666, 668, 670, 671, 672, 673, 675, 676, 677, 678, 679, 683, 684, 685, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 707, 708, 718, 731, 732, 733, 734, 736, 737, 738, 741, 742, 743, 744, 745, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 804, 805, 806, 807, 810, 813, 827, 828, 842, 843, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 872, 873, 886, 906, 912, 921, 922, 927, 928, 930, 931, 933, 934, 935, 936, 938, 944, 945, 946, 947, 952, 957, 964, 966, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "camera_ind": 13, "data_unravel_indic": 13, "xrot": 13, "ind": [13, 38, 110, 120, 311, 788, 789], "mask": [13, 38, 61, 106, 179, 187, 233, 234, 291, 346, 350, 363, 369, 419, 424, 511, 512, 531, 535, 536, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 579, 580, 582, 583, 599, 621, 746, 749, 750, 760, 903, 921, 938, 972, 975, 977, 978, 980, 982], "logical_and": [13, 111], "proj_oper": 13, "coo_matrix": [13, 165, 402, 535, 536, 902, 905], "generate_synthetic_data": 13, "n_pt": 13, "36": [13, 87, 141, 301, 334, 343, 369, 370, 505, 506, 520, 684, 931, 966, 972], "ogrid": 13, "mask_out": 13, "rand": [13, 22, 33, 34, 35, 36, 40, 45, 53, 57, 93, 102, 115, 117, 128, 158, 201, 202, 206, 212, 249, 265, 281, 282, 291, 292, 305, 306, 311, 316, 317, 346, 494, 654, 655, 665, 706, 730, 735, 839, 840, 842, 843, 844, 943, 957, 972, 983, 984], "gaussian_filt": [13, 42, 43, 50, 965], "sigma": [13, 42, 43, 50, 73, 93, 111, 233, 235, 359, 364, 367, 369, 564, 599, 925, 927, 929, 933, 936, 965], "logical_xor": [13, 139, 304], "binary_eros": 13, "128": [13, 14, 179, 323, 486], "proj": [13, 599], "randn": [13, 30, 31, 35, 50, 60, 61, 73, 74, 88, 93, 114, 128, 135, 139, 150, 153, 163, 168, 173, 174, 178, 192, 193, 196, 222, 225, 226, 230, 242, 244, 245, 249, 259, 260, 281, 282, 297, 303, 304, 306, 308, 339, 342, 593, 620, 622, 628, 767, 850, 853], "rgr_ridg": 13, "rec_l2": 13, "cross": [13, 50, 53, 65, 68, 71, 75, 93, 107, 108, 110, 111, 122, 127, 131, 133, 151, 152, 157, 167, 179, 181, 197, 223, 224, 226, 228, 232, 235, 236, 237, 239, 241, 244, 249, 250, 257, 271, 274, 280, 282, 290, 298, 306, 326, 332, 339, 340, 346, 348, 349, 350, 356, 357, 360, 363, 364, 367, 369, 370, 371, 372, 388, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 443, 451, 452, 454, 465, 491, 517, 518, 525, 543, 544, 547, 552, 556, 559, 592, 593, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 622, 623, 624, 625, 626, 628, 629, 631, 632, 633, 634, 635, 636, 651, 656, 663, 677, 690, 734, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 779, 782, 808, 809, 828, 847, 849, 852, 890, 930, 931, 934, 935, 939, 946, 947, 951, 952, 953, 955, 957, 960, 968, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986], "lassocv": [13, 118, 123, 151, 168, 369, 371, 601, 602, 604, 605, 606, 613, 634, 927, 961, 972, 975, 979, 982, 983, 985, 986], "rgr_lasso": 13, "rec_l1": 13, "131": [13, 51, 99, 343, 931, 973], "interpol": [13, 29, 36, 46, 47, 50, 53, 75, 80, 85, 88, 139, 142, 148, 157, 170, 195, 209, 214, 244, 257, 265, 271, 288, 298, 304, 372, 585, 595, 603, 613, 622, 634, 650, 657, 791, 799, 809, 823, 827, 922, 927, 931, 941, 979, 984], "132": [13, 51, 99, 369], "133": [13, 51, 99], "wspace": [13, 14, 35, 40, 41, 57, 73, 85, 99, 101, 179, 197, 206, 221, 223, 224, 227, 258, 266, 288, 295], "plot_tomography_l1_reconstruct": 13, "nmf": [14, 66, 343, 361, 370, 485, 488, 494, 497, 967, 968, 972, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988], "latentdirichletalloc": [14, 325, 342, 367, 951, 977, 979, 986, 987], "corpu": [14, 311, 312, 332, 367, 538, 539, 540, 541, 966, 973], "frobeniu": [14, 88, 394, 397, 409, 419, 420, 421, 422, 423, 424, 425, 426, 481, 487, 488, 490, 495, 496, 497, 927, 979], "kullback": [14, 199, 367, 488, 490, 497, 642, 928, 979], "leibler": [14, 199, 367, 488, 490, 497, 642, 928, 979], "diverg": [14, 110, 199, 204, 258, 488, 490, 497, 642, 804, 928, 930, 931, 936, 938, 979, 980, 985], "probabilist": [14, 25, 27, 75, 84, 134, 135, 138, 142, 148, 310, 350, 360, 368, 369, 388, 423, 426, 482, 484, 485, 491, 509, 538, 539, 560, 572, 593, 595, 626, 653, 690, 746, 770, 815, 849, 850, 852, 853, 924, 925, 927, 930, 931, 936, 941, 946, 947, 951, 955, 972, 975, 979], "semant": [14, 310, 311, 350, 494, 966, 967, 968, 974], "runnabl": [14, 341, 342], "coupl": [14, 48, 49, 200, 331, 332, 359, 360, 362, 371, 539, 853, 920, 946], "ten": [14, 18, 99, 200, 227, 332, 334, 369, 470, 852, 981], "polynomi": [14, 146, 148, 155, 157, 179, 185, 217, 235, 249, 282, 283, 295, 302, 305, 329, 333, 402, 441, 570, 589, 590, 591, 593, 622, 714, 723, 724, 774, 809, 818, 820, 823, 827, 847, 849, 850, 851, 852, 853, 926, 946, 953, 968, 984, 985], "lda": [14, 30, 31, 84, 148, 262, 319, 334, 358, 454, 486, 491, 499, 500, 797, 951, 953, 967, 968, 977], "proport": [14, 24, 36, 132, 165, 179, 186, 192, 206, 238, 260, 263, 308, 323, 332, 360, 362, 364, 366, 367, 369, 370, 389, 390, 419, 424, 465, 499, 500, 505, 507, 509, 510, 511, 512, 513, 514, 533, 534, 538, 541, 577, 582, 608, 609, 616, 617, 618, 624, 625, 626, 628, 646, 651, 662, 747, 748, 749, 750, 763, 766, 774, 794, 805, 806, 822, 847, 848, 849, 852, 853, 855, 857, 859, 861, 873, 920, 930, 931, 934, 937, 945, 946, 947, 977], "ensta": [14, 16, 33, 44, 56, 179, 197, 200, 236, 238, 310, 311, 312], "chyi": [14, 975, 976, 977, 978, 979], "kwei": [14, 975, 976, 977, 978, 979], "yau": [14, 975, 976, 977, 978, 979], "chyikwei": 14, "tfidfvector": [14, 18, 64, 236, 310, 332, 367, 370, 439, 538, 539, 540, 972, 974, 980, 981, 982, 985, 986], "countvector": [14, 291, 312, 332, 342, 363, 367, 370, 439, 486, 532, 539, 540, 541, 966, 972, 974, 977, 980, 981, 982, 983, 984, 985], "minibatchnmf": [14, 325, 367, 986, 988], "fetch_20newsgroup": [14, 18, 64, 236, 291, 310, 311, 312, 332, 439, 966, 977, 982], "2000": [14, 24, 36, 69, 86, 93, 109, 156, 224, 227, 235, 268, 284, 311, 332, 334, 362, 363, 369, 374, 402, 412, 483, 484, 509, 639, 641, 643, 692, 737, 744, 794, 824, 835, 928, 931, 937, 943, 957, 965], "n_top_word": 14, "batch_siz": [14, 18, 38, 59, 85, 88, 89, 311, 367, 399, 484, 486, 487, 488, 489, 496, 804, 805, 806, 887, 888, 897, 973, 980, 983, 985, 986], "init": [14, 38, 41, 53, 54, 56, 59, 152, 159, 199, 200, 202, 203, 204, 224, 253, 311, 340, 345, 362, 367, 369, 394, 397, 399, 401, 403, 409, 410, 488, 490, 497, 498, 509, 510, 582, 583, 640, 642, 644, 797, 928, 972, 981, 984, 986, 987], "nndsvda": [14, 367, 488, 490, 497, 981, 984], "plot_top_word": 14, "feature_nam": [14, 18, 96, 105, 112, 115, 133, 151, 153, 154, 188, 216, 256, 273, 280, 281, 282, 295, 310, 315, 330, 332, 342, 363, 440, 441, 442, 446, 450, 451, 452, 454, 455, 460, 532, 581, 582, 583, 859, 860, 861, 939, 947], "flatten": [14, 29, 202, 211, 233, 277, 295, 307, 343, 452, 519, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 797], "topic_idx": 14, "top_features_ind": 14, "argsort": [14, 16, 18, 19, 20, 110, 112, 153, 154, 179, 197, 280, 287, 288, 310, 311, 332, 939], "top_featur": 14, "barh": [14, 112, 146, 147, 150, 151, 153, 154, 219, 310, 311, 312], "fontdict": [14, 35], "invert_yaxi": [14, 147, 312], "labels": [14, 277], "set_vis": [14, 257, 263, 273], "40": [14, 50, 61, 71, 81, 85, 91, 114, 120, 135, 170, 171, 173, 196, 201, 203, 213, 225, 236, 259, 265, 270, 287, 288, 296, 297, 299, 301, 303, 305, 324, 332, 366, 445, 467, 468, 788, 789, 793, 805, 806, 920, 932, 941, 972, 973], "filter": [14, 42, 43, 185, 197, 233, 235, 255, 310, 339, 343, 346, 361, 362, 370, 398, 438, 439, 453, 538, 541, 545, 546, 547, 548, 723, 783, 876, 896, 933, 934, 963, 966, 982], "useless": [14, 107, 238, 343, 371, 465, 478, 608, 662, 927, 941, 981], "earli": [14, 40, 57, 97, 99, 107, 148, 157, 281, 350, 369, 392, 396, 399, 413, 446, 454, 465, 470, 486, 487, 488, 489, 496, 503, 504, 509, 510, 511, 512, 521, 577, 606, 616, 617, 618, 626, 628, 642, 774, 805, 806, 905, 928, 934, 941, 950, 952, 955, 972, 975, 976, 978, 979, 980, 981, 982, 983, 986, 987], "strip": [14, 197, 311, 323, 331, 332, 446], "header": [14, 64, 236, 310, 311, 332, 335, 370, 438, 439, 746, 749, 750, 760], "footer": [14, 64, 236, 310, 311, 332, 438, 439], "repli": [14, 336, 337, 340], "common": [14, 16, 18, 88, 130, 133, 148, 149, 230, 242, 282, 310, 312, 318, 323, 326, 331, 337, 339, 345, 348, 349, 352, 353, 359, 360, 361, 362, 363, 366, 368, 371, 372, 415, 417, 446, 540, 582, 603, 622, 623, 695, 702, 718, 761, 771, 774, 809, 811, 819, 820, 821, 826, 828, 832, 833, 835, 836, 837, 838, 886, 920, 921, 927, 934, 937, 941, 946, 947, 951, 952, 955, 957, 968, 972, 980, 982, 983, 987], "english": [14, 18, 310, 311, 312, 342, 370, 538, 539, 541, 951, 952, 966, 985], "occur": [14, 64, 179, 197, 319, 337, 339, 345, 351, 359, 362, 364, 366, 370, 458, 459, 522, 531, 538, 540, 541, 577, 621, 745, 746, 749, 750, 752, 760, 770, 771, 772, 775, 872, 931, 933, 941, 966, 972, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "95": [14, 27, 40, 48, 52, 62, 82, 91, 92, 107, 111, 142, 158, 181, 186, 223, 224, 227, 235, 236, 258, 266, 275, 284, 298, 319, 369, 477, 582, 583, 586, 597, 611, 697, 844, 927, 931, 932, 944, 966, 975], "data_sampl": 14, "tf": [14, 18, 210, 310, 311, 312, 332, 367, 471, 494, 538, 539, 540, 541, 787, 795, 820, 920, 929, 933, 941, 951, 966], "idf": [14, 18, 210, 310, 311, 312, 332, 367, 471, 494, 538, 539, 540, 541, 787, 795, 820, 920, 929, 933, 941, 966, 972], "tfidf_vector": 14, "max_df": [14, 236, 291, 310, 311, 538, 541, 983], "min_df": [14, 18, 64, 236, 291, 310, 311, 370, 538, 541, 972, 974, 983], "max_featur": [14, 28, 103, 113, 214, 232, 247, 282, 369, 371, 505, 506, 507, 508, 509, 510, 513, 514, 515, 538, 541, 547, 855, 856, 857, 858, 920, 927, 972, 974, 975, 979, 980, 983, 986], "stop_word": [14, 18, 310, 311, 370, 538, 539, 541], "tfidf": [14, 64, 291, 370, 541, 966], "tf_vector": 14, "beta_loss": [14, 488, 490, 497, 979], "alpha_w": [14, 367, 488, 490, 497, 985], "00005": 14, "alpha_h": [14, 367, 488, 490, 497, 985], "tfidf_feature_nam": 14, "get_feature_names_out": [14, 18, 151, 153, 283, 310, 311, 312, 332, 339, 350, 363, 370, 378, 382, 384, 393, 394, 396, 397, 399, 414, 417, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 516, 517, 518, 519, 520, 531, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 638, 639, 642, 792, 797, 800, 804, 807, 808, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 941, 985, 986, 987, 988], "solver": [14, 27, 30, 31, 42, 61, 148, 157, 168, 170, 171, 172, 179, 181, 194, 195, 197, 268, 269, 270, 271, 310, 343, 348, 350, 353, 358, 362, 374, 402, 412, 421, 422, 428, 452, 483, 485, 490, 491, 494, 497, 499, 596, 597, 598, 602, 603, 608, 609, 610, 611, 612, 613, 616, 618, 619, 620, 622, 624, 626, 630, 631, 634, 637, 638, 639, 641, 643, 645, 737, 760, 774, 779, 782, 805, 806, 849, 850, 851, 852, 853, 925, 928, 931, 935, 945, 946, 951, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "mu": [14, 73, 74, 235, 367, 375, 423, 425, 426, 429, 430, 431, 490, 497, 925, 927, 979, 982], "mbnmf": 14, "learning_method": [14, 342, 486], "learning_offset": [14, 486], "tf_feature_nam": 14, "plot_topics_extraction_with_nmf_lda": 14, "graphic": [15, 18, 74, 152, 291, 310, 311, 312, 332, 343, 361, 362, 364, 367, 739, 740, 744, 778, 859, 931, 932, 938, 951, 966], "frontend": [15, 343], "mainli": [15, 25, 49, 102, 135, 244, 323, 339, 360, 561, 933, 938], "intend": [15, 52, 53, 89, 180, 310, 337, 338, 339, 344, 348, 366, 418, 532, 623, 649, 817, 818, 828, 845, 926, 927, 931, 935, 942], "didact": [15, 337, 952], "click": [15, 208, 217, 236, 281, 337, 345, 955, 957, 959], "region": [15, 23, 32, 43, 45, 49, 51, 61, 119, 142, 148, 151, 179, 197, 206, 210, 211, 227, 276, 298, 334, 344, 350, 362, 369, 372, 398, 400, 406, 412, 537, 928, 931, 934, 937, 945, 947, 965], "induc": [15, 24, 51, 151, 170, 172, 177, 180, 194, 212, 312, 359, 361, 367, 369, 372, 399, 489, 493, 503, 507, 508, 509, 510, 514, 515, 516, 593, 675, 705, 821, 855, 856, 857, 858, 924, 931, 945, 964], "mous": [15, 331], "button": [15, 337, 345, 964], "prettenho": 15, "tkagg": 15, "backend": [15, 324, 350, 418, 845, 897, 899, 901, 931, 975, 980, 981, 982, 983], "backend_tkagg": 15, "figurecanvastkagg": 15, "navigationtoolbar2tk": 15, "navigationtoolbar2tkagg": 15, "deprec": [15, 283, 326, 340, 341, 346, 350, 374, 388, 392, 396, 397, 399, 400, 407, 409, 476, 483, 486, 487, 489, 496, 503, 504, 505, 506, 507, 508, 514, 515, 519, 520, 529, 530, 532, 552, 577, 580, 582, 583, 588, 600, 601, 604, 605, 606, 608, 614, 615, 621, 642, 649, 690, 705, 717, 727, 728, 729, 749, 750, 783, 784, 785, 787, 795, 807, 813, 821, 849, 850, 851, 852, 853, 855, 856, 857, 858, 863, 878, 879, 881, 892, 920, 921, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988], "contourset": 15, "tkinter": 15, "tk": 15, "dump_svmlight_fil": [15, 972, 973, 977, 987], "y_min": [15, 28, 31, 53, 81, 101, 107, 116, 126, 137, 211, 268, 275, 292, 302, 303, 585, 587], "y_max": [15, 28, 31, 53, 81, 101, 107, 116, 126, 137, 197, 211, 268, 275, 292, 302, 303, 585, 587], "x_min": [15, 28, 31, 48, 53, 81, 101, 107, 111, 116, 126, 137, 168, 211, 268, 275, 292, 302, 303], "x_max": [15, 28, 31, 48, 53, 81, 101, 107, 116, 126, 137, 211, 268, 275, 292, 302, 303], "notifi": [15, 522, 523, 524, 954, 970, 982], "regist": [15, 310, 343, 899, 901], "surfac": [15, 97, 148, 171, 188, 294, 295, 313, 369, 454, 503, 507, 514, 713, 855, 861, 925, 930, 945, 946, 947], "surface_typ": 15, "add_observ": 15, "set_surfac": 15, "intvar": 15, "coef0": [15, 156, 305, 402, 485, 589, 590, 593, 724, 726, 849, 850, 851, 852, 853, 929, 946], "kernel_map": 15, "hasattr": [15, 40, 51, 57, 75, 107, 197, 210, 268, 275, 310, 350, 891, 892, 982], "decision_surfac": 15, "delta": [15, 365, 402], "clear_data": 15, "add_exampl": 15, "example_ad": 15, "refit": [15, 105, 123, 148, 228, 234, 236, 239, 350, 366, 372, 452, 517, 577, 609, 615, 663, 746, 749, 750, 760, 774, 852, 920, 927, 931, 979, 980, 981], "docstr": [15, 337, 339, 343, 350, 398, 411, 422, 649, 651, 874, 920, 931, 934, 935, 945, 972, 979, 980, 985, 986], "set_xlim": [15, 28, 38, 55, 69, 73, 83, 104, 116, 147, 152, 177, 179, 184, 211, 221, 239, 241, 242, 258, 268, 273, 275, 276, 277, 278, 281, 307], "attributeerror": [15, 363, 509, 527, 891, 965, 981, 982, 984], "get_tk_widget": 15, "pack": [15, 346, 980], "fill": [15, 31, 107, 123, 153, 230, 258, 315, 350, 363, 367, 465, 477, 488, 490, 497, 537, 580, 859, 861, 921, 934, 947], "_tkcanva": 15, "mpl_connect": 15, "button_press_ev": 15, "onclick": 15, "toolbar": 15, "controllbar": 15, "c_label": 15, "plot_kernel": 15, "60": [15, 54, 67, 75, 191, 199, 200, 224, 248, 301, 310, 331, 362, 366, 400, 407, 663, 746, 931, 941, 962, 972, 975], "exp": [15, 42, 50, 61, 91, 95, 102, 111, 136, 163, 189, 258, 263, 266, 281, 282, 360, 362, 363, 368, 374, 402, 415, 471, 483, 486, 565, 566, 572, 591, 708, 715, 725, 805, 806, 824, 925, 927, 929, 933, 934, 935, 944, 945, 946, 964], "xdata": 15, "ydata": 15, "update_exampl": 15, "scalex": 15, "scalei": 15, "examples_load": 15, "remove_surfac": 15, "plot_support_vector": 15, "plot_decision_surfac": 15, "old": [15, 197, 337, 343, 362, 486, 596, 602, 928, 952, 954, 972, 977, 978, 980, 985, 986, 987], "isinst": [15, 107, 197, 350], "lineset": 15, "support_vector": [15, 296], "place": [15, 55, 207, 216, 257, 323, 335, 337, 338, 339, 342, 344, 351, 370, 372, 392, 396, 432, 433, 434, 465, 531, 540, 578, 580, 581, 717, 730, 744, 910, 911, 951, 972, 979, 982, 983, 985], "circl": [15, 55, 90, 116, 117, 126, 204, 213, 260, 263, 269, 273, 275, 289, 317, 333, 341, 345, 362, 402, 412, 464, 472, 713, 946], "dash": [15, 30, 73, 99, 110, 120, 135, 138, 140, 151, 166, 171, 174, 180, 181, 188, 191, 192, 215, 235, 245, 300, 304, 945], "bone": [15, 192, 308], "85": [15, 16, 46, 88, 194, 246, 271, 288, 319, 369, 390, 450, 505, 506, 547, 602, 608, 694, 702, 737, 746, 772, 931, 932, 962, 972], "rais": [15, 180, 213, 238, 277, 283, 337, 339, 341, 342, 343, 346, 348, 350, 356, 363, 366, 374, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 459, 483, 500, 509, 517, 523, 526, 527, 538, 539, 541, 553, 567, 579, 580, 582, 585, 586, 621, 646, 648, 649, 652, 659, 661, 662, 663, 664, 676, 678, 679, 687, 705, 727, 731, 732, 733, 736, 737, 738, 744, 745, 746, 749, 750, 752, 760, 770, 771, 772, 775, 780, 795, 797, 798, 803, 807, 812, 813, 821, 822, 826, 827, 828, 834, 850, 851, 852, 853, 862, 865, 867, 868, 870, 871, 888, 891, 915, 916, 917, 918, 931, 941, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "valueerror": [15, 213, 339, 343, 374, 418, 483, 527, 553, 567, 585, 621, 664, 780, 798, 807, 813, 827, 866, 870, 871, 916, 917, 918, 931, 941, 974, 975, 976, 979, 980, 981, 982, 983, 984, 985, 986], "fm": 15, "kernel_group": 15, "radiobutton": 15, "command": [15, 210, 323, 324, 335, 337, 341, 343, 345, 353, 370, 458, 951, 966, 974], "anchor": [15, 246], "valbox": 15, "stringvar": 15, "textvari": 15, "cmap_group": 15, "hyperplan": [15, 148, 157, 171, 188, 213, 238, 293, 295, 298, 303, 462, 608, 609, 616, 618, 624, 625, 626, 627, 847, 849, 851, 852, 945, 946], "train_button": 15, "get_pars": 15, "optpars": 15, "optionpars": 15, "op": [15, 341, 608, 609, 616, 618, 626, 627, 628, 805, 806, 847, 941], "add_opt": 15, "action": [15, 283, 336, 340, 341, 353, 941, 982], "store": [15, 29, 49, 64, 66, 74, 81, 130, 143, 156, 165, 168, 200, 207, 216, 226, 240, 244, 287, 312, 318, 323, 331, 332, 337, 339, 344, 345, 346, 348, 350, 363, 365, 367, 369, 370, 372, 373, 389, 391, 395, 400, 407, 419, 420, 423, 424, 425, 426, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 453, 458, 484, 485, 491, 499, 500, 505, 506, 513, 519, 520, 539, 560, 561, 577, 581, 582, 585, 588, 599, 600, 604, 610, 611, 612, 613, 616, 617, 623, 625, 626, 627, 628, 638, 639, 640, 642, 647, 648, 650, 651, 652, 730, 744, 745, 746, 752, 760, 788, 789, 790, 791, 792, 794, 796, 797, 798, 799, 800, 803, 819, 826, 828, 842, 843, 844, 867, 868, 902, 905, 921, 923, 927, 934, 943, 946, 947, 951, 957, 966, 969, 972, 973, 974, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988], "dest": 15, "dump": [15, 16, 356, 437, 788, 789], "argv": [15, 210], "opt": [15, 335, 339], "arg": [15, 269, 338, 350, 367, 369, 376, 521, 522, 523, 524, 525, 526, 527, 528, 567, 649, 812, 927, 933, 934], "parse_arg": 15, "wm_titl": 15, "mainloop": 15, "__main__": [15, 291, 348], "svm_gui": [15, 964], "classic": [16, 174, 203, 215, 221, 227, 334, 341, 364, 366, 367, 394, 397, 399, 409, 442, 450, 454, 460, 582, 583, 857, 858, 925, 927, 933, 960, 972, 973, 977, 986], "graph": [16, 23, 35, 40, 42, 61, 62, 143, 199, 232, 253, 255, 290, 323, 337, 340, 350, 359, 364, 373, 392, 395, 396, 402, 403, 407, 412, 413, 421, 422, 428, 461, 535, 536, 638, 641, 642, 645, 731, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 803, 843, 928, 931, 934, 936, 944, 947, 951, 955, 962, 965, 972, 979, 980, 982, 985, 987], "vertex": [16, 24, 403, 985], "en": [16, 22, 345, 481, 487, 545, 586, 614, 618, 621, 635, 636, 645, 655, 790, 791, 796, 797, 798, 799, 826, 841, 855, 856, 927, 931, 946, 947], "wiki": [16, 22, 343, 345, 545, 586, 618, 621, 645, 655, 790, 791, 796, 797, 798, 799, 826, 841, 855, 856, 927, 947], "eigenvector_centr": 16, "webpag": [16, 156, 337], "pagerank": 16, "insid": [16, 18, 24, 152, 181, 235, 289, 298, 325, 331, 332, 339, 343, 362, 370, 538, 539, 541, 827, 899, 938, 955], "accord": [16, 22, 24, 33, 45, 71, 110, 133, 136, 162, 179, 197, 210, 280, 311, 319, 337, 339, 348, 349, 350, 351, 359, 362, 364, 366, 367, 369, 370, 372, 388, 400, 402, 406, 410, 412, 415, 419, 454, 466, 467, 468, 475, 480, 482, 485, 486, 488, 490, 500, 503, 504, 511, 512, 513, 516, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 591, 592, 594, 595, 599, 608, 609, 620, 630, 641, 645, 684, 728, 729, 746, 747, 748, 749, 750, 753, 754, 755, 760, 769, 783, 784, 785, 786, 787, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 811, 818, 826, 837, 839, 840, 847, 848, 849, 850, 852, 853, 892, 925, 927, 931, 933, 934, 941, 944, 945, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988], "tradit": [16, 179, 194, 311, 325, 360, 369, 370, 582, 644, 927, 930, 955], "power_iter": 16, "martinsson": [16, 485, 491, 884], "dbpedia": 16, "content": [16, 278, 310, 312, 332, 341, 343, 356, 361, 370, 436, 453, 458, 459, 538, 539, 541, 621, 861, 940, 955, 966, 973, 982], "bz2": [16, 458, 459], "bz2file": 16, "pprint": [16, 111, 236, 332, 879], "randomized_svd": [16, 346, 401, 403, 482, 491, 494, 496, 972, 973, 978, 985, 986, 987], "urlopen": 16, "redirects_url": 16, "redirects_en": 16, "nt": 16, "redirects_filenam": 16, "page_links_url": 16, "page_links_en": 16, "page_links_filenam": 16, "resourc": [16, 38, 111, 146, 179, 270, 282, 322, 326, 340, 349, 749, 750, 932, 949, 952, 955, 958, 968, 980, 985, 986], "wait": [16, 337, 341, 350, 616, 617, 618, 626, 628, 984], "wb": 16, "index_map": 16, "setdefault": [16, 862], "dbpedia_resource_prefix_len": 16, "shortname_slic": 16, "short_nam": 16, "nt_uri": 16, "uri": 16, "prefix": [16, 64, 236, 255, 280, 337, 341, 343, 345, 372, 378, 393, 394, 396, 397, 399, 414, 417, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 589, 590, 591, 592, 638, 639, 642, 752, 772, 792, 797, 800, 804, 808, 814, 839, 840, 978, 979, 985, 987], "get_redirect": 16, "transit": [16, 341, 983], "malform": [16, 976], "1000000": [16, 486], "08d": 16, "isoformat": 16, "closur": 16, "transitive_target": 16, "seen": [16, 23, 36, 61, 75, 88, 95, 105, 111, 151, 152, 175, 203, 209, 269, 273, 298, 310, 332, 339, 341, 349, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 378, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 471, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 573, 577, 578, 579, 580, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 744, 745, 746, 749, 750, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 906, 912, 920, 926, 934, 935, 947, 955, 961, 962, 964, 965, 984, 985, 986, 987, 988], "break": [16, 35, 42, 64, 74, 148, 168, 185, 223, 283, 288, 293, 310, 312, 337, 339, 341, 343, 349, 362, 419, 462, 589, 723, 727, 730, 744, 821, 828, 832, 849, 852, 927, 930, 939, 941, 946, 952, 972, 973, 979, 980, 982, 984, 988], "get_adjacency_matrix": 16, "resolv": [16, 336, 337, 341, 345, 351, 370, 402, 412, 641, 645, 884, 921, 931, 979, 981, 982, 985], "lil_matrix": 16, "float32": [16, 110, 202, 271, 285, 324, 332, 337, 339, 507, 508, 509, 510, 513, 514, 515, 516, 543, 544, 590, 591, 608, 712, 813, 855, 856, 857, 858, 865, 907, 908, 909, 947, 957, 966, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "del": [16, 343, 984, 985], "convert": [16, 31, 42, 44, 61, 65, 88, 140, 154, 179, 199, 218, 222, 223, 226, 227, 266, 323, 331, 346, 348, 350, 356, 370, 391, 394, 395, 397, 399, 400, 401, 402, 409, 414, 415, 446, 484, 491, 503, 504, 507, 508, 509, 510, 513, 514, 515, 516, 522, 531, 532, 538, 539, 540, 541, 543, 544, 556, 577, 578, 579, 580, 596, 602, 608, 609, 610, 612, 616, 618, 620, 624, 626, 627, 628, 642, 649, 727, 803, 812, 813, 815, 819, 821, 822, 823, 825, 847, 855, 856, 857, 858, 865, 867, 868, 890, 916, 917, 920, 927, 928, 929, 931, 941, 942, 946, 947, 966, 972, 974, 975, 976, 977, 978, 980, 982, 983, 984, 987], "csr": [16, 312, 323, 331, 332, 346, 348, 350, 370, 373, 394, 397, 399, 400, 409, 447, 458, 473, 503, 504, 507, 508, 514, 515, 516, 580, 608, 642, 649, 664, 717, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 803, 811, 815, 817, 819, 820, 823, 826, 828, 830, 831, 832, 834, 837, 840, 855, 856, 857, 858, 863, 867, 868, 890, 894, 906, 907, 908, 909, 910, 911, 912, 934, 941, 945, 972, 973, 978, 980, 981, 987, 988], "tocsr": 16, "convers": [16, 111, 170, 310, 319, 325, 331, 337, 339, 345, 348, 356, 370, 522, 803, 812, 820, 867, 868, 917, 928, 952, 955, 980, 981, 982, 985], "5m": 16, "ram": [16, 49, 325, 369, 839, 840, 933, 946, 966, 978, 984, 987], "5000000": 16, "strongest": [16, 172], "highest": [16, 18, 24, 75, 129, 133, 233, 235, 246, 282, 310, 337, 348, 360, 366, 369, 371, 388, 505, 507, 514, 542, 545, 546, 548, 549, 550, 553, 554, 556, 585, 587, 675, 705, 741, 744, 746, 749, 750, 760, 844, 855, 886, 920, 927, 931, 932, 935, 945, 947, 984], "centrality_scor": 16, "networkx": [16, 346], "copyright": [16, 75], "aric": 16, "hagberg": 16, "lanl": 16, "gov": [16, 334], "dan": [16, 972, 976, 977, 978, 980, 981], "schult": 16, "dschult": 16, "pieter": [16, 978, 979, 986], "swart": 16, "incoming_count": 16, "nonzero": [16, 18, 95, 178, 210, 239, 312, 359, 373, 395, 473, 474, 481, 487, 492, 498, 538, 541, 635, 636, 649, 790, 791, 794, 796, 798, 799, 927, 931], "indptr": [16, 253, 318, 980], "dangl": 16, "isclos": 16, "guess": [16, 107, 366, 369, 370, 428, 482, 488, 490, 491, 497, 931, 945], "prev_scor": 16, "dot": [16, 29, 30, 31, 40, 45, 50, 52, 57, 71, 72, 73, 75, 77, 78, 86, 87, 88, 93, 95, 102, 135, 136, 142, 143, 151, 160, 163, 171, 173, 174, 186, 211, 222, 223, 225, 226, 239, 294, 296, 323, 339, 343, 346, 350, 359, 367, 370, 483, 488, 490, 497, 540, 541, 564, 596, 597, 600, 602, 603, 604, 607, 610, 611, 612, 613, 631, 632, 633, 634, 637, 710, 712, 820, 859, 885, 929, 933, 941, 945, 946, 965, 981], "converg": [16, 52, 56, 71, 72, 99, 109, 111, 135, 141, 172, 181, 183, 187, 195, 224, 269, 270, 273, 278, 288, 325, 346, 350, 359, 362, 367, 370, 372, 374, 391, 394, 397, 398, 399, 402, 404, 409, 410, 411, 412, 421, 422, 428, 432, 433, 434, 483, 485, 486, 487, 488, 489, 496, 503, 521, 560, 594, 595, 596, 597, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 618, 622, 624, 626, 628, 632, 633, 637, 638, 640, 641, 644, 645, 744, 745, 797, 805, 806, 842, 843, 849, 921, 926, 927, 928, 930, 935, 945, 972, 975, 976, 977, 979, 980, 983, 985, 986, 987], "l_inf": 16, "scores_max": 16, "err": [16, 77, 89], "6f": [16, 89, 240, 686, 742], "wikipedia_principal_eigenvector": 16, "concern": [17, 32, 70, 76, 79, 84, 97, 127, 134, 145, 148, 155, 157, 198, 220, 226, 251, 254, 267, 272, 286, 293, 309, 313, 323, 339, 361, 928, 943], "modul": [17, 32, 33, 45, 49, 70, 76, 79, 84, 85, 97, 127, 134, 145, 148, 149, 155, 157, 194, 198, 199, 220, 228, 251, 254, 267, 269, 270, 272, 286, 293, 309, 313, 316, 331, 332, 335, 336, 337, 338, 339, 341, 342, 343, 345, 346, 348, 350, 352, 353, 356, 359, 360, 361, 362, 365, 369, 370, 371, 373, 395, 453, 485, 529, 530, 609, 842, 876, 920, 925, 927, 929, 931, 932, 935, 937, 938, 941, 943, 945, 947, 948, 955, 960, 961, 966, 973, 974, 975, 977, 978, 982, 984, 986], "demo": [17, 32, 114, 148, 185, 226, 236, 244, 278, 310, 311, 339, 359, 362, 370, 391, 392, 395, 397, 398, 400, 401, 403, 405, 408, 452, 461, 462, 463, 491, 654, 655, 667, 669, 686, 740, 742, 809, 828], "spectral": [17, 32, 40, 42, 45, 148, 200, 201, 337, 370, 399, 401, 402, 403, 412, 419, 420, 421, 422, 423, 424, 425, 426, 438, 461, 463, 541, 638, 639, 640, 641, 642, 645, 669, 742, 934, 944, 967, 968, 972, 973], "twenti": [18, 210, 334, 359, 362, 966], "comp": [18, 77, 78, 88, 96, 271, 291, 310, 311, 312, 332, 966], "window": [18, 291, 332, 337, 339, 340, 370, 951, 972, 975, 979, 983, 985, 986], "misc": [18, 49, 88, 236, 291, 310, 311, 312, 332, 965], "categori": [18, 40, 57, 64, 65, 108, 118, 151, 152, 179, 187, 194, 215, 236, 269, 270, 275, 282, 285, 291, 310, 311, 312, 331, 332, 346, 361, 362, 363, 369, 370, 372, 438, 446, 447, 453, 511, 512, 598, 608, 609, 619, 630, 692, 707, 708, 784, 821, 822, 921, 927, 928, 929, 933, 939, 957, 966, 978, 980, 981, 983, 984, 985, 986, 987, 988], "noth": [18, 311, 342, 492, 538, 539, 541, 664, 811, 820, 868, 941], "frequenc": [18, 25, 135, 152, 173, 179, 210, 281, 282, 310, 311, 312, 332, 348, 360, 366, 367, 369, 370, 371, 501, 507, 509, 510, 511, 514, 538, 539, 540, 541, 554, 608, 609, 614, 616, 618, 624, 625, 626, 635, 636, 777, 812, 821, 847, 849, 852, 855, 857, 873, 927, 928, 933, 941, 945, 947, 974, 976, 977, 983], "dhillon": [18, 359, 401, 403, 461], "cut": [18, 39, 42, 60, 61, 201, 341, 348, 359, 362, 402, 403, 412, 538, 541, 641, 645, 941], "minibatchkmean": [18, 32, 40, 46, 56, 148, 311, 325, 362, 367, 391, 393, 397, 462, 728, 973, 978, 979, 980, 983, 984, 985, 986, 987, 988], "spectralcoclust": [18, 20, 359, 401, 974, 979, 983], "v_measure_scor": [18, 33, 34, 45, 53, 311, 362, 667, 685, 686, 706, 931, 981], "number_norm": 18, "token": [18, 312, 323, 332, 341, 370, 486, 538, 539, 540, 541, 972, 980, 984], "placehold": [18, 341, 577, 578, 579, 580, 761, 762, 765, 766, 921], "begin": [18, 135, 230, 237, 252, 283, 319, 337, 342, 343, 350, 359, 362, 369, 503, 504, 509, 511, 512, 616, 617, 626, 627, 628, 920, 927, 931, 941, 943, 945, 980, 986, 987], "By": [18, 41, 85, 114, 115, 158, 244, 273, 280, 310, 324, 337, 343, 344, 350, 362, 363, 365, 366, 367, 368, 369, 371, 389, 392, 396, 400, 414, 417, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 474, 476, 499, 500, 507, 508, 509, 510, 514, 515, 535, 536, 538, 539, 541, 556, 559, 582, 583, 621, 623, 625, 627, 640, 642, 644, 647, 650, 652, 653, 668, 678, 679, 683, 687, 732, 733, 736, 741, 743, 749, 750, 794, 808, 809, 821, 822, 824, 826, 835, 837, 850, 851, 855, 856, 857, 858, 867, 868, 899, 920, 921, 923, 927, 931, 938, 941, 943, 947, 957, 961, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 984, 986], "isdigit": [18, 370], "numbernormalizingvector": 18, "build_token": [18, 370, 538, 539, 541], "super": [18, 23, 25, 339, 370, 980], "alt": [18, 236, 291, 310, 311, 312, 332, 345, 966], "atheism": [18, 236, 291, 310, 311, 312, 332, 966], "pc": [18, 291, 312, 332], "hardwar": [18, 291, 312, 323, 324, 332, 335, 949, 951, 986, 987], "mac": [18, 291, 332, 337, 658, 931], "forsal": [18, 312, 332], "rec": [18, 312, 332, 591], "auto": [18, 30, 40, 41, 44, 52, 53, 55, 83, 85, 139, 162, 199, 200, 201, 202, 204, 215, 217, 253, 256, 261, 281, 282, 283, 284, 285, 294, 295, 301, 304, 305, 312, 331, 332, 337, 339, 369, 372, 373, 392, 395, 396, 397, 399, 400, 402, 407, 409, 412, 446, 458, 459, 485, 491, 494, 499, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 543, 544, 547, 552, 557, 558, 579, 581, 582, 583, 585, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 622, 623, 624, 630, 631, 632, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 650, 652, 690, 749, 750, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 805, 806, 821, 822, 839, 840, 844, 849, 850, 851, 852, 853, 855, 856, 857, 858, 883, 884, 897, 900, 922, 925, 927, 928, 934, 951, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987], "motorcycl": [18, 332], "sport": [18, 332], "basebal": [18, 332], "hockei": [18, 332], "sci": [18, 64, 310, 311, 312, 332, 348, 639, 643, 819, 928, 941, 966], "crypt": [18, 332], "electron": [18, 332, 334, 488, 490, 497, 577], "med": [18, 64, 244, 332, 941, 966], "soc": [18, 332, 966], "religion": [18, 236, 310, 311, 312, 332, 932, 966], "talk": [18, 236, 310, 311, 312, 326, 332, 350, 356, 955, 958, 966], "polit": [18, 332, 336, 927, 932], "gun": [18, 332], "mideast": [18, 332], "coclust": [18, 359, 401, 463], "n_cluster": [18, 19, 20, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 85, 284, 311, 337, 350, 362, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 409, 410, 411, 412, 413, 461, 463, 965, 972, 976, 978, 980, 981, 983, 986], "svd_method": [18, 401, 403, 482, 975], "kmean": [18, 32, 39, 41, 42, 44, 46, 49, 52, 53, 56, 148, 224, 227, 276, 284, 311, 346, 362, 391, 394, 398, 399, 402, 412, 462, 739, 740, 744, 745, 813, 934, 941, 952, 965, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "20000": [18, 87], "n_init": [18, 38, 39, 40, 41, 44, 46, 52, 53, 55, 56, 59, 85, 199, 200, 201, 202, 281, 284, 311, 362, 394, 397, 399, 401, 402, 403, 409, 412, 640, 644, 744, 745, 965, 972, 980, 986, 987], "y_coclust": 18, "row_labels_": [18, 19, 20, 359, 401, 403], "y_kmean": 18, "fit_predict": [18, 51, 52, 55, 206, 260, 339, 350, 362, 380, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 419, 513, 627, 744, 745, 794, 800, 808, 851, 937, 977, 980, 981, 985, 987], "document_nam": 18, "bicluster_ncut": 18, "col": [18, 23, 25, 34, 38, 45, 54, 58, 59, 64, 119, 199, 215, 307, 461, 463], "get_indic": [18, 377, 401, 403], "float_info": 18, "row_compl": 18, "logical_not": [18, 59, 95, 182], "rows_": [18, 359, 377, 401, 403], "col_compl": 18, "columns_": [18, 359, 377, 401, 403], "ident": [18, 59, 110, 174, 179, 197, 206, 210, 292, 310, 332, 339, 350, 359, 362, 363, 364, 366, 372, 375, 389, 390, 402, 414, 415, 423, 425, 426, 429, 430, 431, 438, 453, 501, 509, 510, 514, 515, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 593, 629, 630, 649, 654, 655, 685, 734, 742, 748, 751, 761, 762, 763, 765, 766, 790, 791, 797, 805, 806, 812, 813, 825, 836, 855, 856, 924, 925, 928, 931, 934, 935, 946, 976, 980, 981, 982, 986], "most_common": 18, "counter": [18, 362, 626, 627, 628, 985], "itemgett": 18, "revers": [18, 69, 133, 184, 235, 484, 491, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 561, 738, 808, 931, 972, 973, 982, 984, 988], "best_idx": [18, 234], "get_shap": [18, 377, 401, 403], "cluster_doc": 18, "cluster_word": 18, "cat_str": 18, "0f": [18, 53], "out_of_cluster_doc": 18, "word_col": 18, "word_scor": 18, "important_word": 18, "plot_bicluster_newsgroup": 18, "checkerboard": [19, 359, 401, 403, 461, 463], "make_checkerboard": [19, 461, 974], "rearrang": [19, 20, 359], "outer": [19, 90, 240, 289, 401, 464, 590, 600, 601, 604, 923, 973], "product": [19, 65, 85, 119, 135, 140, 152, 319, 323, 339, 340, 343, 346, 356, 359, 367, 369, 401, 488, 490, 497, 532, 539, 540, 541, 563, 564, 583, 590, 614, 615, 635, 636, 710, 712, 724, 726, 820, 823, 839, 840, 885, 920, 923, 927, 929, 941, 943, 945, 946, 951, 955, 980], "kemaleren": [19, 20], "spectralbiclust": [19, 359, 403, 974, 978, 979, 983], "consensus_scor": [19, 20, 359, 974], "matshow": [19, 20, 61, 106, 131, 270, 452], "row_idx": [19, 20, 179], "permut": [19, 20, 33, 74, 106, 112, 126, 148, 149, 195, 228, 352, 357, 362, 369, 414, 446, 450, 454, 509, 510, 514, 515, 577, 580, 584, 629, 654, 655, 667, 685, 686, 704, 706, 742, 763, 765, 773, 774, 808, 822, 852, 855, 856, 884, 900, 902, 905, 931, 945, 961, 964, 968, 972, 978, 985, 987], "col_idx": [19, 20], "biclusters_": [19, 20, 377, 401, 403], "consensu": [19, 20, 33, 336, 337, 351, 359, 362, 599, 621, 628, 629, 669, 931], "1f": [19, 27, 46, 49, 88, 159, 179, 210, 221, 223, 242, 280, 311, 312], "fit_data": [19, 20], "column_labels_": [19, 20, 359, 401, 403], "plot_spectral_biclust": 19, "biclust": [20, 326, 370, 377, 399, 401, 403, 438, 461, 463, 541, 669, 742, 931, 967, 968, 974, 978, 979], "make_biclust": [20, 463, 974], "implant": 20, "plot_spectral_coclust": 20, "probabl": [21, 25, 26, 69, 83, 97, 98, 99, 119, 128, 134, 135, 136, 137, 148, 151, 199, 203, 207, 210, 235, 238, 241, 242, 245, 273, 277, 280, 282, 290, 292, 323, 326, 332, 333, 339, 343, 348, 350, 362, 366, 367, 370, 371, 372, 386, 387, 388, 389, 390, 397, 399, 454, 462, 465, 473, 477, 499, 500, 501, 503, 505, 507, 509, 511, 512, 514, 517, 519, 520, 543, 544, 560, 563, 564, 572, 577, 582, 583, 608, 609, 621, 626, 642, 648, 650, 652, 653, 656, 657, 659, 662, 666, 670, 675, 676, 678, 688, 689, 690, 691, 705, 731, 733, 736, 737, 738, 741, 744, 745, 746, 749, 750, 760, 773, 774, 777, 779, 780, 783, 784, 785, 786, 787, 790, 793, 798, 804, 805, 840, 841, 842, 843, 844, 847, 849, 852, 855, 857, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 941, 943, 944, 945, 947, 952, 953, 954, 966, 968, 972, 974, 976, 978, 980, 981, 982, 983, 984, 986], "confid": [22, 23, 24, 25, 140, 142, 222, 235, 238, 290, 351, 360, 372, 586, 608, 609, 616, 618, 621, 624, 625, 626, 648, 652, 657, 670, 675, 676, 688, 689, 705, 738, 776, 815, 847, 849, 852, 927, 930, 931, 932, 937, 944, 945, 946, 955, 966, 982], "being": [22, 25, 41, 48, 75, 78, 81, 90, 103, 115, 135, 140, 151, 153, 156, 173, 229, 235, 277, 278, 298, 312, 335, 336, 337, 339, 341, 342, 348, 350, 351, 356, 362, 364, 366, 369, 370, 371, 372, 373, 375, 392, 393, 395, 396, 400, 406, 419, 425, 443, 473, 519, 590, 599, 606, 622, 624, 637, 640, 644, 662, 668, 683, 685, 732, 738, 744, 788, 789, 794, 796, 798, 799, 800, 823, 840, 885, 920, 921, 927, 930, 931, 934, 937, 938, 939, 941, 943, 945, 946, 947, 972, 973, 978, 979, 980, 981, 983, 984, 986, 987], "postprocess": [22, 360, 485, 491], "brier": [22, 23, 360, 659], "brier_scor": 22, "sigmoid": [22, 23, 24, 25, 329, 369, 388, 402, 485, 511, 570, 589, 593, 714, 723, 726, 805, 806, 849, 850, 851, 852, 853, 936, 946, 964, 968, 985], "isoton": [22, 23, 148, 205, 326, 388, 607, 870, 953, 968, 973, 974, 975, 976, 978, 985, 988], "belong": [22, 25, 55, 215, 235, 280, 289, 331, 332, 359, 360, 362, 365, 366, 369, 377, 391, 394, 397, 398, 399, 401, 403, 473, 662, 680, 753, 759, 769, 795, 815, 927, 930, 931, 933, 934, 935, 937, 946, 951, 957, 964], "mblondel": [22, 44, 170, 200, 236, 310, 331, 458], "telecom": [22, 23, 38, 206, 955], "balaz": [22, 976], "kegl": [22, 976], "jhm": [22, 23, 24, 25, 135, 136, 138, 139, 140, 141, 142, 144, 212], "informatik": [22, 23, 24, 25, 135, 136, 138, 139, 140, 141, 142, 144, 212, 931], "uni": [22, 23, 24, 25, 68, 103, 135, 136, 138, 139, 140, 141, 142, 144, 170, 211, 212, 289, 306], "bremen": [22, 23, 24, 25, 135, 136, 138, 139, 140, 141, 142, 144, 212], "style": [22, 24, 74, 111, 168, 187, 197, 239, 337, 344, 362, 370, 394, 397, 409, 650, 752, 867, 868, 972, 975, 986], "make_blob": [22, 24, 30, 34, 38, 39, 40, 45, 51, 52, 54, 55, 57, 58, 59, 82, 171, 191, 206, 224, 276, 281, 284, 296, 299, 300, 307, 333, 339, 340, 369, 465, 980, 983, 986], "50000": 22, "n_bin": [22, 23, 25, 49, 179, 197, 274, 276, 389, 390, 813, 941], "calibration_curv": [22, 360, 388, 389, 981, 986], "blob": [22, 30, 38, 40, 52, 57, 59, 82, 362, 398, 462, 977], "sample_weight": [22, 160, 179, 192, 197, 281, 308, 337, 350, 362, 369, 373, 379, 383, 388, 394, 395, 397, 399, 409, 415, 419, 432, 433, 434, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 560, 561, 584, 585, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 637, 647, 648, 650, 652, 653, 657, 658, 659, 662, 663, 666, 668, 670, 671, 672, 673, 675, 676, 677, 678, 679, 683, 684, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 731, 732, 733, 734, 736, 737, 738, 741, 743, 746, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 793, 795, 798, 799, 805, 806, 808, 813, 827, 828, 842, 843, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 919, 931, 945, 946, 947, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988], "sw_train": [22, 281], "sw_test": [22, 281], "calibratedclassifiercv": [22, 23, 24, 319, 350, 360, 626, 920, 946, 952, 976, 978, 981, 982, 984, 985, 986, 987, 988], "brier_score_loss": [22, 23, 360, 931, 980, 981, 982], "gaussiannb": [22, 23, 25, 28, 120, 237, 319, 360, 369, 388, 519, 783, 784, 785, 787, 809, 925, 932, 933, 976, 977, 978, 980, 985, 988], "With": [22, 31, 40, 62, 69, 90, 109, 129, 148, 152, 179, 181, 205, 207, 212, 213, 219, 235, 257, 323, 326, 332, 337, 339, 350, 362, 363, 366, 369, 371, 388, 390, 451, 532, 582, 583, 608, 717, 806, 809, 811, 822, 828, 854, 856, 924, 927, 928, 931, 932, 934, 935, 938, 945, 947, 957, 958, 965, 969, 975, 979, 980, 982, 984, 986], "itself": [22, 45, 111, 114, 152, 177, 218, 244, 253, 298, 311, 323, 325, 336, 337, 339, 341, 350, 361, 362, 373, 391, 392, 395, 396, 419, 420, 421, 422, 423, 424, 425, 426, 477, 481, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 501, 516, 519, 533, 542, 545, 546, 548, 549, 550, 552, 553, 589, 590, 591, 592, 593, 595, 605, 639, 641, 739, 740, 783, 784, 785, 786, 787, 788, 789, 793, 801, 802, 813, 814, 815, 842, 843, 923, 927, 928, 930, 934, 935, 939, 951, 976, 987], "prob_pos_clf": 22, "predict_proba": [22, 23, 24, 25, 27, 31, 116, 120, 136, 137, 138, 139, 244, 268, 275, 278, 280, 282, 310, 339, 344, 350, 360, 361, 369, 388, 389, 499, 500, 501, 503, 505, 507, 509, 511, 514, 517, 519, 543, 544, 560, 569, 570, 572, 573, 581, 582, 583, 608, 609, 626, 648, 650, 652, 690, 691, 737, 744, 745, 746, 749, 750, 760, 769, 776, 777, 778, 779, 780, 783, 784, 785, 786, 787, 790, 798, 805, 808, 815, 842, 843, 844, 849, 852, 855, 857, 927, 931, 933, 935, 938, 944, 945, 946, 947, 972, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988], "clf_isoton": 22, "prob_pos_isoton": 22, "clf_sigmoid": 22, "prob_pos_sigmoid": 22, "clf_score": 22, "No": [22, 113, 185, 187, 288, 306, 334, 345, 348, 353, 362, 424, 509, 510, 540, 541, 585, 595, 614, 626, 628, 635, 636, 744, 927], "clf_isotonic_scor": 22, "clf_sigmoid_scor": 22, "y_uniqu": 22, "rainbow": [22, 201], "this_i": [22, 185], "this_x": [22, 177, 185, 964], "this_sw": 22, "lexsort": 22, "51": [22, 253, 362, 363, 730, 926, 927], "uncalibr": [22, 23, 24, 388], "gnb": [22, 23, 25, 120, 369, 519, 933], "plot_calibr": 22, "reliabl": [23, 25, 360, 366, 389, 390, 596, 947, 955], "diagram": [23, 25, 65, 217, 281, 360, 362, 389, 390, 418, 845, 983, 984], "redund": [23, 25, 96, 132, 222, 227, 319, 333, 336, 337, 342, 350, 360, 465, 584, 952, 966, 984], "uninform": [23, 25, 333, 342, 370, 920, 927, 980], "rest": [23, 27, 108, 112, 148, 157, 194, 224, 280, 291, 295, 343, 350, 361, 372, 462, 560, 594, 608, 609, 626, 703, 737, 776, 777, 778, 797, 847, 849, 852, 927, 931, 932, 935, 938, 946, 955, 976, 977, 986, 987], "make_classif": [23, 25, 28, 82, 103, 104, 105, 109, 130, 132, 232, 238, 246, 247, 263, 268, 275, 280, 282, 306, 319, 333, 340, 358, 388, 389, 462, 503, 505, 507, 514, 616, 647, 648, 650, 652, 772, 778, 805, 808, 847, 920, 931, 932, 941, 946, 978, 979, 980, 982], "100_000": [23, 25, 151], "n_inform": [23, 25, 28, 82, 103, 105, 130, 132, 158, 182, 232, 238, 248, 263, 268, 275, 280, 306, 339, 342, 465, 474, 503, 504, 505, 506, 514, 515, 615, 778, 932, 980], "n_redund": [23, 25, 28, 82, 105, 130, 132, 232, 238, 263, 268, 275, 342, 388, 465, 503, 505, 514, 778], "logisticregress": [23, 25, 27, 65, 67, 104, 120, 125, 132, 162, 169, 170, 171, 172, 186, 194, 195, 207, 208, 217, 219, 238, 244, 252, 271, 275, 280, 281, 282, 283, 284, 310, 323, 337, 339, 343, 345, 349, 360, 363, 369, 371, 389, 517, 519, 547, 581, 584, 593, 602, 609, 622, 623, 624, 625, 626, 637, 650, 737, 760, 779, 780, 782, 832, 833, 835, 836, 837, 838, 854, 879, 927, 931, 932, 941, 945, 946, 962, 964, 972, 973, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987], "baselin": [23, 108, 111, 121, 158, 197, 245, 252, 282, 311, 334, 362, 371, 501, 502, 584, 931, 934, 966], "regular": [23, 32, 65, 67, 72, 90, 97, 142, 146, 148, 157, 158, 159, 164, 166, 167, 168, 170, 179, 193, 197, 212, 222, 229, 236, 239, 248, 258, 259, 267, 270, 271, 278, 293, 295, 297, 298, 299, 310, 312, 314, 323, 337, 348, 349, 360, 362, 364, 365, 367, 368, 369, 372, 388, 394, 397, 421, 426, 428, 429, 430, 431, 454, 462, 464, 465, 470, 472, 474, 478, 488, 489, 490, 493, 497, 498, 500, 509, 511, 512, 538, 539, 541, 588, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 639, 643, 684, 690, 699, 744, 745, 763, 774, 775, 805, 806, 809, 828, 847, 848, 849, 850, 852, 853, 854, 920, 921, 923, 924, 925, 928, 930, 936, 937, 941, 944, 945, 946, 953, 955, 961, 962, 964, 968, 972, 973, 974, 976, 977, 981, 982, 984, 985], "logist": [23, 25, 27, 63, 65, 104, 125, 148, 157, 207, 219, 252, 271, 278, 284, 310, 350, 351, 360, 363, 369, 371, 372, 388, 439, 446, 452, 454, 462, 491, 509, 511, 521, 560, 596, 607, 608, 609, 616, 618, 626, 690, 746, 760, 774, 804, 805, 806, 808, 828, 854, 870, 872, 931, 935, 936, 945, 946, 953, 955, 962, 968, 976, 979, 980, 982, 983], "guid": [23, 63, 85, 144, 148, 151, 152, 167, 199, 242, 259, 260, 263, 280, 281, 282, 283, 284, 285, 326, 335, 336, 337, 342, 343, 344, 349, 350, 351, 361, 363, 369, 373, 374, 375, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 569, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 804, 807, 808, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 880, 932, 959, 966, 972, 973, 974, 975, 977, 979, 981, 982], "gridspec": [23, 25, 60, 221, 344], "calibrationdisplai": [23, 25, 360, 985, 986], "lr": [23, 25, 104, 120, 121, 182, 194, 208, 209, 231, 238, 349, 369, 518, 519, 520, 662], "gnb_isoton": 23, "gnb_sigmoid": 23, "clf_list": [23, 25], "get_cmap": [23, 25, 303], "dark2": [23, 25, 200], "ax_calibration_curv": [23, 25], "calibration_displai": [23, 25], "histogram": [23, 25, 49, 179, 210, 241, 258, 273, 282, 360, 509, 510, 511, 512, 592, 707, 708, 923, 929, 941, 953, 967, 968, 984, 987], "grid_posit": [23, 25], "y_prob": [23, 25, 138, 389, 390, 659, 779, 805, 931, 986], "poorli": [23, 57, 71, 78, 102, 113, 203, 324, 362, 369, 478, 580, 927, 928, 978], "violat": [23, 298, 345, 348, 350, 585, 871, 938, 945, 947], "independ": [23, 25, 33, 42, 86, 87, 89, 104, 107, 142, 152, 214, 235, 238, 240, 244, 252, 273, 280, 311, 319, 323, 324, 333, 339, 341, 349, 350, 353, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 374, 399, 414, 438, 453, 465, 466, 467, 468, 470, 482, 483, 485, 487, 489, 490, 496, 497, 501, 502, 554, 557, 558, 575, 590, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 622, 623, 624, 625, 654, 655, 667, 685, 686, 704, 706, 742, 748, 773, 777, 779, 781, 782, 820, 824, 825, 826, 828, 831, 832, 833, 834, 836, 837, 838, 841, 849, 850, 851, 852, 853, 878, 920, 923, 925, 927, 928, 931, 932, 933, 936, 938, 941, 946, 947, 967, 968, 972, 973, 978, 980, 982, 987], "overli": [23, 24, 168, 240, 319, 367, 931], "typic": [23, 25, 89, 99, 156, 179, 197, 212, 237, 238, 242, 244, 245, 259, 260, 282, 298, 311, 323, 330, 331, 332, 335, 339, 340, 346, 349, 350, 360, 361, 362, 363, 366, 367, 369, 370, 372, 394, 397, 399, 446, 501, 503, 505, 506, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 579, 588, 590, 593, 604, 605, 606, 621, 632, 633, 662, 815, 826, 883, 884, 916, 920, 924, 927, 928, 930, 931, 932, 933, 937, 939, 955, 966, 981, 985, 988], "transpos": [23, 235, 374, 476, 488, 490, 497, 610, 611, 612, 613, 737, 884, 917, 931, 943, 965, 972, 986], "nearli": [23, 238, 332, 350, 361, 713, 931, 934, 943, 966], "albeit": 23, "strongli": [23, 25, 75, 78, 88, 108, 112, 151, 161, 194, 241, 310, 337, 352, 353, 360, 369, 608, 685, 742, 927, 928, 968, 981], "plenti": 23, "greater": [23, 83, 101, 151, 196, 211, 224, 241, 252, 259, 260, 314, 323, 333, 342, 350, 360, 362, 365, 369, 392, 396, 399, 402, 413, 422, 486, 491, 507, 508, 509, 510, 511, 512, 514, 515, 516, 543, 544, 547, 560, 561, 578, 590, 592, 595, 614, 616, 617, 621, 626, 627, 628, 642, 659, 662, 670, 684, 685, 688, 691, 737, 742, 744, 745, 778, 790, 791, 798, 799, 805, 806, 811, 826, 837, 841, 844, 855, 856, 857, 858, 884, 900, 920, 926, 927, 928, 931, 932, 937, 941, 946, 947, 975, 980, 983, 985, 986, 987], "exploit": [23, 252, 932, 952, 975], "precis": [23, 69, 75, 85, 141, 142, 148, 156, 207, 228, 229, 233, 273, 337, 339, 350, 359, 361, 362, 364, 367, 369, 394, 419, 420, 421, 422, 423, 424, 425, 426, 428, 454, 473, 482, 484, 491, 494, 594, 595, 596, 598, 600, 601, 602, 604, 605, 606, 619, 622, 624, 630, 632, 633, 637, 650, 656, 657, 658, 663, 676, 678, 679, 680, 688, 712, 731, 732, 733, 736, 737, 744, 745, 774, 777, 788, 789, 794, 809, 828, 831, 847, 852, 859, 861, 884, 925, 927, 934, 935, 946, 962, 966, 972, 975, 976, 978, 979, 980, 981, 982, 984, 985, 986, 987], "recal": [23, 90, 148, 207, 228, 233, 337, 350, 362, 454, 554, 650, 656, 657, 658, 662, 663, 676, 678, 679, 680, 731, 732, 733, 736, 737, 774, 777, 809, 828, 831, 847, 927, 947, 962, 966, 975, 976, 979, 981, 982, 984, 985, 986], "f1": [23, 291, 366, 663, 678, 679, 687, 732, 931, 932, 962, 966, 976], "precision_scor": [23, 242, 658, 736, 931, 972, 974, 975, 976, 977, 982], "recall_scor": [23, 242, 366, 658, 733, 931, 972, 974, 975, 976, 977, 982], "f1_score": [23, 242, 291, 332, 687, 931, 972, 974, 975, 976, 977, 981, 982], "log_loss": [23, 24, 110, 113, 136, 278, 291, 310, 350, 369, 507, 509, 511, 514, 596, 626, 855, 857, 920, 927, 931, 945, 974, 976, 978, 986, 987, 988], "roc_auc_scor": [23, 235, 244, 280, 652, 656, 657, 658, 738, 931, 974, 975, 980, 982, 986, 987], "score_nam": [23, 33, 212, 237, 311, 752], "score_df": 23, "set_index": [23, 111, 140, 168, 197, 235, 311], "decim": [23, 141, 421, 422, 860, 979, 980], "refin": [23, 75, 360, 422, 659, 931, 966], "alter": [23, 147, 339, 350, 678, 679, 687, 732, 733, 736, 977, 981, 984], "uncertainti": [23, 135, 142, 158, 237, 362, 517, 518, 593, 808, 921, 943], "linearsvc": [23, 25, 64, 66, 129, 130, 148, 156, 211, 232, 234, 242, 275, 280, 293, 295, 306, 310, 323, 339, 343, 360, 370, 371, 388, 462, 517, 527, 589, 593, 602, 622, 623, 624, 625, 626, 637, 684, 691, 771, 776, 848, 849, 852, 854, 927, 931, 932, 972, 973, 974, 978, 980, 983], "naivelycalibratedlinearsvc": [23, 25], "df_min_": [23, 25], "df_max_": [23, 25], "calibrated_df": [23, 25], "proba_pos_class": [23, 25], "clip": [23, 25, 197, 209, 273, 298, 585, 626, 690, 818, 941, 976, 983, 984], "proba_neg_class": [23, 25], "proba": [23, 25, 27, 120, 388, 855, 857], "svc_isoton": 23, "svc_sigmoid": 23, "opposit": [23, 25, 49, 62, 90, 151, 152, 168, 242, 350, 360, 364, 366, 371, 394, 397, 399, 419, 488, 490, 497, 513, 662, 794, 851, 972], "behavior": [23, 25, 33, 35, 48, 146, 148, 151, 152, 179, 197, 227, 228, 238, 270, 273, 275, 298, 319, 324, 331, 334, 337, 339, 341, 345, 346, 350, 360, 362, 366, 370, 486, 501, 516, 616, 617, 618, 626, 627, 628, 651, 678, 679, 732, 733, 736, 747, 748, 751, 763, 764, 765, 766, 767, 785, 821, 920, 927, 932, 937, 941, 955, 957, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "hing": [23, 186, 189, 191, 243, 295, 296, 300, 350, 616, 626, 684, 847, 854, 927, 945, 946, 966], "focus": [23, 71, 168, 332, 348, 369, 928, 941, 951], "far": [23, 55, 75, 108, 136, 142, 151, 179, 197, 298, 310, 312, 337, 346, 372, 670, 828, 906, 936, 937, 946, 955, 964], "awai": [23, 24, 25, 55, 71, 107, 135, 136, 140, 182, 303, 332, 360, 372, 578, 790, 791, 798, 799, 930, 931, 946, 964], "shown": [23, 44, 52, 80, 99, 101, 111, 144, 150, 152, 169, 177, 197, 204, 206, 211, 223, 235, 238, 241, 244, 258, 269, 270, 273, 274, 275, 287, 310, 311, 337, 342, 351, 362, 363, 366, 367, 368, 370, 372, 389, 410, 582, 648, 650, 651, 652, 663, 746, 760, 859, 861, 926, 927, 928, 931, 934, 939, 941, 945, 946, 947, 966, 976, 981, 982, 983, 986], "varieti": [23, 146, 223, 298, 345, 348, 361, 362, 364, 369, 370, 593, 934, 947, 951, 955, 974, 987], "niculescu": [23, 25, 360, 388, 390], "mizil": [23, 25, 360, 388, 390], "caruana": [23, 25, 360, 388, 390], "deal": [23, 52, 65, 146, 151, 203, 312, 337, 342, 361, 363, 370, 371, 372, 424, 446, 653, 658, 712, 736, 814, 884, 927, 955, 963, 975, 987], "situat": [23, 40, 52, 66, 150, 151, 185, 206, 238, 337, 345, 364, 366, 367, 369, 478, 484, 532, 821, 824, 835, 925, 927, 933, 934, 944, 947, 980], "supervis": [23, 25, 33, 45, 50, 53, 78, 94, 104, 125, 126, 200, 213, 223, 235, 262, 282, 290, 311, 323, 326, 332, 339, 349, 350, 360, 362, 365, 366, 367, 369, 370, 372, 388, 390, 414, 438, 453, 454, 503, 538, 540, 543, 544, 584, 626, 678, 747, 748, 751, 753, 754, 755, 756, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 773, 774, 797, 807, 808, 812, 842, 843, 844, 852, 925, 928, 931, 933, 934, 937, 942, 946, 947, 948, 951, 952, 954, 957, 958, 960, 966, 968, 972, 978, 984], "icml": [23, 25, 360, 362, 370, 388, 390, 783, 785, 804, 931, 933, 945, 950], "2005": [23, 25, 74, 334, 360, 388, 390, 797, 927, 934, 944], "plot_calibration_curv": 23, "simplex": [24, 620, 744, 823], "arrow": [24, 986], "green": [24, 31, 74, 83, 102, 115, 120, 135, 156, 204, 269, 274, 278, 281, 350, 932, 980, 981, 983, 984], "600": [24, 117, 118, 332, 630], "x_train_valid": 24, "y_train_valid": 24, "cluster_std": [24, 34, 40, 45, 51, 52, 54, 55, 57, 58, 59, 191, 206, 224, 276, 300, 462], "x_valid": 24, "y_valid": 24, "randomforestclassifi": [24, 25, 28, 51, 103, 104, 105, 106, 107, 120, 153, 154, 217, 218, 232, 247, 280, 282, 310, 319, 349, 350, 360, 369, 371, 507, 508, 509, 511, 516, 517, 519, 749, 750, 778, 857, 920, 932, 955, 969, 976, 977, 980, 981, 982, 985, 986, 987, 988], "concaten": [24, 35, 46, 56, 63, 74, 101, 114, 143, 148, 158, 161, 200, 206, 215, 221, 225, 226, 231, 242, 244, 245, 258, 271, 277, 288, 310, 363, 414, 417, 454, 459, 481, 487, 491, 492, 549, 730, 746, 807, 808, 810, 813, 821, 852, 932, 961, 973], "cal_clf": 24, "prefit": [24, 350, 360, 371, 388, 517, 518, 547, 952, 984, 985, 986], "clf_prob": 24, "cal_clf_prob": 24, "head_width": 24, "perfect": [24, 33, 74, 88, 90, 175, 179, 310, 311, 337, 341, 362, 366, 503, 504, 640, 644, 654, 655, 658, 667, 675, 677, 680, 686, 692, 705, 706, 734, 735, 742, 927, 931, 934, 946, 955, 964, 986], "ro": 24, "bo": [24, 984], "unit": [24, 73, 151, 156, 179, 197, 258, 270, 273, 311, 332, 337, 338, 339, 343, 345, 346, 367, 370, 374, 414, 439, 440, 469, 474, 482, 483, 484, 491, 492, 539, 540, 541, 561, 608, 609, 626, 635, 649, 719, 795, 804, 805, 806, 812, 818, 820, 824, 826, 828, 833, 834, 835, 837, 838, 847, 848, 927, 929, 930, 936, 941, 947, 951, 964, 976, 980, 986, 987], "mid": [24, 298, 931, 933], "frac": [24, 73, 74, 235, 242, 244, 283, 359, 360, 362, 364, 367, 368, 369, 370, 372, 383, 413, 415, 432, 433, 434, 504, 506, 508, 510, 512, 515, 518, 520, 561, 565, 569, 572, 573, 585, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 619, 620, 622, 623, 628, 629, 630, 646, 704, 718, 781, 782, 791, 799, 806, 848, 850, 853, 856, 858, 923, 925, 926, 927, 928, 929, 931, 933, 934, 935, 936, 938, 939, 941, 943, 945, 946, 947, 964], "shrink": [24, 75, 85, 112, 152, 174, 177, 199, 225, 273, 367, 509, 510, 626, 628, 795, 805, 806, 849, 850, 851, 852, 853, 934, 946, 964], "perfectli": [24, 33, 238, 249, 352, 362, 369, 389, 517, 556, 654, 655, 665, 667, 685, 686, 706, 735, 742, 821, 926, 928, 931, 946, 985, 986], "incur": [24, 569, 847, 946, 980], "correct": [24, 25, 52, 74, 143, 151, 168, 179, 197, 221, 229, 235, 242, 244, 298, 300, 319, 334, 337, 339, 341, 351, 360, 361, 362, 366, 367, 370, 400, 406, 419, 424, 438, 451, 453, 585, 617, 626, 628, 653, 654, 658, 662, 663, 668, 671, 672, 673, 677, 678, 679, 683, 687, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 732, 733, 734, 736, 741, 743, 776, 777, 778, 785, 793, 819, 916, 927, 931, 932, 946, 957, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "decreas": [24, 35, 42, 53, 61, 69, 115, 132, 151, 152, 163, 187, 209, 210, 237, 242, 248, 268, 275, 278, 280, 314, 323, 325, 337, 360, 362, 369, 392, 396, 413, 471, 484, 485, 491, 507, 508, 509, 510, 511, 512, 514, 515, 516, 552, 585, 586, 587, 626, 627, 628, 656, 662, 676, 731, 738, 805, 806, 855, 856, 857, 858, 920, 922, 927, 928, 931, 934, 935, 938, 939, 945, 946, 955, 964, 974, 979, 982, 985], "cal_scor": 24, "p1d": 24, "p0": 24, "p1": [24, 120], "p2": [24, 120, 197], "calibrated_classifi": 24, "calibrated_classifiers_": [24, 360, 388], "this_p": 24, "sure": [24, 51, 172, 185, 213, 319, 323, 324, 331, 335, 336, 337, 338, 339, 341, 342, 345, 348, 360, 363, 370, 443, 473, 599, 867, 868, 878, 917, 921, 928, 945, 951, 952, 979, 980, 982, 987], "renorm": 24, "step": [24, 30, 38, 50, 53, 62, 65, 67, 74, 78, 88, 93, 107, 108, 118, 130, 131, 132, 137, 140, 151, 153, 179, 187, 197, 211, 219, 227, 233, 242, 244, 253, 255, 261, 268, 271, 275, 278, 284, 292, 294, 298, 311, 312, 314, 319, 323, 326, 332, 335, 336, 337, 339, 341, 342, 345, 348, 350, 359, 360, 362, 364, 365, 367, 369, 370, 371, 393, 397, 399, 486, 487, 488, 489, 496, 513, 538, 539, 541, 543, 544, 547, 556, 577, 594, 598, 616, 617, 619, 626, 628, 629, 630, 644, 650, 744, 745, 746, 749, 750, 760, 780, 781, 782, 804, 805, 806, 808, 809, 811, 847, 848, 849, 850, 852, 853, 883, 884, 902, 906, 921, 927, 930, 935, 936, 941, 945, 947, 948, 951, 954, 962, 966, 972, 976, 977, 979, 980, 981, 983, 984, 985, 988], "multiclass": [24, 27, 148, 157, 213, 228, 242, 245, 252, 295, 307, 326, 332, 333, 339, 340, 342, 350, 362, 369, 388, 402, 412, 439, 454, 509, 511, 517, 518, 521, 544, 552, 560, 581, 582, 583, 608, 609, 616, 618, 623, 624, 625, 626, 656, 658, 678, 679, 683, 684, 687, 692, 703, 732, 733, 736, 737, 738, 741, 746, 747, 749, 750, 751, 752, 760, 764, 768, 769, 770, 771, 772, 773, 774, 775, 815, 847, 849, 852, 925, 927, 942, 946, 947, 953, 954, 966, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 987, 988], "argmax": [24, 93, 234, 248, 339, 369, 519, 776, 855, 946, 985], "plot_calibration_multiclass": 24, "gave": [25, 360, 746, 749, 750, 760, 815], "four": [25, 129, 143, 156, 161, 180, 223, 224, 288, 295, 333, 337, 350, 507, 514, 669, 855, 857, 873, 927, 929, 930, 931, 941, 950], "naiv": [25, 28, 116, 235, 237, 310, 312, 326, 332, 369, 370, 388, 494, 783, 784, 785, 786, 787, 925, 926, 934, 953, 968, 972, 973, 974, 975, 980, 982, 985, 987], "bay": [25, 28, 102, 116, 135, 168, 226, 237, 310, 326, 332, 367, 369, 370, 372, 486, 499, 500, 606, 783, 784, 785, 786, 787, 925, 926, 927, 953, 966, 968, 972, 973, 974, 975, 980, 982, 985, 987], "train_sampl": [25, 194, 195], "against": [25, 33, 78, 95, 102, 112, 128, 156, 170, 171, 188, 196, 244, 280, 298, 332, 337, 351, 360, 362, 366, 370, 389, 459, 492, 498, 501, 626, 628, 704, 706, 737, 748, 753, 755, 773, 777, 897, 923, 927, 931, 932, 934, 946, 950, 957], "rfc": [25, 218, 280, 969], "contrast": [25, 94, 152, 181, 212, 235, 237, 262, 278, 311, 350, 360, 362, 363, 365, 369, 372, 399, 402, 412, 569, 593, 760, 804, 921, 924, 926, 927, 931, 934, 936, 939, 941, 944, 945, 947, 982], "push": [25, 337, 341, 360, 954], "equat": [25, 306, 337, 362, 367, 369, 507, 508, 509, 510, 514, 515, 516, 540, 577, 632, 633, 637, 712, 828, 855, 856, 857, 858, 921, 928, 931, 936, 980], "twice": [25, 247, 310, 312, 339, 372, 569, 681, 886, 981], "approx": [25, 85, 211, 367, 369, 370, 931, 938, 945], "rare": [25, 152, 319, 341, 348, 350, 352, 360, 362, 366, 539, 598, 608, 609, 619, 630, 847, 872, 899, 927, 941, 955, 979, 980, 981, 985, 987], "explan": [25, 78, 323, 336, 337, 360, 370, 920, 930, 932, 947, 955, 975], "bag": [25, 64, 97, 103, 113, 148, 153, 311, 312, 333, 360, 466, 467, 468, 505, 506, 507, 508, 509, 510, 513, 514, 515, 690, 751, 774, 856, 929, 932, 953, 968, 972, 974, 975, 976, 977, 978, 985, 986, 988], "underli": [25, 51, 73, 117, 133, 180, 182, 240, 257, 258, 317, 324, 348, 350, 352, 358, 360, 364, 366, 367, 368, 369, 371, 372, 388, 401, 402, 403, 412, 414, 415, 421, 422, 428, 474, 517, 518, 519, 520, 543, 544, 547, 552, 608, 618, 630, 641, 645, 746, 749, 750, 760, 776, 777, 778, 779, 780, 781, 782, 793, 847, 855, 856, 857, 858, 896, 927, 928, 932, 937, 944, 946, 974, 976, 978, 979, 980, 981, 982, 984, 985, 988], "restrict": [25, 61, 62, 146, 148, 196, 267, 339, 343, 348, 360, 362, 369, 370, 415, 443, 452, 482, 531, 560, 603, 604, 605, 606, 608, 632, 633, 657, 663, 731, 737, 738, 774, 796, 798, 799, 800, 802, 804, 805, 806, 808, 833, 931, 947, 967, 968, 972, 974, 982, 984], "interv": [25, 97, 142, 148, 179, 180, 181, 197, 235, 332, 350, 360, 366, 369, 372, 389, 390, 466, 467, 468, 507, 508, 510, 512, 514, 515, 585, 586, 588, 627, 691, 697, 699, 750, 767, 774, 811, 813, 827, 849, 850, 851, 871, 923, 927, 931, 941, 947, 979, 983], "move": [25, 107, 236, 271, 298, 336, 337, 341, 343, 360, 362, 499, 500, 521, 522, 523, 525, 527, 528, 898, 965, 972, 973, 977, 980, 982, 985, 986], "characterist": [25, 40, 57, 140, 148, 206, 228, 232, 273, 319, 332, 334, 342, 360, 366, 372, 453, 454, 573, 588, 608, 652, 656, 658, 676, 731, 737, 738, 765, 774, 777, 815, 852, 927], "difficult": [25, 151, 187, 337, 345, 360, 367, 369, 503, 504, 509, 511, 512, 926, 928, 930, 934, 936, 938, 947, 955, 972, 986], "bayesian": [25, 50, 148, 157, 167, 220, 222, 226, 227, 367, 388, 474, 478, 482, 594, 595, 606, 607, 744, 745, 809, 811, 823, 828, 920, 951, 953, 967, 968, 978, 985], "domingo": [25, 737, 931], "pazzani": 25, "proc": [25, 72, 360, 370, 400, 639, 643, 783, 920, 928, 933, 937], "13th": 25, "intl": [25, 366], "1996": [25, 362, 369, 373, 395, 466, 467, 468, 505, 506, 941], "zadrozni": [25, 360, 388, 626], "bianca": 25, "charl": [25, 713, 972, 975, 978, 982, 984, 987], "elkan": [25, 281, 360, 388, 394, 397, 409, 626, 978, 982, 983, 985, 986], "vol": [25, 143, 241, 334, 362, 424, 509, 510, 578, 585, 595, 614, 635, 636, 744, 773, 785, 921, 933, 934], "2001": [25, 140, 153, 234, 359, 362, 369, 388, 401, 402, 403, 412, 461, 509, 510, 514, 515, 578, 584, 589, 595, 641, 646, 684, 737, 840, 872, 921, 927, 931, 937, 939, 943, 946], "plot_compare_calibr": 25, "discrimin": [26, 94, 128, 130, 148, 156, 194, 200, 213, 262, 326, 334, 369, 425, 462, 499, 500, 516, 732, 797, 920, 928, 931, 934, 945, 947, 953, 964, 968, 975], "ellipsoid": [26, 148, 220, 221, 499, 500, 744, 745, 925, 930], "ledoit": [26, 70, 71, 75, 148, 423, 425, 429, 430, 462, 499, 925], "wolf": [26, 70, 71, 75, 148, 423, 425, 429, 430, 462, 499, 925, 979], "oa": [26, 70, 148, 364, 419, 420, 423, 424, 426, 427, 462, 499, 746, 925], "hand": [26, 78, 80, 87, 90, 111, 128, 140, 148, 151, 152, 172, 186, 203, 209, 210, 212, 232, 237, 244, 298, 323, 331, 332, 334, 337, 339, 343, 345, 349, 356, 367, 368, 369, 371, 452, 593, 663, 737, 774, 852, 920, 924, 927, 931, 933, 935, 939, 944, 946, 955, 957, 960, 963, 964], "built": [27, 78, 100, 107, 109, 153, 187, 238, 266, 280, 315, 323, 335, 337, 338, 339, 341, 343, 345, 346, 348, 349, 350, 353, 356, 361, 362, 363, 366, 369, 371, 396, 453, 503, 504, 505, 506, 511, 512, 538, 539, 543, 547, 589, 590, 591, 592, 593, 596, 597, 602, 608, 610, 611, 612, 613, 622, 623, 624, 625, 631, 749, 750, 757, 779, 782, 788, 789, 857, 858, 915, 927, 931, 932, 944, 945, 947, 951, 955, 966, 972, 975, 976, 978, 984], "calibr": [27, 197, 326, 350, 462, 465, 514, 519, 608, 626, 659, 678, 690, 733, 736, 737, 774, 786, 844, 847, 920, 927, 931, 944, 946, 953, 968, 969, 976, 978], "enabl": [27, 46, 66, 109, 152, 187, 201, 275, 281, 283, 284, 307, 335, 337, 342, 345, 348, 350, 353, 358, 361, 362, 363, 367, 369, 370, 399, 484, 485, 491, 509, 510, 511, 512, 513, 529, 530, 540, 541, 552, 560, 744, 745, 746, 749, 808, 809, 821, 844, 847, 848, 849, 850, 851, 852, 853, 862, 892, 898, 921, 923, 928, 930, 931, 934, 941, 942, 945, 946, 952, 955, 972, 978, 979, 980, 982, 983, 984, 985, 986, 987], "troubl": [27, 370], "accuracy_scor": [27, 99, 136, 239, 278, 290, 310, 319, 349, 507, 514, 658, 678, 679, 683, 687, 691, 732, 733, 736, 741, 743, 920, 931, 973, 974, 975, 984], "gaussian_process": [27, 28, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 326, 350, 372, 593, 932, 975, 978, 979], "gaussianprocessclassifi": [27, 28, 136, 137, 138, 139, 143, 350, 372, 561, 569, 570, 572, 573, 932, 978, 980, 982, 986], "iri": [27, 37, 41, 68, 79, 84, 89, 96, 97, 109, 119, 126, 129, 134, 148, 157, 162, 172, 219, 223, 229, 240, 241, 244, 245, 256, 264, 269, 282, 286, 293, 294, 298, 301, 313, 318, 330, 331, 349, 362, 363, 366, 367, 369, 446, 454, 491, 499, 503, 507, 514, 560, 572, 581, 626, 746, 760, 842, 843, 844, 847, 852, 855, 859, 860, 861, 920, 921, 925, 930, 931, 934, 938, 941, 944, 945, 946, 947, 957, 964, 965, 968, 985], "load_iri": [27, 37, 41, 68, 81, 89, 92, 94, 96, 107, 109, 119, 126, 129, 137, 162, 172, 188, 219, 223, 229, 240, 241, 242, 244, 245, 256, 261, 264, 269, 280, 282, 285, 292, 294, 295, 298, 301, 315, 318, 349, 356, 362, 363, 366, 369, 371, 511, 517, 552, 560, 569, 570, 572, 573, 581, 608, 609, 737, 746, 749, 750, 752, 760, 776, 797, 842, 843, 844, 855, 857, 859, 860, 861, 921, 926, 931, 932, 933, 934, 938, 941, 947, 957, 963, 964, 965, 978, 980, 983], "gpc": [27, 134, 148, 454, 560, 561, 563, 564, 569, 570, 572, 573, 653, 690, 953, 968, 982], "saga": [27, 170, 194, 195, 608, 609, 622, 624, 637, 760, 927, 979, 981], "multi_class": [27, 171, 194, 244, 280, 519, 560, 608, 609, 737, 782, 847, 927, 932, 946, 972, 976, 980, 985, 987], "ovr": [27, 171, 194, 252, 280, 307, 608, 609, 737, 777, 847, 849, 852, 927, 931, 932, 946, 972, 977, 978, 980, 981, 982, 986, 987], "n_classifi": [27, 519, 520], "xx": [27, 31, 38, 53, 73, 107, 111, 116, 126, 137, 138, 139, 152, 166, 186, 189, 190, 191, 192, 193, 204, 206, 213, 225, 259, 268, 275, 276, 292, 297, 298, 302, 303, 304, 307, 308, 341], "yy": [27, 31, 38, 53, 73, 107, 116, 126, 137, 139, 152, 186, 190, 191, 192, 193, 204, 206, 213, 259, 268, 275, 276, 292, 297, 298, 302, 303, 304, 307, 308], "xfull": 27, "imshow_handl": 27, "04": [27, 36, 38, 50, 87, 95, 140, 178, 213, 221, 227, 235, 248, 266, 305, 334, 369, 371, 421, 422, 737, 746, 760, 927, 931, 935, 945], "cax": [27, 138, 246], "orient": [27, 85, 151, 199, 273, 350, 859, 928], "horizont": [27, 85, 199, 211, 273, 276, 342, 350, 414, 465, 647, 651], "plot_classification_prob": 27, "salt": [28, 211, 275, 986], "convei": [28, 204, 275, 964], "real": [28, 52, 68, 71, 73, 97, 138, 151, 203, 215, 229, 241, 249, 257, 274, 275, 312, 323, 326, 330, 331, 334, 341, 343, 346, 348, 349, 350, 359, 360, 362, 364, 366, 367, 369, 370, 419, 439, 440, 443, 444, 445, 446, 447, 450, 451, 454, 460, 470, 501, 502, 503, 505, 506, 507, 508, 509, 510, 514, 515, 542, 544, 545, 546, 547, 548, 549, 550, 649, 654, 673, 677, 701, 704, 706, 734, 742, 743, 773, 774, 805, 806, 849, 850, 851, 852, 853, 855, 856, 858, 921, 922, 923, 928, 931, 933, 935, 936, 937, 947, 950, 968, 972, 985], "particularli": [28, 64, 65, 68, 95, 116, 180, 208, 235, 275, 281, 308, 319, 323, 337, 346, 350, 362, 363, 365, 368, 370, 446, 752, 785, 884, 899, 900, 927, 928, 931, 933, 952, 955, 965, 972, 977, 979, 980, 986], "linearli": [28, 90, 101, 151, 158, 193, 200, 206, 244, 245, 275, 278, 302, 310, 323, 334, 348, 367, 369, 465, 592, 657, 931, 934, 937, 946, 964, 979], "semi": [28, 213, 275, 282, 326, 332, 350, 438, 454, 485, 538, 540, 626, 678, 774, 808, 812, 842, 843, 844, 852, 929, 934, 937, 953, 968, 972, 984, 987], "transpar": [28, 275, 916, 955], "ga\u00ebl": [28, 41, 47, 67, 80, 81, 92, 162, 176, 177, 275, 302, 303, 351, 955], "modifi": [28, 41, 47, 67, 69, 80, 81, 162, 176, 177, 189, 199, 200, 201, 223, 303, 308, 335, 337, 339, 341, 350, 369, 372, 394, 397, 404, 409, 418, 432, 433, 434, 435, 445, 460, 531, 560, 561, 563, 569, 626, 628, 639, 643, 678, 679, 717, 732, 733, 736, 865, 927, 944, 945, 952, 963, 967, 968, 972, 974, 975, 978, 979, 981, 982, 983, 984, 985, 987], "listedcolormap": [28, 107, 256, 261, 264, 268, 275], "make_moon": [28, 40, 57, 206, 235, 268, 269, 275, 333, 920, 979, 983], "make_circl": [28, 40, 57, 90, 116, 204, 268, 269, 275, 289, 333, 973, 980, 983], "neural_network": [28, 148, 152, 216, 267, 268, 269, 270, 271, 325, 326, 348, 932, 935, 974], "mlpclassifi": [28, 148, 267, 268, 270, 325, 452, 454, 464, 472, 521, 804, 806, 818, 932, 935, 980, 981, 982, 983, 984, 985, 986, 987, 988], "kneighborsclassifi": [28, 119, 125, 255, 256, 261, 262, 278, 282, 284, 310, 369, 552, 791, 795, 796, 797, 798, 799, 932, 934, 964, 972, 982, 984, 985, 986, 987, 988], "decisiontreeclassifi": [28, 98, 99, 101, 107, 119, 239, 314, 315, 318, 350, 369, 503, 505, 507, 509, 511, 514, 581, 752, 772, 856, 857, 859, 860, 861, 921, 932, 947, 973, 974, 976, 977, 981, 982, 983, 984, 985, 986, 987], "adaboostclassifi": [28, 98, 99, 101, 107, 369, 504, 509, 511, 974, 975, 978, 979, 981, 982, 985, 987], "discriminant_analysi": [28, 30, 31, 94, 200, 262, 319, 326, 358, 486, 797, 925, 932, 972, 975, 976, 977, 978, 979], "quadraticdiscriminantanalysi": [28, 31, 499, 925, 932, 934, 972, 977, 979, 987], "decisionboundarydisplai": [28, 51, 101, 114, 119, 162, 171, 188, 238, 256, 261, 264, 278, 294, 295, 296, 299, 300, 315, 986, 987], "net": [28, 148, 157, 170, 190, 248, 343, 361, 366, 421, 422, 428, 451, 474, 507, 508, 509, 510, 514, 515, 516, 596, 597, 602, 607, 608, 609, 610, 611, 612, 613, 618, 626, 628, 631, 634, 734, 804, 855, 856, 857, 858, 920, 931, 936, 945, 953, 955, 968, 972, 977, 981, 982, 984], "adaboost": [28, 97, 107, 148, 469, 470, 503, 504, 509, 653, 743, 774, 855, 856, 953, 968, 974], "qda": [28, 31, 334, 499, 500, 953, 968, 977], "025": [28, 232, 640, 644], "n_clusters_per_class": [28, 82, 103, 130, 132, 232, 263, 268, 275, 342, 465], "uniform": [28, 33, 49, 110, 111, 114, 129, 136, 141, 144, 158, 159, 193, 204, 206, 209, 243, 256, 259, 260, 265, 268, 274, 276, 277, 284, 297, 339, 342, 362, 389, 390, 501, 519, 520, 560, 561, 578, 589, 599, 600, 604, 618, 626, 627, 628, 649, 671, 672, 677, 694, 695, 697, 699, 700, 702, 734, 750, 758, 760, 783, 784, 787, 790, 791, 798, 799, 813, 825, 827, 836, 872, 886, 920, 921, 930, 931, 934, 978, 980, 982, 986], "linearly_separ": [28, 268], "27": [28, 43, 307, 334, 362, 370, 372, 474, 663, 737, 738, 848, 931, 965, 972, 974], "ds_cnt": [28, 275, 276], "rdbu": [28, 85, 195, 268, 298, 303], "cm_bright": [28, 268, 275], "ff0000": [28, 261, 268], "0000ff": [28, 261, 268], "ep": [28, 40, 42, 45, 60, 162, 164, 202, 210, 348, 362, 373, 395, 400, 405, 428, 581, 596, 597, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 613, 631, 632, 633, 634, 640, 644, 664, 690, 800, 839, 840, 841, 943, 987, 988], "lstrip": [28, 40, 57, 206, 268, 275], "plot_classifier_comparison": [28, 275], "8x8": [29, 80, 170, 210, 262, 271, 334, 452, 963], "grayscal": 29, "imread": 29, "load_digit": [29, 47, 48, 53, 66, 67, 80, 124, 125, 131, 170, 186, 200, 210, 211, 233, 234, 237, 243, 250, 255, 257, 262, 269, 271, 287, 288, 343, 363, 396, 482, 483, 484, 485, 549, 550, 588, 589, 618, 638, 639, 640, 641, 957, 961, 962, 963, 964, 965, 978, 983], "set_axis_off": 29, "gray_r": [29, 80, 88, 138, 200, 271, 287, 288, 963], "64": [29, 44, 49, 53, 80, 85, 200, 210, 211, 214, 233, 244, 257, 262, 323, 324, 334, 335, 343, 367, 445, 452, 549, 550, 596, 608, 638, 639, 640, 641, 848, 934, 963, 972, 974, 980, 981, 984, 985, 986], "entir": [29, 146, 179, 187, 271, 273, 281, 318, 319, 331, 338, 339, 350, 356, 362, 366, 368, 370, 422, 442, 484, 538, 539, 540, 541, 597, 601, 603, 605, 608, 609, 611, 613, 615, 616, 618, 626, 632, 633, 683, 743, 776, 777, 780, 805, 807, 808, 821, 832, 833, 835, 836, 837, 838, 900, 920, 921, 931, 945, 947, 964, 981, 982], "confus": [29, 148, 228, 244, 287, 288, 310, 350, 454, 581, 602, 647, 663, 665, 668, 678, 679, 687, 703, 733, 736, 774, 852, 966, 972, 973, 977, 981, 982, 984, 985, 986, 987], "figure_": [29, 152, 216, 280, 282, 344, 389, 581, 582, 647, 648, 650, 651, 652, 752], "confusion_matrix": [29, 207, 229, 288, 647, 663, 703, 771, 931, 966, 973, 978, 979, 982, 983, 985], "ground": [29, 36, 41, 45, 52, 53, 56, 71, 75, 78, 88, 114, 143, 163, 173, 179, 180, 227, 238, 311, 350, 361, 362, 653, 654, 655, 658, 662, 663, 664, 665, 667, 668, 671, 672, 673, 677, 678, 679, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 732, 733, 734, 735, 736, 742, 743, 931, 944, 957, 965, 980], "truth": [29, 36, 41, 45, 52, 53, 56, 71, 75, 78, 88, 93, 114, 143, 163, 173, 179, 180, 227, 238, 311, 350, 361, 362, 653, 654, 655, 658, 662, 663, 664, 665, 667, 668, 671, 672, 673, 675, 677, 678, 679, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 732, 733, 734, 735, 736, 742, 743, 931, 957, 965, 980, 986], "gt": [29, 335, 337, 341], "rebuilt": [29, 788, 789], "plot_digits_classif": 29, "oracl": [30, 179, 197, 375, 419, 420, 423, 424, 425, 426, 925, 972], "shrinkag": [30, 70, 72, 75, 93, 113, 148, 264, 375, 419, 420, 423, 424, 425, 426, 427, 429, 430, 431, 489, 493, 499, 511, 512, 746, 927, 953, 968, 972, 976, 977, 979], "lineardiscriminantanalysi": [30, 31, 94, 200, 262, 319, 358, 486, 500, 797, 925, 932, 934, 972, 975, 976, 977, 978, 979, 981, 984, 986, 987], "200": [30, 31, 40, 50, 55, 69, 88, 101, 109, 111, 117, 139, 165, 174, 180, 183, 184, 185, 191, 196, 200, 217, 221, 242, 244, 245, 273, 276, 289, 297, 298, 317, 319, 332, 339, 348, 367, 369, 374, 391, 404, 418, 421, 422, 483, 484, 485, 488, 489, 490, 493, 497, 534, 599, 601, 621, 629, 642, 760, 805, 806, 845, 849, 850, 851, 852, 853, 946], "n_averag": 30, "n_features_max": 30, "ish": 30, "acc_clf1": 30, "acc_clf2": 30, "acc_clf3": 30, "n_features_rang": 30, "score_clf1": 30, "score_clf2": 30, "score_clf3": 30, "clf1": [30, 119, 120, 369, 519], "lsqr": [30, 499, 622, 624, 637, 925, 973, 979, 986], "clf2": [30, 119, 120, 339, 356, 369, 519], "store_precis": [30, 72, 419, 420, 423, 424, 425, 426], "assume_cent": [30, 72, 364, 375, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430], "clf3": [30, 119, 120, 339, 369, 519], "covariance_estim": [30, 499, 925, 984], "features_samples_ratio": 30, "gold": [30, 173, 180, 182, 185, 189, 193, 196, 222, 227, 242, 259, 297, 343], "navi": [30, 72, 89, 94, 95, 117, 158, 182, 190, 202, 222, 223, 224, 227, 242, 244, 250, 258, 265, 289, 317], "65": [30, 152, 362, 390, 452, 547, 690, 739, 740, 938, 962, 972, 973, 974], "plot_lda": 30, "doubl": [31, 247, 337, 350, 367, 488, 490, 497, 649, 788, 789, 799, 915, 921, 946, 947, 972, 982, 983], "deviat": [31, 56, 73, 102, 105, 106, 107, 135, 140, 142, 144, 151, 158, 185, 232, 233, 234, 235, 236, 238, 259, 260, 273, 278, 329, 333, 334, 342, 346, 350, 360, 366, 369, 400, 422, 451, 461, 462, 463, 464, 466, 467, 468, 472, 474, 475, 480, 502, 544, 561, 584, 594, 595, 621, 673, 701, 752, 794, 817, 818, 828, 836, 837, 838, 927, 931, 937, 941, 964, 978, 979, 980, 983, 984, 985], "own": [31, 197, 226, 253, 255, 289, 311, 324, 331, 340, 341, 342, 345, 346, 353, 361, 362, 374, 378, 391, 404, 483, 507, 514, 596, 744, 745, 790, 791, 792, 794, 796, 798, 799, 800, 855, 857, 873, 878, 899, 927, 933, 934, 937, 946, 955, 965, 966, 979, 980, 982], "mpl": [31, 221, 222, 223, 227, 273], "linearsegmentedcolormap": 31, "red_blue_class": 31, "register_cmap": 31, "dataset_fixed_cov": 31, "dim": [31, 188, 210, 256, 261, 262, 264, 294, 295, 477, 649], "83": [31, 35, 334, 339, 372, 657, 735, 931, 962, 966, 975], "dataset_cov": 31, "matric": [31, 36, 73, 75, 85, 184, 222, 223, 225, 226, 227, 253, 266, 281, 291, 310, 311, 329, 331, 339, 340, 348, 349, 350, 361, 362, 363, 364, 365, 367, 370, 371, 377, 400, 401, 403, 414, 423, 432, 433, 434, 484, 485, 488, 490, 491, 494, 497, 499, 500, 505, 506, 513, 516, 531, 532, 539, 593, 608, 614, 622, 624, 637, 703, 709, 717, 723, 727, 728, 729, 730, 739, 744, 745, 774, 792, 795, 800, 811, 815, 817, 820, 823, 825, 826, 828, 830, 832, 834, 836, 837, 838, 839, 840, 849, 850, 852, 853, 863, 884, 890, 895, 902, 904, 905, 921, 925, 928, 929, 930, 932, 934, 935, 943, 945, 946, 951, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "linalg": [31, 50, 71, 72, 75, 91, 93, 95, 165, 221, 222, 223, 226, 227, 337, 343, 367, 401, 402, 403, 412, 482, 485, 491, 494, 607, 622, 624, 637, 641, 645, 882], "plot_data": 31, "fig_index": 31, "splot": [31, 222, 227], "tp": [31, 362, 662, 668, 680, 731, 732, 733, 736, 859, 931], "tp0": 31, "tp1": 31, "x0_tp": 31, "x0_fp": 31, "x1_tp": 31, "x1_fp": 31, "990000": 31, "dark": [31, 102, 151, 298, 332], "000099": 31, "pcolormesh": [31, 116, 126, 162, 256, 261, 294, 298, 302, 581], "white": [31, 53, 55, 85, 140, 193, 199, 259, 271, 275, 292, 297, 367, 370, 372, 575, 947, 972, 975, 978, 982, 986], "means_": [31, 221, 222, 223, 224, 226, 227, 499, 500, 744, 745], "yellow": [31, 83, 298, 932], "markers": [31, 45, 53, 56, 58, 59, 111, 138, 142, 209, 284], "markeredgecolor": [31, 45, 56, 58, 59], "plot_ellips": [31, 221], "cov": [31, 75, 78, 101, 226, 337, 350, 353, 355, 365, 375, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 469, 482, 484, 491, 498], "eigh": [31, 221, 222, 223, 226, 227, 367, 374, 483, 485, 987], "arctan": [31, 222, 227, 333, 468], "180": [31, 221, 222, 223, 226, 227, 262, 266, 343, 372, 452], "ell": [31, 221, 222, 223, 227, 359], "patch": [31, 46, 221, 222, 223, 226, 227, 230, 332, 341, 348, 367, 369, 505, 506, 533, 534, 537, 972, 980], "ellips": [31, 206, 221, 222, 223, 226, 227, 937], "set_clip_box": [31, 221, 222, 223, 226, 227], "set_alpha": [31, 98, 221, 222, 223, 226, 227], "add_artist": [31, 200, 221, 222, 223, 226, 227], "plot_lda_cov": 31, "plot_qda_cov": 31, "98": [31, 38, 40, 50, 57, 59, 75, 88, 206, 233, 268, 334, 341, 366, 369, 609, 783, 926, 933, 961, 966], "svd": [31, 91, 93, 116, 200, 311, 346, 358, 365, 374, 401, 403, 432, 433, 435, 482, 483, 484, 485, 489, 490, 491, 494, 496, 499, 500, 614, 622, 623, 624, 635, 636, 637, 807, 884, 925, 966, 974, 978, 979, 985, 987], "store_covari": [31, 499, 500, 977, 979], "tight": [31, 36, 95, 101, 107, 126, 129, 164, 166, 171, 172, 173, 183, 184, 188, 191, 193, 196, 201, 204, 225, 253, 259, 260, 264, 265, 294, 297, 298, 301, 302, 303, 315, 532, 642, 984], "92": [31, 46, 88, 271, 298, 332, 334, 488, 490, 497, 512, 547, 746, 760, 926, 966], "plot_lda_qda": 31, "handwritten": [32, 148, 198, 203, 210, 233, 270, 271, 287, 288, 330, 362, 369, 397, 452, 491, 494, 499, 516, 638, 639, 640, 641, 642, 654, 655, 667, 686, 740, 742, 797, 809, 818, 828, 840, 928, 934, 957, 968], "hierarch": [32, 36, 50, 148, 154, 284, 350, 370, 392, 394, 396, 454, 462, 464, 472, 480, 497, 680, 801, 828, 948, 952, 967, 968, 972, 975, 976], "coin": [32, 148, 362, 370, 392, 412, 943, 965], "shift": [32, 40, 148, 158, 202, 226, 258, 271, 273, 364, 368, 391, 398, 408, 411, 419, 462, 465, 639, 643, 794, 817, 941, 967, 968, 972, 976, 980], "chanc": [32, 45, 148, 179, 187, 194, 197, 235, 241, 244, 245, 311, 319, 336, 362, 366, 654, 655, 658, 666, 704, 706, 735, 742, 773, 931, 939, 947], "agglom": [32, 40, 43, 148, 362, 392, 396, 452, 641, 727, 801, 975], "bisect": [32, 148, 394, 397, 462, 986], "quantiz": [32, 148, 331, 332, 362, 394, 397, 399, 456, 728, 813, 905, 941], "birch": [32, 40, 148, 284, 325, 350, 399, 462, 967, 968, 976, 980, 981, 982, 983, 985, 986, 987, 988], "toi": [32, 45, 49, 52, 78, 89, 102, 114, 119, 120, 148, 161, 169, 193, 205, 221, 269, 295, 305, 330, 343, 348, 369, 370, 391, 392, 393, 395, 398, 399, 400, 402, 408, 419, 462, 464, 472, 513, 589, 627, 675, 705, 745, 794, 801, 809, 828, 851, 928, 930, 931, 937, 941, 968], "linkag": [32, 35, 36, 37, 40, 43, 48, 51, 62, 148, 154, 391, 392, 396, 413, 462, 464, 472, 828, 951, 965, 975, 980, 983], "dbscan": [32, 40, 60, 148, 348, 350, 400, 402, 405, 462, 654, 655, 667, 686, 740, 742, 800, 828, 934, 967, 968, 972, 974, 976, 977, 979, 980, 981], "optic": [32, 40, 148, 284, 330, 373, 395, 405, 406, 407, 452, 967, 968, 981, 985, 986, 987, 988], "affin": [32, 40, 148, 273, 329, 339, 350, 361, 367, 391, 392, 396, 402, 404, 412, 462, 485, 641, 645, 654, 655, 667, 686, 740, 742, 843, 925, 928, 931, 967, 968, 972, 973, 976, 982, 983, 985, 987], "propag": [32, 148, 286, 332, 361, 391, 404, 452, 462, 464, 654, 655, 663, 664, 667, 668, 686, 740, 742, 808, 822, 842, 843, 844, 897, 898, 935, 953, 967, 968, 972, 984, 987], "agglomer": [32, 148, 329, 362, 370, 396, 452, 550, 556, 595, 746, 751, 808, 968], "unstructur": [32, 148, 270, 362, 392, 396, 413, 453, 480, 801, 943, 955, 976], "dendrogram": [32, 148, 154, 362, 392, 396, 454, 984], "pictur": [32, 148, 210, 227, 332, 351, 362, 367, 370, 412, 443, 444, 471, 952], "greek": [32, 148, 362, 412], "silhouett": [32, 34, 45, 52, 53, 148, 311, 337, 397, 462, 739, 740, 972, 976], "embed": [32, 40, 42, 104, 135, 148, 198, 201, 203, 205, 253, 262, 343, 350, 361, 362, 392, 402, 412, 439, 452, 494, 499, 516, 532, 589, 638, 639, 640, 641, 642, 643, 644, 645, 646, 797, 809, 818, 839, 840, 841, 923, 934, 937, 943, 948, 967, 968, 972, 973, 983, 984, 986], "explor": [33, 102, 103, 203, 204, 236, 237, 243, 244, 282, 298, 311, 319, 331, 334, 336, 343, 356, 362, 369, 422, 746, 749, 757, 920, 927, 928, 930, 936, 938, 939, 941, 955, 960, 966, 978], "uniformli": [33, 111, 128, 206, 221, 280, 339, 466, 467, 468, 501, 592, 750, 758, 760, 827, 920, 921, 931, 934, 941, 976, 981], "divid": [33, 39, 44, 82, 85, 130, 140, 179, 221, 319, 333, 334, 359, 362, 366, 367, 419, 420, 421, 422, 423, 424, 425, 426, 462, 469, 484, 491, 600, 601, 604, 605, 606, 614, 615, 626, 627, 628, 669, 675, 683, 687, 705, 741, 743, 805, 806, 849, 852, 884, 887, 888, 920, 928, 930, 931, 934, 941, 945, 966, 972, 979, 980, 983], "randomli": [33, 44, 46, 56, 65, 79, 102, 114, 146, 148, 152, 183, 196, 210, 213, 226, 230, 241, 252, 287, 319, 324, 346, 348, 349, 362, 366, 369, 372, 399, 408, 462, 465, 469, 473, 481, 487, 495, 496, 501, 509, 510, 513, 514, 515, 560, 561, 621, 629, 640, 644, 666, 744, 745, 804, 841, 855, 856, 857, 858, 930, 932, 934, 937, 939, 943, 947, 964, 966, 983, 987], "quiroz": [33, 52, 158, 236, 238, 278, 310, 311, 312], "fundament": [33, 45, 74, 311, 335, 349, 365, 446, 488, 490, 497, 658, 927, 931], "homogen": [33, 34, 35, 40, 42, 45, 53, 311, 332, 348, 350, 364, 369, 372, 564, 654, 667, 680, 685, 686, 706, 742, 928, 929, 931, 981], "frequent": [33, 147, 238, 244, 245, 311, 326, 334, 337, 370, 501, 540, 580, 798, 821, 825, 836, 921, 923, 931, 945, 949, 952], "ari": [33, 53, 311, 362, 655, 977, 983], "mutual": [33, 34, 45, 53, 127, 148, 369, 371, 542, 545, 546, 549, 550, 556, 557, 558, 559, 654, 655, 665, 704, 706, 735, 742, 920, 927, 931, 932, 972, 978, 988], "mi": [33, 128, 362, 557, 558, 654, 704, 706, 921, 931, 945], "theoret": [33, 52, 135, 361, 362, 369, 503, 504, 589, 654, 675, 705, 847, 920, 928, 930, 931, 933, 943, 945, 946, 954, 955], "nmi": [33, 362, 667, 685, 686, 706], "ami": [33, 45, 53, 362, 654], "score_func": [33, 542, 545, 546, 548, 549, 550, 691, 972, 974], "rand_scor": [33, 362, 665, 931, 984], "adjusted_rand_scor": [33, 34, 45, 53, 311, 362, 654, 665, 691, 706, 735, 931, 985], "mutual_info_scor": [33, 362, 654, 931, 980, 983, 984], "normalized_mutual_info_scor": [33, 362, 685, 704, 742, 931, 980, 986], "adjusted_mutual_info_scor": [33, 34, 45, 53, 362, 655, 665, 704, 706, 735, 931, 972, 980, 984, 988], "random_label": 33, "labels_a": 33, "labels_b": 33, "fixed_classes_uniform_labelings_scor": 33, "n_clusters_rang": 33, "n_run": [33, 56, 156, 311], "clase": [33, 278], "seaborn": [33, 98, 100, 150, 151, 158, 226, 235, 256, 337, 353, 355, 951], "sn": [33, 98, 100, 150, 151, 158, 226, 235, 256], "color_palett": [33, 98, 100, 226], "colorblind": [33, 98, 100], "vx": 33, "errorbar": [33, 56, 72, 74, 132, 141, 142, 255, 290, 301, 752], "refer": [33, 34, 55, 58, 65, 112, 118, 133, 144, 197, 242, 263, 273, 280, 281, 282, 283, 284, 285, 311, 324, 326, 335, 337, 338, 339, 341, 342, 343, 344, 345, 348, 349, 350, 351, 353, 356, 363, 373, 374, 375, 388, 389, 390, 391, 393, 395, 397, 398, 400, 401, 402, 403, 404, 407, 412, 413, 414, 417, 419, 422, 423, 424, 425, 448, 453, 461, 463, 465, 466, 467, 468, 469, 470, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 494, 497, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 540, 543, 544, 545, 552, 557, 558, 560, 561, 564, 569, 572, 573, 577, 578, 581, 582, 584, 585, 586, 587, 588, 589, 592, 593, 594, 595, 597, 599, 601, 603, 605, 606, 608, 611, 613, 615, 616, 617, 618, 621, 623, 625, 626, 628, 629, 632, 633, 638, 639, 640, 641, 642, 643, 644, 645, 646, 651, 654, 655, 657, 658, 659, 660, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 683, 684, 685, 686, 687, 689, 690, 692, 705, 707, 708, 718, 732, 734, 735, 737, 738, 739, 740, 742, 744, 745, 746, 748, 749, 750, 752, 760, 768, 769, 770, 771, 772, 773, 775, 778, 779, 783, 784, 785, 787, 793, 794, 795, 797, 804, 805, 806, 814, 815, 824, 825, 835, 840, 841, 842, 843, 844, 847, 849, 850, 852, 853, 855, 856, 857, 858, 872, 884, 897, 942, 952, 957, 961, 965, 966, 972, 976, 977, 979, 980, 982, 983, 984, 985, 986, 987], "satur": [33, 151, 273], "uniform_labelings_scor": 33, "nwith": [33, 52, 56, 132, 311], "constantli": [33, 179, 955], "unbound": [33, 930, 986], "cardin": [33, 105, 106, 112, 153, 362, 369, 413, 503, 504, 507, 508, 509, 510, 514, 515, 516, 629, 821, 855, 856, 857, 858, 931, 932, 939, 941, 986, 987], "why": [33, 48, 85, 151, 153, 156, 168, 232, 235, 311, 337, 345, 350, 362, 364, 367, 373, 395, 397, 401, 931, 933, 946, 961, 964, 975], "chart": [33, 240, 932, 959, 975], "henc": [33, 55, 66, 151, 183, 210, 244, 298, 310, 311, 323, 332, 339, 341, 343, 350, 362, 366, 369, 370, 437, 458, 489, 491, 492, 493, 513, 540, 593, 596, 602, 610, 612, 622, 637, 654, 655, 659, 665, 680, 706, 735, 742, 765, 766, 783, 784, 785, 786, 787, 823, 928, 930, 931, 932, 937, 938, 941, 952, 979, 980, 983, 984, 986], "safe": [33, 151, 168, 311, 337, 339, 362, 363, 385, 458, 459, 538, 541, 723, 727, 841, 897, 903, 934, 978, 979, 980, 985, 986], "stabil": [33, 103, 151, 183, 200, 240, 273, 311, 350, 359, 600, 604, 620, 786, 805, 806, 824, 835, 883, 921, 927, 930, 941, 952, 957, 972, 976, 980, 981, 982, 983, 984, 985, 986, 987], "mislead": [33, 105, 106, 112, 151, 338, 352, 369, 503, 504, 507, 508, 509, 510, 514, 515, 516, 855, 856, 857, 858, 968, 985], "meaning": [33, 204, 262, 312, 359, 366, 370, 371, 372, 498, 678, 679, 687, 732, 733, 736, 797, 935, 945, 946, 972], "plot_adjusted_for_chance_measur": 33, "brendan": [34, 391, 404], "frei": [34, 391, 404, 982], "delbert": [34, 391, 404], "dueck": [34, 391, 404], "messag": [34, 40, 57, 64, 85, 310, 311, 332, 335, 336, 337, 341, 342, 345, 346, 362, 391, 404, 489, 493, 498, 524, 577, 662, 746, 749, 750, 752, 760, 772, 775, 777, 797, 805, 806, 866, 867, 868, 871, 874, 894, 915, 931, 941, 972, 976, 980, 982, 983, 984, 985, 986, 987, 988], "feb": [34, 391, 404], "affinitypropag": [34, 40, 284, 362, 972, 975, 976, 980, 983, 985, 986, 987, 988], "labels_tru": [34, 45, 59, 362, 654, 655, 664, 665, 667, 680, 685, 686, 704, 706, 735, 742], "af": 34, "prefer": [34, 40, 227, 244, 273, 319, 323, 324, 325, 335, 337, 338, 339, 350, 362, 366, 367, 369, 370, 391, 404, 421, 422, 428, 437, 458, 459, 577, 582, 583, 604, 608, 609, 651, 675, 677, 706, 707, 797, 823, 847, 848, 889, 897, 920, 923, 925, 927, 931, 936, 946, 947, 951, 964, 973, 979, 981, 985, 986], "cluster_centers_indic": [34, 404], "cluster_centers_indices_": [34, 391], "labels_": [34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 47, 48, 53, 56, 57, 58, 60, 62, 284, 311, 337, 350, 362, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 405, 965, 977], "n_clusters_": [34, 45, 58, 392, 396], "homogeneity_scor": [34, 45, 53, 311, 362, 667, 685, 742, 931], "completeness_scor": [34, 45, 53, 281, 311, 362, 685, 686, 742, 931], "silhouette_scor": [34, 45, 53, 55, 311, 337, 362, 972, 976, 978, 980, 982, 986], "sqeuclidean": [34, 400, 407, 727, 728, 729], "cycler": 34, "viridi": [34, 253, 647], "class_memb": 34, "cluster_cent": [34, 56, 58, 59, 411], "plot_affinity_propag": [34, 391, 404], "impos": [35, 52, 115, 173, 348, 362, 367, 369, 370, 477, 607, 927], "simpli": [35, 78, 116, 135, 143, 203, 213, 244, 266, 282, 283, 323, 332, 337, 339, 342, 348, 350, 364, 365, 366, 367, 369, 370, 435, 645, 711, 714, 815, 886, 923, 931, 932, 933, 934, 945, 958, 966, 979, 980, 981], "There": [35, 42, 135, 197, 203, 215, 227, 230, 232, 235, 330, 332, 334, 337, 338, 339, 342, 348, 350, 353, 359, 361, 362, 367, 369, 370, 371, 402, 412, 484, 503, 504, 509, 510, 538, 539, 541, 556, 595, 921, 927, 928, 929, 930, 931, 934, 938, 941, 945, 946, 947, 950, 954, 965, 972, 980], "singl": [35, 44, 48, 49, 53, 56, 57, 66, 97, 100, 107, 108, 109, 117, 133, 135, 141, 146, 148, 152, 154, 156, 179, 181, 216, 218, 226, 231, 244, 270, 284, 298, 310, 311, 312, 315, 317, 319, 323, 324, 331, 332, 337, 342, 344, 345, 346, 348, 349, 350, 360, 361, 363, 365, 366, 367, 369, 370, 371, 385, 388, 391, 392, 396, 397, 399, 404, 414, 416, 417, 443, 444, 446, 456, 459, 484, 503, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 532, 542, 549, 550, 552, 556, 577, 582, 584, 593, 616, 617, 623, 626, 627, 628, 640, 642, 644, 660, 671, 672, 673, 674, 685, 686, 687, 690, 723, 734, 744, 745, 746, 749, 750, 760, 767, 770, 771, 773, 774, 777, 785, 788, 789, 793, 805, 806, 807, 817, 818, 821, 822, 823, 828, 842, 843, 855, 856, 857, 858, 863, 895, 899, 918, 920, 926, 927, 928, 931, 932, 934, 936, 938, 939, 941, 945, 946, 947, 951, 955, 957, 964, 966, 972, 973, 974, 976, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988], "unstabl": [35, 61, 151, 362, 364, 365, 639, 643, 883, 884, 947, 976, 977, 979, 984, 986], "quickli": [35, 216, 269, 280, 334, 337, 338, 366, 369, 642, 927, 934, 935, 955, 966, 983], "fight": [35, 955], "percol": 35, "distanc": [35, 36, 52, 55, 56, 60, 62, 70, 74, 90, 146, 148, 154, 165, 180, 199, 201, 204, 210, 253, 255, 256, 261, 263, 265, 266, 273, 278, 280, 284, 285, 310, 311, 323, 334, 346, 348, 350, 359, 362, 364, 367, 368, 372, 373, 391, 392, 393, 394, 395, 396, 397, 399, 400, 402, 405, 406, 407, 408, 409, 411, 412, 413, 418, 419, 420, 421, 422, 423, 424, 425, 426, 488, 490, 497, 557, 558, 565, 569, 570, 572, 573, 578, 608, 609, 616, 618, 624, 625, 626, 627, 628, 638, 639, 640, 642, 643, 644, 645, 646, 649, 653, 674, 683, 707, 709, 711, 712, 713, 714, 717, 718, 719, 720, 721, 722, 727, 728, 729, 730, 739, 740, 743, 777, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 827, 841, 845, 847, 849, 851, 852, 853, 855, 856, 857, 858, 921, 925, 928, 929, 931, 937, 941, 943, 945, 946, 952, 964, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "merg": [35, 37, 42, 47, 283, 335, 337, 340, 345, 348, 351, 362, 391, 392, 393, 396, 413, 766, 965, 972, 979], "exagger": [35, 151, 642, 928], "behaviour": [35, 90, 180, 181, 197, 300, 337, 350, 362, 369, 509, 510, 514, 515, 552, 845, 855, 856, 904, 920, 921, 931, 941, 980, 983, 984, 987], "shortest": [35, 342, 346, 638, 889, 928, 985], "mechan": [35, 307, 324, 339, 362, 370, 414, 807, 929, 947, 955], "resembl": 35, "brittl": [35, 362], "pronounc": [35, 36, 48, 140], "kneighbors_graph": [35, 40, 57, 62, 253, 350, 362, 392, 396, 790, 791, 792, 794, 796, 798, 799, 800, 802, 934, 972, 976, 981], "geometri": [35, 362, 928, 934], "instabl": [35, 151, 263, 402, 485, 489, 493, 645, 979, 982, 985], "agglomerativeclust": [35, 36, 37, 40, 43, 48, 51, 57, 62, 350, 362, 391, 393, 396, 965, 975, 976, 977, 980, 981, 982, 983, 984, 985, 987], "1500": [35, 52, 57, 62, 83, 199, 203, 221], "knn_graph": 35, "include_self": [35, 40, 62, 801, 802, 976], "17": [35, 48, 73, 178, 268, 277, 332, 335, 342, 353, 354, 355, 362, 366, 372, 395, 411, 437, 447, 473, 481, 486, 490, 497, 499, 500, 505, 509, 510, 519, 520, 547, 578, 599, 607, 608, 609, 616, 619, 622, 624, 637, 642, 678, 679, 689, 710, 715, 733, 736, 738, 764, 786, 797, 812, 817, 818, 826, 828, 833, 849, 852, 855, 856, 857, 858, 920, 921, 932, 934, 941, 949, 970, 972, 973, 974, 975, 978, 981, 986], "plot_agglomerative_clust": 35, "waveform": 36, "euclidean": [36, 52, 53, 165, 210, 253, 261, 280, 285, 311, 359, 361, 362, 367, 368, 369, 370, 372, 391, 392, 395, 396, 400, 402, 407, 410, 413, 481, 487, 539, 565, 569, 572, 573, 626, 628, 640, 642, 645, 646, 649, 711, 712, 718, 719, 720, 721, 727, 728, 729, 730, 739, 740, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 841, 921, 925, 929, 932, 934, 943, 952, 976, 979, 980, 981, 982, 988], "cityblock": [36, 40, 362, 400, 407, 711, 727, 728, 729, 934], "invari": [36, 334, 350, 362, 372, 564, 639, 696, 764, 765, 927, 928, 931, 946, 952, 980, 983, 984, 985], "ie": [36, 61, 86, 391, 654, 717, 927, 941], "inter": [36, 105, 319, 369, 666, 890], "character": [36, 197, 314, 362, 366, 928], "ill": [36, 75, 184, 428, 600, 601, 604, 605, 606, 632, 633, 927, 930, 965, 982], "recov": [36, 60, 75, 86, 87, 93, 108, 135, 150, 178, 179, 199, 312, 364, 368, 371, 374, 410, 483, 509, 927, 928, 930, 952, 965, 978], "put": [36, 53, 126, 135, 137, 211, 217, 221, 268, 275, 284, 292, 302, 303, 308, 325, 339, 341, 342, 345, 372, 394, 397, 409, 465, 564, 597, 611, 744, 825, 836, 849, 850, 851, 852, 853, 874, 921, 928, 930, 931, 932, 938, 941, 954, 958, 960, 966, 984], "cc": [36, 335], "patheffect": 36, "pairwise_dist": [36, 350, 362, 373, 392, 395, 396, 400, 407, 638, 646, 711, 720, 728, 729, 739, 740, 792, 794, 796, 800, 929, 972, 976, 978, 980, 981, 983, 984], "sqr": 36, "sign": [36, 72, 78, 86, 89, 101, 163, 226, 268, 306, 337, 362, 367, 370, 494, 532, 539, 556, 585, 586, 608, 609, 616, 618, 624, 625, 626, 627, 684, 691, 847, 851, 882, 884, 896, 927, 931, 936, 941, 945, 946, 965, 972, 976, 981, 985, 987], "phi": [36, 367, 692, 814, 923, 931, 941, 946], "phase_nois": 36, "amplitude_nois": 36, "additional_nois": 36, "997": 36, "f7bd01": 36, "377eb8": [36, 40, 57, 58, 206], "f781bf": [36, 40, 57, 58], "set_label": [36, 138, 210], "avg_dist": [36, 730], "set_path_effect": 36, "withstrok": 36, "foreground": [36, 61], "cividi": 36, "vmin": [36, 75, 85, 88, 96, 138, 141, 158, 170, 195, 211, 225, 230, 270, 298], "45": [36, 59, 67, 129, 140, 153, 242, 246, 247, 298, 319, 366, 369, 370, 514, 515, 577, 584, 737, 744, 851, 921, 931, 939, 950, 962, 972, 975], "interclass": 36, "plot_agglomerative_clustering_metr": 36, "hierarchi": [37, 154, 400, 406, 413, 936, 965], "plot_dendrogram": 37, "kwarg": [37, 88, 339, 344, 376, 389, 414, 485, 488, 490, 567, 581, 596, 597, 602, 603, 610, 611, 612, 613, 631, 634, 648, 649, 650, 652, 691, 788, 789, 807, 808, 812, 862, 881, 979, 983, 985], "children_": [37, 392, 396, 413], "current_count": 37, "child_idx": 37, "leaf": [37, 104, 114, 116, 314, 318, 362, 369, 373, 392, 393, 394, 395, 396, 400, 407, 413, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 788, 789, 790, 791, 792, 793, 794, 796, 798, 799, 800, 855, 856, 857, 858, 859, 860, 934, 947, 975, 977, 979, 983, 986], "linkage_matrix": 37, "column_stack": [37, 268, 275], "distances_": [37, 392, 396, 984], "distance_threshold": [37, 392, 396, 981, 984], "truncate_mod": 37, "parenthesi": [37, 337], "plot_agglomerative_dendrogram": 37, "scalabl": [38, 40, 57, 148, 155, 228, 285, 311, 337, 362, 369, 370, 398, 441, 452, 539, 590, 752, 763, 772, 774, 786, 809, 818, 820, 847, 849, 852, 853, 923, 926, 928, 931, 944, 946, 955, 972, 975, 976, 982, 983, 986, 987], "hundr": [38, 110, 200, 277, 332, 366, 369, 511, 512, 928, 983], "thousand": [38, 210, 212, 277, 311, 332, 362, 369, 805, 806, 852, 928, 966, 981, 983], "million": [38, 51, 140, 156, 370, 372, 642, 928, 946, 955, 986, 987], "chose": [38, 151, 961], "usag": [38, 49, 68, 77, 89, 109, 130, 207, 211, 229, 256, 262, 264, 270, 294, 312, 323, 336, 337, 339, 340, 344, 345, 347, 350, 351, 362, 366, 367, 372, 373, 395, 400, 439, 511, 512, 559, 598, 608, 609, 610, 616, 618, 619, 626, 627, 628, 629, 630, 727, 730, 739, 740, 847, 855, 856, 857, 858, 884, 920, 923, 930, 931, 932, 934, 946, 953, 957, 961, 968, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988], "enjoi": 38, "edit": [38, 334, 336, 337, 340, 341, 345, 348, 353, 480, 484, 778, 925, 927, 932, 938, 966], "rerun": [38, 345], "158": [38, 369, 619], "manojkumarsivaraj334": 38, "joblib": [38, 50, 66, 253, 281, 332, 335, 337, 340, 346, 348, 350, 353, 355, 356, 361, 363, 373, 388, 392, 395, 396, 398, 400, 402, 407, 408, 411, 414, 417, 422, 458, 481, 485, 486, 487, 489, 492, 493, 495, 496, 498, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 544, 552, 560, 582, 584, 589, 597, 601, 603, 605, 607, 608, 609, 611, 613, 615, 616, 618, 626, 629, 638, 639, 640, 641, 642, 643, 644, 723, 727, 730, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 790, 791, 794, 796, 798, 799, 801, 802, 807, 808, 809, 810, 842, 843, 897, 898, 899, 901, 916, 931, 952, 972, 973, 975, 977, 979, 980, 981, 983, 984, 987], "cpu_count": [38, 253, 899], "22": [38, 148, 152, 196, 273, 277, 279, 312, 335, 337, 341, 342, 353, 354, 355, 359, 388, 398, 422, 438, 439, 445, 446, 454, 465, 474, 481, 487, 492, 495, 496, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 544, 577, 578, 582, 584, 595, 597, 601, 603, 605, 608, 609, 611, 613, 615, 619, 638, 642, 654, 663, 706, 718, 727, 732, 733, 737, 746, 747, 751, 760, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 792, 794, 796, 798, 799, 800, 805, 806, 807, 809, 812, 828, 847, 849, 850, 851, 852, 853, 855, 856, 857, 858, 878, 879, 931, 941, 949, 970, 972, 975, 980, 983, 985], "n_center": [38, 462], "25000": 38, "colors_": 38, "cname": 38, "birch_model": 38, "final_step": 38, "centroid": [38, 41, 52, 53, 148, 254, 276, 284, 311, 333, 362, 393, 394, 397, 398, 399, 402, 409, 410, 412, 454, 499, 795, 953, 968, 972, 976, 979, 984], "subcluster_centers_": [38, 393], "this_centroid": 38, "set_autoscaley_on": 38, "mbk": [38, 59], "256": [38, 44, 49, 110, 324, 332, 362, 369, 399, 418, 487, 496, 513, 804, 835, 845, 966, 986], "max_no_improv": [38, 56, 59, 399, 487, 488, 489, 496, 986, 987], "t_mini_batch": [38, 59], "mbk_means_labels_uniqu": 38, "cluster_centers_": [38, 39, 44, 46, 53, 55, 56, 58, 59, 85, 284, 311, 391, 394, 397, 398, 399, 965], "plot_birch_vs_minibatchkmean": 38, "bisectingkmean": [39, 362, 986, 987], "__doc__": [39, 69, 140, 215, 224, 350], "n_clusters_list": 39, "clustering_algorithm": [39, 40, 57], "variant": [39, 85, 145, 148, 235, 283, 284, 311, 312, 343, 362, 365, 367, 370, 372, 399, 410, 440, 443, 444, 462, 465, 493, 509, 510, 515, 565, 569, 572, 573, 577, 580, 588, 589, 591, 595, 622, 654, 747, 751, 753, 754, 755, 764, 770, 791, 809, 844, 921, 927, 928, 929, 930, 931, 933, 934, 945, 952, 966, 972, 980], "algorithm_nam": 39, "algo": [39, 95], "hide": [39, 345, 783, 784, 785, 786, 787, 975, 980], "flat": [39, 85, 91, 152, 199, 200, 201, 233, 362, 370, 391, 398, 411, 459, 938, 965, 972, 973], "label_out": 39, "plot_bisect_kmean": 39, "null": [40, 153, 235, 241, 366, 598, 619, 630, 654, 680, 706, 742, 773, 927, 928, 931, 946, 982], "mismatch": [40, 930, 981], "warn": [40, 57, 66, 179, 194, 238, 253, 269, 270, 277, 323, 326, 337, 340, 341, 342, 350, 356, 370, 374, 397, 399, 409, 446, 483, 500, 503, 504, 507, 508, 509, 510, 514, 515, 516, 521, 522, 523, 524, 525, 526, 528, 552, 580, 586, 620, 640, 643, 644, 662, 663, 678, 679, 687, 732, 733, 736, 783, 784, 785, 787, 812, 813, 850, 851, 852, 853, 855, 856, 857, 858, 867, 868, 874, 884, 897, 899, 901, 917, 918, 920, 931, 941, 964, 972, 974, 975, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988], "noisy_circl": [40, 57], "noisy_moon": [40, 57], "no_structur": [40, 57], "anisotropicli": [40, 57], "170": [40, 52, 57, 343], "x_aniso": [40, 52, 57], "aniso": [40, 57], "plot_num": [40, 57, 206], "default_bas": [40, 57], "quantil": [40, 49, 58, 82, 99, 101, 148, 157, 273, 276, 277, 348, 369, 389, 390, 408, 469, 502, 510, 512, 607, 620, 672, 694, 697, 699, 771, 813, 825, 826, 827, 836, 837, 931, 941, 953, 968, 972, 976, 979, 981, 985, 986, 988], "damp": [40, 362, 391, 404], "min_sampl": [40, 45, 60, 348, 350, 362, 373, 395, 400, 406, 407, 621, 927, 981, 985], "xi": [40, 60, 334, 362, 365, 370, 400, 406, 459, 945, 983], "min_cluster_s": [40, 60, 400, 406, 981], "77": [40, 244, 331, 334, 484], "240": [40, 939, 972], "08": [40, 46, 88, 152, 271, 334, 481, 493, 495, 513, 591, 608, 746, 805, 806, 827, 937], "220": [40, 972], "i_dataset": [40, 57, 206], "algo_param": [40, 57], "param": [40, 56, 57, 65, 110, 112, 113, 199, 212, 233, 235, 243, 247, 257, 269, 337, 339, 350, 369, 372, 376, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 638, 639, 640, 641, 642, 744, 745, 746, 749, 750, 758, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 920, 978, 982, 983, 985, 986], "estimate_bandwidth": [40, 58, 362, 398, 411], "symmetr": [40, 111, 154, 181, 350, 360, 362, 402, 412, 413, 424, 469, 477, 479, 640, 644, 645, 654, 655, 665, 666, 667, 673, 677, 685, 686, 704, 706, 712, 734, 742, 744, 745, 917, 920, 927, 931, 934], "meanshift": [40, 284, 362, 391, 975, 976, 977, 980, 982, 983, 986, 987, 988], "bin_seed": [40, 58, 398, 411, 983], "two_mean": 40, "spectralclust": [40, 284, 362, 391, 934, 972, 973, 982, 984, 985, 986, 987, 988], "nearest_neighbor": [40, 402, 641], "average_linkag": 40, "gmm": [40, 148, 220, 222, 225, 226, 227, 454, 462, 745, 765, 930, 972, 973, 976, 977, 978], "gaussianmixtur": [40, 52, 222, 223, 224, 225, 226, 227, 368, 744, 978, 980, 981, 985, 986], "covariance_typ": [40, 222, 223, 225, 226, 227, 744, 745], "nkmean": 40, "npropag": 40, "ncluster": 40, "nmixtur": 40, "catch": [40, 57, 270, 345, 346], "catch_warn": [40, 57, 269, 270], "filterwarn": [40, 57, 194, 269, 270, 337, 941], "userwarn": [40, 57, 342, 662, 941, 978, 980, 985], "fulli": [40, 105, 111, 323, 331, 332, 350, 368, 369, 371, 394, 397, 507, 508, 514, 515, 855, 856, 857, 858, 859, 861, 920, 921, 927, 936, 944, 951, 985, 986], "t1": [40, 42, 57, 194, 201, 204, 206], "ff7f00": [40, 57, 206], "4daf4a": [40, 57], "a65628": [40, 57], "984ea3": [40, 57], "999999": [40, 57], "e41a1c": [40, 57], "dede00": [40, 57, 58], "000000": [40, 277, 686], "transax": [40, 57, 203, 206, 223, 261, 275], "plot_cluster_comparison": 40, "bad": [41, 55, 56, 136, 151, 310, 319, 337, 362, 372, 642, 695, 920, 927, 928, 933, 939, 965, 972], "eight": [41, 966], "deliv": [41, 323, 955], "though": [41, 133, 156, 158, 241, 258, 275, 277, 311, 312, 319, 323, 331, 334, 337, 339, 349, 350, 362, 367, 368, 369, 370, 371, 649, 753, 755, 847, 920, 921, 923, 928, 931, 934, 941, 945, 966, 980], "3d": [41, 44, 62, 81, 91, 92, 152, 176, 199, 201, 203, 370, 456, 536, 894, 979, 980, 982], "mplot3d": [41, 62, 81, 91, 92, 152, 176, 199, 201], "noqa": [41, 62, 81, 91, 92, 111, 146, 147, 152, 176, 199, 201, 246, 247, 282, 341, 529, 530, 577, 749, 750, 920, 981], "f401": [41, 62, 81, 91, 92, 152, 176, 199, 201], "k_means_iris_8": 41, "k_means_iris_3": 41, "k_means_iris_bad_init": 41, "est": [41, 118, 151, 214, 275, 282, 319, 356, 369, 512, 684, 813, 920, 931, 941, 945, 983, 984], "elev": [41, 62, 81, 91, 92, 152, 176, 199, 203], "azim": [41, 62, 81, 91, 92, 152, 176, 199, 203], "134": [41, 92, 110, 235, 975], "xaxi": [41, 81, 91, 92, 176, 199, 201, 204, 253, 258, 310], "set_ticklabel": [41, 81, 91, 92, 176, 310], "zaxi": [41, 81, 91, 92, 176, 199], "petal": [41, 81, 94, 96, 107, 285, 334, 363, 860, 947, 963, 964], "sepal": [41, 81, 94, 96, 107, 137, 162, 285, 295, 334, 941, 963, 964], "length": [41, 64, 80, 81, 83, 94, 96, 107, 135, 136, 137, 140, 141, 143, 156, 162, 213, 216, 285, 295, 312, 330, 334, 337, 345, 346, 350, 363, 367, 369, 370, 372, 396, 440, 458, 459, 462, 465, 473, 501, 513, 531, 532, 539, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 582, 596, 597, 600, 601, 602, 603, 604, 606, 607, 610, 611, 612, 613, 631, 634, 730, 746, 749, 750, 760, 774, 776, 779, 780, 782, 790, 791, 792, 794, 796, 834, 860, 867, 869, 873, 889, 890, 902, 905, 930, 937, 941, 957, 963, 964, 972, 975, 976, 978, 979, 980, 981, 983, 984, 988], "set_zlabel": [41, 81, 176], "setosa": [41, 81, 92, 94, 244, 245, 334, 454, 957, 964], "versicolour": [41, 81, 92, 94, 334, 964], "virginica": [41, 81, 92, 94, 244, 245, 334, 454, 931, 964], "text3d": [41, 92], "reorder": [41, 92, 350, 647, 668, 952, 980], "plot_cluster_iri": 41, "voxel": [42, 61, 535], "multipl": [42, 63, 83, 95, 106, 107, 148, 151, 173, 211, 235, 247, 255, 280, 323, 324, 325, 331, 333, 334, 337, 339, 340, 341, 342, 348, 350, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 373, 374, 395, 410, 414, 416, 417, 419, 424, 438, 441, 442, 445, 446, 447, 453, 454, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 531, 549, 557, 558, 560, 561, 577, 582, 584, 589, 590, 591, 592, 596, 597, 600, 602, 603, 604, 607, 610, 611, 612, 613, 616, 617, 618, 621, 623, 626, 628, 629, 639, 640, 642, 643, 644, 671, 672, 677, 694, 695, 697, 699, 700, 702, 734, 737, 740, 744, 745, 746, 748, 749, 750, 751, 752, 758, 760, 761, 762, 763, 764, 765, 766, 770, 771, 772, 774, 778, 779, 780, 781, 782, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 810, 813, 825, 836, 839, 840, 847, 848, 849, 852, 863, 878, 883, 884, 902, 905, 923, 926, 927, 928, 932, 933, 934, 938, 939, 944, 945, 947, 951, 952, 957, 966, 972, 973, 975, 978, 979, 982, 983, 984, 985, 987], "partli": [42, 718], "procedur": [42, 51, 111, 133, 159, 167, 226, 237, 276, 298, 310, 319, 337, 339, 348, 349, 350, 351, 360, 361, 364, 366, 367, 369, 371, 481, 487, 488, 490, 495, 496, 497, 503, 504, 505, 506, 509, 510, 543, 545, 552, 559, 594, 622, 624, 637, 677, 734, 805, 806, 825, 836, 902, 920, 927, 933, 939, 941, 944, 945, 946, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "solut": [42, 158, 168, 170, 183, 184, 193, 206, 212, 283, 298, 335, 339, 350, 359, 362, 364, 366, 367, 370, 371, 372, 399, 401, 403, 481, 487, 488, 489, 490, 492, 493, 495, 496, 497, 498, 499, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 560, 596, 598, 600, 602, 604, 605, 606, 608, 610, 612, 614, 615, 616, 617, 618, 619, 622, 624, 626, 627, 628, 629, 630, 632, 633, 635, 636, 637, 744, 745, 760, 797, 805, 806, 924, 925, 927, 928, 930, 935, 937, 945, 946, 950, 955, 961, 964, 966, 972, 975, 985, 986, 987], "closest": [42, 59, 339, 362, 391, 393, 394, 397, 398, 399, 409, 603, 728, 729, 778, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 922, 925, 932, 934, 964], "partit": [42, 61, 64, 114, 116, 235, 270, 359, 362, 366, 369, 399, 401, 403, 412, 461, 507, 508, 509, 510, 513, 514, 515, 654, 655, 665, 735, 796, 855, 856, 857, 858, 930, 934, 937, 941, 947, 966], "cluster_qr": [42, 362, 402, 412, 986], "qr": [42, 181, 484, 491, 494, 883, 884, 928, 978], "pivot": [42, 246, 247], "cheung": [42, 973], "andrew": [42, 362, 412, 641, 645, 667, 686, 742, 823, 935, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "knyazev": [42, 362, 402, 412, 645, 982, 985, 986], "ucdenv": 42, "skimag": [42, 43, 331, 965], "spectral_clust": [42, 61, 980, 982, 984, 985, 986, 987], "orig_coin": [42, 43], "speed": [42, 43, 52, 64, 88, 147, 152, 165, 168, 172, 215, 253, 282, 288, 310, 312, 325, 326, 337, 340, 346, 348, 350, 360, 362, 367, 370, 373, 394, 395, 397, 398, 399, 400, 402, 407, 409, 410, 411, 412, 481, 482, 560, 577, 582, 583, 584, 589, 596, 597, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 613, 614, 631, 634, 642, 744, 745, 752, 772, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 823, 884, 920, 928, 930, 932, 945, 955, 965, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987], "down": [42, 43, 74, 194, 195, 201, 210, 211, 238, 271, 273, 319, 331, 340, 345, 364, 367, 394, 400, 406, 540, 543, 544, 589, 599, 723, 727, 730, 823, 826, 827, 837, 849, 852, 859, 927, 957, 965, 980], "alias": [42, 43, 335, 337, 340, 397, 409, 972, 976, 986], "smoothened_coin": [42, 43], "rescaled_coin": [42, 43, 965], "anti_alias": [42, 43, 965], "img_to_graph": [42, 61, 370, 975, 985], "exponenti": [42, 69, 135, 140, 258, 263, 368, 369, 372, 399, 486, 504, 509, 564, 569, 572, 589, 593, 707, 708, 788, 789, 793, 805, 806, 823, 923, 927, 931, 946, 964, 979, 985], "beta": [42, 77, 150, 343, 360, 362, 365, 486, 488, 490, 497, 594, 678, 679, 685, 691, 732, 742, 744, 931, 964, 974, 977, 979, 981, 982], "voronoi": [42, 61, 362], "n_region": 42, "extra": [42, 107, 214, 253, 312, 335, 336, 338, 341, 350, 369, 370, 389, 394, 397, 409, 414, 482, 507, 508, 516, 540, 541, 650, 651, 652, 769, 792, 857, 858, 874, 930, 934, 972, 975, 977, 978, 980, 985, 987], "benetif": 42, "n_regions_plu": 42, "lobpcg": [42, 402, 412, 638, 641, 645, 982, 985, 986, 987], "amg": [42, 61, 362, 402, 412, 641, 645, 982, 986, 987], "pyamg": [42, 353, 355, 362, 402, 412, 641, 645], "toler": [42, 67, 146, 170, 172, 195, 196, 312, 332, 339, 346, 362, 374, 394, 397, 402, 409, 412, 421, 422, 428, 432, 433, 434, 481, 482, 483, 485, 486, 490, 491, 492, 493, 494, 495, 497, 498, 509, 510, 511, 512, 577, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 626, 628, 629, 631, 632, 633, 634, 638, 639, 640, 641, 643, 644, 645, 788, 789, 793, 797, 805, 806, 842, 843, 847, 848, 849, 850, 851, 852, 853, 917, 927, 931, 945, 946, 962, 984, 985, 986, 987], "eigen_tol": [42, 402, 412, 641, 645, 973, 986, 987], "todo": [42, 210, 341, 345, 350, 362, 988], "21243": 42, "assign_label": [42, 362, 402, 412], "individu": [42, 55, 73, 97, 102, 118, 128, 144, 148, 149, 179, 197, 207, 238, 240, 280, 306, 324, 338, 341, 344, 346, 350, 352, 359, 363, 366, 369, 370, 388, 402, 412, 414, 446, 451, 453, 459, 505, 506, 509, 510, 512, 513, 515, 517, 518, 519, 520, 553, 559, 560, 582, 583, 593, 595, 607, 608, 609, 618, 621, 622, 623, 624, 625, 626, 627, 628, 637, 662, 669, 677, 683, 699, 700, 734, 746, 760, 776, 780, 781, 783, 784, 785, 786, 787, 806, 809, 817, 818, 820, 821, 822, 825, 827, 828, 832, 833, 834, 847, 848, 931, 932, 941, 946, 961, 966, 968, 973, 976, 978, 984, 986], "comment": [42, 335, 336, 337, 338, 340, 341, 345, 351, 437, 529, 931], "paus": 42, "21194": [42, 985], "plot_coin_segment": 42, "spatial": [43, 45, 154, 196, 270, 332, 350, 362, 373, 395, 400, 402, 407, 629, 642, 649, 709, 712, 727, 728, 729, 730, 739, 740, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 927, 934, 941, 974, 978, 985], "constrain": [43, 85, 108, 115, 152, 170, 268, 281, 296, 298, 330, 350, 361, 362, 367, 369, 459, 511, 512, 585, 608, 640, 644, 773, 927, 930, 976], "piec": [43, 180, 324, 930], "grid_to_graph": [43, 47, 50, 362, 370, 965, 985], "st": [43, 62, 235, 975, 978, 980], "plot_coin_ward_segment": 43, "vq": [44, 53], "palac": 44, "china": [44, 362, 456, 457, 534], "615": 44, "literatur": [44, 140, 235, 311, 334, 337, 343, 345, 348, 349, 362, 365, 367, 369, 394, 397, 399, 451, 486, 488, 490, 497, 505, 506, 538, 541, 658, 744, 920, 923, 927, 931, 982], "codebook": [44, 516, 778], "palett": [44, 151, 235, 256], "byte": [44, 49, 370, 437, 453, 458, 459, 532, 538, 539, 541, 896, 964, 966, 972, 979, 980, 987], "wherea": [44, 49, 62, 73, 98, 114, 183, 193, 236, 237, 238, 244, 278, 307, 325, 366, 369, 515, 608, 609, 748, 764, 776, 923, 930, 932, 934, 941, 947, 985], "rgb": [44, 332, 370, 443, 444, 533, 534, 537], "gif": 44, "pick": [44, 55, 154, 213, 243, 284, 287, 332, 337, 341, 362, 369, 394, 410, 473, 623, 857, 858, 920, 927, 928, 930, 945, 983], "robertlayton": 44, "pairwise_distances_argmin": [44, 59, 284, 729, 980, 986, 987, 988], "load_sample_imag": [44, 533, 534, 981], "n_color": 44, "photo": 44, "jpg": [44, 456, 534], "255": [44, 88, 253, 270, 283, 332, 443, 444, 511, 512], "original_shap": 44, "image_arrai": 44, "image_array_sampl": 44, "codebook_random": 44, "labels_random": 44, "recreate_imag": 44, "recreat": [44, 216], "book": [44, 394, 397, 399, 778, 783, 787, 927, 928, 929, 932, 949, 984], "alongsid": [44, 337, 343, 350, 353, 371, 931, 938, 951, 952], "plot_color_quant": 44, "750": [45, 106], "math": [45, 215, 235, 236, 334, 337, 353, 713], "db": [45, 362], "n_noise_": 45, "come": [45, 62, 73, 78, 90, 91, 135, 211, 280, 306, 310, 311, 323, 325, 330, 334, 337, 338, 341, 345, 348, 350, 353, 362, 366, 369, 370, 390, 400, 406, 422, 500, 655, 742, 767, 849, 852, 920, 921, 925, 928, 930, 934, 937, 946, 957, 972, 983, 986, 988], "handi": [45, 65, 311, 312, 338, 988], "asign": [45, 311], "unique_label": [45, 311, 339, 346], "core_samples_mask": 45, "zeros_lik": [45, 181, 244], "bool": [45, 61, 74, 147, 197, 318, 337, 374, 375, 376, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 469, 472, 473, 474, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 647, 652, 653, 657, 658, 659, 661, 662, 663, 664, 675, 676, 677, 678, 679, 680, 687, 690, 691, 699, 700, 703, 705, 710, 712, 716, 717, 718, 723, 727, 731, 732, 733, 734, 736, 738, 741, 743, 744, 745, 746, 749, 750, 751, 752, 760, 764, 765, 768, 771, 772, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 866, 867, 868, 878, 884, 885, 893, 896, 902, 904, 912, 917, 918, 919, 921, 981, 984, 985], "core_sample_indices_": [45, 395], "class_member_mask": 45, "markerfacecolor": [45, 56, 58, 59], "plot_dbscan": [45, 373, 395], "constitut": [46, 350, 366, 369, 400, 406, 538, 539, 541, 935], "standpoint": 46, "proce": [46, 130, 160, 335, 341, 365, 366, 369, 391, 927], "reassign": [46, 337, 397, 399, 973, 977], "success": [46, 148, 228, 242, 319, 357, 362, 366, 367, 369, 465, 514, 529, 746, 749, 750, 767, 852, 934, 955, 961, 965, 968, 984], "becom": [46, 52, 66, 73, 181, 237, 253, 274, 278, 298, 310, 319, 331, 337, 339, 341, 345, 350, 351, 362, 364, 369, 370, 372, 391, 400, 404, 405, 407, 531, 538, 539, 541, 552, 569, 577, 608, 609, 626, 628, 822, 847, 848, 854, 926, 927, 928, 930, 934, 941, 946, 964, 966, 973, 980, 981, 984, 985, 986, 987], "fetch_olivetti_fac": [46, 85, 106, 214, 332, 980, 981, 982], "extract_patches_2d": [46, 88, 370, 980], "81": [46, 362, 737, 746, 760, 931, 932, 934, 941], "patch_siz": [46, 88, 370, 533, 534], "buffer": [46, 985], "max_patch": [46, 370, 533, 534, 980], "4i": 46, "dt": [46, 88, 98, 119, 369, 370, 947], "ntrain": 46, "plot_dict_face_patch": 46, "agglo": [47, 396, 965], "featureagglomer": [47, 50, 391, 392, 948, 965, 975, 981, 982, 985, 986], "x_reduc": [47, 81, 116, 396, 965], "x_restor": 47, "images_restor": 47, "91": [47, 369, 926, 962, 966], "vmax": [47, 75, 85, 88, 96, 138, 141, 158, 170, 195, 211, 225, 230, 270, 298], "plot_digits_agglomer": 47, "rich": [48, 345, 348, 362, 390, 955, 983, 986], "richer": [48, 95, 362], "uneven": [48, 230, 362, 366], "patholog": [48, 930, 978], "clean": [48, 65, 178, 319, 329, 335, 368, 937, 941, 982], "fring": [48, 362], "sensibl": [48, 146, 311, 339, 927, 941], "resampl": [48, 111, 140, 151, 197, 257, 346, 348, 505, 506, 905, 952, 981, 985], "plot_clust": 48, "x_red": 48, "spectralembed": [48, 199, 200, 201, 638, 639, 640, 642, 928, 973, 978, 982, 986, 987], "plot_digits_linkag": 48, "raccoon": [49, 88, 367], "addition": [49, 66, 101, 151, 179, 197, 281, 283, 311, 337, 348, 360, 370, 560, 561, 596, 602, 621, 825, 920, 921, 931, 939, 951, 978], "adapt": [49, 98, 110, 111, 138, 221, 222, 275, 324, 335, 336, 337, 346, 369, 372, 465, 466, 467, 468, 626, 627, 628, 805, 806, 927, 933, 935, 941, 945, 951, 952, 980, 981], "pooch": [49, 353, 355], "instal": [49, 219, 253, 280, 281, 282, 283, 284, 285, 323, 324, 326, 337, 338, 340, 341, 343, 345, 348, 349, 355, 362, 370, 402, 412, 446, 641, 645, 899, 947, 949, 966, 979, 980, 981, 985, 986], "raccoon_fac": [49, 88], "nbyte": [49, 210], "768": 49, "1024": [49, 95, 399, 418, 488, 845, 985], "unsign": [49, 89, 332, 532, 896], "786": 49, "kilobyt": 49, "shade": [49, 162, 256, 261, 294, 367], "render": [49, 174, 337, 341, 342, 343, 350, 501, 539, 581, 825, 836, 859, 861, 930, 947, 985], "behind": [49, 73, 339, 341, 345, 361, 364, 369, 930, 934, 943], "simplest": [49, 366, 928, 931, 964, 965], "certainli": [49, 311], "compressed_raccoon_uniform": 49, "spot": [49, 208, 362], "leav": [49, 104, 112, 152, 154, 197, 242, 278, 318, 319, 323, 334, 336, 342, 350, 362, 369, 372, 392, 393, 396, 413, 453, 507, 508, 509, 510, 511, 512, 514, 515, 516, 623, 625, 748, 753, 754, 755, 756, 764, 765, 788, 789, 836, 855, 856, 857, 858, 920, 928, 934, 938, 947, 961, 964, 972, 979, 981, 983, 984], "bin_edg": 49, "bin_edges_": [49, 274, 813], "bin_cent": [49, 179], "axvlin": [49, 55, 67, 75, 93, 110, 120, 151, 153, 168, 241, 962], "get_ybound": 49, "state": [49, 52, 64, 66, 73, 181, 210, 217, 222, 241, 282, 319, 324, 325, 337, 339, 343, 345, 348, 350, 351, 361, 370, 375, 391, 394, 397, 399, 404, 409, 425, 494, 539, 629, 749, 750, 758, 760, 762, 788, 789, 795, 842, 843, 870, 920, 921, 927, 933, 936, 943, 951, 952, 955, 974, 976, 978, 980, 982, 985], "compressed_raccoon_kmean": 49, "save": [49, 64, 66, 271, 336, 337, 341, 343, 344, 345, 350, 356, 366, 374, 418, 484, 485, 577, 788, 789, 845, 927, 931, 947, 955, 966, 972, 975, 979, 982], "verifi": [49, 55, 151, 179, 337, 342, 915, 934], "surpris": [49, 152, 927, 951, 974], "x8": 49, "ndarrai": [49, 53, 81, 179, 233, 234, 235, 337, 338, 339, 343, 344, 358, 370, 373, 374, 377, 378, 380, 382, 384, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 447, 450, 451, 452, 453, 454, 455, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 647, 648, 649, 650, 651, 652, 665, 668, 671, 672, 673, 676, 677, 687, 694, 695, 697, 699, 700, 702, 703, 705, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 738, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 865, 866, 867, 872, 873, 883, 884, 885, 886, 889, 890, 893, 895, 896, 900, 903, 904, 906, 907, 908, 909, 912, 917, 918, 931, 946, 952, 975, 979, 982, 983, 986, 987], "practic": [49, 65, 73, 78, 88, 108, 135, 150, 151, 156, 181, 206, 212, 236, 243, 259, 260, 282, 298, 324, 326, 337, 339, 340, 343, 345, 349, 350, 362, 364, 366, 367, 368, 369, 370, 372, 397, 402, 412, 471, 474, 539, 582, 583, 620, 744, 787, 840, 847, 920, 921, 925, 930, 931, 932, 933, 934, 937, 938, 941, 951, 952, 953, 955, 957, 966, 967, 968, 974, 978, 980, 982, 984], "gain": [49, 201, 242, 253, 255, 288, 310, 311, 318, 336, 343, 345, 348, 369, 482, 507, 511, 512, 514, 675, 705, 744, 745, 777, 855, 857, 932, 936, 944, 947, 975, 979, 982], "plot_face_compress": 49, "anova": [50, 127, 148, 293, 363, 454, 465, 542, 545, 546, 548, 549, 550, 554, 555, 556, 559, 663, 770, 774, 808, 809, 828, 847, 852, 946], "bayesianridg": [50, 146, 158, 159, 282, 577, 594, 927, 979, 980, 981, 982, 985, 986], "shutil": [50, 66, 363], "tempfil": [50, 255, 280, 363, 934], "feature_select": [50, 65, 66, 68, 127, 128, 129, 130, 131, 132, 133, 148, 219, 282, 284, 301, 319, 326, 350, 363, 371, 531, 920, 972, 973, 975, 976, 977, 978, 979], "kfold": [50, 110, 123, 230, 240, 319, 366, 388, 422, 517, 518, 544, 552, 597, 601, 603, 605, 611, 613, 615, 623, 746, 749, 750, 752, 754, 756, 760, 765, 767, 768, 769, 770, 771, 772, 773, 775, 779, 782, 961, 973, 974, 975, 977, 978, 980, 982], "roi_siz": 50, "snr": 50, "noise_coef": 50, "gridsearch": [50, 71, 246, 372, 951], "cachedir": [50, 66, 346, 363], "mkdtemp": [50, 363], "mem": [50, 343, 458], "n_x": [50, 535], "n_y": [50, 535, 933], "parcel": [50, 62, 362], "ward__n_clust": 50, "n_job": [50, 66, 67, 105, 106, 111, 112, 118, 124, 132, 146, 151, 152, 153, 200, 202, 217, 234, 236, 237, 239, 250, 253, 280, 281, 282, 285, 324, 337, 350, 369, 373, 388, 395, 398, 400, 402, 407, 408, 411, 414, 417, 422, 481, 485, 486, 487, 489, 492, 493, 495, 496, 498, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 544, 552, 560, 582, 584, 589, 597, 601, 603, 605, 607, 608, 609, 611, 613, 615, 616, 618, 626, 629, 638, 639, 640, 641, 642, 643, 644, 723, 727, 730, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 807, 810, 842, 843, 897, 899, 920, 931, 932, 934, 961, 962, 966, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987], "coef_agglomeration_": 50, "f_regress": [50, 128, 371, 542, 545, 546, 548, 549, 550, 554, 555, 559, 975, 979, 986], "cach": [50, 148, 236, 253, 254, 323, 324, 332, 350, 392, 396, 400, 418, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 452, 458, 746, 790, 792, 808, 809, 845, 849, 850, 851, 852, 853, 916, 934, 946, 975, 979, 980, 981, 982, 984, 985, 987], "selectpercentil": [50, 65, 219, 301, 371, 542, 545, 546, 548, 549, 553, 556, 973, 978, 988], "percentag": [50, 94, 108, 170, 197, 230, 238, 241, 366, 371, 484, 491, 494, 499, 543, 544, 598, 619, 630, 653, 683, 695, 764, 765, 766, 778, 859, 861, 932, 947, 974, 978, 984, 985], "anova__percentil": [50, 301], "coef_selection_": 50, "rdbu_r": [50, 75, 96, 298], "94": [50, 87, 107, 178, 213, 248, 369, 613, 737, 926, 931, 932, 941, 966, 972], "temporari": [50, 64, 66, 323, 418, 637, 730, 845, 934, 975, 976, 979, 985, 986], "worri": [50, 928, 958], "rmtree": [50, 66, 363], "ignore_error": 50, "plot_feature_agglomeration_vs_univariate_select": 50, "recomput": [51, 216, 218, 255, 280, 419, 424, 927, 943, 977], "intract": [51, 367, 928, 936], "unlik": [51, 151, 152, 199, 201, 226, 273, 296, 337, 339, 343, 348, 350, 364, 366, 367, 370, 400, 485, 600, 601, 604, 605, 606, 632, 633, 734, 767, 788, 789, 828, 838, 850, 927, 930, 931, 938, 946, 972, 978], "inferenti": 51, "capabl": [51, 78, 140, 203, 339, 350, 353, 932, 935, 946, 947, 955, 972, 981], "meta": [51, 64, 97, 121, 148, 179, 244, 319, 331, 335, 339, 341, 348, 350, 358, 360, 361, 371, 372, 415, 503, 504, 505, 506, 507, 508, 509, 511, 512, 514, 515, 520, 525, 547, 553, 774, 781, 920, 932, 952, 953, 968, 972, 975, 976, 977, 978, 979, 980, 983, 984, 986, 987], "extend": [51, 62, 180, 225, 242, 298, 334, 335, 348, 350, 360, 361, 362, 367, 369, 581, 670, 777, 780, 781, 813, 815, 831, 862, 923, 931, 932, 946, 952, 953, 968, 977, 978, 979, 980, 982, 987], "chirag": 51, "nagpal": 51, "christo": [51, 981, 982, 984, 986], "arida": [51, 981, 982, 984, 986], "baseestim": [51, 253, 337, 349, 350, 384, 582, 583, 876, 972, 979, 982, 984, 986, 987], "clone": [51, 111, 143, 152, 271, 319, 335, 337, 340, 341, 343, 345, 350, 360, 363, 372, 388, 415, 519, 520, 547, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 752, 772, 775, 779, 782, 808, 809, 844, 952, 972, 978, 980, 984, 988], "metaestim": [51, 350, 844, 976, 985, 986], "available_if": [51, 350, 892, 985, 986], "check_is_fit": [51, 339, 346, 350, 982, 985, 986], "5000": [51, 165, 194, 195, 282], "_classifier_ha": 51, "deleg": [51, 343, 385, 860, 892, 976, 978, 984], "unfit": [51, 363, 385, 414, 519, 520, 552, 561, 980, 982], "classifier_": 51, "inductivecluster": 51, "clusterer_": 51, "plot_scatt": 51, "cluster_label": [51, 55], "x_new": [51, 363, 367, 371, 384, 393, 394, 396, 397, 399, 481, 482, 483, 484, 485, 486, 487, 489, 491, 492, 493, 494, 499, 517, 519, 520, 532, 533, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 578, 580, 585, 588, 589, 590, 591, 592, 638, 639, 640, 641, 642, 797, 804, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 943, 957], "y_new": 51, "declar": [51, 200, 319, 337, 338, 339, 343, 350, 394, 397, 409, 421, 422, 428, 640, 644, 979, 983], "membership": [51, 351, 359, 361, 362, 461, 462, 463, 464, 465, 469, 472, 946], "inductive_learn": 51, "probable_clust": 51, "response_method": [51, 101, 114, 119, 162, 171, 188, 238, 256, 261, 264, 278, 294, 295, 315, 581, 582, 583, 648, 650, 652], "plot_inductive_clust": 51, "meant": [52, 133, 332, 339, 346, 424, 443, 627, 794, 897, 898, 921, 935, 937, 941, 973], "unintuit": 52, "possibli": [52, 78, 179, 194, 311, 334, 336, 345, 356, 362, 369, 370, 401, 403, 539, 783, 784, 785, 786, 787, 852, 853, 855, 856, 857, 858, 920, 923, 928, 934, 941, 987], "undesir": [52, 136, 372], "phil": [52, 977], "roth": [52, 977, 980, 987], "mr": [52, 973, 976, 986], "isotrop": [52, 56, 90, 137, 139, 199, 201, 362, 364, 372, 462, 469, 482, 565, 569, 570, 572, 573], "spheric": [52, 77, 114, 201, 223, 225, 226, 266, 333, 713, 744, 745, 927, 930, 934, 951], "anisotrop": [52, 137, 372, 567, 569, 572], "ellipt": [52, 927], "60834549": 52, "63667341": 52, "40887718": 52, "85253229": 52, "x_vari": 52, "y_vari": 52, "unequ": [52, 980], "x_filter": 52, "unevenli": [52, 179, 230], "y_filter": 52, "set_i": 52, "scenario": [52, 64, 135, 156, 238, 319, 344, 366, 369, 487, 493, 495, 496, 925, 931, 941, 982], "appropri": [52, 93, 140, 151, 244, 306, 314, 319, 335, 337, 339, 345, 350, 361, 362, 366, 368, 369, 373, 395, 400, 407, 439, 440, 441, 446, 450, 451, 452, 454, 455, 460, 527, 532, 541, 542, 545, 546, 548, 549, 550, 622, 624, 637, 659, 790, 791, 792, 794, 796, 798, 799, 800, 915, 927, 930, 931, 941, 976, 979, 985, 988], "criteria": [52, 148, 157, 168, 187, 226, 235, 345, 362, 371, 416, 432, 433, 434, 451, 507, 508, 509, 510, 514, 515, 596, 602, 606, 608, 609, 621, 642, 809, 828, 847, 848, 855, 856, 857, 858, 921, 930, 935, 945, 965, 975, 980, 983], "knowledg": [52, 106, 151, 196, 215, 235, 326, 332, 337, 340, 343, 349, 350, 362, 366, 369, 373, 395, 461, 505, 506, 513, 670, 685, 689, 732, 777, 931, 932, 943, 966], "consequ": [52, 93, 197, 235, 236, 273, 295, 319, 367, 369, 511, 512, 516, 605, 606, 921, 927, 931, 947, 981, 983, 988], "likelihood": [52, 70, 72, 73, 74, 93, 135, 136, 137, 139, 140, 141, 142, 144, 148, 167, 197, 225, 228, 235, 241, 273, 339, 350, 360, 364, 367, 369, 372, 388, 419, 420, 421, 422, 423, 424, 425, 426, 427, 465, 482, 486, 491, 499, 500, 501, 560, 561, 595, 608, 662, 690, 744, 745, 746, 771, 774, 793, 804, 824, 835, 849, 850, 852, 853, 927, 930, 933, 941, 946, 975, 976, 981, 987], "inertia": [52, 56, 311, 362, 394, 397, 399, 402, 409, 410, 412, 413, 983], "common_param": [52, 111, 152, 212, 237, 238], "unexpect": [52, 319, 337, 342, 345, 356, 485, 646, 931, 946, 974, 980, 981, 984, 986], "suffic": [52, 53, 339, 966], "detail": [52, 100, 102, 105, 107, 112, 118, 152, 167, 168, 204, 208, 211, 212, 217, 219, 227, 233, 242, 259, 260, 280, 281, 282, 283, 284, 285, 314, 316, 317, 319, 323, 324, 325, 329, 330, 331, 332, 335, 337, 339, 341, 342, 343, 345, 348, 349, 350, 351, 353, 356, 361, 362, 365, 366, 367, 369, 371, 372, 373, 384, 385, 388, 394, 395, 397, 398, 400, 402, 407, 408, 409, 411, 412, 414, 416, 417, 418, 422, 446, 474, 481, 485, 486, 487, 489, 491, 492, 493, 494, 495, 496, 498, 499, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 544, 552, 560, 564, 569, 572, 581, 582, 583, 584, 589, 595, 597, 601, 603, 605, 606, 607, 608, 609, 611, 613, 615, 616, 618, 622, 624, 626, 628, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 651, 663, 723, 727, 728, 729, 730, 745, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 786, 790, 791, 793, 794, 796, 798, 799, 801, 802, 807, 810, 812, 813, 825, 836, 842, 843, 845, 849, 852, 855, 856, 857, 858, 878, 897, 920, 921, 925, 929, 930, 931, 932, 934, 935, 937, 944, 953, 954, 955, 957, 963, 966, 968, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "propos": [52, 71, 72, 253, 332, 337, 339, 348, 350, 362, 364, 369, 374, 375, 400, 425, 485, 557, 558, 626, 627, 628, 805, 806, 927, 930, 934, 945, 949, 979], "constraint": [52, 62, 85, 97, 148, 174, 230, 269, 270, 271, 281, 337, 348, 367, 370, 437, 458, 459, 511, 512, 585, 764, 765, 900, 920, 922, 927, 928, 945, 976, 979, 980, 983, 985, 987], "inflat": [52, 150, 151, 153, 362, 366, 931], "allevi": [52, 158, 362, 933], "fastest": [52, 233, 312, 397, 620, 622, 624, 637, 883, 884, 930], "lost": [52, 75, 332, 338, 348, 928, 931], "restart": [52, 340, 345, 397, 481, 487, 488, 493, 495, 496, 560, 561, 928, 985], "plot_kmeans_assumpt": 52, "judg": [53, 185, 362, 961], "definit": [53, 74, 167, 179, 242, 253, 311, 337, 338, 339, 350, 352, 362, 364, 365, 367, 477, 479, 485, 561, 578, 642, 658, 668, 677, 707, 744, 745, 920, 923, 925, 927, 929, 931, 934, 945, 950, 968, 976, 980, 987], "shorthand": [53, 350, 363, 417, 511, 512, 809, 810, 975], "homo": 53, "compl": 53, "mea": 53, "context": [53, 215, 219, 253, 323, 324, 331, 336, 338, 349, 350, 362, 363, 368, 369, 370, 372, 373, 388, 395, 398, 400, 402, 407, 408, 411, 414, 417, 418, 422, 481, 485, 486, 487, 489, 492, 493, 494, 495, 496, 498, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 544, 552, 560, 576, 577, 580, 582, 584, 589, 597, 601, 603, 605, 607, 608, 609, 611, 613, 615, 616, 618, 626, 629, 638, 639, 640, 641, 642, 643, 644, 723, 727, 730, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 790, 791, 794, 796, 798, 799, 801, 802, 807, 810, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 921, 927, 931, 937, 941, 945, 952, 955, 964, 972, 979, 980, 985], "n_digit": 53, "bench_k_mean": 53, "tabl": [53, 197, 235, 337, 338, 341, 346, 362, 370, 532, 608, 630, 746, 760, 785, 896, 927, 931, 932, 937, 951, 973], "fit_tim": [53, 108, 168, 187, 237, 366, 771, 772], "inertia_": [53, 56, 59, 394, 397, 399, 983], "clustering_metr": 53, "sample_s": [53, 211, 311, 740], "formatter_result": 53, "determinist": [53, 111, 324, 333, 339, 350, 362, 394, 397, 399, 401, 402, 403, 408, 409, 412, 501, 509, 510, 514, 515, 533, 534, 641, 645, 757, 758, 804, 855, 856, 923, 927, 973, 976, 978, 980, 981, 984, 987], "82": [53, 737, 746, 760, 931, 934, 962, 972], "ttime": 53, "tinertia": 53, "thomo": 53, "tcompl": 53, "tv": 53, "tari": 53, "tami": 53, "tsilhouett": 53, "reduced_data": 53, "mesh": [53, 107, 116, 137, 211, 261, 268, 275, 292, 294], "169": 53, "mark": [53, 83, 128, 147, 239, 246, 329, 337, 339, 341, 345, 346, 350, 362, 485, 557, 558, 561, 582, 608, 801, 802, 842, 843, 860, 874, 879, 884, 927, 955, 968, 972, 973, 978, 980, 981], "plot_kmeans_digit": 53, "kmeans_plusplu": [54, 362, 984], "4000": [54, 113, 224], "centers_init": 54, "4eacc5": [54, 59], "ff9c34": [54, 59], "4e9a06": [54, 59], "cluster_data": 54, "plot_kmeans_plusplu": 54, "wrong": [55, 179, 259, 319, 334, 337, 339, 370, 454, 675, 705, 740, 931, 937, 946, 975, 977, 979, 980, 981, 982, 985], "wide": [55, 56, 102, 210, 274, 348, 362, 367, 370, 920, 927, 951, 955, 966, 972, 974], "ambival": 55, "thick": [55, 263, 934], "ow": 55, "silhouette_sampl": [55, 740, 976, 978, 980], "distinct": [55, 235, 289, 312, 332, 339, 342, 350, 366, 369, 370, 539, 747, 756, 764, 822, 823, 842, 843, 920, 927, 934, 937, 966, 980], "center_box": [55, 462], "range_n_clust": 55, "set_size_inch": [55, 123, 216], "lie": [55, 77, 132, 151, 211, 273, 289, 296, 298, 367, 369, 556, 796, 798, 799, 800, 925, 928, 931, 941, 946], "insert": [55, 151, 179, 348, 362, 437, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 862], "blank": [55, 342, 921, 947], "demarc": 55, "perspect": [55, 179, 323, 332, 348, 351, 480, 593, 847, 924], "silhouette_avg": 55, "sample_silhouette_valu": 55, "y_lower": [55, 111], "aggreg": [55, 103, 197, 238, 244, 284, 362, 369, 484, 505, 506, 671, 672, 677, 694, 695, 697, 699, 700, 702, 734, 932, 934, 941], "ith_cluster_silhouette_valu": 55, "size_cluster_i": 55, "y_upper": [55, 111], "fill_betweenx": 55, "2nd": [55, 81, 143, 278, 362, 373, 395, 480, 941, 987], "lw": [55, 71, 72, 74, 89, 94, 95, 173, 180, 182, 185, 189, 196, 202, 224, 230, 245, 250, 258, 273, 289, 305], "fontweight": [55, 174], "bold": [55, 111, 168, 174, 337], "plot_kmeans_silhouette_analysi": 55, "reach": [56, 133, 179, 181, 195, 197, 237, 284, 298, 318, 342, 351, 353, 362, 367, 371, 400, 407, 458, 459, 543, 544, 577, 595, 596, 597, 602, 603, 604, 605, 606, 610, 611, 612, 613, 616, 617, 618, 626, 627, 628, 629, 631, 632, 633, 634, 678, 679, 732, 744, 745, 805, 806, 844, 920, 931, 935, 945, 947, 955, 983, 987], "optimum": [56, 141, 151, 156, 248, 367, 422, 927, 930], "stuck": [56, 642, 928], "check_random_st": [56, 195, 201, 209, 214, 339, 346, 350], "trade": [56, 71, 153, 234, 236, 237, 298, 310, 361, 362, 364, 503, 504, 509, 510, 584, 606, 642, 746, 749, 750, 760, 771, 928, 935, 943, 945, 946, 952], "n_init_rang": 56, "n_samples_per_cent": 56, "make_data": 56, "n_clusters_tru": 56, "init_s": [56, 311, 399], "factori": [56, 235, 370, 691, 901, 931], "empti": [56, 64, 95, 191, 290, 323, 332, 339, 341, 362, 374, 433, 483, 511, 512, 580, 581, 757, 813, 854, 862, 867, 868, 874, 921, 946, 964, 974, 976, 980, 981, 983, 984, 986, 987], "run_id": 56, "km": [56, 284, 311], "fmt": [56, 190], "my_memb": [56, 58, 59], "plot_kmeans_stability_low_dim_dens": 56, "fast": [57, 156, 168, 194, 195, 211, 212, 274, 312, 323, 332, 337, 346, 362, 364, 366, 367, 369, 370, 372, 374, 397, 419, 424, 458, 482, 483, 485, 488, 490, 494, 497, 516, 538, 539, 541, 582, 583, 590, 608, 609, 622, 624, 637, 649, 746, 760, 769, 770, 771, 780, 781, 788, 789, 793, 804, 884, 900, 923, 927, 930, 933, 934, 936, 937, 947, 951, 955, 966, 972, 973, 978, 979, 982, 983], "globular": [57, 362], "cleanli": [57, 972], "plot_linkage_comparison": 57, "dorin": [58, 398], "comaniciu": [58, 362, 398], "meer": [58, 362, 398], "ieee": [58, 72, 74, 334, 362, 364, 371, 375, 398, 425, 484, 513, 614, 635, 636, 674, 718, 927, 931, 937], "transact": [58, 334, 362, 364, 373, 375, 395, 398, 425, 484, 488, 490, 497, 513, 594, 614, 635, 636, 674, 675, 705, 718, 927, 931], "intellig": [58, 334, 362, 369, 398, 505, 506, 588, 646, 674, 778, 805, 806, 932, 943, 952, 955], "2002": [58, 360, 362, 369, 388, 398, 543, 544, 675, 705, 795, 842, 923, 931], "603": [58, 398], "619": [58, 398], "labels_uniqu": 58, "plot_mean_shift": [58, 411], "3000": [59, 99, 202, 839, 840], "k_mean": [59, 346, 350, 965, 980], "t_batch": 59, "pairwis": [59, 150, 151, 210, 244, 280, 284, 285, 310, 323, 329, 339, 350, 362, 367, 372, 408, 411, 412, 418, 437, 458, 459, 485, 511, 512, 570, 588, 589, 590, 591, 592, 593, 638, 640, 642, 644, 646, 649, 727, 730, 737, 739, 740, 776, 792, 794, 796, 800, 814, 845, 931, 934, 943, 946, 968, 972, 973, 977, 978, 979, 980, 981, 982, 983, 986, 987, 988], "k_means_cluster_cent": 59, "mbk_means_cluster_cent": 59, "k_means_label": 59, "mbk_means_label": 59, "ninertia": 59, "bbbbbb": 59, "plot_mini_batch_kmean": 59, "reachabl": [60, 362, 400, 405, 406, 407, 794, 889], "shane": [60, 981, 984, 987], "grigsbi": 60, "refug": 60, "rocktalu": 60, "cluster_optics_dbscan": [60, 362], "n_points_per_clust": 60, "c1": [60, 108, 143, 209], "c2": [60, 108, 143, 209], "c3": [60, 108], "c4": [60, 953, 968], "c5": [60, 953, 968], "c6": 60, "clust": [60, 400, 407], "labels_050": 60, "reachability_": [60, 362, 400, 405, 406, 407], "core_dist": [60, 405], "core_distances_": [60, 400, 405, 407], "ordering_": [60, 362, 400, 405, 406, 407], "labels_200": 60, "ax3": [60, 290], "ax4": 60, "klass": 60, "xk": [60, 500], "rk": 60, "full_lik": 60, "epsilon": [60, 161, 202, 212, 305, 367, 405, 593, 599, 617, 626, 628, 695, 805, 806, 848, 850, 853, 924, 927, 931, 935, 945, 946, 964, 972], "noptic": 60, "ndbscan": 60, "plot_opt": 60, "tri": [61, 94, 199, 262, 324, 339, 342, 348, 351, 360, 369, 399, 401, 403, 581, 582, 583, 620, 642, 648, 650, 652, 760, 899, 936, 954, 957, 974, 980, 984], "intens": [61, 88, 253, 334, 338, 367, 394, 397, 409, 557, 558, 582, 583, 748, 920, 938, 955, 980], "weakli": 61, "outlin": [61, 107, 337, 339, 350, 351, 352, 920, 968], "center1": 61, "28": [61, 195, 270, 334, 343, 362, 366, 400, 407, 941, 962, 972, 975, 978], "center2": 61, "center3": 61, "67": [61, 334, 466, 467, 468, 577, 617, 663, 760, 921, 931, 945, 972], "58": [61, 72, 334, 364, 375, 425, 713, 941, 962], "center4": 61, "radius1": 61, "radius2": 61, "radius3": 61, "radius4": 61, "circle1": 61, "circle2": 61, "circle3": 61, "circle4": 61, "label_im": 61, "cleaner": 61, "plot_segmentation_toi": 61, "swiss": [62, 148, 198, 362, 480, 642, 643, 986], "roll": [62, 148, 198, 340, 362, 480, 642, 643, 878, 955, 982, 987], "sole": [62, 348, 362], "respect": [62, 90, 103, 107, 115, 143, 156, 158, 168, 181, 193, 196, 199, 201, 207, 210, 212, 226, 244, 259, 260, 271, 278, 284, 295, 323, 324, 332, 333, 337, 360, 362, 365, 367, 369, 370, 372, 414, 417, 420, 421, 422, 423, 424, 425, 426, 484, 490, 491, 497, 503, 511, 512, 547, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 586, 593, 621, 640, 644, 662, 677, 731, 734, 744, 745, 784, 794, 805, 806, 859, 861, 920, 924, 925, 927, 928, 931, 934, 935, 936, 937, 941, 946, 951, 955, 975, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987], "oppos": [62, 337, 341, 358, 362, 843, 934, 946, 957, 972], "make_swiss_rol": [62, 203, 986], "thinner": 62, "fig1": 62, "set_posit": [62, 91, 92, 190, 273], "jet": 62, "fig2": 62, "121": [62, 101, 147, 183, 211, 619, 941], "plot_ward_structured_vs_unstructur": 62, "chain": [63, 148, 251, 253, 319, 326, 329, 348, 350, 361, 372, 446, 452, 491, 561, 577, 608, 687, 746, 774, 777, 779, 780, 781, 782, 808, 809, 828, 920, 921, 932, 936, 948, 951, 955, 966, 968], "raster": 64, "caption": 64, "serv": [64, 89, 141, 238, 363, 496, 501, 588, 923, 986], "matt": [64, 975, 976, 977, 982, 983, 987], "terri": [64, 976], "truncatedsvd": [64, 116, 200, 311, 367, 484, 485, 489, 490, 491, 642, 807, 810, 928, 974, 979, 983, 984, 986], "dictvector": [64, 148, 309, 311, 332, 370, 438, 532, 538, 539, 540, 541, 821, 972, 973, 976, 982, 984, 985, 988], "compris": [64, 111, 233, 310, 311, 312, 332, 348, 367, 369, 465, 753, 928], "subject": [64, 115, 227, 238, 332, 337, 339, 341, 348, 350, 351, 360, 361, 364, 366, 367, 445, 608, 609, 635, 811, 847, 848, 899, 901, 922, 927, 946, 950, 966, 981, 982, 985, 987], "stateless": [64, 311, 325, 339, 350, 370, 532, 533, 539, 588, 811, 812, 820, 941, 988], "subject_body_extractor": 64, "startswith": [64, 200, 266], "subject_body_transform": 64, "sentenc": [64, 312, 332, 351, 370], "text_stat": 64, "num_sent": 64, "text_stats_transform": 64, "subjectbodyextractor": 64, "subjectbodi": 64, "union": [64, 151, 363, 446, 687, 703, 807, 979], "body_bow": 64, "pull": [64, 283, 324, 335, 340, 350, 351, 982], "body_stat": 64, "transformer_weight": [64, 414, 417, 807, 977, 984], "dual": [64, 66, 306, 310, 370, 371, 421, 422, 428, 561, 596, 597, 602, 603, 608, 609, 610, 611, 612, 613, 631, 634, 788, 789, 847, 848, 849, 852, 946, 974, 983, 986], "plot_column_transform": 64, "imput": [65, 118, 153, 208, 217, 219, 281, 284, 326, 329, 341, 349, 350, 363, 369, 440, 451, 515, 530, 589, 595, 622, 770, 791, 809, 866, 868, 951, 952, 968, 974, 975], "miss": [65, 118, 153, 208, 217, 235, 253, 281, 319, 323, 326, 329, 332, 334, 336, 337, 339, 341, 342, 350, 361, 362, 363, 364, 422, 440, 446, 448, 451, 511, 512, 515, 516, 577, 578, 579, 580, 589, 595, 622, 640, 644, 676, 718, 770, 791, 809, 817, 818, 822, 824, 825, 828, 832, 835, 836, 838, 927, 928, 931, 947, 951, 952, 955, 968, 974, 976, 980, 981, 982, 983, 984, 985, 986, 987], "chi": [65, 73, 99, 277, 329, 371, 469, 542, 545, 546, 548, 549, 550, 554, 555, 556, 559, 588, 589, 590, 591, 592, 707, 708, 968, 972, 977, 978], "dispatch": [65, 326, 358, 418, 746, 760, 769, 770, 771, 845, 897, 898, 961, 968, 987], "processor": [65, 118, 151, 326, 373, 388, 395, 398, 400, 402, 407, 408, 411, 414, 417, 422, 481, 485, 486, 487, 489, 492, 493, 495, 496, 498, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 544, 552, 560, 582, 584, 589, 597, 601, 603, 605, 607, 608, 609, 611, 613, 615, 616, 618, 626, 629, 638, 639, 640, 641, 642, 643, 644, 723, 727, 730, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 776, 777, 778, 790, 791, 794, 796, 798, 799, 801, 802, 807, 810, 842, 843], "pedro": [65, 973, 975, 976, 980], "moral": [65, 310, 608, 980, 984, 985], "simpleimput": [65, 118, 146, 147, 153, 208, 217, 219, 281, 284, 319, 350, 577, 578, 579, 921, 941, 980, 981, 983, 984, 986, 987, 988], "chi2": [65, 370, 371, 402, 531, 542, 545, 546, 548, 549, 550, 555, 556, 559, 570, 588, 589, 590, 591, 592, 593, 708, 714, 723, 972, 979, 986], "40945": 65, "titan": [65, 153, 219, 280, 284, 285], "surviv": [65, 153, 920, 951], "ag": [65, 151, 153, 179, 197, 216, 217, 219, 273, 283, 284, 285, 332, 334, 955, 957, 964], "fare": [65, 153, 219, 284, 976, 977], "embark": [65, 153, 219, 280, 284, 285], "sex": [65, 151, 153, 219, 285, 334, 939, 964], "femal": [65, 342, 821, 822, 941], "male": [65, 342, 821, 822, 941], "pclass": [65, 153, 219, 280, 284, 285], "numeric_featur": [65, 284], "numeric_transform": [65, 284], "categorical_transform": 65, "selector": [65, 129, 130, 345, 370, 416, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 974, 982, 984, 988], "preprocessor": [65, 118, 151, 179, 208, 217, 281, 283, 284, 285, 363, 370, 538, 539, 541, 951, 966, 972, 975, 980, 982], "make_column_selector": [65, 108, 118, 363, 414, 417, 982], "subset_featur": 65, "Then": [65, 98, 100, 104, 106, 118, 121, 130, 151, 156, 167, 179, 203, 207, 218, 237, 238, 331, 337, 341, 343, 345, 353, 359, 360, 362, 365, 367, 370, 371, 520, 543, 669, 705, 746, 760, 808, 921, 930, 931, 937, 946, 966, 981], "numerical_transform": 65, "yourself": [65, 336, 337, 338, 342, 345, 935], "dtype_exclud": [65, 416], "dtype_includ": [65, 108, 118, 363, 416], "exactli": [65, 150, 158, 172, 179, 227, 243, 274, 337, 339, 359, 362, 366, 367, 370, 375, 403, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 465, 476, 540, 541, 565, 626, 628, 653, 655, 712, 747, 764, 769, 923, 927, 928, 929, 931, 932, 947, 965, 966, 972, 978, 979, 985], "hyperparamet": [65, 98, 135, 136, 142, 143, 146, 148, 152, 158, 168, 193, 197, 206, 228, 233, 238, 240, 255, 271, 310, 339, 350, 366, 367, 369, 372, 452, 485, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 593, 603, 609, 615, 623, 626, 677, 734, 746, 760, 920, 925, 926, 927, 930, 931, 933, 935, 937, 945, 952, 966, 974, 978, 979, 980, 981, 982, 983, 984], "cartesian": [65, 359, 583, 934, 987], "preprocessor__num__imputer__strategi": 65, "preprocessor__cat__selector__percentil": 65, "classifier__c": 65, "search_cv": 65, "trigger": [65, 66, 341, 363, 805, 806, 808, 809, 867, 868, 884, 927, 966, 980, 986, 987], "best_params_": [65, 67, 111, 135, 212, 226, 233, 239, 282, 298, 349, 746, 749, 750, 760, 920, 962, 966], "best_score_": [65, 67, 212, 236, 239, 240, 298, 623, 625, 746, 749, 750, 760, 961, 962, 966, 983], "cv_results_": [65, 66, 67, 75, 123, 132, 226, 233, 234, 235, 236, 239, 243, 246, 247, 255, 298, 422, 544, 746, 749, 750, 760, 966, 978, 982, 984, 985], "sort_valu": [65, 153, 219, 226, 235, 246], "mean_test_scor": [65, 66, 67, 75, 123, 132, 226, 234, 235, 236, 243, 246, 247, 255, 298, 422, 544, 746, 760, 920, 978, 985], "ascend": [65, 153, 369, 400, 406, 577, 585, 859, 860, 861, 945, 982, 988], "std_test_scor": [65, 67, 123, 132, 234, 235, 236, 243, 255, 422, 544, 746, 760, 978, 985], "param_preprocessor__num__imputer__strategi": 65, "param_preprocessor__cat__selector__percentil": 65, "param_classifier__c": 65, "plot_column_transformer_mixed_typ": 65, "instanti": [66, 138, 283, 340, 369, 400, 517, 518, 552, 580, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 874, 937, 963, 972, 980, 984, 988], "argument": [66, 180, 207, 210, 324, 331, 332, 337, 338, 340, 342, 343, 345, 346, 348, 350, 362, 363, 366, 367, 369, 371, 373, 374, 376, 389, 391, 394, 395, 396, 397, 398, 399, 400, 402, 404, 407, 409, 411, 413, 443, 453, 458, 483, 485, 486, 488, 490, 501, 509, 510, 517, 518, 519, 520, 527, 531, 532, 538, 539, 541, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 581, 589, 593, 596, 597, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 613, 616, 618, 626, 631, 634, 638, 642, 646, 648, 649, 650, 651, 652, 664, 669, 684, 691, 712, 728, 729, 752, 776, 777, 780, 790, 791, 792, 794, 796, 797, 798, 799, 800, 801, 802, 805, 808, 812, 861, 865, 874, 879, 881, 898, 899, 900, 901, 915, 920, 923, 927, 928, 929, 931, 934, 938, 939, 946, 947, 957, 961, 972, 975, 976, 978, 979, 980, 981, 982, 984, 986, 987, 988], "memoiz": [66, 332, 350], "costli": [66, 71, 105, 146, 236, 307, 324, 338, 343, 362, 394, 577, 754, 756, 839, 840, 884, 931, 934, 943, 952], "mcgibbon": [66, 974, 975, 978], "selectkbest": [66, 68, 129, 130, 284, 319, 337, 363, 371, 531, 542, 545, 546, 548, 550, 556, 920, 973, 978, 988], "mutual_info_classif": [66, 371, 542, 545, 546, 549, 550, 978, 984, 987], "pipe": [66, 67, 108, 217, 234, 282, 283, 349, 363, 370, 540, 808, 832, 833, 835, 836, 837, 838, 920, 941, 962], "reduce_dim": [66, 217, 234, 363], "popul": [66, 71, 73, 151, 179, 238, 273, 332, 346, 350, 364, 391, 662, 668, 790, 791, 792, 794, 796, 798, 799, 800, 900, 931, 937, 941, 947], "n_features_opt": 66, "c_option": 66, "iterated_pow": [66, 482, 485, 491, 978], "reduce_dim__n_compon": [66, 234, 363], "classify__c": 66, "reduce_dim__k": 66, "reducer_label": 66, "kbest": [66, 542], "mean_scor": [66, 244, 247, 311, 985], "alphabet": [66, 350, 690], "eas": [66, 226, 278, 337, 340, 343, 927, 945, 951, 952, 955, 983, 984, 986], "sometim": [66, 118, 150, 235, 270, 311, 319, 324, 325, 337, 339, 341, 343, 349, 350, 353, 362, 364, 367, 369, 370, 399, 484, 485, 488, 490, 491, 813, 814, 815, 862, 926, 927, 928, 931, 936, 941, 942, 946, 957, 965, 969, 973, 978, 979, 980, 981, 982, 983, 984, 988], "worthwhil": [66, 350], "slower": [66, 88, 108, 146, 212, 244, 312, 369, 370, 371, 401, 403, 488, 490, 497, 505, 506, 508, 513, 515, 538, 539, 541, 581, 582, 583, 593, 609, 622, 624, 637, 642, 654, 776, 780, 781, 924, 928, 929, 930, 932, 934, 947, 966, 976, 983], "constructor": [66, 209, 324, 339, 350, 361, 363, 370, 414, 417, 499, 500, 505, 517, 518, 519, 520, 531, 532, 538, 539, 547, 618, 626, 627, 790, 791, 792, 794, 795, 796, 798, 799, 800, 807, 808, 809, 810, 899, 920, 932, 941, 946, 952, 957, 972, 973, 975, 976, 977, 979, 982, 983, 984, 985, 986, 987], "folder": [66, 332, 335, 337, 341, 345, 353, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 934, 966], "cached_pip": [66, 363], "delet": [66, 288, 290, 341, 342, 419, 424, 436], "exit": [66, 253, 341, 345, 418], "benefici": [66, 68, 71, 85, 116, 273, 274, 335, 928], "plot_compare_reduct": 66, "truncat": [67, 116, 200, 346, 484, 485, 489, 490, 491, 494, 626, 628, 675, 705, 744, 797, 860, 884, 920, 930, 931, 945, 962, 966, 967, 968, 978, 980], "x_digit": [67, 125, 269, 363, 961, 962, 964], "y_digit": [67, 125, 269, 363, 961, 962, 964], "__": [67, 236, 350, 363, 376, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 744, 745, 746, 749, 750, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 920, 962, 980, 981], "pca__n_compon": [67, 962], "logistic__c": [67, 962], "spectrum": [67, 474, 494, 645, 884, 955, 962, 980], "ax0": [67, 69, 179, 209, 311, 962], "n_components_": [67, 93, 350, 392, 396, 484, 488, 489, 490, 491, 492, 493, 839, 840, 962, 981, 983], "explained_variance_ratio_": [67, 94, 311, 367, 484, 491, 494, 499, 962, 975, 978], "named_step": [67, 78, 363, 543, 544, 547, 808, 809, 847, 848, 927, 962, 979, 981], "components_col": 67, "param_pca__n_compon": 67, "best_clf": 67, "nlargest": 67, "yerr": [67, 72, 74, 105, 108, 132, 255, 290], "val": [67, 191, 235, 886], "plot_digits_pip": 67, "world": [68, 151, 203, 215, 323, 326, 330, 334, 362, 367, 370, 921, 931, 933, 950, 952, 955, 960, 968, 972], "amuel": [68, 103, 170, 211, 289, 306], "ai": [68, 103, 170, 211, 289, 306, 366], "bonn": [68, 103, 170, 211, 289, 306], "mayb": [68, 270, 350, 370, 946, 952], "combined_featur": 68, "univ_select": 68, "x_featur": [68, 590, 591, 592, 923], "features__pca__n_compon": 68, "features__univ_select__k": 68, "svm__c": 68, "grid_search": [68, 217, 226, 233, 243, 363, 974, 975, 976, 977, 978, 979], "plot_feature_union": 68, "overview": [69, 338, 340, 349, 350, 683, 692, 933, 945, 967, 968], "transformedtargetregressor": [69, 151, 179, 348, 363, 543, 544, 547, 980, 982, 985], "am": [69, 73, 118, 152, 342, 364, 424, 443, 979], "hous": [69, 118, 146, 147, 273, 282, 330, 440, 968], "translat": [69, 339, 372, 477, 564, 817, 818, 833, 928, 931, 949, 955], "lowest": [69, 78, 152, 226, 331, 362, 366, 585, 587, 749, 750, 753, 854, 855, 928, 931, 947, 987], "logarithm": [69, 118, 151, 210, 236, 298, 350, 371, 410, 540, 608, 609, 626, 654, 675, 690, 700, 704, 705, 706, 752, 788, 789, 882, 947, 961, 979], "log1p": [69, 209, 812, 931, 941], "expm1": 69, "y_tran": 69, "At": [69, 184, 247, 287, 290, 323, 324, 341, 351, 353, 358, 365, 369, 388, 391, 415, 538, 539, 541, 552, 776, 778, 815, 895, 920, 927, 930, 932, 936, 945, 955], "meda": [69, 151, 931], "median_absolute_error": [69, 151, 931, 976, 982, 984], "r2_score": [69, 150, 163, 174, 175, 369, 383, 415, 432, 433, 434, 504, 506, 508, 510, 512, 515, 518, 520, 561, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 622, 623, 628, 629, 673, 677, 781, 782, 791, 799, 806, 848, 850, 853, 856, 858, 920, 931, 973, 975, 981, 985, 986], "compute_scor": [69, 93, 158, 159, 594, 595, 981], "r2": [69, 100, 118, 150, 152, 174, 212, 339, 363, 369, 504, 520, 623, 771, 806, 931, 939, 981], "ridge_cv": 69, "y_pred_ridg": 69, "ridge_cv_with_trans_target": 69, "inverse_func": [69, 151, 363, 415, 812, 941, 980], "y_pred_ridge_with_trans_target": 69, "sell": 69, "quantile_transform": [69, 825, 835, 941, 979, 980, 981], "house_pric": [69, 118], "select_dtyp": [69, 108, 285, 416], "nan": [69, 108, 146, 147, 217, 230, 238, 280, 323, 329, 339, 346, 350, 369, 418, 446, 505, 506, 507, 511, 512, 514, 543, 544, 547, 553, 556, 559, 577, 578, 579, 580, 585, 662, 664, 671, 672, 673, 677, 718, 727, 734, 746, 749, 750, 752, 760, 770, 771, 772, 775, 817, 818, 822, 824, 825, 828, 832, 835, 836, 838, 865, 866, 867, 868, 906, 920, 931, 941, 968, 975, 979, 980, 981, 982, 983, 984, 986, 987], "inf": [69, 138, 263, 346, 362, 372, 400, 407, 411, 421, 422, 428, 503, 504, 509, 510, 543, 544, 547, 556, 557, 558, 569, 577, 585, 587, 598, 599, 600, 602, 619, 621, 622, 626, 630, 637, 677, 679, 695, 727, 734, 804, 813, 820, 865, 867, 868, 882, 931, 941, 979, 981, 982, 983, 984, 986, 987], "lotfrontag": 69, "garageyrblt": 69, "masvnrarea": [69, 118], "to_fram": 69, "n_quantil": [69, 152, 277, 825, 836, 981], "900": 69, "output_distribut": [69, 273, 277, 363, 824, 825, 835, 836, 941], "squeez": [69, 141, 142, 253, 273, 965], "quantiletransform": [69, 152, 277, 363, 415, 824, 836, 921, 941, 979, 980, 981, 982, 983, 988], "weaker": 69, "residu": [69, 175, 181, 231, 383, 415, 432, 433, 434, 502, 504, 506, 508, 510, 512, 515, 518, 520, 561, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 621, 622, 623, 628, 629, 635, 636, 651, 693, 734, 781, 782, 791, 799, 806, 848, 850, 853, 856, 858, 927, 931, 964, 984, 985, 987], "smile": [69, 332, 986], "plot_transformed_target": [69, 415], "mahalanobi": [70, 148, 362, 364, 400, 407, 419, 420, 421, 422, 423, 424, 425, 426, 649, 727, 728, 729, 795, 925, 937, 980, 983, 984], "ledoitwolf": [70, 72, 93, 148, 364, 419, 420, 424, 425, 426, 427, 746, 976], "empiricalcovari": [71, 73, 74, 364, 419, 423, 424, 425, 426, 937], "unbias": [71, 360, 364, 367, 388, 500, 606, 622, 624, 637, 927, 961], "shrunk": [71, 93, 273, 375, 423, 425, 426, 429, 430, 431, 499, 925, 945, 967, 968], "base_x_train": 71, "base_x_test": 71, "coloring_matrix": [71, 72], "shrunkcovari": [71, 93, 364, 419, 420, 423, 424, 425], "empirical_covari": [71, 364], "log_likelihood": [71, 560, 561, 744, 745], "span": [71, 111, 211, 232, 332, 370, 499, 586, 746, 749, 931, 965], "negative_loglik": 71, "real_cov": [71, 72, 420, 423, 424, 425, 426], "emp_cov": [71, 73, 75, 428, 431], "loglik_r": 71, "inv": [71, 75, 269], "formula": [71, 72, 359, 362, 364, 375, 423, 425, 466, 467, 468, 540, 593, 596, 597, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 613, 614, 626, 628, 654, 678, 704, 713, 920, 925, 927, 931, 936, 937, 941, 945, 977, 979, 981], "asymptot": [71, 72, 168, 323, 364, 424, 486, 927, 930, 982], "criterion": [71, 72, 154, 167, 187, 226, 247, 281, 339, 346, 350, 362, 367, 392, 396, 399, 402, 409, 412, 482, 487, 489, 496, 503, 504, 507, 508, 509, 510, 514, 515, 516, 556, 577, 595, 598, 606, 616, 617, 618, 619, 621, 626, 627, 628, 630, 641, 645, 660, 745, 844, 849, 850, 851, 852, 853, 855, 856, 857, 858, 927, 930, 931, 939, 944, 947, 953, 965, 968, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986], "chen": [71, 72, 364, 369, 375, 425, 675, 705, 923, 931, 975, 978, 979, 980, 982, 985, 986, 987], "Its": [71, 98, 233, 237, 333, 339, 350, 367, 372, 488, 926, 927, 936, 939, 945, 951, 955, 975], "tuned_paramet": [71, 123, 233], "loglik_lw": 71, "loglik_oa": 71, "unseen": [71, 109, 130, 168, 187, 248, 259, 325, 329, 339, 349, 350, 362, 366, 794, 825, 836, 922, 931, 937, 939, 941, 947, 957, 975, 980, 984], "loglog": [71, 210], "lik_max": 71, "amax": [71, 109], "lik_min": 71, "amin": 71, "vline": [71, 87, 166, 167, 168, 180, 235, 248, 274], "shrinkage_": [71, 72, 423, 425], "magenta": [71, 113], "purpl": [71, 83, 203], "cyan": [71, 102, 151, 256, 264], "realli": [71, 153, 168, 341, 342, 343, 931, 937, 955, 986], "interestingli": [71, 133, 941], "outperform": [71, 78, 118, 278, 348, 366, 369, 402, 412, 933], "plot_covariance_estim": 71, "whose": [72, 73, 74, 133, 140, 179, 296, 332, 345, 346, 350, 360, 362, 364, 369, 371, 372, 375, 388, 389, 390, 398, 411, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 465, 484, 488, 490, 491, 494, 497, 499, 522, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 590, 621, 645, 668, 746, 753, 760, 773, 794, 813, 839, 840, 883, 910, 911, 925, 932, 936, 937, 938, 946, 975, 980, 981, 983, 986], "inspir": [72, 115, 152, 197, 337, 348, 369, 511, 512, 872, 921, 951, 981], "mmse": [72, 364, 375, 425], "tran": 72, "octob": [72, 332, 972, 979, 985, 986], "toeplitz": 72, "choleski": [72, 179, 197, 346, 428, 477, 561, 598, 600, 601, 604, 605, 606, 608, 609, 619, 622, 624, 630, 632, 633, 637, 744, 745, 927, 975, 979, 981, 984, 987], "simul": [72, 87, 151, 173, 213, 235, 955], "n_samples_rang": [72, 210], "31": [72, 258, 283, 359, 370, 450, 511, 512, 547, 599, 621, 629, 896, 932, 972], "lw_mse": 72, "oa_ms": 72, "lw_shrinkag": 72, "oa_shrinkag": 72, "error_norm": [72, 74, 419, 420, 421, 422, 423, 424, 425, 426], "darkorang": [72, 89, 94, 95, 180, 190, 202, 222, 223, 224, 227, 242, 244, 250, 256, 258, 264, 265, 289, 316], "plot_lw_vs_oa": 72, "x_i": [73, 103, 128, 151, 180, 283, 306, 362, 367, 368, 369, 372, 564, 565, 569, 572, 573, 575, 783, 784, 787, 922, 923, 927, 933, 934, 935, 941, 945, 946, 947], "d_": [73, 362, 367, 598, 619, 630, 727, 928, 933], "mle": [73, 93, 491, 980, 983], "resist": [73, 74, 337], "erron": [73, 74, 367, 927, 973, 980, 984], "breakdown": [73, 74, 196, 629, 927], "n_": [73, 74, 235, 283, 362, 367, 369, 596, 602, 635, 646, 923, 927, 931, 933, 934, 938, 943, 946, 947], "smallest": [73, 74, 179, 253, 314, 332, 362, 364, 371, 477, 491, 580, 604, 605, 606, 632, 633, 640, 644, 645, 746, 749, 750, 760, 765, 947, 985], "pure": [73, 74, 78, 179, 350, 362, 423, 429, 446, 507, 508, 509, 510, 514, 515, 516, 655, 665, 735, 742, 855, 856, 857, 858, 941], "rousseuw": [73, 74], "rousseeuw": [73, 74, 362, 364, 419, 424, 739, 740, 937], "ass": [73, 74, 364, 424], "79": [73, 74, 88, 334, 342, 364, 424, 474, 547, 786, 972, 974], "871": [73, 74, 364, 424], "1984": [73, 74, 364, 424, 855, 856, 947], "wilson": [73, 334, 972, 975], "hilferti": 73, "1931": 73, "proceed": [73, 332, 334, 362, 373, 390, 395, 461, 646, 658, 675, 705, 795, 844, 931, 943, 944, 945], "academi": [73, 795], "684": 73, "688": 73, "125": [73, 399, 484, 920, 931, 941], "n_outlier": [73, 74, 114, 182, 206, 260], "gen_cov": 73, "ey": [73, 74, 223, 227, 298, 332, 484, 491, 500], "outliers_cov": 73, "mincovdet": [73, 74, 364, 419, 420, 423, 425, 426, 937, 972, 979], "robust_cov": 73, "nmcd": 73, "nmle": 73, "inlier": [73, 114, 182, 206, 215, 273, 350, 364, 419, 513, 621, 627, 794, 825, 836, 850, 851, 853, 927, 937, 979, 980, 985], "inlier_plot": 73, "outlier_plot": 73, "get_xlim": [73, 174, 184, 273], "zz": 73, "mahal_emp_cov": 73, "emp_cov_contour": 73, "pubu_r": 73, "mahal_robust_cov": 73, "robust_contour": 73, "ylorbr_r": 73, "dist": [73, 200, 210, 341, 419, 420, 421, 422, 423, 424, 425, 426, 649, 712, 718, 788, 789], "borderaxespad": 73, "cubic": [73, 372], "suggest": [73, 88, 102, 105, 151, 154, 235, 298, 323, 336, 337, 344, 350, 366, 367, 369, 419, 424, 515, 595, 773, 925, 927, 928, 936, 946, 966, 976, 983, 986], "emp_mah": 73, "33": [73, 179, 332, 334, 335, 341, 342, 343, 353, 354, 355, 370, 482, 598, 662, 663, 678, 679, 687, 692, 732, 733, 736, 774, 776, 858, 927, 931, 941, 962, 972, 980], "markeredgewidth": [73, 239], "rm": [73, 138, 341, 345, 364], "mahal": 73, "robust_mah": 73, "location_": [73, 74, 419, 420, 421, 422, 423, 424, 425, 426], "plot_mahalanobis_dist": 73, "aim": [74, 147, 261, 289, 325, 332, 335, 337, 350, 356, 362, 364, 370, 398, 649, 927, 931, 934, 941, 946, 951, 957, 965, 986], "compens": [74, 150, 152, 156, 179, 197, 236, 364, 367], "soon": [74, 350, 964], "5n_": 74, "trust": [74, 341, 351, 356, 360, 961, 986], "johanna": 74, "hardin": 74, "rock": 74, "decemb": [74, 140, 332, 614, 635, 636, 972, 980, 982, 984, 987], "928": [74, 388], "946": 74, "zoubir": 74, "koivunen": 74, "chakhchoukh": 74, "muma": 74, "signal": [74, 85, 86, 87, 95, 111, 135, 140, 141, 148, 157, 178, 180, 227, 283, 361, 362, 364, 370, 371, 372, 375, 425, 453, 471, 476, 481, 484, 487, 491, 575, 596, 602, 603, 613, 614, 634, 635, 636, 734, 927, 931, 948, 955, 960, 967, 968], "tutori": [74, 123, 124, 125, 126, 168, 181, 197, 235, 326, 337, 338, 343, 345, 349, 356, 362, 402, 412, 641, 946, 964, 975], "treatment": [74, 150, 331, 367, 419, 424], "concept": [74, 109, 244, 326, 337, 348, 361, 362, 368, 370, 923, 931, 934, 947, 955], "magazin": [74, 371], "29": [74, 136, 196, 334, 335, 353, 354, 355, 369, 509, 510, 640, 644, 730, 744, 800, 927, 928, 945], "61": [74, 331, 334, 343, 363, 491, 510, 663], "range_n_outli": 74, "err_loc_mcd": 74, "err_cov_mcd": 74, "err_loc_emp_ful": 74, "err_cov_emp_ful": 74, "err_loc_emp_pur": 74, "err_cov_emp_pur": 74, "outliers_index": 74, "outliers_offset": 74, "inliers_mask": 74, "pure_x": 74, "pure_loc": 74, "pure_emp_cov": 74, "font_prop": 74, "hat": [74, 95, 231, 235, 258, 283, 335, 360, 364, 368, 369, 922, 927, 928, 931, 933, 935], "_2": [74, 140, 367, 370, 481, 487, 495, 496, 596, 602, 927, 935, 945, 946], "x_size": 74, "plot_robust_vs_empirical_covari": 74, "graphicallasso": [75, 364, 419, 420, 422, 423, 424, 425, 426, 428, 980], "largest": [75, 87, 181, 334, 362, 364, 367, 394, 477, 491, 507, 508, 509, 510, 514, 515, 538, 659, 744, 745, 765, 786, 855, 856, 857, 858, 884, 928, 931, 941, 946, 947], "invert": [75, 90, 130, 200, 311, 312, 348, 364, 370, 580, 639, 643, 941, 981], "fairli": [75, 110, 201, 250, 269, 345, 362, 509, 510, 649, 932, 964], "tweak": [75, 366, 897, 930, 966, 983], "readabl": [75, 236, 283, 342, 343, 345, 356, 484, 981, 984, 985, 986, 987], "neighborhood": [75, 148, 199, 254, 334, 350, 362, 367, 373, 395, 400, 407, 452, 454, 465, 491, 499, 578, 646, 774, 790, 791, 794, 796, 797, 798, 799, 800, 802, 808, 809, 828, 928, 937, 953, 968, 981], "make_sparse_spd_matrix": [75, 479], "prng": 75, "prec": [75, 207, 477, 931], "smallest_coef": [75, 477], "largest_coef": [75, 477], "multivariate_norm": [75, 78, 221, 419, 420, 421, 422, 423, 424, 425, 426], "ledoit_wolf": [75, 364, 985], "prec_": 75, "lw_cov_": 75, "lw_prec_": 75, "this_cov": 75, "this_prec": 75, "ma": [75, 298, 927, 978, 983], "masked_equ": 75, "set_facecolor": [75, 221], "set_axis_bgcolor": 75, "alpha_": [75, 123, 151, 159, 167, 168, 422, 561, 594, 595, 597, 601, 603, 605, 606, 611, 613, 623, 625, 927, 947, 961, 972, 979], "plot_sparse_cov": 75, "cross_decomposit": [76, 77, 78, 148, 213, 326, 976, 977, 979, 980, 981], "plscanon": [77, 432, 434, 435, 953, 968, 976, 980, 982, 984, 986], "plsregress": [77, 78, 953, 968, 979, 982, 984, 986], "share": [77, 116, 151, 226, 310, 318, 319, 323, 324, 339, 345, 362, 367, 370, 499, 618, 654, 658, 744, 745, 749, 750, 925, 938, 972, 974, 980, 982, 984, 987], "appar": [77, 933, 955], "scatterplot": [77, 158, 235, 256], "maxim": [77, 78, 85, 96, 111, 158, 226, 227, 236, 240, 244, 245, 263, 278, 282, 298, 314, 318, 334, 350, 359, 362, 365, 367, 371, 372, 499, 560, 561, 594, 595, 598, 619, 629, 630, 670, 746, 749, 750, 760, 817, 823, 832, 925, 927, 931, 934, 936, 946, 961, 964, 975, 977, 982, 985, 987], "weak": [77, 98, 109, 112, 197, 241, 366, 507, 508, 509, 514, 515, 516, 580, 934, 955], "var": [77, 78, 91, 102, 159, 235, 334, 338, 371, 591, 595, 849, 850, 851, 852, 853, 931, 980], "corr": [77, 154, 235], "corrcoef": [77, 96], "plsca": [77, 433], "x_train_r": 77, "y_train_r": 77, "x_test_r": 77, "y_test_r": 77, "221": [77, 116, 975], "224": [77, 116, 362, 674], "222": [77, 116, 946], "223": [77, 116, 334], "yj": [77, 277], "noiz": 77, "xb": [77, 827], "exce": [77, 252, 281, 372, 393, 465, 552, 599, 608, 981, 984, 986], "plot_compare_cross_decomposit": 77, "pcr": [78, 365], "pl": [78, 183, 334, 365, 432, 433, 434, 435, 977], "greedili": [78, 133, 366, 371, 410], "despit": [78, 177, 179, 197, 212, 262, 350, 364, 577, 578, 580, 927, 934, 955, 980, 981], "suffer": [78, 106, 153, 253, 273, 311, 323, 362, 369, 372, 494, 712, 926, 927, 931, 934, 965, 981], "mention": [78, 197, 281, 319, 323, 337, 341, 342, 348, 350, 646, 839, 840, 920, 925, 927, 952, 955, 966, 979, 980, 981], "dive": [78, 337, 343], "explained_variance_": [78, 484, 491, 494, 965, 979], "onto": [78, 200, 201, 211, 273, 348, 367, 370, 374, 398, 411, 483, 489, 493, 577, 578, 580, 638, 925, 929, 934], "recommend": [78, 106, 146, 196, 207, 231, 244, 277, 282, 323, 324, 326, 331, 335, 337, 339, 343, 345, 348, 353, 365, 366, 367, 369, 371, 389, 397, 399, 401, 410, 446, 458, 485, 488, 494, 499, 511, 512, 519, 532, 533, 539, 556, 561, 581, 582, 588, 620, 626, 642, 647, 648, 650, 652, 752, 758, 760, 804, 811, 813, 820, 827, 828, 832, 833, 835, 836, 837, 838, 840, 849, 852, 884, 899, 920, 928, 931, 933, 935, 938, 941, 943, 945, 946, 947, 950, 955, 968, 974, 975, 981, 982, 983, 984, 986], "linearregress": [78, 121, 150, 158, 169, 174, 175, 176, 177, 182, 185, 196, 209, 214, 231, 249, 274, 319, 337, 348, 349, 363, 369, 415, 520, 582, 585, 596, 599, 602, 604, 621, 622, 637, 927, 931, 941, 964, 976, 977, 981, 984, 985, 986], "retriev": [78, 151, 183, 242, 311, 318, 341, 350, 363, 367, 370, 371, 418, 446, 540, 543, 544, 576, 603, 613, 634, 675, 679, 681, 682, 705, 730, 783, 787, 820, 845, 897, 927, 929, 931, 933, 951, 952, 965, 977, 982, 984, 986], "remark": [78, 133, 325, 337, 941], "predit": 78, "pca_2": 78, "plot_pcr_vs_pl": 78, "multilabel": [79, 148, 205, 242, 252, 332, 339, 340, 350, 357, 432, 437, 447, 458, 459, 465, 473, 491, 507, 514, 517, 624, 625, 653, 657, 663, 675, 678, 679, 683, 684, 687, 688, 703, 705, 732, 733, 736, 737, 741, 743, 777, 781, 805, 812, 815, 819, 821, 831, 852, 855, 857, 873, 893, 894, 895, 942, 953, 954, 966, 968, 974, 975, 976, 977, 979, 980, 981, 982, 985, 986, 987], "1797": [80, 287, 334, 396, 452, 482, 483, 484, 485, 549, 550, 638, 639, 640, 641, 934, 963], "plot_digits_last_imag": 80, "iris": [81, 241, 242, 963], "150x4": 81, "unus": [81, 91, 92, 152, 176, 199, 201, 413, 529, 712, 720, 920, 928, 972, 980, 982, 983, 985, 987], "plai": [81, 86, 112, 137, 162, 188, 229, 256, 264, 294, 295, 323, 348, 966], "set1": [81, 235, 262, 263], "getter": [81, 419, 420, 421, 422, 423, 424, 425, 426, 543, 544, 547], "110": [81, 158, 176, 186, 209, 388, 925, 926], "3rd": [81, 143, 783, 826, 933, 941], "plot_iris_dataset": 81, "easi": [82, 152, 187, 197, 224, 233, 235, 298, 310, 319, 332, 343, 345, 348, 349, 362, 369, 450, 454, 460, 815, 920, 926, 930, 938, 941, 951, 952, 955, 966, 982, 987], "make_gaussian_quantil": [82, 99, 101, 333, 420, 424, 425, 426, 470], "321": 82, "322": [82, 421, 422], "323": 82, "y2": [82, 101, 666, 713, 932], "324": [82, 332], "multi": [82, 97, 98, 148, 152, 157, 195, 198, 201, 205, 206, 213, 216, 228, 232, 244, 252, 267, 280, 285, 310, 313, 324, 332, 334, 339, 340, 346, 350, 353, 362, 369, 370, 372, 379, 388, 402, 412, 419, 424, 445, 446, 454, 455, 460, 464, 465, 469, 470, 472, 491, 499, 500, 501, 503, 505, 507, 508, 509, 511, 514, 515, 517, 519, 560, 583, 593, 596, 597, 602, 603, 607, 608, 610, 611, 612, 613, 616, 618, 622, 623, 624, 625, 626, 631, 634, 640, 653, 663, 670, 678, 683, 689, 691, 732, 746, 760, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 795, 796, 798, 804, 805, 806, 809, 815, 828, 831, 842, 843, 847, 849, 852, 855, 856, 857, 859, 860, 861, 867, 870, 873, 920, 932, 934, 938, 941, 945, 951, 952, 953, 957, 963, 967, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 985, 986, 988], "325": [82, 752, 772], "326": 82, "plot_random_dataset": 82, "make_multilabel_classif": [83, 213, 333, 465, 486, 737, 779, 780, 931, 974, 975, 977, 983], "star": [83, 121, 337], "degener": [83, 374, 391, 404, 483, 670, 927, 931, 981, 985, 986], "vocabulari": [83, 194, 310, 311, 348, 370, 538, 539, 540, 541, 933, 957, 966, 972, 974, 977, 980, 983, 985], "make_ml_clf": 83, "ff3333": 83, "0198e1": 83, "bf5fff": 83, "fcd116": 83, "ff7216": 83, "4dbd33": 83, "87421f": 83, "plot_2d": [83, 199], "p_c": [83, 473], "p_w_c": [83, 473], "allow_unlabel": [83, 213, 473], "return_distribut": [83, 473], "w0": 83, "w1": [83, 369, 607], "sep": [83, 244], "p_w": 83, "plot_random_multilabel_dataset": 83, "blind": [84, 148, 367, 483, 491], "fastica": [84, 148, 367, 482, 485, 491, 965, 972, 974, 980, 986, 987], "increment": [84, 148, 238, 341, 343, 393, 397, 413, 454, 483, 484, 485, 486, 489, 491, 494, 552, 596, 608, 616, 752, 772, 780, 781, 783, 784, 785, 786, 787, 817, 818, 828, 847, 848, 906, 927, 933, 975, 976], "fa": [84, 96, 148, 343, 367, 423, 426, 482, 491, 746, 770], "precomput": [84, 148, 157, 202, 253, 255, 339, 346, 348, 350, 362, 370, 373, 383, 391, 392, 395, 396, 400, 402, 407, 415, 432, 433, 434, 474, 481, 485, 487, 490, 492, 498, 504, 506, 508, 510, 512, 515, 518, 520, 560, 561, 570, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 622, 623, 628, 629, 631, 632, 634, 635, 638, 640, 641, 642, 646, 723, 727, 730, 739, 740, 781, 782, 790, 791, 792, 794, 795, 796, 798, 799, 800, 801, 802, 806, 848, 849, 850, 851, 852, 853, 856, 858, 907, 908, 909, 923, 929, 934, 946, 952, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 985, 986, 987, 988], "olivetti": [85, 106, 330, 367, 445, 968, 972, 980], "chapter": [85, 319, 339, 362, 367, 369, 372, 480, 482, 484, 564, 569, 572, 593, 921, 924, 927, 946, 947], "decompos": [85, 89, 102, 275, 361, 484, 488, 659, 769, 884, 926, 927, 931, 948, 967, 968], "basicconfig": 85, "asctim": 85, "levelnam": 85, "faces_cent": 85, "image_shap": [85, 214], "constrained_layout": [85, 152, 199, 285], "set_constrained_layout_pad": 85, "w_pad": [85, 107, 315], "h_pad": [85, 107, 315], "set_edgecolor": 85, "vec": [85, 370, 488, 490, 497], "im": [85, 96, 246, 257, 954], "pad": [85, 107, 146, 152, 199, 215, 310, 315, 370, 538, 539, 541], "initialis": [85, 488, 490, 497, 972, 980, 981], "mathbb": [85, 102, 138, 365, 931, 938, 946], "4096": [85, 332, 367, 445], "human": [85, 152, 356, 362, 367, 805, 806, 931, 938, 981], "friendli": [85, 324, 337, 345, 367, 840, 943, 944, 951, 952], "visualis": [85, 88, 96, 213, 494, 934, 952], "64x64": [85, 332, 367], "singular": [85, 346, 359, 362, 365, 401, 403, 432, 433, 434, 435, 471, 474, 484, 488, 490, 491, 494, 497, 499, 500, 607, 622, 623, 624, 637, 884, 927, 928, 930, 967, 968, 978, 979], "scalar": [85, 283, 343, 350, 363, 372, 374, 414, 417, 474, 483, 565, 566, 567, 572, 573, 577, 578, 687, 691, 863, 871, 923, 935, 937, 941, 945, 951, 982, 983, 986, 988], "noise_variance_": [85, 167, 482, 484, 491, 606, 979, 986], "pixelwis": 85, "pca_estim": 85, "nmf_estim": 85, "multivari": [85, 151, 329, 364, 367, 370, 423, 466, 467, 468, 577, 578, 579, 580, 599, 621, 628, 629, 783, 784, 785, 786, 787, 925, 927, 930, 933, 951, 957, 965, 968], "subcompon": [85, 367], "ica_estim": 85, "15e": 85, "sparsepca": [85, 481, 483, 484, 485, 487, 489, 490, 491, 492, 495, 496, 972, 979, 980, 982, 983, 985, 986, 987], "batch_pca_estim": 85, "minibatchdictionarylearn": [85, 88, 325, 367, 481, 488, 492, 495, 496, 973, 975, 982, 983, 985, 986, 987, 988], "batch_dict_estim": 85, "That": [85, 133, 168, 206, 235, 239, 311, 312, 324, 331, 345, 350, 366, 371, 372, 394, 397, 507, 514, 543, 764, 855, 856, 920, 928, 929, 931, 937, 947, 981, 982], "enhanc": [85, 336, 337, 341, 348, 350, 362, 931, 949, 970, 971, 972, 973, 974, 980, 981, 982, 983, 984, 985, 986, 987, 988], "consum": [85, 319, 331, 339, 350, 362, 366, 369, 399, 749, 750, 808, 809, 927, 955, 977], "kmeans_estim": 85, "heteroscedast": [85, 93, 111, 181, 367, 824, 835], "fa_estim": 85, "factoranalysi": [85, 93, 96, 367, 494, 973, 975, 984, 986], "wrap": [85, 104, 111, 253, 331, 339, 350, 384, 458, 535, 536, 607, 626, 691, 774, 831, 921, 931, 934, 946, 951, 972, 977, 980, 982, 983, 985, 987], "element": [85, 98, 102, 103, 113, 208, 229, 234, 242, 244, 281, 311, 314, 318, 326, 334, 336, 337, 339, 346, 351, 359, 361, 362, 366, 367, 369, 370, 373, 395, 402, 414, 437, 458, 462, 464, 470, 472, 476, 477, 481, 487, 488, 490, 500, 507, 508, 509, 510, 514, 515, 516, 517, 518, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 567, 582, 608, 609, 616, 618, 626, 627, 628, 657, 667, 676, 683, 685, 695, 712, 718, 727, 731, 737, 738, 778, 788, 789, 790, 791, 792, 794, 796, 798, 799, 803, 805, 806, 811, 827, 828, 830, 834, 847, 852, 855, 856, 857, 858, 886, 887, 888, 902, 904, 905, 925, 927, 931, 932, 935, 938, 941, 942, 943, 947, 955, 957, 977, 978, 980, 982, 983, 984, 986], "suit": [85, 116, 151, 179, 180, 206, 226, 283, 284, 310, 324, 337, 339, 342, 343, 345, 348, 353, 365, 367, 369, 372, 400, 402, 453, 627, 785, 878, 920, 923, 928, 931, 933, 934, 945, 951, 952, 955, 959, 979, 986], "colormap": [85, 143, 298, 647, 985], "uv": [85, 367], "x_1": [85, 128, 138, 176, 180, 365, 367, 369, 372, 563, 575, 607, 821, 927, 933, 935, 941, 945], "x_n": [85, 367, 933, 935, 945], "dict_pos_dict_estim": 85, "positive_dict": [85, 481, 487, 495, 496], "dict_pos_code_estim": 85, "fit_algorithm": [85, 481, 487, 987, 988], "cd": [85, 334, 335, 337, 341, 343, 367, 421, 422, 428, 481, 487, 489, 490, 493, 495, 496, 497, 927, 966, 977, 987], "positive_cod": [85, 481, 487, 492, 495, 496], "dict_pos_estim": 85, "plot_faces_decomposit": 85, "imagin": [86, 135, 366, 367, 370, 927], "simultan": [86, 239, 243, 317, 329, 359, 920, 931, 932, 947, 955, 979], "microphon": 86, "s1": [86, 133, 143, 334, 965], "sinusoid": [86, 100, 111, 212, 372, 924, 965], "s2": [86, 143, 334, 500, 965], "s3": [86, 334, 965], "sawtooth": [86, 965], "saw": [86, 180, 965], "tooth": [86, 965], "s_": [86, 239, 928, 939, 965], "a_": [86, 359, 362, 488, 490, 497, 927, 965], "mixing_": [86, 87, 483, 965], "prove": [86, 955], "revert": [86, 580, 582, 583, 979, 984], "unmix": [86, 374, 483], "allclos": [86, 115, 943, 965], "mean_": [86, 239, 482, 483, 484, 489, 491, 493, 828, 941, 965, 980], "orthogon": [86, 87, 88, 148, 157, 361, 367, 476, 481, 487, 489, 492, 493, 498, 614, 615, 635, 636, 943, 953, 968, 972], "steelblu": [86, 87, 120], "sig": 86, "plot_ica_blind_source_separ": 86, "ica": [87, 361, 374, 947, 967, 968], "geometr": [87, 362, 638, 654, 680, 706, 928, 980], "identifi": [87, 94, 111, 112, 150, 151, 179, 182, 224, 226, 233, 238, 244, 262, 282, 310, 311, 331, 332, 336, 337, 341, 342, 350, 362, 363, 366, 369, 370, 400, 407, 437, 446, 458, 459, 505, 506, 513, 556, 593, 599, 649, 662, 723, 773, 794, 813, 842, 843, 920, 927, 931, 937, 944, 955, 964, 979, 981, 986, 987], "standard_t": 87, "s_pca_": 87, "s_ica_": 87, "plot_sampl": [87, 227], "axis_list": 87, "x_axi": [87, 187, 239], "y_axi": [87, 187], "quiver": 87, "hline": 87, "set_zord": 87, "09": [87, 95, 213, 248, 362, 684, 786, 931, 941, 945], "plot_ica_vs_pca": 87, "fragment": 88, "firstli": [88, 323, 348, 607, 966], "undistort": 88, "noiseless": [88, 929], "pursuit": [88, 148, 157, 367, 424, 476, 481, 487, 492, 498, 614, 615, 635, 636, 953, 968, 972], "omp": [88, 95, 178, 367, 481, 487, 492, 498, 614, 615, 635, 636, 953, 968, 972, 980], "promin": [88, 350], "reminisc": 88, "uint8": [88, 331, 447, 456, 457, 984], "downsampl": [88, 215], "075": 88, "show_with_diff": 88, "puor": 88, "dico": 88, "n_iter_": [88, 187, 224, 350, 391, 397, 398, 399, 421, 422, 432, 433, 434, 481, 482, 483, 486, 487, 488, 489, 490, 493, 511, 512, 577, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 624, 626, 627, 628, 629, 630, 640, 642, 744, 745, 797, 805, 806, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 976, 979, 980, 982, 985, 986, 988], "n_steps_": [88, 399, 487, 488, 985], "reconstruct_from_patches_2d": [88, 370, 533], "intercept": [88, 171, 188, 196, 307, 350, 432, 433, 434, 499, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 637, 823, 827, 829, 847, 848, 854, 927, 929, 931, 936, 945, 946, 975, 977, 981, 982], "transform_algorithm": [88, 95, 481, 487, 492, 988], "n1": 88, "atom": [88, 95, 367, 481, 487, 489, 492, 493, 495, 496, 603, 613, 634, 927, 972, 985], "transform_n_nonzero_coef": [88, 95, 481, 487, 492], "n2": 88, "n4": 88, "transform_alpha": [88, 95, 481, 487, 492, 985], "set_param": [88, 96, 103, 108, 111, 152, 153, 159, 167, 168, 172, 183, 187, 211, 248, 280, 301, 311, 340, 350, 362, 363, 369, 372, 376, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 744, 745, 746, 749, 750, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 921, 937, 957, 964, 972, 978, 979, 980, 985, 986], "plot_image_denois": 88, "ipca": [89, 483, 484], "flip": [89, 532, 691, 884, 933, 976, 985], "incrementalpca": [89, 325, 367, 483, 485, 489, 491, 494, 976, 979, 980, 982, 983, 986], "x_ipca": 89, "x_pca": 89, "turquois": [89, 94, 95, 113, 185, 196, 202, 223, 224, 242], "x_transform": [89, 116, 435, 481, 482, 483, 484, 485, 487, 489, 493, 516, 588, 589, 638, 639, 640, 641], "nmean": 89, "shadow": [89, 94, 95, 202, 289, 305, 312, 370], "scatterpoint": [89, 94, 202, 223, 289], "plot_incremental_pca": 89, "kernal": 90, "nest": [90, 99, 148, 168, 228, 324, 343, 350, 353, 362, 366, 372, 376, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 412, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 454, 469, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 744, 745, 746, 749, 750, 751, 760, 770, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 899, 920, 931, 934, 972, 973, 976, 978, 979, 980, 986], "train_ax": 90, "test_ax": 90, "straight": [90, 169, 175, 177, 232, 323], "inner": [90, 111, 236, 240, 289, 323, 370, 394, 464, 496, 532, 539, 598, 619, 630, 724, 726, 923, 931, 941, 946, 973, 976, 986], "x_test_kernel_pca": 90, "orig_data_ax": 90, "pca_proj_ax": 90, "kernel_pca_proj_ax": 90, "unfold": [90, 340, 928], "untangl": 90, "mind": [90, 150, 151, 152, 197, 277, 278, 311, 319, 337, 356, 364, 366, 369, 596, 597, 654, 927, 946, 951, 957, 964], "investig": [90, 96, 147, 306, 337, 927], "pca_back_proj_ax": 90, "kernel_pca_back_proj_ax": 90, "reli": [90, 108, 133, 154, 167, 168, 253, 281, 285, 310, 323, 324, 339, 342, 345, 346, 348, 350, 358, 359, 362, 367, 369, 370, 499, 535, 536, 543, 547, 557, 558, 813, 897, 920, 923, 925, 927, 931, 934, 946, 955, 980, 981, 982, 986, 988], "analyt": [90, 367, 372, 482, 570, 658, 921, 925, 931, 950, 955], "kernelridg": [90, 135, 212, 622, 924, 976], "relianc": 90, "plot_kernel_pca": 90, "aid": [91, 232, 362, 739, 740, 928, 955, 972, 984], "kevin": [91, 593, 974, 976, 978, 979, 982, 983, 984, 986, 987], "hugh": [91, 823, 974, 985], "pdf": [91, 235, 258, 273, 334, 337, 362, 371, 393, 399, 481, 484, 487, 491, 591, 594, 599, 608, 614, 616, 617, 621, 626, 629, 632, 633, 635, 636, 642, 785, 786, 797, 804, 840, 842, 927, 944, 947, 954, 972], "30000": [91, 332], "pdf_z": 91, "plot_fig": [91, 176], "fig_num": [91, 176], "pca_scor": [91, 93], "vt": [91, 500], "full_matric": 91, "x_pca_axi": 91, "y_pca_axi": 91, "z_pca_axi": 91, "x_pca_plan": 91, "y_pca_plan": 91, "z_pca_plan": 91, "plot_surfac": [91, 152, 176], "plot_pca_3d": 91, "cla": 92, "plot_pca_iri": 92, "homoscedast": [93, 209, 277, 931, 980], "succe": 93, "subspac": [93, 365, 369, 402, 465, 505, 506, 641, 645, 884, 925, 934, 937, 943, 955, 965], "overestim": [93, 319, 366], "circumst": [93, 197, 934, 951], "nip": [93, 334, 465, 491, 516, 591, 931], "598": [93, 491], "604": [93, 491], "minka": [93, 491, 927], "deni": [93, 974, 975, 979, 980, 981, 987], "engemann": [93, 974, 975, 979], "x_homo": 93, "x_hetero": 93, "cross_val_scor": [93, 124, 146, 147, 148, 228, 231, 240, 249, 301, 319, 337, 339, 348, 366, 369, 470, 525, 653, 691, 746, 769, 771, 855, 856, 920, 931, 961, 972, 973, 974, 975, 976, 979, 980, 981, 984, 985], "fa_scor": 93, "shrunk_cov_scor": 93, "lw_score": 93, "n_components_pca": 93, "n_components_fa": 93, "n_components_pca_ml": 93, "axhlin": [93, 123, 169, 234, 238], "violet": 93, "plot_pca_vs_fa_model_select": 93, "flower": [94, 244, 456, 457, 931, 951], "x_r": [94, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553], "x_r2": 94, "plot_pca_vs_lda": 94, "ricker": 95, "sparsecod": [95, 367, 481, 487, 490, 498, 979, 980, 982, 984, 986], "mexican": 95, "piecewis": [95, 283, 359, 922, 927, 941, 947], "matter": [95, 227, 319, 362, 369, 517, 618, 626, 628, 927, 976], "motiv": [95, 337, 339, 350, 369, 923, 931, 941, 955, 985], "heavier": [95, 364, 927], "subsampl": [95, 110, 113, 152, 179, 196, 197, 231, 282, 408, 509, 510, 511, 512, 513, 582, 629, 651, 749, 750, 774, 813, 825, 836, 863, 873, 923, 927, 952, 954, 972, 982, 986], "ricker_funct": 95, "ricker_matrix": 95, "d_fix": 95, "d_multi": 95, "first_quart": 95, "transform_n_nozero_coef": 95, "lasso_lar": [95, 481, 487, 492, 498, 982], "n_nonzero": 95, "coder": [95, 492, 666], "flatnonzero": [95, 167, 234, 243, 244, 730], "soft": [95, 119, 120, 337, 350, 519, 520, 843, 851, 945, 955, 977], "debias": 95, "lstsq": [95, 337, 607, 620], "rcond": 95, "07": [95, 319, 332, 362, 481, 511, 512, 642, 931, 945], "97": [95, 154, 213, 227, 298, 334, 343, 349, 366, 608, 932, 941, 972], "plot_sparse_cod": 95, "uncov": [96, 645], "inher": [96, 174, 319, 362, 367, 921, 923, 925, 926, 928, 932], "varimax": [96, 367, 482, 984], "jona": [96, 984], "sassenhagen": [96, 984], "set_yticklabel": [96, 138, 146, 147, 154, 246, 312], "n_comp": [96, 156], "unrot": 96, "plot_varimax_fa": 96, "predictor": [97, 148, 179, 197, 339, 349, 350, 363, 365, 366, 369, 372, 416, 417, 432, 433, 434, 446, 466, 467, 468, 505, 506, 512, 515, 518, 552, 560, 580, 582, 583, 598, 603, 607, 619, 623, 630, 769, 771, 780, 781, 809, 821, 822, 828, 905, 927, 932, 973, 979, 982], "stack": [97, 148, 258, 318, 336, 345, 348, 350, 368, 414, 416, 417, 446, 465, 512, 515, 517, 518, 562, 577, 578, 580, 603, 623, 769, 771, 809, 813, 821, 822, 828, 905, 921, 951, 952, 953, 954, 968, 975, 979, 980, 981, 982, 983], "versu": [97, 118, 148, 151, 157, 188, 194, 212, 224, 228, 261, 286, 362, 366, 369, 372, 454, 470, 484, 503, 506, 560, 589, 608, 609, 616, 618, 624, 625, 626, 627, 732, 743, 746, 751, 770, 774, 780, 809, 843, 844, 851, 852, 855, 856, 920, 927, 931, 932, 937, 944, 945, 946, 964, 980], "isolationforest": [97, 148, 206, 215, 581, 774, 851, 937, 978, 979, 980, 981, 983, 985, 986, 987, 988], "oob": [97, 110, 148, 369, 465, 514, 952, 974, 985], "votingclassifi": [97, 148, 454, 514, 520, 608, 786, 790, 852, 855, 920, 977, 978, 979, 980, 981, 982, 983, 985, 986], "vote": [97, 119, 120, 148, 252, 350, 351, 451, 505, 506, 507, 510, 514, 515, 519, 520, 607, 776, 790, 791, 796, 798, 932, 934, 953, 964, 968, 975, 977, 982], "hasti": [98, 99, 102, 103, 109, 113, 167, 234, 334, 366, 369, 469, 470, 503, 509, 510, 578, 606, 671, 672, 673, 778, 795, 840, 855, 856, 921, 925, 927, 932, 938, 943, 945, 947], "2009": [98, 99, 102, 103, 113, 362, 366, 367, 369, 370, 469, 470, 478, 481, 487, 488, 490, 491, 494, 497, 503, 509, 510, 585, 621, 629, 646, 779, 855, 856, 883, 884, 927, 931, 932, 938, 947], "tibshirani": [98, 102, 103, 113, 167, 234, 334, 366, 369, 470, 509, 510, 578, 606, 671, 672, 673, 778, 795, 855, 856, 921, 925, 927, 932, 938, 947], "friedman": [98, 102, 103, 113, 234, 364, 366, 369, 428, 466, 467, 468, 470, 508, 509, 510, 515, 543, 544, 778, 855, 856, 858, 925, 927, 932, 938, 947], "ed": [98, 103, 113, 369, 470, 509, 510, 943, 972, 979], "springer": [98, 102, 103, 113, 234, 366, 367, 369, 470, 485, 509, 510, 640, 644, 646, 655, 670, 675, 689, 690, 705, 744, 855, 856, 928, 931, 932, 938, 947], "zhu": [98, 99, 369, 469, 503, 608, 842], "zou": [98, 99, 167, 369, 469, 503, 606, 927, 945], "rosset": [98, 99, 369, 469, 503], "make_hastie_10_2": [98, 109, 113, 239, 333, 369, 509, 938], "12_000": 98, "Be": [98, 130, 144, 310, 337, 364, 517, 518, 598, 604, 605, 606, 608, 609, 619, 630, 654, 764, 765, 823, 941, 969, 973], "stump": [98, 101, 369, 509, 983], "2_000": 98, "dt_stump": 98, "min_samples_leaf": [98, 110, 111, 153, 280, 283, 314, 369, 507, 508, 509, 510, 511, 512, 514, 515, 516, 855, 856, 857, 858, 947, 978], "dt_stump_err": 98, "dt_err": 98, "ada_discret": 98, "ada_r": 98, "zero_one_loss": [98, 337, 653, 683, 931, 973, 974, 975], "ada_discrete_err": 98, "staged_predict": [98, 99, 112, 369, 503, 504, 509, 510, 511, 512, 972, 984], "ada_discrete_err_train": 98, "ada_real_err": 98, "ada_real_err_train": 98, "leg": 98, "fancybox": [98, 305], "get_fram": 98, "plot_adaboost_hastie_10_2": 98, "sphere": [99, 148, 198, 199, 311, 368, 469, 539, 638, 639, 640, 641, 642, 713, 870, 925, 929, 934], "roughli": [99, 111, 168, 227, 245, 253, 278, 323, 350, 367, 370, 469, 928, 972], "samm": [99, 101, 369, 503], "13000": 99, "bdt_real": 99, "bdt_discret": 99, "real_test_error": 99, "discrete_test_error": 99, "real_test_predict": 99, "discrete_test_predict": 99, "n_trees_discret": 99, "n_trees_real": 99, "termin": [99, 324, 342, 343, 345, 353, 362, 398, 411, 503, 504, 508, 509, 510, 513, 515, 616, 617, 618, 626, 628, 805, 806, 856, 858, 937, 947], "alwai": [99, 108, 111, 158, 179, 197, 204, 210, 238, 241, 245, 295, 311, 319, 323, 324, 331, 337, 338, 339, 343, 349, 350, 353, 360, 362, 363, 366, 369, 370, 371, 372, 383, 394, 399, 414, 415, 417, 419, 432, 433, 434, 438, 446, 458, 459, 494, 499, 501, 502, 504, 506, 508, 509, 510, 511, 512, 514, 515, 518, 520, 531, 538, 539, 541, 544, 561, 577, 578, 580, 582, 583, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 621, 622, 623, 626, 628, 629, 642, 645, 655, 659, 665, 671, 672, 673, 681, 683, 684, 688, 731, 734, 735, 744, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 781, 782, 791, 792, 799, 800, 806, 813, 821, 826, 828, 840, 848, 849, 850, 852, 853, 855, 856, 858, 885, 920, 921, 923, 925, 927, 930, 931, 934, 937, 939, 943, 944, 946, 947, 955, 957, 964, 972, 974, 976, 977, 978, 980, 981, 982, 983, 985, 986, 987], "crop": [99, 345, 987], "discrete_estimator_error": 99, "estimator_errors_": [99, 503, 504], "real_estimator_error": 99, "discrete_estimator_weight": 99, "estimator_weights_": [99, 503, 504], "62": [99, 319, 332, 362, 443, 444, 788, 789, 975], "plot_adaboost_multiclass": 99, "1d": [100, 102, 148, 152, 180, 210, 254, 305, 316, 337, 344, 346, 349, 350, 363, 368, 414, 417, 567, 583, 603, 607, 610, 613, 634, 653, 662, 663, 669, 678, 679, 683, 687, 691, 732, 733, 736, 743, 790, 791, 792, 793, 794, 796, 798, 799, 800, 813, 863, 867, 868, 894, 918, 932, 957, 964, 972, 977, 978, 979, 981, 985, 986], "299": [100, 630], "drucker": [100, 369, 504], "1997": [100, 332, 367, 369, 372, 485, 504, 640, 644, 927, 928, 931], "dummi": [100, 179, 197, 238, 326, 339, 342, 357, 821, 829, 941, 947, 968, 973, 975, 976, 977, 979], "decisiontreeregressor": [100, 102, 216, 274, 280, 316, 317, 342, 504, 506, 508, 509, 510, 512, 515, 582, 583, 855, 858, 860, 879, 947, 973, 974, 977, 978, 981, 982, 983, 984, 985, 986, 987], "adaboostregressor": [100, 369, 503, 512, 974, 975, 978, 981, 982, 985, 987], "regr_1": [100, 316, 317], "regr_2": [100, 316, 317], "y_1": [100, 316, 317, 365, 931, 935, 945], "y_2": [100, 316, 317, 935], "plot_adaboost_regress": 100, "puriti": [101, 859, 861], "bdt": 101, "plot_color": [101, 315], "br": 101, "plot_step": [101, 107, 315], "class_nam": [101, 229, 859, 860, 861, 947, 988], "xx0": [101, 581], "twoclass_output": 101, "plot_rang": 101, "plot_adaboost_twoclass": 101, "irreduc": [102, 931], "light": [102, 332], "beam": [102, 972], "pointwis": [102, 142, 373, 395], "offset": [102, 156, 348, 364, 367, 419, 458, 459, 513, 582, 583, 591, 592, 594, 595, 627, 677, 724, 726, 794, 851, 931, 945, 964, 980], "narrow": [102, 111, 273, 275, 342, 788, 789], "tradeoff": [102, 148, 211, 228, 242, 243, 310, 323, 345, 368, 465, 514, 676, 738, 774, 809, 828, 847, 928, 964, 981, 984], "bootstrap": [102, 103, 110, 146, 238, 247, 282, 366, 369, 504, 505, 506, 507, 508, 513, 514, 515, 873, 902, 927, 972, 973, 975, 977, 980, 982, 985], "stem": [102, 153, 163, 178, 227, 366, 370, 923, 933], "baggingregressor": [102, 369, 505, 858, 975, 978, 980, 983, 987, 988], "n_repeat": [102, 105, 112, 132, 151, 153, 154, 235, 280, 366, 465, 584, 761, 762, 939], "knn": [102, 119, 125, 146, 261, 262, 265, 278, 282, 289, 310, 369, 552, 797, 842, 843, 934, 944, 964, 978], "y_predict": [102, 339, 972], "y_error": [102, 185], "y_nois": 102, "y_bia": 102, "y_var": 102, "plot_bias_vari": 102, "z_i": [103, 935], "y_i": [103, 283, 306, 360, 369, 922, 923, 927, 931, 935, 945, 946, 947], "whilst": [103, 201], "practition": 103, "suitabl": [103, 111, 165, 269, 312, 331, 332, 343, 346, 362, 367, 370, 402, 412, 418, 437, 455, 458, 577, 585, 783, 784, 787, 823, 845, 896, 900, 925, 927, 930, 941, 943, 945, 951, 954, 966, 986, 987], "p592": 103, "593": 103, "kian": [103, 977, 987], "ho": [103, 369, 505, 506, 931, 977, 980, 981, 986], "hui": [103, 167, 488, 490, 497, 606, 927], "ordereddict": 103, "123": [103, 120, 319, 369, 466, 467, 468, 505, 506, 781, 932, 939], "warm_start": [103, 139, 172, 283, 339, 343, 350, 369, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 560, 596, 598, 599, 602, 608, 610, 612, 616, 617, 618, 619, 626, 627, 628, 630, 744, 745, 797, 805, 806, 937, 953, 968, 972, 975, 976, 977, 980, 981, 982, 983, 986, 988], "disabl": [103, 310, 335, 337, 370, 399, 410, 487, 488, 489, 496, 509, 510, 511, 512, 807, 867, 868, 941, 978, 981, 985, 987], "track": [103, 110, 288, 337, 340, 341, 353, 358, 484, 900, 932, 951, 952, 979, 982], "trajectori": 103, "ensemble_clf": 103, "oob_scor": [103, 369, 505, 506, 507, 508, 514, 515, 977, 979], "log2": [103, 189, 217, 507, 508, 509, 510, 514, 515, 855, 856, 857, 858, 932], "error_r": 103, "min_estim": 103, "max_estim": 103, "oob_error": 103, "oob_score_": [103, 505, 506, 507, 508, 509, 510, 514, 515, 974, 988], "clf_err": 103, "plot_ensemble_oob": 103, "betatim": [104, 117, 987], "leak": [104, 240, 310, 319, 363, 366, 808, 832, 833, 835, 836, 837, 838, 941, 972, 979, 982], "80_000": 104, "x_full_train": 104, "y_full_train": 104, "x_train_ensembl": 104, "x_train_linear": 104, "y_train_ensembl": 104, "y_train_linear": 104, "gradientboostingclassifi": [104, 109, 110, 113, 275, 319, 348, 369, 503, 511, 582, 583, 932, 938, 972, 973, 974, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 988], "random_forest": 104, "gradient_boost": [104, 973, 974, 975, 981], "histgradientboostingclassifi": [104, 280, 281, 282, 283, 285, 324, 369, 509, 582, 583, 921, 981, 982, 983, 984, 985, 986, 987], "randomtreesembed": [104, 116, 200, 369, 857, 973, 980, 981, 985, 986, 987], "random_tree_embed": 104, "rt_model": 104, "rf_appli": 104, "rf_leaves_yield": 104, "kw_arg": [104, 812, 941, 978], "rf_model": 104, "gbdt_appli": 104, "gbdt_leaves_yield": 104, "gbdt_model": 104, "roccurvedisplai": [104, 215, 218, 232, 244, 245, 280, 344, 737, 738, 937, 969, 982], "rt": 104, "rf": [104, 117, 120, 121, 153, 280, 319, 369, 517, 519, 520], "gbdt": [104, 152, 280, 281, 342, 369], "model_displai": 104, "plot_feature_transform": 104, "artifici": [105, 108, 115, 147, 199, 212, 271, 310, 332, 333, 334, 342, 359, 361, 362, 366, 367, 372, 485, 646, 778, 805, 806, 924, 928, 930, 932, 938, 943, 947, 952, 955, 972], "feature_importances_": [105, 106, 112, 133, 153, 154, 350, 369, 371, 503, 504, 507, 508, 509, 510, 514, 515, 516, 543, 544, 547, 855, 856, 857, 858, 974, 977, 981], "estimators_": [105, 107, 213, 280, 350, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 776, 777, 778, 779, 780, 781, 782, 973, 979, 986], "forest_import": 105, "mdi": [105, 112, 148, 149, 154, 369, 414, 446, 514, 580, 584, 774, 808, 822, 939], "overcom": [105, 323, 370], "permutation_import": [105, 106, 112, 153, 154, 280, 369, 503, 504, 507, 508, 509, 510, 514, 515, 516, 855, 856, 857, 858, 939, 982, 984, 985], "importances_mean": [105, 112, 153, 154, 280, 584, 939], "importances_std": [105, 584, 939], "omit": [105, 150, 151, 292, 342, 375, 425, 484, 616, 618, 626, 753, 755, 776, 777, 780, 783, 784, 785, 786, 787, 805, 929, 936], "plot_forest_import": 105, "hotter": 106, "job": [106, 224, 337, 341, 345, 369, 373, 388, 395, 398, 400, 402, 407, 408, 411, 414, 417, 418, 422, 481, 485, 486, 487, 489, 492, 493, 495, 496, 498, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 552, 560, 584, 589, 607, 638, 639, 640, 641, 642, 643, 644, 723, 727, 730, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 807, 810, 842, 843, 845, 897, 955, 959], "five": [106, 222, 288, 291, 332, 481, 489, 495, 928, 934, 946, 955, 972], "drawback": [106, 196, 923, 926], "img_shap": 106, "imp_reshap": 106, "met": [106, 339, 371, 484, 491, 577, 621, 927, 931, 980], "plot_forest_importances_fac": 106, "third": [107, 112, 128, 133, 143, 197, 206, 227, 258, 275, 324, 332, 336, 348, 351, 370, 484, 538, 539, 540, 541, 748, 749, 750, 755, 790, 791, 792, 794, 796, 826, 837, 899, 920, 942, 949, 972, 983], "fourth": [107, 957], "descend": [107, 577, 982], "extratreesclassifi": [107, 116, 369, 371, 508, 514, 516, 857, 858, 932, 975, 976, 980, 981, 982, 985, 986, 987, 988], "decisiontre": [107, 977], "consol": [107, 335, 958], "perhap": [107, 334, 336, 345, 350, 368, 952], "worth": [107, 152, 179, 337, 345, 955], "extratre": [107, 116, 323, 975], "sequenti": [107, 127, 148, 173, 236, 282, 335, 367, 369, 370, 451, 484, 543, 547, 552, 553, 555, 556, 596, 597, 602, 603, 610, 611, 612, 613, 623, 808, 921, 939, 945, 951, 953, 968, 972, 981, 984], "rdylbu": [107, 315], "plot_step_coars": 107, "plot_idx": 107, "model_titl": 107, "model_detail": 107, "blend": [107, 118, 350, 366, 951], "estimator_alpha": 107, "coarser": [107, 111], "regularli": [107, 348, 933], "xx_coarser": 107, "yy_coars": 107, "z_points_coars": 107, "cs_point": 107, "plot_forest_iri": 107, "equidist": [108, 642], "lowa": 108, "sale": [108, 235, 931, 955], "42165": 108, "categorical_columns_subset": 108, "bldgtype": 108, "garagefinish": 108, "lotconfig": 108, "masvnrtyp": [108, 118], "housestyl": [108, 118], "fireplacequ": 108, "extercond": 108, "exterqu": [108, 118], "poolqc": 108, "numerical_columns_subset": 108, "3ssnporch": 108, "fireplac": 108, "bsmthalfbath": 108, "halfbath": 108, "garagecar": [108, 118], "totrmsabvgrd": 108, "bsmtfinsf1": [108, 118], "bsmtfinsf2": 108, "grlivarea": 108, "screenporch": 108, "n_categorical_featur": [108, 511, 512, 582, 583], "n_numerical_featur": 108, "make_column_transform": [108, 118, 151, 208, 281, 363, 414, 416, 980], "dropper": 108, "hist_drop": 108, "hist_one_hot": 108, "etc": [108, 179, 197, 230, 239, 240, 319, 323, 325, 337, 339, 341, 342, 348, 349, 350, 359, 363, 366, 370, 439, 453, 507, 508, 514, 515, 618, 626, 642, 668, 720, 746, 760, 779, 782, 812, 823, 855, 856, 857, 858, 859, 861, 867, 868, 878, 920, 921, 925, 931, 934, 951, 952, 955, 972, 979, 981, 982], "use_encoded_valu": [108, 118, 153, 822, 984], "unknown_valu": [108, 118, 153, 822, 984, 986, 987], "hist_ordin": 108, "n_unique_categori": 108, "hist_n": 108, "mean_absolute_percentage_error": [108, 931, 984, 986], "neg_mean_absolute_percentage_error": [108, 931, 939], "n_cv_fold": [108, 752, 772, 775], "dropped_result": 108, "one_hot_result": 108, "ordinal_result": 108, "native_result": 108, "plot_result": [108, 221, 222, 227], "figure_titl": 108, "plot_info": 108, "test_scor": [108, 110, 112, 187, 234, 237, 250, 306, 314, 349, 366, 752, 771, 772, 775], "y_limit": 108, "mape_cv_mean": 108, "mape_cv_std": 108, "c0": [108, 209], "slowest": [108, 883, 884], "theori": [108, 212, 226, 306, 334, 361, 362, 366, 369, 640, 644, 675, 705, 839, 840, 884, 920, 927, 928, 930, 931, 932, 946, 947], "poorer": [108, 319, 367], "slight": [108, 184, 282, 369, 399, 982], "acf": 108, "bde": 108, "isol": [108, 114, 206, 215, 311, 335, 337, 343, 353, 513, 794, 851, 981, 982], "bcde": 108, "histgradientboostingregressor__max_depth": 108, "histgradientboostingregressor__max_it": 108, "altogeth": [108, 343, 980], "plot_gradient_boosting_categor": 108, "suffici": [109, 118, 187, 249, 298, 323, 350, 362, 371, 482, 496, 607, 632, 633, 765, 766, 932, 934, 952, 981, 987], "validation_fract": [109, 187, 283, 369, 509, 510, 511, 512, 616, 617, 618, 626, 628, 805, 806, 945, 980, 986], "denot": [109, 346, 350, 353, 360, 366, 369, 538, 539, 541, 746, 752, 760, 821, 822, 916, 920, 923, 927, 929, 931, 932, 941, 944, 957], "kept": [109, 226, 253, 306, 331, 341, 356, 372, 446, 485, 488, 490, 491, 496, 497, 547, 560, 561, 569, 570, 594, 645, 744, 745, 868, 941, 980, 981], "asid": [109, 187, 356, 509, 510, 511, 512, 616, 617, 618, 626, 628, 805, 806], "until": [109, 133, 187, 247, 282, 284, 342, 350, 351, 359, 362, 366, 371, 372, 458, 459, 507, 508, 509, 510, 514, 515, 516, 543, 552, 596, 597, 602, 603, 608, 609, 610, 611, 612, 613, 616, 618, 621, 626, 627, 628, 644, 744, 745, 749, 750, 805, 806, 844, 847, 855, 856, 857, 858, 906, 920, 927, 928, 936, 944, 947, 966, 975, 979, 980, 986], "n_estimators_": [109, 509, 510], "vighnesh": [109, 977, 978, 980], "birodkar": [109, 977, 978, 980], "vighneshbirodkar": 109, "rvraghav93": [109, 239, 273], "data_list": 109, "800": [109, 283, 332, 534, 642], "n_gb": 109, "score_gb": 109, "time_gb": 109, "n_gbe": 109, "gbe": 109, "gb": [109, 121, 369, 503, 583], "bar_width": 109, "bar1": 109, "crimson": 109, "bar2": 109, "coral": 109, "n_est": 109, "max_i": [109, 213, 933], "plot_gradient_boosting_early_stop": 109, "fly": [110, 342, 345, 458, 459, 532, 972, 974, 981], "pessimist": [110, 369], "cumul": [110, 179, 197, 362, 675, 684, 705, 825, 836, 941, 945, 979, 981, 982], "demand": [110, 370, 746, 760, 769, 770, 771], "special": [110, 151, 169, 197, 263, 298, 331, 333, 339, 343, 348, 350, 362, 365, 367, 414, 417, 503, 505, 509, 769, 859, 920, 925, 927, 929, 930, 931, 932, 934, 947, 979, 982, 984, 986], "expit": [110, 169, 369, 511, 927, 979], "ridgewai": [110, 369], "gbm": [110, 369, 975], "x3": [110, 215, 363, 965], "binomi": [110, 113, 369, 503, 509, 511, 927, 986], "1200": [110, 273, 369], "acc": 110, "heldout_scor": 110, "devianc": [110, 113, 179, 197, 369, 503, 508, 509, 510, 511, 512, 515, 598, 619, 630, 671, 672, 673, 696, 698, 701, 856, 858, 927, 947, 973, 982, 983, 985, 986, 988], "y_proba": [110, 113, 278, 350, 808], "staged_predict_proba": [110, 113, 503, 509, 511, 972], "cv_estim": 110, "cv_clf": 110, "val_scor": 110, "cv_score": 110, "cumsum": [110, 179, 197, 979], "oob_improvement_": [110, 369, 509, 510, 974], "oob_best_it": 110, "test_best_it": 110, "cv_best_it": 110, "brew": [110, 335, 353], "oob_color": 110, "174": [110, 343, 534], "212": [110, 240, 290, 334, 419, 450, 937, 964], "test_color": 110, "127": [110, 972], "201": [110, 334, 534], "cv_color": 110, "253": [110, 484], "192": [110, 343, 972], "oob_lin": 110, "test_lin": 110, "cv_line": 110, "dashdot": [110, 135, 138], "xticks_po": 110, "tolist": [110, 146, 154, 234, 282, 332], "xticks_label": 110, "plot_gradient_boosting_oob": 110, "atleast_2d": [111, 339], "expected_i": 111, "amplitud": [111, 140, 142, 173, 372, 927], "lognorm": [111, 141, 160, 225, 277, 941], "tail": [111, 147, 151, 179, 181, 235, 273, 471, 474, 927], "imposs": [111, 312, 952], "mean_pinball_loss": [111, 283, 927, 931, 985], "all_model": 111, "min_samples_split": [111, 112, 113, 239, 247, 274, 282, 369, 507, 508, 509, 510, 514, 515, 516, 749, 750, 855, 856, 857, 858, 920, 947, 978], "gbr": 111, "gbr_l": 111, "5th": [111, 143], "95th": [111, 697], "y_med": 111, "fill_between": [111, 123, 135, 140, 142, 144, 158, 159, 197, 235, 237, 238, 239, 245, 250, 752], "unfortun": [111, 150, 151, 197, 345, 348, 369, 458, 459], "sinoisoid": 111, "highlight_min": [111, 168], "font": [111, 168, 193, 211, 859, 861], "pbl": 111, "asymmetr": [111, 181, 350, 977], "signficiantli": 111, "nor": [111, 238, 310, 319, 323, 342, 348, 370, 388, 544, 871, 935, 947, 983], "underestim": [111, 152, 179, 197, 235, 337], "extrem": [111, 179, 181, 214, 273, 290, 311, 337, 340, 362, 367, 507, 508, 514, 515, 516, 582, 583, 629, 673, 701, 857, 858, 859, 861, 931, 933], "coverage_fract": 111, "y_low": 111, "y_high": 111, "hypothesi": [111, 235, 241, 306, 366, 640, 644, 773, 928], "pinbal": [111, 283, 512, 620, 672, 697, 927, 985, 986], "experiment": [111, 146, 147, 179, 246, 247, 282, 283, 326, 337, 339, 340, 347, 348, 350, 366, 446, 499, 577, 646, 749, 750, 899, 901, 920, 921, 927, 930, 931, 951, 952, 960, 968, 980, 981, 984, 985, 986, 987], "enable_halving_search_cv": [111, 246, 247, 282, 341, 749, 750, 920], "halvingrandomsearchcv": [111, 247, 282, 529, 749, 920, 984, 986, 987], "make_scor": [111, 239, 366, 746, 770, 771, 931, 981], "neg_mean_pinball_loss_05p_scor": 111, "greater_is_bett": [111, 691, 931], "search_05p": 111, "max_resourc": [111, 749, 750, 920], "min_resourc": [111, 749, 750], "redefin": [111, 151], "neg_mean_pinball_loss_95p_scor": 111, "search_95p": 111, "estimator__alpha": 111, "did": [111, 135, 151, 154, 179, 187, 197, 332, 577, 662, 765, 849, 965, 973, 974, 978, 979, 980, 981, 982, 983, 985, 987], "untun": 111, "joint": [111, 148, 152, 157, 199, 363, 561, 602, 612, 642, 783, 784, 785, 786, 787, 847, 927, 928, 932, 936, 938, 942, 972], "sadli": 111, "plot_gradient_boosting_quantil": 111, "tackl": [112, 235, 324, 337, 362, 785, 933, 955, 960], "katrina": [112, 983], "ni": [112, 978, 983], "nilichen": 112, "reg": [112, 151, 159, 274, 281, 303, 369, 508, 510, 518, 600, 601, 603, 604, 605, 606, 607, 613, 614, 615, 620, 621, 628, 629, 639, 643, 858, 927, 977], "train_score_": [112, 369, 509, 510, 511, 512], "impur": [112, 318, 352, 369, 371, 503, 504, 507, 508, 509, 510, 514, 515, 516, 855, 856, 857, 858, 859, 861, 947, 968, 977, 978, 979, 980], "feature_import": 112, "sorted_idx": [112, 280], "po": [112, 202, 370], "align": [112, 147, 199, 221, 246, 312, 350, 639, 643, 934, 945, 967, 968, 988], "vert": [112, 153, 154, 280, 945], "plot_gradient_boosting_regress": 112, "consider": [113, 136, 139, 230, 236, 242, 337, 372, 569, 746, 760, 920, 933, 937, 945, 955], "return_invers": [113, 339], "original_param": 113, "max_leaf_nod": [113, 179, 283, 318, 369, 507, 508, 509, 510, 511, 512, 514, 515, 516, 855, 856, 857, 858, 975, 981, 983], "test_devi": 113, "plot_gradient_boosting_regular": 113, "anomali": [114, 148, 205, 215, 259, 260, 332, 361, 419, 462, 472, 513, 589, 627, 794, 809, 851, 937, 978, 979], "recurs": [114, 127, 148, 314, 339, 361, 362, 366, 391, 392, 393, 396, 413, 452, 465, 513, 543, 544, 547, 552, 582, 583, 608, 765, 852, 931, 934, 937, 938, 947, 953, 965, 968, 972, 982, 983], "deform": [114, 226, 308], "notat": [114, 350, 363, 367, 370, 540, 662, 927, 931, 957, 981, 988], "120": [114, 200, 371, 540, 972], "cluster_1": 114, "cluster_2": 114, "legend_el": [114, 192, 238], "nuniformli": 114, "max_sampl": [114, 146, 369, 505, 506, 507, 508, 513, 514, 515, 584, 982, 985, 988], "ax_": [114, 229, 238, 242, 278, 280, 344, 389, 581, 647, 648, 650, 651, 652, 752], "nof": 114, "plot_isolation_forest": 114, "trend": [115, 140, 152, 209, 269, 372, 955, 979], "xgboost": [115, 369, 951], "partialdependencedisplai": [115, 152, 216, 281, 282, 283, 285, 344, 583, 938, 982, 983, 984, 985, 986, 987], "f_0": 115, "f_1": [115, 242, 931], "gbdt_no_cst": [115, 281], "gbdt_with_monotonic_cst": 115, "monotonic_cst": [115, 281, 283, 369, 511, 512, 987], "line_kw": [115, 216, 237, 281, 582, 752], "unconstrain": [115, 152, 281, 332, 945], "axes_": [115, 216, 281, 344, 582], "f_idx": 115, "oscil": [115, 152, 184, 362, 391], "specifii": 115, "x_df": 115, "gbdt_with_monotonic_cst_df": 115, "plot_monotonic_constraint": 115, "excel": [116, 331, 337, 640, 644, 927, 955], "bernoullinb": [116, 325, 784, 785, 786, 787, 932, 933, 973, 974, 976, 979, 984, 985, 987], "hasher": [116, 312, 370], "transformed_grid": 116, "y_grid_pr": 116, "plot_random_forest_embed": 116, "multioutput": [117, 244, 252, 326, 339, 350, 383, 415, 432, 433, 434, 501, 504, 506, 507, 508, 510, 512, 514, 515, 518, 520, 561, 582, 583, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 622, 623, 628, 629, 671, 672, 677, 694, 695, 697, 699, 700, 702, 734, 737, 769, 777, 791, 799, 806, 815, 848, 850, 853, 855, 856, 857, 858, 873, 894, 895, 931, 953, 968, 972, 973, 974, 978, 979, 985, 986], "multioutputregressor": [117, 383, 415, 432, 433, 434, 504, 506, 508, 510, 512, 515, 518, 520, 561, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 622, 623, 628, 629, 780, 782, 791, 799, 806, 848, 850, 853, 856, 858, 978, 979, 981, 983, 984], "nativ": [117, 146, 324, 332, 350, 369, 511, 512, 780, 781, 899, 927, 931, 951, 982, 984], "ever": [117, 346, 369, 955], "centr": 117, "regr_multirf": 117, "regr_rf": 117, "y_multirf": 117, "y_rf": 117, "cornflowerblu": [117, 173, 182, 189, 222, 224, 227, 242, 244, 256, 258, 264, 316, 317], "plot_random_forest_regression_multioutput": 117, "compil": [118, 253, 312, 323, 324, 337, 338, 339, 340, 345, 346, 348, 951, 972], "dean": [118, 980, 986], "cock": [118, 981], "becam": [118, 351, 980], "kaggl": [118, 349], "1460": 118, "residenti": 118, "iowa": 118, "won": [118, 270, 311, 341, 362, 418, 446, 577, 578, 580, 637, 654, 667, 685, 686, 704, 706, 742, 930, 941, 977, 978, 983], "ship": [118, 147, 315, 324, 335, 353, 370, 927, 972, 981], "load_ames_h": 118, "yrsold": 118, "heatingqc": 118, "street": [118, 334], "yearremodadd": 118, "heat": [118, 298, 362, 402, 412, 645], "bsmtunfsf": 118, "mssubclass": 118, "condition2": 118, "garagetyp": 118, "overallqu": 118, "totalbsmtsf": 118, "miscfeatur": 118, "mosold": 118, "cat_selector": 118, "num_selector": 118, "besid": [118, 209, 337, 342, 539, 920, 980], "cat_tree_processor": 118, "encoded_missing_valu": [118, 153, 822, 941, 986, 987], "num_tree_processor": 118, "add_ind": [118, 147, 577, 578, 580, 921, 981, 984], "tree_preprocessor": [118, 179], "cat_linear_processor": 118, "num_linear_processor": 118, "linear_preprocessor": 118, "tediou": 118, "wrote": [118, 332], "lasso_pipelin": 118, "rf_pipelin": 118, "gbdt_pipelin": 118, "stackingregressor": [118, 280, 369, 517, 982, 983, 984, 985, 986], "stacking_regressor": 118, "final_estim": [118, 280, 369, 517, 518], "cross_val_predict": [118, 231, 280, 360, 366, 369, 388, 517, 518, 770, 771, 976, 977, 978, 979, 981, 983, 985], "scorer": [118, 197, 239, 339, 350, 366, 369, 511, 512, 544, 552, 584, 609, 623, 625, 661, 681, 682, 691, 746, 749, 750, 752, 760, 770, 771, 772, 775, 920, 927, 931, 939, 952, 976, 979, 980, 981, 982, 984, 985, 986, 987], "test_": [118, 366], "line_kwarg": [118, 651], "nevalu": 118, "plot_stack_predictor": 118, "exemplari": 119, "eclf": [119, 120, 369], "axarr": [119, 273], "tt": [119, 230, 415], "plot_voting_decision_region": 119, "examplari": 120, "class1_1": 120, "class2_1": 120, "lightgreen": [120, 185, 196], "p3": 120, "p4": 120, "nweight": 120, "plot_voting_proba": 120, "votingregressor": [121, 369, 519, 981, 982, 983, 986], "cohort": 121, "reg1": [121, 369], "reg2": [121, 369], "reg3": [121, 369], "ereg": [121, 369], "xt": [121, 253, 350, 577, 579, 746, 749, 750, 760, 792, 800, 808, 813, 818, 825, 836, 865], "pred1": 121, "pred2": 121, "pred3": 121, "pred4": 121, "labelbottom": [121, 235], "plot_voting_regressor": 121, "n_fold": [123, 597, 601, 603, 605, 609, 611, 613, 973, 974, 978], "scores_std": [123, 124, 961], "semilogx": [123, 124, 168, 248, 250], "std_error": 123, "transluc": 123, "answer": [123, 150, 235, 337, 348, 675, 705, 931, 955], "extern": [123, 135, 325, 326, 330, 334, 337, 339, 342, 348, 350, 359, 362, 370, 371, 372, 543, 560, 561, 667, 686, 742, 927, 930, 931, 934, 947, 952, 958, 964, 968, 980, 984], "lasso_cv": 123, "k_fold": [123, 961], "maximis": [123, 222, 261, 925, 934], "5f": [123, 284], "Not": [123, 152, 323, 337, 348, 362, 380, 381, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 419, 420, 421, 422, 423, 424, 425, 426, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 513, 516, 519, 520, 531, 532, 533, 538, 539, 541, 577, 578, 579, 580, 627, 638, 639, 640, 641, 643, 717, 741, 744, 745, 746, 749, 750, 760, 785, 788, 789, 792, 793, 794, 796, 800, 812, 820, 823, 824, 826, 839, 840, 851, 931, 937, 951, 981], "moreov": [123, 141, 275, 284, 319, 341, 362, 366, 372, 840, 901, 931, 955, 980, 986, 987], "substanti": [123, 255, 259, 260, 274, 337, 794, 937, 976, 979], "plot_cv_diabet": 123, "this_scor": [124, 301], "plot_cv_digit": 124, "plot_digits_classification_exercis": 125, "200j": [126, 302], "plot_iris_exercis": 126, "elimin": [127, 148, 361, 362, 366, 398, 452, 465, 543, 544, 547, 552, 608, 749, 750, 765, 852, 917, 931, 953, 955, 968, 972], "x_2": [128, 138, 176, 367, 369, 370, 372, 563, 575, 927, 935, 941], "x_3": [128, 941], "irrelev": [128, 319, 343, 364, 369, 371, 554, 689, 931], "agre": [128, 345, 351, 361, 362, 735, 957], "percept": [128, 152, 938], "correctli": [128, 132, 179, 197, 242, 244, 249, 263, 289, 298, 337, 346, 367, 369, 379, 388, 419, 443, 499, 500, 501, 503, 505, 507, 509, 511, 514, 517, 519, 560, 608, 616, 618, 624, 625, 626, 653, 741, 743, 776, 777, 778, 779, 783, 784, 785, 786, 787, 790, 795, 798, 805, 828, 842, 843, 847, 849, 850, 851, 852, 853, 855, 857, 885, 928, 931, 934, 935, 941, 946, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "mutual_info_regress": [128, 284, 371, 542, 545, 546, 549, 550, 559, 978, 979, 984, 986, 987, 988], "f_test": 128, "x_": [128, 136, 227, 235, 280, 339, 365, 367, 577, 585, 842, 843, 927, 933, 938, 978], "plot_f_test_vs_mi": 128, "examin": [129, 343, 345, 362, 797], "f_classif": [129, 130, 301, 371, 542, 545, 546, 548, 549, 550, 554, 556, 559], "log10": [129, 141, 151, 164, 172, 236, 298], "pvalues_": [129, 542, 545, 546, 548, 549, 550, 972], "x_indic": 129, "p_": [129, 931, 934, 947], "svm_weight": 129, "clf_select": 129, "svm_weights_select": 129, "get_support": [129, 133, 282, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 974], "plot_feature_select": 129, "mistak": [130, 288, 319, 362, 366, 684, 819, 832, 833, 835, 836, 837, 838, 927, 932], "anova_filt": 130, "anova_svm": 130, "plot_feature_selection_pipelin": 130, "rfe": [131, 132, 371, 544, 547, 552, 972, 976, 982, 983, 984, 985, 986, 988], "n_features_to_select": [131, 133, 282, 371, 543, 552, 984, 986], "ranking_": [131, 543, 544], "plot_rfe_digit": 131, "introduct": [132, 197, 233, 326, 337, 366, 367, 370, 540, 737, 738, 783, 787, 927, 929, 931, 933, 950, 958, 964, 967, 968], "class_sep": [132, 263, 465], "rfecv": [132, 371, 543, 547, 552, 976, 978, 980, 982, 983, 984, 985, 988], "stratifiedkfold": [132, 223, 230, 241, 245, 290, 366, 388, 517, 518, 544, 552, 609, 623, 746, 747, 749, 750, 751, 752, 754, 756, 760, 764, 766, 768, 769, 770, 771, 772, 773, 775, 961, 973, 974, 975, 978, 979, 980, 981, 982, 985], "min_features_to_select": [132, 544, 980], "n_features_": [132, 491, 543, 544, 985, 987], "n_score": 132, "plateau": [132, 233, 237], "plot_rfe_with_cross_valid": 132, "selectfrommodel": [133, 350, 543, 552, 553, 953, 968, 977, 978, 979, 980, 982, 984, 985, 986, 988], "sequentialfeatureselect": 133, "greedi": [133, 369, 371, 397, 399, 410, 509, 510, 552, 927, 947], "442": [133, 147, 334, 451, 964], "descript": [133, 151, 330, 331, 336, 337, 341, 342, 345, 350, 362, 370, 402, 412, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 457, 460, 494, 580, 626, 711, 714, 727, 931, 945, 946, 952, 954, 966, 982, 983, 984, 985, 986, 987], "descr": [133, 330, 331, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 457, 460, 963, 980], "pitfal": [133, 148, 149, 153, 282, 326, 349, 350, 352, 366, 415, 417, 446, 603, 622, 623, 702, 761, 771, 774, 809, 821, 828, 927, 968], "accept": [133, 135, 232, 280, 298, 310, 312, 319, 323, 324, 331, 337, 339, 346, 348, 349, 350, 351, 356, 358, 362, 367, 370, 388, 392, 395, 396, 398, 411, 414, 417, 458, 459, 505, 506, 511, 512, 519, 520, 531, 532, 543, 544, 547, 578, 585, 589, 593, 629, 676, 691, 727, 744, 745, 749, 750, 790, 791, 798, 799, 812, 865, 867, 868, 871, 927, 929, 931, 934, 939, 941, 946, 951, 952, 961, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "tic": [133, 152, 246, 933], "sfm": 133, "toc": 133, "sequentialfeatureselector": [133, 371, 543, 547, 553, 984, 985, 986, 987, 988], "sf": [133, 215, 235, 282, 332, 371, 442, 552], "backward": [133, 282, 340, 350, 371, 446, 527, 552, 564, 565, 568, 569, 570, 572, 573, 860, 863, 931, 935, 952, 972, 975, 980, 981, 982, 984, 986], "tic_fwd": 133, "sfs_forward": 133, "toc_fwd": 133, "tic_bwd": 133, "sfs_backward": 133, "toc_bwd": 133, "isn": [133, 280, 312, 319, 324, 337, 345, 465, 511, 512, 544, 741, 749, 750, 821, 934, 946, 982], "bmi": [133, 216, 334, 939], "sound": [133, 319], "finish": [133, 224, 928], "expos": [133, 283, 285, 324, 330, 334, 350, 360, 369, 371, 372, 388, 414, 503, 504, 517, 518, 519, 520, 543, 544, 552, 561, 746, 749, 750, 760, 777, 778, 779, 780, 781, 782, 862, 899, 927, 931, 933, 961, 963, 965, 969, 972, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "plot_select_from_model_diabet": 133, "basic": [134, 147, 148, 177, 303, 323, 325, 326, 337, 339, 341, 348, 350, 362, 366, 367, 369, 561, 572, 843, 855, 856, 857, 858, 920, 921, 934, 945, 950, 951, 952, 955, 964], "introductori": [134, 148, 205, 561, 572, 955], "gpr": [134, 144, 148, 446, 560, 561, 563, 564, 565, 566, 571, 572, 573, 574, 575, 953, 968, 982], "mauna": [134, 148, 446, 561, 565, 572, 573, 575], "loa": [134, 148, 446, 561, 565, 572, 573, 575], "co2": [134, 148, 446, 561, 565, 572, 573, 575, 979], "xor": [134, 148, 304, 560, 564, 572, 927, 947, 979], "posterior": [134, 135, 136, 148, 158, 235, 367, 372, 499, 500, 502, 560, 561, 563, 564, 565, 569, 572, 573, 577, 594, 595, 658, 744, 925, 951, 978, 981], "iso": [134, 148, 201, 560, 563, 564], "trick": [135, 212, 263, 312, 322, 325, 326, 340, 348, 363, 372, 532, 539, 593, 622, 923, 924, 935, 945, 946, 964, 965, 968, 973, 981], "drastic": [135, 210, 243, 362, 366, 934, 944], "theorem": [135, 361, 372, 933], "period": [135, 140, 144, 341, 350, 351, 360, 372, 565, 767, 827, 980, 985, 987], "reus": [135, 172, 236, 280, 312, 339, 350, 362, 363, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 584, 596, 598, 599, 602, 608, 610, 612, 616, 617, 618, 619, 626, 627, 628, 630, 805, 806, 939, 943, 955, 979], "training_sample_indic": 135, "training_data": 135, "training_noisy_target": 135, "newer": [135, 336, 353, 367], "expsinesquar": [135, 140, 144, 372], "emb": [135, 200, 210, 262, 330, 331, 412, 645, 928], "kernel_ridg": [135, 212, 326, 976], "tell": [135, 151, 152, 235, 298, 303, 324, 332, 362, 370, 513, 529, 920, 925, 938, 966], "param_distribut": [135, 236, 243, 247, 282, 349, 750, 758, 760], "1e0": [135, 212, 227, 243, 920], "kernel__length_scal": 135, "kernel__period": 135, "1e1": [135, 141, 179, 212, 298], "kernel_ridge_tun": 135, "predictions_kr": 135, "gaussianprocessregressor": [135, 140, 141, 142, 143, 144, 372, 560, 563, 564, 565, 566, 567, 571, 574, 575, 593, 978, 979, 980, 982, 983, 984, 985, 986, 987], "whitekernel": [135, 140, 141, 372, 561, 562, 564, 983], "periodicity_bound": [135, 140, 144, 565], "kernel_": [135, 136, 137, 138, 139, 140, 141, 142, 144, 560, 561], "mean_predictions_gpr": 135, "std_predictions_gpr": 135, "return_std": [135, 140, 141, 142, 144, 158, 159, 350, 502, 517, 518, 561, 563, 564, 565, 566, 575, 577, 594, 595, 808, 979, 980, 984], "formul": [135, 144, 244, 337, 364, 367, 370, 372, 375, 425, 499, 500, 507, 514, 600, 601, 604, 605, 606, 608, 609, 615, 620, 712, 718, 745, 849, 852, 855, 857, 931, 932, 941, 953, 968], "forc": [135, 164, 253, 277, 331, 335, 341, 357, 366, 369, 400, 407, 446, 556, 559, 596, 597, 602, 603, 607, 610, 611, 612, 613, 622, 623, 624, 631, 634, 637, 703, 727, 730, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 849, 850, 851, 852, 853, 865, 867, 868, 941, 968, 977, 980, 981, 982, 984, 985, 986], "capac": [135, 153], "length_scal": [135, 136, 139, 140, 141, 142, 144, 372, 562, 565, 569, 571, 572, 573, 574], "length_scale_bound": [135, 141, 142, 144, 372, 561, 565, 569, 572, 573], "attenu": 135, "plot_compare_gpr_krr": 135, "arbitrarili": [136, 222, 227, 350, 372, 383, 415, 432, 433, 434, 502, 504, 506, 508, 510, 512, 515, 518, 520, 561, 585, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 619, 620, 622, 623, 628, 629, 630, 671, 672, 673, 695, 734, 738, 781, 782, 791, 799, 806, 848, 850, 853, 856, 858, 931, 934, 941, 947], "lml": [136, 137, 141, 372], "exhibit": [136, 184, 352, 366, 367, 369, 372, 939], "steep": [136, 152, 244, 245, 362, 366, 372, 400, 406], "laplac": [136, 372, 560, 561, 783, 784, 785, 787, 933], "gp_fix": 136, "gp_opt": 136, "log_marginal_likelihood": [136, 137, 139, 141, 144, 372, 560, 561, 982], "theta": [136, 137, 139, 141, 143, 144, 213, 367, 372, 473, 486, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 642, 933, 947], "landscap": [136, 372], "theta0": 136, "theta1": 136, "pcolor": 136, "xscale": [136, 141, 212], "yscale": [136, 141, 179, 212, 310], "plot_gpc": 136, "gpc_rbf_isotrop": 137, "gpc_rbf_anisotrop": 137, "m_max": 137, "plot_gpc_iri": 137, "dotproduct": [138, 139, 144, 372, 561, 575], "constantkernel": [138, 144, 372, 561, 567, 571, 574], "lim": [138, 484], "experi": [138, 142, 150, 151, 152, 153, 156, 181, 278, 306, 311, 312, 324, 331, 337, 340, 361, 366, 465, 677, 734, 927, 932, 943, 949, 950, 951, 955, 964, 966], "61611719": 138, "00099547": 138, "10469096": 138, "32782448": 138, "00000000": 138, "50000000": 138, "17289014": 138, "6984743": 138, "3109306": 138, "93271427": 138, "03823144": 138, "10584743": 138, "87600388": 138, "74310541": 138, "21301203": 138, "26386883": 138, "sigma_0": [138, 139, 144, 372, 564], "gp": [138, 143, 372, 560, 561, 572, 978], "cb": [138, 210, 225], "widehat": 138, "mathbf": [138, 367, 927, 931, 935, 936, 945], "leq": [138, 367, 369, 927, 931, 934, 945, 946, 947], "clim": 138, "666": [138, 790, 921], "clabel": [138, 190], "334": 138, "plot_gpc_isoprob": 138, "stationari": [139, 372, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575], "coincid": [139, 181, 372], "puor_r": [139, 304], "plot_gpc_xor": 139, "rw2006": [140, 372, 560, 561], "ascent": [140, 372], "monthli": [140, 351, 372, 931], "atmospher": [140, 372], "ppm": 140, "observatori": [140, 372], "hawaii": [140, 372], "1958": [140, 367, 369, 372, 482], "air": [140, 713], "41187": 140, "co2_data": 140, "to_datetim": 140, "march": [140, 675, 705, 931, 972, 976, 980, 982, 987], "dropna": 140, "nfrom": 140, "upcom": [140, 335], "to_numpi": 140, "rise": [140, 372], "irregular": [140, 362, 372, 934], "long_term_trend_kernel": 140, "decai": [140, 372, 494, 805, 806, 884, 931, 945, 976], "seasonal_kernel": 140, "ration": [140, 573, 929], "diffus": [140, 372], "accommod": [140, 372, 980], "rationalquadrat": [140, 144, 372, 566], "irregularities_kernel": 140, "shall": [140, 372], "phenomena": [140, 372], "noise_kernel": 140, "noise_level": [140, 141, 372, 562, 575], "noise_level_bound": [140, 141, 575], "co2_kernel": 140, "subtract": [140, 151, 365, 367, 372, 394, 397, 409, 484, 594, 595, 600, 601, 604, 605, 606, 614, 615, 979], "normalize_i": [140, 372, 561, 986], "y_mean": [140, 141, 144, 561, 594, 595], "futur": [140, 180, 218, 283, 337, 339, 341, 348, 350, 351, 356, 366, 370, 446, 484, 580, 585, 899, 901, 931, 932, 946, 947, 955, 969, 980, 981, 982, 983, 984, 985, 986, 987, 988], "todai": [140, 348, 966], "current_month": 140, "mean_y_pr": 140, "std_y_pr": 140, "52": [140, 583, 744, 926, 972], "6ppm": 140, "plot_gpr_co2": 140, "target_gener": 141, "add_nois": 141, "minima": [141, 167, 367, 397, 642, 928, 965, 980], "y_std": [141, 144, 502, 561, 594, 595, 985], "noptimum": 141, "nlog": 141, "faith": [141, 303], "bound": [141, 148, 181, 197, 205, 234, 335, 344, 362, 367, 370, 372, 373, 395, 439, 452, 462, 473, 486, 545, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 585, 587, 600, 604, 608, 627, 655, 684, 744, 745, 788, 789, 825, 836, 839, 840, 841, 849, 850, 851, 854, 871, 899, 927, 930, 931, 934, 943, 945, 946, 948, 980, 983, 984, 986], "length_scale_grid": 141, "noise_level_grid": 141, "newshap": 141, "plot_gpr_noisi": 141, "principl": [142, 258, 278, 312, 337, 348, 350, 351, 366, 369, 372, 884, 920, 930, 934, 945, 979], "tikhonov": [142, 372, 622], "training_indic": 142, "n_restarts_optim": [142, 372, 560, 561], "mean_predict": 142, "std_predict": 142, "whenev": [142, 150, 319, 331, 345, 350, 353, 360, 432, 433, 434, 446, 578, 580, 922, 930, 952, 982], "noise_std": 142, "y_train_noisi": 142, "plot_gpr_noisy_target": 142, "gene": [143, 331, 359, 401, 463, 543, 544, 795, 828], "letter": [143, 332, 334, 341, 370, 737, 738, 931], "among": [143, 152, 156, 179, 226, 252, 318, 325, 332, 339, 350, 351, 360, 361, 365, 397, 399, 462, 469, 741, 773, 791, 796, 798, 849, 852, 855, 856, 857, 858, 920, 923, 931, 932, 938, 941, 946, 972, 978, 979, 982], "brighter": 143, "4th": [143, 334], "6th": 143, "haussler": 143, "1999": [143, 332, 360, 362, 364, 367, 369, 388, 400, 407, 419, 424, 484, 491, 505, 506, 509, 510, 672, 841, 849, 850, 852, 853, 937, 943], "646": 143, "technic": [143, 180, 200, 284, 332, 334, 337, 350, 369, 602, 614, 635, 636, 842, 927, 928, 934], "depart": [143, 362], "california": [143, 146, 147, 273, 282, 330, 334, 440, 968], "santa": [143, 987], "cruz": 143, "generickernelmixin": [143, 982], "sequencekernel": 143, "baseline_similar": 143, "baseline_similarity_bound": 143, "hyperparameter_baseline_similar": 143, "_f": [143, 927], "_g": 143, "__call__": [143, 298, 350, 370, 372, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 979], "eval_gradi": [143, 372, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575], "is_stationari": [143, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575], "clone_with_theta": [143, 372, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575], "agct": 143, "agc": 143, "aact": 143, "taa": 143, "aaa": 143, "gaaca": 143, "training_idx": 143, "cga": 143, "taac": 143, "tcg": 143, "cttt": 143, "tgct": 143, "atag": 143, "ctc": 143, "plot_gpr_on_structured_data": 143, "plot_gpr_sampl": 144, "gpr_model": 144, "y_sampl": [144, 561], "sample_i": [144, 372, 561, 986], "single_prior": 144, "pm": [144, 152, 245, 369, 931], "dev": [144, 151, 197, 240, 245, 335, 337, 341, 343, 345, 931, 955, 979, 984, 987], "alpha_bound": [144, 573], "1e15": 144, "sigma_0_bound": [144, 564], "matern": [144, 372, 983, 987], "plot_gpr_prior_posterior": 144, "iterativeimput": [145, 147, 148, 440, 515, 530, 578, 579, 580, 589, 595, 622, 770, 791, 809, 981, 982, 983, 984, 986, 987, 988], "robin": [146, 147, 577, 921, 978, 981, 986, 987], "kneighborsregressor": [146, 214, 265, 284, 369, 520, 790, 796, 798, 799, 934, 972, 974, 976, 982, 984, 985, 986, 987, 988], "mimic": [146, 179, 764], "missforest": [146, 921], "popular": [146, 203, 332, 335, 342, 345, 348, 350, 361, 368, 369, 370, 372, 402, 412, 921, 923, 927, 929, 936, 945, 952, 961, 966], "enable_iterative_imput": [146, 147, 341, 577, 921, 981], "fetch_california_h": [146, 147, 273, 282, 332, 349, 363, 981, 983], "x_full": [146, 147, 273], "y_full": [146, 147, 273], "2k": 146, "br_estim": 146, "score_full_data": 146, "neg_mean_squared_error": [146, 147, 181, 212, 249, 771, 931, 939, 978], "x_miss": [146, 147], "y_miss": [146, 147], "missing_sampl": [146, 147], "missing_featur": [146, 147], "score_simple_imput": 146, "missing_valu": [146, 147, 217, 350, 577, 578, 579, 580, 718, 921, 980, 981], "execut": [146, 168, 212, 240, 324, 337, 343, 356, 362, 367, 373, 394, 411, 746, 752, 760, 769, 770, 771, 772, 775, 793, 897, 898, 941, 944, 958, 966, 974, 977, 980], "score_iterative_imput": 146, "stricter": 146, "impute_estim": 146, "__class__": [146, 179, 181, 237, 275, 310, 311, 312, 344], "xerr": [146, 147, 311], "plot_iterative_imputer_variants_comparison": 146, "ness": [147, 197], "auxiliari": [147, 335, 955], "district": [147, 332], "neither": [147, 151, 280, 310, 319, 348, 388, 544, 578, 871, 934, 947], "20640": [147, 332, 440], "feel": [147, 273, 336, 337, 345, 362, 947], "x_diabet": [147, 961], "y_diabet": [147, 961], "x_california": 147, "y_california": 147, "add_missing_valu": 147, "missing_r": 147, "n_missing_sampl": 147, "x_miss_california": 147, "y_miss_california": 147, "x_miss_diabet": 147, "y_miss_diabet": 147, "knnimput": [147, 280, 577, 580, 921, 982, 983, 986, 987, 988], "get_scores_for_imput": 147, "impute_scor": 147, "x_label": 147, "mses_california": 147, "stds_california": 147, "mses_diabet": 147, "stds_diabet": 147, "get_full_scor": 147, "full_scor": 147, "get_impute_zero_scor": 147, "fill_valu": [147, 208, 217, 281, 577, 580, 941, 980, 988], "zero_impute_scor": 147, "unweight": [147, 192, 413, 597, 603, 628, 657, 663, 678, 679, 687, 732, 733, 736, 737, 783, 784, 785, 786, 787, 921], "get_impute_knn_scor": 147, "knn_impute_scor": 147, "get_impute_mean": 147, "mean_impute_scor": 147, "obvious": [147, 323, 966], "get_impute_it": 147, "n_nearest_featur": [147, 577], "sample_posterior": [147, 577, 921], "iterative_impute_scor": 147, "n_bar": 147, "xval": 147, "domin": [147, 179, 184, 244, 278, 332, 343, 828, 933, 941, 947], "plot_missing_valu": 147, "prune": [148, 313, 371, 450, 507, 508, 509, 510, 514, 515, 543, 594, 774, 855, 856, 857, 858, 934, 953, 968, 972, 975, 982, 983], "elast": [148, 157, 170, 190, 248, 361, 421, 422, 428, 451, 474, 596, 597, 602, 607, 608, 609, 610, 611, 612, 613, 618, 626, 628, 631, 634, 734, 920, 931, 945, 953, 968, 972, 977, 981, 982], "gram": [148, 157, 339, 367, 370, 439, 474, 498, 538, 539, 540, 541, 596, 597, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 613, 614, 615, 631, 632, 633, 634, 635, 636, 716, 724, 726, 920, 941, 966, 972, 974, 975, 976, 977, 979, 980, 981, 983, 985, 986], "huberregressor": [148, 157, 185, 474, 620, 621, 622, 628, 629, 927, 978, 979, 980, 981], "aic": [148, 157, 167, 226, 451, 601, 603, 604, 605, 606, 745, 809, 828, 920, 927, 972, 979, 985, 986], "bic": [148, 157, 167, 371, 451, 601, 603, 604, 605, 606, 745, 809, 828, 920, 927, 930, 972, 979, 985, 986], "mnist": [148, 157, 187, 253, 267, 446, 521, 608, 774, 805, 828, 870, 927, 935], "20newgroup": [148, 157, 439, 521, 608, 774, 927], "ordinari": [148, 157, 158, 181, 182, 184, 196, 283, 585, 596, 602, 604, 605, 606, 607, 622, 628, 632, 633, 637, 945, 953, 968], "spline": [148, 157, 466, 467, 468, 622, 809, 823, 827, 951, 985], "ransac": [148, 157, 185, 196, 474, 599, 607, 621, 628, 629], "convex": [148, 157, 199, 307, 311, 362, 364, 367, 375, 402, 412, 423, 425, 426, 429, 430, 431, 608, 626, 642, 927, 928, 934, 935, 945, 985], "theil": [148, 157, 185, 599, 607, 621, 628, 629], "sen": [148, 157, 185, 599, 607, 621, 628, 629], "tweedi": [148, 157, 414, 446, 502, 598, 619, 630, 656, 673, 694, 696, 698, 699, 701, 774, 809, 812, 813, 821, 828, 927, 982, 983, 985], "insur": [148, 157, 179, 414, 446, 502, 598, 619, 630, 656, 694, 699, 701, 774, 809, 812, 813, 821, 828, 927], "claim": [148, 157, 337, 414, 446, 502, 598, 619, 630, 656, 694, 699, 701, 774, 809, 812, 813, 821, 828, 927], "failur": [148, 149, 151, 337, 345, 607, 734, 774, 867, 868, 954, 955, 985, 986], "infer": [148, 149, 151, 222, 226, 227, 235, 315, 331, 339, 348, 361, 366, 367, 446, 458, 459, 465, 484, 486, 499, 500, 503, 509, 510, 582, 585, 607, 659, 672, 690, 734, 744, 745, 774, 784, 822, 842, 843, 855, 856, 857, 858, 894, 921, 927, 931, 936, 941, 944, 947, 951, 952, 960, 973, 977, 978, 983, 986], "causal": [148, 149, 607, 734, 774], "multicollinear": [148, 149, 365, 450, 514, 584, 605, 774, 927, 939], "isomap": [148, 198, 201, 280, 284, 369, 452, 494, 499, 516, 639, 640, 641, 642, 797, 809, 818, 840, 934, 967, 968, 980, 982, 985, 986, 987, 988], "And": [148, 198, 235, 345, 356, 362, 366, 370, 480, 538, 539, 541, 642, 643, 927, 931, 949, 979], "hole": [148, 198, 480, 642, 643, 986], "perplex": [148, 198, 199, 203, 253, 464, 475, 486, 642, 928, 977, 979, 986], "johnson": [148, 205, 273, 277, 329, 361, 439, 452, 824, 835, 839, 840, 841, 941, 948, 968, 980, 986], "lindenstrauss": [148, 205, 329, 361, 439, 452, 839, 840, 841, 948, 968], "halv": [148, 228, 357, 465, 514, 529, 746, 749, 750, 852, 968, 984], "custom": [148, 216, 228, 236, 255, 280, 293, 298, 310, 312, 329, 332, 335, 339, 344, 345, 346, 348, 349, 350, 361, 362, 363, 366, 372, 418, 439, 443, 444, 452, 454, 488, 490, 497, 499, 507, 508, 514, 515, 521, 523, 552, 640, 663, 746, 774, 812, 845, 852, 915, 920, 925, 931, 934, 951, 952, 955, 966, 968, 972, 976, 977, 979, 980, 982, 983, 984, 987, 988], "det": [148, 228, 364, 465, 514, 648, 676, 738, 774, 809, 828, 847, 882, 984], "tsne": [148, 199, 200, 201, 203, 204, 254, 284, 350, 376, 384, 446, 638, 639, 640, 792, 796, 809, 905, 928, 934, 975, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988], "novelti": [148, 206, 254, 260, 297, 794, 953, 967, 968, 972, 980], "lof": [148, 206, 215, 254, 513, 794, 851, 937], "boltzmann": [148, 267, 452, 608, 663, 774, 804, 805, 806, 808, 833, 967, 968, 974], "mlp": [148, 152, 216, 267, 269, 446, 521, 774, 805, 806, 935], "semi_supervis": [148, 282, 284, 286, 287, 288, 289, 290, 291, 292, 326, 932, 944, 973, 978, 979, 986, 987], "tie": [148, 293, 348, 369, 462, 776, 852, 932, 946, 973, 988], "unbalanc": [148, 238, 293, 366, 462, 852, 872, 873, 920, 945], "featurehash": [148, 309, 311, 325, 332, 370, 414, 438, 531, 538, 539, 540, 541, 821, 973, 978, 979, 980, 986, 987], "auto_examples_python": 148, "auto_examples_jupyt": 148, "great": [150, 151, 177, 319, 337, 348, 367, 713, 952, 955, 972, 979], "unless": [150, 222, 227, 337, 339, 340, 348, 350, 362, 365, 373, 388, 395, 398, 400, 402, 407, 408, 411, 414, 417, 422, 439, 446, 458, 459, 481, 485, 486, 487, 489, 492, 493, 495, 496, 497, 498, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 544, 552, 560, 561, 582, 584, 589, 596, 597, 601, 602, 603, 605, 607, 608, 609, 611, 613, 615, 616, 618, 626, 629, 638, 639, 640, 641, 642, 643, 644, 659, 664, 723, 727, 730, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 790, 791, 794, 796, 798, 799, 801, 802, 805, 806, 807, 810, 832, 833, 835, 836, 837, 838, 842, 843, 855, 856, 857, 858, 863, 867, 868, 884, 899, 927, 930, 932, 972, 974, 978, 980, 983, 984], "willing": [150, 232], "unabl": [150, 151, 179, 325, 828, 941, 981], "econom": [150, 151, 235], "educ": [150, 151, 337, 666, 932], "earn": [150, 151, 351], "polici": [150, 151, 179, 197, 350, 485, 491, 927, 987], "maker": [150, 151], "ovb": [150, 151], "parent_hourly_wag": 150, "college_degre": 150, "true_coef": [150, 174], "hourly_wag": 150, "stori": [150, 235, 332, 930], "pairplot": [150, 151], "diag_kind": [150, 151], "kde": [150, 151, 257, 258, 266, 368, 793], "features_nam": [150, 979], "regressor_with_": 150, "y_pred_with_": 150, "r2_with_abl": 150, "model_coef": 150, "intellectu": 150, "proxi": [150, 151, 367, 804, 961, 977], "inadvert": [150, 350], "iq": 150, "regressor_without_": 150, "y_pred_without_": 150, "r2_without_": 150, "incorrect": [150, 242, 290, 319, 337, 362, 557, 558, 582, 583, 683, 972, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985], "brought": [150, 503, 504, 507, 508, 509, 510, 514, 515, 516, 855, 856, 857, 858], "unobserv": [150, 151, 367], "confound": [150, 151], "conduct": [150, 235, 372, 951, 986], "prohibit": [150, 366, 369, 577, 936, 944, 979], "uneth": 150, "iv": [150, 931], "plot_causal_interpret": 150, "hint": [151, 323, 338, 342, 356, 398, 931, 964], "aris": [151, 238, 306, 324, 342, 362, 665, 927, 928, 984], "mathemat": [151, 167, 196, 238, 329, 334, 337, 350, 352, 361, 364, 367, 368, 499, 500, 507, 514, 585, 596, 606, 739, 740, 745, 806, 849, 852, 855, 857, 931, 941, 943, 953, 955, 964, 968, 986], "survei": [151, 365], "1985": [151, 362, 655, 665, 735], "534": 151, "thereaft": [151, 158], "dollar": [151, 332], "exploratori": [151, 955], "emul": [151, 345], "train_dataset": [151, 331], "normalis": [151, 561, 966], "race": [151, 332, 975], "occup": [151, 273], "sector": 151, "marr": 151, "numerical_column": [151, 153, 417], "if_binari": [151, 219, 821, 941, 983], "prepend": [151, 972], "exp10": 151, "mae_train": 151, "mae_test": 151, "learnt": [151, 319, 350, 366, 920], "obviou": [151, 319, 323, 359, 367], "regressor_": [151, 415, 543, 544, 547], "030867": 151, "054699": 151, "adimension": 151, "Their": [151, 332, 334, 351, 362, 594, 972], "visibl": [151, 152, 181, 308, 331, 337, 362, 804, 936, 977, 987], "gaug": 151, "decad": [151, 952], "x_train_preprocess": 151, "multipli": [151, 197, 235, 323, 346, 350, 367, 369, 370, 375, 414, 425, 465, 488, 490, 491, 497, 507, 511, 514, 596, 598, 602, 604, 608, 609, 610, 612, 618, 619, 620, 622, 626, 627, 628, 630, 636, 637, 639, 643, 713, 849, 850, 851, 852, 853, 855, 857, 873, 907, 908, 909, 920, 927, 931, 945, 983], "coef_i": 151, "std_i": 151, "emphas": [151, 308, 343, 367, 931], "perturb": [151, 196, 271, 367, 369, 930], "caution": [151, 341, 391, 404, 980], "repeatedkfold": [151, 366, 751, 762, 979], "cv_model": 151, "return_estim": [151, 366, 771, 980], "train_idx": [151, 350], "stripplot": 151, "whi": [151, 153], "collinear": [151, 154, 184, 197, 369, 517, 598, 619, 630, 821, 927, 972], "teas": 151, "apart": [151, 283, 298, 348, 350, 363, 365, 371, 674, 946, 955, 980], "vice": [151, 232, 310, 362, 372, 393, 557, 558, 777, 976], "versa": [151, 232, 310, 362, 372, 393, 557, 558, 777, 976], "column_to_drop": 151, "said": [151, 206, 236, 332, 337, 739, 929, 937, 957, 964], "unchang": [151, 197, 242, 369, 384, 393, 394, 396, 397, 399, 414, 418, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 516, 517, 518, 519, 520, 531, 532, 533, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 638, 639, 642, 712, 783, 784, 785, 787, 792, 797, 800, 804, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 836, 839, 840, 845, 934, 957, 980, 986], "neglig": [151, 934, 975], "littl": [151, 152, 153, 154, 206, 332, 370, 412, 594, 746, 760, 884, 921, 928, 930, 946, 947, 964, 973, 984], "21": [151, 180, 253, 275, 277, 334, 335, 339, 341, 353, 359, 369, 370, 392, 396, 424, 482, 511, 512, 513, 519, 520, 538, 539, 541, 577, 619, 637, 703, 746, 748, 760, 771, 814, 821, 823, 845, 861, 927, 932, 941, 949, 970, 972, 973, 975, 979, 980, 982], "alon": [151, 241, 298, 350, 356, 598, 619, 630, 691, 979, 981], "suppress": [151, 323, 345, 642, 934, 979], "themselv": [151, 273, 333, 345, 350, 359, 362, 369, 370, 372, 565, 739, 947, 966, 982], "bring": [151, 273, 367, 626, 628, 928, 955], "certain": [151, 184, 196, 235, 253, 277, 319, 332, 333, 341, 352, 362, 367, 371, 588, 599, 603, 608, 613, 634, 813, 847, 920, 923, 927, 928, 931, 932, 935, 941, 946, 951, 957, 961, 977, 981, 984, 987], "entic": 151, "pursu": 151, "tempt": 151, "conclud": [151, 159, 197, 235, 312, 319, 351], "deflat": [151, 365, 374, 483], "presum": [151, 252, 362, 370, 783], "must": [151, 152, 154, 160, 196, 197, 206, 216, 230, 259, 274, 319, 332, 336, 337, 338, 339, 341, 343, 345, 350, 351, 358, 360, 362, 363, 366, 367, 369, 370, 371, 372, 373, 382, 389, 392, 395, 396, 397, 399, 400, 401, 405, 407, 409, 411, 412, 414, 416, 417, 419, 424, 437, 458, 459, 462, 473, 481, 487, 488, 489, 490, 491, 493, 494, 497, 503, 504, 509, 510, 511, 512, 517, 518, 531, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 560, 561, 567, 570, 577, 578, 579, 580, 582, 583, 588, 592, 593, 598, 599, 602, 608, 609, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 632, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 649, 653, 656, 659, 684, 695, 713, 720, 723, 727, 730, 737, 739, 740, 741, 743, 744, 745, 746, 747, 749, 750, 751, 753, 755, 756, 758, 760, 761, 762, 764, 765, 767, 774, 783, 784, 785, 786, 787, 790, 791, 792, 794, 796, 797, 798, 799, 800, 803, 804, 805, 806, 808, 811, 812, 813, 815, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 847, 848, 849, 850, 851, 852, 853, 854, 860, 899, 906, 915, 917, 920, 921, 927, 928, 929, 931, 934, 935, 937, 938, 945, 946, 947, 957, 966, 972, 975, 979, 983, 985, 986], "respond": [151, 337, 362], "plot_linear_model_coefficient_interpret": 151, "complement": [152, 245, 310, 582, 583, 748, 763, 766, 774, 783, 784, 785, 786, 787, 938, 953, 968, 980], "molnar": [152, 938], "christoph": [152, 367, 372, 482, 560, 561, 564, 569, 572, 744, 927, 932, 973, 977, 980, 983, 984, 985, 986, 987], "goldstein": [152, 938], "kapeln": [152, 938], "bleich": [152, 938], "pitkin": [152, 938], "peek": [152, 337, 938], "44": [152, 257, 372, 730, 848, 851, 931, 938, 972], "settingwithcopywarn": 152, "mask_train": [152, 197], "accordingli": [152, 337, 341, 342, 979, 980, 987], "nomin": [152, 331, 350, 351, 369, 370, 531, 532, 666, 941, 952], "numerical_featur": 152, "temp": 152, "feel_temp": 152, "humid": [152, 938], "windspe": 152, "00": [152, 331, 334, 343, 362, 369, 370, 663, 665, 737, 746, 760, 772, 856, 927, 931, 941, 943, 945, 965], "xtick_start": 152, "xtick_period": 152, "average_bike_rent": 152, "numeric_onli": 152, "decor": [152, 280, 337, 338, 339, 346, 752, 874, 878, 879, 891, 892, 898, 982, 985, 988], "strike": 152, "mlp_preprocessor": 152, "hgbdt_preprocessor": 152, "sparse_threshold": [152, 414, 417, 980], "pdp": [152, 582, 938, 986], "mlp_model": 152, "hidden_layer_s": [152, 216, 268, 270, 805, 806, 935], "learning_rate_init": [152, 269, 270, 805, 806], "early_stop": [152, 187, 268, 283, 310, 350, 369, 511, 512, 616, 617, 618, 626, 627, 628, 805, 806, 945, 980, 983, 986, 987], "forget": [152, 319, 324, 331, 341, 348, 367, 928, 954], "poor": [152, 156, 241, 250, 290, 360, 366, 367, 640, 644, 687, 785, 788, 789, 925, 926, 928, 933, 952, 957, 979, 980, 981, 983, 985], "grid_resolut": [152, 282, 296, 581, 582, 583], "features_info": 152, "hgbdt_model": 152, "cheaper": [152, 362, 372, 623, 923, 927], "temperatur": [152, 370, 938], "wind": [152, 932], "earlier": [152, 331, 337, 365, 779, 782, 941, 949, 970, 973, 985, 987], "meaningless": [152, 370, 849, 852, 975], "celsiu": [152, 938], "interaction_cst": [152, 285, 369, 511, 512, 987], "hgbdt_model_without_interact": 152, "histgradientboostingregressor__interaction_cst": 152, "heatmap": [152, 154, 158, 246, 285, 298, 582, 938], "slope": [152, 177, 181, 196, 360, 362, 672, 697, 929, 931], "dry": 152, "wetter": 152, "spike": 152, "degrad": [152, 206, 273, 311, 368], "somehow": 152, "forbidden": [152, 369], "noisili": 152, "partial_depend": [152, 582, 938, 973, 981, 982, 983, 984, 987, 988], "grid_valu": [152, 583, 988], "add_ax": [152, 203, 246], "surf": 152, "rstride": 152, "cstride": 152, "bupu": 152, "nthe": [152, 233, 318], "pretti": [152, 203, 233, 323, 337, 348, 805, 806, 935, 981], "view_init": [152, 199, 201, 203], "clb": 152, "ndepend": 152, "plot_partial_depend": [152, 280, 281, 282, 977, 981, 982, 983, 984, 985, 986], "mitig": [153, 324, 325, 928, 947, 964, 965, 984], "breiman": [153, 366, 369, 466, 467, 468, 505, 506, 514, 515, 584, 855, 856, 939, 947], "random_num": 153, "random_cat": 153, "sibsp": 153, "parch": 153, "categorical_encod": 153, "numerical_pip": 153, "memor": 153, "mdi_import": 153, "sorted_importances_idx": 153, "retri": [153, 446, 980, 986], "classifier__min_samples_leaf": 153, "anymor": [153, 179, 237, 280, 281, 298, 319, 341, 363, 620, 978, 981, 984, 985, 986, 988], "train_result": 153, "test_result": 153, "train_import": 153, "test_import": 153, "plot_permutation_import": 153, "wisconsin": [154, 330, 450, 968, 977], "spearman": [154, 585, 586, 922], "spearmanr": 154, "squareform": 154, "load_breast_canc": [154, 290, 314, 342, 542, 545, 546, 548, 624, 625, 737, 931, 977, 978, 983], "012": [154, 156], "contradict": [154, 952], "perm_sorted_idx": 154, "tree_importance_sorted_idx": 154, "tree_indic": 154, "fill_diagon": [154, 202], "distance_matrix": 154, "dist_linkag": 154, "dendro": 154, "leaf_rot": 154, "dendro_idx": 154, "ivl": 154, "cluster_id": [154, 311], "fcluster": 154, "cluster_id_to_feature_id": 154, "selected_featur": 154, "x_train_sel": 154, "x_test_sel": 154, "clf_sel": 154, "plot_permutation_importance_multicollinear": 154, "polynomialcountsketch": [156, 589, 591, 923, 984, 986], "covtyp": 156, "tensor": [156, 329, 367, 488, 490, 497, 589, 590, 591, 968, 984], "sketch": [156, 325, 329, 346, 361, 589, 590, 591, 896, 968, 984], "daniel": [156, 323, 955, 972, 973, 974, 975, 977, 978, 979, 980, 982, 984, 986], "lopez": 156, "sanchez": [156, 980, 981], "lope": 156, "usal": 156, "581": 156, "54": [156, 332, 334, 362, 441, 973, 974], "cartograph": 156, "remot": [156, 288, 337, 340], "fetch_covtyp": [156, 215, 282, 332, 981, 984, 986], "5_000": 156, "mm": 156, "lsvm": 156, "lsvm_time": 156, "lsvm_score": 156, "thumb": [156, 323, 337, 338, 348, 362, 608, 609, 616, 618, 626, 627, 628, 847, 931], "condens": 156, "compact": [156, 273, 323, 334, 788, 789, 947, 974], "ps_lsvm_time": 156, "ps_lsvm_score": 156, "ksvm": 156, "ksvm_time": 156, "ksvm_score": 156, "pham": [156, 923, 979], "ninh": 156, "rasmu": [156, 979], "pagh": [156, 923], "kdd": [156, 332, 360, 388, 943], "doi": [156, 179, 197, 337, 362, 626], "1145": [156, 362, 626], "2487575": 156, "2487591": 156, "csie": [156, 331, 437, 458, 459, 608], "ntu": [156, 331, 437, 458, 459, 608], "tw": [156, 331, 437, 458, 459, 608, 946], "cjlin": [156, 331, 437, 458, 459, 608, 975], "libsvmtool": [156, 331, 437, 458, 459], "plot_scalable_poly_kernel": 156, "ard": [158, 594, 595], "ol": [158, 169, 174, 176, 177, 185, 196, 283, 606, 927], "true_weight": 158, "ardregress": [158, 595, 927, 979, 980, 981, 983, 984, 985, 986], "olr": 158, "brr": 158, "symlognorm": 158, "linthresh": 158, "10e": 158, "cbar_kw": 158, "seismic_r": 158, "stabilis": 158, "sparser": [158, 170, 367, 421, 428, 489, 493, 927, 934, 945], "retain": [158, 350, 362, 365, 366, 370, 444, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 645, 646, 764, 821, 920, 944, 972], "ard_scor": 158, "scores_": [158, 159, 542, 545, 546, 548, 549, 550, 594, 595, 609, 972, 982], "brr_score": 158, "cutoff": [158, 889, 941, 981], "full_data": 158, "input_featur": [158, 339, 350, 378, 382, 393, 394, 396, 397, 399, 414, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 516, 517, 518, 519, 520, 531, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 638, 639, 642, 792, 797, 800, 804, 807, 808, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 988], "x_plot": [158, 180, 185, 212, 238, 258, 278], "y_plot": [158, 180, 185, 238], "ard_poli": 158, "brr_poli": 158, "y_ard": 158, "y_ard_std": 158, "y_brr": 158, "y_brr_std": 158, "queri": [158, 266, 323, 341, 368, 373, 395, 400, 407, 502, 560, 561, 578, 594, 595, 675, 705, 788, 789, 790, 791, 792, 793, 794, 796, 798, 799, 800, 931, 934, 947, 951, 974, 976, 977, 980], "lambda_init": [158, 159, 595, 927, 982], "intrins": [158, 350, 367, 369, 934, 939, 945, 984], "plot_ard": [158, 594], "alpha_init": [159, 595, 927, 982], "yoshihiro": [159, 982], "uchida": [159, 982], "nimbus1after2a1sun7show": 159, "1234": [159, 224, 238, 337], "n_order": 159, "vander": 159, "ymean": 159, "ystd": 159, "pink": 159, "_init": 159, "lambda_": [159, 594, 595, 824, 927, 979], "plot_bayesian_ridge_curvefit": 159, "normalized_weight": 160, "x_offset": 160, "x_center": 160, "x_scale": [160, 818, 833, 941], "uncent": 160, "incorrectli": [160, 369, 370, 503, 509, 511, 683, 689, 931, 973, 978, 980, 981, 983], "lm": 160, "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": 160, "huber": [161, 189, 361, 369, 510, 599, 626, 628, 945, 972, 974, 975, 984], "mks542": 161, "x_outlier": [161, 193, 259, 260, 297], "y_outlier": 161, "epsilon_valu": 161, "intercept_": [161, 169, 171, 188, 213, 296, 303, 307, 339, 350, 432, 433, 434, 499, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 847, 848, 849, 850, 851, 852, 853, 925, 927, 945, 946, 972, 979, 984, 986], "coef_ridg": 161, "plot_huber_vs_ridg": 161, "logreg": [162, 782], "plot_method": [162, 256, 261, 294, 296, 299, 300, 581], "plot_iris_logist": 162, "y_pred_lasso": 163, "r2_score_lasso": 163, "enet": [163, 248], "y_pred_enet": 163, "r2_score_enet": 163, "markerfmt": 163, "2ca02c": 163, "ff7f0e": 163, "bx": 163, "plot_lasso_and_elasticnet": 163, "penalis": [164, 177, 194, 646], "lasso_path": [164, 601, 602, 603, 604, 605, 606, 613, 632, 633, 927, 972, 974, 976, 985], "enet_path": [164, 350, 597, 974, 976, 985], "alphas_lasso": 164, "coefs_lasso": 164, "alphas_positive_lasso": 164, "coefs_positive_lasso": 164, "alphas_enet": 164, "coefs_enet": 164, "alphas_positive_enet": 164, "coefs_positive_enet": 164, "neg_log_alphas_lasso": 164, "neg_log_alphas_enet": 164, "coef_l": 164, "neg_log_alphas_positive_lasso": 164, "coef_pl": 164, "neg_log_alphas_positive_enet": 164, "coef_p": 164, "plot_lasso_coordinate_descent_path": [164, 596, 597, 602, 603, 610, 611, 612, 613, 631, 634], "sai": [165, 206, 306, 337, 362, 363, 367, 369, 370, 397, 450, 454, 460, 627, 920, 937, 944, 955, 963, 964, 966], "x_sp": 165, "sparse_lasso": 165, "dense_lasso": 165, "coeff_diff": 165, "2e": [165, 249], "xs_sp": 165, "tocsc": 165, "nnz": [165, 311, 332, 649], "plot_lasso_dense_vs_sparse_data": 165, "lars_path": [166, 346, 481, 487, 489, 492, 493, 495, 496, 498, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 633, 634, 635, 636, 927, 972, 974, 977, 981, 983], "plot_lasso_lar": 166, "zht2007": 167, "lassolars": [167, 168, 371, 601, 604, 605, 927, 972, 979, 981, 985, 986], "trevor": [167, 334, 578, 606, 671, 672, 673, 921, 927, 943, 976, 977, 980, 981, 982, 984], "annal": [167, 334, 369, 424, 466, 467, 468, 509, 510, 606, 927], "2173": [167, 606, 927], "2192": [167, 606, 927], "linearlars": 167, "akaik": [167, 168, 226, 606, 745, 920, 927], "lasso_lars_": [167, 168], "zou_et_al_criterion_resc": 167, "noise_vari": [167, 482, 606, 927, 986], "aic_criterion": 167, "criterion_": [167, 168, 606], "index_alpha_path_a": 167, "alphas_": [167, 168, 597, 600, 601, 603, 604, 605, 606, 611, 613, 632, 633, 972, 975, 985], "lassolarsic__criterion": [167, 168], "bic_criterion": 167, "index_alpha_path_b": 167, "plot_lasso_lars_": 167, "n_random_featur": 168, "x_random": 168, "random_": 168, "02d": 168, "alpha_a": 168, "alpha_b": 168, "set_xscal": [168, 183, 184], "optimist": [168, 240, 310, 319, 657, 927, 931], "proper": [168, 197, 325, 343, 369, 399, 491, 503, 626, 884, 906, 926, 927, 928, 931, 946, 972, 982, 983, 984, 985, 986, 987], "badli": [168, 179, 310, 325, 828, 927, 941], "lassolarscv": [168, 371, 602, 603, 604, 606, 613, 615, 632, 633, 634, 927, 972, 979, 985], "2300": 168, "3800": 168, "mse_path_": [168, 597, 601, 603, 605, 611, 613], "cv_alphas_": [168, 601, 605, 984], "kink": 168, "heavili": [168, 323, 324, 337, 345, 599, 605, 948], "efficaci": 168, "plot_lasso_model_select": [168, 597, 603], "plot_logist": 169, "axes_row": 170, "clf_l1_lr": 170, "clf_l2_lr": 170, "clf_en_lr": 170, "coef_l1_lr": 170, "coef_l2_lr": 170, "coef_en_lr": 170, "sparsity_l1_lr": 170, "sparsity_l2_lr": 170, "sparsity_en_lr": 170, "nl1_ratio": 170, "plot_logistic_l1_l2_spars": 170, "dupr": [171, 187, 253, 255, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987], "m4x": [171, 195], "sag": [171, 186, 608, 609, 622, 624, 637, 927, 945, 951, 977, 978, 979, 981, 982], "bry": [171, 188], "classes_": [171, 188, 207, 244, 287, 288, 337, 339, 350, 388, 389, 499, 500, 501, 503, 505, 507, 509, 511, 514, 517, 519, 543, 544, 560, 608, 609, 616, 618, 624, 625, 626, 647, 650, 652, 737, 746, 749, 750, 760, 776, 777, 778, 779, 780, 783, 784, 785, 786, 787, 790, 795, 798, 805, 808, 815, 816, 819, 842, 843, 844, 847, 849, 852, 855, 857, 860, 931, 942, 945, 973, 976, 977, 979, 982, 984], "plot_hyperplan": [171, 188, 213], "plot_logistic_multinomi": 171, "looser": 172, "liblinear": [172, 296, 343, 608, 609, 737, 847, 848, 849, 852, 853, 931, 946, 972, 976, 977, 978, 979, 980, 981, 982, 983], "l1_min_c": [172, 927, 946, 972], "intercept_sc": [172, 608, 609, 847, 848, 854, 927], "coefs_": [172, 270, 805, 806, 935, 977], "plot_logistic_path": 172, "jointli": [173, 242, 361, 362, 367, 927], "instant": 173, "wave": [173, 337, 930], "n_task": [173, 927], "n_relevant_featur": 173, "multitasklasso": [173, 602, 610, 613, 927, 972, 980, 983, 985], "coef_lasso_": 173, "coef_multi_task_lasso_": 173, "spy": 173, "feature_to_plot": 173, "seagreen": 173, "plot_multi_task_lasso_support": 173, "reg_nnl": 174, "y_pred_nnl": 174, "r2_score_nnl": 174, "nnl": [174, 607], "reg_ol": 174, "y_pred_ol": 174, "r2_score_ol": 174, "low_x": 174, "high_x": 174, "low_i": 174, "high_i": 174, "get_ylim": [174, 273, 274], "plot_nnl": 174, "diabetes_x": [175, 964], "diabetes_i": [175, 964], "diabetes_x_train": [175, 964], "diabetes_x_test": [175, 964], "diabetes_y_train": [175, 964], "diabetes_y_test": [175, 964], "regr": [175, 363, 504, 506, 515, 596, 597, 617, 781, 806, 848, 850, 853, 946, 964], "diabetes_y_pr": 175, "plot_ol": 175, "43": [176, 235, 253, 334, 342, 746, 760], "plot_ols_3d": 176, "greatli": [177, 211, 285, 337, 345, 402, 934, 947, 978, 986], "plot_ols_ridge_vari": 177, "orthogonalmatchingpursuit": [178, 615, 635, 636, 927, 972, 974, 977, 980, 985], "orthogonalmatchingpursuitcv": [178, 614, 974, 985], "make_sparse_coded_sign": [178, 481, 487, 986, 988], "512": 178, "n_nonzero_coef": [178, 476, 481, 487, 492, 498, 600, 614, 635, 636], "xw": [178, 283, 596, 597, 599, 602, 603, 604, 605, 606, 610, 611, 612, 613, 622, 631, 632, 633, 634, 927], "_0": [178, 635, 927, 931, 946], "distort": [178, 210, 334, 360, 361, 825, 836, 841, 928, 941, 943], "y_noisi": 178, "idx_r": 178, "omp_cv": 178, "06": [178, 235, 271, 275, 305, 343, 432, 433, 434, 594, 595, 639, 643, 744, 745, 746, 760, 856, 927, 941, 943], "38": [178, 258, 369, 582, 931, 941, 972, 973, 974], "plot_omp": 178, "gbrt": [179, 369], "contract": [179, 197, 324, 350, 952], "compani": [179, 197, 362, 955], "policyhold": [179, 197, 927], "vehicl": [179, 197], "driver": [179, 197, 987], "exposur": [179, 197, 927], "car": 179, "accid": [179, 197], "noll": [179, 197], "salzmann": [179, 197], "wuthrich": [179, 197], "novemb": [179, 197, 334, 977, 978, 980], "2139": [179, 197], "ssrn": [179, 197], "3164764": [179, 197], "ch": [179, 181, 197, 290, 292], "rth": [179, 197], "41214": [179, 197], "claimnb": [179, 197], "log_scale_transform": [179, 197], "linear_model_preprocessor": 179, "passthrough_numer": [179, 197], "bonusmalu": [179, 197], "binned_numer": [179, 197], "2e5": [179, 197, 813], "vehag": [179, 197], "drivag": [179, 197], "log_scaled_numer": [179, 197], "onehot_categor": [179, 197], "vehbrand": [179, 197], "vehpow": [179, 197], "vehga": [179, 197], "93": [179, 334, 737, 746, 772, 855, 926, 931, 962, 966], "imbalanc": [179, 238, 242, 244, 311, 348, 360, 366, 653, 658, 736, 747, 751, 785, 931, 933, 939, 951], "simplist": [179, 370], "pertin": 179, "dummyregressor": [179, 197, 501, 931, 973, 975, 976, 979, 980, 982, 985, 986], "df_train": [179, 197], "df_test": [179, 197], "regressor__sample_weight": 179, "mean_absolute_error": [179, 181, 197, 931, 973, 975], "mean_poisson_devi": [179, 931, 982], "score_estim": [179, 197], "n_mask": 179, "comonli": 179, "ridge_glm": 179, "strictli": [179, 197, 273, 311, 342, 350, 365, 367, 370, 458, 459, 485, 491, 494, 511, 512, 538, 541, 592, 620, 621, 645, 650, 688, 746, 749, 750, 756, 760, 771, 797, 824, 835, 839, 840, 842, 843, 847, 848, 852, 853, 882, 920, 922, 927, 931, 941, 945, 973, 983, 988], "domain": [179, 350, 352, 366, 585, 671, 672, 673, 747, 748, 753, 754, 755, 927, 952], "glm": [179, 197, 281, 598, 619, 630, 927, 972, 983], "vanilla": [179, 362, 397, 399, 410, 579], "poissonregressor": [179, 197, 281, 284, 598, 630, 927, 983, 986, 987], "poisson_glm": 179, "newton": [179, 197, 271, 560, 598, 608, 609, 619, 630, 805, 806, 927, 976, 977, 979, 983, 984, 985, 986, 987], "deep": [179, 339, 350, 376, 385, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 718, 744, 745, 746, 749, 750, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 935, 936, 951, 952, 955, 977, 983, 984, 986], "implicit": [179, 350, 369, 370, 522, 632, 633, 925, 930, 951, 981], "concis": [179, 342, 983, 985], "poisson_gbrt": 179, "prone": [179, 223, 277, 348, 360], "set_yscal": 179, "5e5": 179, "realiz": [179, 955], "priori": [179, 196, 244, 252, 273, 350, 362, 369, 538, 544, 930], "wrongli": [179, 298], "gen_even_slic": [179, 346, 887], "_mean_frequency_by_risk_group": 179, "y_true_bin": 179, "y_pred_bin": 179, "idx_sort": 179, "sl": 179, "y_true_seg": 179, "y_pred_seg": 179, "ti": [179, 223, 226, 233, 307, 323, 549, 550, 585, 670, 675, 705, 744, 745, 849, 852, 855, 930, 931, 946, 973, 975, 976, 980, 982, 986, 987], "portfolio": [179, 197, 925], "riskiest": [179, 197], "safest": [179, 197, 319, 331], "irrespect": [179, 210, 244, 253, 556], "lorenz": [179, 197, 977], "summar": [179, 227, 242, 244, 312, 337, 339, 352, 369, 471, 608, 644, 656, 657, 927, 928, 931, 937], "gini": [179, 197, 217, 247, 282, 503, 504, 507, 508, 509, 510, 514, 515, 516, 855, 856, 857, 858, 920, 939, 947, 980, 981], "lorenz_curv": [179, 197], "ranked_frequ": 179, "ranked_exposur": [179, 197], "cumulated_claim": 179, "cumulated_exposur": 179, "cum_exposur": 179, "cum_claim": [179, 197], "worst": [179, 334, 362, 397, 658, 678, 679, 732, 733, 736, 739, 740, 773, 931, 955, 972, 985], "occurr": [179, 311, 312, 332, 337, 362, 370, 519, 520, 531, 539, 540, 567, 577, 578, 579, 580, 732, 783, 811, 933, 973, 978], "circumstanti": 179, "extractor": [179, 271, 325, 332, 350, 370, 453, 920, 972], "discrim": 179, "profil": [179, 323, 337, 340, 471, 474, 927, 955], "ideal": [179, 181, 197, 232, 235, 242, 244, 245, 319, 336, 337, 341, 342, 345, 348, 350, 675, 705, 920, 930, 945, 946, 952], "meaningfulli": [179, 931], "plot_poisson_regression_non_normal_loss": 179, "monomi": 180, "vandermond": [180, 941], "x_0": [180, 607], "pseudo": [180, 339, 366, 374, 391, 402, 404, 412, 419, 420, 421, 423, 424, 425, 426, 483, 511, 512, 513, 577, 584, 589, 591, 592, 596, 597, 602, 603, 610, 611, 612, 613, 627, 641, 645, 749, 750, 758, 760, 797, 804, 839, 840, 844, 847, 848, 849, 852, 883, 884, 927, 943, 977, 986], "consecut": [180, 360, 366, 370, 394, 397, 399, 400, 402, 406, 409, 412, 487, 488, 489, 496, 552, 595, 616, 617, 618, 626, 627, 628, 744, 745, 751, 783, 784, 785, 786, 787, 805, 806, 920, 941, 966, 980], "basis_1": 180, "basis_2": 180, "infinit": [180, 221, 238, 323, 372, 572, 573, 727, 744, 865, 867, 868, 923, 930, 941, 946, 980, 982, 985, 986, 987], "malt": [180, 985, 986, 987], "londschien": [180, 985], "prepar": [180, 323, 339, 340, 343, 345, 947, 955, 980], "set_prop_cycl": 180, "teal": [180, 189, 242], "yellowgreen": [180, 182, 189, 316], "tomato": 180, "unwant": [180, 310], "oscillatori": [180, 941], "danger": [180, 366], "pft": 180, "splt": 180, "bsplines_": [180, 827], "six": [180, 200, 277, 334, 981], "refrain": [180, 337], "dec": [180, 627, 827, 851, 946], "31st": [180, 827], "advis": [180, 319, 335, 337, 362, 370, 388, 596, 602, 604, 610, 612, 622, 637, 923, 927, 933, 935, 946, 986], "x_plot_ext": 180, "y_plot_ext": 180, "plot_polynomial_interpol": [180, 823, 827], "pareto": 181, "dale": [181, 985], "mail": [181, 278, 332, 337, 341, 345, 348, 351, 949, 980, 981], "ru": 181, "glemaitre58": 181, "y_true_mean": 181, "y_normal": 181, "y_pareto": 181, "huge": [181, 184, 323, 343, 577, 975], "heavi": [181, 359, 952], "sp_version": [181, 620], "parse_vers": [181, 620], "incompat": [181, 341, 446, 921, 980, 981], "older": [181, 336, 341, 975, 982, 984], "recent": [181, 326, 335, 338, 342, 345, 350, 353, 362, 418, 488, 515, 931, 945, 955, 975, 984], "interior": [181, 620, 927, 987], "out_bounds_predict": 181, "bool_": 181, "logical_or": [181, 187, 244, 343], "hit": [181, 343], "wider": [181, 370, 860, 927], "asymmetri": [181, 310], "linger": 181, "linear_regress": [181, 249], "quantile_regress": 181, "y_pred_lr": 181, "y_pred_qr": 181, "cv_results_lr": 181, "cv_results_qr": 181, "test_neg_mean_squared_error": [181, 771], "plot_quantile_regress": 181, "robustli": [182, 361], "faulti": [182, 972], "ransacregressor": [182, 185, 196, 599, 628, 629, 927, 975, 977, 978, 979, 980, 983, 985, 986], "inlier_mask": 182, "inlier_mask_": [182, 621], "outlier_mask": 182, "line_x": [182, 196], "line_i": 182, "line_y_ransac": 182, "estimator_": [182, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 543, 544, 547, 621, 915, 987], "plot_ransac": 182, "regularis": [183, 375, 423, 425], "eventu": [183, 224, 361, 362, 371, 543, 955], "simpler": [183, 197, 298, 323, 336, 362, 367, 927, 932, 964, 977], "stronger": [183, 236, 593, 602, 608, 609, 622, 623, 624, 625, 626, 628, 637], "kornel": [183, 978], "kielczewski": [183, 978], "plusnet": 183, "plot_ridge_coeff": 183, "practis": 184, "maintain": [184, 197, 199, 235, 324, 326, 336, 340, 343, 344, 345, 348, 350, 351, 353, 362, 369, 391, 393, 817, 818, 824, 825, 828, 832, 835, 836, 838, 927, 928, 941, 951, 952, 957, 968, 987], "10x10": 184, "hilbert": [184, 814, 923, 941], "n_alpha": [184, 422, 596, 597, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 613, 623, 625, 631, 632, 633, 634, 975], "plot_ridge_path": 184, "theilsen": 185, "lessen": [185, 608, 609, 847, 848], "theilsenregressor": [185, 196, 599, 621, 628, 927, 976, 984, 986], "x_error": 185, "y_errors_larg": 185, "x_errors_larg": 185, "deviant": [185, 937], "legend_titl": 185, "nabsolut": 185, "nto": [185, 244], "plot_robust_fit": 185, "rob": [186, 972, 973, 974, 976, 977, 978, 979, 980, 984, 987], "zinkov": [186, 972, 973, 974, 976, 977], "heldout": 186, "asgd": [186, 945], "squared_hing": [186, 306, 616, 626, 847, 854, 927], "0e4": 186, "yy_": 186, "plot_sgd_comparison": 186, "monitor": [187, 340, 350, 503, 504, 509, 510, 511, 512, 935, 975, 980, 982, 984], "_test": [187, 275, 339, 985], "ignore_warn": [187, 275, 978], "convergencewarn": [187, 194, 269, 270, 275, 346, 350, 744, 745, 980, 981, 984], "load_mnist": [187, 253], "class_0": [187, 334, 460], "class_1": [187, 334, 460], "554": [187, 195, 270], "mnist_784": [187, 195, 253, 270], "fit_and_scor": 187, "train_scor": [187, 250, 306, 314, 752, 771, 772, 775, 926], "estimator_dict": 187, "0001": [187, 339, 374, 394, 397, 409, 421, 422, 428, 483, 488, 490, 497, 499, 500, 509, 510, 596, 597, 598, 599, 602, 603, 608, 609, 610, 611, 612, 613, 618, 619, 622, 624, 626, 628, 630, 637, 639, 643, 805, 806, 847, 848, 920], "flush": 187, "results_df": [187, 235], "group_df": 187, "plot_sgd_early_stop": 187, "ova": [188, 616, 618, 626, 945], "ugli": [188, 256, 261, 264, 294], "plot_sgd_iri": 188, "modified_huber_loss": 189, "darkorchid": 189, "plot_sgd_loss_funct": 189, "l1_color": 190, "l2_color": 190, "elastic_net_color": 190, "1001": 190, "rho": [190, 367, 627, 927, 945, 973], "elastic_net": 190, "dpi": [190, 861, 985], "elastic_net_contour": 190, "l2_contour": 190, "l1_contour": 190, "inlin": [190, 337, 338, 947], "plot_sgd_penalti": 190, "ndenumer": 191, "plot_sgd_separating_hyperplan": 191, "no_weight": 192, "samples_weight": 192, "no_weights_handl": 192, "weights_handl": 192, "plot_sgd_weighted_sampl": 192, "sgdoneclasssvm": [193, 206, 283, 851, 937, 945, 985, 987, 988], "rc": [193, 341], "novel": [193, 259, 297, 319, 360, 920], "abnorm": [193, 206, 259, 297, 332, 442, 513, 794, 937, 980], "y_pred_train": [193, 297], "y_pred_test": [193, 259, 297], "y_pred_outli": [193, 259, 297], "n_error_train": [193, 297], "n_error_test": [193, 259, 297], "n_error_outli": [193, 259, 297], "clf_sgd": 193, "pipe_sgd": 193, "y_pred_train_sgd": 193, "y_pred_test_sgd": 193, "y_pred_outliers_sgd": 193, "n_error_train_sgd": 193, "n_error_test_sgd": 193, "n_error_outliers_sgd": 193, "z_sgd": 193, "pubu": [193, 210, 259, 297], "darkr": [193, 259, 297], "palevioletr": [193, 259, 297], "b1": [193, 259, 297], "b2": [193, 259, 297], "blueviolet": [193, 259, 297], "plot_sgdocsvm_vs_ocsvm": 193, "newgroups20": 194, "trim": [194, 788, 789], "arthur": [194, 195, 362, 397, 410, 977, 978, 979, 980, 981, 984, 986], "mensch": [194, 195, 977, 978, 979, 980], "timeit": [194, 224, 343], "default_tim": [194, 224], "20newsgroup": [194, 330, 972], "model_param": 194, "epoch": [194, 350, 486, 616, 617, 618, 626, 627, 628, 805, 806, 945, 979, 980, 985], "this_max_it": 194, "train_tim": [194, 212, 310, 311], "ndataset": [194, 275], "run_tim": [194, 195], "plot_sparse_logistic_regression_20newsgroup": 194, "l1_plot": 195, "plot_sparse_logistic_regression_mnist": 195, "subpopul": [196, 629, 927], "residual_threshold": [196, 621, 927, 985], "remedi": 196, "max_subpopul": [196, 629, 986], "lose": [196, 312, 332, 350, 365, 370, 372, 496, 883, 884, 921, 927, 966], "florian": [196, 955, 972, 976, 978, 982], "wilhelm": [196, 976, 978, 982], "indigo": 196, "plot_theilsen": 196, "motor": 197, "parti": [197, 324, 336, 348, 748, 755, 899, 949, 972, 983], "liabil": 197, "functool": 197, "mean_tweedie_devi": [197, 931, 982], "load_mtpl2": 197, "678013": 197, "fremtpl2freq": 197, "df_freq": 197, "idpol": 197, "fremtpl2sev": 197, "41215": 197, "df_sev": 197, "claimamount": 197, "fillna": 197, "unquot": 197, "field": [197, 334, 359, 362, 363, 370, 448, 451, 567, 927, 929, 938, 946, 951, 954, 966, 973], "column_nam": 197, "plot_obs_pr": 197, "y_label": 197, "fill_legend": 197, "df_": 197, "tweedie_pow": 197, "d\u00b2": 197, "subset_label": 197, "score_label": [197, 241], "est_freq": 197, "est_sev": 197, "unstack": [197, 238], "fremtpl2": 197, "unreason": [197, 366], "exception": 197, "200000": 197, "column_tran": [197, 363], "purepremium": 197, "indirectli": 197, "avgclaimamount": 197, "fmax": 197, "option_context": 197, "max_column": 197, "seemingli": [197, 319, 348], "upon": [197, 204, 266, 332, 337, 348, 350, 356, 511, 512, 577, 580, 621, 738, 744, 745, 788, 789, 920, 927, 947, 957, 966, 986], "glm_freq": 197, "surprisingli": [197, 332, 370], "bonu": [197, 337, 961, 966], "malu": 197, "younger": 197, "infti": [197, 372, 569, 927, 941, 979], "gammaregressor": [197, 281, 284, 630, 927, 983, 986, 987], "mask_test": 197, "glm_sev": 197, "dummy_sev": 197, "slighli": 197, "avgclaim": 197, "nbclaim": 197, "apriori": 197, "regardless": [197, 236, 237, 238, 324, 337, 362, 485, 608, 654, 665, 931, 943, 980, 987], "glm_pure_premium": 197, "999": [197, 235, 341, 369, 667, 805, 806], "scores_product_model": 197, "scores_glm_pure_premium": 197, "expand_frame_repr": 197, "riski": 197, "operation": [197, 955], "develop": [197, 233, 235, 280, 310, 323, 326, 332, 336, 337, 343, 348, 350, 352, 356, 359, 361, 364, 365, 369, 370, 384, 443, 746, 927, 934, 947, 949, 951, 952, 954, 955, 964, 972, 980, 981, 982, 985, 987, 988], "ranked_pure_premium": 197, "cumulated_claim_amount": 197, "cumulated_sampl": 197, "y_pred_product": 197, "y_pred_tot": 197, "ordered_sampl": 197, "plot_tweedie_regression_insurance_claim": 197, "md": [199, 200, 201, 202, 341, 638, 642, 644, 967, 968, 972, 984, 987], "seek": [199, 201, 203, 336, 337, 348, 351, 458, 459, 928, 958, 960], "ticker": [199, 201, 204, 253], "s_point": 199, "s_color": 199, "make_s_curv": [199, 204], "plot_3d": 199, "points_color": 199, "subplot_kw": [199, 257], "set_major_loc": [199, 258], "multipleloc": [199, 258], "add_2d_scatt": 199, "set_major_formatt": [199, 201, 204, 253, 258], "nullformatt": [199, 201, 204, 253], "lle": [199, 200, 201, 203, 480, 639, 643, 928, 984], "thought": [199, 258, 350, 362, 928, 932], "analys": [199, 318, 367, 749, 750, 928, 951, 955], "lle_standard": 199, "s_standard": 199, "lle_ltsa": 199, "ltsa": [199, 200, 201, 639, 643, 928], "s_ltsa": 199, "lle_hessian": 199, "hessian": [199, 200, 201, 369, 598, 608, 609, 619, 630, 639, 643, 927, 935, 967, 968, 987], "s_hessian": 199, "lle_mod": 199, "s_mod": 199, "lle_method": 199, "tangent": [199, 639, 643, 929, 967, 968], "eigenmap": [199, 639, 641, 643, 645, 967, 968, 973], "isometr": [199, 638, 640, 641, 642, 928], "geodes": [199, 638, 928], "s_isomap": 199, "md_scale": 199, "normalized_stress": [199, 200, 201, 202, 640, 644, 928, 987], "s_scale": 199, "laplacian": [199, 329, 359, 391, 402, 412, 570, 589, 593, 641, 645, 714, 715, 723, 843, 927, 928, 944, 968, 973, 978], "s_spectral": 199, "t_sne": [199, 980], "s_t_sne": 199, "plot_compare_method": 199, "offsetbox": 200, "plot_embed": 200, "425": [200, 565], "shown_imag": 200, "someth": [200, 337, 339, 340, 341, 345, 370, 931, 981, 982, 983, 984, 985, 986, 987, 988], "4e": 200, "imagebox": 200, "annotationbbox": 200, "offsetimag": 200, "neighborhoodcomponentsanalysi": [200, 261, 262, 263, 934, 981, 986], "random_project": [200, 210, 326, 943, 948, 973, 978, 988], "sparserandomproject": [200, 210, 839, 943, 973, 978, 986, 988], "embeed": 200, "n_iter_without_progress": [200, 642, 977, 978], "nca": [200, 261, 262, 263, 797, 934], "plot_lle_digit": 200, "pole": 201, "thin": [201, 570], "earth": [201, 713, 951], "55": [201, 342, 362, 366, 441, 547, 746, 752, 760, 772, 931, 972], "251": [201, 334], "sphere_data": 201, "trans_data": 201, "2g": [201, 204, 647, 983], "252": [201, 334, 484, 824, 835], "257": 201, "258": 201, "se": [201, 334, 353], "plot_manifold_spher": 201, "euclidean_dist": [202, 210, 339, 400, 407, 638, 711, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 972, 977, 980, 981], "finfo": [202, 428, 556, 600, 601, 604, 605, 606, 632, 633, 690, 987], "x_true": 202, "dissimilar": [202, 350, 359, 402, 640, 644, 928, 978, 988], "embedding_": [202, 350, 638, 639, 640, 641, 642], "nmd": 202, "npo": 202, "plot_md": 202, "sr_point": 203, "sr_color": 203, "ambient": 203, "66": [203, 334, 362, 482, 582, 662, 732, 733, 742, 827, 931, 943], "text2d": 203, "unrol": 203, "unnecessarili": [203, 979, 982], "clump": 203, "sr_lle": 203, "sr_err": 203, "locally_linear_embed": [203, 928], "sr_tsne": 203, "stretch": [203, 225], "byproduct": 203, "ultim": [203, 338], "sh_point": 203, "sh_color": 203, "topologi": [203, 204], "sh_lle": 203, "sh_err": 203, "sh_tsne": 203, "plot_swissrol": 203, "tendenc": [204, 927, 928, 930, 933, 936], "clearer": [204, 946], "distil": 204, "pub": [204, 786, 842], "misread": 204, "narin": [204, 979, 980], "kokhlikyan": [204, 979, 980], "plot_t_sne_perplex": 204, "cope": [206, 325, 332, 927], "multimod": 206, "inli": [206, 927, 937], "unimod": [206, 424], "localoutlierfactor": [206, 215, 259, 260, 284, 350, 513, 851, 937, 979, 980, 982, 986, 987, 988], "modal": [206, 424, 886], "hypercub": [206, 465], "decent": [206, 234, 332, 933], "handpick": 206, "absenc": [206, 238, 350, 662, 811, 930, 931], "negative_linestyl": 206, "outliers_fract": 206, "n_inlier": 206, "anomaly_algorithm": 206, "blobs_param": 206, "plot_anomaly_comparison": 206, "blood": [207, 334, 964], "transfus": 207, "1464": 207, "donat": 207, "confust": 207, "cm_displai": 207, "y_score": [207, 242, 244, 350, 432, 433, 434, 657, 670, 675, 676, 688, 689, 705, 731, 737, 738, 741, 746, 749, 750, 760, 808, 931, 978, 986], "pos_label": [207, 215, 350, 389, 390, 648, 650, 652, 656, 657, 659, 676, 678, 679, 687, 731, 732, 733, 736, 738, 815, 831, 931, 980, 984, 986], "roc_displai": 207, "previs": 207, "precision_recall_curv": [207, 242, 650, 656, 657, 676, 931, 973, 974, 978, 985, 986], "pr_displai": 207, "easlii": 207, "plot_display_object_visu": 207, "summaris": [208, 281], "composit": [208, 281, 326, 329, 366, 608, 737, 921, 927, 940, 968, 973], "num_proc": [208, 281], "cat_proc": [208, 281], "feat1": [208, 281, 370], "feat3": [208, 281, 370], "feat0": [208, 281], "feat2": [208, 281, 370], "plot_estimator_represent": 208, "isotonicregress": [209, 922, 973, 974, 975, 976, 978, 980, 981, 982, 984, 986, 987, 988], "ir": [209, 367, 540, 675, 705, 783, 787, 929, 931], "out_of_bound": [209, 585], "y_": [209, 222, 226, 227, 265, 339, 365, 367, 587, 598, 619, 630, 678, 679, 687, 732, 733, 736, 927, 931, 978], "x_thresholds_": [209, 585, 984], "y_thresholds_": [209, 585, 984], "plot_isotonic_regress": 209, "lemma": [210, 329, 361, 484, 491, 499, 839, 840, 841, 925, 968, 975], "johnson_lindenstrauss_min_dim": [210, 943, 973], "achliopta": [210, 840, 841, 943], "_compon": [210, 486], "geq": [210, 367, 369, 927, 931, 941, 945, 946], "_sampl": [210, 367, 488, 490, 497], "admiss": [210, 324], "eps_rang": 210, "min_n_compon": 210, "nn_sampl": [210, 247], "semilogi": 210, "nn_compon": [210, 211], "100k": 210, "n_components_rang": 210, "rp": 210, "projected_data": 210, "n_byte": 210, "projected_dist": 210, "min_dist": 210, "max_dist": 210, "hexbin": 210, "gridsiz": 210, "jl": [210, 840], "56": [210, 343, 663, 684, 931, 941, 972], "436": 210, "plot_johnson_lindenstrauss_bound": 210, "rbfsampler": [211, 589, 590, 592, 923, 957, 976, 986, 987], "mont": [211, 372, 561, 591, 592, 923, 936], "fourier": [211, 361, 588, 589, 590, 591, 592, 707, 708, 923], "acceler": [211, 285, 323, 348, 418, 642, 845, 928, 951, 955, 981, 985, 987], "data_train": [211, 236, 310], "targets_train": 211, "data_test": [211, 236, 310], "targets_test": 211, "kernel_svm": 211, "linear_svm": 211, "feature_map_fouri": 211, "feature_map_nystroem": [211, 589], "fourier_approx_svm": 211, "feature_map": [211, 273], "nystroem_approx_svm": 211, "kernel_svm_tim": 211, "kernel_svm_scor": 211, "linear_svm_tim": 211, "linear_svm_scor": 211, "fourier_scor": 211, "nystroem_scor": 211, "fourier_tim": 211, "nystroem_tim": 211, "feature_map__n_compon": 211, "timescal": 211, "ly": [211, 796, 798, 799, 800, 976], "flat_grid": 211, "lv_ep": 211, "tab10": [211, 226], "plot_kernel_approxim": 211, "krr": [212, 372, 593, 924], "insensit": [212, 593, 626, 628, 737, 848, 924, 945, 946, 972], "fifth": [212, 924, 957], "100000": [212, 221, 337, 563, 564, 565, 569, 570, 572, 573, 575, 836, 924, 964, 966], "kr": [212, 235, 986], "svr_fit": 212, "kr_fit": 212, "sv_ratio": 212, "support_": [212, 305, 419, 424, 543, 544, 552, 849, 850, 851, 852, 853, 946], "y_svr": 212, "svr_predict": 212, "y_kr": 212, "kr_predict": 212, "sv_ind": 212, "arithmet": [212, 343, 345, 362, 501, 598, 619, 630, 654, 667, 685, 686, 706, 742, 931, 980], "test_tim": [212, 310], "train_test_s": 212, "learningcurvedisplai": [212, 237, 285, 926, 987], "negate_scor": [212, 752], "std_display_styl": [212, 237, 752], "get_legend_handles_label": [212, 237, 242], "plot_kernel_ridge_regress": 212, "theta_c": [213, 473], "reject": [213, 350, 351, 473, 621, 676, 867, 868, 927, 931, 980], "never": [213, 319, 337, 346, 348, 356, 362, 365, 366, 400, 407, 473, 496, 505, 506, 507, 514, 923, 982, 985], "likewis": [213, 362, 473], "surround": [213, 337, 794, 937], "cca": [213, 365, 433, 435, 976, 980, 981, 982, 984, 986], "onevsrestclassifi": [213, 242, 244, 252, 360, 776, 778, 847, 957, 973, 974, 976, 978, 979, 985, 986], "metaclassifi": 213, "min_x": 213, "max_x": 213, "plot_subfigur": 213, "min_i": 213, "zero_class": 213, "one_class": 213, "160": [213, 920, 964], "nfor": 213, "plot_multilabel": 213, "extratreesregressor": [214, 369, 507, 515, 516, 857, 858, 975, 978, 980, 981, 982, 985, 986, 987, 988], "n_face": 214, "face_id": 214, "n_pixel": [214, 233], "nn": [214, 370, 645, 964], "y_test_predict": 214, "true_fac": 214, "completed_fac": 214, "plot_multioutput_face_complet": 214, "benchmark": [215, 253, 282, 311, 312, 323, 330, 332, 337, 348, 353, 355, 360, 418, 465, 845], "iforest": 215, "pharuj": 215, "rajborirug": 215, "ra": 215, "kmitl": 215, "ac": [215, 480, 614, 635, 636, 927, 944, 966], "th": [215, 283, 318, 349, 366, 369, 377, 392, 396, 401, 403, 409, 413, 422, 507, 508, 509, 510, 511, 512, 514, 515, 516, 543, 544, 582, 598, 599, 619, 621, 630, 646, 668, 729, 767, 872, 921, 927, 931, 935, 938, 945, 946, 987], "preprocess_dataset": 215, "fetch_kddcup99": [215, 332, 979, 980, 981, 984, 985], "labelbinar": [215, 244, 350, 690, 777, 812, 821, 831, 932, 957, 975, 976, 977, 981, 986], "dataset_nam": [215, 253], "smtp": [215, 332, 442], "sa": [215, 332, 442], "percent10": [215, 442], "lb": [215, 815, 942], "forestcov": 215, "glass": [215, 332], "wdbc": [215, 334], "cardiotocographi": 215, "tablewar": 215, "x_mal": 215, "y_mal": 215, "x_ben": 215, "y_ben": 215, "39": [215, 332, 334, 335, 341, 362, 370, 445, 856], "x_mal2": 215, "y_mal2": 215, "compute_predict": 215, "model_nam": [215, 252], "negative_outlier_factor_": [215, 260, 794, 937], "datasets_nam": 215, "models_nam": 215, "ceil": [215, 507, 508, 509, 510, 513, 514, 515, 516, 544, 621, 749, 750, 855, 856, 857, 858, 945], "plot_outlier_detection_bench": 215, "recalcul": [216, 218, 362, 969, 972], "mass": [216, 334, 744, 927, 938], "tree_disp": 216, "mlp_disp": 216, "plot_partial_dependence_visualization_api": 216, "set_config": [217, 219, 281, 323, 324, 363, 418, 576, 981, 983, 986], "deactiv": [217, 331, 335, 338, 343, 353, 363, 749, 750, 986], "standard_scal": 217, "numeric_preprocessor": 217, "imputation_mean": 217, "categorical_preprocessor": 217, "imputation_const": 217, "onehot": [217, 274, 275, 363, 813, 941], "gender": [217, 821, 941], "classifier__n_estim": 217, "classifier__max_featur": 217, "classifier__max_depth": 217, "classifier__criterion": 217, "plot_pipeline_displai": 217, "svc_disp": [218, 280, 969], "rfc_disp": [218, 280, 969], "plot_roc_curve_visualization_api": 218, "transform_output": [219, 418, 845, 987], "slep018": [219, 339, 987], "x_test_scal": 219, "scaler2": 219, "x_test_np": 219, "x_test_df": 219, "feature_names_in_": [219, 283, 350, 382, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 561, 577, 578, 579, 580, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 744, 745, 746, 749, 750, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 985, 986, 987, 988], "num_pip": 219, "num_col": 219, "log_reg": [219, 284], "reset": [219, 319, 345, 484, 626, 627, 628, 788, 789, 817, 818, 828, 974], "config_context": [219, 323, 324, 358, 576, 845, 979, 985], "plot_set_output": 219, "bayesiangaussianmixtur": [221, 222, 227, 745, 978, 980, 981, 985, 986], "weight_concentration_prior_typ": [221, 227, 744, 930, 978], "dirichlet_distribut": [221, 744, 930, 978], "dirichlet_process": [221, 227, 744, 930, 978], "weight_concentration_prior": [221, 227, 744, 930], "finit": [221, 227, 323, 332, 350, 418, 488, 501, 532, 556, 559, 560, 561, 608, 677, 727, 734, 744, 769, 845, 865, 867, 868, 927, 930, 931, 955, 957, 964, 979, 980, 984, 986, 987], "unnecessari": [221, 342, 394, 596, 597, 602, 603, 610, 611, 612, 613, 631, 634, 655, 934, 941, 952, 955, 975, 977, 982, 983, 985], "covar": [221, 222, 227], "eig_val": 221, "eig_vec": 221, "unit_eig_vec": 221, "arctan2": [221, 223, 226], "56b4e9": 221, "plot_titl": 221, "weights_": [221, 744, 745, 986], "covariances_": [221, 222, 223, 226, 227, 744, 745, 979], "get_xaxi": [221, 263, 273], "set_tick_param": 221, "007": [221, 253], "labelleft": 221, "0072b2": 221, "f0e442": 221, "d55e00": 221, "mean_precision_prior": [221, 227, 744], "nprior": 221, "gamma_0": [221, 227], "reg_covar": [221, 744, 745], "init_param": [221, 224, 227, 744, 745], "concentrations_prior": 221, "plot_concentration_prior": 221, "color_it": [222, 226, 227], "dp": [222, 227], "shouldn": [222, 227, 337], "em": [222, 223, 227, 394, 397, 409, 486, 744, 745, 930, 986], "dpgmm": [222, 227, 972, 976, 978], "plot_gmm": 222, "ronweiss": 223, "make_ellips": 223, "datalim": 223, "skf": [223, 366, 765], "train_index": [223, 290, 366, 747, 748, 751, 753, 754, 755, 756, 759, 761, 762, 763, 764, 765, 766, 767], "test_index": [223, 290, 366, 747, 748, 751, 753, 754, 755, 756, 759, 761, 762, 763, 764, 765, 766, 767], "cov_typ": 223, "means_init": [223, 224, 745], "y_train_pr": 223, "train_accuraci": 223, "y_test_pr": 223, "test_accuraci": [223, 236], "plot_gmm_covari": 223, "random_from_data": [224, 744, 745, 930], "diamond": 224, "colour": [224, 334, 370, 537, 932], "gordon": [224, 978, 982, 984, 986], "walsh": [224, 984, 986], "extmath": [224, 310, 346, 403, 978, 979, 982, 987], "row_norm": 224, "_samples_gener": 224, "timer": [224, 343], "x_squared_norm": [224, 410], "get_initial_mean": 224, "times_init": 224, "relative_tim": 224, "ini": 224, "init_tim": 224, "2fx": 224, "plot_gmm_init": 224, "shifted_gaussian": 225, "stretched_gaussian": 225, "score_sampl": [225, 258, 259, 260, 266, 350, 368, 419, 482, 491, 513, 627, 744, 745, 746, 749, 750, 760, 793, 794, 804, 808, 851, 937, 975, 980, 982, 984], "plot_gmm_pdf": 225, "candid": [226, 233, 243, 282, 325, 337, 341, 362, 369, 398, 400, 746, 749, 750, 758, 760, 927, 934, 947, 978], "component_1": 226, "component_2": 226, "best_parameters_": 226, "gmm_bic_scor": 226, "callabl": [226, 239, 350, 366, 370, 371, 373, 374, 392, 394, 395, 396, 397, 399, 400, 402, 407, 409, 414, 415, 416, 417, 481, 483, 485, 487, 489, 495, 496, 507, 508, 509, 510, 511, 512, 514, 515, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 560, 561, 570, 578, 584, 589, 593, 609, 616, 621, 623, 625, 638, 641, 642, 646, 661, 669, 681, 691, 720, 723, 727, 728, 729, 730, 739, 740, 746, 749, 750, 752, 760, 770, 771, 772, 773, 775, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 812, 821, 842, 843, 849, 850, 851, 852, 853, 891, 892, 898, 901, 915, 920, 931, 941, 972, 976, 979, 980, 981, 982, 984, 986, 988], "param_n_compon": 226, "param_covariance_typ": 226, "renam": [226, 236, 337, 341, 362, 392, 396, 397, 409, 421, 422, 428, 486, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 821, 972, 973, 974, 978, 979, 980, 981, 983, 984, 985, 986, 987], "catplot": 226, "hue": [226, 235, 256, 278, 334], "eigenvalu": [226, 359, 362, 364, 402, 412, 419, 420, 421, 422, 423, 424, 425, 426, 485, 491, 499, 623, 638, 639, 641, 643, 645, 814, 928, 941, 974, 978, 981, 982, 983, 984], "plot_gmm_select": 226, "loos": [227, 232, 946, 980], "liberti": 227, "judgment": [227, 931], "panel": [227, 258, 273, 368, 951], "primarili": [227, 240, 337, 350, 358, 362, 955, 981, 982], "covariance_prior": [227, 744], "plot_gmm_sin": 227, "mislabel": [229, 369, 933], "imbal": [229, 238, 366, 657, 678, 679, 687, 732, 733, 736, 737, 931], "misclassifi": [229, 310, 946], "life": [229, 345, 928], "set_printopt": 229, "titles_opt": 229, "plot_confusion_matrix": [229, 280, 982, 983, 984, 985], "shufflesplit": [230, 237, 306, 366, 748, 754, 756, 766, 774, 961, 972, 973, 975, 977, 978], "groupshufflesplit": [230, 366, 961, 978], "groupkfold": [230, 240, 366, 544, 746, 749, 750, 751, 752, 753, 754, 755, 760, 764, 769, 770, 771, 772, 775, 961, 978, 985], "stratifiedshufflesplit": [230, 298, 366, 961, 972, 973, 978, 979, 985], "stratifiedgroupkfold": [230, 985], "1338": 230, "cmap_data": 230, "cmap_cv": 230, "coolwarm": [230, 295], "n_point": [230, 788, 789], "percentiles_class": 230, "perc": 230, "group_prior": 230, "visualize_group": 230, "yticklabel": [230, 310], "ngroup": 230, "nclass": 230, "plot_cv_indic": 230, "tr": [230, 334, 341, 362, 364, 419, 420, 421, 422, 423, 424, 425, 426, 786], "this_cv": 230, "plot_cv_predict": 231, "fnr": [232, 648, 676], "det_curv": [232, 648, 731, 738, 931, 984, 985], "visuali": 232, "commonli": [232, 330, 350, 362, 363, 372, 564, 707, 708, 744, 777, 820, 928, 929, 931, 932, 934, 988], "detcurvedisplai": [232, 283, 676, 984, 985], "ax_roc": 232, "ax_det": 232, "feedback": [232, 336, 337, 338, 351, 951, 980], "plot_det": 232, "n_imag": 233, "print_datafram": 233, "filtered_cv_result": 233, "mean_precis": 233, "std_precis": 233, "mean_recal": 233, "std_recal": 233, "mean_test_precis": [233, 239], "std_test_precis": 233, "mean_test_recal": 233, "std_test_recal": 233, "03f": 233, "refit_strategi": 233, "best_index": [233, 239], "precision_threshold": 233, "high_precision_cv_result": 233, "mean_score_tim": [233, 236, 746, 760], "rank_test_recal": 233, "rank_test_precis": [233, 239], "best_recall_std": 233, "best_recal": 233, "best_recall_threshold": 233, "high_recall_cv_result": 233, "fastest_top_recall_high_precision_index": 233, "idxmin": 233, "plot_grid_search_digit": 233, "minimis": [234, 362, 366, 608, 609, 947], "88": [234, 314, 332, 334, 364, 423, 808, 962, 972], "219": 234, "260": [234, 985], "york": [234, 737, 744, 921, 931, 943], "usa": [234, 332, 844, 921, 928, 943, 944], "wenhao": [234, 980, 981], "zhang": [234, 362, 393, 614, 629, 635, 636, 639, 643, 707, 708, 927, 928, 929, 933, 945, 976, 977, 979, 980, 981, 982, 984], "wenhaoz": 234, "ucla": [234, 927], "lower_bound": 234, "best_score_idx": 234, "best_low_complex": 234, "fewest": [234, 577], "candidate_idx": 234, "param_reduce_dim__n_compon": 234, "best_index_": [234, 239, 746, 749, 750, 760], "plot_grid_search_refit_cal": 234, "moon": [235, 269, 275, 472], "moder": [235, 337, 372, 404, 937], "352": [235, 343], "repeatedstratifiedkfold": [235, 366, 761, 765, 979], "repetit": [235, 342, 366, 761, 762, 939, 986], "rank_test_scor": [235, 243, 746, 760, 978], "rename_axi": 235, "certainti": [235, 339, 691, 931], "repreat": 235, "model_scor": [235, 252], "regex": [235, 312, 414, 416], "_test_scor": [235, 422, 544, 985], "lineplot": 235, "labelpad": 235, "nadeau": [235, 980], "bengio": [235, 805, 806, 920, 944], "framework": [235, 323, 339, 348, 350, 356, 362, 587, 638, 744, 927, 928, 935, 949, 952, 955, 972, 978], "diebold": 235, "mariano": 235, "proven": [235, 925, 929, 955], "replic": [235, 336, 339], "cdot": [235, 359, 362, 367, 368, 372, 564, 565, 569, 572, 573, 814, 923, 925, 931, 935, 941], "sum_": [235, 244, 306, 359, 360, 362, 367, 368, 369, 488, 490, 497, 646, 704, 925, 927, 928, 931, 933, 935, 936, 938, 939, 945, 946, 947], "ij": [235, 263, 359, 362, 367, 488, 490, 497, 596, 597, 602, 603, 610, 611, 612, 613, 631, 634, 927, 928, 931, 933, 936, 946], "corrected_std": 235, "crossvalid": [235, 249], "corrected_var": 235, "ddof": [235, 828, 838], "compute_corrected_ttest": 235, "t_stat": 235, "p_val": 235, "model_1_scor": 235, "model_2_scor": 235, "ncorrect": 235, "uncorrect": [235, 545, 548], "t_stat_uncorrect": 235, "p_val_uncorrect": 235, "convent": [235, 326, 337, 339, 340, 341, 343, 350, 380, 381, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 419, 420, 421, 422, 423, 424, 425, 426, 458, 459, 481, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 497, 513, 516, 519, 520, 531, 532, 533, 538, 539, 541, 577, 578, 579, 580, 627, 638, 639, 640, 641, 649, 668, 744, 745, 776, 777, 792, 794, 796, 800, 812, 820, 823, 824, 826, 839, 840, 851, 878, 879, 931, 958, 972, 979, 980, 983, 985, 986], "belief": [235, 804, 936], "benavoli": 235, "colleagu": 235, "conjug": [235, 402, 412, 622, 624, 637, 645, 927], "overlin": [235, 359], "t_post": 235, "ppf": 235, "infin": [235, 491, 632, 633, 662, 769, 854, 866, 934], "minu": [235, 709, 931], "better_prob": 235, "cdf": 235, "essenti": [235, 285, 335, 339, 362, 366, 367, 459, 923, 931, 934, 952, 955, 980], "rope": 235, "rope_interv": 235, "rope_prob": 235, "x_rope": 235, "uncertain": [235, 288, 336], "credibl": 235, "cred_interv": 235, "cred_int_df": 235, "000977": 235, "019023": 235, "005422": 235, "025422": 235, "016445": 235, "036445": 235, "bonferroni": 235, "n_comparison": 235, "pairwise_t_test": 235, "model_i": 235, "model_k": 235, "model_i_scor": 235, "model_k_scor": 235, "pairwise_comp_df": 235, "model_1": 235, "model_2": 235, "2_poli": 235, "3_poli": 235, "pairwise_bayesian": 235, "worse_prob": 235, "pairwise_bayesian_df": 235, "dietterich": [235, 778, 932], "1998": [235, 332, 334, 367, 369, 505, 506, 778, 783, 814, 932, 933, 935, 941, 945], "bouckaert": 235, "frank": [235, 779, 932, 977, 981, 982], "pacif": 235, "asia": [235, 941], "confer": [235, 332, 362, 367, 373, 390, 395, 400, 461, 485, 513, 646, 658, 675, 705, 804, 805, 806, 931, 937, 943, 947], "discoveri": [235, 332, 343, 346, 362, 369, 371, 373, 395, 461, 505, 506, 513, 542, 545, 546, 548, 549, 550, 556, 670, 689, 732, 931, 943, 955, 986, 987], "corani": 235, "dem\u0161ar": 235, "zaffalon": 235, "accompani": [235, 980], "1995": [235, 334, 360, 369, 503, 504, 778, 844, 932], "144": [235, 343, 972], "plot_grid_search_stat": 235, "loader": [236, 291, 310, 330, 331, 332, 448, 449, 458, 951, 952, 966, 972, 977, 979, 980, 983], "fetch20newsgroup": 236, "complementnb": [236, 310, 783, 784, 786, 787, 933, 980, 984, 985, 987], "vect__": 236, "clf__": 236, "parameter_grid": 236, "vect__max_df": 236, "vect__min_df": 236, "vect__ngram_rang": [236, 966], "unigram": [236, 332, 370, 538, 539, 541, 979], "bigram": [236, 370, 538, 539, 541, 966], "vect__norm": 236, "clf__alpha": [236, 966], "exhaust": [236, 280, 281, 282, 283, 284, 285, 323, 334, 342, 349, 357, 362, 746, 749, 750, 760, 837, 838, 840, 927, 966, 968], "parallelis": [236, 418, 845, 979], "random_search": [236, 243], "best_paramet": 236, "get_param": [236, 340, 350, 372, 376, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 744, 745, 746, 749, 750, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 920, 982, 983, 984, 986, 987], "param_nam": [236, 250, 306, 775, 926, 966], "ambigu": [236, 342, 370, 522, 662, 884, 934, 981, 983, 985], "shorten_param": 236, "plotli": [236, 337, 353, 355], "cursor": 236, "px": 236, "error_x": 236, "std_score_tim": [236, 746, 760], "error_i": 236, "hover_data": 236, "update_layout": 236, "xanchor": 236, "yanchor": 236, "autom": [236, 341, 353, 642, 920, 927, 928, 931, 951, 955], "parallel_coordin": 236, "understood": [236, 337, 362, 963], "column_result": 236, "transform_func": 236, "fromkei": [236, 862], "ngram_rang": [236, 291, 370, 538, 539, 541], "color_continuous_scal": 236, "viridis_r": 236, "slide": [236, 594, 927, 950, 951], "intersect": [236, 295, 359, 362, 687], "undo": [236, 818, 976], "plot_grid_search_text_feature_extract": 236, "depict": [237, 369, 930], "score_typ": [237, 752], "ax_idx": 237, "resort": [237, 332, 505, 982], "learning_curv": [237, 285, 752, 926, 975, 978, 979, 980, 981, 982, 984, 986, 987], "return_tim": [237, 772, 982], "test_scores_nb": 237, "fit_times_nb": 237, "score_times_nb": 237, "test_scores_svm": 237, "fit_times_svm": 237, "score_times_svm": 237, "score_tim": [237, 366, 771, 772], "rapidli": [237, 946, 955, 960], "inflect": 237, "plot_learning_curv": 237, "class_likelihood_ratio": [238, 931, 987], "medicin": [238, 662, 931], "medic": [238, 366, 662, 927, 955], "truli": [238, 242, 325, 662, 931], "odd": [238, 369, 464, 662, 931, 979, 980], "suppos": [238, 287, 323, 324, 339, 343, 364, 369, 370, 371, 507, 511, 514, 608, 609, 616, 618, 624, 625, 626, 691, 794, 847, 849, 852, 855, 857, 873, 935, 981, 983], "physiolog": [238, 334, 964], "hopefulli": [238, 345, 972], "indirect": [238, 338, 350], "bio": 238, "minor": [238, 242, 332, 340, 351, 446, 931, 972, 974, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "diagnos": [238, 334, 345, 352, 363], "diagnosi": [238, 334, 795], "pos_lr": 238, "neg_lr": 238, "raise_warn": [238, 662, 917], "positive_likelihood_ratio": [238, 662], "negative_likelihood_ratio": [238, 662], "extract_scor": 238, "test_positive_likelihood_ratio": 238, "test_negative_likelihood_ratio": 238, "dummyclassifi": [238, 502, 931, 973, 975, 976, 977, 979, 980, 981, 982], "compat": [238, 253, 281, 331, 340, 346, 347, 348, 350, 353, 370, 413, 419, 458, 516, 527, 535, 536, 539, 553, 564, 565, 568, 569, 570, 572, 573, 582, 583, 584, 608, 609, 623, 625, 723, 727, 747, 748, 751, 753, 754, 755, 756, 759, 761, 762, 763, 764, 765, 766, 767, 792, 793, 813, 821, 822, 859, 860, 863, 894, 928, 931, 934, 936, 951, 952, 955, 968, 972, 975, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987], "diagnost": [238, 330, 350, 450, 662, 770, 771, 931, 951, 952, 968], "most_frequ": [238, 501, 577, 580, 798, 921, 931, 980, 982, 984], "undefin": [238, 350, 662, 678, 687, 690, 732, 900, 931, 980, 984], "stand": [238, 312, 341, 348, 367, 481, 487, 495, 496, 546, 559, 628, 655, 667, 685, 686, 706, 735, 737, 742, 930, 931, 937], "lr_base": 238, "pos_lr_bas": 238, "pos_lr_base_std": 238, "neg_lr_bas": 238, "neg_lr_base_std": 238, "plot_indic": 238, "scoring_on_bootstrap": 238, "n_bootstrap": [238, 973], "results_for_preval": 238, "bootstrap_indic": 238, "default_rng": 238, "band": [238, 275, 941], "plot_likelihood_ratio": 238, "scorer_nam": [239, 746, 760], "8000": 239, "predefin": [239, 759, 920, 934, 961, 987], "403": 239, "return_train_scor": [239, 366, 746, 749, 750, 760, 771, 978, 979, 981], "402": 239, "73": [239, 349, 746, 760, 794, 856, 941, 962, 972, 974], "maskedarrai": [239, 978], "param_min_samples_split": 239, "sample_score_mean": 239, "sample_score_std": 239, "std_": [239, 977], "rank_test_": 239, "best_scor": 239, "mean_test_": 239, "005": [239, 258, 273, 343], "plot_multi_metric_evalu": 239, "cawlei": [240, 931], "talbot": 240, "mach": [240, 360, 366, 543, 544], "2079": 240, "2107": 240, "num_trial": 240, "x_iri": [240, 965], "y_iri": [240, 965], "p_grid": 240, "non_nested_scor": 240, "nested_scor": 240, "leaveoneout": [240, 366, 961], "leaveonegroupout": [240, 366, 747, 754, 755, 961, 978], "inner_cv": 240, "outer_cv": 240, "non_nest": 240, "score_differ": 240, "211": [240, 290, 824, 835], "non_nested_scores_lin": 240, "nested_lin": 240, "difference_plot": 240, "plot_nested_cross_validation_iri": 240, "permutation_test_scor": [241, 366, 972, 979, 984], "plant": [241, 244, 245, 330, 931, 968], "uncorrel": [241, 333, 478, 484, 491, 931, 964], "n_uncorrelated_featur": 241, "x_rand": 241, "undergo": 241, "score_iri": 241, "perm_scores_iri": 241, "pvalue_iri": 241, "n_permut": [241, 366, 773], "score_rand": 241, "perm_scores_rand": 241, "pvalue_rand": 241, "evid": [241, 310, 345, 362, 366, 367, 369, 594, 744, 930], "ndata": 241, "destroi": [241, 370, 742, 817, 941], "ojala": [241, 366, 773], "garriga": [241, 366, 773], "plot_permutation_tests_for_classif": 241, "t_p": 242, "plu": [242, 334, 342, 629, 779, 782, 932, 945], "f_p": 242, "f_n": 242, "denomin": [242, 370, 375, 425, 540, 654, 706, 925], "stairstep": 242, "ap": [242, 657, 658, 931], "sum_n": [242, 657, 931], "r_n": [242, 657, 931], "p_n": [242, 657, 931], "nth": [242, 657, 931], "r_k": 242, "p_k": [242, 931], "trapezoid": [242, 656, 657, 931], "binar": [242, 244, 245, 329, 331, 361, 363, 703, 783, 812, 813, 815, 819, 821, 831, 931, 933, 957, 968, 986, 988], "average_precision_scor": [242, 656, 658, 691, 731, 737, 931, 972, 975, 979, 980, 986], "differenti": [242, 369, 372, 509, 510, 569, 572], "precisionrecalldisplai": [242, 283, 731, 733, 736, 982, 985], "got": [242, 319, 342, 501, 599, 615, 985, 987], "label_binar": [242, 244, 815, 976], "average_precis": [242, 650, 657, 691, 931], "setup": [242, 244, 323, 335, 339, 343, 345, 934, 958], "f_score": 242, "extens": [242, 244, 258, 323, 324, 331, 332, 335, 338, 340, 341, 345, 346, 348, 356, 367, 446, 453, 484, 690, 878, 886, 928, 930, 931, 950, 951, 955, 972, 978, 985, 986], "plot_precision_recal": 242, "pose": [243, 927, 965], "deem": [243, 244, 484, 939, 985], "n_top": 243, "param_dist": [243, 247, 282], "n_iter_search": 243, "plot_randomized_search": 243, "unambigu": [244, 932, 978], "notion": [244, 311, 325, 348, 367, 369, 927, 931], "scheme": [244, 258, 332, 350, 362, 366, 368, 370, 516, 540, 608, 609, 655, 759, 815, 816, 819, 821, 825, 831, 836, 847, 852, 920, 927, 945, 972, 980, 983, 984], "harder": [244, 245, 277, 332, 336, 339, 345, 362, 465, 511, 512, 954], "bulk": [244, 373, 395], "scrutin": 244, "y_onehot_test": 244, "class_id": [244, 245], "class_of_interest": 244, "nvirginica": 244, "versicolor": [244, 245, 454], "tp_c": 244, "fn_c": 244, "fp_c": 244, "tn_c": 244, "briefli": [244, 336, 349, 369, 920, 982], "nreceiv": 244, "micro_roc_auc_ovr": 244, "mcclish": [244, 737], "deci": 244, "1989": [244, 585, 737, 805, 806, 927, 934], "jul": 244, "fpr_grid": 244, "mean_tpr": [244, 245], "interp": [244, 245, 298], "macro_roc_auc_ovr": 244, "deeppink": 244, "aqua": 244, "role": [244, 323, 336, 348, 367, 949], "pair_list": 244, "pair_scor": 244, "label_a": 244, "label_b": 244, "a_mask": 244, "b_mask": 244, "ab_mask": 244, "a_tru": 244, "b_true": 244, "idx_a": 244, "idx_b": 244, "fpr_a": 244, "tpr_a": 244, "fpr_b": 244, "tpr_b": 244, "macro_roc_auc_ovo": 244, "ovo_tpr": 244, "pool": [244, 348, 396, 585, 900, 952, 983], "plot_roc": 244, "mean_fpr": 245, "viz": [245, 344], "interp_tpr": 245, "mean_auc": 245, "std_auc": 245, "std_tpr": 245, "tprs_upper": 245, "tprs_lower": 245, "plot_roc_crossv": 245, "halvinggridsearchcv": [246, 247, 282, 529, 750, 920, 984, 986, 987], "1e4": [246, 609, 629, 841, 943], "gsh": 246, "gsh_time": 246, "gs_time": 246, "make_heatmap": 246, "is_sh": 246, "make_cbar": 246, "param_c": [246, 746], "param_gamma": [246, 746, 760], "sh": [246, 341, 345, 920], "scores_matrix": 246, "pivot_t": 246, "aggfunc": 246, "0e": [246, 499, 500], "get_xticklabel": 246, "rotation_mod": 246, "cbar_ax": 246, "plot_successive_halving_heatmap": 246, "rsh": [247, 282], "params_str": 247, "drop_dupl": 247, "n_resources_": [247, 749, 750, 920], "nn_candid": 247, "n_candidates_": [247, 749, 750, 920], "n_iterations_": [247, 749, 750], "multialign": 247, "plot_successive_halving_iter": 247, "n_samples_train": [248, 849, 850, 851, 852, 853], "n_samples_test": [248, 849, 850, 851, 852, 853, 934, 941], "train_error": 248, "test_error": 248, "i_alpha_optim": 248, "alpha_optim": 248, "plot_train_error_vs_test_error": 248, "nonlinear": [249, 283, 594, 638, 639, 643, 646, 814, 927, 928, 936, 941], "true_fun": 249, "polynomial_featur": 249, "plot_underfitting_overfit": 249, "validation_curv": [250, 306, 926, 979, 980, 981, 984], "subset_mask": 250, "isin": 250, "param_rang": [250, 306, 775, 926], "train_scores_mean": 250, "train_scores_std": 250, "test_scores_mean": 250, "test_scores_std": 250, "plot_validation_curv": 250, "yeast": 252, "2417": 252, "103": [252, 253, 332, 369, 447, 505, 506, 972], "jaccard": [252, 359, 400, 407, 649, 653, 669, 678, 683, 687, 727, 728, 729, 743, 934, 980, 981], "preced": [252, 324, 337, 437, 931, 972], "arrang": [252, 582, 779, 780, 781, 782, 931], "adam": [252, 269, 805, 806, 935, 979, 980, 982, 983, 984, 985, 986, 987], "kleczewski": [252, 979, 980], "classifierchain": [252, 350, 780, 782, 979, 984, 987], "jaccard_scor": [252, 653, 678, 683, 743, 931, 981, 984], "40597": 252, "wrapper": [252, 253, 343, 346, 366, 372, 494, 570, 621, 847, 947, 951, 976, 984], "base_lr": [252, 779], "y_pred_ovr": 252, "ovr_jaccard_scor": 252, "y_pred_chain": 252, "chain_jaccard_scor": 252, "y_pred_ensembl": 252, "ensemble_jaccard_scor": 252, "x_po": 252, "plot_classifier_chain_yeast": 252, "kneighborstransform": [253, 255, 280, 800, 934, 982, 986, 987], "nmslib": 253, "pynndesc": 253, "pip": [253, 280, 281, 282, 283, 284, 285, 324, 335, 337, 341, 343, 353, 947], "pynndescenttransform": 253, "csr_matrix": [253, 281, 391, 395, 402, 446, 484, 494, 507, 508, 509, 510, 513, 514, 515, 516, 538, 543, 544, 664, 774, 823, 849, 850, 852, 853, 855, 856, 857, 858, 932, 941, 945, 946, 947, 987], "transformermixin": [253, 339, 350, 415, 980, 987], "nmslibtransform": 253, "sw": 253, "n_samples_fit_": [253, 790, 791, 792, 794, 796, 798, 799, 800], "cosinesimil": 253, "nmslib_": 253, "adddatapointbatch": 253, "createindex": 253, "n_samples_transform": [253, 792, 800], "thread": [253, 281, 284, 335, 348, 350, 362, 369, 780, 781, 897, 898, 899, 975, 977, 979, 980, 981, 982, 983, 985, 987, 988], "num_thread": 253, "knnquerybatch": 253, "mnist_10000": 253, "mnist_20000": 253, "20_000": 253, "tsne_param": 253, "barnes_hut": [253, 642, 979, 980], "parallel_batch_queri": 253, "msg": [253, 915], "transformer_nam": 253, "longest": 253, "fit_dur": 253, "transform_dur": 253, "139": [253, 343, 369, 402, 412, 641, 645, 932], "208": [253, 334], "315": [253, 334], "823": 253, "884": 253, "744": 253, "011": [253, 343], "769": 253, "733": 253, "077": 253, "448": 253, "759": 253, "numba": [253, 952], "cold": 253, "nearestneighbor": [253, 284, 362, 373, 395, 398, 411, 638, 639, 643, 790, 791, 792, 794, 798, 799, 800, 934, 972, 976, 980, 981, 982, 984, 985, 986, 987, 988], "i_ax": 253, "int32": [253, 337, 350, 394, 397, 399, 401, 403, 849, 850, 851, 852, 853, 896, 946, 981, 987], "828": 253, "757": [253, 334], "955": [253, 366, 604], "994": 253, "536": 253, "brute": [253, 348, 357, 366, 373, 395, 400, 407, 582, 583, 638, 639, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 938, 968, 976, 980, 984, 987, 988], "spent": [253, 338, 343, 772, 987], "approximate_nearest_neighbor": 253, "slow": [255, 273, 310, 323, 331, 335, 337, 367, 370, 397, 649, 822, 823, 827, 849, 852, 884, 928, 934, 952, 965, 979], "temporarydirectori": [255, 280], "n_neighbors_list": 255, "graph_model": 255, "classifier_model": 255, "sklearn_graph_cache_": 255, "tmpdir": [255, 280], "full_model": 255, "classifier__n_neighbor": 255, "grid_model": 255, "mean_fit_tim": [255, 746, 760], "std_fit_tim": [255, 746, 760], "plot_caching_nearest_neighbor": 255, "cmap_light": [256, 261, 264], "cmap_bold": [256, 261, 264], "darkblu": [256, 264], "neighbour": [256, 264, 412, 642, 936], "plot_classif": 256, "kerneldens": [257, 258, 266, 368, 974, 980, 981, 985, 986, 987], "new_data": [257, 339], "4x11": 257, "real_data": 257, "set_clim": 257, "plot_digits_kde_sampl": 257, "block": [258, 273, 284, 332, 334, 337, 342, 345, 350, 359, 362, 365, 368, 402, 403, 412, 423, 429, 430, 438, 439, 461, 463, 645, 899, 934, 936], "wildli": [258, 930], "ball": [258, 266, 362, 368, 398, 642, 788, 789, 793, 796, 798, 799, 800, 972, 974, 977, 983], "kd": [258, 362, 368, 934, 980, 981, 982], "jakevdp": [258, 266], "aaaaff": [258, 261], "tophat": [258, 368, 788, 789, 793], "log_den": 258, "34": [258, 334, 366, 372, 470, 520, 547, 599, 617, 666, 713, 962, 972], "x_src": 258, "format_func": 258, "ih": 258, "epanechnikov": [258, 368, 788, 789, 793], "funcformatt": 258, "nullloc": 258, "true_den": 258, "plot_kde_1d": 258, "NOT": [259, 334, 340, 756, 788, 789], "plot_lof_novelty_detect": 259, "x_inlier": 260, "ground_truth": 260, "n_error": 260, "x_score": [260, 432, 433, 434, 435], "radiu": [260, 298, 334, 362, 393, 400, 638, 713, 730, 788, 789, 790, 791, 792, 796, 798, 799, 800, 802, 934, 974, 976, 986], "legendhandl": 260, "_size": 260, "plot_lof_outlier_detect": 260, "ffaaaa": 261, "aaffaa": 261, "00ff00": 261, "plot_nca_classif": 261, "neighborhoodcomponentanalysi": 262, "dim_reduction_method": 262, "acc_knn": 262, "x_embed": [262, 263, 642, 646, 797, 934], "ntest": 262, "plot_nca_dim_reduct": 262, "logsumexp": [263, 979], "get_yaxi": [263, 273], "link_thickness_i": 263, "diff_embed": 263, "dist_embed": 263, "einsum": 263, "exp_dist_embed": 263, "relate_point": 263, "pt_i": 263, "pt_j": 263, "plot_nca_illustr": 263, "nearestcentroid": [264, 310, 932, 934, 972, 976, 979, 984, 987], "shrink_threshold": [264, 795, 934, 972, 984], "plot_nearest_centroid": 264, "barycent": [265, 972], "plot_regress": 265, "geospati": [266, 368], "haversin": [266, 368, 649, 711, 713, 934, 981, 984], "latitud": [266, 273, 332, 448, 649, 713], "longitud": [266, 273, 332, 448, 649, 713], "xtrain": 266, "ytrain": 266, "radian": [266, 649, 713], "land_mask": 266, "ball_tre": [266, 373, 395, 400, 407, 638, 639, 790, 791, 792, 793, 794, 796, 798, 799, 800, 934, 972], "ocean": 266, "plot_species_kd": 266, "combat": [268, 367], "encourag": [268, 298, 336, 337, 348, 946, 951], "lesser": [268, 350, 393, 491, 927], "curvatur": 268, "complic": [268, 343, 372, 644, 934], "lbfg": [268, 339, 598, 599, 608, 609, 619, 622, 624, 630, 637, 779, 782, 805, 806, 927, 935, 976, 977, 979, 980, 985, 986, 987], "plot_mlp_alpha": 268, "bfg": [269, 560, 561, 598, 599, 608, 619, 622, 624, 630, 637, 934, 935, 987], "schedul": [269, 324, 626, 627, 628, 805, 806, 899, 945, 955, 979], "momentum": [269, 805, 806, 935], "nesterovs_momentum": [269, 805, 806], "invscal": [269, 626, 627, 628, 805, 806, 945], "nesterov": [269, 805, 806, 935], "plot_arg": 269, "plot_on_dataset": 269, "nlearn": 269, "loss_": [269, 509, 805, 806, 935, 986], "loss_curve_": [269, 805, 806], "data_set": 269, "get_lin": 269, "plot_mlp_training_curv": 269, "28x28": 270, "784": 270, "throw": [270, 346, 866, 976, 979, 980, 981, 982, 986], "infrastructur": [270, 949, 951, 952], "plot_mnist_filt": 270, "greyscal": 271, "bernoulli": [271, 370, 371, 783, 784, 785, 786, 787, 804, 805, 806, 811, 927, 941, 953, 968, 972], "bernoullirbm": [271, 805, 806, 936, 941, 974, 975, 984, 986], "yann": [271, 972, 974], "dauphin": [271, 974], "gabriel": [271, 980, 981, 982, 985, 986], "synnaev": 271, "convolv": 271, "minmax_scal": [271, 273, 818, 977, 980], "nudge_dataset": 271, "1px": 271, "direction_vector": 271, "apply_along_axi": 271, "feature_rang": [271, 818, 833, 941, 974, 984], "cg": [271, 608, 609, 622, 624, 637, 927, 976, 977, 979, 983, 985, 986], "rbm": [271, 804, 805, 806, 936], "rbm_features_classifi": 271, "6000": [271, 577], "raw_pixel_classifi": 271, "plot_rbm_logistic_classif": 271, "incom": [273, 332, 391], "unscal": [273, 278, 927, 931, 980, 986], "notabl": [273, 331, 350, 446, 677, 821, 928, 930, 934, 976, 979, 986], "unterthin": [273, 975, 976, 977], "medinc": [273, 282, 332], "housag": 273, "averoom": [273, 282, 332], "room": [273, 332, 342, 362, 954], "avebedrm": [273, 332], "bedroom": [273, 332], "aveoccup": [273, 282, 332], "features_idx": 273, "quantile_rang": [273, 826, 837, 978], "yeo": [273, 277, 824, 835, 941, 980, 986], "cox": [273, 277, 824, 835, 941, 980], "plasma": 273, "plasma_r": 273, "create_ax": 273, "bottom_h": 273, "left_h": 273, "rect_scatt": 273, "rect_histx": 273, "rect_histi": 273, "ax_scatt": 273, "ax_histx": 273, "ax_histi": 273, "ax_scatter_zoom": 273, "ax_histx_zoom": 273, "ax_histy_zoom": 273, "rect_colorbar": 273, "ax_colorbar": 273, "plot_distribut": 273, "hist_nbin": 273, "x0_label": 273, "x1_label": 273, "hist_x1": 273, "hist_x0": 273, "aesthet": [273, 947, 977], "layout": [273, 348, 847, 848, 849, 852, 868, 946, 975, 977], "tick_bottom": 273, "tick_left": 273, "outward": 273, "ec": [273, 480], "make_plot": 273, "item_idx": 273, "ax_zoom_out": 273, "ax_zoom_in": 273, "zoom_in_percentile_rang": 273, "cutoffs_x0": 273, "cutoffs_x1": 273, "non_outliers_mask": 273, "colorbarbas": 273, "OR": [273, 362, 373, 395, 983], "indistinguish": 273, "quadrant": 273, "plot_all_sc": [273, 817, 818, 820, 824, 825, 826, 828, 832, 833, 834, 835, 836, 837, 838], "straightforward": [274, 336, 367, 955], "anywher": 274, "qinhanmin2005": 274, "sina": [274, 985], "rnd": 274, "enc": [274, 276, 284, 821, 822, 941], "x_bin": 274, "line_bin": 274, "plot_discret": 274, "get_nam": 275, "broader": [275, 927], "logisticregression__c": 275, "linearsvc__c": 275, "kbinsdiscretizer__n_bin": 275, "gradientboostingclassifier__learning_r": 275, "svc__c": 275, "cm_piyg": 275, "piyg": 275, "b30065": 275, "178000": 275, "est_idx": 275, "plot_discretization_classif": 275, "centers_0": 276, "centers_1": 276, "x_list": 276, "grid_encod": 276, "stripe": 276, "plot_discretization_strategi": 276, "powertransform": [277, 825, 835, 921, 941, 980, 983, 986, 988], "johnwon": 277, "weibul": 277, "bimod": [277, 368], "ineffect": [277, 941, 980, 981], "eric": [277, 975, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987], "ericchang2017": 277, "northwestern": [277, 608], "contact": [277, 348, 951], "font_siz": 277, "304": [277, 334], "bc": 277, "qt": [277, 825], "x_lognorm": [277, 941], "x_chisq": 277, "chisquar": 277, "x_weibul": 277, "x_gaussian": 277, "x_uniform": 277, "loc_a": 277, "loc_b": 277, "105": 277, "x_a": 277, "x_b": 277, "x_bimod": 277, "d81b60": 277, "0188ff": 277, "ffc107": 277, "b7a2ff": 277, "2ec5ac": 277, "figaspect": 277, "axes_idx": 277, "axes_list": 277, "x_trans_bc": 277, "lmbda_bc": 277, "lambdas_": [277, 824, 985], "x_trans_yj": 277, "lmbda_yj": 277, "x_trans_qt": 277, "ax_origin": 277, "ax_bc": 277, "ax_yj": 277, "ax_qt": 277, "x_tran": [277, 339, 358, 393, 414, 824, 835, 941], "meth_nam": 277, "lmbda": 277, "plot_map_data_to_norm": 277, "involv": [278, 280, 298, 323, 325, 332, 337, 341, 350, 351, 365, 372, 649, 776, 777, 928, 932, 934, 938, 946, 951, 955, 964, 980], "kneighbor": [278, 284, 790, 791, 792, 794, 796, 934, 976, 981, 985, 986, 987, 988], "obatin": 278, "tyler": [278, 979, 985, 986, 987], "lanigan": [278, 979], "tylerlanigan": 278, "sebastian": [278, 973, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986], "raschka": [278, 977, 978, 979, 980, 981, 984], "sebastianraschka": 278, "alcohol": [278, 334], "malic": [278, 334], "acid": [278, 334], "scaled_x_train": 278, "prolin": [278, 334], "x_plot_scal": 278, "fit_and_plot_model": 278, "desicion": 278, "scaled_pca": 278, "x_train_transform": [278, 319, 366], "x_train_std_transform": 278, "first_pca_compon": 278, "target_class": 278, "repercuss": 278, "logisticregressioncv": [278, 350, 608, 927, 932, 976, 977, 978, 980, 981, 982, 986, 987], "unscaled_clf": 278, "scaled_clf": 278, "y_pred_scal": 278, "y_proba_sc": 278, "vastli": 278, "plot_scaling_import": 278, "announc": [280, 281, 282, 283, 284, 285, 341, 351], "bug": [280, 281, 282, 283, 284, 285, 326, 335, 339, 340, 342, 345, 348, 350, 949, 952, 972, 973, 974, 982, 983, 984, 985, 986, 987, 988], "latest": [280, 281, 282, 283, 284, 285, 335, 337, 341, 343, 345, 947, 949, 986], "upgrad": [280, 281, 282, 283, 284, 285, 353, 952, 972, 977, 980], "conda": [280, 281, 282, 283, 284, 285, 324, 337, 338, 340, 341, 343, 345, 355, 947], "forg": [280, 281, 282, 283, 284, 285, 324, 338, 340, 341, 345, 353], "plot_roc_curv": [280, 982, 984], "plot_precision_recall_curv": [280, 982, 984, 985], "stackingclassifi": [280, 319, 369, 518, 982, 983, 984, 985, 986, 987], "radiusneighborstransform": [280, 792, 934, 982, 984, 986, 987], "sklearn_cache_": 280, "isomap__n_neighbor": 280, "nan_euclidean_dist": [280, 711, 921, 982], "ccp_alpha": [280, 314, 507, 508, 509, 510, 514, 515, 855, 856, 857, 858, 947, 982], "tree_": [280, 314, 318, 793, 855, 856, 857, 858], "node_count": [280, 314, 318, 855, 856, 857, 858], "check_estim": [280, 339, 350, 879, 979, 980, 981, 982, 983, 984, 986, 987], "pytest": [280, 324, 335, 337, 339, 340, 353, 355, 878, 879, 982, 985], "estimator_check": [280, 339, 350, 979, 980, 982, 983, 986, 987, 988], "parametrize_with_check": [280, 339, 878, 982, 983], "test_sklearn_compatible_estim": [280, 879], "ovo": [280, 737, 776, 849, 852, 931, 932, 946], "macro": [280, 332, 366, 657, 663, 678, 679, 687, 732, 733, 736, 737, 931, 966, 972, 980], "preval": [280, 350, 662, 931], "decision_function_shap": [280, 307, 849, 852, 946, 977, 978, 981, 982], "plot_release_highlights_0_22_0": 280, "await": 281, "lam": [281, 282, 983], "openmp": [281, 335, 340, 348, 350, 362, 369, 899, 983, 985], "10k": [281, 397], "monotoinc": 281, "gbdt_cst": 281, "plot_release_highlights_0_23_0": 281, "art": [282, 343, 599, 642, 951, 955], "700": 282, "footprint": [282, 285, 323, 325, 362, 367, 505, 506, 513, 974, 977, 978, 983, 984, 987], "yarowski": [282, 844, 944], "selftrainingclassifi": [282, 290, 291, 292, 944, 984], "random_unlabeled_point": [282, 842, 843, 844], "self_training_model": [282, 844], "linear_baselin": 282, "houseag": [282, 332], "effort": [282, 337, 343, 951, 955, 983, 985], "plot_release_highlights_0_24_0": 282, "l2_regular": [283, 369, 511, 512], "max_bin": [283, 284, 369, 511, 512], "typeerror": [283, 342, 661, 871, 915, 979, 980, 983, 985], "quantileregressor": [283, 927, 931, 985, 986, 987], "min_": [283, 362, 369, 818, 927, 941, 945, 946, 947], "sum_i": [283, 596, 597, 602, 603, 610, 611, 612, 613, 631, 634, 922, 923, 927, 929, 931, 936], "pb_q": [283, 927], "_1": [283, 364, 367, 370, 481, 487, 488, 490, 495, 496, 497, 596, 597, 602, 603, 604, 605, 606, 610, 611, 612, 613, 631, 632, 633, 634, 715, 927, 929, 931, 946], "get_feature_nam": [283, 980, 981, 983, 984, 985], "pet": [283, 737, 931], "dog": [283, 284, 532, 732, 941], "fish": 283, "plot_": [283, 353], "2100": 283, "plot_release_highlights_1_0_0": 283, "x_1d": 284, "hist_quantil": 284, "log_reg_input_featur": 284, "gather": [284, 345, 351, 361, 362, 941, 955], "min_frequ": [284, 821, 941, 986], "max_categori": [284, 821, 941, 986], "rabbit": [284, 941], "snake": [284, 532, 941], "infrequent_categories_": [284, 821, 941], "refactor": [284, 972, 974, 975, 976, 982, 985, 986, 987], "radius_neighbor": [284, 796, 798, 799, 800, 976, 981, 982, 984, 985, 986, 987], "summari": [284, 319, 334, 348, 642, 663, 860, 929, 932, 951, 966], "pairwise_distances_argmin_min": [284, 728, 975, 980, 986, 987, 988], "radiusneighborsclassifi": [284, 790, 791, 796, 799, 932, 934, 972, 974, 978, 980, 982, 984, 985, 986, 987, 988], "radiusneighborsregressor": [284, 790, 791, 796, 798, 934, 972, 974, 980, 982, 984, 985, 986, 987, 988], "trustworthi": [284, 980, 981, 986, 987, 988], "labelpropag": [284, 289, 843, 844, 932, 944, 973, 978, 979, 982, 983, 984, 986, 987, 988], "labelspread": [284, 287, 288, 289, 291, 292, 842, 844, 932, 944, 973, 978, 979, 982, 983, 986, 987, 988], "blog": [284, 323, 337, 343, 345, 983], "cython": [284, 323, 324, 326, 335, 337, 340, 346, 348, 353, 355, 358, 362, 369, 458, 941, 942, 945, 946, 951, 952, 972, 975, 976, 978, 984, 987, 988], "readili": [284, 367, 947, 955], "true_w": 284, "true_h": 284, "x_reconstruct": [284, 432, 433, 434], "divis": [284, 362, 370, 540, 541, 544, 662, 663, 678, 679, 687, 695, 732, 733, 736, 931, 965, 976, 980, 981, 984], "repeatedli": [284, 319, 350, 362, 369, 372, 458, 496, 616, 617, 626, 627, 628, 730, 921, 935, 961], "bisect_km": 284, "plot_release_highlights_1_1_0": 284, "video": [285, 326, 331, 340, 453, 932, 955, 958], "sepal_col": 285, "petal_col": 285, "kbin": 285, "x_out": [285, 812, 821, 822], "hist_no_interact": 285, "v1": [285, 331, 353, 374, 483, 705, 744, 745, 783, 784, 785, 787, 984, 987, 988], "liac": [285, 331, 337, 446, 987], "arff": [285, 337, 446, 984, 987], "compliant": [285, 337], "cupi": [285, 358], "gpu": [285, 358, 935, 952, 966], "changelog": [285, 341, 350], "plot_release_highlights_1_2_0": 285, "semisupervis": [287, 350], "clai": [287, 288, 289, 292, 972], "woolam": [287, 288, 289, 292, 972], "340": 287, "n_total_sampl": [287, 288], "n_labeled_point": [287, 288], "unlabeled_set": 287, "everyth": [287, 319, 341, 343, 348, 414, 890, 951, 952, 972], "lp_model": [287, 288], "predicted_label": [287, 288], "transduction_": [287, 288, 289, 842, 843, 844], "true_label": [287, 288], "pred_entropi": [287, 288], "label_distributions_": [287, 288, 842, 843, 983], "uncertainty_index": [287, 288], "image_index": [287, 288], "plot_label_propagation_digit": 287, "max_iter": 288, "330": 288, "unlabeled_indic": 288, "transduc": 288, "in1d": [288, 979], "delete_indic": 288, "183": [288, 343, 932, 972], "nfit": 288, "delete_index": 288, "plot_label_propagation_digits_active_learn": 288, "label_spread": 289, "output_label": 289, "output_label_arrai": 289, "outer_numb": 289, "inner_numb": 289, "plot_label_propagation_structur": 289, "breast_canc": 290, "569": [290, 334, 450, 542, 545, 546, 548], "augment": [290, 580, 829, 955], "oliv": [290, 292, 980, 981, 983, 984, 985], "rausch": [290, 292, 980, 981, 984], "rauscho": [290, 292], "ethz": [290, 292], "total_sampl": [290, 486], "base_classifi": [290, 292, 944], "x_valu": 290, "99999": 290, "amount_label": 290, "amount_iter": 290, "self_training_clf": 290, "skfold": 290, "y_test_tru": 290, "labeled_iter_": [290, 844], "return_count": [290, 311, 800], "capsiz": 290, "twinx": 290, "plot_self_training_varying_threshold": 290, "tfidftransform": [291, 311, 312, 370, 439, 541, 966, 979, 980, 986, 988], "sdg_param": 291, "vectorizer_param": 291, "selftrain": 291, "st_pipelin": 291, "ls_pipelin": 291, "eval_and_print_metr": 291, "y_mask": 291, "x_20": 291, "y_20": 291, "plot_semi_supervised_newsgroup": 291, "y_rand": 292, "y_30": 292, "y_50": 292, "ls30": 292, "ls50": 292, "ls100": 292, "st30": 292, "st50": 292, "rbf_svc": [292, 946], "color_map": 292, "plot_semi_supervised_versus_svm_iri": 292, "my_kernel": [294, 946], "plot_custom_kernel": 294, "2x2": [295, 362, 703], "plot_iris_svc": 295, "convention": [296, 350, 843], "support_vector_indic": 296, "plot_linearsvc_support_vector": 296, "plot_oneclass": 297, "midpoint": 298, "blink": 298, "act": [298, 337, 349, 368, 369, 663, 678, 679, 687, 732, 733, 736, 823, 827, 928, 931, 934, 946, 980], "spuriou": [298, 345, 985, 986, 987], "c_rang": 298, "gamma_rang": 298, "midpointnorm": 298, "masked_arrai": [298, 746, 760], "x_2d": 298, "y_2d": 298, "cheat": [298, 935, 945, 974], "c_2d_rang": 298, "gamma_2d_rang": 298, "bright": 298, "brutal": 298, "plot_rbf_paramet": 298, "plot_separating_hyperplan": 299, "plain": [300, 372, 607, 945], "n_samples_1": [300, 946], "n_samples_2": [300, 946], "clusters_std": 300, "wclf": 300, "wdisp": 300, "surface_": [300, 581], "plot_separating_hyperplane_unbalanc": 300, "blown": 301, "score_mean": 301, "score_std": 301, "plot_svm_anova": 301, "fignum": [302, 303], "plot_svm_kernel": 302, "unreg": 303, "perpendicular": 303, "yy_down": 303, "yy_up": 303, "plot_svm_margin": 303, "nusvc": [304, 323, 850, 932, 972, 973, 974, 977, 980, 982, 983, 984, 986], "plot_svm_nonlinear": 304, "svr_rbf": 305, "svr_lin": 305, "svr_poli": 305, "kernel_label": 305, "model_color": 305, "setdiff1d": 305, "plot_svm_regress": 305, "mathcal": [306, 367, 369, 577, 646, 923, 925, 927, 931, 945, 985], "omega": [306, 365, 925], "model_l1": 306, "logx": 306, "train_size_idx": 306, "results_sc": 306, "c_scale": 306, "model_l2": 306, "plot_svm_scale_c": 306, "break_ti": [307, 849, 852, 946, 982], "accent": [307, 538, 539, 541, 982], "plot_svm_tie_break": 307, "emphasi": [308, 365, 849, 850, 851, 852, 853, 938, 951], "subtl": [308, 319, 930, 952], "plot_decision_funct": 308, "sample_weight_last_ten": 308, "sample_weight_const": 308, "clf_no_weight": 308, "clf_weight": 308, "plot_weighted_sampl": 308, "signatur": [310, 311, 332, 438, 439, 507, 508, 514, 515, 544, 560, 561, 609, 623, 625, 661, 691, 752, 770, 772, 775, 821, 920, 979, 985], "size_mb": 310, "utf": [310, 312, 370, 437, 453, 532, 538, 539, 541], "load_dataset": 310, "sublinear_tf": [310, 367, 370, 540, 541], "duration_train": 310, "duration_test": 310, "data_train_size_mb": 310, "data_test_size_mb": 310, "ridgeclassifi": [310, 323, 622, 623, 625, 927, 932, 977, 981, 985, 986, 987], "sparse_cg": [310, 622, 624, 637, 927, 973, 979, 981, 982, 986], "rarer": [310, 312, 370], "deeper": [310, 947], "plot_feature_effect": 310, "average_feature_effect": 310, "top5": 310, "top_indic": 310, "predictive_word": 310, "bar_siz": 310, "y_loc": 310, "keyword": [310, 331, 337, 339, 342, 344, 350, 362, 373, 376, 389, 395, 396, 400, 402, 407, 414, 417, 453, 485, 488, 490, 509, 510, 517, 518, 519, 520, 570, 578, 581, 582, 589, 593, 596, 597, 602, 603, 610, 611, 612, 613, 631, 634, 638, 642, 647, 648, 650, 651, 652, 723, 727, 728, 729, 730, 739, 740, 752, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 808, 812, 879, 881, 898, 920, 928, 931, 934, 944, 972, 976, 978, 979, 980, 982, 984, 986, 987], "god": [310, 966], "expectedli": 310, "caltech": 310, "pollut": [310, 677, 734, 931, 937], "sender": [310, 332], "writer": 310, "custom_nam": 310, "clf_descr": 310, "rocchio": [310, 795], "training_tim": 310, "txt": [310, 331, 443, 453], "curs": [310, 311, 362, 368, 372, 933, 934, 960, 965], "harm": [310, 339, 370, 742], "plot_document_classification_20newsgroup": 310, "discov": [311, 362, 367, 370, 373, 395, 398, 957, 987], "metadata": [311, 331, 332, 356, 438, 439, 446, 951, 952, 957], "category_s": 311, "true_k": 311, "evaluations_std": 311, "fit_and_evalu": 311, "evaluation_std": 311, "score_valu": 311, "std_score": [311, 985], "reweight": [311, 350, 364, 369, 540, 541, 598, 619, 630], "collis": [311, 312, 370, 532, 539], "x_tfidf": 311, "devid": 311, "prod": [311, 571], "phenomenon": [311, 941], "cluster_s": 311, "redo": 311, "x_lsa": 311, "explained_vari": [311, 931], "minibatch_kmean": 311, "influenti": [311, 955], "original_space_centroid": 311, "order_centroid": 311, "sparciti": 311, "lsa_vector": 311, "50_000": 311, "x_hashed_lsa": 311, "df_std": 311, "speak": [311, 323, 337, 945], "safer": [311, 319, 362, 366, 972], "plot_document_clust": 311, "assembl": [312, 808], "18000": [312, 332], "raw_data": 312, "data_size_mb": 312, "anyth": [312, 341, 343, 350, 366, 895, 986], "unicod": [312, 370, 437, 453, 532, 538, 539, 541, 896, 972, 980, 984], "charact": [312, 337, 342, 350, 370, 453, 458, 459, 538, 539, 541, 859, 936, 966, 972, 985, 987], "underscor": [312, 339, 350, 915, 963, 972, 982, 985], "tok": [312, 370], "findal": 312, "token_freq": 312, "freq": 312, "dict_count_vector": 312, "vocabulary_": [312, 370, 531, 538, 541, 966, 972], "n_nonzero_column": 312, "inact": [312, 331, 337], "input_typ": [312, 370, 414, 532], "y_po": 312, "downsid": 312, "featureheash": 312, "implicitli": [312, 346, 369, 547, 582, 583, 827, 921, 923, 938, 941, 946], "token_pattern": [312, 370, 538, 539, 541], "plot_hashing_vs_dict_vector": 312, "parameter": [314, 372, 564, 565, 572, 573, 744, 745, 927, 928, 936, 941, 947], "weakest": [314, 947], "cost_complexity_pruning_path": [314, 855, 856, 857, 858], "drawstyl": [314, 650], "015": [314, 939], "plot_cost_complexity_prun": 314, "ryb": 315, "pairidx": 315, "borderpad": 315, "handletextpad": 315, "plot_tre": [315, 318, 947, 981, 983, 984, 985, 987], "plot_iris_dtc": 315, "plot_tree_regress": 316, "regr_3": 317, "y_3": 317, "plot_tree_regression_multioutput": 317, "decision_path": [318, 507, 508, 514, 515, 516, 855, 856, 857, 858, 978, 983], "children_left": 318, "child": [318, 324, 348, 350, 362, 369, 393, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 855, 856, 857, 858, 899, 979], "children_right": 318, "n_node_sampl": 318, "travers": [318, 934, 938], "n_node": [318, 392, 396, 413, 507, 508, 514, 515, 516, 855, 856, 857, 858, 889], "node_depth": 318, "is_leav": 318, "pop": [318, 348, 862, 961, 980], "visit": [318, 337, 938], "node_id": [318, 859, 861], "is_split_nod": 318, "children": [318, 362, 369, 392, 396, 413, 516, 976], "Or": [318, 366, 367, 821, 931, 937, 945], "node_index": 318, "node_ind": 318, "leaf_id": 318, "sample_id": [318, 332, 447], "threshold_sign": 318, "inequ": [318, 350, 362, 394, 397, 409, 649, 928, 929, 934], "boolean": [318, 332, 337, 339, 346, 363, 369, 370, 371, 414, 511, 512, 531, 532, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 579, 582, 583, 586, 599, 621, 649, 777, 783, 804, 811, 830, 863, 915, 921, 927, 933, 938, 941, 947, 972, 975, 977, 978, 979, 981, 982, 983, 985, 986, 987], "common_nod": 318, "common_node_id": 318, "plot_unveil_tree_structur": 318, "anti": [319, 556, 783, 933], "x_test_transform": [319, 366], "standard_norm": 319, "unfair": 319, "x_select": 319, "gbc": 319, "76": [319, 334, 343, 730, 964], "x_train_select": 319, "x_test_select": 319, "46": [319, 343, 543, 544, 666, 851, 856, 926, 941], "tip": [319, 322, 326, 337, 340, 343, 357, 370, 484, 491, 595, 642, 927, 953, 967, 968, 970, 975], "glossari": [319, 326, 337, 339, 343, 361, 373, 374, 388, 391, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 414, 417, 419, 422, 424, 438, 441, 442, 445, 447, 453, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 533, 534, 544, 552, 557, 558, 560, 561, 577, 582, 584, 589, 590, 591, 592, 596, 597, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 651, 723, 727, 730, 740, 744, 745, 746, 748, 749, 750, 751, 752, 758, 760, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 790, 791, 793, 794, 796, 797, 798, 799, 801, 802, 804, 805, 806, 807, 810, 813, 825, 836, 839, 840, 842, 843, 847, 848, 849, 852, 855, 856, 857, 858, 883, 884, 902, 905, 920, 921, 927, 957, 980], "mtrand": 319, "_rand": 319, "85418642": 319, "79084103": 319, "13077794": 319, "11915045": 319, "56479934": 319, "70814003": 319, "25291366": 319, "55212743": 319, "18197458": 319, "37845099": 319, "snippet": [319, 337, 342, 345, 348, 358, 369, 370, 371, 921, 941, 954, 985], "mutat": [319, 980], "somewhat": [319, 325, 337, 339, 367, 369, 849, 852, 927, 946, 947], "debug": [319, 324, 338, 340, 343, 350, 352, 577, 846, 897, 951, 966, 980, 984], "govern": [319, 323, 326, 337, 350, 949, 955], "implic": 319, "rf_123": 319, "rf_inst": 319, "didn": [319, 350, 980, 981, 982, 983, 984, 985, 986, 987, 988], "strict": [319, 335, 350, 367, 453, 485, 538, 539, 541, 927, 972, 981, 984], "pervas": [319, 337], "throughout": [319, 350, 577, 747, 805, 806, 957, 975, 980], "codebas": [319, 337, 338, 339, 370, 972, 978], "84": [319, 334, 369, 370, 737, 760, 926, 931, 941, 962], "unlucki": 319, "lucki": 319, "fairer": 319, "temptat": [319, 337], "throughput": [322, 951, 968, 975], "switch": [322, 628, 654, 667, 686, 704, 706, 742, 788, 789, 883, 884, 931, 934, 968, 972], "offlin": [323, 337], "review": [323, 332, 339, 340, 341, 342, 343, 348, 351, 366, 367, 485, 491, 931, 941, 958], "bottleneck": [323, 343, 369, 398, 805, 806], "hurt": [323, 484, 980], "toolkit": [323, 951, 955], "branch": [323, 335, 337, 340, 341, 362, 369, 393, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 855, 856, 857, 858, 860, 934, 938, 947], "sklearn_assume_finit": 323, "assume_finit": [323, 324, 418, 845], "assert_all_finit": [323, 346, 418], "nm": 323, "csc": [323, 348, 350, 370, 501, 503, 504, 620, 642, 815, 817, 823, 828, 830, 832, 838, 863, 867, 868, 894, 906, 907, 909, 910, 911, 912, 934, 941, 980, 981, 983, 986], "32bit": [323, 896], "speedup": [323, 367, 369, 600, 604, 607, 972, 973, 974, 975, 987], "multithread": [323, 362, 847, 848, 849, 850, 851, 852, 853], "bla": [323, 324, 335, 338, 343, 972, 980, 981, 983, 984], "sparsity_ratio": 323, "gbt": 323, "speedi": 323, "packet": 323, "reuter": [323, 332], "carefulli": [323, 367], "spawn": [323, 348, 746, 760, 769, 770, 771, 983], "gil": [323, 324, 338, 899, 975, 980, 981, 984, 985], "ought": 323, "lapack": [323, 324, 335, 482, 485, 491, 638, 987], "dgemm": 323, "show_vers": [323, 335, 337, 345, 353, 980], "atla": [323, 335], "rebuild": [323, 356, 370, 393], "openbla": [323, 324, 335, 348, 899, 985], "mkl": [323, 324, 335, 348, 899, 972], "veclib": [323, 348], "osx": 323, "nouri": [323, 973, 975], "instruct": [323, 337, 338, 339, 340, 341, 342, 345, 348, 349, 453, 538, 539, 541, 957, 966, 972], "ubuntu": [323, 335, 343, 345], "1gb": 323, "mib": [323, 418, 845], "working_memori": [323, 324, 418, 730, 845, 980], "adher": [323, 339, 350, 878, 879, 972, 973], "pairwise_distances_chunk": [323, 727, 980, 983], "facilit": [323, 350, 356, 951, 952, 978, 981], "moment": [323, 367, 372, 391, 565, 573, 805, 806, 895, 935, 936], "000024": 323, "027400": 323, "mileag": 323, "deploi": [323, 352, 356, 952, 955], "upstream": [323, 337, 341, 345, 348, 941, 981], "lighter": [323, 652, 738], "threadpoolctl": [324, 335, 353, 355], "subsect": [324, 361], "worker": [324, 350, 370, 897, 898, 899, 987], "14228": 324, "loki": [324, 899, 931, 980, 983], "duplic": [324, 336, 337, 350, 362, 373, 395, 398, 399, 465, 585, 596, 597, 602, 603, 610, 611, 612, 613, 631, 634, 772, 819, 917, 934, 972, 975, 984, 986, 988], "memmap": [324, 332, 350, 367, 458, 484, 980], "1mb": [324, 977], "parallel_backend": [324, 373, 388, 395, 398, 400, 402, 407, 408, 411, 414, 417, 422, 481, 485, 486, 487, 489, 492, 493, 495, 496, 498, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 544, 552, 560, 582, 584, 589, 597, 601, 603, 605, 607, 608, 609, 611, 613, 615, 616, 618, 626, 629, 638, 639, 640, 641, 642, 643, 644, 723, 727, 730, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 790, 791, 794, 796, 798, 799, 801, 802, 807, 810, 842, 843, 980], "exclus": [324, 348, 367, 369, 577, 578, 580, 920, 927, 931, 932, 955, 979, 983], "omp_num_thread": 324, "my_script": 324, "algebra": [324, 335, 340, 348, 367, 370, 412, 814, 941], "bli": [324, 335, 348], "mkl_num_thread": 324, "openblas_num_thread": 324, "blis_num_thread": 324, "bash": [324, 345], "zsh": 324, "prompt": [324, 335, 337, 353, 355, 370, 957], "pypi": [324, 335, 337, 339, 341, 343, 353, 947, 980, 984, 986, 987], "channel": [324, 332, 335, 348, 370, 443, 444, 533, 534, 536, 537], "subscript": [324, 899, 985], "physic": [324, 455, 896, 927], "max_thread": [324, 338], "n_cpu": [324, 350], "lib": [324, 335, 353, 951], "_num_thread": 324, "singleton": [324, 754, 870, 985], "aforement": [324, 932], "global_random_se": 324, "fixtur": [324, 337], "ci": [324, 340, 341, 345, 933, 978, 980], "build_numb": 324, "disrupt": 324, "config": [324, 337, 338, 345, 576, 980], "contributor": [324, 340, 341, 342, 345, 348, 350, 931, 949, 952, 973, 974, 975], "encount": [324, 335, 356, 362, 369, 370, 446, 511, 512, 531, 783, 784, 785, 787, 821, 906, 941, 945, 951, 954, 955, 966, 980, 983], "unrel": [324, 342, 345, 370, 465], "watch": 324, "annoi": 324, "test_your_test_nam": 324, "skip": [324, 337, 339, 346, 370, 418, 518, 596, 597, 602, 610, 611, 612, 621, 631, 845, 966, 976, 979, 982, 984, 986], "global_dtyp": 324, "boundscheck": [324, 338], "segfault": [324, 338, 972, 980, 985], "posix": [324, 348], "pairwisedistancesreduct": 324, "adequ": [324, 343, 517, 957, 985], "drive": [325, 367, 368, 369, 499, 945, 955, 966], "passiveaggressiveregressor": [325, 927, 973, 976, 979, 980, 983, 985], "maxabsscal": [325, 812, 832, 921, 941, 977, 980, 981, 982, 983, 988], "routin": [325, 331, 334, 337, 338, 339, 340, 345, 348, 350, 371, 622, 624, 637, 649, 849, 850, 851, 852, 853, 928, 934, 941, 942, 945, 951, 955, 972, 986, 987, 988], "passiveaggress": [325, 370], "late": 325, "fledg": [325, 370], "exercis": [325, 326, 334, 337, 451, 452, 454, 455, 602, 603, 608, 746, 751, 770, 790, 852, 958, 975], "naivebay": 325, "dramat": 325, "welcom": [326, 336, 337, 345, 351, 952, 954], "roadmap": [326, 949], "persist": [326, 345, 348, 367, 560, 561, 804, 936, 951, 968, 978, 981], "miscellan": [326, 330, 331, 978, 979, 986, 987, 988], "craft": [326, 340], "curat": [326, 337, 340, 341], "conveni": [329, 345, 348, 363, 366, 370, 372, 377, 394, 397, 399, 401, 403, 414, 439, 561, 626, 628, 649, 677, 734, 807, 808, 905, 921, 923, 927, 928, 938, 955, 966, 972], "commun": [330, 336, 340, 342, 345, 350, 353, 362, 369, 488, 490, 497, 642, 660, 820, 921, 928, 934, 941, 945, 949, 951, 955, 980, 981], "fetcher": [330, 977, 979], "linnerrud": [330, 968], "breast": [330, 450, 968, 977], "cancer": [330, 450, 543, 544, 795, 968, 977], "covertyp": [330, 441, 968], "rcv1": [330, 447, 968, 977], "kddcup": [330, 442, 968], "svmlight": [330, 437, 458, 459, 951, 968, 972, 973, 979, 981], "jpeg": [331, 332, 443, 444], "publish": [331, 332, 339, 341, 345, 350, 943, 952, 984], "creativ": 331, "spare": [331, 624, 625], "pyplpt": 331, "load_svmlight_fil": [331, 972, 973, 978, 979, 980, 987], "test_dataset": 331, "everybodi": [331, 337], "upload": [331, 335, 341, 348, 621], "mice": [331, 577, 921], "brain": 331, "miceprotein": 331, "1080": [331, 362], "sc": [331, 362], "clara": [331, 984], "higuera": 331, "katheleen": 331, "gardin": 331, "krzysztof": 331, "cio": 331, "protein": [331, 951], "cite": [331, 362, 949], "kj": [331, 933], "critic": [331, 337, 349, 356, 369, 642, 928, 931, 939, 946, 955, 983], "syndrom": 331, "plo": [331, 557, 558], "ONE": [331, 557, 558], "e0129126": 331, "40966": 331, "upload_d": 331, "08t16": 331, "17928620": 331, "file_id": 331, "default_target_attribut": 331, "row_id_attribut": 331, "mouseid": 331, "ignore_attribut": 331, "genotyp": 331, "cc18": 331, "study_135": 331, "study_98": 331, "study_99": 331, "statu": [331, 341, 353, 446, 788, 789], "md5_checksum": 331, "3c479a6885bfa0438971388283a1ce32": 331, "websit": [331, 332, 334, 337, 351, 935, 945, 955, 966, 973, 974, 975], "4550": 331, "creator": [331, 334], "17t14": 331, "49": [331, 332, 334, 342, 362, 400, 407, 663, 675, 705, 713, 744, 746, 926, 931, 941, 975], "1804243": 331, "web": [331, 332, 334, 337, 340, 345, 362, 369, 370, 471, 840, 931, 941, 972], "pone": 331, "0129126": 331, "openml100": 331, "study_14": 331, "study_34": 331, "earliest": [331, 928], "iris_61": 331, "iris_969": 331, "969": 331, "iris_version_3": 331, "vanschoren": [331, 984], "rijn": [331, 980], "bischl": 331, "torgo": 331, "acm": [331, 332, 362, 373, 395, 400, 407, 410, 461, 513, 626, 675, 705, 794, 931, 934, 937, 943], "sigkdd": [331, 332, 461, 626, 943], "newslett": 331, "legaci": [331, 341, 350, 899, 972, 979, 984], "my": [331, 337, 342, 345, 446], "columnar": [331, 414, 951], "usabl": [331, 337, 339, 350, 356, 370, 746, 899, 972, 979, 986, 987], "io": [331, 334, 335, 337, 341, 343, 345, 350, 356, 642, 951, 970], "json": [331, 337, 353], "sql": 331, "smoothli": 331, "manipul": [331, 358, 457, 899, 951, 978], "mat": [331, 370], "load_fil": [331, 332, 966, 974, 986], "audio": [331, 453], "wish": [331, 337, 344, 346, 353, 362, 600, 601, 604, 605, 606, 614, 615, 884, 958, 966, 979], "imageio": 331, "wavfil": 331, "wav": 331, "hdf5": 331, "h5py": 331, "pytabl": 331, "april": [332, 614, 635, 636, 976, 984], "1992": [332, 334, 366, 369, 517, 518, 595, 927], "1994": [332, 334, 594], "AT": [332, 445], "laboratori": [332, 951], "cambridg": [332, 367, 540, 783, 787, 927, 929, 933], "facial": 332, "upright": 332, "frontal": 332, "movement": 332, "112": [332, 334, 974], "credit": [332, 345, 369, 927, 955], "18846": [332, 438, 439], "scikit_learn_data": [332, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449], "20news_hom": 332, "newsgroups_train": 332, "11314": 332, "1073": 332, "20new": [332, 966], "2034": 332, "34118": 332, "159": [332, 972], "01327": 332, "aren": [332, 341, 353, 361, 675, 705, 936, 982, 984], "newsgroups_test": 332, "vectors_test": 332, "class_prior": [332, 783, 784, 785, 787, 973, 976], "fit_prior": [332, 783, 784, 785, 787], "88213": 332, "suspici": 332, "show_top10": 332, "top10": 332, "nntp": [332, 966], "affili": 332, "abund": 332, "clue": [332, 345, 928], "bare": [332, 928, 966], "quotat": 332, "77310": 332, "76995": 332, "cleveland": 332, "indian": 332, "leagu": 332, "team": [332, 340, 348, 350, 949, 951, 955, 972], "ohio": 332, "spark": [332, 952], "death": 332, "georg": [332, 362, 978, 984, 985, 986, 987], "floyd": [332, 638, 928], "reckon": 332, "coloni": 332, "owner": [332, 334], "paul": [332, 975, 978, 979, 980, 981, 985, 986], "dolan": 332, "nicknam": 332, "tribe": 332, "theme": [332, 972], "mlb": [332, 819], "inappropri": [332, 366, 372, 659, 767], "nlp": [332, 367, 370, 783, 787, 929, 955], "cultur": 332, "inflammatori": 332, "famou": [332, 334, 946], "internet": [332, 342, 941, 964], "offici": [332, 339, 350, 353, 443, 447, 951, 966, 980, 981, 984], "verif": [332, 931, 955], "identif": [332, 337, 447, 920, 958], "viola": [332, 980], "opencv": 332, "detector": [332, 350, 794], "5749": [332, 443, 444], "13233": [332, 443, 444], "5828": [332, 443, 444], "200m": 332, "lfw_home": 332, "ariel": [332, 972, 978], "sharon": 332, "colin": [332, 978], "powel": 332, "donald": [332, 362, 674, 921], "rumsfeld": 332, "bush": 332, "gerhard": 332, "schroeder": 332, "hugo": [332, 978, 983, 984, 985, 986], "chavez": 332, "toni": [332, 513, 828, 937, 985, 986], "blair": 332, "rectangular": [332, 350, 884, 952], "1288": 332, "1850": 332, "37": [332, 369, 474, 666, 828, 972], "1140": 332, "fetch_lfw_pair": [332, 977, 987], "lfw_pairs_train": 332, "2200": [332, 443], "47": [332, 443, 444, 485, 491, 926], "subdivid": [332, 372], "10_fold": [332, 443], "gari": [332, 979], "huang": [332, 608, 978, 983], "manu": 332, "ramesh": [332, 955, 975, 978, 982], "tamara": 332, "berg": [332, 973, 974, 984], "erik": [332, 955, 975], "miller": [332, 980, 981, 985], "massachusett": 332, "amherst": 332, "30m": 332, "seven": [332, 924], "homepag": [332, 480, 947], "581012": [332, 441], "newswir": 332, "ltd": [332, 955], "804414": [332, 447], "47236": [332, 447], "fetch_rcv1": [332, 977, 981], "v2": [332, 447, 614, 635, 636, 927], "chronolog": [332, 447], "23149": [332, 447, 986], "781265": [332, 447], "lyrl2004": [332, 447], "2286": 332, "810596": 332, "2287": 332, "2288": 332, "uint32": [332, 447], "gmil": 332, "381327": 332, "ccat": 332, "e11": 332, "ecat": 332, "m11": 332, "656": 332, "lewi": [332, 979, 983], "yang": [332, 362, 367, 484, 589, 978, 979, 982, 984, 985, 986], "rose": 332, "361": [332, 369, 505, 506], "397": 332, "cup": [332, 931], "tcpdump": 332, "darpa": 332, "intrus": 332, "mit": [332, 343, 362, 372, 560, 561, 564, 569, 572, 593, 616, 617, 626, 785, 924], "lincoln": 332, "inject": [332, 369], "attack": 332, "unrealist": 332, "logged_in": 332, "resp": [332, 369, 547, 744, 745, 945, 980], "4898431": [332, 442], "41": [332, 334, 372, 419, 442, 481, 571, 574, 585, 608, 614, 635, 636, 730, 783, 933, 937], "976158": 332, "699691": 332, "619052": 332, "95373": 332, "kddcup99": [332, 442], "richard": [332, 371, 608, 973, 982, 984, 986, 987], "lippmann": 332, "joshua": [332, 974, 975, 977, 978, 984, 987], "hain": 332, "jonathan": [332, 976, 978, 979, 980, 981, 982, 984, 985, 988], "korba": 332, "da": [332, 987, 988], "yamanishi": 332, "takeuchi": 332, "william": [332, 334, 372, 560, 561, 564, 569, 572, 589, 931, 935, 979, 980, 981, 982, 987, 988], "miln": 332, "discount": [332, 362, 675, 705, 979, 982], "sixth": 332, "320": [332, 920, 945, 972], "press": [332, 362, 367, 372, 373, 395, 540, 560, 561, 564, 569, 572, 593, 783, 787, 924, 927, 929, 933], "household": 332, "statlib": 332, "dcc": 332, "ltorgo": 332, "cal_hous": 332, "1990": 332, "censu": 332, "bureau": 332, "resid": 332, "vacat": 332, "pace": 332, "kellei": [332, 974, 975], "ronald": [332, 935, 975, 985], "barri": [332, 980], "autoregress": 332, "291": [332, 334], "297": 332, "hyperspher": [333, 951], "interleav": [333, 472], "simplif": [333, 336, 342, 972, 978], "realiti": 333, "make_sparse_uncorrel": 333, "make_friedman1": [333, 369, 489, 493, 543, 544, 582], "make_friedman2": [333, 561, 563, 564, 565, 566, 567, 571, 574, 575], "reciproc": [333, 931], "make_friedman3": 333, "7826": 334, "4194": 334, "9490": 334, "9565": 334, "fisher": [334, 369, 454, 586, 951], "donor": 334, "michael": [334, 362, 400, 578, 587, 641, 744, 921, 927, 955, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 983, 984, 986, 987], "marshal": 334, "arc": [334, 369], "nasa": 334, "juli": [334, 371, 683, 975, 979, 980, 981], "1988": 334, "sir": 334, "referenc": [334, 339, 340, 345, 350, 839, 840, 934, 979, 985], "duda": [334, 925], "hart": [334, 925, 980], "taxonom": 334, "annual": [334, 362, 675, 705, 844, 931, 944], "eugen": [334, 973, 978], "179": [334, 343, 369, 972], "188": [334, 343, 534], "1936": 334, "john": [334, 370, 486, 658, 684, 718, 823, 849, 850, 852, 853, 921, 927, 931, 972, 973, 974, 975, 977, 978, 979, 980, 981, 985, 987, 988], "wilei": [334, 921], "1950": [334, 931], "1973": 334, "scene": [334, 934, 936, 985], "q327": 334, "d83": 334, "son": [334, 921], "isbn": [334, 362, 927], "471": 334, "22361": 334, "218": [334, 421, 665, 735], "dasarathi": 334, "1980": 334, "nose": [334, 975, 979], "pami": [334, 362, 674], "71": [334, 460, 679, 931, 964, 974], "gate": [334, 985], "1972": 334, "431": 334, "433": 334, "mlc": 334, "cheeseman": 334, "autoclass": 334, "conceptu": [334, 369, 929], "pressur": [334, 964], "serum": 334, "tc": [334, 351], "cholesterol": 334, "ldl": 334, "lipoprotein": 334, "hdl": 334, "s4": 334, "tch": 334, "s5": [334, 939], "ltg": [334, 451], "triglycerid": 334, "s6": 334, "glu": 334, "sugar": 334, "www4": 334, "ncsu": 334, "boo": 334, "bradlei": [334, 927], "efron": [334, 632, 633, 927], "iain": [334, 927], "johnston": [334, 927, 981], "407": 334, "499": [334, 343], "stanford": [334, 599, 632, 633, 783, 786, 787, 840, 929], "leastangle_2002": 334, "alpaydin": 334, "boun": 334, "nist": [334, 931], "bitmap": 334, "preprint": 334, "32x32": 334, "nonoverlap": 334, "4x4": [334, 367, 370], "garri": 334, "candela": 334, "dimmick": 334, "geist": 334, "grother": 334, "janet": 334, "handprint": 334, "nistir": 334, "5469": 334, "kaynak": 334, "msc": 334, "graduat": 334, "bogazici": 334, "cascad": 334, "kybernetika": 334, "ken": [334, 966, 974, 981], "tang": [334, 982, 983, 984], "ponnuthurai": 334, "suganthan": 334, "yao": [334, 978, 979, 980, 981], "kai": [334, 513, 937, 979], "dimensionalityreduct": 334, "school": [334, 362, 737, 931], "nanyang": 334, "technolog": 334, "claudio": [334, 986, 987], "gentil": [334, 984], "linnerud": [334, 455], "men": 334, "club": 334, "waist": 334, "puls": 334, "chin": [334, 976], "situp": 334, "tenenhau": 334, "pratiqu": 334, "178": [334, 343, 460, 792], "alcalin": 334, "magnesium": 334, "phenol": 334, "nonflavanoid": 334, "proanthocyanin": 334, "od280": 334, "od315": 334, "dilut": 334, "class_2": [334, 460], "74": [334, 540, 746, 760, 827], "162": 334, "63": [334, 369, 507, 508, 515, 516, 675, 746, 760, 857, 858, 931], "59": [334, 343, 363, 460, 931, 972], "57": [334, 335, 353, 354, 355, 363, 655, 730, 781, 931, 941, 972], "278": [334, 788, 789], "1680": 334, "746": 334, "chemic": 334, "grown": [334, 369, 503, 504, 505, 506, 507, 508, 514, 515, 855, 856, 857, 858, 947], "itali": 334, "cultiv": 334, "thirteen": 334, "constitu": 334, "forina": 334, "parvu": 334, "pharmaceut": 334, "food": 334, "technologi": [334, 362, 951, 955], "brigata": 334, "salerno": 334, "16147": 334, "genoa": 334, "lichman": 334, "irvin": 334, "ca": [334, 362, 393, 855, 856, 943, 947], "aeberhard": 334, "cooman": 334, "vel": 334, "rep": [334, 951], "dept": 334, "cook": [334, 972, 978], "north": [334, 362], "queensland": 334, "submit": [334, 335, 336, 339, 340, 341, 342, 345, 350, 351], "technometr": [334, 364, 419, 424, 937], "rda": 334, "1nn": 334, "THE": 334, "OF": 334, "chemometr": 334, "perimet": 334, "textur": [334, 707, 708, 929], "concav": 334, "symmetri": [334, 649, 821, 824, 835, 929], "fractal": 334, "malign": [334, 450], "benign": [334, 450], "981": [334, 931], "143": [334, 421, 422, 943, 972, 973], "2501": 334, "053": [334, 343], "163": [334, 939], "019": [334, 343, 421], "345": 334, "427": [334, 456, 457, 533, 534], "106": [334, 824, 925, 973], "097": 334, "873": 334, "885": 334, "802": 334, "542": 334, "031": 334, "135": 334, "396": [334, 966], "008": [334, 343], "079": 334, "185": [334, 343, 805, 806], "4254": 334, "071": [334, 388], "027": 334, "058": 334, "156": 334, "664": 334, "055": [334, 931], "357": [334, 450, 848], "wolberg": 334, "nick": [334, 972, 978, 979, 980, 981], "olvi": 334, "mangasarian": 334, "goo": [334, 450], "gl": [334, 450], "u2uwz2": [334, 450], "needl": 334, "aspir": [334, 337], "fna": 334, "nuclei": 334, "multisurfac": 334, "msm": 334, "bennett": [334, 931], "midwest": 334, "cognit": 334, "societi": [334, 362, 364, 419, 424, 491, 577, 824, 835, 927, 945], "101": [334, 794, 973], "insepar": 334, "uw": [334, 984], "ftp": [334, 632, 633], "wisc": [334, 842], "prog": 334, "cpo": 334, "nuclear": 334, "tumor": 334, "spie": 334, "1993": [334, 424, 614, 635, 636, 947], "symposium": [334, 362, 410], "1905": 334, "861": [334, 737, 738, 931], "870": 334, "san": [334, 370, 943], "jose": [334, 608, 931, 980, 982], "prognosi": 334, "570": [334, 964], "577": 334, "august": [334, 362, 461, 484, 946, 972, 974, 975, 979, 986], "171": [334, 343, 737, 931], "961": [335, 353, 354, 355, 805], "wheel": [335, 337, 341, 353, 982, 984, 986], "quickest": 335, "registri": [335, 353], "uninstal": 335, "git": [335, 339, 341, 343, 345, 954, 972], "fork": [335, 337, 341, 345, 348], "miniforge3": [335, 345], "miniforg": [335, 345, 353], "env": [335, 345, 353], "virtualenv": [335, 337], "python3": [335, 353], "venv": [335, 353], "dev0": [335, 341, 954], "flag": [335, 337, 338, 340, 414, 560, 561, 577, 623, 625, 677, 734, 946, 978, 982, 983, 985, 986, 987], "pyx": [335, 337, 338, 343, 345], "pxd": [335, 337], "sklearn_fail_no_openmp": 335, "checkout": [335, 337, 341, 345], "cumbersom": 335, "reinstal": [335, 353], "setuptool": 335, "unix": [335, 370], "makefil": 335, "studio": [335, 955], "vs_buildtool": 335, "ex": [335, 338, 353, 976, 977], "desktop": 335, "screenshot": 335, "secondli": [335, 337, 348, 362, 369, 607, 927, 966], "architectur": [335, 339, 345, 348, 356, 418, 845, 935, 949, 955, 972], "cmd": 335, "powershel": 335, "struct": [335, 350, 975], "calcsiz": 335, "distutils_use_sdk": 335, "x86": 335, "buildtool": 335, "vc": 335, "vcvarsal": 335, "bat": 335, "x64": 335, "clang": [335, 338], "confusingli": 335, "usr": 335, "gcc": [335, 338, 343, 348], "libomp": [335, 984], "silicon": [335, 949], "m1": [335, 949], "januari": [335, 337, 353, 972, 973, 982, 984, 987], "arm64": [335, 337, 340, 353], "llvm": 335, "toolchain": 335, "xcode": 335, "conflict": [335, 337, 341, 345, 353, 979, 980], "condarc": 335, "channel_prior": 335, "reactiv": [335, 343], "echo": [335, 341], "cxx": 335, "cflag": 335, "cxxflag": 335, "ldflag": 335, "subfold": [335, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 453, 985], "fopenmp": [335, 338], "export": [335, 338, 339, 356, 859, 860, 947, 951, 954, 981], "cppflag": 335, "xpreprocessor": 335, "wl": 335, "rpath": 335, "lomp": 335, "sudo": [335, 353], "apt": [335, 345, 353], "pip3": 335, "pythonx": 335, "site": [335, 337, 340, 345, 353, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 955, 980], "precompil": 335, "arm": [335, 345, 920], "cython3": 335, "cento": 335, "yum": 335, "devel": 335, "gnu": 335, "port": [335, 353, 982], "pkg": 335, "build_ext": [335, 343], "lt": [335, 337], "build_clib": 335, "linker": [335, 338], "sysconfig": 335, "counterpart": [335, 920, 928, 946, 961], "get_config_var": 335, "sklearn_build_parallel": 335, "tracker": [336, 340, 345, 348, 351, 356, 949, 952], "prioriti": [336, 582, 776, 777, 952, 975], "guidelin": [336, 340, 342, 343, 345, 361, 362, 369], "reformul": 336, "xyz": 336, "someestim": 336, "glanc": 336, "relabel": [336, 764, 765, 844], "stall": [336, 340], "sprint": [336, 337, 949, 972], "unfinish": [336, 337], "supersed": [336, 977], "overflow": [336, 345, 348, 975, 979, 980, 981, 982, 983, 985], "submitt": 336, "strive": [336, 351, 955], "poster": [336, 337, 965], "expertis": [336, 337, 348], "unclear": [336, 337, 451], "pleasant": [336, 955], "chime": 336, "permiss": [336, 341, 351, 353, 955, 987], "matthew": [336, 342, 486, 692, 972, 975, 979, 981, 985, 986], "rocklin": [336, 342], "acknowledg": [336, 559], "struggl": 336, "everyon": [337, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "underrepres": 337, "merit": [337, 341, 351], "teach": 337, "priceless": 337, "abid": 337, "codeofconduct": 337, "hesit": 337, "ticket": 337, "typo": [337, 351, 972], "send": [337, 362, 374, 483], "valuabl": [337, 921, 955], "burden": [337, 820, 952], "slep": [337, 350, 949], "templat": [337, 341, 342, 350, 351, 507, 508, 513, 514, 515, 516, 951], "ecosystem": [337, 921, 950, 955], "contrib": [337, 339, 345, 348, 350, 951, 952], "numpydoc": [337, 350, 353, 355], "compli": [337, 350, 878, 952], "fulfil": [337, 362, 369, 746, 749, 750, 760, 808, 812, 927], "anyon": [337, 351, 955], "gist": [337, 345, 954], "repo": [337, 341, 952], "feasibl": [337, 817, 818, 828], "traceback": [337, 342, 345, 348, 418, 931, 954], "doubt": [337, 338, 341, 927, 937, 951], "companion": [337, 941], "transcript": 337, "inclus": [337, 339, 345, 400, 406, 703, 735, 931, 932, 972, 986], "yourlogin": 337, "flake8": [337, 353, 355, 529], "mypi": [337, 341, 353, 355, 983], "synchron": [337, 370], "my_featur": 337, "commit": [337, 341, 345, 351, 954, 972, 973, 974, 975], "modified_fil": 337, "committ": [337, 972], "modif": [337, 365, 369, 370, 944], "approv": [337, 351, 369], "mrg": [337, 345], "incomplet": [337, 353, 362, 655, 742, 921, 928, 966, 976, 978], "wip": [337, 345, 353], "matur": [337, 951, 952], "broad": [337, 350, 951], "collabor": 337, "_logist": 337, "doctest": [337, 350, 958, 972], "test_logist": [337, 345], "rst": [337, 341, 345, 966, 972, 977], "test_common": [337, 345], "caught": [337, 345, 356], "editor": [337, 345, 348], "submodul": [337, 341, 343, 361, 923, 929, 972], "intricaci": 337, "narr": [337, 350, 608, 847, 852, 972, 973], "unittest": 337, "tests_for_packag": 337, "static": [337, 339, 343, 345, 596, 597, 602, 603, 610, 611, 612, 613], "workaround": [337, 746, 760], "astropi": 337, "linux": [337, 339, 340, 345, 951, 972], "circleci": 337, "lint": [337, 345], "aarch64": [337, 345, 353], "gh": 337, "nogil": [337, 338], "cpython": [337, 338, 343, 987], "sklearn_run_float32_test": 337, "lengthi": [337, 348], "etiquett": 337, "she": [337, 837, 838, 982], "he": [337, 675, 705, 805, 806, 837, 838, 931, 966, 979, 986, 987], "shorten": [337, 946, 985], "leader": [337, 955], "grab": 337, "familiar": [337, 368, 980], "acquaint": 337, "experienc": 337, "abandon": 337, "someon": [337, 341, 350, 972], "glad": 337, "restructuredtext": 337, "_build": 337, "viewabl": 337, "pillow": [337, 353, 355], "sphinxext": [337, 353, 355], "opengraph": [337, 353, 355], "vast": 337, "examples_pattern": 337, "your_regex_goes_her": 337, "no_mathjax": 337, "latexpdf": 337, "elabor": [337, 932], "paragraph": [337, 370, 453, 966], "hood": [337, 927, 946], "colon": 337, "selectfpr": [337, 371, 542, 545, 548, 549, 550, 556, 988], "some_param": 337, "hello": [337, 345, 891], "goodby": 337, "liter": [337, 341, 955], "array_paramet": 337, "list_param": 337, "typed_ndarrai": 337, "multioutput_arrai": 337, "bracket": [337, 927], "delimit": [337, 937, 987], "unwritten": 337, "bibliograph": 337, "arxiv": [337, 412], "backtick": [337, 342], "nowadai": 337, "syntax": [337, 342, 345, 363, 920, 957, 983, 985], "_my": 337, "ref": [337, 344, 345, 921, 978], "currentmodul": 337, "succeed": 337, "stone": [337, 855, 856, 947], "subdirectori": 337, "subpackag": [337, 341, 949, 976, 981], "cleanup": [337, 972], "charg": 337, "test_requiring_mpl_fixtur": 337, "hang": [337, 954, 982, 983], "fruit": [337, 932], "asv": 337, "asv_benchmark": 337, "airspe": 337, "veloc": 337, "publicli": [337, 982], "zero_on": [337, 973], "futurewarn": [337, 345, 979, 980, 981, 983, 985, 988], "example_funct": 337, "exampleestim": 337, "_n_cluster": 337, "versionchang": 337, "meet": [337, 348, 351, 371, 522, 553, 805, 806, 844, 931, 944, 955, 980, 981, 982], "nit": 337, "retract": 337, "grammar": 337, "disambigu": [337, 776, 844, 944, 987], "immedi": [337, 348, 746, 760, 769, 770, 771, 980], "Will": [337, 447, 484, 577, 594, 595, 596, 602, 606, 607, 610, 611, 612, 613, 614, 615, 623, 625, 657, 664, 737, 813, 817, 821, 828, 975, 976, 978, 980], "clariti": [337, 345], "unhelp": 337, "extran": 337, "rewritten": [337, 599, 974, 976], "generos": 337, "reward": 337, "heard": 337, "ve": [337, 370, 954, 955, 966, 979], "enemi": 337, "courtesi": 337, "justifi": [337, 343, 360, 515], "occas": 337, "deserv": [337, 343], "digest": [337, 987], "overwhelm": 337, "sheer": [337, 955], "myself": 337, "trickiest": 337, "buri": 337, "inherit": [337, 339, 349, 350, 527, 626, 876, 878, 927, 972, 977, 978, 979, 980, 982, 983, 984, 987, 988], "mixin": [337, 350, 377, 378, 379, 380, 381, 382, 383, 384, 551, 878, 974, 983, 987], "classifiermixin": [337, 339, 350, 366, 983], "grep": 337, "delai": [337, 446, 746, 760, 769, 770, 771, 899, 986, 987], "some_funct": [337, 874], "some_iter": 337, "flavor": [337, 934], "pointer": [337, 345, 393, 981], "mandatori": [337, 370], "favorit": [337, 348, 955], "Being": [337, 351, 356, 927, 934], "killer": [337, 955], "blame": 337, "migrat": [337, 972], "ignorerevsfil": 337, "rev": [337, 557, 558], "ruin": 337, "maco": [338, 340, 353, 980, 984, 986], "sklearn_enable_debug_cython_direct": 338, "scratch": [338, 393, 931, 974], "magic": [338, 343, 372, 566, 571, 574], "gdb": [338, 340, 954], "entrypoint_to_bug_reproduc": 338, "cdef": 338, "state_to_print": 338, "test_val": 338, "unifi": [338, 346, 348, 349, 369, 587, 951, 972], "fuse": [338, 978, 988], "ongo": [338, 351], "concret": [338, 351, 371, 618, 624, 625, 626, 627, 839, 840, 927, 945], "alia": [338, 341, 345, 350, 567, 905, 920, 937, 952, 972, 986], "shell": [338, 345, 348, 957, 966], "cythonx": 338, "language_level": 338, "wraparound": 338, "initializedcheck": 338, "nonecheck": 338, "cdivis": 338, "recompil": [338, 343, 353], "pep073": 338, "pathwai": 338, "memoryview": 338, "cnp": 338, "lightweight": [338, 746, 760, 769, 770, 771, 951], "virtual": [338, 353, 366, 955], "enter": [338, 341, 362, 393, 938], "prang": 338, "void": 338, "my_func": [338, 343], "st\u00e9fan": 338, "benhel": 338, "_cython_bla": 338, "protect": [338, 341, 897], "_openmp_help": 338, "cimport": [338, 346, 980], "omp_get_max_thread": 338, "prolifer": 339, "adopt": [339, 350, 843, 931, 945, 980, 987], "predomin": [339, 973], "overrid": [339, 370, 400, 407, 492, 498, 538, 539, 541, 543, 544, 547, 606, 614, 635, 636, 790, 791, 792, 794, 796, 798, 799, 800, 972, 980, 982, 986, 988], "creation": [339, 461, 462, 463, 465, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 606, 788, 789, 955, 979, 980, 981, 985], "optimis": [339, 362, 934, 951, 975, 985, 987], "rememb": [339, 342, 353, 370, 934, 938, 947], "param1": [339, 963], "param2": [339, 963], "param3": 339, "postpon": [339, 341], "requisit": 339, "liner": [339, 774], "ipython": [339, 342, 343, 345, 958, 966], "session": [339, 343, 348, 353, 950, 955, 966], "trainabl": 339, "trail": [339, 915], "overridden": [339, 350, 372, 492, 498, 566, 571, 574, 644, 980, 981], "n_features_in_": [339, 350, 382, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 561, 577, 578, 579, 580, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 744, 745, 746, 749, 750, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 983, 985, 987], "slep010": [339, 983], "duck": [339, 350, 982], "boilerpl": [339, 955, 966], "check_x_i": [339, 346, 976, 980, 981, 986], "check_arrai": [339, 346, 484, 976, 980, 981, 982, 983, 984, 985, 986, 987], "templateclassifi": 339, "demo_param": 339, "myestim": 339, "subestim": 339, "my_extra_param": 339, "my_estim": [339, 363], "subestimator__c": 339, "subestimator__class_weight": 339, "subestimator__du": 339, "subestimator__fit_intercept": 339, "subestimator__intercept_sc": 339, "subestimator__l1_ratio": 339, "subestimator__max_it": 339, "subestimator__multi_class": 339, "subestimator__n_job": 339, "subestimator__penalti": 339, "subestimator__random_st": 339, "subestimator__solv": 339, "subestimator__tol": 339, "subestimator__verbos": 339, "subestimator__warm_start": 339, "__c": 339, "__class_weight": 339, "unpack": 339, "easiest": [339, 345, 363, 928], "__repr__": [339, 952, 981], "setattr": 339, "accomplish": [339, 496, 928, 932, 934, 955], "deepcopi": 339, "__sklearn_clone__": [339, 385, 988], "frozen": 339, "frozentransform": 339, "fitted_transform": [339, 414], "__getattr__": 339, "_estimator_typ": [339, 350, 977], "regressormixin": [339, 350, 415, 983], "clustermixin": 339, "is_classifi": [339, 350], "predict_log_proba": [339, 350, 499, 500, 501, 503, 505, 507, 509, 514, 543, 544, 608, 609, 626, 746, 749, 750, 760, 769, 783, 784, 785, 786, 787, 805, 808, 844, 849, 852, 855, 857, 946, 972, 985], "_base": 339, "programmat": [339, 449, 981], "_get_tag": [339, 983], "allow_nan": [339, 866, 868, 988], "binary_onli": [339, 982, 983], "multioutput_onli": 339, "no_valid": 339, "non_determinist": [339, 986], "primari": [339, 350, 367, 465, 938, 955], "_safe_split": 339, "preserves_dtyp": 339, "poor_scor": 339, "requires_fit": 339, "requires_positive_x": [339, 982, 987], "requires_i": [339, 983], "requires_positive_i": 339, "_skip_test": 339, "_xfail_check": 339, "check_nam": 339, "xfail": [339, 345], "skiptestwarn": 339, "x_type": 339, "2darrai": 339, "signifi": [339, 362, 531, 757, 936], "1dlabel": 339, "2dlabel": 339, "_more_tag": 339, "mymultioutputestim": 339, "_required_paramet": 339, "base_estim": [339, 360, 388, 503, 504, 505, 506, 621, 779, 782, 844, 920, 927, 983, 985, 986, 987], "ridgeregress": 339, "idiosyncrat": 339, "subclass": [339, 372, 524, 897, 977, 980, 985], "onetoonefeaturemixin": [339, 384], "classnameprefixfeaturesoutmixin": [339, 384, 987], "auto_wrap_output_kei": 339, "mytransform": 339, "__init_subclass__": 339, "ownership": 339, "pep8": [339, 341, 345], "indent": [339, 897], "nsampl": [339, 744, 745], "statement": [339, 342, 345, 348, 350, 367, 949, 966], "flow": 339, "client": 339, "corollari": 339, "foo": [339, 531, 935], "baz": [339, 531], "pyflak": 339, "asanyarrai": 339, "hadamard": 339, "choose_random_sampl": 339, "freestand": 339, "unmodifi": [339, 350], "random_state_": [339, 486, 577, 797, 986], "gaussiannois": 339, "showcas": 339, "quasi": [339, 805, 806, 927], "assert_allclos": 339, "rtol": [339, 788, 789, 793], "atol": [339, 788, 789, 793], "checklist": 340, "unclaim": 340, "workflow": [340, 341, 349, 366], "boil": [340, 364], "markdown": 340, "saniti": [340, 812, 931, 972, 973], "outdat": 340, "diff": [340, 931], "valgrind": 340, "platform": [340, 348, 350, 356, 955, 977, 980, 981, 983, 985, 986], "x86_64": 340, "yep": 340, "gperftool": 340, "debugg": [340, 345], "gprof": 340, "callgrind": 340, "kcachegrind": 340, "warm": [340, 350, 481, 487, 493, 495, 496, 560, 603, 609, 616, 618, 626, 627, 628, 927, 952, 982, 984, 986], "homebrew": [340, 353], "freebsd": 340, "rrrcn": 341, "pep101": 341, "build_tool": 341, "blocker": 341, "mileston": 341, "maint_tool": 341, "sort_whats_new": 341, "whats_miss": 341, "fixm": [341, 350], "feedstock": 341, "recip": [341, 928, 955], "yaml": 341, "whats_new": [341, 345], "v0": [341, 421, 422, 428, 462, 538, 539, 541, 746, 760, 807, 810, 973, 980, 981, 982], "freez": [341, 353, 356, 952, 955, 980], "afterward": [341, 485, 491, 772], "0rc1": 341, "__version__": 341, "draft": [341, 351], "rebas": 341, "bugfix": [341, 972, 986], "backport": [341, 346, 979], "maint": 341, "enh": 341, "blindli": 341, "invit": 341, "cherri": 341, "shortlog": 341, "f2": [341, 932], "sed": [341, 972], "front": [341, 979], "rc1": 341, "suffix": [341, 771, 931, 982], "brows": 341, "3a": 341, "22wheel": 341, "pyproject": 341, "toml": 341, "oldest": [341, 446], "abi": 341, "acronym": 341, "deliveri": 341, "whl": 341, "22publish": 341, "went": [341, 931], "bot": [341, 936, 986], "sync": 341, "testpypi": 341, "tarbal": [341, 987], "wheelhouse_upload": 341, "twine": 341, "rrr": 341, "symlink": 341, "latestst": 341, "tmp": 341, "ln": [341, 927, 935, 941], "versionwarn": 341, "secur": [341, 350, 951, 952, 955, 968], "twitter": 341, "linkedin": 341, "squash": [341, 372, 481, 487, 492, 498], "authorship": 341, "permalink": 341, "_hist_gradient_boost": 341, "_iter": 341, "pickl": [341, 350, 356, 370, 538, 539, 541, 788, 789, 951, 952, 974, 977, 978, 979, 980, 981, 982, 985, 986, 987, 988], "checker": [341, 768], "type_check": 341, "test_enable_hist_gradient_boost": 341, "enable_hist_gradient_boost": [341, 981], "enable_my_experimental_featur": 341, "indefinit": 341, "incentiv": 341, "workabl": 342, "stackoverflow": [342, 345, 348, 954], "blogpost": 342, "mcve": [342, 345, 348], "my_data": 342, "with_mean": [342, 828, 838, 941, 980, 985], "default_scor": 342, "other_scor": 342, "72": [342, 772], "scrollbar": 342, "tripl": 342, "fenc": 342, "qualifi": 342, "a674e682c281": 342, "lda_featur": 342, "lda_model": 342, "n_topic": [342, 486, 979], "minimalist": [342, 370, 954], "continuous_featur": 342, "positive_featur": 342, "invest": [343, 955], "idiom": 343, "wast": [343, 366, 367, 920], "crunch": 343, "performancetip": 343, "reimplement": [343, 350, 978, 982], "spottabl": 343, "amen": [343, 372, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 920], "cpp": 343, "engag": [343, 351], "tent": 343, "somewher": [343, 931, 966], "prun": 343, "14496": [343, 981], "682": 343, "ncall": 343, "tottim": 343, "percal": 343, "cumtim": 343, "lineno": 343, "609": 343, "017": [343, 421, 422], "042": 343, "151": [343, 369, 943], "_nls_subproblem": 343, "1263": 343, "157": 343, "_po": 343, "681": 343, "673": 343, "057": [343, 487], "006": 343, "047": 343, "_initialize_nmf": 343, "010": [343, 939], "_spars": 343, "_neg": 343, "337": 343, "461": 343, "hotspot": 343, "16159": [343, 983], "840": 343, "2833": 343, "653": [343, 561, 564, 575], "_dotbla": 343, "651": 343, "014": 343, "636": 343, "036": [343, 422], "1397": 343, "2780": 343, "167": [343, 972], "064": [343, 939], "1542": 343, "043": 343, "2734": 343, "181": 343, "fromnumer": 343, "1185": 343, "lapack_lit": 343, "dgesdd": 343, "748": 343, "009": 343, "065": 343, "rewrit": [343, 947, 965, 972], "shallow": [343, 369, 511, 512, 862], "4x": [343, 987], "line_profil": 343, "wire": [343, 484, 491], "profile_default": 343, "ipython_config": 343, "terminalipythonapp": 343, "interactiveshellapp": 343, "lprun": 343, "qtconsol": 343, "_nmf": 343, "137": [343, 973], "73153": 343, "h_init": 343, "138": [343, 369, 372, 931], "5863": 343, "172": [343, 443, 444, 599, 927], "nl": 343, "173": [343, 534], "175": [343, 941], "112141": 343, "2336": 343, "wtv": 343, "176": [343, 781, 932, 939], "16144": 343, "336": [343, 941], "wtw": 343, "177": 343, "113": [343, 975], "638": 343, "1880": 343, "182": [343, 369], "195133": 343, "305": 343, "grad": [343, 955], "495761": 343, "777": 343, "proj_gradi": 343, "184": [343, 964], "2449": 343, "130": 343, "186": [343, 737, 931], "187": [343, 534, 932, 964, 974], "1474": 343, "4474": 343, "inner_it": 343, "83833": 343, "hn": 343, "189": [343, 844, 944], "194239": 343, "191": [343, 932], "48858": 343, "150407": 343, "102": [343, 964, 974], "gradd": 343, "193": [343, 369, 665, 735, 944], "515390": 343, "349": 343, "dqd": 343, "pin": 343, "memory_profil": [343, 353, 355], "memit": 343, "mprun": 343, "166": [343, 931, 972], "152": 343, "1e7": 343, "402344": 343, "standalon": [343, 608, 847, 954], "bianp": 343, "conda_prefix": 343, "pydebug": 343, "extra_cflag": 343, "dpy_debug": 343, "num_cor": 343, "dbg": 343, "fortun": [343, 369, 966, 985, 986], "my_fil": 343, "callgrin": 343, "prof": 343, "encapsul": [344, 363], "artist": [344, 389, 582, 648, 650, 651, 652, 752, 861], "classmethod": [344, 389, 581, 582, 647, 648, 650, 651, 652, 752], "line_": [344, 389, 648, 650, 651, 652, 752], "gridspecfromsubplotspec": 344, "subplot_spec": 344, "get_subplotspec": 344, "ax_top_left": 344, "ax_top_right": 344, "ax_bottom": 344, "bounding_ax_": [344, 582], "lines_": [344, 582, 752], "contours_": [344, 582], "advic": [345, 372, 572, 573], "forth": 345, "userscript": 345, "tampermonkei": 345, "greasemonkei": 345, "shortcut": [345, 372], "pr_number": 345, "navig": [345, 974], "overlai": [345, 582], "codecov": 345, "test_sparsifi": 345, "pdb": 345, "ipdb": [345, 966], "pdbcl": 345, "terminalpdb": 345, "lf": 345, "ff": 345, "tb": [345, 521, 522, 523, 524, 525, 526, 527, 528], "runxfail": 345, "werror": 345, "mailman": 345, "listinfo": 345, "crowd": [345, 351, 928, 952, 954], "imped": 345, "attent": [345, 557, 558, 945], "pytb": 345, "stdin": [345, 966], "perman": 345, "25163598": 345, "issuenumb": 345, "1506": 345, "volunt": 345, "establish": [345, 348, 351, 921], "clarifi": [345, 351, 740], "believ": [345, 348, 955], "regression_test": 345, "0008": 345, "patienc": [345, 350], "manifest": [345, 928, 934], "fault": [345, 980, 982, 984], "glibc": 345, "uniniti": 345, "trace": [345, 362, 375, 423, 425, 426, 429, 430, 431, 639, 643, 928, 983], "supp": 345, "readm": [345, 370, 443], "my_test_script": 345, "mobil": 345, "deploy": [345, 951, 952, 955], "scalewai": 345, "aw": 345, "graviton": 345, "laptop": [345, 418, 845, 986, 987, 988], "workstat": 345, "qemu": 345, "docker": [345, 356, 985, 986], "multiarch": 345, "ppc64le": 345, "filesystem": [345, 353, 985], "pushd": 345, "wget": 345, "arm64v8": 345, "mount": 345, "privileg": 345, "ye": [345, 350, 815, 831, 927], "pwd": 345, "reinit": 345, "bashrc": 345, "ephemer": 345, "evolv": [346, 987], "as_float_arrai": 346, "column_or_1d": [346, 983, 987], "multitarget": 346, "multi_output": [346, 867], "safe_index": [346, 982], "check_memori": [346, 350, 979], "5488135": 346, "71518937": 346, "60276338": 346, "54488318": 346, "has_fit_paramet": 346, "randomized_range_find": [346, 973, 978], "arrayfunc": 346, "cholesky_delet": 346, "min_po": 346, "least_angl": 346, "fast_logdet": 346, "safe_sparse_dot": [346, 982], "weighted_mod": 346, "sample_without_replac": [346, 978], "n_popul": [346, 900], "sparsefunc": [346, 985], "mean_variance_axi": [346, 978, 985], "sparsefuncs_fast": 346, "inplace_csr_row_normalize_l1": 346, "inplace_csr_row_normalize_l2": 346, "inplace_csr_column_scal": 346, "sort_graph_by_row_valu": [346, 987], "single_source_shortest_path_length": 346, "dijkstra": [346, 638, 928], "graph_shortest_path": [346, 985], "all_estim": [346, 982, 983, 987], "all_displai": [346, 987], "all_funct": [346, 987], "is_multilabel": 346, "dict_learn": [346, 481, 487, 496, 973, 980, 982, 985, 986, 988], "gen_batch": [346, 888], "safe_mask": 346, "safe_sqr": 346, "murmurhash3_32": 346, "murmurhash3_x86_32": [346, 896], "cryptograph": 346, "lookup": [346, 896, 981], "bloom": [346, 896], "384616559": 346, "3910350737": 346, "murmurhash": 346, "graphical_lasso": [346, 421, 422, 980], "kit": 348, "toolbox": [348, 951, 955], "multilay": [348, 929], "kera": [348, 951], "forese": 348, "redesign": [348, 972], "pystruct": [348, 951], "ssvm": 348, "seqlearn": 348, "4143": 348, "meanwhil": [348, 946], "pipegraph": 348, "squared_loss": [348, 985], "undertak": 348, "discourag": [348, 353, 639], "slowli": [348, 350, 494, 884], "ordinarili": [348, 350], "corrobor": 348, "proof": [348, 369, 841, 943], "happi": [348, 351, 764, 765], "road": 348, "bridg": [348, 928, 951], "reproduct": [348, 927, 954], "guidanc": [348, 372], "gitter": [348, 949, 979, 980], "value_kei": [348, 862], "levenshtein": 348, "dna": [348, 578, 921], "rna": 348, "pain": 348, "suppli": [348, 362, 596, 867, 868, 934, 955, 976, 978, 980, 985], "leven": 348, "acctcctagaag": 348, "acctactagaagtt": 348, "gaatattaggccga": 348, "lev_metr": 348, "multiprocess": [348, 350, 897, 899, 934, 972, 980, 986], "exec": 348, "nvidia": 348, "cuda": [348, 358], "reiniti": 348, "culprit": 348, "refus": [348, 837, 838], "safeti": [348, 363, 897, 952, 982], "forkserv": 348, "joblib_start_method": 348, "set_start_method": 348, "dozen": [349, 372], "unsuperv": [349, 365], "newli": [349, 369, 413, 938, 978, 979, 987], "leakag": [349, 350, 363, 968], "disclos": 349, "entail": [349, 826, 828, 945], "r_squar": 349, "searchcv": [349, 987], "tacit": 350, "inconsist": [350, 356, 370, 458, 459, 526, 849, 852, 871, 937, 946, 968, 972, 977, 978, 979, 980, 982, 985, 987, 988], "elsewher": [350, 412, 413, 421, 422, 428], "formal": [350, 351, 362, 369, 788, 789, 928, 931, 932, 935], "thereof": 350, "transduct": [350, 362, 842, 843, 952], "position": 350, "serial": [350, 951, 952, 968, 972, 980, 984], "unpickl": [350, 356, 526, 788, 789, 978, 984, 988], "pep257": 350, "nuanc": 350, "flaw": [350, 369], "terminologi": [350, 980], "est1": [350, 582], "est2": [350, 582], "exemplifi": 350, "disregard": [350, 370, 383, 415, 432, 433, 434, 502, 504, 506, 508, 510, 512, 515, 518, 520, 561, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 622, 623, 628, 629, 671, 672, 673, 734, 781, 782, 791, 799, 806, 817, 818, 824, 825, 828, 832, 835, 836, 838, 848, 850, 853, 856, 858, 931, 980], "_score": [350, 746, 760, 771, 931, 972, 985], "_loss": [350, 931], "divers": [350, 369], "8022": [350, 423, 981], "abstract": [350, 367, 372, 568, 718, 951, 972], "notfittederror": [350, 797, 915, 976, 978, 981, 982, 988], "descriptor": [350, 458, 459], "hoc": 350, "spectral_embed": [350, 928, 973, 976, 978, 980, 982, 985, 986, 987], "maxabs_scal": [350, 817, 980], "astrai": 350, "readthedoc": 350, "entireti": 350, "shield": 350, "n_output": [350, 369, 379, 383, 384, 388, 393, 396, 415, 419, 432, 433, 434, 482, 484, 486, 487, 489, 492, 493, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 517, 518, 519, 520, 532, 533, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 561, 578, 580, 583, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 620, 622, 623, 624, 625, 626, 628, 629, 671, 672, 677, 694, 695, 697, 699, 700, 702, 703, 734, 737, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 795, 797, 798, 799, 804, 805, 806, 807, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 825, 826, 827, 828, 839, 840, 842, 843, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 873, 902, 931, 932, 947, 979, 982], "n_target": [350, 365, 432, 433, 434, 435, 474, 506, 561, 593, 596, 597, 600, 601, 602, 603, 604, 606, 607, 610, 611, 612, 613, 614, 615, 621, 622, 623, 624, 625, 631, 632, 633, 634, 635, 636, 637, 932, 984, 986], "synonym": [350, 790, 791, 792, 798, 799, 800], "themat": 350, "alphanumer": [350, 538, 539, 541], "statistician": [350, 828], "prescrib": 350, "baggingclassifi": [350, 369, 506, 857, 975, 978, 979, 980, 983, 987, 988], "estimator__max_depth": [350, 920], "improp": [350, 979], "pairwise_kernel": [350, 372, 402, 593, 714, 814, 929, 972, 979], "redundantli": 350, "distancemetr": [350, 368, 788, 789, 934, 980, 984, 985, 986], "di": [350, 362, 367, 481, 487, 614, 635, 636, 840, 976, 985], "vectori": [350, 982], "noun": 350, "rout": [350, 986], "fit_param": [350, 384, 388, 393, 396, 415, 482, 484, 486, 487, 489, 492, 493, 499, 517, 519, 520, 532, 533, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 578, 580, 585, 588, 589, 590, 591, 592, 746, 749, 750, 752, 760, 769, 770, 771, 772, 773, 775, 780, 781, 782, 792, 797, 800, 804, 807, 808, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 825, 826, 827, 828, 839, 840, 979, 982, 983, 984, 986, 988], "venu": [350, 954], "broadli": [350, 362], "consolid": [350, 351, 972], "coo": [350, 503, 504, 642, 815, 863, 867, 868, 934, 973], "lil": [350, 503, 504, 815, 863, 889, 934], "csgraph": [350, 985], "absent": [350, 370, 703, 769], "densifi": [350, 367, 608, 609, 616, 618, 626, 627, 628, 847, 921, 974], "lossili": 350, "unnorm": [350, 486, 928, 978, 979], "encompass": [350, 400, 406, 505, 506, 928], "is_regressor": 350, "get_n_split": [350, 747, 748, 751, 753, 754, 755, 756, 759, 761, 762, 763, 764, 765, 766, 767], "elasticnetcv": [350, 596, 602, 610, 611, 612, 613, 631, 927, 972, 975, 983, 985, 986], "estimatorcv": [350, 952], "loo": [350, 754, 983], "type_of_target": [350, 815, 932, 986, 987], "hashabl": [350, 816, 819, 942], "labelencod": [350, 519, 822, 942, 972, 980, 987], "canonic": 350, "xxx": 350, "everywher": 350, "multilabelbinar": [350, 777, 812, 821, 932, 957, 975, 977, 978, 980, 981], "nonetheless": [350, 931], "wherein": 350, "amber": 350, "return_cov": [350, 517, 518, 561, 808], "test_idx": 350, "_idx": 350, "label1": 350, "label2": 350, "class_label": [350, 507, 511, 514, 608, 609, 616, 618, 624, 625, 626, 855, 857, 873, 946], "bincount": [350, 366, 507, 511, 514, 608, 609, 616, 618, 624, 625, 626, 847, 849, 852, 855, 857, 872, 873, 979], "rebalanc": 350, "compute_class_weight": [350, 975, 986], "check_cv": [350, 977], "obei": [350, 929], "triangl": [350, 367, 394, 397, 409, 649, 929, 934], "concurr": [350, 370, 897, 984, 986], "unset": [350, 980], "get_scor": [350, 682, 979], "check_scor": 350, "uppercas": [350, 985], "unavail": [350, 608, 609, 891, 979, 985], "deadlock": 351, "meritocrat": 351, "consult": [351, 931], "unanim": 351, "outreach": 351, "brand": [351, 353], "social": [351, 362, 955], "emeritu": [351, 949], "recant": 351, "strateg": 351, "entiti": [351, 675, 705], "duti": 351, "resign": 351, "occasion": [351, 676, 981], "escal": 351, "fallback": [351, 776, 777, 931], "hereaft": 351, "lazi": [351, 370, 945, 976], "opinion": 351, "veto": 351, "appeal": 351, "revis": [351, 620], "insuffici": [352, 930, 965], "greatest": [353, 815, 980], "afraid": 353, "64bit": [353, 972], "miniconda": 353, "administr": 353, "venvpython": 353, "venvsourc": 353, "activatesourc": 353, "activatesklearn": 353, "activatepip": 353, "learnpip": 353, "learnpip3": 353, "learnconda": 353, "installedpython3": 353, "virtualenvpython3": 353, "installedpython": 353, "virtualenvpython": 353, "installedconda": 353, "environmentpython": 353, "dnf": 353, "pacman": 353, "raspberri": 353, "lock": [353, 355, 897, 899], "pypy3": [353, 980], "v5": [353, 980], "19137": 353, "py3": 353, "apk": 353, "bind": [353, 972, 979, 980], "buster": 353, "fedora30": 353, "pkgsrc": 353, "py39": 353, "daal": 353, "daal4pi": 353, "intelpython": 353, "plugin": 353, "appdata": 353, "usernam": 353, "windowsapp": 353, "environmenterror": 353, "errno": 353, "pythonsoftwarefound": 353, "7_qbz5n2kfra8p0": 353, "localcach": 353, "python37": 353, "292": [353, 369, 684], "data_nam": 353, "australian": 353, "data_vers": 353, "lift": 353, "regedit": 353, "menu": 353, "launch": [353, 955], "hkey_local_machin": 353, "currentcontrolset": 353, "longpathsen": 353, "broken": [353, 366, 549, 550, 585, 670, 863, 931, 975, 979, 980, 981, 983, 986], "retrain": [356, 952, 988], "inconsistentversionwarn": [356, 988], "simplefilt": 356, "model_from_prevision_vers": 356, "original_sklearn_vers": [356, 526], "untrust": 356, "malici": 356, "unsupport": [356, 443, 980, 985], "inadvis": 356, "immut": 356, "snapshot": [356, 509, 510, 952], "portabl": 356, "alex": [356, 370, 946, 972, 975, 980, 982, 983, 984, 986, 987, 988], "gaynor": 356, "sio": 356, "obj": [356, 517, 518, 891, 897], "get_untrusted_typ": 356, "unknown_typ": 356, "exchang": [356, 954], "markup": 356, "pmml": [356, 951], "onnx": [356, 951, 952], "xml": 356, "sklearn2pmml": [356, 951], "affero": 356, "gplv3": 356, "datastructur": [358, 980, 984], "namespac": 358, "array_api": 358, "xp": [358, 365, 823], "x_np": 358, "y_np": 358, "x_cu": 358, "y_cu": 358, "devic": [358, 366, 532], "array_api_dispatch": [358, 418, 845], "_estimator_with_converted_arrai": 358, "transfer": [358, 927, 952], "_array_api": 358, "cupy_to_ndarrai": 358, "_arrai": 358, "lda_np": 358, "submatrix": [359, 377, 401, 403], "unusu": [359, 937, 941, 980], "submatric": 359, "bipartit": [359, 403, 461, 936], "subgraph": 359, "a_n": 359, "lceil": [359, 937], "log_2": [359, 513, 937], "rceil": [359, 937], "bmatrix": 359, "u_2": 359, "u_": [359, 432, 433, 434], "n_column": [359, 401, 403], "inderjit": [359, 403], "blockwis": [359, 927], "bistochast": [359, 401], "l_": [359, 561, 602, 690, 931], "k_": [359, 372, 566, 569, 571, 574, 723, 941], "u_1": 359, "v_1": 359, "v_2": 359, "v_": [359, 370], "kluger": [359, 401, 463], "yuval": [359, 401], "microarrai": [359, 401, 463, 578, 921], "cap": [359, 362, 704, 931, 981], "hochreit": [359, 669], "hungarian": [359, 669], "bodenhof": [359, 669], "fabia": [359, 669], "acquisit": [359, 669], "wilk": 360, "f_i": 360, "train_set": 360, "test_set": 360, "disjoint": [360, 362, 363, 388, 654, 680, 704, 706, 928], "platt": [360, 388, 849, 850, 852, 853, 946], "_i": [360, 369, 922, 927, 931, 935, 946], "_j": [360, 922], "f_j": [360, 939], "precipit": 360, "wea": 360, "640": [360, 440, 456, 457, 533, 534, 920], "650": 360, "1990a": 360, "menon": 360, "ak": [360, 986, 987], "jiang": [360, 976, 983], "xj": 360, "vembu": 360, "ohno": 360, "machado": [360, 672], "703": [360, 463], "710": 360, "kull": [360, 931], "silva": [360, 638, 928, 983, 985], "filho": 360, "flach": [360, 931], "refurbish": 361, "rough": [361, 937, 959], "uniti": 361, "lipschitz": [361, 943], "usecas": 362, "mu_j": 362, "coher": 362, "elong": 362, "lloyd": [362, 394, 397, 399, 409, 986, 987], "distant": [362, 642, 659, 934], "sergei": [362, 974, 978, 979, 980, 981, 982], "vassilvitskii": [362, 397, 410], "eighteenth": 362, "siam": [362, 366, 402, 410, 412, 485, 491], "industri": [362, 951], "predetermin": [362, 928], "scullei": 362, "19th": 362, "exemplar": [362, 391, 404, 965], "sent": [362, 777], "leftarrow": [362, 935, 945], "foral": [362, 372, 563], "neq": [362, 931, 933, 941], "notin": 362, "hill": [362, 398, 411, 982], "climb": [362, 398, 411], "maxima": [362, 372], "x_j": [362, 372, 564, 565, 569, 572, 573, 575, 922, 923, 927, 934, 946, 947], "dictat": 362, "solvabl": 362, "stella": [362, 402, 412], "yu": [362, 402, 412, 608, 927, 935, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986], "jianbo": [362, 402, 412, 641], "shi": [362, 402, 412, 641], "anil": [362, 402, 412], "daml": [362, 402, 412], "victor": [362, 402, 412, 979, 982], "minden": [362, 402, 412], "lex": [362, 402, 412], "ying": [362, 402, 412, 986], "adjac": [362, 367, 402, 412, 535, 536, 585, 641, 645, 889, 928, 934, 965], "adjacency_matrix": 362, "ulrik": [362, 402, 412, 641], "von": [362, 402, 412, 641, 951, 979, 980], "luxburg": [362, 402, 412, 641], "jitendra": [362, 402, 412, 641], "malik": [362, 402, 412, 641], "walk": [362, 368, 975], "marina": 362, "meila": 362, "ng": [362, 367, 641, 794, 935, 937, 983], "jordan": [362, 367, 641, 744, 982, 983, 986, 987], "yair": [362, 641], "precondit": [362, 402, 412, 645, 947], "zhuzhunashvili": [362, 412], "forbid": [362, 369], "macroscop": 362, "occupi": [362, 931], "manhattan": [362, 392, 396, 400, 407, 649, 711, 720, 727, 728, 729, 795, 929, 934, 976, 981], "bisecting_strategi": [362, 394], "largest_clust": [362, 394], "biggest_inertia": [362, 394], "biggest": [362, 365, 367, 394], "steinbach": [362, 987], "karypi": 362, "vipin": 362, "egin": 362, "minnesota": 362, "june": [362, 928, 978], "weblog": 362, "abirami": 362, "mayilvahanan": 362, "emerg": [362, 955], "ijet": 362, "jian": 362, "xinyu": 362, "gou": 362, "baod": 362, "hebei": 362, "knee": 362, "triangular": [362, 413, 561, 928], "whichev": [362, 369, 494, 511, 512, 583, 600, 604, 606, 614, 632, 633, 647], "conjunct": [362, 544, 746, 749, 750, 752, 760, 769, 770, 771, 772, 775, 898, 921, 927, 987], "extract_dbscan": 362, "radius_neighbors_graph": [362, 373, 395, 790, 791, 792, 794, 796, 798, 799, 800, 801, 934, 976, 981, 984], "ester": [362, 373, 395], "kriegel": [362, 373, 395, 400, 407, 794, 937], "sander": [362, 373, 395, 400, 407, 794, 937, 981, 982], "xu": [362, 365, 373, 395, 945, 985, 986], "portland": [362, 373, 395], "aaai": [362, 373, 395, 783, 933], "226": [362, 373, 395], "revisit": [362, 373, 395], "schubert": [362, 373, 395, 400, 976, 977, 980, 981, 983, 984, 985, 986], "tod": [362, 373, 395], "max_ep": [362, 400, 405, 407], "nearbi": [362, 934], "cluster_hierarchy_": [362, 400], "planar": 362, "peripheri": 362, "hdbscan": [362, 951], "wall": 362, "ankerst": [362, 400, 407], "mihael": [362, 400, 407], "marku": [362, 400, 407, 980, 982, 983, 984], "breunig": [362, 400, 407, 794, 937], "han": [362, 393, 400, 407, 972, 980, 981, 985], "j\u00f6rg": [362, 400, 407, 980], "sigmod": [362, 400, 407, 794, 937], "cft": 362, "lossi": 362, "cf": [362, 365, 393, 650, 927, 941, 952], "subclust": [362, 393], "till": [362, 393, 737, 931], "temporarili": [362, 977], "farthest": 362, "brc": [362, 393], "tian": [362, 393, 977, 978, 979], "raghu": [362, 393], "ramakrishnan": [362, 393], "maron": [362, 393], "livni": [362, 393], "sfu": [362, 393], "coursecentr": [362, 393], "459": [362, 393], "zhang96": [362, 393], "roberto": [362, 393], "perdisci": [362, 393], "jbirch": [362, 393], "java": [362, 393, 951], "satisfi": [362, 600, 604, 649, 667, 685, 686, 788, 789], "labels_pr": [362, 654, 655, 664, 665, 667, 680, 685, 686, 704, 706, 735, 742], "unadjust": [362, 931, 984], "swap": [362, 367, 666, 685, 910, 911, 972], "ri": [362, 655, 735], "c_2": [362, 928], "unord": [362, 369], "esp": [362, 972], "hubert": [362, 655, 665, 735], "arabi": [362, 655, 665, 735], "steinlei": [362, 655], "psycholog": [362, 655, 666], "agreement": [362, 654, 666, 704, 706, 742, 931], "22504": 362, "69": [362, 421, 422, 557, 558, 705, 931, 941, 964], "10526": 362, "u_i": [362, 432, 433, 434, 704], "v_j": [362, 704, 936], "veb2009": 362, "a_i": 362, "b_j": 362, "yat2016": 362, "average_method": [362, 654, 706, 980], "vinh": [362, 654], "veb2010": 362, "strehl": 362, "joydeep": 362, "583": [362, 964], "617": [362, 718], "1162": 362, "153244303321897735": 362, "epp": [362, 654], "bailei": [362, 654], "26th": [362, 675, 705, 931], "1553374": 362, "1553511": 362, "9781605585161": 362, "csail": [362, 616, 617, 626, 785], "volume11": 362, "vinh10a": 362, "algesheim": 362, "tesson": 362, "30750": 362, "1038": 362, "srep30750": 362, "rosenberg": [362, 667, 686, 742], "hirschberg": [362, 667, 686, 742], "b2011": 362, "homogeneity_completeness_v_measur": [362, 981], "68": [362, 485, 491, 540, 972], "n_k": [362, 500], "n_c": [362, 609], "julia": [362, 667, 686, 742], "media": [362, 955], "hila": 362, "becker": [362, 955, 975, 984], "fowlkes_mallows_scor": [362, 931, 978, 980], "fmi": [362, 680], "fp": [362, 662, 668, 680, 731, 732, 733, 736, 931], "fn": [362, 662, 668, 680, 731, 732, 733, 736, 931, 932], "47140": 362, "fowkl": [362, 680], "1983": [362, 680, 828], "tandfonlin": 362, "01621459": 362, "10478008": 362, "kmeans_model": 362, "1987": [362, 557, 558, 739, 740], "53": [362, 369, 485, 491, 739, 740], "calinski_harabasz_scor": [362, 980], "dispers": [362, 660, 674, 927], "561": 362, "n_e": 362, "mathrm": [362, 364, 367, 371, 927, 947], "b_k": 362, "w_k": [362, 927], "c_q": 362, "n_q": 362, "c_e": 362, "cali\u0144ski": 362, "1974": [362, 370, 660], "dendrit": [362, 660], "davies_bouldin_scor": [362, 980], "6619": 362, "bould": 362, "c_i": [362, 934], "c_j": [362, 936], "s_i": 362, "diamet": 362, "nonneg": [362, 367, 403, 488, 490, 497, 825], "s_j": 362, "max_": [362, 931], "1979": [362, 674, 718], "227": [362, 674], "halkidi": 362, "batistaki": 362, "yanni": 362, "vazirgianni": 362, "michali": 362, "107": [362, 842, 932, 974], "145": 362, "contingency_matrix": [362, 704, 980], "pair_confusion_matrix": [362, 984], "permit": [363, 417, 538, 539, 541, 746, 749, 750, 760, 770, 809, 810, 931, 932, 933, 978], "clf__c": 363, "pca1": [363, 378], "svm1": 363, "77484909e": 363, "07058917e": 363, "pca2": [363, 378], "svm2": 363, "raw_target_regr": 363, "bypass": [363, 549, 596, 602, 855, 856, 857, 858], "check_invers": [363, 415, 812, 941, 980, 986, 987], "caller": [363, 596, 597, 602, 610, 611, 612, 631, 837, 838, 899, 907, 908, 909, 981], "linear_pca": 363, "transformer_list": [363, 807, 810, 921, 983, 984], "make_union": [363, 807, 975, 979], "incorpor": [363, 369, 930, 951, 955], "unreli": 363, "citi": [363, 370, 416, 966], "london": [363, 370, 416], "sallisaw": [363, 416], "bow": 363, "watson": [363, 951], "moveabl": 363, "feast": 363, "grape": 363, "wrath": 363, "expert_r": 363, "user_r": 363, "city_categori": 363, "title_bow": 363, "city_london": 363, "city_pari": 363, "city_sallisaw": 363, "904": 363, "507": 363, "414": [363, 675, 705, 824, 835, 931], "301": [363, 945], "ignored_new_col": 363, "estimator_html_repr": [363, 983, 984, 985, 986], "shrunk_covari": 364, "sigma_": [364, 594, 595, 985], "365": [364, 423], "411": [364, 374, 423, 483], "wiesel": [364, 375, 425], "eldar": [364, 375, 425], "hero": [364, 375, 425], "5016": [364, 375, 425], "5029": [364, 375, 425], "_k": [364, 925, 927], "glasso": [364, 428], "biostatist": [364, 428], "432": 364, "uncommon": [364, 608, 847, 946], "downweight": [364, 486], "driessen": [364, 419, 424, 937], "fastmcd": [364, 419, 424], "raw_location_": [364, 419, 424], "raw_covariance_": [364, 419, 424], "multidimension": [365, 638, 640, 642, 644, 928, 934], "plsw2a": 365, "u_k": [365, 367], "v_k": [365, 367, 481, 487, 495, 496], "x_k": [365, 367, 925, 934], "y_k": 365, "xi_k": 365, "omega_k": [365, 925], "gamma_k": 365, "delta_k": 365, "nipal": [365, 433, 434], "x_rotations_": [365, 432, 433, 434], "y_rotations_": [365, 432, 433, 434], "ty": 365, "x_weights_": [365, 432, 433, 434, 435], "y_weights_": [365, 432, 433, 434, 435], "yv": 365, "tx": 365, "pls1": [365, 434], "pls2": [365, 434], "tx_k": [365, 925], "ty_k": 365, "ja": [365, 979], "wegelin": 365, "methodolog": [366, 954], "academ": [366, 955], "commerci": [366, 955], "flowchart": [366, 959], "f1_macro": [366, 931, 976], "977": 366, "custom_cv_2fold": 366, "custom_cv": 366, "973": 366, "9333": 366, "933": 366, "scorer1_nam": 366, "scorer2_nam": 366, "return_indic": [366, 771, 988], "precision_macro": [366, 961], "recall_macro": [366, 931], "test_precision_macro": 366, "test_recall_macro": 366, "prec_macro": 366, "rec_macro": 366, "test_prec_macro": 366, "test_rec_macro": 366, "train_prec_macro": 366, "train_rec_macro": 366, "undistinguish": 366, "kf": [366, 751], "12883823": 366, "rkf": [366, 761], "weigh": [366, 979], "caveat": [366, 372], "part3": 366, "spector": 366, "submodel": 366, "kohavi": 366, "jnt": 366, "bharat": [366, 980, 981, 982, 983, 984, 985, 986], "rao": [366, 984, 987], "fung": 366, "rosal": 366, "witten": 366, "leavepout": [366, 754, 961], "ss": 366, "gkf": 366, "sgkf": [366, 764], "suboptim": [366, 652, 738, 934, 980], "leavepgroupsout": [366, 748, 961, 978], "n_group": [366, 755, 961, 978], "lpgo": [366, 755], "gss": [366, 748], "withheld": 366, "predefinedsplit": [366, 961, 976], "test_fold": [366, 759], "train_indx": 366, "test_indx": 366, "autocorrel": 366, "superset": [366, 767, 931], "surplu": 366, "tscv": [366, 767], "inbuilt": 366, "some_integ": 366, "n_cv": [366, 388], "isotropi": 367, "alik": [367, 929], "halko": [367, 485, 491, 494, 883, 884], "szlam": [367, 883, 884], "disadvantag": [367, 372, 927, 928, 935, 945, 946, 947], "parsimoni": [367, 941], "jen09": 367, "mrl09": 367, "ell_1": [367, 927], "underset": [367, 927, 934, 947], "operatornam": [367, 690, 927, 931, 947], "fro": [367, 488, 490, 497, 643, 927], "gentli": 367, "spirit": 367, "mairal": [367, 481, 487], "bach": [367, 481, 486, 487, 488, 608, 927], "ponc": [367, 481, 487], "sapiro": [367, 481, 487], "jenatton": 367, "obozinski": 367, "scholkopf1997": 367, "bakir2003": 367, "smola": [367, 370, 485, 814, 941, 946], "klau": [367, 485, 814], "berlin": [367, 485, 646, 675, 705, 931], "heidelberg": [367, 485, 646, 675, 705, 931], "eigendecompos": 367, "eigensolv": [367, 402, 412, 485, 494, 645, 928], "eigsh": [367, 485, 978, 979], "lehoucq": 367, "sorensen": 367, "lsa": [367, 494, 974], "synonymi": 367, "polysemi": 367, "lsi": 367, "sigma_k": [367, 925], "columnwis": 367, "sublinear": [367, 540, 541], "use_idf": [367, 370, 540, 541, 966], "textual": [367, 947, 981], "man": [367, 540, 718, 783, 787, 929, 931, 933], "prabhakar": 367, "raghavan": [367, 540, 783, 787, 929, 931, 933], "hinrich": 367, "sch\u00fctze": [367, 540, 929, 931, 933], "transform_method": 367, "split_cod": 367, "dictionarylearn": [367, 487, 489, 490, 492, 493, 494, 495, 496, 973, 977, 979, 982, 985, 986, 987, 988], "overcomplet": 367, "mammalian": 367, "cortex": 367, "inpaint": 367, "h_i": [367, 936], "psi": 367, "sim": [367, 964], "wh_i": 367, "ww": 367, "superflu": 367, "psi_1": 367, "psi_2": 367, "psi_n": 367, "superimpos": 367, "plug": [367, 927, 955, 966], "wh": [367, 488, 490, 497], "hoyer": [367, 975], "nndsvd": [367, 488, 490, 497, 981, 984], "nndsvdar": [367, 488, 490, 497, 981], "elementwis": [367, 488, 490, 497], "_featur": [367, 488, 490, 497], "kl": [367, 928, 980], "itakura": [367, 488, 490, 497, 979], "saito": [367, 488, 490, 497, 979], "w_new": 367, "forget_factor": [367, 488], "lee": [367, 972, 973, 976, 978, 979, 980, 981, 983, 984, 987], "seung": 367, "boutsidi": 367, "gallopoulo": 367, "cichocki": [367, 488, 490, 497], "phan": 367, "fevott": [367, 488, 490, 497], "idier": [367, 488, 490, 497], "lefevr": [367, 488], "corpora": 367, "hoffman": [367, 486, 977, 984], "unshad": 367, "beta_k": 367, "eta": [367, 486, 626, 627, 628, 935, 945, 977], "topic_word_prior": [367, 486], "theta_d": 367, "doc_topic_prior": [367, 486], "z_": 367, "w_": [367, 596, 597, 602, 603, 610, 611, 612, 613, 631, 634, 927, 931, 933, 936], "beta_": 367, "elbo": 367, "overset": [367, 938], "e_": 367, "blei": [367, 486, 744], "wang": [367, 486, 629, 639, 643, 675, 705, 927, 928, 931, 975, 977, 978, 979, 980, 984, 987], "paislei": [367, 486], "kaiser": [367, 482], "talli": 368, "disproportion": 368, "41075698": 368, "41076071": 368, "rho_k": 368, "unsmooth": 368, "scott": [368, 793, 972, 973, 978, 980, 981, 982, 987], "silvermann": 368, "propto": [368, 933], "2h": 368, "angular": [368, 642, 713], "contin": [368, 664, 941], "generaliz": 369, "flavour": 369, "b1999": 369, "b1996": 369, "h1998": 369, "lg2012": 369, "bootstrap_featur": [369, 505, 506], "140": [369, 460, 466, 467, 468, 505, 506, 932], "832": [369, 505, 506], "844": [369, 505, 506], "geurt": [369, 505, 506, 507, 508, 515, 516, 857, 858], "346": [369, 451, 505, 506], "b1998": 369, "decoupl": [369, 933], "cancel": [369, 370, 712], "b2001": 369, "bear": [369, 951], "ernst": [369, 507, 508, 515, 516, 857, 858], "wehenkel": [369, 507, 508, 515, 516, 857, 858], "l2014": 369, "lieg": 369, "freund": [369, 503, 504], "fs1995": 369, "w_1": [369, 927, 935], "w_2": [369, 927, 935], "w_n": 369, "w_i": [369, 922, 931], "reappli": 369, "htf": 369, "zzrh2009": 369, "d1997": 369, "semin": 369, "friedman2001": 369, "shelf": 369, "ecologi": 369, "lightgbm": [369, 511, 512, 981], "913": [369, 509], "nr": 369, "f_m": 369, "h_m": 369, "f_": [369, 585, 931], "l_m": 369, "taylor": [369, 980, 982, 983, 986], "g_i": [369, 599], "absolute_error": [369, 508, 510, 512, 515, 621, 856, 858, 985], "sum_m": 369, "softmax": [369, 511, 608, 609, 927, 934, 935], "superior": 369, "ineffici": [369, 394, 524, 776, 777, 934, 936], "r2007": 369, "friedman2002": 369, "1189": 369, "1232": 369, "367": [369, 972], "378": [369, 966, 972], "tremend": 369, "8965": 369, "grower": [369, 511, 512], "missing": [369, 577, 578, 580, 981], "comfort": 369, "fisher1958": 369, "loan": [369, 484, 927, 955], "nevertheless": 369, "mayer2022": 369, "mayer": [369, 984, 986], "bourassa": 369, "hoesli": 369, "scognamiglio": 369, "valuat": 369, "tianqi": 369, "guestrin": 369, "ke": [369, 983, 984], "boostingdecis": 369, "789": 369, "798": 369, "w2": 369, "w3": 369, "lr__c": 369, "rf__n_estim": 369, "w1992": 369, "knr": 369, "stack_method": [369, 517], "142": 369, "146": 369, "286": 369, "225": 369, "126": 369, "124": [369, 974], "164": 369, "stack_method_": [369, 517, 518], "final_layer_rfr": 369, "final_layer_gbr": 369, "final_lay": 369, "multi_layer_regressor": 369, "wolpert": [369, 517, 518], "241": [369, 517, 518], "dubai": 370, "francisco": [370, 943], "movi": [370, 958], "movie_entri": 370, "thriller": [370, 819], "drama": 370, "anim": 370, "000e": 370, "003e": 370, "011e": 370, "974e": 370, "unseen_featur": [370, 531], "speech": [370, 931], "chunker": 370, "pos_window": 370, "pos_vector": 370, "1x6": 370, "part_of_speech": 370, "token_featur": 370, "isupp": 370, "uppercase_initi": 370, "all_uppercas": 370, "raw_x": [370, 532], "pos_tagg": 370, "comprehens": [370, 707, 708, 929, 955, 980], "murmurhash3": [370, 532, 539, 896], "weinberg": 370, "modulo": [370, 983], "kilian": [370, 987], "anirban": 370, "dasgupta": [370, 841, 943], "langford": [370, 638, 928], "josh": [370, 979], "attenberg": 370, "multitask": [370, 932], "punctuat": [370, 538, 539, 541], "diminish": 370, "4x9": 370, "build_analyz": [370, 538, 539, 541, 982], "interrog": 370, "bigram_vector": 370, "bi": 370, "cool": [370, 972], "feature_index": 370, "him": 370, "constru": 370, "nqy18": 370, "smooth_idf": [370, 540, 541], "_n": [370, 931], "textbook": [370, 540], "6x3": 370, "81940995": 370, "57320793": 370, "47330339": 370, "88089948": 370, "58149261": 370, "81355169": 370, "term1": 370, "term2": 370, "term3": 370, "0986": [370, 812], "819": 370, "573": 370, "8473": 370, "8515": [370, 979], "5243": 370, "85151335": 370, "52433293": 370, "55422893": 370, "83236428": 370, "63035731": 370, "77630514": 370, "idf_": [370, 540, 541, 980], "western": 370, "europ": [370, 941], "koi8": 370, "russian": 370, "modern": [370, 418, 453, 540, 640, 644, 679, 845, 928, 952], "unicodedecodeerror": [370, 538, 539, 541], "told": 370, "silent": [370, 531, 804, 941, 977, 978, 980, 981, 985, 986], "chardet": 370, "chardetect": 370, "damag": 370, "sloppili": 370, "ftfy": 370, "mish": 370, "mash": 370, "text1": 370, "sei": 370, "mir": 370, "gegr": 370, "xc3": 370, "xbc": 370, "x9ft": 370, "mein": 370, "sauerkraut": 370, "text2": 370, "holdselig": 370, "sind": 370, "dein": 370, "ger": 370, "xfcche": 370, "text3": 370, "xff": 370, "xfea": 370, "x00u": 370, "x00f": 370, "x00": 370, "x00l": 370, "xfc": 370, "x00g": 370, "x00e": 370, "x00n": 370, "x00d": 370, "x00a": 370, "x00h": 370, "x00r": 370, "x00z": 370, "x00i": 370, "x00b": 370, "x00c": 370, "x00t": 370, "x00o": 370, "spolski": 370, "nnmf": [370, 967, 968, 972], "phrase": 370, "misspel": 370, "rescu": 370, "resili": 370, "wprd": 370, "ngram_vector": 370, "char_wb": [370, 538, 539, 541], "rd": 370, "wo": 370, "wp": [370, 607, 621], "char": [370, 538, 539, 541, 972], "jumpi": 370, "fox": 370, "1x4": 370, "umpi": 370, "1x5": 370, "mpy": 370, "fo": 370, "barrier": 370, "hv": 370, "4x10": 370, "discrep": [370, 966, 976], "4x1048576": 370, "collid": 370, "ingest": 370, "spend": 370, "my_token": 370, "lowercas": [370, 378, 393, 394, 396, 397, 399, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 538, 539, 541, 589, 590, 591, 592, 638, 639, 642, 792, 797, 800, 804, 809, 814, 839, 840, 985], "lucen": 370, "build_preprocessor": [370, 538, 539, 541, 982], "whitespac": 370, "fanci": 370, "lemmat": 370, "nltk": [370, 950, 951], "word_token": 370, "wordnetlemmat": 370, "lemmatoken": 370, "wnl": 370, "british": 370, "spell": 370, "to_british": 370, "1or": 370, "bt": 370, "1er": 370, "ing": 370, "ation": 370, "1z": 370, "ogu": 370, "og": 370, "customvector": 370, "asian": 370, "one_imag": [370, 534], "fake": 370, "assert_array_equ": 370, "patchextractor": [370, 988], "five_imag": 370, "variancethreshold": [371, 813, 921, 975, 982, 985, 988], "sel": 371, "selectfdr": [371, 542, 546, 548, 549, 550, 556, 976, 978, 979, 988], "selectfw": [371, 542, 545, 546, 549, 550, 556, 988], "genericunivariateselect": [371, 545, 546, 548, 549, 550, 552, 986, 988], "r_regress": [371, 556, 985, 986], "nonparametr": [371, 557, 558], "bewar": 371, "importance_gett": [371, 543, 544, 547, 984], "unimport": 371, "lsvc": 371, "baraniuk": 371, "isr": 371, "ist": 371, "utl": 371, "aguiar": 371, "cs_note": 371, "ferri": [371, 931], "versatil": [372, 946, 955], "optima": 372, "markov": [372, 561, 936, 951, 972], "ppmv": 372, "214": [372, 534], "446": [372, 675, 705, 931], "957": [372, 677, 931], "197": 372, "0336": 372, "4ppm": 372, "27ppm": 372, "197ppm": 372, "nuisanc": 372, "logit": [372, 608, 609, 927], "one_vs_on": [372, 560, 932], "ingredi": 372, "duv2014": 372, "theta_l": 372, "x_bound": [372, 567], "operand": 372, "k1__": 372, "k2__": 372, "constant_valu": [372, 563, 567], "constant_value_bound": [372, 561, 563, 567], "k1__k1__constant_valu": 372, "value_typ": [372, 567], "n_element": [372, 567], "k1__k2__length_scal": 372, "k2__length_scal": 372, "k1": [372, 571, 574], "k1__k1": 372, "k1__k1__constant_value_bound": 372, "k1__k2": 372, "k1__k2__length_scale_bound": 372, "k2": [372, 571, 574], "k2__length_scale_bound": 372, "69314718": [372, 562, 941], "30258509": 372, "interoper": [372, 949, 952, 968], "pairwisekernel": 372, "_valu": [372, 563], "_level": [372, 575], "k_1": [372, 571, 574], "k_2": [372, 571, 574], "__add__": [372, 574], "__mul___": 372, "__pow__": [372, 566], "2l": [372, 572], "bigg": [372, 569], "bessel": [372, 569], "rightarrow": [372, 569, 935], "quad": [372, 934, 945], "tfrac": 372, "3l": 372, "pp84": 372, "x_d": [372, 564], "inhomogen": [372, 564], "expon": [372, 566, 626, 627, 628, 758, 805, 806, 823, 920], "carl": [372, 560, 561, 564, 569, 572], "rasmussen": [372, 560, 561, 564, 569, 572], "duvenaud": [372, 572, 573], "cookbook": [372, 572, 573], "minkowski": [373, 395, 400, 407, 638, 649, 727, 728, 729, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 934, 972, 975, 986, 987], "metric_param": [373, 395, 400, 407, 638, 642, 790, 791, 792, 793, 794, 796, 798, 799, 800, 801, 802, 976, 979, 986], "leaf_siz": [373, 395, 400, 407, 788, 789, 790, 791, 792, 793, 794, 796, 798, 799, 800], "kd_tree": [373, 395, 400, 407, 638, 639, 790, 791, 792, 793, 794, 796, 798, 799, 800, 934, 985], "balltre": [373, 395, 400, 407, 638, 639, 649, 790, 791, 792, 793, 794, 796, 798, 799, 800, 801, 802, 928, 972, 974, 976, 980, 985, 988], "ckdtree": [373, 395, 974], "inhibit": [373, 395], "core_sampl": 373, "n_core_sampl": [373, 395], "attract": [373, 395, 925, 934, 951], "fun": [374, 483, 955], "logcosh": [374, 483], "fun_arg": [374, 483], "w_init": [374, 483], "whiten_solv": [374, 483, 987], "return_x_mean": 374, "compute_sourc": 374, "return_n_it": [374, 404, 409, 428, 495, 496, 596, 597, 602, 603, 610, 611, 612, 613, 631, 632, 633, 634, 635, 636, 637, 644, 986], "cube": [374, 483], "my_g": [374, 483], "x_mean": 374, "AS": 374, "fortran": [374, 491, 596, 597, 602, 603, 610, 611, 612, 613, 615, 631, 634, 635, 636, 867, 868, 972, 975, 976, 980], "hyvarinen": [374, 483], "oja": [374, 483], "430": [374, 483], "shrunk_cov": [375, 429, 431], "eq": [375, 425, 671, 672, 673], "subobject": [376, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 744, 745, 746, 749, 750, 760, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858], "row_ind": [377, 401, 403], "intp": [377, 401, 403], "col_ind": [377, 401, 403], "get_submatrix": [377, 401, 403], "pca0": 378, "_n_features_out": 378, "class_name0": [378, 393, 394, 396, 397, 399, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 589, 590, 591, 592, 638, 639, 642, 792, 797, 800, 804, 814, 839, 840], "class_name1": [378, 393, 394, 396, 397, 399, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 589, 590, 591, 592, 638, 639, 642, 792, 797, 800, 804, 814, 839, 840], "class_name2": [378, 393, 394, 396, 397, 399, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 589, 590, 591, 592, 638, 639, 642, 792, 797, 800, 804, 814, 839, 840], "feature_names_out": [378, 382, 393, 394, 396, 397, 399, 414, 432, 433, 434, 435, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 516, 517, 518, 519, 520, 531, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 577, 578, 579, 580, 585, 588, 589, 590, 591, 592, 638, 639, 642, 792, 797, 800, 804, 807, 808, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 986], "harsh": [379, 388, 419, 499, 500, 501, 503, 505, 507, 509, 511, 514, 517, 519, 560, 608, 616, 618, 624, 625, 626, 776, 777, 778, 779, 783, 784, 785, 786, 787, 790, 795, 798, 805, 842, 843, 847, 849, 852, 855, 857, 982, 984, 987], "n_samples_fit": [383, 415, 432, 433, 434, 504, 506, 508, 510, 512, 515, 518, 520, 561, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 622, 623, 628, 629, 638, 781, 782, 790, 791, 792, 794, 796, 798, 799, 800, 806, 848, 850, 853, 856, 858], "uniform_averag": [383, 415, 432, 433, 434, 504, 506, 508, 510, 512, 515, 518, 520, 561, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 620, 622, 623, 628, 629, 671, 672, 677, 694, 695, 697, 699, 700, 702, 734, 781, 782, 791, 799, 806, 848, 850, 853, 856, 858, 931, 981], "n_features_new": [384, 393, 396, 482, 484, 486, 487, 489, 492, 493, 499, 517, 519, 520, 532, 533, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 578, 580, 585, 588, 589, 590, 591, 592, 797, 804, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 825, 826, 827, 828, 839, 840], "base_clf": 388, "calibrated_clf": 388, "889": 388, "072": [388, 598], "927": 388, "x_calib": 388, "y_calib": 388, "936": [388, 931], "063": 388, "prob_tru": [389, 390], "prob_pr": [389, 390], "ref_lin": 389, "alexandru": 390, "22nd": 390, "525": [390, 578, 921], "convergence_it": [391, 404], "hardcod": [391, 404, 980], "affinity_matrix_": [391, 402, 641], "cluster_center_indic": [391, 404], "compute_full_tre": [392, 396, 976], "compute_dist": [392, 396, 984], "inferior": [392, 396, 983], "n_leaves_": [392, 396], "n_connected_components_": [392, 396, 981], "ward_tre": [392, 396, 972, 976], "branching_factor": 393, "compute_label": [393, 399], "promot": [393, 658, 951, 983, 985], "redistribut": 393, "overwritten": [393, 482, 483, 484, 486, 491, 498, 557, 558, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 622, 624, 629, 631, 632, 633, 634, 636, 899, 901, 985], "root_": 393, "_cfnode": 393, "cftree": 393, "dummy_leaf_": 393, "subcluster_labels_": 393, "centroids_": [393, 795], "copy_x": [394, 397, 409, 485, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 622, 624, 629, 631, 632, 633, 634, 635, 974, 980, 981], "smart": [394, 409, 410, 540], "k_init": [394, 409], "sse": 394, "bisect_mean": 394, "pooling_func": [396, 980], "xred": 396, "socg2006": 397, "min_bin_freq": [398, 411], "cluster_al": [398, 411], "get_bin_se": 398, "orphan": [398, 411, 972], "reassignment_ratio": 399, "eec": [399, 591], "tuft": 399, "dscullei": 399, "fastkmean": 399, "97727273": 399, "43181818": 399, "cluster_method": 400, "predecessor_correct": [400, 406], "unprocess": [400, 538, 539, 541], "heap": 400, "braycurti": [400, 407, 649, 727, 728, 729, 934], "canberra": [400, 407, 649, 727, 728, 729, 934], "chebyshev": [400, 407, 649, 727, 728, 729, 934], "dice": [400, 407, 649, 727, 728, 729, 934], "kulsinski": [400, 407, 649, 727, 728, 729], "rogerstanimoto": [400, 407, 649, 727, 728, 729, 934], "russellrao": [400, 407, 649, 727, 728, 729, 934], "seuclidean": [400, 407, 649, 727, 728, 729, 795, 934, 980, 983, 984], "sokalmichen": [400, 407, 649, 727, 728, 729, 934], "sokalsneath": [400, 407, 649, 727, 728, 729, 934], "yule": [400, 407, 727, 728, 729], "manhattan_dist": [400, 407, 638, 711, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802, 972, 982, 987, 988], "minkowski_dist": [400, 407, 638, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802], "l_p": [400, 407, 638, 790, 791, 792, 794, 796, 798, 799, 800, 801, 802], "upward": [400, 406], "successor": [400, 406, 947, 951], "predecessor": [400, 406, 407], "kdtree": [400, 407, 638, 639, 788, 790, 791, 792, 793, 794, 796, 798, 799, 800, 974, 976, 980, 984, 985], "predecessor_": [400, 407], "erich": [400, 976, 977, 980, 981, 983, 984, 985, 986], "gertz": 400, "lernen": 400, "wissen": 400, "daten": [400, 980, 981], "analysen": 400, "lwda": 400, "318": 400, "329": 400, "n_best": 401, "n_svd_vec": [401, 403], "mini_batch": [401, 403], "n_row_clust": [401, 403, 463], "n_column_clust": [401, 403, 463], "ncv": [401, 403], "n_oversampl": [401, 403, 491, 494, 884, 986], "kernel_param": [402, 485, 589, 593], "precomputed_nearest_neighbor": [402, 641], "eigendecomposit": [402, 412, 623, 641, 645, 814], "dist_matrix": 402, "517": [402, 412, 964], "541": [402, 412], "csc_matrix": [402, 507, 508, 513, 514, 515, 516, 825, 855, 856, 857, 858, 921, 941, 947, 977], "best_n_it": 409, "n_local_tri": 410, "n_seed": 411, "multigrid": 412, "multiscal": 412, "preliminari": 412, "return_dist": [413, 788, 789, 790, 791, 792, 794, 796, 798, 799, 800, 934, 976], "heapq": 413, "topolog": [413, 951], "n_connected_compon": 413, "n_leav": [413, 855, 856, 857, 858], "untransform": [414, 417, 942], "transformers_": 414, "remaining_column": 414, "named_transformers_": 414, "sparse_output_": [414, 501], "output_indices_": [414, 985], "datatyp": [414, 416, 979, 982], "norm1": 414, "norm2": 414, "text_preprocess": 414, "num_preprocess": 414, "x_t": [414, 577, 807], "sum_n_compon": [414, 807], "transformer_": 415, "predict_param": [415, 517, 518, 808, 985], "y_hat": 415, "90453403": 416, "50755672": 416, "30151134": 416, "print_changed_onli": [418, 845, 981, 983, 984], "pairwise_dist_chunk_s": [418, 845], "enable_cython_pairwise_dist": [418, 845], "cache_s": [418, 845, 849, 850, 851, 852, 853, 946], "get_config": [418, 730, 845, 898, 987], "offset_": [419, 513, 627, 794, 851, 980], "raw_support_": [419, 424], "dist_": [419, 424], "true_cov": [419, 421, 422], "7411": [419, 424, 978], "2535": [419, 424], "3053": [419, 424], "0813": [419, 424], "0427": [419, 424], "correct_covari": [419, 424], "rvd": [419, 424], "covariance_correct": [419, 424], "comp_cov": [419, 420, 421, 422, 423, 424, 425, 426], "get_precis": [419, 420, 421, 422, 423, 424, 425, 426, 482, 484, 491], "is_inli": [419, 513, 794], "reweight_covari": [419, 424], "rvdriessen": [419, 424], "location_reweight": [419, 424], "covariance_reweight": [419, 424], "support_reweight": [419, 424], "negative_mahal_dist": 419, "7569": 420, "2818": 420, "3928": 420, "0622": [420, 426], "0193": [420, 426], "enet_tol": [421, 422, 428, 977], "graphlasso": [421, 977, 980], "816": [421, 422], "049": 421, "364": [421, 422, 973], "034": 421, "093": [421, 977], "073": [421, 422], "038": [421, 422, 805], "n_refin": 422, "graphlassocv": [422, 974, 980], "dualiti": [422, 927], "051": 422, "018": 422, "094": 422, "block_siz": [423, 429, 430, 976], "4406": 423, "1616": 423, "0595": 423, "0075": [423, 491], "rouseeuw1984": 424, "butlerdavi": 424, "butler": [424, 975, 983, 984], "davi": [424, 674, 931, 976], "jhun": 424, "1385": 424, "1400": 424, "7533": [425, 979], "2763": 425, "3964": 425, "7833": 425, "2431": 425, "3889": 425, "0195": 425, "7387": 426, "2536": 426, "4110": 426, "cov_init": 428, "return_cost": 428, "220446049250313e": [428, 600, 601, 604, 605, 606, 632, 633], "graph_lasso": [428, 980], "dual_gap": [428, 596, 597, 602, 603, 610, 611, 612, 613, 631, 634], "x_loadings_": [432, 433, 434], "y_loadings_": [432, 433, 434], "plssvd": [432, 433, 953, 968, 984, 986], "x_c": [432, 433, 435, 938], "y_c": [432, 433, 435], "y_reconstruct": [432, 433, 434], "x_scores_": [434, 984], "y_scores_": [434, 984], "y_transform": 435, "data_hom": [436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 979], "sklearn_learn_data": [436, 449], "zero_bas": [437, 458, 459], "query_id": [437, 458, 459], "grok": 437, "qid": [437, 458, 459, 973, 978], "download_if_miss": [438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 979], "ioerror": [438, 439, 440, 441, 442, 443, 444, 445, 447, 448], "stopword": [439, 966], "130107": 439, "target_column": [439, 440, 446], "percent": [442, 550, 944], "494021": 442, "slice_": [443, 444, 987], "195": [443, 444], "78": [443, 444, 603, 605, 614, 615, 746, 931, 952, 962], "unrestrict": 443, "2914": 444, "5748": 444, "n_retri": [446, 986], "timeout": [446, 897, 986], "412": [446, 927], "silenc": 446, "ith": [446, 723, 727, 784, 805, 806, 821, 822], "1592": 448, "1212": 448, "1624": 448, "620": 448, "data_filenam": [451, 455], "target_filenam": [451, 455], "container_path": 453, "load_cont": 453, "allowed_extens": 453, "container_fold": 453, "category_1_fold": 453, "file_1": 453, "file_2": 453, "file_42": 453, "category_2_fold": 453, "file_43": 453, "file_44": 453, "mod": 453, "image_nam": 456, "first_img_data": 457, "backup": [458, 972], "instantan": 458, "mycach": 458, "get_data": 458, "mysvmlightfil": 458, "xn": 459, "yn": [459, 932, 933], "q1": 459, "qn": 459, "yi": [459, 933, 976, 980, 981, 984], "qi": [459, 984], "triplet": 459, "minval": [461, 463], "maxval": [461, 463], "seventh": [461, 943], "269": 461, "274": 461, "return_cent": [462, 983], "intric": 462, "basri": 463, "gerstein": 463, "genom": 463, "716": 463, "flip_i": 465, "interdepend": 465, "polytop": 465, "guyon": [465, 543, 544, 931], "madelon": 465, "1991": [466, 467, 468], "560": [467, 468], "12000": 470, "effective_rank": [471, 474], "tail_strength": [471, 474], "bell": [471, 980, 982, 984, 985], "fat": [471, 474], "crawl": [471, 876], "return_ind": 473, "make_low_rank_matrix": 474, "4967": 474, "1382": 474, "6476": 474, "523": 474, "2341": 474, "4694": 474, "5425": 474, "579": 474, "7674": [474, 979], "737": 474, "4017": 474, "data_transpos": [476, 986, 988], "norm_diag": 477, "make_spd_matrix": 477, "celeux": 478, "el": [478, 985, 987], "anbari": 478, "marin": 478, "frequentist": 478, "n_dim": [479, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575], "marsland": 480, "vuw": 480, "nz": 480, "marslast": 480, "ch6": 480, "code_init": [481, 495], "dict_init": [481, 487, 495, 496], "callback": [481, 487, 489, 495, 496, 797, 897, 952, 988], "split_sign": [481, 487, 492], "transform_max_it": [481, 487, 488, 492, 982], "_fro": [481, 487, 495, 496, 596, 597, 602, 610, 611, 612, 631], "lasso_cd": [481, 487, 492, 498], "invok": [481, 487, 489, 495, 496, 517, 519, 520, 769, 844, 984], "error_": [481, 493], "minibatchsparsepca": [481, 483, 487, 490, 492, 493, 495, 496, 972, 973, 983, 985, 986, 987, 988], "sierra": [481, 487], "icml09": [481, 487], "x_hat": [481, 487], "noise_variance_init": 482, "quartimax": [482, 984], "loglike_": 482, "barber": 482, "bishop": [482, 484, 491, 690, 744, 927, 932, 946], "get_covari": [482, 484, 491], "unmixing_matrix": 483, "whitening_": 483, "kpca": [483, 484, 485, 967, 968, 972], "unsaf": 484, "singular_values_": [484, 491, 494, 979], "var_": [484, 786, 828, 985], "574": [484, 491], "miketip": [484, 491], "mppca": [484, 491], "n_samples_seen_": [484, 817, 818, 828, 980], "batch_size_": 484, "ross": [484, 557, 558, 947, 986, 987], "vision": [484, 707, 708, 923, 927, 929, 947, 951, 955, 973], "141": [484, 847, 932], "toronto": [484, 594, 804], "dross": 484, "ivt": 484, "rosslimlinyang_ijcv": 484, "karhunen": 484, "loev": 484, "levi": [484, 979], "lindenbaum": 484, "1371": 484, "1374": 484, "abstain": 484, "holub": 484, "opportun": [484, 945], "golub": [484, 786, 828], "x_spars": [484, 902, 905], "sigma2": [484, 491], "x_origin": [484, 489, 491, 493, 494, 580, 839, 840], "check_input": [484, 498, 596, 597, 602, 610, 611, 612, 631, 637, 855, 856, 857, 858, 980], "remove_zero_eig": [485, 974, 981], "x_fit_": [485, 593], "eigenvalues_": [485, 985], "eigenvectors_": [485, 985], "dual_coef_": [485, 593, 849, 850, 851, 852, 853, 946, 976], "x_transformed_fit_": 485, "nathan": [485, 980, 984, 987], "gunnar": [485, 884], "tropp": [485, 491], "217": [485, 491], "288": [485, 491], "vladimir": [485, 884, 927, 982, 986], "rokhlin": [485, 491, 884], "tygert": [485, 491, 884], "learning_decai": 486, "evaluate_everi": 486, "perp_tol": 486, "mean_change_tol": 486, "max_doc_update_it": 486, "kappa": [486, 666], "tau_0": 486, "pseudocount": [486, 980], "exp_dirichlet_component_": 486, "n_batch_iter_": 486, "bound_": 486, "doc_topic_prior_": 486, "topic_word_prior_": 486, "franci": [486, 608, 927, 978], "onlineldavb": 486, "chong": 486, "00360392": 486, "25499205": 486, "0036211": 486, "64236448": 486, "09541846": 486, "15297572": 486, "00362644": 486, "44412786": 486, "39568399": 486, "003586": 486, "vb": 486, "sub_sampl": 486, "doc_topic_distr": [486, 979], "fresh_restart": 488, "fresh_restarts_max_it": 488, "_w": [488, 490, 497], "_ratio": [488, 490, 497], "_h": [488, 490, 497], "fresh": [488, 952, 982], "reconstruction_err_": [488, 490], "andrzej": [488, 490, 497], "anh": [488, 490, 497], "ieic": [488, 490, 497], "708": [488, 490, 497, 699], "721": [488, 490, 497], "waspa": 488, "ridge_alpha": [489, 493, 979], "power_iteration_norm": [491, 494, 883, 884, 986], "500x500": 491, "lu": [491, 494, 883, 884, 978, 979, 980, 981], "n_samples_": 491, "royal": [491, 577, 824, 835, 945], "methodologi": [491, 821, 921, 931, 955], "611": 491, "622": 491, "9924": 491, "30061": 491, "54980": 491, "00755": 491, "99244": 491, "ascontiguousarrai": 491, "sparse_encod": [492, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 632, 633, 634, 635, 636, 972, 979, 980, 982, 986], "u_init": 493, "v_init": 493, "9666": 493, "oversampl": [494, 972], "indeterminaci": 494, "x_dens": 494, "0157": 494, "0512": 494, "0499": 494, "0479": 494, "0453": 494, "2102": 494, "2410": 494, "5981": 494, "5420": 494, "4486": 494, "3288": 494, "method_max_it": [495, 496, 982], "dict_learning_onlin": [495, 973, 982, 985, 986], "return_cod": 496, "iter_offset": [496, 986], "return_inner_stat": [496, 986], "inner_stat": [496, 986], "update_h": 497, "_n_compon": 497, "hal": [497, 608, 707, 708, 929], "copy_cov": 498, "orthogonal_mp": [498, 614, 615, 636, 927], "eigen": [499, 623, 641, 645, 925, 978, 981], "sum_k": [499, 947], "prior_k": 499, "c_k": 499, "priors_": [499, 500], "scalings_": [499, 500], "xbar_": 499, "reg_param": 500, "scaling_": 500, "colinear": 500, "rotations_": 500, "n_classes_": [501, 503, 505, 507, 509, 514, 560, 776, 777, 855, 857, 973, 982, 984], "class_prior_": [501, 786], "n_outputs_": [501, 502, 507, 508, 514, 515, 516, 805, 806, 855, 856, 857, 858], "dummy_clf": 501, "constant_": 502, "dummy_regr": 502, "base_estimator_": [503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 560, 844, 987], "983": [503, 677], "dok": [503, 504, 815, 985], "staged_decision_funct": [503, 509, 511], "staged_scor": [503, 504], "7972": 504, "9771": 504, "estimators_samples_": [505, 506, 513, 978, 980, 983], "estimators_features_": [505, 506, 513], "oob_decision_function_": [505, 507, 514], "oob_prediction_": [506, 508, 515], "8720": [506, 980], "min_weight_fraction_leaf": [507, 508, 509, 510, 514, 515, 516, 855, 856, 857, 858, 947, 975, 978, 979], "min_impurity_decreas": [507, 508, 509, 510, 514, 515, 516, 855, 856, 857, 858, 947, 979], "shannon": [507, 514, 855, 857, 928, 947], "unlimit": [507, 508, 509, 510, 514, 515, 516, 855, 856, 857, 858], "n_t": [507, 508, 509, 510, 514, 515, 516, 855, 856, 857, 858], "n_t_r": [507, 508, 509, 510, 514, 515, 516, 855, 856, 857, 858], "right_impur": [507, 508, 509, 510, 514, 515, 516, 855, 856, 857, 858], "n_t_l": [507, 508, 509, 510, 514, 515, 516, 855, 856, 857, 858], "left_impur": [507, 508, 509, 510, 514, 515, 516, 855, 856, 857, 858], "balanced_subsampl": [507, 514, 980], "subtre": [507, 508, 509, 510, 514, 515, 855, 856, 857, 858, 947], "unprun": [507, 508, 514, 515, 855, 856, 857, 858], "x_leav": [507, 508, 509, 510, 514, 515, 516, 855, 856, 857, 858], "n_nodes_ptr": [507, 508, 514, 515, 516], "friedman_ms": [508, 509, 510, 515, 856, 858], "extratreeregressor": [508, 513, 516, 857, 937, 981, 982, 983, 985, 986, 987], "2727": 508, "dummyestim": [509, 510], "eras": [509, 510, 596, 602, 608, 610, 612, 616, 617, 618, 626, 627, 628, 805, 806], "oob_scores_": [509, 510, 988], "init_": [509, 510], "init_estim": [509, 510], "max_features_": [509, 510, 547, 855, 856, 857, 858, 986], "_fit_stag": [509, 510], "crossentropi": 511, "deepest": [511, 512, 983], "reserv": [511, 512, 955, 957], "no_interact": [511, 512, 987], "do_early_stopping_": [511, 512], "n_trees_per_iteration_": [511, 512], "validation_score_": [511, 512], "is_categorical_": [511, 512], "n_trees_per_iter": 511, "longerr": 513, "max_samples_": 513, "fei": [513, 937], "ting": [513, 937, 980, 981], "ming": [513, 937, 976, 980, 981, 982, 986], "zhou": [513, 589, 843, 937, 980], "zhi": [513, 937], "hua": [513, 937], "icdm": [513, 937], "eighth": [513, 937], "tkdd": 513, "n_left": 513, "32987858": 515, "n_out": 516, "one_hot_encoder_": 516, "extratreeclassifi": [516, 858, 932, 976, 981, 982, 983, 985, 986, 987], "moosmann": 516, "trigg": 516, "juri": 516, "random_tre": 516, "x_sparse_embed": 516, "randomtreesembedding_": 516, "final_estimator_": [517, 518], "named_estimators_": [517, 518, 519, 520, 980, 982], "named_estim": [517, 518, 519, 520], "parameter_nam": [517, 518, 519, 520], "new_valu": [517, 518, 519, 520], "linearsvr": [518, 853, 976, 978, 983], "flatten_transform": [519, 979], "le_": 519, "eclf1": 519, "array_equ": [519, 979], "eclf2": 519, "eclf3": 519, "maj": 519, "avg": [519, 654, 663, 931, 962, 966], "probabilities_or_label": 519, "n_regressor": 520, "r1": 520, "r3": 520, "er": 520, "with_traceback": [521, 522, 523, 524, 525, 526, 527, 528], "__traceback__": [521, 522, 523, 524, 525, 526, 527, 528], "current_sklearn_vers": 526, "repr": [527, 983, 984, 986], "linter": 529, "spam": [531, 659, 690, 783, 931, 933, 955], "feature_names_": 531, "xa": 531, "dict_typ": 531, "conform": [531, 578, 776, 777, 931, 951, 952, 979, 985], "1048576": [532, 539], "non_neg": [532, 979], "eleph": 532, "bird": [532, 668, 703, 931], "patch_height": [533, 534, 537], "patch_width": [533, 534, 537], "pe": 533, "pe_tran": 533, "545706": 533, "image_height": [533, 534, 537], "image_width": [533, 534, 537], "n_channel": [533, 534, 537], "n_patch": [533, 534, 537], "272214": 534, "230": 534, "243": 534, "215": 534, "244": 534, "n_z": 535, "return_a": [535, 536, 975], "_coo": [535, 536], "image_s": 537, "strip_acc": [538, 539, 541], "nfkd": [538, 539, 541, 982], "unicodedata": [538, 539, 541], "regexp": [538, 539, 541], "min_n": [538, 539, 541, 972], "max_n": [538, 539, 541, 972], "fixed_vocabulary_": [538, 541], "stop_words_": [538, 541], "delattr": [538, 541, 984], "vectorizer2": 538, "raw_docu": [538, 541], "get_stop_word": [538, 539, 541], "x_inv": [538, 541], "con": 539, "yates2011": 540, "baeza": [540, 679, 975], "yate": [540, 679], "ribeiro": [540, 679, 985], "neto": [540, 679], "addison": [540, 679], "weslei": [540, 679], "mrs2008": 540, "118": 540, "tfid": 540, "22314355": 540, "51082562": 540, "91629073": 540, "_check_stop_list": 541, "pvalu": [542, 545, 546, 548, 549, 550, 773], "k_best": [542, 844, 944], "fdr": 542, "fwe": 542, "iff": [542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 819], "retent": [542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553], "n_selected_featur": [542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553], "n_original_featur": [542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553], "attrgett": [543, 547], "barnhil": [543, 544], "vapnik": [543, 544], "389": [543, 544, 966], "422": [543, 544, 675, 705, 931], "n_subsets_of_featur": 544, "narrai": 544, "benjamini": [545, 978, 979], "hochberg": [545, 978, 979], "false_discovery_r": 545, "norm_ord": [547, 979], "threshold_": [547, 979], "87": [547, 617, 737, 746, 824, 835, 931, 966], "3252302": 547, "83462377": 547, "49750423": 547, "55245": 547, "half_cal": 547, "half_selector": 547, "unspecifi": [549, 550, 748, 928], "_get_support_mask": 551, "n_features_to_select_": 552, "variances_": 553, "weed": 554, "p_valu": [554, 555, 556], "f_statist": [555, 556], "force_finit": [556, 559, 677, 734, 931, 986], "pearson": [556, 559, 985], "discrete_featur": [557, 558], "essenc": [557, 558, 692, 928, 931], "hardli": [557, 558], "kraskov": [557, 558], "stogbauer": [557, 558], "grassberg": [557, 558], "phy": [557, 558], "kozachenko": [557, 558], "leonenko": [557, 558], "probl": [557, 558], "peredachi": [557, 558], "correlation_coeffici": 559, "fmin_l_bfgs_b": [560, 561], "max_iter_predict": 560, "copy_x_train": [560, 561], "one_vs_rest": [560, 932], "compoundkernel": [560, 986], "obj_func": [560, 561], "initial_theta": [560, 561], "theta_opt": [560, 561], "func_min": [560, 561], "_posterior_mod": 560, "log_marginal_likelihood_value_": [560, 561], "9866": [560, 569, 572], "83548752": 560, "03228706": 560, "13222543": 560, "79064206": 560, "06525643": 560, "14410151": 560, "clone_kernel": [560, 561, 982], "n_kernel_param": [560, 561], "log_likelihood_gradi": [560, 561], "x_train_": 561, "y_train_": 561, "3680": [561, 564, 575], "592": [561, 564, 575, 938], "316": [561, 564, 575, 824], "y_cov": 561, "n_samples_x": [561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 649, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 723, 724, 725, 726, 727, 728, 729, 730], "requires_vector_input": [562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575], "51292546": 562, "09861229": [562, 941], "n_samples_i": [562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 649, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 723, 724, 725, 726, 727, 728, 729, 730], "n_kernel": 562, "k_gradient": [562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575], "k_diag": [562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575], "hyperparameter_constant_valu": 563, "3696": 563, "606": [563, 778, 932], "hyperparameter_sigma_0": 564, "edward": [564, 569, 572, 975, 980, 981, 982, 983, 987], "hyperparameter_length_scal": [565, 569, 572, 573], "hyperparameter_period": 565, "0144": 565, "457": 565, "3894": 565, "3467": 565, "419": 566, "635": 566, "559": 566, "namedtupl": 567, "maxsiz": 567, "mat\u00e9rn": 569, "appr": 569, "8513": 569, "0368": 569, "1117": 569, "8086": [569, 979], "0693": 569, "1220": 569, "gamma_bound": 570, "pairwise_kernels_kwarg": 570, "additive_chi2": [570, 588, 714, 723], "pairwise_kernel_funct": [570, 593, 723], "hyperparameter_gamma": 570, "9733": [570, 573], "8880": 570, "05663": 570, "05532": 570, "8676": [570, 979], "07073": 570, "06165": 570, "__mul__": 571, "8354": [572, 979], "03228": 572, "1322": 572, "7906": [572, 599], "0652": 572, "1441": 572, "hyperparameter_alpha": 573, "8881": 573, "0566": 573, "05518": 573, "8678": 573, "0707": 573, "0614": 573, "hyperparameter_noise_level": 575, "initial_strategi": 577, "imputation_ord": [577, 982], "skip_complet": 577, "min_valu": [577, 983, 984], "max_valu": [577, 983, 984], "keep_empty_featur": [577, 578, 580, 921, 987], "nullabl": [577, 578, 579, 580, 983, 987], "na": [577, 578, 579, 580, 718, 727, 865, 867, 868, 982, 983, 986, 987], "known_val": 577, "Nearness": 577, "arab": 577, "broadcast": 577, "missingind": [577, 578, 580, 921, 980, 981, 982, 986, 988], "initial_imputer_": 577, "imputation_sequence_": 577, "feat_idx": 577, "neighbor_feat_idx": 577, "n_features_with_missing_": 577, "indicator_": [577, 578, 580], "knp": 577, "stef": [577, 921], "buuren": [577, 921], "karin": [577, 921], "groothui": [577, 921], "oudshoorn": [577, 921], "buck": 577, "1960": [577, 666], "302": 577, "306": 577, "imp_mean": [577, 580], "9584": [577, 979], "nan_euclidean": [578, 711, 727], "_pairwise_cal": 578, "kwd": [578, 720, 723, 727, 730, 739, 740], "olga": [578, 921], "troyanskaya": [578, 921], "cantor": [578, 921], "gavin": [578, 921], "sherlock": [578, 921], "pat": [578, 921], "botstein": [578, 921], "russ": [578, 921], "altman": [578, 921], "bioinformat": [578, 921], "520": [578, 797, 921, 934], "n_output_featur": 578, "error_on_new": 579, "features_": [579, 921], "n_missing_featur": 579, "x2_tr": 579, "n_features_with_miss": 579, "statistics_": 580, "n_features_missing_ind": 580, "x_imput": 580, "n_features_out": 580, "quadcontourset": 581, "quadmesh": 581, "feature_1": [581, 860], "feature_2": 581, "nicer": 581, "overwrit": [581, 957, 972, 983], "pd_result": 582, "target_idx": 582, "decil": [582, 983], "pdp_lim": 582, "is_categor": 582, "nonexist": 582, "deciles_vlines_": 582, "vlines_": 582, "deciles_hlines_": 582, "bars_": 582, "heatmaps_": 582, "ice_lines_kw": 582, "pd_line_kw": 582, "contour_kw": 582, "disp1": 582, "disp2": 582, "pdp_line_kw": 582, "bar_kw": 582, "heatmap_kw": 582, "seq": 583, "n_values_feature_j": 583, "bre": [584, 947], "4666": 584, "2211": 584, "x_min_": 585, "x_max_": 585, "n_threshold": [585, 676, 731, 738], "stepwis": [585, 604, 605, 606, 632, 633, 927], "increasing_": 585, "isotonic_regress": [585, 985], "secondari": [585, 976], "leeuw": 585, "1977": 585, "nilotp": [585, 587], "chakravarti": [585, 587], "303": 585, "308": 585, "pava": 585, "hornik": 585, "mair": 585, "kruskal": [585, 640, 644, 928], "psychometrica": 585, "iso_reg": 585, "8628": 585, "7256": 585, "isotonicregression0": 585, "increasing_bool": 586, "fisher_transform": 586, "sample_step": 588, "sample_interv": 588, "sample_interval_": [588, 988], "skewedchi2sampl": [588, 589, 590, 591, 923, 979, 986, 987], "chi2_kernel": [588, 592, 707, 714, 929, 973], "additive_chi2_kernel": [588, 708, 714, 923], "vedaldi": [588, 923], "zisserman": [588, 923, 931], "chi2sampl": 588, "9499": 588, "component_indices_": [589, 985], "normalization_": 589, "additivechi2sampl": [589, 590, 591, 592, 707, 708, 923, 986, 988], "kernel_metr": [589, 590, 591, 592], "seeger": 589, "mahdavi": 589, "jin": [589, 983, 984], "data_transform": 589, "9987": 589, "fft": 590, "indexhash": 590, "bithash": 590, "indexhash_": 590, "bithash_": 590, "kitchen": [591, 923], "sink": [591, 923], "random_offset_": [591, 592], "random_weights_": [591, 592], "rahimi": [591, 923], "benjamin": [591, 974, 975, 983, 984, 985, 986, 987], "recht": [591, 923], "berkelei": [591, 855, 856], "brecht": 591, "rah": 591, "rbf_featur": [591, 923], "skewed": [592, 979], "secant": 592, "hyperbol": [592, 805, 806, 929, 935], "fuxin": 592, "catalin": 592, "ionescu": [592, 923, 982], "cristian": 592, "sminchisescu": [592, 923], "chi2_featur": 592, "2c": [593, 602, 622, 623, 624, 625, 637, 923], "murphi": [593, 924], "492": [593, 924, 964], "493": [593, 847, 924], "alpha_1": [594, 595, 927], "alpha_2": [594, 595, 927], "lambda_1": [594, 595, 927], "lambda_2": [594, 595, 927], "threshold_lambda": 594, "x_offset_": [594, 595, 984], "x_scale_": [594, 595, 984], "mackai": [594, 595, 927], "ashra": 594, "salakhutdinov": [594, 797, 934], "lectur": [594, 923, 950], "utstat": 594, "rsalakhu": 594, "sta4273": 594, "lecture2": 594, "computed_scor": 595, "appendix": [595, 626, 927, 941], "wipf": [595, 927], "nagarajan": [595, 927], "2_2": [596, 597, 602, 603, 604, 605, 606, 610, 611, 612, 613, 622, 631, 632, 633, 634], "glmnet": [596, 597, 972], "sparse_coef_": [596, 602, 610, 612, 972], "dual_gap_": [596, 597, 602, 603, 610, 611, 612, 613, 985], "max_j": [596, 602], "w_j": [596, 602, 931, 945], "ext": 596, "83816048": 596, "55968825": 596, "451": 596, "coef_init": [596, 597, 602, 603, 610, 611, 612, 613, 616, 618, 626, 627, 628, 631, 634], "mono": [596, 597, 602, 603, 610, 611, 612, 613, 631, 634], "_21": [596, 597, 602, 603, 610, 611, 612, 613, 631, 634], "sum_j": [596, 597, 602, 603, 610, 611, 612, 613, 631, 634, 927, 931, 936], "alpha_min": [596, 597, 600, 602, 603, 604, 606, 610, 611, 612, 613, 631, 632, 633, 634], "alpha_max": [596, 597, 602, 603, 610, 611, 612, 613, 631, 634], "ndim": [596, 597, 602, 603, 610, 611, 612, 613, 631, 634, 867, 868], "multitaskelasticnet": [596, 597, 602, 611, 612, 613, 631, 927, 972, 979, 980, 983, 985], "multitaskelasticnetcv": [596, 597, 602, 610, 612, 613, 631, 927, 975, 982, 983, 985], "l1_ratio_": [597, 609, 611], "n_l1_ratio": [597, 609, 611, 975], "199": [597, 700, 946], "398": [597, 966], "unpen": [598, 619, 630, 927], "raphson": [598, 619, 630], "g_j": [598, 619, 630], "773": [598, 786], "066": 598, "896": 598, "483": 598, "795": 598, "pg_i": 599, "scale_": [599, 817, 818, 826, 828, 837, 941, 977], "outliers_": 599, "elvezio": [599, 927], "ronchetti": [599, 927], "concomit": [599, 927], "owen": [599, 981, 982], "hybrid": [599, 951], "statweb": [599, 632, 633], "hhu": [599, 981], "284": 599, "806": 599, "7200": 599, "4923": 599, "1698": 599, "0106": 599, "9221": 599, "0226": 599, "fit_path": [600, 604, 605, 606, 632, 633], "jitter": [600, 604, 983], "coef_path_": [600, 601, 604, 605, 927], "active_": [600, 601, 604, 605], "larscv": [600, 615, 632, 633, 979, 985], "1111": [600, 606], "max_n_alpha": [601, 605], "n_cv_alpha": [601, 605], "cv_alpha": [601, 605], "lassolar": [601, 602, 603, 605, 606, 613, 614, 615, 632, 633, 634, 927, 964, 972, 973, 975, 979, 982, 983, 985], "9996": 601, "2961": 601, "154": [601, 932], "3996": 601, "2_f": 602, "_11": 602, "9993": [603, 605, 980], "4951": 603, "2_fro": [603, 612, 613, 634], "coef_path": [603, 613, 634], "46874778": [603, 613, 634], "2159048": [603, 613, 634], "4425765": [603, 613, 634], "23689075": [603, 613, 634], "coef_path_lar": [603, 613, 634], "coef_path_continu": [603, 613, 634], "interp1d": [603, 613, 634], "46915237": [603, 613, 634], "23668876": [603, 613, 634], "congruenc": [604, 605, 606, 632, 633], "fragil": 605, "3972": 605, "4831": 605, "2222": 606, "rank_": 607, "singular_": 607, "maxent": [608, 609, 927], "primal": [608, 609, 627, 847, 848, 945, 946], "synthetic_feature_weight": [608, 609], "ciyou": 608, "byrd": 608, "jorg": [608, 975, 984, 986], "noced": 608, "lui": [608, 973, 975, 976, 980], "iem": 608, "lbfgsb": 608, "schmidt": [608, 927, 975], "le": [608, 816, 922, 927, 934, 942, 944, 980, 984, 985], "roux": [608, 927, 944], "00860051": 608, "defazio": [608, 927], "lacost": [608, 927], "hsiang": [608, 976], "fu": [608, 976], "fang": [608, 979, 980], "lan": [608, 987], "chih": [608, 977], "jen": [608, 980], "maxent_du": 608, "cs_": 609, "l1_ratios_": 609, "coefs_paths_": [609, 982], "coefs_path": 609, "n_l1_ratios_": 609, "w_ij": 610, "eps_": [610, 612], "45663524": 610, "45612256": 610, "0872422": 610, "fro_2": [611, 613], "multitasklassocv": [611, 975, 982, 983, 985], "52875032": 611, "46958558": 611, "00166409": 611, "60809415": 612, "94592424": 612, "41888636": 612, "87382323": 612, "9994": 613, "5713": 613, "153": 613, "7971": 613, "9015": [613, 980], "n_nonzero_coefs_": [614, 615], "orthogonal_mp_gram": [614, 615, 635, 986], "mallat": [614, 635, 636, 927], "3397": [614, 635, 636], "3415": [614, 635, 636], "papier": [614, 635, 636], "mallatpursuit93": [614, 635, 636], "rubinstein": [614, 635, 636], "zibulevski": [614, 635, 636], "elad": [614, 635, 636], "technion": [614, 635, 636, 927], "ronrubin": [614, 635, 636, 927], "ksvd": [614, 635, 636, 927], "9991": [614, 615, 980], "3854": [614, 615], "previous_loss": [616, 617, 618, 627], "pa": [616, 617, 844, 927, 931, 944], "preset": [616, 618, 626, 935], "t_": [616, 617, 618, 626, 627, 628, 805, 806, 945], "loss_function_": [616, 618, 626, 627], "volume7": [616, 617], "crammer06a": [616, 617], "crammer": [616, 617, 684, 927, 931, 946], "dekel": [616, 617, 927], "keshat": [616, 617, 927], "shalev": [616, 617, 927, 945], "shwartz": [616, 617, 927, 945], "singer": [616, 617, 684, 927, 931, 945, 946], "26642044": 616, "45070924": 616, "67251877": 616, "64185414": 616, "84127814": 616, "intercept_init": [616, 618, 626, 628], "y_all": [616, 618, 626, 776, 777, 805], "epsilon_insensit": [617, 626, 628, 848, 927, 945], "squared_epsilon_insensit": [617, 626, 628, 848, 927, 978], "48736655": 617, "18818427": 617, "59122734": 617, "94731329": 617, "02306214": 617, "eta0": [618, 626, 627, 628, 945], "lossfunct": [618, 626, 627, 981], "therein": 618, "939": [618, 961], "990": [619, 931], "088": [619, 939], "676": 619, "875": 619, "solver_opt": 620, "ipm": 620, "linprog": [620, 927], "is_data_valid": [621, 927], "is_model_valid": [621, 927], "max_trial": [621, 927], "max_skip": 621, "stop_n_inli": [621, 927], "stop_scor": [621, 927], "stop_prob": 621, "mad": [621, 978], "costlier": 621, "n_trials_": 621, "n_skips_no_inliers_": 621, "n_skips_invalid_data_": 621, "n_skips_invalid_model_": 621, "sri": [621, 927, 979, 980], "bmva": 621, "bmvc": [621, 927], "paper355": 621, "9885": 621, "9417": 621, "15000": [622, 637, 805, 806], "gcv_mode": [623, 974], "store_cv_valu": [623, 625, 980, 983], "alpha_per_target": [623, 984], "cv_values_": [623, 625], "ridgeclassifiercv": [623, 624, 737, 931, 932, 980, 982, 983, 985, 986], "5166": 623, "gcv": [623, 625], "9595": 624, "9630": 625, "power_t": [626, 627, 628, 805, 806, 945], "best_loss": [626, 628], "leon": [626, 627, 628, 972], "bottou": [626, 627, 628, 935, 945], "pow": [626, 627, 628, 805, 806], "dl": 626, "775047": 626, "775151": 626, "justif": 626, "volume2": 626, "zhang02c": 626, "offset_init": 627, "unshifft": 627, "n_subsampl": [629, 873], "breakdown_": 629, "n_subpopulation_": 629, "xin": [629, 927, 980], "dang": [629, 927], "hanxiang": [629, 927], "peng": [629, 927, 978, 979, 980, 982, 984], "xueqin": [629, 927], "hepe": [629, 927], "olemiss": 629, "xdang": 629, "mtse": 629, "9884": 629, "5871": 629, "coeff": 630, "839": 630, "599": 630, "copy_gram": [632, 633, 636], "return_path": [632, 633, 635, 636], "lars_path_gram": [632, 927, 981], "tib": [632, 633], "xgamma": 635, "norms_squar": 636, "copy_xi": 636, "return_intercept": [637, 981], "linearoper": 637, "_preprocess_data": 637, "path_method": [638, 928], "neighbors_algorithm": [638, 639], "arnoldi": [638, 639, 643], "fw": 638, "warshal": [638, 928], "kernel_pca_": 638, "nbrs_": [638, 639], "dist_matrix_": 638, "tenenbaum": [638, 928], "290": [638, 639, 643, 928], "5500": [638, 928], "reconstruction_error": 638, "frobenius_norm": 638, "d_fit": 638, "x_fit": 638, "n_queri": [638, 790, 791, 792, 794, 796, 798, 799, 800], "hessian_tol": [639, 643], "modified_tol": [639, 643], "reconstruction_error_": 639, "rowei": [639, 643, 797, 928, 934], "saul": [639, 643, 928, 979, 980, 982], "2323": [639, 643, 928], "donoho": [639, 643, 928], "grime": [639, 643, 928], "natl": [639, 643, 928], "acad": [639, 643, 928], "5591": [639, 643, 928], "mlle": [639, 643, 928], "zha": [639, 643, 928], "shanghai": [639, 643, 928], "univ": [639, 643, 928], "406": [639, 643, 928], "immers": [640, 644], "nonmetr": [640, 644], "smacof": [640, 987], "stress": [640, 644, 928, 987], "stress_": 640, "dispar": [640, 644, 928], "dissimilarity_matrix_": 640, "psychometrika": [640, 644, 928], "1964": [640, 644, 824, 835, 928], "borg": [640, 644, 928], "groenen": [640, 644, 928], "affinity_matrix": 641, "n_neighbors_": [641, 794], "early_exagger": 642, "min_grad_norm": [642, 978], "square_dist": [642, 984], "der": [642, 646, 928, 975, 976, 980], "maaten": [642, 646, 928], "bhtsne": [642, 979], "opentsn": 642, "abort": 642, "pdist": [642, 649, 727, 730], "pairwise_distance_funct": [642, 646, 727, 730, 934], "barn": [642, 977, 979, 982], "hut": [642, 977, 979, 982], "nlogn": 642, "kl_divergence_": [642, 979], "learning_rate_": [642, 806], "hinton": [642, 797, 804, 805, 806, 928, 934, 935, 936], "2579": 642, "2605": 642, "lvdmaaten": [642, 979], "oct": [642, 718, 928, 934], "3221": [642, 928], "3245": [642, 928], "jmlr_2014": 642, "belkina": [642, 928], "ciccolella": [642, 928], "anno": [642, 928], "halpert": [642, 928], "spidlen": [642, 928], "snyder": [642, 928], "cappion": [642, 928], "kobak": [642, 985], "beren": 642, "transcriptom": 642, "guttman": 644, "norm_laplacian": 645, "drop_first": 645, "nk": 646, "2n": [646, 923, 935], "3k": 646, "cosine_dist": [646, 711, 934, 978], "jarkko": 646, "venna": 646, "samuel": [646, 955, 975, 976, 978, 980, 981, 982, 983, 984, 985, 986], "kaski": 646, "icann": 646, "verlag": 646, "485": 646, "491": 646, "twelth": 646, "pmlr": 646, "384": [646, 848], "391": 646, "im_": 647, "axesimag": 647, "text_": 647, "include_valu": 647, "values_format": [647, 982], "im_kw": [647, 986], "text_kw": [647, 987], "get_metr": 649, "19615242": 649, "euclideandist": 649, "manhattandist": 649, "chebyshevdist": 649, "minkowskidist": [649, 985], "wminkowski": [649, 795, 934, 984, 986], "wminkowskidist": 649, "seuclideandist": 649, "mahalanobisdist": 649, "haversinedist": 649, "arcsin": [649, 713], "hammingdist": 649, "n_unequ": 649, "n_tot": 649, "canberradist": 649, "braycurtisdist": 649, "abbrevi": 649, "ntt": 649, "ntf": 649, "nft": 649, "nff": 649, "nneq": 649, "jaccarddist": 649, "matchingdist": 649, "dicedist": 649, "kulsinskidist": [649, 988], "rogerstanimotodist": 649, "russellraodist": 649, "sokalmichenerdist": 649, "sokalsneathdist": 649, "pyfunc": [649, 934], "pyfuncdist": 649, "dist_to_rdist": 649, "surrog": [649, 955], "cdist": [649, 985], "rdist_to_dist": 649, "rdist": 649, "predictionrecalldisplai": [650, 931], "errors_lines_": 651, "with_error": 651, "scatter_": 651, "drop_intermedi": [652, 738], "balanced_accuracy_scor": [653, 736, 931, 980], "imperfectli": [653, 683, 931], "label_tru": [654, 667, 686, 704, 706, 742], "upperlimit": 654, "nat": [654, 704, 706, 986], "expected_ri": 655, "discord": 655, "hubert1985": 655, "1007": 655, "2fbf01908075": 655, "steinley2004": 655, "wk": 655, "rand_index": 655, "adjusted_rand_index": 655, "chacon": 655, "chac\u00f3n": 655, "rastrojo": 655, "balanced_accuraci": [658, 931, 980], "brodersen": 658, "ong": 658, "stephan": [658, 975, 981, 982, 984], "buhmann": 658, "20th": 658, "3121": 658, "kelleh": [658, 931], "aoif": [658, 931], "arci": [658, 931], "625": 658, "y_true_categor": [659, 931], "037": 659, "calinski": [660, 978], "harabasz": 660, "allow_non": 661, "thrown": [661, 981, 982], "tn": [662, 668, 931], "negative_class": 662, "zebra": 662, "output_dict": [663, 980, 984], "zero_divis": [663, 678, 679, 687, 732, 733, 736, 982, 984], "precision_recall_fscore_support": [663, 678, 679, 733, 736, 931, 976, 980, 982], "multilabel_confusion_matrix": [663, 678, 679, 687, 733, 736, 931, 981], "conting": [664, 665, 680, 704, 978], "n_classes_tru": [664, 704], "n_classes_pr": [664, 704], "cohen": [666, 980], "p_o": 666, "p_e": 666, "artstein": 666, "poesio": 666, "linguist": [666, 844, 944], "555": 666, "596": 666, "label_pr": [667, 685, 686, 704, 706, 742], "ant": [668, 703, 931], "a_row": 669, "a_column": 669, "b_row": 669, "b_column": 669, "tsoumaka": [670, 683, 689, 931], "kataki": [670, 683, 689, 931], "vlahava": [670, 689, 931], "handbook": [670, 689, 931], "667": [670, 689, 931], "685": [670, 689, 931], "raw_valu": [671, 672, 677, 694, 695, 697, 699, 700, 702, 734, 931, 980, 983], "wainwright": [671, 672, 673], "su": [671, 672, 673], "statlearnspars": [671, 672, 673], "764": [671, 931], "691": 671, "8125": 671, "57142857": 671, "d2": 672, "d2_absolute_error_scor": [672, 931, 986], "koenker": [672, 927], "roger": [672, 979, 980, 984], "jos\u00e9": [672, 975, 985], "772": 672, "045": 672, "285": 673, "487": 673, "630": 673, "bouldin": 674, "farther": 674, "log_bas": 675, "ignore_ti": [675, 705], "ndcg": [675, 705, 931, 979], "ndcg_score": [675, 931, 979, 982, 987], "sharper": 675, "discounted_cumulative_gain": 675, "dcg": [675, 705, 931, 979], "jarvelin": [675, 705, 931], "kekalainen": [675, 705, 931], "colt": [675, 705, 931], "mcsherri": [675, 705, 931], "najork": [675, 705, 931], "european": [675, 705, 931], "421": [675, 705, 931], "groud": [675, 705], "true_relev": [675, 705], "propabl": 676, "imperfect": [677, 734, 931, 974], "variance_weight": [677, 734, 931], "n_unique_label": [678, 679, 687, 732, 733, 736, 895], "fbeta_scor": [678, 691, 732, 931, 974, 975, 976, 977, 982], "undefinedmetricwarn": [678, 679, 732, 733, 736, 981], "66666667": [678, 731, 798, 941], "lend": [679, 955], "327": [679, 964], "328": 679, "fowlk": [680, 978], "mallow": [680, 978], "get_scorer_nam": [681, 931, 986], "forgiv": 683, "upperbound": 683, "grigorio": 683, "ioanni": 683, "wareh": 683, "septemb": [683, 931, 972, 975, 978, 980, 985], "pred_decis": [684, 931, 985], "disagre": [684, 938], "kobi": 684, "yoram": 684, "265": [684, 783, 787, 933], "AND": 684, "denero": 684, "gluster": 685, "v_measur": [685, 742], "6666": [687, 931, 978], "5833": [687, 931], "lrap": [688, 931], "416": [688, 931], "209": [690, 824], "21616": 690, "needs_proba": [691, 981], "needs_threshold": [691, 931], "ftwo_scor": [691, 931], "mcc": [692, 931, 986], "baldi": 692, "brunak": 692, "chauvin": 692, "andersen": [692, 986], "nielsen": [692, 980], "gorodkin": 692, "jurman": 692, "riccadonna": 692, "furlanello": 692, "cen": 692, "mape": [695, 931], "3273": 695, "5515": 695, "6198": 695, "112589990684262": 695, "0568": 696, "4260": [698, 701], "375": [699, 931], "612": 699, "822": 699, "41666667": 699, "825": 699, "msle": [700, 931], "rmsle": 700, "039": [700, 730, 931], "044": [700, 931], "00462428": 700, "08377444": 700, "060": 700, "samplewis": [703, 931], "mcm": [703, 931], "mcm_": 703, "multi_confus": 703, "normalized_discounted_cumulative_gain": 705, "dcg_score": [705, 931, 979, 982], "kernel_matrix": [707, 708, 715, 725], "marszalek": [707, 708, 929], "lazebnik": [707, 708, 929], "schmid": [707, 708, 929], "ouvert": [707, 708, 929], "00171412": [707, 708, 929], "cosine_similar": [709, 714, 929, 977], "dense_output": [710, 716, 840, 885, 980], "linear_kernel": [710, 714, 929, 980], "haversine_dist": [711, 981], "y_norm_squar": 712, "x_norm_squar": [712, 977], "catastroph": [712, 952], "paired_dist": [712, 718, 727, 976], "41421356": [712, 718, 934], "ezeiza": 713, "airport": 713, "bueno": 713, "argentina": 713, "gaull": 713, "franc": 713, "bsa": 713, "83333": 713, "5166646": 713, "0083899664": 713, "53844117956": 713, "bsas_in_radian": 713, "paris_in_radian": 713, "6371000": 713, "kilomet": 713, "11099": 713, "54035582": 713, "polynomial_kernel": [714, 929], "rbf_kernel": [714, 929, 976], "laplacian_kernel": [714, 929, 977], "sigmoid_kernel": [714, 929], "kernal_metr": 714, "sum_over_featur": [717, 972, 987], "componentwis": 717, "sq": 718, "dixon": [718, 982, 983], "cybernet": 718, "621": 718, "ieeexplor": 718, "4310090": 718, "filter_param": 723, "jth": [723, 727], "tanh": [726, 805, 806, 929, 946], "force_all_finit": [727, 865, 867, 868, 983, 986], "distance_metr": [727, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802], "metric_kwarg": [728, 729], "reduce_func": [730, 983], "d_chunk": 730, "sought": 730, "neigh": [730, 790, 791, 792, 794, 796, 798, 799, 800], "gen": 730, "probas_pr": 731, "warn_for": 732, "shantanu": 732, "godbol": 732, "sunita": 732, "sarawagi": 732, "pig": 732, "948": [734, 931], "938": [734, 931, 961], "max_fpr": [737, 931, 980], "provost": [737, 931], "ceder": [737, 931], "stern": [737, 931], "fawcett": [737, 738, 931], "874": [737, 738, 931], "generalis": [737, 931, 952], "multioutputclassifi": [737, 777, 779, 781, 931, 979, 981, 982, 983, 984], "86": [737, 855, 931, 962], "n_samples_a": [739, 740], "mean_prior": 744, "degrees_of_freedom_prior": 744, "verbose_interv": [744, 745], "wishart": 744, "emipr": 744, "precisions_": [744, 745], "precisions_cholesky_": [744, 745, 986], "converged_": [744, 745], "lower_bound_": [744, 745, 980], "weight_concentration_prior_": 744, "weight_concentration_": 744, "mean_precision_prior_": 744, "mean_precision_": 744, "mean_prior_": 744, "degrees_of_freedom_prior_": 744, "degrees_of_freedom_": 744, "covariance_prior_": 744, "hagai": 744, "attia": 744, "bgm": 744, "n_dimens": [744, 745], "log_prob": [744, 745], "weights_init": 745, "precisions_init": [745, 986], "gm": 745, "pre_dispatch": [746, 752, 760, 769, 770, 771, 772, 775, 897, 975], "error_scor": [746, 749, 750, 752, 760, 770, 771, 772, 775, 920, 976, 980, 984, 987], "explos": [746, 760, 769, 770, 771], "fitfailedwarn": [746, 749, 750, 752, 760, 770, 771, 772, 775], "param_kernel": [746, 760], "param_degre": 746, "split0_test_scor": [746, 760, 978], "rank_t": 746, "split1_test_scor": [746, 760], "split0_train_scor": [746, 760, 978], "split1_train_scor": [746, 760], "mean_train_scor": [746, 760, 978], "std_train_scor": [746, 760, 978], "split0_test_precis": [746, 760], "mean_train_precis": [746, 760], "best_estim": [746, 749, 750, 760], "scorer_": [746, 749, 750, 760], "n_splits_": [746, 749, 750, 760], "refit_time_": [746, 749, 750, 760, 980], "multimetric_": [746, 749, 750, 760], "parametergrid": [746, 974, 980], "split2_test_scor": 746, "num_sampl": [746, 760, 987], "stratif": [747, 748, 754, 755, 764, 765, 766, 902, 981], "group_kfold": 747, "aggressive_elimin": [749, 750, 920], "r0": [749, 750], "replai": [749, 750], "n_remaining_candidates_": [749, 750], "n_candid": [749, 750, 920], "max_resources_": [749, 750], "min_resources_": [749, 750], "n_required_iterations_": [749, 750], "n_possible_iterations_": [749, 750], "exceed": [749, 750, 978], "n_unique_tick": [752, 772], "n_tick": [752, 772, 775], "errorbar_": 752, "errorbarcontain": 752, "line2d": 752, "fill_between_": 752, "polycollect": 752, "775": [752, 772], "exploit_incremental_learn": [752, 772], "log_scal": 752, "fill_between_kw": 752, "errorbar_kw": 752, "model_selectionkfold": 752, "predispatch": [752, 772, 775], "negat": [752, 931], "neg_": [752, 978], "combinator": 756, "lpo": 756, "param_list": 758, "rounded_list": 758, "89856": 758, "923223": 758, "878964": 758, "038159": 758, "parametersampl": [760, 974, 980, 984], "2652124": 761, "rskf": 762, "36851234": 762, "sizeabl": [763, 766], "sad": [764, 765], "sss": 766, "kth": 767, "checked_cv": 768, "3315057": [770, 771], "08022103": [770, 771], "03531816": [770, 771], "test_r2": 771, "test_auc": 771, "train_r2": 771, "train_auc": 771, "3635": 771, "3573": 771, "6114": 771, "28009951": 771, "3908844": 771, "22784907": 771, "train_sizes_ab": 772, "train_size_ab": 772, "cv_train_scor": 772, "cv_test_scor": 772, "permutation_scor": 773, "n_valu": [775, 980], "pairwise_indices_": 776, "outputcodeclassifi": [776, 777, 979, 984, 988], "label_binarizer_": 777, "multilabel_": [777, 977], "onevsoneclassifi": [777, 778, 973, 975, 976, 978, 979, 981, 984, 986], "code_s": [778, 932], "code_book_": 778, "bakiri": [778, 932], "pict": [778, 932], "order_": [779, 782], "regressorchain": [779, 781, 980, 983, 987], "jess": [779, 932, 985], "pfahring": [779, 932], "geoff": [779, 932], "holm": [779, 932], "eib": [779, 932], "8387": 779, "9431": 779, "4576": 779, "8878": 779, "3684": 779, "2640": 779, "0321": 779, "9935": 779, "0625": 779, "y_decis": 779, "load_linnerud": [781, 978, 983], "force_alpha": [783, 784, 785, 787, 987], "lidston": [783, 784, 785, 787, 933], "class_count_": [783, 784, 785, 786, 787], "class_log_prior_": [783, 784, 785, 787], "feature_count_": [783, 785, 787], "feature_log_prob_": [783, 784, 785, 787], "categoricalnb": [783, 785, 786, 787, 933, 982, 983, 984, 985, 987], "renni": [783, 785, 933, 980], "schuetz": [783, 787], "234": [783, 787, 805, 806, 933], "htmledit": [783, 787, 929], "mccallum": [783, 933], "nigam": [783, 933], "metsi": [783, 933], "androutsopoulo": [783, 933], "palioura": [783, 933], "cea": [783, 933], "predict_joint_log_proba": [783, 784, 785, 786, 787, 987], "min_categori": [784, 984], "n_categori": [784, 822, 941], "category_count_": 784, "n_categories_": 784, "mirror": [785, 920], "mahout": 785, "weka": 785, "feature_all_": 785, "shih": [785, 933], "teevan": [785, 933], "karger": [785, 933], "616": [785, 933, 941], "623": [785, 933], "jrenni": 785, "icml03": 785, "var_smooth": [786, 980], "stan": 786, "levequ": [786, 828], "cstr": 786, "epsilon_": 786, "theta_": [786, 933], "clf_pf": 786, "valid_metr": [788, 789, 934], "random_sampl": [788, 789, 793], "19662693": [788, 789], "29473397": [788, 789], "tree_copi": [788, 789], "query_radiu": [788, 789], "count_onli": [788, 789], "kernel_dens": [788, 789], "94114649": [788, 789], "83281226": [788, 789], "2071716": [788, 789], "two_point_correl": [788, 789], "580": [788, 789], "820": [788, 789], "get_arrai": [788, 789], "get_n_cal": [788, 789], "n_call": [788, 789], "get_tree_stat": [788, 789], "tree_stat": [788, 789], "breadth_first": [788, 789, 793], "return_log": [788, 789], "k_true": [788, 789], "k_ret": [788, 789], "breadth": [788, 789, 793, 955, 974], "dualtre": [788, 789], "sort_result": [788, 789, 796, 798, 799, 800, 984], "radii": [788, 789], "reset_n_cal": [788, 789], "effective_metric_": [790, 791, 792, 794, 796, 798, 799, 800, 934], "callbl": 790, "effective_metric_params_": [790, 791, 792, 794, 796, 798, 799, 800], "outputs_2d_": [790, 798, 982], "nearest_neighbor_algorithm": [790, 798, 799], "333": 790, "n_index": [790, 791, 792, 794, 796, 798, 799], "neigh_dist": [790, 791, 792, 794, 796, 798, 799, 800], "neigh_ind": [790, 791, 792, 794, 796, 798, 799, 800], "nearest_neighbors_algorithm": [791, 796], "nearer": [792, 800, 934], "x_dist_graph": 792, "silverman": [793, 987], "binarytre": [793, 976, 980, 984], "bandwidth_": 793, "log_dens": 793, "52955942": 793, "51462041": 793, "60244657": 793, "logprob": 793, "negative_outlier_factor": 794, "9821": 794, "0370": 794, "3697": 794, "shifted_opposite_lof_scor": 794, "opposite_lof_scor": 794, "narasimhan": 795, "chu": 795, "shrunken": [795, 972], "6567": 795, "6572": 795, "nbr": [796, 934], "neighborsclassifi": [796, 798, 799, 800, 972], "n_features_a": 797, "n_features_b": 797, "goldberg": [797, 934], "neighbourhood": [797, 934], "513": [797, 934], "ncanip": 797, "neighbourhood_components_analysi": 797, "933333": 797, "961904": 797, "outlier_label": [798, 982], "outlier_label_": 798, "33333333": [798, 941], "x_cluster": 800, "warn_when_not_sort": 803, "efficiencywarn": [803, 987], "sml": [804, 936], "pcd": [804, 936], "sweep": 804, "gibb": [804, 936, 951], "intercept_hidden_": 804, "intercept_visible_": 804, "h_samples_": 804, "osindero": [804, 936], "teh": [804, 936], "1527": 804, "1554": 804, "absp": 804, "fastnc": 804, "tieleman": [804, 936], "v_new": 804, "pseudo_likelihood": 804, "relu": [805, 806], "beta_1": [805, 806], "beta_2": [805, 806], "max_fun": [805, 806, 982], "n_layer": [805, 806], "neuron": [805, 806, 929, 935], "tan": [805, 806, 935, 979], "rectifi": [805, 806], "kingma": [805, 806, 935], "diederik": [805, 806, 935, 987], "jimmi": [805, 806, 935, 978, 980], "gradual": [805, 806, 945], "effective_learning_r": [805, 806], "best_loss_": [805, 806, 987], "ot": 805, "best_validation_score_": [805, 806, 987], "validation_scores_": [805, 806, 987], "intercepts_": [805, 806, 935], "n_layers_": [805, 806], "out_activation_": [805, 806], "geoffrei": [805, 806, 935, 983, 984, 985, 986], "connectionist": [805, 806], "glorot": [805, 806], "xavier": [805, 806, 980, 981, 982, 984, 985], "yoshua": [805, 806, 944], "feedforward": [805, 806], "kaim": [805, 806], "delv": [805, 806], "surpass": [805, 806], "imagenet": [805, 806], "log_y_prob": 805, "time_step": 806, "named_transform": [807, 987], "transform_list": 807, "s__p": 808, "n_transformed_featur": 808, "predict_log_proba_param": 808, "y_log_proba": 808, "predict_proba_param": 808, "analyst": 811, "x_tr": [811, 817, 820, 821, 822, 826, 828, 830, 832, 833, 837, 838], "accept_spars": [812, 867, 868, 979], "inv_kw_arg": 812, "pickleabl": [812, 978], "6931": 812, "3862": 812, "onward": [813, 822, 976], "n_bins_": 813, "int_": 813, "regener": 813, "xinv": 813, "tild": [814, 939, 941], "k_fit_rows_": 814, "k_fit_all_": 814, "1299": [814, 941], "1319": [814, 941], "n_samples1": 814, "n_samples2": 814, "k_new": 814, "neg_label": [815, 831], "y_type_": 815, "sparse_input_": 815, "tokyo": [816, 942], "amsterdam": [816, 942], "max_abs_": 817, "x_std": [818, 833, 941], "data_min_": [818, 977], "data_max_": [818, 977], "data_range_": [818, 977], "unwieldi": 819, "fi": 819, "comedi": 819, "y_indic": 819, "yt": 819, "ands": 819, "feature_name_combin": [821, 988], "categories_": [821, 822, 941, 980, 987], "unregular": [821, 843, 964, 981], "intact": [821, 966], "infrequ": [821, 931, 972, 986, 987], "infrequent_if_exist": [821, 941], "x_6": 821, "x_7": 821, "drop_idx_": [821, 983, 987], "drop_idx": 821, "gender_femal": 821, "gender_mal": 821, "group_1": 821, "group_2": 821, "group_3": 821, "drop_enc": [821, 941], "drop_binary_enc": 821, "custom_combin": 821, "custom_fnames_enc": 821, "x0_str_femal": 821, "x0_str_male": 821, "x1_int_1": 821, "x1_int_2": 821, "x1_int_3": 821, "oh": [821, 982], "infrequent_sklearn": [821, 941], "n_encoded_featur": [821, 822], "weren": [822, 981], "bpo": 822, "43475": 822, "lenient": [822, 952], "min_degre": [823, 985], "max_degre": [823, 985], "powers_": 823, "n_output_features_": 823, "nystrom": [823, 981, 982], "featurewis": 824, "power_transform": [824, 836, 980], "biometrika": [824, 835], "954": [824, 835], "959": [824, 835], "386": 824, "707": [824, 835], "ignore_implicit_zero": [825, 836], "landmark": [825, 836, 941], "n_quantiles_": 825, "quantiles_": [825, 941, 982], "references_": 825, "robustscal": [825, 837, 921, 941, 977, 978, 980, 982, 983, 984, 988], "with_cent": [826, 837], "with_scal": [826, 837], "unit_vari": [826, 837, 984], "iqr": [826, 837], "interquartil": [826, 837], "quartil": 826, "75th": 826, "q_min": [826, 837], "q_max": [826, 837], "center_": 826, "robust_scal": [826, 836, 980], "interquartile_rang": 826, "bspline": 827, "n_features_out_": 827, "with_std": [828, 838, 941, 980], "n_samples_seen": 828, "5a": 828, "randal": [828, 976, 986], "242": [828, 972], "247": 828, "ahead": 831, "return_norm": [834, 979], "notimplementederror": [834, 979], "332": 835, "076": 835, "compute_inverse_compon": [839, 840, 943], "inverse_components_": [839, 840, 943, 986], "2759": [839, 840], "afor": [839, 840], "baserandomproject": [839, 840], "ping": [840, 943, 978, 979], "density_": 840, "gaussianrandomproject": [840, 943, 973, 986, 988], "church": [840, 943], "kdd06_rp": 840, "cgi": 840, "uoa": 840, "gr": 840, "opta": 840, "0182": 840, "e2": [841, 927], "93lindenstrauss_lemma": 841, "sanjoi": [841, 943], "anupam": [841, 943, 987], "gupta": [841, 943, 979, 980, 983, 984, 985, 986], "elementari": [841, 943], "663": [841, 939, 943], "11841": [841, 943], "1112658": [841, 943], "7894": [841, 943], "9868": [841, 943], "steadi": [842, 843], "baselabelpropag": [842, 979], "xiaojin": 842, "zoubin": 842, "ghahramani": 842, "cmu": 842, "cald": 842, "carnegi": 842, "mellon": 842, "jerryzhu": 842, "label_prop_model": [842, 843], "clamp": [843, 944], "dengyong": 843, "bousquet": 843, "navin": 843, "lal": 843, "schoelkopf": 843, "termination_condition_": 844, "no_chang": 844, "all_label": 844, "33rd": [844, 944], "acl": [844, 944, 945], "stroudsburg": [844, 944], "196": [844, 944], "crammer_sing": [847, 932, 946, 972], "seldom": 847, "readonli": [847, 848, 985, 987, 988], "raw_coef_": [847, 848], "smo": [847, 848], "526": 847, "679": 847, "1693": 847, "unsur": 848, "582": 848, "023": [848, 939], "522": 848, "class_weight_": [849, 850, 851, 852, 853, 987], "n_sv": [849, 850, 851, 852, 853, 946, 982], "fit_status_": [849, 850, 851, 852, 853], "n_support_": [849, 850, 851, 852, 853, 946, 982], "proba_": [849, 852, 983], "probb_": [849, 852, 983], "shape_fit_": [849, 850, 851, 852, 853], "n_dimensions_of_x": [849, 850, 851, 852, 853], "7798": 851, "0547": 851, "0556": 851, "0561": 851, "7332": 851, "unshift": 851, "impract": 852, "tube": [853, 946], "_tree": [855, 856, 857, 858, 973, 975], "decision_tree_learn": [855, 856, 947], "olshen": [855, 856, 947], "wadsworth": [855, 856, 947], "belmont": [855, 856, 947], "cutler": [855, 856], "cc_home": [855, 856], "htm": [855, 856], "ccp_path": [855, 856, 857, 858], "get_depth": [855, 856, 857, 858, 981], "get_n_leav": [855, 856, 857, 858, 981], "extra_tre": [857, 858], "8947": 857, "decision_tre": [859, 860, 861, 947], "out_fil": [859, 947], "leaves_parallel": 859, "special_charact": [859, 947], "fontnam": [859, 985], "helvetica": [859, 861], "graphviz": [859, 947], "postscript": 859, "tpng": 859, "paint": [859, 861], "dot_data": [859, 947], "digraph": 859, "show_weight": 860, "feature_0": 860, "unrepresent": 862, "keyerror": [862, 982], "popitem": 862, "lifo": 862, "input_nam": [866, 868, 894, 986], "accept_large_spars": [867, 868, 980], "ensure_2d": [867, 868], "allow_nd": [867, 868], "ensure_min_sampl": [867, 868], "ensure_min_featur": [867, 868], "y_numer": 867, "bsr": [867, 868, 985], "x_convert": 867, "y_convert": 867, "array_convert": 868, "target_typ": [871, 894], "min_val": 871, "max_val": 871, "include_boundari": [871, 986], "y_org": 872, "class_weight_vect": 872, "king": 872, "zen": 872, "sample_weight_vect": 873, "parenthes": 874, "type_filt": 876, "generate_onli": [878, 982], "checks_gener": 878, "test_check_estim": 879, "check_estimators_fit_returns_self": 879, "array_lik": 882, "logdet": 882, "slogdet": 882, "6375861597263857": 882, "flip_sign": 884, "svd_lapack_driv": 884, "gesdd": 884, "p5": 884, "transposit": 884, "gesvd": 884, "conquer": 884, "unitari": 884, "vh": 884, "dot_product": 885, "deweight": 886, "min_batch_s": 887, "n_pack": [887, 888], "path_length": 889, "sliceabl": 890, "truthi": 891, "helloifeven": 891, "_x_is_even": 891, "say_hello": 891, "ducktyp": [892, 976], "temp_fold": 897, "max_nbyt": 897, "1m": 897, "mmap_mod": 897, "dispatch_next": 897, "dispatch_one_batch": 897, "unprotect": 897, "prefetch": 897, "print_progress": 897, "inner_max_num_thread": 899, "backend_param": 899, "register_parallel_backend": [899, 980], "pyiodin": 899, "dask": [899, 952, 980], "workload": [899, 951], "register_rai": 899, "backend_nam": 899, "oversubscript": [899, 986], "threadpool": 899, "effective_n_job": 899, "tracking_select": 900, "reservoir_sampl": 900, "reservoir": 900, "make_default": 901, "parallelbackendbas": 901, "resampled_arrai": 902, "3x2": [902, 905], "shuffled_arrai": 905, "last_mean": 906, "last_var": 906, "last_n": 906, "return_sum_weight": 912, "sum_weight": 912, "all_or_ani": [915, 982], "is_fit": 915, "__sklearn_is_fitted__": [915, 985, 986], "eg": 915, "substitut": [915, 952, 978], "raise_except": 917, "array_sym": 917, "is_paramet": 919, "enclos": 920, "set_stat": 920, "bergstra": [920, 972, 973], "tournament": 920, "dispos": [920, 966], "n_resources_i": 920, "n_resources_0": 920, "n_candidates_i": 920, "n_candidates_0": 920, "r_0": 920, "n_resourc": 920, "983667": 920, "951958": 920, "947958": 920, "961009": 920, "955989": 920, "jamieson": 920, "talwalkar": 920, "desalvo": 920, "rostamizadeh": 920, "hyperband": 920, "bandit": 920, "multimetr": [920, 982, 987], "calibrated_forest": 920, "select__k": 920, "model__estimator__max_depth": 920, "imp": 921, "sophist": [921, 933], "14338": 921, "13286": 921, "15611": 921, "amelia": 921, "scientist": [921, 955], "roderick": 921, "rubin": 921, "1986": [921, 947], "ol2001": 921, "mask_missing_values_onli": 921, "mask_al": 921, "rr2007": 923, "2x_iy_i": 923, "vz2010": 923, "vvz2010": 923, "prod_i": 923, "ls2010": 923, "c_0": [923, 929], "tensorsketch": 923, "pp2013": 923, "wikic": 923, "ccf2002": 923, "mercer": 923, "langl": [923, 931, 945, 946], "rangl": [923, 931, 945, 946], "y_j": [923, 931, 933, 946], "obviat": 923, "dagm": 923, "vempati": 923, "jawahar": 923, "charikar": 923, "farach": 923, "colton": 923, "m2012": 924, "mu_k": 925, "cst": 925, "omega_": 925, "k0": 925, "h_l": 925, "extrema": 925, "119": [925, 975], "honei": 925, "stork": 925, "dilemma": 926, "valid_scor": 926, "w_0": 927, "w_p": 927, "x_p": 927, "34545455": 927, "13636": [927, 981], "rifkin": 927, "lippert": 927, "2n_": 927, "softw": 927, "kim": [927, 980, 981, 982, 986], "koh": [927, 955], "lustig": 927, "boyd": 927, "gorinevski": 927, "c_p": 927, "cherkasski": 927, "yunqian": 927, "1691": 927, "1714": 927, "ell_2": 927, "equiangular": 927, "weisberg": 927, "ell_0": [927, 931], "_coef": 927, "mp": 927, "ell_": 927, "posteriori": [927, 933], "radford": 927, "neal": [927, 985], "50000013": 927, "49999993": 927, "lambda_i": 927, "srikantan": 927, "tristan": 927, "fletcher": [927, 972, 976], "nomenclatur": [927, 978], "deliber": 927, "overparameter": 927, "ldot": [927, 931, 933, 935, 945], "w_l": 927, "min_w": 927, "iverson": 927, "broyden": 927, "goldfarb": 927, "shanno": 927, "shortcom": 927, "statsmodel": [927, 951], "aaron": [927, 975, 976, 977, 982], "simon": [927, 955, 975, 976, 985, 986, 987], "93fletcher": 927, "93goldfarb": 927, "93shanno_algorithm": 927, "noah": 927, "multirespons": 927, "edm": 927, "agricultur": 927, "rainfal": 927, "bernouli": 927, "fraud": [927, 955], "cash": 927, "fraudul": [927, 955], "interrupt": 927, "drug": 927, "cure": 927, "entertain": 927, "mccullagh": 927, "nelder": 927, "boca": 927, "raton": 927, "chapman": 927, "hall": [927, 979, 983], "crc": 927, "31760": 927, "j\u00f8rgensen": 927, "monografia": 927, "matem\u00e1tica": 927, "2463": 927, "4337": 927, "7638": 927, "disappear": [927, 972], "photogrammetr": 927, "hypothes": 927, "paradigm": 927, "cartographi": 927, "fischler": 927, "boll": 927, "1981": 927, "sunglok": 927, "choi": 927, "taemin": 927, "wonpil": 927, "93sen_estim": 927, "binom": 927, "infeas": [927, 934, 936], "k\u00e4rkk\u00e4inen": 927, "\u00e4yr\u00e4m\u00f6": 927, "h_": 927, "oarc": 927, "dae": 927, "bassett": 927, "jr": 927, "1978": 927, "econometrica": 927, "econometr": 927, "portnoi": 927, "hare": 927, "tortois": 927, "279": 927, "paraboloid": 927, "w_3": 927, "w_4": 927, "w_5": 927, "z_1": 927, "z_2": 927, "z_3": 927, "z_4": 927, "z_5": 927, "streamlin": 927, "gotten": [927, 941], "necess": [928, 934], "strife": 928, "mother": 928, "baloo": 928, "song": 928, "jungl": 928, "rubric": 928, "defici": [928, 945], "hlle": 928, "revolv": 928, "belkin": 928, "niyogi": 928, "1373": 928, "1396": 928, "molecul": 928, "countri": 928, "jk": 928, "delta_": 928, "c_1": 928, "disentangl": 928, "legitim": 928, "tricki": 928, "die": 928, "favour": [928, 930, 981], "noisier": 928, "5415": 928, "circuit": 928, "brief": 929, "num_featur": [929, 987], "quantum": 929, "nutshel": 929, "36787944": 929, "89483932": 929, "58364548": 929, "51341712": 929, "83822343": 929, "7768366": 929, "facil": 930, "equi": 930, "agnost": [930, 939], "cue": 930, "came": 930, "quicker": 930, "unpract": 930, "analogi": [930, 931], "top_k_accuraci": 931, "top_k_accuracy_scor": [931, 984, 986], "neg_brier_scor": [931, 982], "f1_micro": [931, 976], "f1_weight": [931, 976], "f1_sampl": 931, "neg_log_loss": 931, "roc_auc_ovr": [931, 982], "roc_auc_ovo": [931, 982], "roc_auc_ovr_weight": [931, 982], "roc_auc_ovo_weight": [931, 982], "explained_variance_scor": [931, 975, 979, 986], "max_error": [931, 981], "neg_mean_squared_log_error": 931, "mean_squared_log_error": [931, 979, 985], "neg_median_absolute_error": 931, "neg_mean_poisson_devi": 931, "neg_mean_gamma_devi": 931, "mean_gamma_devi": [931, 982], "d2_pinball_scor": [931, 986], "d2_tweedie_scor": [931, 985], "wrong_choic": 931, "_error": 931, "my_custom_loss_func": 931, "693": 931, "protocol": [931, 975, 988], "custom_scoring_funct": 931, "custom_scorer_modul": 931, "confusion_matrix_scor": 931, "test_tp": 931, "test_fn": 931, "untru": 931, "dividend": 931, "divisor": 931, "quotient": 931, "texttt": 931, "_class": 931, "youden": 931, "informed": 931, "mosley2013": 931, "kelleher2015": 931, "guyon2015": 931, "urbanowicz2015": 931, "escalant": 931, "escalera": 931, "maci\u00e0": [931, 985, 987], "saeed": 931, "statnikov": 931, "viega": 931, "chalearn": 931, "automl": [931, 951], "ijcnn": 931, "moslei": 931, "ijcv": 931, "urbanowicz": 931, "exstrac": 931, "evol": 931, "intel": [931, 951], "89": [931, 941, 966, 972, 975, 983], "cohen_kappa_scor": [931, 977, 979], "4285714285714286": 931, "manning2008": 931, "everingham2010": 931, "davis2006": 931, "flach2015": 931, "everingham": 931, "gool": 931, "winn": 931, "pascal": 931, "voc": 931, "goadrich": 931, "y_l": 931, "_l": 931, "emptyset": 931, "f_beta": 931, "hinge_loss": [931, 976, 984, 985], "ne": [931, 934], "1738": 931, "matthews_corrcoef": [931, 972, 978, 979, 986], "t_k": [931, 947], "ik": 931, "ki": 931, "kk": 931, "auroc": 931, "ht2001": 931, "fc2009": 931, "pd2000": 931, "f2006": 931, "f2001": 931, "inner_clf": 931, "c\u00e8sar": 931, "hernandez": 931, "orallo": 931, "modroiu": 931, "wikipediadet2017": 931, "martin1997": 931, "navratil2007": 931, "encyclopedia": 931, "utc": 931, "php": [931, 951], "detection_error_tradeoff": 931, "oldid": 931, "798982054": 931, "doddington": 931, "kamm": 931, "ordowski": 931, "przybocki": 931, "navractil": 931, "klusacek": 931, "acoust": 931, "icassp": 931, "honolulu": 931, "229": 931, "232": 931, "brier1950": 931, "p_i": [931, 934], "bella2012": 931, "flach2008": 931, "bella": 931, "hern\u00e1ndez": 931, "ram\u00edrez": 931, "quintana": 931, "khosrow": 931, "pour": 931, "hershei": 931, "edson": [931, 977], "matsubara": 931, "dagstuhl": 931, "seminar": 931, "schloss": 931, "leibniz": 931, "zentrum": 931, "lr_": 931, "brenner": 931, "gefel": 931, "991": 931, "coverage_error": [931, 976, 986], "label_ranking_average_precision_scor": [931, 976, 980, 981, 987], "label_ranking_loss": [931, 977], "grade": 931, "unalt": 931, "epsilon_i": 931, "965": 931, "908": 931, "925": [931, 961], "7083": 931, "log_": 931, "growth": [931, 977, 978], "commod": 931, "mapd": 931, "2e6": 931, "2666": 931, "y_n": [931, 935, 945], "967": [931, 935], "elicit": 931, "2500": 931, "mean_pinball_loss_95p": 931, "skill": 931, "mcfadden": 931, "d2_tweedie_score_15": 931, "d2_pinball_score_08": 931, "heteroschedast": 931, "homoschedast": 931, "pear": 932, "y_dens": 932, "y_spars": 932, "advoc": 932, "financ": 932, "f3": 932, "y3": 932, "multi_target_forest": 932, "109": [932, 974], "75474165": 932, "147": 932, "03498585": 932, "03812219": 932, "12165031": 932, "12914884": 932, "46081961": 932, "8948621": 932, "44373091": 932, "88978285": 932, "62745778": 932, "02891072": 932, "48204257": 932, "03260883": 932, "165": 932, "34867495": 932, "52003279": 932, "92529176": 932, "25719016": 932, "84253": 932, "25193977": 932, "16443186": 932, "12274212": 932, "170388": 932, "80956739": 932, "16979946": 932, "72667194": 932, "50941682": 932, "50447799": 932, "149": [932, 972], "37967282": 932, "15699552": 932, "72850319": 932, "prod_": 933, "downarrow": 933, "spite": 933, "famous": 933, "serious": 933, "flair": 933, "2_y": 933, "mu_i": 933, "sigma_i": 933, "theta_i": 933, "cnb": 933, "mnb": 933, "inventor": 933, "alpha_i": [933, 946], "cj": [933, 975, 976, 977, 978, 979], "summat": [933, 935], "min_c": 933, "t_i": 933, "poorest": 933, "n_i": 933, "satellit": 934, "kdt": 934, "farawai": 934, "invent": 934, "orthotrop": 934, "bentlei": 934, "1975": 934, "omohundro": 934, "characteris": 934, "unaffect": 934, "amort": 934, "cache_path": 934, "gettempdir": 934, "unsort": [934, 973, 976, 980], "5807": 934, "nca_pip": 934, "96190476": 934, "limits_": 934, "lx": 934, "x_m": 935, "leftmost": 935, "w_1x_1": 935, "w_2x_2": 935, "w_mx_m": 935, "backpropag": 935, "998": 935, "b_1": 935, "b_2": 935, "z_l": 935, "dfrac": [935, 941], "nabla": 935, "deduct": 935, "rumelhart": 935, "jiquan": 935, "ngiam": 935, "chuan": 935, "yifan": 935, "carolin": 935, "suen": 935, "backprop": [935, 945], "lecun": [935, 945], "orr": [935, 945], "strai": 936, "v_ih_j": 936, "b_iv_i": 936, "c_jh_j": 936, "h_j": 936, "v_i": 936, "b_i": 936, "sum_h": 936, "fantasi": 936, "particl": 936, "thoroughli": 936, "hereund": 937, "1443": 937, "1471": 937, "outlying": 937, "h2009": 938, "g2015": 938, "absurd": 938, "m2019": 938, "bike": 938, "mc_clf": 938, "466": 938, "624": 938, "overlaid": 938, "obscur": 938, "cice": [938, 986], "pd_": 938, "dx_c": 938, "footnot": [938, 951], "opaqu": 939, "x_val": 939, "y_val": 939, "356": 939, "probe": 939, "204": [939, 944], "050": 939, "048": 939, "033": 939, "056": 939, "r_multi": 939, "081": 939, "020": 939, "029": 939, "1013": 939, "866": 939, "246": [939, 972], "445": 939, "872": 939, "726": 939, "298": 939, "438": 939, "022": 939, "277": [939, 974], "376": 939, "115": 939, "i_j": 939, "min_max_scal": [941, 977], "x_train_minmax": 941, "x_test_minmax": 941, "max_abs_scal": 941, "x_train_maxab": 941, "x_test_maxab": 941, "excess": [941, 979], "unintention": 941, "kernelcenter": [941, 982, 986], "semidefinit": [941, 946], "scholkopf1998": 941, "1_": 941, "x_train_tran": 941, "x_test_tran": 941, "8pt": 941, "x_normal": 941, "firefox": 941, "chrome": 941, "safari": 941, "africa": 941, "dragon": 941, "x0_cat": 941, "x0_rabbit": 941, "x0_infrequent_sklearn": 941, "lexicon": 941, "infant": 941, "kid": 941, "teen": 941, "adult": 941, "senior": [941, 955], "citizen": 941, "retbin": 941, "x_1x_2": 941, "x_1x_3": 941, "x_2x_3": 941, "x_1x_2x_3": 941, "rung": 941, "eiler": 941, "marx": 941, "perperogl": 941, "sauerbrei": 941, "abrahamowicz": 941, "bmc": 941, "methodol": 941, "38629436": 941, "sixteenth": 943, "uai": 943, "craig": [943, 975, 980], "boutili": 943, "mois\u00e9": 943, "goldszmidt": 943, "morgan": [943, 947, 949], "kaufmann": [943, 947, 984], "ella": 943, "bingham": 943, "heikki": 943, "mannila": 943, "245": [943, 974], "explic": 943, "3947": 943, "671": 943, "687": 943, "kenneth": [943, 972, 973, 978, 979, 986, 987], "12th": 943, "287": 943, "296": 943, "x_new_invers": 943, "x_new_again": 943, "delalleau": 944, "216": 944, "aistat": 944, "gatsbi": 944, "ucl": 944, "uk": [944, 966], "fullpap": 944, "xi_i": 945, "slack": 945, "varepsilon": [945, 946], "t_0": 945, "l\u00e9on": [945, 986, 987, 988], "_init_t": 945, "basesgd": 945, "eta_0": 945, "_t": 945, "svmsgd": 945, "pegaso": 945, "srebro": 945, "tsuruoka": 945, "tsujii": 945, "ananiad": 945, "afnlp": 945, "lin_clf": 946, "grasp": [946, 952], "sv": 946, "builtin": 946, "qp": 946, "linear_svc": 946, "gram_train": 946, "gram_test": 946, "zeta": 946, "zeta_i": 946, "textrm": [946, 964], "q_": 946, "equiv": 946, "reparameter": 946, "wu": [946, 976, 984], "weng": 946, "975": 946, "1005": 946, "rong": 946, "aug": 946, "1871": 946, "1874": 946, "ofmulticlass": 946, "fitter": 947, "pariti": 947, "multiplex": 947, "export_graphviz": [947, 977, 979, 985, 987], "export_text": [947, 981, 988], "dumont": 947, "subwindow": 947, "beforehand": 947, "dichotomis": 947, "quinlan": 947, "multiwai": 947, "proprietari": 947, "ruleset": 947, "q_m": 947, "n_m": 947, "t_m": 947, "setminu": 947, "mk": 947, "_m": 947, "ge0": 947, "widetild": 947, "tradition": 947, "t_t": 947, "eff": 947, "predictive_analyt": 947, "troubleshoot": 949, "artwork": 949, "fund": 949, "spotifi": 949, "betawork": 949, "evernot": 949, "aweb": 949, "yhat": 949, "rangespan": 949, "birchbox": 949, "bestofmedia": 949, "phimeca": 949, "howaboutw": 949, "peerindex": 949, "datarobot": 949, "okcupid": 949, "love": [949, 966], "publica": 949, "machinali": 949, "solido": 949, "infonea": 949, "dataiku": 949, "otto": 949, "zopa": 949, "bnp": 949, "pariba": 949, "cardif": 949, "post1": [949, 970], "foot": 950, "gear": 950, "neuroimag": [950, 955], "astronom": 950, "pycon": 950, "thirti": 950, "nyc": [950, 955], "sister": 951, "sklearn_panda": 951, "sklearn_xarrai": 951, "xarrai": 951, "autoviml": 951, "tpot": 951, "featuretool": 951, "tempor": [951, 952], "neuraxl": 951, "neat": [951, 972], "checkpoint": 951, "funki": 951, "saver": 951, "evalml": 951, "neptun": 951, "mlop": 951, "sacr": 951, "dtreeviz": 951, "eli5": 951, "mlxtend": 951, "yellowbrick": 951, "deap": 951, "evolutionari": 951, "interchang": 951, "skop": [951, 968], "jpmml": 951, "porter": 951, "transpil": 951, "javascript": 951, "m2cgen": 951, "dart": 951, "haskel": 951, "rust": 951, "treelit": 951, "intelex": 951, "tslearn": 951, "sktime": 951, "hmmlearn": 951, "pomegran": 951, "crfsuit": 951, "nolearn": 951, "lasagn": 951, "theano": 951, "skorch": 951, "scikera": 951, "scikit_learn": 951, "feder": 951, "lego": 951, "subsembl": 951, "lightn": 951, "sdca": 951, "adagrad": 951, "svrg": 951, "nadaraya": 951, "gplearn": 951, "genet": 951, "multilearn": 951, "seglearn": 951, "libopf": 951, "fastfm": 951, "kmode": 951, "sphereclust": 951, "mise": 951, "giotto": 951, "tda": 951, "pymc": 951, "censor": 951, "lightfm": 951, "openrec": 951, "spotlight": 951, "gensim": 951, "nilearn": 951, "neuro": 951, "astroml": 951, "astronomi": 951, "msmbuilder": 951, "dissemin": 951, "chines": 951, "persian": 951, "spanish": 951, "korean": 951, "disclaim": 951, "promis": 952, "eleven": 952, "incept": 952, "scala": 952, "reinforc": 952, "era": 952, "7242": 952, "12147": 952, "5523": 952, "10733": 952, "13902": [952, 982], "12800": 952, "12866": 952, "15550": 952, "5853": 952, "11805": 952, "15319": 952, "11977": 952, "12852": [952, 982], "13911": [952, 982], "amput": 952, "6284": 952, "beginn": 952, "priorit": [952, 979], "4497": 952, "7646": 952, "6425": 952, "6424": 952, "8480": 952, "6231": 952, "8100": 952, "6599": 952, "6715": 952, "14582": 952, "3855": 952, "13227": 952, "6323": 952, "14180": [952, 983], "9173": 952, "13146": [952, 982], "8614": 952, "7608": 952, "5082": 952, "8243": 952, "searchgrid": 952, "6929": 952, "__array_function__": [952, 982], "etl": [952, 955], "8370": 952, "6451": 952, "lifecycl": 952, "8157": 952, "7382": 952, "drift": 952, "11047": [952, 982], "9326": 952, "slep011": 952, "1626": 952, "10463": 952, "id3": [953, 968], "cart": [953, 968], "touch": 954, "savetxt": 954, "cloneabl": 954, "datafil": 954, "printabl": 954, "indispens": 955, "stephen": [955, 976, 977, 979, 980, 981, 982, 983, 985], "simmon": 955, "vp": 955, "athena": 955, "music": 955, "bernhardsson": 955, "pariet": [955, 972], "lear": 955, "visag": 955, "fantast": 955, "startup": 955, "bitli": 955, "chartbeat": 955, "digg": [955, 979], "poncho": 955, "gilad": 955, "lotan": 955, "chief": 955, "chat": 955, "bread": 955, "butter": 955, "chaumond": [955, 980], "offic": 955, "ayzenshtat": [955, 980], "undergrad": 955, "professor": 955, "hotel": 955, "destin": 955, "agent": 955, "melani": [955, 979, 980], "awesom": 955, "stuff": 955, "randomizedpca": [955, 972, 974, 975, 977, 978, 979], "boston": 955, "mdbecker": 955, "pydata_2013": 955, "ninja": 955, "thorough": 955, "notch": 955, "production": 955, "greg": [955, 978, 979, 981, 982], "lamp": 955, "founder": 955, "prototyp": 955, "jurgen": 955, "director": 955, "commerc": 955, "inventori": 955, "bertin": 955, "mahieux": 955, "invalu": 955, "vijai": [955, 975], "traine": 955, "impress": 955, "traffic": 955, "tenur": 955, "matchmak": 955, "weitzenfeld": 955, "tweet": 955, "ferenc": 955, "huszar": 955, "shop": 955, "ourselv": 955, "jeremi": [955, 977, 978, 979, 980, 983, 984], "achin": 955, "ceo": 955, "marketplac": 955, "frid": [955, 975], "radar": 955, "partnership": 955, "lebourgeoi": 955, "charron": [955, 975, 976, 983, 984, 985], "cornerston": 955, "sheep": 955, "featureforg": 955, "rafael": [955, 973, 974, 976, 979], "carrascosa": [955, 976], "law": 955, "semiconductor": 955, "fab": [955, 982, 983], "bleed": 955, "chip": 955, "smartphon": 955, "automobil": 955, "trent": [955, 978], "mcconaghi": 955, "rapid": 955, "immens": 955, "thorsten": 955, "kranz": 955, "coma": 955, "dss": 955, "douetteau": 955, "b2c": 955, "retail": 955, "palladium": 955, "rammig": [955, 978], "peer": 955, "billion": 955, "gbp": 955, "grate": 955, "vlasio": [955, 979], "vasilei": [955, 979], "petfood": 955, "cocoa": 955, "worldwid": 955, "toolset": 955, "equip": 955, "fitzk": 955, "sr": 955, "fondat": 955, "s\u00e9bastien": [955, 978, 980], "conort": 955, "salmon": 957, "nine": 957, "sentiment": 958, "cli": 958, "doctest_mod": 958, "hardest": 959, "tightli": 960, "knit": 960, "x_fold": 961, "array_split": 961, "y_fold": 961, "934": 961, "956": 961, "train_indic": 961, "test_indic": 961, "963": 961, "922": 961, "930": 961, "96388889": 961, "92222222": 961, "9637883": 961, "93036212": 961, "96578289": 961, "92708922": 961, "96681476": 961, "96362897": 961, "93192644": 961, "0077": 961, "943": 961, "944": 961, "00375": 961, "lfw_": 962, "_lfw": 962, "gerhard_schroed": 962, "donald_rumsfeld": 962, "tony_blair": 962, "colin_powel": 962, "george_w_bush": 962, "129": [962, 972], "282": [962, 972], "estimated_param_": 963, "iris_x": 964, "iris_i": 964, "iris_x_train": 964, "iris_y_train": 964, "iris_x_test": 964, "iris_y_test": 964, "pave": 964, "paltri": 964, "exabyt": 964, "30349955": 964, "237": 964, "63931533": 964, "510": 964, "53060544": 964, "73698041": 964, "814": 964, "13170937": 964, "81458798": 964, "84845219": 964, "60648906": 964, "743": 964, "51961675": 964, "09517222": 964, "585": 964, "5854": 964, "5855": 964, "occam": 964, "razor": 964, "best_alpha": [964, 972], "025118864315095794": 964, "313": 964, "508": 964, "knew": 965, "taxonomist": 965, "face_compress": 965, "x_approx": 965, "images_approx": 965, "18565811e": 965, "19346747e": 965, "43026679e": 965, "text_analyt": 966, "skeleton": [966, 975], "sklearn_tut_workspac": 966, "cp": 966, "work_directori": 966, "tutorial_hom": 966, "fetch_data": 966, "lang": 966, "newsweed": 966, "netnew": 966, "bydat": 966, "twenty_train": 966, "holder": 966, "2257": 966, "sd345": 966, "collier": 966, "laserjet": 966, "iii": [966, 986], "hampton": 966, "4gb": 966, "count_vect": 966, "x_train_count": 966, "35788": 966, "4690": 966, "downscal": 966, "tf_transform": 966, "x_train_tf": 966, "tfidf_transform": 966, "x_train_tfidf": 966, "na\u00efv": 966, "docs_new": 966, "opengl": 966, "x_new_count": 966, "x_new_tfidf": 966, "text_clf": 966, "twenty_test": 966, "docs_test": 966, "8348": 966, "9101": [966, 980], "319": 966, "1502": 966, "380": 966, "353": 966, "tfidf__use_idf": 966, "searcher": 966, "gs_clf": 966, "workspac": 966, "fear": 966, "fire": 966, "exercise_xx_script": 966, "arg1": 966, "arg2": 966, "arg3": 966, "mortem": 966, "charngramanalyz": 966, "exercise_01_language_train_model": 966, "exercise_02_senti": 966, "movie_review": 966, "txt_sentoken": 966, "cpickl": 966, "polar": 966, "subtleti": 968, "subscrib": 970, "gzip": 972, "bzip2": 972, "decompress": 972, "auc_scor": [972, 974], "kernc": [972, 986, 987], "led": 972, "probabilisticpca": [972, 975], "hmm": [972, 973, 974, 975, 977], "gaussianhmm": 972, "multinomialhmm": 972, "n_gram_rang": 972, "267": 972, "alexi": [972, 975, 976, 979], "mignon": [972, 975, 976, 979], "subhodeep": [972, 973, 974], "moitra": [972, 973, 974], "yannick": [972, 974], "schwartz": [972, 974, 986], "duckworth": 972, "benediktsson": [972, 973, 974], "marko": [972, 981, 982], "burjek": 972, "pinto": 972, "abraham": [972, 973, 978, 982], "hoenig": 972, "flyingimmidev": 972, "francoi": [972, 985], "savard": 972, "hann": 972, "schulz": 972, "welind": 972, "companioni": 972, "brandyn": 972, "bussonni": [972, 984], "matthia": [972, 974, 975, 978, 979, 980, 984, 987], "pierr": [972, 980, 981, 983, 985, 987], "astolfi": 972, "huiginn": 972, "keith": [972, 977], "goodman": [972, 977], "ludwig": 972, "schwardt": 972, "hervieu": 972, "sergio": [972, 974, 975, 984, 987], "medina": [972, 974], "sheerman": 972, "buguen": 972, "seq_dataset": [972, 982], "weight_vector": [972, 982], "reuben": 972, "costin": 972, "_basehmm": 972, "neighborsregressor": 972, "gone": [972, 973], "vbgmm": [972, 976, 978], "_pvalu": 972, "charset": [972, 974], "test_fract": 972, "train_fract": 972, "239": 972, "198": 972, "114": 972, "marek": 972, "fcostin": 972, "adrien": 972, "gaidon": 972, "joona": 972, "sillanp\u00e4\u00e4": 972, "mccarthi": [972, 980], "roi": [972, 986], "hyunjin": 972, "ibay": 972, "scheidegg": 972, "clair": 972, "revillet": 972, "conrad": [972, 973, 987], "meng": [972, 973, 976, 978, 979], "xinfan": [972, 973, 976], "udi": 972, "weinsberg": 972, "janso": 972, "palafox": 972, "overwrite_": 972, "copy_": 972, "buffer_mb": 972, "sparse_encode_parallel": 972, "accident": [972, 976, 981], "basedictionarylearn": 972, "sparsecodingmixin": 972, "fast_svd": 972, "arnold": [972, 973], "bala": [972, 975], "subrahmanyam": [972, 975], "varanasi": [972, 975], "draxu": 972, "eickenberg": [972, 974, 975, 976, 977], "bogdan": 972, "trach": 972, "f\u00e9lix": [972, 974, 975, 976, 980], "antoin": [972, 974, 975, 976, 979], "fortin": [972, 974, 975, 976], "manuel": [972, 976, 980, 981, 984, 985], "caicedo": 972, "carvaj": 972, "tiziano": 972, "zito": [972, 985], "jean": [972, 975, 976, 977, 978, 979, 985], "kossaifi": [972, 976, 977], "thumbnail": 972, "univariate_select": 972, "mldata": [972, 980], "pietro": [972, 975], "berk": 972, "macosx": 972, "xarg": 972, "bscikit": 972, "cross_val": 972, "bcross_val": 972, "lurk": 972, "l1_distanc": 972, "387": 972, "168": 972, "andi": [972, 979], "amit": [972, 986, 987], "salvator": [972, 986, 987], "masecchia": 972, "schut": 972, "metaireau": [972, 975], "bryan": [972, 975, 981, 982, 985], "silverthorn": 972, "minwoo": 972, "luca": [972, 982, 983, 984, 985], "wiman": 972, "schl\u00fcter": [972, 980], "malet": 972, "miott": [972, 975], "feth": 972, "arezki": 972, "yamin": 972, "notes_neighbor": 972, "netbsd": 972, "kamel": 972, "ibn": 972, "hassen": 972, "derouich": 972, "virgilefritsch": 972, "example_gaussian_process_plot_gp_regress": 972, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 972, "tast": 972, "2x": 972, "10x": 972, "200x": 972, "207": 972, "ann": [972, 984, 986], "laur": 972, "fouqu": 972, "ronan": [972, 975, 980], "amicel": [972, 975], "osendorf": [972, 973], "gmmhmm": [972, 973], "latex": 972, "mlcomp": 972, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 972, "pybrain": 972, "262": 972, "116": 972, "rokem": [972, 978], "100x": [972, 975], "obsolet": 972, "attrselect": 972, "unmaintain": 972, "lite": 972, "filo": [972, 975], "fred": [972, 985], "mailhot": 972, "huard": 972, "dave": [972, 979, 980, 986], "morril": 972, "schofield": 972, "travi": [972, 980], "oliph": 972, "pearu": 972, "peterson": [972, 974], "0d": 973, "marchman": [973, 974], "hrishikesh": [973, 974], "huilgolkar": [973, 974], "bastiaan": [973, 974], "diego": [973, 974], "molla": [973, 974], "cunha": [973, 974], "almeida": [973, 974, 985], "rolando": [973, 974], "espinoza": [973, 974], "fuent": [973, 974], "formerli": [973, 976, 978, 979], "beauchamp": [973, 976], "longstand": [973, 979], "shaun": 973, "jackman": 973, "winterman": 973, "seberg": 973, "n_atom": 973, "label_propag": 973, "learn_rat": 973, "basegradientboost": 973, "mean_square_error": 973, "gmm_": 973, "eig_tol": 973, "chunk_siz": 973, "zero_one_scor": 973, "117": 973, "aymer": 973, "masurel": 973, "syhw": [973, 974], "corei": [973, 980, 981], "lynch": [973, 979], "shu": [973, 976, 980], "tadej": [973, 974], "jane\u017e": [973, 974], "caje": 973, "tiago": [973, 977], "nune": 973, "cow": 973, "anz": 973, "jauvin": 973, "jacqu": [973, 975], "kvam": [973, 975], "doug": [973, 974, 984], "coleman": [973, 974], "dickerson": 973, "approximateident": 973, "veronda": 973, "matti": [973, 976, 977], "lyra": [973, 976, 977], "mikhail": [973, 974, 975, 978, 979, 987], "korobov": [973, 974, 975, 978, 979], "alejandro": [973, 978], "weinstein": 973, "deil": [973, 983, 984], "nizhibitski": 973, "coelho": [973, 975, 976, 980], "miroslav": [973, 974, 977], "batchkarov": [973, 977], "pavel": [973, 981], "bob": [973, 979], "dengemann": 973, "emanuel": 973, "x006": 973, "justin": [974, 980, 984], "stochastic_gradi": [974, 975, 981], "crombach": 974, "sheet": 974, "jaccard_similarity_scor": [974, 976, 981], "jochen": 974, "wersd\u00f6rfer": 974, "sinayev": 974, "unpleas": 974, "novic": 974, "tini": [974, 987], "hyperlink": 974, "luessi": 974, "philipp": [974, 975, 978, 987], "gervai": [974, 975], "cleverless": 974, "nosetest": 974, "compute_import": 974, "return_model": [974, 976], "itergrid": 974, "tacitli": 974, "charset_error": 974, "precompute_gram": 974, "2224": 974, "jim": 974, "holmstr\u00f6m": 974, "steven": [974, 975, 977, 979, 980, 985, 987], "gryze": [974, 977], "sergeyf": 974, "ben": [974, 975, 976, 979, 980, 981, 984], "speer": 974, "federico": [974, 975, 980, 981, 986], "vaggi": [974, 975], "raul": [974, 975], "garreta": [974, 975], "gei": 974, "flaxman": [974, 976], "denton": 974, "cockburn": 974, "dougal": [974, 976, 977, 979, 980, 981, 982], "sutherland": [974, 976, 977, 979, 980, 981, 982], "ian": [974, 976, 981, 982, 984, 987, 988], "ozsvald": 974, "johann": [974, 975, 980, 982, 983, 986], "sch\u00f6nberger": [974, 975], "szabo": [974, 975], "roland": [974, 975], "imran": [974, 975, 976], "haqu": [974, 975, 976], "karayev": 974, "jamestwebb": [974, 975], "abhijeet": 974, "kolh": 974, "velkov": 974, "fazlul": 974, "shahriar": 974, "felix": [974, 979, 980, 982, 984, 985, 986], "brockherd": 974, "harikrishnan": 974, "jack": [974, 977, 985, 986, 987], "hale": [974, 986], "jakemick": 974, "mcdermott": 974, "zwinck": 974, "vredevoogd": [974, 975], "pati": 974, "ekman": [974, 978], "shubernetskii": 974, "naoki": [974, 984], "orii": 974, "seamu": 974, "absher": 974, "feldman": [974, 979, 980, 981, 982], "stefano": 974, "lattarini": 974, "steve": [974, 976, 980, 985, 987], "koch": [974, 980, 981, 983, 984], "sturla": 974, "molden": 974, "jarosch": 974, "nikolai": [975, 976, 977, 978, 980, 981, 986], "mayorov": [975, 976, 977, 978], "msvc": 975, "mingw": 975, "resourcewarn": 975, "calvin": [975, 976], "gile": [975, 976], "billing": [975, 976, 977], "safe_realloc": 975, "bradshaw": [975, 976, 979], "pico": [975, 976], "restor": [975, 980, 981, 982, 983, 987], "raff": 975, "__array__": [975, 982], "jeffrei": [975, 978], "blackburn": [975, 978], "danni": [975, 976, 977], "sullivan": [975, 976, 977], "wignal": [975, 976, 982, 983], "grid_tograph": 975, "gracefulli": [975, 976], "gaussianprocess": 975, "novak": 975, "tulloch": [975, 976], "wardagglomer": 975, "wardclust": 975, "mean_l1_ratio": 975, "phlypo": 975, "312": 975, "275": 975, "148": 975, "bommarito": [975, 976], "brook": [975, 976, 984], "osborn": [975, 976], "eltermann": 975, "bwignal": 975, "ankit": [975, 982, 984, 986], "agraw": [975, 980, 986, 987], "carei": [975, 976, 977, 978, 979], "ugurthemast": [975, 976], "schumach": [975, 976, 977], "baptist": [975, 983], "lagard": 975, "rajat": [975, 982], "khanduja": 975, "pascual": 975, "ignacio": 975, "rossi": 975, "s\u00e4ger": [975, 978], "ilambharathi": [975, 976], "kanniah": [975, 976], "sdenton4": 975, "alyssa": [975, 979], "amo": 975, "waterland": 975, "murad": 975, "maud": 975, "karol": 975, "pysniak": 975, "cgohlk": [975, 976], "jacobsen": 975, "collin": 975, "kaushik94": 975, "erwin": 975, "marsi": 975, "csytraci": 975, "lk": 975, "laurent": [975, 976, 979, 980, 987], "direr": [975, 976, 979, 980], "shilt": 975, "yoshiki": [975, 978], "v\u00e1zquez": 975, "yung": [975, 978], "siang": 975, "liau": 975, "abhishek": [975, 976, 982, 986], "thakur": [975, 976], "rohit": [975, 976, 980, 981], "sivaprasad": [975, 976], "amormachin": 975, "oscar": [975, 979], "carlsson": 975, "nanta": 975, "nardelli": 975, "jess010": 975, "kowalski87": 975, "clegg": 975, "ralf": [975, 978, 979, 987], "gommer": [975, 978, 979, 987], "aft": 975, "rupesh": 975, "srivastava": [975, 987], "ryan": [975, 978, 980, 981], "skipper": [975, 977, 978], "seabold": [975, 977, 978], "stefan": [975, 976, 980, 982], "walt": [975, 976, 980], "allen": [975, 977, 979, 982], "riddel": [975, 977, 979], "valentin": [975, 977, 987], "haenel": 975, "myer": [975, 979], "yoni": 975, "meshulam": 975, "yuri": [975, 977], "zaytsev": 975, "adrinjalali": [975, 984], "ai8rahim": 975, "alemagnani": 975, "chalmerlow": 975, "dziki": 975, "dro\u017cd\u017c": 975, "matrixorz": 975, "popo": 975, "samuela": 975, "fran\u00e7oi": 975, "boulogn": 975, "ethan": [975, 978], "guilherm": 975, "trein": 975, "heuer": 975, "ivicajov": 975, "rouli": 975, "eduardo": [975, 977, 985, 986], "ari\u00f1o": 975, "rubia": 975, "jell": 975, "zijlstra": 975, "eddi": 975, "jansson": [975, 987], "ca\u00f1ardo": 975, "alastuei": 975, "joseph": [975, 976, 977, 978, 984, 986, 987], "perla": 975, "ricardo": [975, 985, 986], "kenta": 975, "sato": 975, "medri": 975, "luce": 975, "pierron": 975, "danielweitzenfeld": 975, "thompson": [975, 987, 988], "brett": [975, 977, 978, 979, 980, 987], "feurer": [975, 980], "earl": 975, "hank": 975, "orr\u00f9": 975, "lunt": 975, "kearn": 975, "pawe\u0142": [975, 979, 984, 985], "mandera": 975, "zambelli": 975, "staubda": 975, "dedupl": 976, "heilman": [976, 977], "precompute_dist": [976, 983], "lshforest": [976, 979], "qiang": 976, "luo": 976, "clemen": 976, "brunner": 976, "matteo": [976, 978, 986], "visconti": 976, "oleggio": 976, "castello": 976, "linkage_tre": 976, "jatin": [976, 978], "shah": [976, 977, 978, 984], "saurabh": [976, 977, 978, 979, 980, 984], "jha": [976, 982, 986], "blanchard": [976, 977], "michal": [976, 979, 985, 986], "romaniuk": 976, "gilmor": 976, "stapl": 976, "hedyati": 976, "antoni": [976, 978, 984, 987], "parel": 976, "herv\u00e9": 976, "bredin": 976, "hasil": 976, "sharma": [976, 978, 980, 981, 983, 984, 986], "download_20newsgroup": 976, "friend": 976, "cathi": [976, 982], "deng": [976, 977, 978], "dawson": 976, "garret": 976, "hanna": [976, 977, 983], "wallach": [976, 977], "yan": [976, 984], "artem": [976, 979], "sobolev": 976, "fit_ovr": 976, "predict_ovr": 976, "predict_proba_ovr": 976, "fit_ovo": 976, "predict_ovo": 976, "fit_ecoc": 976, "predict_ecoc": 976, "lamond": 976, "outweigh": 976, "thresh": 976, "akshai": [976, 979, 984], "akshayah3": 976, "aldrian": 976, "obaja": 976, "ander": [976, 982], "aagaard": 976, "cranenburgh": 976, "walker": 976, "banilo": [976, 977], "barmalei": [976, 977], "benedikt": 976, "koehler": 976, "bhsu": 976, "bori": [976, 984], "feld": 976, "borja": 976, "ayerdi": 976, "boyuan": [976, 977, 978], "brent": [976, 980, 981], "pedersen": 976, "celeo": 976, "chebee7i": 976, "stade": 976, "schuldt": 976, "christof": [976, 977], "angermuel": [976, 977], "daiki": 976, "aminaka": 976, "danfrankj": 976, "dmitrij": 976, "milajev": 976, "floydsoft": 976, "garrett": 976, "gpassino": 976, "gwulf": [976, 977], "hampu": 976, "bengtsson": 976, "harri": [976, 978, 984, 985], "mavroforaki": [976, 978], "helder": [976, 985, 986], "herv": 976, "hugu": 976, "salamin": 976, "ism": 976, "dlabal": 976, "javier": 976, "l\u00f3pez": [976, 980, 981, 984], "pe\u00f1a": 976, "jdcaballero": 976, "jeff": [976, 978, 985, 986], "hammerbach": 976, "helmu": 976, "kaicheng": 976, "markham": [976, 983, 984], "lagacheri": 976, "leepei": 976, "loic": [976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987], "estev": [976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987], "luka": [976, 983], "michelbach": 976, "mario": [976, 978, 986, 987, 988], "krell": [976, 978], "ku": [976, 977], "mateusz": [976, 983, 984], "susik": 976, "mehdi": [976, 985], "cherti": 976, "mlg": 976, "montecchio": 976, "okal": 976, "billi": 976, "\u00f3scar": [976, 977, 978, 979], "n\u00e1jera": [976, 977, 978, 979], "puggioni": 976, "pratap": [976, 979, 986], "vardhan": 976, "pvnguyen": 976, "queqichao": 976, "rahiel": 976, "kasim": 976, "mason": 976, "saket": [976, 977, 984], "choudhari": [976, 977, 986], "sam": [976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987], "nichol": 976, "sethdandridg": 976, "sinhrk": [976, 977], "snuderl": 976, "ott": 976, "tjoa": 976, "swu": 976, "zimmer": [976, 986], "tejesh95": 976, "terrycojon": 976, "delteil": 976, "toma": 976, "kazmar": 976, "trevorstephen": [976, 978], "tttthomasssss": 976, "tzu": 976, "kuo": 976, "ugurcaliskan": 976, "vinayak": [976, 977, 978, 980, 981, 987], "mehta": [976, 977, 978, 980, 981, 982, 983, 987], "vjacheslav": 976, "murashkin": 976, "wadawson": 976, "x0l": 976, "vendor": [977, 980, 981], "6196": 977, "6147": 977, "presort": [977, 982], "5857": 977, "mcculloh": [977, 978], "6258": 977, "giorgio": [977, 978, 979], "patrini": [977, 978, 979], "joe": 977, "jevnik": 977, "labelkfold": [977, 978], "labelshufflesplit": [977, 978], "mcfee": [977, 978], "3659": 977, "4738": 977, "projectedgradientnmf": 977, "nls_max_it": 977, "erick": 977, "moodi": 977, "4025": 977, "mean_shift_": 977, "mean_shift": [977, 980], "martino": 977, "sorbaro": 977, "cori": 977, "konstantin": [977, 978, 979], "shmelkov": 977, "backlink": 977, "jaidev": 977, "deshpand": [977, 978], "dictlearn": 977, "kashif": 977, "rasul": [977, 979, 980], "galvez": 977, "sonni": 977, "hu": [977, 980, 982], "4881": 977, "santi": [977, 979, 980], "villalba": [977, 980, 984], "5186": 977, "stolbunov": 977, "booster": 977, "graham": [977, 978], "clenaghan": [977, 978], "clyde": 977, "subproblem": 977, "5131": 977, "forestclassifi": 977, "ankur": 977, "ankan": 977, "henri": [977, 978, 979, 980, 982, 983, 984, 986, 987], "5431": 977, "buddha": 977, "prakash": [977, 979, 985], "5182": 977, "lamb": [977, 985], "5282": 977, "5355": 977, "5360": 977, "4478": 977, "5337": 977, "4362": 977, "5495": 977, "elvi": [977, 978, 979], "dohmatob": [977, 978, 979], "data_min": 977, "data_max": 977, "data_rang": 977, "_learntselectormixin": 977, "gradientboost": 977, "metatransfom": 977, "load_lfw_pair": 977, "wardagglom": 977, "residues_": 977, "indicator_matrix_": 977, "adithya": 977, "ganesh": 977, "akitti": 977, "alexei": 977, "grigorev": 977, "ali": [977, 980, 981, 984, 985, 987], "baharev": 977, "ando": 977, "saaba": 977, "anish": [977, 978], "anthoni": [977, 979, 980], "erling": 977, "rouvinen": 977, "rachez": [977, 978], "benjaminirv": 977, "naul": [977, 978], "gohlk": 977, "bourguignat": 977, "cindi": [977, 985], "sridharan": 977, "kronovet": 977, "data1010": 977, "dotson": 977, "djipei": [977, 978], "dmitri": [977, 979, 980, 981, 985], "spikhalskii": 977, "donn": 977, "duart": [977, 985, 987], "caro": 977, "larson": [977, 981, 982, 984, 986], "fernando": [977, 984], "carrillo": 977, "eckert": 977, "zalkow": 977, "ganiev": [977, 978, 979], "ibraim": [977, 978, 979], "giorgiop": 977, "gryllo": [977, 980], "prokopi": [977, 980], "hsuan": 977, "tien": 977, "ishank": [977, 978, 979], "gulati": [977, 978, 979], "jeffrey04": [977, 978], "jfraj": 977, "jiali": 977, "mei": [977, 982], "kirkham": [977, 978, 980], "wittenau": 977, "loyal": 977, "jungkook": 977, "park": [977, 982, 984, 987], "kamalakerdadi": [977, 978], "kyler": 977, "lilian": [977, 978], "besson": [977, 978], "loui": [977, 978, 982, 984, 986], "tiao": [977, 978], "marktab": 977, "spacek": 977, "martinbpr": [977, 978], "martinosorb": 977, "maryanmorel": [977, 978], "masafumi": 977, "oyamada": 977, "krump": 977, "kolganov": 977, "mbilling": 977, "mhg": 977, "patterson": 977, "omer": 977, "katz": [977, 984, 985], "pauli": 977, "virtanen": 977, "fischer": [977, 978], "pianomania": 977, "preston": [977, 978, 979], "parri": [977, 978, 979], "rohan": [977, 978, 980, 981, 985], "ramanath": 977, "bansod": [977, 978, 979], "scls19fr": 977, "saeger": [977, 978, 979], "shivan": 977, "sornarajah": 977, "simonpl": 977, "sseg": 977, "hoover": [977, 978, 979, 981], "seguin": 977, "theodor": 977, "vasiloudi": 977, "freita": [977, 979, 980], "pereira": [977, 980, 981], "timothi": [977, 985], "hopper": 977, "tokoroten": 977, "vstolbunov": 977, "wangz10": 977, "yucheng": 977, "zhauniarovich": 977, "zac": 977, "stewart": [977, 982, 985, 987], "zhai_pro": 977, "zichen": 977, "7946": 978, "8355": 978, "9010": 978, "8040": 978, "9149": 978, "aman": [978, 979, 980, 986, 987], "dalmia": [978, 979, 980], "nate": [978, 979, 985], "guerin": [978, 979], "lebedev": [978, 979], "utilis": 978, "6497": 978, "7724": 978, "bing": [978, 979], "explained_variance_ratio": 978, "7632": 978, "jpfrancoia": [978, 979], "7676": 978, "moham": [978, 980, 981, 982, 983, 984, 985, 986], "affan": 978, "7756": 978, "7786": 978, "srivatsan": [978, 979, 982], "7799": 978, "7490": [978, 979], "6282": 978, "7301": 978, "6178": 978, "7680": 978, "n_iters_": 978, "7553": 978, "ekaterina": [978, 979, 980, 981, 983], "krivich": [978, 979, 981], "5874": 978, "7593": 978, "7594": 978, "7660": 978, "7750": 978, "7732": 978, "artsion": 978, "lieu": [978, 979], "grid_scores_": [978, 984, 985], "leaveonelabelout": 978, "leaveplabelout": 978, "plural": 978, "mean_tim": 978, "std_time": 978, "3204": 978, "5291": 978, "sounder": 978, "7295": 978, "5299": 978, "bravi": 978, "fouchet": 978, "calinski_harabaz_scor": [978, 980], "harabaz": 978, "6586": 978, "4294": 978, "6667": 978, "6954": 978, "unveil": 978, "yelit": 978, "basebag": [978, 980], "staub": 978, "5805": 978, "5251": 978, "imacul": 978, "1000x": 978, "arfa": 978, "6691": 978, "6913": 978, "5762": 978, "utkarsh": [978, 979, 980, 981], "upadhyai": [978, 979, 980, 981], "6846": 978, "5929": 978, "podshumok": [978, 979], "6173": 978, "ryad": 978, "zenin": 978, "devashish": 978, "asish": [978, 979], "dowl": 978, "6697": 978, "ori": 978, "ziv": 978, "sear": 978, "merritt": 978, "7325": 978, "7239": 978, "hong": [978, 980, 984, 985, 986], "guangguo": 978, "jensen": [978, 984], "7419": 978, "gregori": [978, 982, 983, 984, 985], "stupp": [978, 979], "bernardo": 978, "stein": 978, "sparse_func": [978, 984], "incr_mean_variance_axi": [978, 984], "7049": 978, "7152": 978, "load_boston": [978, 980, 985], "7154": 978, "manvendra": [978, 979], "singh": [978, 979, 980, 981, 982, 984, 985, 986, 987], "5540": 978, "7248": 978, "6764": 978, "wenhua": 978, "6817": 978, "6902": 978, "leonieborn": 978, "5141": 978, "4995": 978, "5012": 978, "_transform_select": 978, "7194": 978, "caio": [978, 980, 982], "oliveira": [978, 980, 982, 986], "6182": 978, "6121": 978, "6472": 978, "7350": 978, "russel": [978, 979], "smith": [978, 979, 980, 981, 982, 984], "7159": 978, "yichuan": [978, 979], "5460": 978, "document_clust": 978, "7353": 978, "_search": 978, "_check_param_grid": 978, "xrang": 978, "7323": 978, "viacheslav": 978, "kovalevskyi": 978, "7101": 978, "residual_metr": 978, "6651": 978, "reorgan": 978, "7187": 978, "7260": 978, "sebasti\u00e1n": 978, "vanrel": 978, "leaveplabelsout": 978, "6660": 978, "unprefix": 978, "7261": 978, "aditya": [978, 980, 981, 982, 986, 987], "joshi": [978, 980, 986], "loginov": 978, "minyushkin": 978, "rudi": 978, "abadi": [978, 979], "saint": 978, "alexfield": 978, "alvaro": [978, 980], "ulloa": 978, "alyssaq": 978, "amlan": 978, "kar": 978, "giessel": 978, "jackson": [978, 979, 981], "murrai": [978, 979], "arafat": 978, "archit": 978, "asnt": 978, "b0noi": 978, "behzad": 978, "tabibian": 978, "kratzwald": 978, "bhargav": 978, "mangipudi": 978, "blakeflei": 978, "brandon": [978, 979, 986, 987], "carter": [978, 979, 987], "camilo": 978, "lamu": 978, "carol": [978, 979], "Willing": [978, 979], "cass": 978, "ceshin": 978, "truong": 978, "codevig": 978, "shiebler": 978, "hnyk": [978, 979], "elli": [978, 981], "nicholson": [978, 979, 980], "thaler": 978, "warshaw": 978, "lasagna": 978, "deborah": [978, 979], "definitelyuncertain": 978, "didi": [978, 979, 980, 981], "zev": [978, 979, 980, 981], "dsquareindia": 978, "edwinensa": 978, "elia": 978, "kuth": 978, "fabio": 978, "ticconi": 978, "fisach": 978, "donovan": 978, "ghg": 978, "giovanni": [978, 980], "cherubin": 978, "lanzani": 978, "glenn": 978, "qian": [978, 983], "mohr": 978, "govin": 978, "vatsan": 978, "reda": 978, "gustav": 978, "m\u00f6rtberg": 978, "halwai": 978, "harizo": [978, 979], "rajaona": [978, 979], "hashcode55": 978, "hdmetor": 978, "hobson": 978, "lane": 978, "bown": 978, "igor": [978, 979, 985], "andriushchenko": [978, 979], "inki": 978, "hwang": 978, "isaac": [978, 979, 981, 982], "sijaranamu": 978, "iver": 978, "jordal": 978, "jackmartin": 978, "fiedler": 978, "routlei": 978, "zike": 978, "janna": 978, "brettingen": 978, "jarfa": 978, "laska": 978, "jblackburn": 978, "levesqu": 978, "hintz": 978, "jeremynixon": 978, "jeroen": 978, "jessica": 978, "jill": 978, "j\u00eann": 978, "vie": 978, "jia": 978, "jiyuan": 978, "johannah": 978, "boersma": 978, "moeller": 978, "striebel": [978, 979], "joncral": 978, "jordi": 978, "munoz": [978, 984], "jrfiedler": 978, "juliankahnert": 978, "juliathebrav": 978, "kaichogami": 978, "lyon": [978, 979], "kingjr": 978, "kjell": 978, "krishna": [978, 979, 980, 981, 982, 983, 986, 987], "kalyan": 978, "krishnakalyan3": 978, "kvle": 978, "putnam": 978, "ldavid": 978, "leig": 978, "leightonzhang": 978, "leland": [978, 979, 980, 982, 983], "mcinn": [978, 979, 980, 982, 983], "liang": [978, 983, 984], "hsieh": 978, "lizsz": 978, "l\u00e9oni": 978, "born": 978, "maniteja": [978, 979, 980], "nandana": [978, 979, 980], "marco": [978, 980, 981, 985, 986, 987], "bao": [978, 986], "szepieniec": 978, "madsen": [978, 980], "massil": 978, "matheu": 978, "duboi": [978, 980], "moroz": 978, "scherer": 978, "michiaki": 978, "ariga": 978, "moussa": 978, "taifi": 978, "mrandrewandrad": 978, "mridul": 978, "seth": 978, "nadya": 978, "naoya": [978, 979, 980, 981], "kanai": [978, 979, 980], "nickledav": 978, "nico": [978, 985], "ningchi": 978, "nlathia": 978, "okbalefthand": 978, "okhlopkov": [978, 979], "pano": 978, "lourida": 978, "strickland": 978, "perrin": 978, "letelli": 978, "pestrickland": 978, "practicalswift": 978, "qimu": 978, "zheng": [978, 979, 984], "rachit": [978, 984, 987], "kansal": 978, "ramana": [978, 979], "randi": 978, "olson": 978, "lutz": [978, 982, 985], "schucker": 978, "jain": [978, 979, 980, 984, 986, 987], "ruifeng": [978, 979, 984], "r\u00e9my": 978, "l\u00e9one": 978, "saihttam": 978, "saiw": 978, "yeung": 978, "shleifer": [978, 979], "sartaj": 978, "sasank": 978, "chilamkurthi": 978, "seal": 978, "shagun": 978, "sodhani": 978, "shanmuga": 978, "shashank": [978, 984], "shekhar": 978, "shawpan": 978, "shengxiduan": 978, "shota": 978, "shuckle16": 978, "smedbergm": 978, "srvanrel": 978, "leriqu": [978, 980], "taranjeet": 978, "themrmax": [978, 979], "hallock": 978, "moreau": [978, 979, 980, 981, 982], "tkammi": 978, "toastedcornflak": [978, 979], "tomdlt": 978, "toshihiro": [978, 979, 985], "kamishima": [978, 979], "tracer0tong": 978, "hauck": 978, "vo": [978, 986], "varun": [978, 979, 980, 986, 987], "jewalikar": 978, "vikram": [978, 987], "villu": 978, "ruusmann": 978, "walter": 978, "waterponei": [978, 979], "wenjian": 978, "welch": 978, "wyseguy7": 978, "xyguo": [978, 980], "yanlend": 978, "yen": [978, 979], "yenchenlin": 978, "yoav": 978, "zivori": 978, "10723": [979, 980], "9623": 979, "undocu": 979, "deleteri": 979, "9677": 979, "ashutosh": [979, 980, 982, 984], "correlation_model": 979, "regression_model": 979, "belatedli": 979, "9717": 979, "9693": 979, "steingold": [979, 980], "9711": 979, "goncalo": [979, 980], "rodrigu": [979, 980, 985], "9641": 979, "bourbeau": [979, 980, 981], "9865": 979, "sachin": [979, 980, 986], "kelkar": [979, 980, 982], "9922": 979, "charli": [979, 980], "brummitt": [979, 980], "9945": 979, "9830": 979, "9600": 979, "kerimov": [979, 980], "9593": 979, "reiichiro": [979, 980], "nakano": [979, 980], "9604": 979, "interim": 979, "9558": 979, "9847": 979, "joan": [979, 980, 981, 982], "massich": [979, 980, 981, 982], "oli": 979, "blum": 979, "9697": 979, "9750": 979, "9788": 979, "9815": 979, "9802": 979, "vrishank": [979, 980], "bhardwaj": [979, 980], "nagarjuna": [979, 980], "nathaniel": [979, 980, 982], "diegodlh": [979, 980], "jkleint": [979, 980], "oliblum90": [979, 980], "pasbi": [979, 980], "lawson": [979, 980, 981], "nielsenmarkus11": [979, 980], "excit": 979, "cautiou": 979, "min_impurity_split": 979, "7823": [979, 980], "8446": 979, "5279": 979, "8363": 979, "5295": 979, "7388": 979, "userguid": 979, "7655": 979, "karan": [979, 980, 981], "desai": [979, 981, 984, 985, 987], "7739": 979, "gasquez": 979, "8120": 979, "neeraj": 979, "gangwar": 979, "7548": 979, "9206": 979, "7441": 979, "6101": 979, "8698": 979, "7794": 979, "herilalaina": [979, 980, 982], "rakotoarison": [979, 980, 982], "5036": 979, "4939": 979, "esuli": [979, 984], "n_skips_": 979, "7914": 979, "horrel": 979, "8591": 979, "hadrien": [979, 982], "7838": 979, "8835": 979, "8061": 979, "cordier": 979, "6288": 979, "9145": 979, "reddi": [979, 980, 981, 986], "chinthala": 979, "7721": 979, "jon": [979, 982, 983, 985, 986], "crall": [979, 985], "7685": 979, "tommi": [979, 980, 981], "l\u00f6fstedt": 979, "9277": 979, "hongkahjun": 979, "7089": 979, "randomized_svd_low_rank": 979, "9067": 979, "6181": 979, "wendling": 979, "8065": 979, "lejeun": 979, "7567": 979, "jay": 979, "doepk": 979, "7573": 979, "romain": [979, 984], "brault": 979, "5229": 979, "7990": 979, "8586": 979, "7723": 979, "8028": 979, "booth": 979, "8005": 979, "7863": 979, "7506": 979, "9044": 979, "5991": 979, "8845": 979, "8053": 979, "8282": 979, "8117": 979, "9259": 979, "8094": 979, "8335": 979, "poughon": 979, "7880": 979, "karnofski": 979, "935": 979, "8931": 979, "attractador": [979, 980], "8002": 979, "8549": 979, "zerodivisionerror": [979, 982, 988], "7501": 979, "dominik": 979, "krzeminski": 979, "7970": 979, "8006": 979, "p\u00f6lsterl": [979, 982, 985], "8936": 979, "8672": 979, "mike": 979, "benfield": 979, "broke": 979, "8068": 979, "5732": 979, "ytrue": 979, "ypred": 979, "8087": 979, "7983": 979, "8512": 979, "8251": 979, "aivision2020": 979, "5814": 979, "7849": 979, "jair": 979, "montoya": 979, "martinez": 979, "randomizedlasso": 979, "5359": 979, "9302": 979, "8160": 979, "8224": 979, "gedeck": 979, "vathsala": [979, 980, 981, 982], "achar": [979, 980, 981, 982], "9022": 979, "mehmet": [979, 985], "basbug": 979, "9024": 979, "8973": 979, "paulo": [979, 985, 987], "haddad": 979, "unmeaning": 979, "6573": 979, "quazi": [979, 980], "marufur": 979, "rahman": [979, 980, 984], "9239": 979, "andr": [979, 986], "ambrosio": 979, "boechat": 979, "early_exager": 979, "assertionerror": 979, "8992": 979, "7954": 979, "foreman": 979, "9105": 979, "9108": 979, "8306": 979, "7872": 979, "_c_step": 979, "3367": 979, "steward": 979, "8768": 979, "detomaso": 979, "6507": 979, "7819": 979, "jayzed82": 979, "6126": 979, "7814": 979, "7702": 979, "9219": 979, "7771": 979, "ang": 979, "randomizedlogisticregress": 979, "8259": 979, "mandatorili": 979, "7565": 979, "8181": 979, "basesearchcv": [979, 980], "8344": 979, "eriksson": 979, "7661": 979, "8295": 979, "batula": 979, "dylan": [979, 982], "werner": [979, 984], "meier": 979, "7365": 979, "aleksandr": 979, "sandrovskii": 979, "5697": 979, "stijn": 979, "tonk": 979, "6250": 979, "8093": 979, "bull": 979, "9507": 979, "7356": 979, "dingwal": 979, "_check_target": 979, "8377": 979, "7929": 979, "5211": 979, "rhinehart": 979, "8159": 979, "8198": 979, "fetch_": 979, "7944": 979, "7825": 979, "kathleen": 979, "7376": 979, "7331": 979, "yangarbit": 979, "__getstate__": [979, 987], "obstruct": 979, "8316": 979, "holger": 979, "8010": 979, "7986": 979, "najera": 979, "9289": 979, "makedir": 979, "9284": 979, "sebastin": [979, 980], "alert": 979, "lgtm": 979, "9278": 979, "heli": 979, "8449": 979, "9078": 979, "purport": 979, "sergul": [979, 980, 983], "aydor": [979, 980, 983], "8922": 979, "8137": 979, "8139": 979, "8995": 979, "2879": 979, "7459": 979, "7812": 979, "9100": 979, "8481": 979, "8174": 979, "tahar": 979, "zanouda": 979, "8854": 979, "8874": 979, "7998": 979, "jiacheng": 979, "argpartit": 979, "frombuffer_empti": 979, "rankdata": 979, "safe_copi": 979, "eig": 979, "fast_dot": 979, "pinvh": [979, 981], "graph_laplacian": 979, "sparsetool": 979, "connected_compon": 979, "check_decision_proba_consist": 979, "7578": 979, "shubham": [979, 982], "9019": 979, "baseensembl": [979, 982], "7464": 979, "rishikesh": 979, "taehoon": [979, 980], "aashil": 979, "balakumaran": [979, 980], "manoharan": [979, 980], "petrov": [979, 980], "minghui": [979, 980], "jc": [979, 980], "alexandercbooth": 979, "chkoar": 979, "aarshai": [979, 980], "gilliam": 979, "subramanyam": 979, "clement": [979, 980, 984], "joudet": [979, 980], "robl": 979, "kati": 979, "luangkot": 979, "lacchia": 979, "akshay0724": 979, "omtcyfz": 979, "rickiepark": 979, "jbdelafoss": 979, "vivek": [979, 980, 981], "elliott": 979, "ldirer": 979, "sid": 979, "kapur": 979, "midina": 979, "mikebenfield": 979, "sourav": [979, 982], "aseem": 979, "bansal": 979, "aishwaryark": 979, "howel": 979, "dokato": 979, "kathi": [979, 982], "ferria": 979, "nikita": [979, 980, 982, 985, 986, 987], "basil": 979, "beirouti": 979, "possa": 979, "bednar": 979, "janin": 979, "harper": 979, "artsiom": 979, "ligo": 979, "rahn": [979, 982], "seanpwilliam": 979, "julian": [979, 980], "kuhlmann": [979, 980], "aubert": 979, "j\u00f6rn": 979, "hee": [979, 982], "shivamgargsya": [979, 983, 985], "kat": 979, "hempstalk": 979, "kaushik": [979, 986, 987, 988], "lakshmikanth": 979, "kennedi": [979, 982], "yap": 979, "kiril": [979, 980, 982, 984], "bobyrev": 979, "imbert": [979, 981, 984, 986], "lera": 979, "douillard": 979, "mainak": 979, "tobychees": [979, 980], "manraj": 979, "marc": [979, 981, 982], "meketon": 979, "marcofalk": 979, "gilch": 979, "mehul": 979, "ahuja": [979, 986, 987], "goetz": [979, 980], "dezub": 979, "baumgartn": 979, "vibrantabhi19": 979, "golubin": 979, "milen": 979, "paskov": 979, "antonin": 979, "carett": 979, "morikko": 979, "mrmjauh": 979, "nalepa": 979, "namiya": 979, "narinek": [979, 980], "angu": [979, 980, 986], "nicol": 979, "vavrova": 979, "nitish": 979, "pandei": [979, 984], "daniil": 979, "olegovich": 979, "craze": 979, "om": 979, "parmind": 979, "patrick": [979, 980, 985, 986], "carlson": 979, "pei": 979, "ganssl": 979, "lorek": 979, "pete": [979, 983, 984], "bachant": 979, "csizsek": 979, "jong": 979, "puneet": 979, "mathur": [979, 981, 982, 987, 988], "quentin": [979, 980, 981], "hibon": 979, "1kastner": 979, "rameshwar": [979, 980], "bhaskaran": [979, 980], "rebecca": 979, "bilbro": 979, "remi": 979, "rampin": 979, "pratik": 979, "agarw": [979, 980, 982], "sailesh": [979, 980], "choyal": [979, 980], "samson": 979, "samu\u00ebl": 979, "weber": 979, "sarah": [979, 981, 984], "abhyudai": 979, "sharan": [979, 980], "yalburgi": [979, 980], "willduan": 979, "siddharth": [979, 983], "almer": 979, "theofilo": 979, "papapanagiot": 979, "alison": 979, "boucher": 979, "folkman": 979, "jung": [979, 983, 987], "shenoi": 979, "vilhelm": [979, 980], "ehrenheim": [979, 980], "alan": [979, 980, 983, 985, 986], "yee": [979, 980], "warut": [979, 980], "vijitbenjaronk": [979, 980], "yuichi": 979, "fujikawa": 979, "affanv14": 979, "andreh7": 979, "bradi": 979, "salz": 979, "campustrampu": 979, "agamemnon": [979, 980, 981, 982, 984, 985], "krasouli": [979, 980, 981, 982, 984, 985], "ditenberg": 979, "elena": 979, "sharova": 979, "filipj8": [979, 980], "fukatani": 979, "guiniol": 979, "guoci": 979, "hakaa1": [979, 980], "xhy": 979, "jakirkham": [979, 980, 981, 987], "jaroslaw": 979, "jeroko": 979, "jmontoyam": 979, "josephsalmon": [979, 980, 981], "jschendel": [979, 980], "leereev": 979, "hahn": [979, 980], "mathurinm": [979, 980, 981, 983, 984, 985, 986, 987], "mehak": 979, "sachdeva": 979, "mlewis1729": 979, "mlliou112": 979, "mthorrel": [979, 982], "ndingwal": 979, "nuff": 979, "plagre": 979, "pldtc325": 979, "breno": [979, 980], "olsen": 979, "alfano": 979, "burn": [979, 980], "polmauri": 979, "charlton": 979, "austin": 979, "chayant": 979, "t15h": 979, "chinmaya": 979, "pancholi": 979, "danielsen": 979, "chung": [979, 980], "pravarmahajan": [979, 980], "dariu": [979, 980], "morawiec": [979, 980], "haberth\u00fcr": 979, "heryanto": 979, "kirkbi": [979, 980], "rashchedrin": 979, "gertrud": 979, "devansh": [979, 980], "dickson": 979, "baxlei": 979, "don86": 979, "klarup": 979, "elizabeth": [979, 981, 984], "ferriss": 979, "ellen": 979, "egli": 979, "chieh": [979, 980], "chou": [979, 980], "grzegorz": [979, 982], "szpak": [979, 982], "zxcvbniu": 979, "icyblad": 979, "ilya": 979, "laughlin": 979, "iv\u00e1n": [979, 985], "vall\u00e9": 979, "aur\u00e9lien": [979, 980, 981, 985, 986], "bellet": [979, 980, 981], "mahapatra": 979, "bundl": [980, 981], "indexerror": [980, 981], "11756": [980, 981], "14237": [980, 981], "schuder": [980, 981, 982], "13903": [980, 981], "13124": [980, 981], "13772": [980, 981], "vya": [980, 981, 982], "12949": 980, "prabakaran": [980, 981, 984, 986, 987], "kumaresshan": [980, 981, 984], "12946": 980, "tallott": 980, "13276": 980, "13005": 980, "13312": 980, "11295": 980, "vacaliuc": [980, 981], "13046": 980, "12360": 980, "aakanksha": 980, "13134": 980, "sandro": [980, 987], "casagrand": [980, 981], "12881": 980, "13165": 980, "13221": 980, "bertrandhaut": [980, 981], "raghunathan": [980, 981, 982, 983, 984, 985, 986], "dowon": [980, 981], "aria": [980, 981, 987], "fibins": [980, 981], "finn": [980, 981], "shea": [980, 981], "joaak": [980, 981], "m\u00e9hault": [980, 981], "kms15": [980, 981], "kossori": [980, 981], "aruku": [980, 981], "lakshya": [980, 981, 982], "ib\u00e1\u00f1ez": [980, 981, 984], "gorelli": [980, 981, 985, 987], "marcogorelli": [980, 981], "mferrari3": [980, 981], "micka\u00ebl": [980, 981], "schoentgen": [980, 981], "pavlo": [980, 981], "kalli": [980, 981], "glaser": [980, 981], "pierretallott": [980, 981, 982], "kapoor": [980, 981], "sandrocasagrand": [980, 981], "tashai": [980, 981], "vishaal": [980, 981], "zhuyi": [980, 981], "ziji": [980, 981], "zj": [980, 981], "poh": [980, 981], "12704": 980, "12701": 980, "12685": 980, "12699": 980, "adanhawth": [980, 981], "stine": [980, 981], "feda": [980, 981], "curic": [980, 981], "jeremiedbb": [980, 981, 982], "katrin": [980, 981], "leinweb": [980, 981], "muhammad": [980, 981, 985], "hassaan": [980, 981], "rafiqu": [980, 981], "paczuski": [980, 981], "waterburi": [980, 981], "shivam": [980, 981, 982], "kotwalia": [980, 981], "12159": 980, "12105": 980, "11912": 980, "12304": 980, "12339": 980, "12246": 980, "12330": 980, "10811": 980, "feldbauer": [980, 981, 982, 983, 986], "12441": 980, "12517": 980, "12234": 980, "12165": 980, "12388": 980, "connor": [980, 985], "tann": [980, 985], "12393": 980, "12122": 980, "sharedmem": 980, "12518": 980, "12481": 980, "12612": 980, "12211": 980, "lisa": [980, 981, 983, 984, 986, 987], "hannel": [980, 981], "melissa": 980, "ferrari": 980, "12451": 980, "12171": 980, "12365": 980, "_encod": 980, "12514": 980, "12522": 980, "12471": 980, "marzinotto": [980, 981], "12317": 980, "12338": 980, "bauk": [980, 981], "12625": 980, "sklearn_site_joblib": 980, "12350": 980, "12467": 980, "unvendor": 980, "12345": 980, "navarret": [980, 981, 982], "benjastudio": [980, 981], "cheuk": [980, 981], "connossor": [980, 981], "levinson": [980, 981], "kieker": [980, 981], "kataev": [980, 981], "dillon": [980, 981, 982], "gardner": [980, 981], "vukolov": [980, 981], "caselli": [980, 981], "gauravahlawat": [980, 981], "gustavo": [980, 981, 986], "mari": [980, 981, 982, 983, 986], "haroldfox": [980, 981], "jacklangerman": [980, 981], "jacopo": [980, 981], "notarstefano": [980, 981], "janvanrijn": [980, 981], "jdethuren": [980, 981], "koen": [980, 981], "kushal": [980, 981], "chauhan": [980, 981, 987], "jie": [980, 981, 984], "lili": [980, 981], "xiong": [980, 981, 986], "liam": [980, 981], "melsyt": [980, 981], "nichola": [980, 981, 983], "shebanov": [980, 981], "oleksandr": [980, 981, 982, 983, 986], "pavlyk": [980, 981, 982, 983], "hausamann": [980, 981], "pulkit": [980, 981, 983], "maloo": [980, 981], "batista": [980, 981, 985], "radostin": [980, 981], "stoyanov": [980, 981], "ramil": [980, 981], "nugmanov": [980, 981], "rebekah": [980, 981, 982], "roopam": [980, 981], "tiernei": [980, 981, 982], "sylvainlan": [980, 981, 982, 983, 984], "takingitcasu": [980, 981], "tulio": [980, 981], "xing": [980, 981], "zach": [980, 981, 986], "mountain": 980, "sorri": 980, "basemultilayerperceptron": [980, 982], "11924": 980, "macbook": 980, "9354": 980, "9372": 980, "astel": 980, "10933": 980, "hansen": 980, "10471": 980, "gaurav": [980, 981, 982, 983, 984, 986], "dhingra": [980, 981, 984], "8003": 980, "jo\u00ebl": 980, "billaud": 980, "10059": 980, "braun": 980, "9612": 980, "jonatan": 980, "samoocha": 980, "8129": 980, "margeta": 980, "k_means_elkan": 980, "11353": 980, "11901": 980, "9875": 980, "9012": 980, "11315": 980, "9041": 980, "9858": 980, "artiem": 980, "krinitsyn": 980, "9908": 980, "8617": 980, "maskani": [980, 982, 983, 984], "filali": 980, "konstantino": 980, "katriopla": 980, "10774": 980, "catalfo": 980, "10795": 980, "takeshi": [980, 985, 986, 987], "yoshizawa": 980, "11082": 980, "sadhana": 980, "srinivasan": [980, 983], "9731": 980, "10045": 980, "fetch_mldata": 980, "11466": 980, "6374": 980, "normalize_compon": [980, 982], "11585": 980, "ivan": [980, 981, 984, 987], "panico": [980, 984], "11420": 980, "6452": 980, "walli": 980, "gauz": 980, "9492": 980, "8484": 980, "9886": 980, "underflow": [980, 985], "10142": 980, "5956": 980, "_class_mean": 980, "_class_cov": 980, "10898": 980, "nanxin": 980, "9832": 980, "11951": 980, "r\u00fcdiger": [980, 981, 983], "busch": [980, 981, 983], "9707": 980, "wan": 980, "7071": 980, "9157": 980, "11176": 980, "forsyth": 980, "11542": 980, "anna": 980, "9524": 980, "9723": 980, "10908": 980, "10899": 980, "melderi": 980, "10101": 980, "10\u2079": 980, "9147": 980, "clae": 980, "fredrik": 980, "mannbi": 980, "10441": 980, "mayur": 980, "kulkarni": 980, "6689": 980, "nihar": 980, "sheth": 980, "11293": 980, "9656": 980, "greenhal": 980, "n_features_to_comput": 980, "9222": 980, "hoh": 980, "9234": 980, "andrewww": 980, "8075": 980, "11211": 980, "9484": 980, "dalla": 980, "card": 980, "9043": 980, "10112": 980, "logistic_regression_path": [980, 981], "11724": 980, "9939": 980, "westov": 980, "10998": 980, "vazelh": [980, 981, 982], "10071": 980, "10153": 980, "d\u00f6pfert": 980, "10095": 980, "cv_valu": 980, "10297": 980, "mabel": [980, 984], "10581": 980, "yacin": 980, "mazari": 980, "10687": 980, "10836": 980, "aishwarya": 980, "10397": 980, "10992": 980, "11327": 980, "11905": 980, "9837": 980, "10593": 980, "10610": 980, "8554": 980, "9775": 980, "10827": 980, "osa": 980, "8066": 980, "10587": 980, "3840": 980, "niederb\u00fchl": 980, "9521": 980, "11124": 980, "arya": 980, "11160": 980, "barkhorn": 980, "11679": 980, "pacha": 980, "9980": 980, "10845": 980, "perez": [980, 987], "parra": 980, "toledano": 980, "10999": 980, "memoryerror": [980, 984], "11135": 980, "10377": 980, "9786": 980, "10093": 980, "alexryndin": 980, "9772": 980, "9515": 980, "liddel": 980, "manh": 980, "dao": 980, "9851": 980, "10280": 980, "10336": 980, "haoran": 980, "basemixtur": [980, 981], "10740": 980, "10869": 980, "g\u00e9ron": 980, "9686": 980, "11310": 980, "_fit_and_scor": 980, "11576": 980, "ronsin": [980, 981], "_run_search": 980, "9599": 980, "11006": 980, "11557": 980, "boucaud": 980, "iid": 980, "9085": 980, "10677": 980, "zhdanovich": 980, "10982": 980, "juliet": 980, "lawton": 980, "10928": 980, "solutu": 980, "immensu": 980, "9257": 980, "8190": 980, "alcorn": 980, "9681": 980, "mottl": [980, 981], "10005": 980, "10346": 980, "tobia": [980, 985, 987], "10887": 980, "11136": 980, "4394": 980, "9579": 980, "kober": 980, "9655": 980, "bjerr": 980, "11556": 980, "11774": 980, "9456": 980, "unexpectedli": 980, "9304": 980, "11144": [980, 981], "9151": 980, "10521": 980, "7668": 980, "9647": 980, "10195": 980, "10192": 980, "11272": 980, "11467": 980, "11505": 980, "giusepp": [980, 981], "costa": [980, 985], "10210": 980, "11520": 980, "11011": 980, "11005": 980, "11308": 980, "11206": 980, "11306": 980, "10437": 980, "lucija": 980, "gregov": 980, "10452": 980, "10181": 980, "nirvan": [980, 984], "anjirbag": 980, "9399": 980, "10913": 980, "rodrigo": 980, "agundez": 980, "10458": 980, "9816": 980, "newei": 980, "11042": 980, "11235": 980, "active_features_": 980, "feature_indices_": 980, "n_values_": 980, "9726": 980, "10829": 980, "gilberto": 980, "olimpio": 980, "10655": 980, "python2": 980, "10412": 980, "jiongyan": 980, "9497": 980, "8361": 980, "neo": 980, "_criterion": 980, "classificationcriterion": 980, "regressioncriterion": 980, "10325": 980, "camil": 980, "stap": 980, "basedecisiontre": [980, 981, 984], "10536": 980, "ohayon": [980, 981, 988], "11464": 980, "stott": 980, "10663": 980, "10229": 980, "11553": 980, "10881": 980, "sevin": 980, "ridge_regress": [980, 981, 987], "10306": 980, "siebert": 980, "11741": 980, "11166": 980, "11010": 980, "lami": 980, "11596": 980, "marcu": 980, "voss": 980, "9569": 980, "12462": 980, "zachariah": 980, "10474": 980, "10500": 980, "9701": 980, "9378": 980, "check_set_param": 980, "7738": 980, "alvin": 980, "chiang": 980, "8102": 980, "ankita": 980, "sinha": 980, "check_methods_subset_invari": [980, 986], "10428": 980, "check_sample_weights_pandas_seri": 980, "11558": 980, "211217613": 980, "absolutelynowarranti": 980, "richi": 980, "halford": [980, 987], "adelr": 980, "adityadaflapurkar": 980, "aidan": 980, "fitzgerald": 980, "aishgrt1": 980, "akash": 980, "shivram": 980, "lenail": [980, 984], "egg": 980, "diaz": 980, "amanda": [980, 983, 984, 985, 986], "aniruddha": 980, "annaayzenshtat": 980, "antonio": [980, 982], "quinonez": 980, "anubhav": 980, "marwaha": 980, "arik": 980, "pamnani": 980, "ozga": 980, "arunava": 980, "geron": [980, 985, 986], "ayush": [980, 985], "bangda": 980, "bastian": 980, "venthur": 980, "benn": 980, "koonc": 980, "cclauss": 980, "chadi": 980, "kamar": 980, "holdgraf": 980, "hirsch": 980, "hogan": 980, "cnx": 980, "cwitt": 980, "ferreira": [980, 985, 986], "gomez": [980, 987], "klevebr": 980, "shwed": 980, "mohn": [980, 984], "danil": 980, "baibak": [980, 981], "beach": 980, "pickup": 980, "derek": 980, "niederhut": [980, 982], "dilutedsauc": 980, "dlovel": 980, "dor": 980, "dougla": 980, "duhaim": 980, "tuzova": 980, "eunji": 980, "farahsae": 980, "raimundo": 980, "fenx": 980, "frankhui": 980, "franz": 980, "wompner": 980, "freija": 980, "descamp": 980, "frsi": 980, "calvo": [980, 981], "georgi": [980, 983], "peev": [980, 983], "gkevinyen5418": 980, "vermeil": 980, "hongh": 980, "hossein": [980, 981, 982], "pourbozorg": [980, 981, 982], "hristo": [980, 987], "hunan": 980, "rostomyan": 980, "iampat": 980, "jaewon": 980, "malcolm": 980, "jami": 980, "wolosonovich": 980, "jeb": 980, "bearer": 980, "jinkun": 980, "jjabl": 980, "johnstott": 980, "jotasi": 980, "julietcl": 980, "shenk": 980, "karl": 980, "kasper": 980, "primdal": 980, "lauritzen": 980, "ksemb": 980, "kuai": [980, 981], "kyeongpil": 980, "kang": [980, 982], "kye": 980, "kyledrogo": 980, "l\u00e9o": 980, "liutong": 980, "lizao": 980, "lkjcalc": 980, "louib": [980, 981], "luciano": [980, 987], "luke": 980, "persola": 980, "markiwanchyshyn": 980, "marsgui": 980, "gubri": [980, 981], "koko": [980, 986, 987], "copeland": [980, 981], "meghann": [980, 982], "minh": 980, "jamaoui": [980, 981, 984], "mohammad": [980, 981], "shahebaz": 980, "muayyad": 980, "alsadi": 980, "nabarun": 980, "pal": [980, 986], "narendran": 980, "santhanam": 980, "suh": 980, "eng": 980, "av": 980, "nicolau": 980, "werneck": 980, "titov": [980, 982, 985, 986], "nilesh": 980, "kevlani": 980, "notmatthancock": [980, 982], "nzw": 980, "oren": 980, "milman": 980, "osaid": 980, "rehman": 980, "nasir": 980, "fernand": [980, 986, 987], "olden": 980, "pierreablin": 980, "pietruh": 980, "pinaki": 980, "nath": 980, "chowdhuri": [980, 986], "piotr": [980, 981], "szyma\u0144ski": [980, 981], "pradeep": [980, 981], "raamana": [980, 981], "pravar": 980, "mahajan": [980, 982], "qingi": 980, "rajendra": 980, "arora": [980, 987], "rankylau": 980, "kosobrodov": 980, "rragundez": 980, "sagnik": 980, "bhattacharya": 980, "radhakrishnan": 980, "saqib": 980, "nizam": 980, "shamsi": 980, "satish": 980, "gigant": [980, 982, 987], "flennerhag": 980, "sebastien": 980, "shalil": 980, "awalei": 980, "shangwu": [980, 981], "sharad": 980, "vijalapuram": 980, "shenhanc78": 980, "rastogi": 980, "siftikha": 980, "sinclert": 980, "p\u00e9rez": 980, "solutusimmensu": 980, "somya": 980, "anand": [980, 984], "srajan": 980, "paliw": 980, "sriharsha": [980, 981], "hatwar": [980, 981], "mcdowel": 980, "syonekura": 980, "takanori": 980, "hayashi": 980, "tarcusx": 980, "theriley106": 980, "heavei": 980, "augspurg": [980, 982], "trishnendu": 980, "ghorai": 980, "twosigmajab": 980, "umar": [980, 981], "farouk": [980, 981], "urvang": [980, 982], "patel": [980, 982, 983, 984, 986], "vadim": [980, 984, 985], "markovtsev": 980, "vinit": 980, "vinod": 980, "viraj": 980, "mavani": 980, "navkal": 980, "vqean3": [980, 981], "vufg": 980, "wallygauz": 980, "wdevazelh": 980, "barnett": 980, "rosenfeld": 980, "yime": 980, "ymazari": 980, "yufeng": 980, "griffith": [980, 981], "z\u00e9": 980, "vin\u00edciu": 980, "zhenq": 980, "zhiqe": 980, "xiao": [980, 982, 985, 986, 987], "couldn": [981, 982, 983, 984, 985, 986, 987, 988], "12955": 981, "klopfer": 981, "14197": 981, "14024": 981, "nicolashug": 981, "13974": 981, "hoang": [981, 982], "fhoang7": 981, "14393": 981, "guillem": [981, 982, 987], "subi": [981, 982, 987], "14087": 981, "14067": 981, "stalei": [981, 982], "14092": 981, "14053": 981, "13947": 981, "instanci": 981, "suffient": 981, "13910": 981, "13894": 981, "myatt": [981, 982], "min_max_axi": 981, "13741": 981, "roddi": [981, 982], "macsween": [981, 982], "14309": 981, "13864": 981, "paresh": [981, 982], "13877": 981, "_sag": 981, "sag_solv": 981, "3591": 981, "13317": 981, "13157": 981, "13086": 981, "cole": 981, "13485": 981, "assia": 981, "benbihi": 981, "13651": 981, "reloc": 981, "13486": 981, "13427": 981, "couvreur": [981, 982], "9069": 981, "13835": 981, "10727": 981, "wood": 981, "13250": 981, "13241": 981, "12143": 981, "11650": 981, "non_negative_factor": [981, 983, 984, 985], "12988": 981, "8769": 981, "11000": 981, "thibault": 981, "sejourn": 981, "changedbehaviourwarn": 981, "11526": 981, "6848": 981, "glemaitr": [981, 982, 984], "11727": 981, "13266": 981, "13545": 981, "sorro": 981, "12807": 981, "12513": 981, "12543": 981, "storch": 981, "13260": 981, "13283": 981, "13524": 981, "13174": 981, "13496": 981, "13620": 981, "12436": 981, "12983": 981, "13251": 981, "joshuakennethjon": 981, "12715": 981, "13164": 981, "12834": 981, "leastsquareserror": 981, "update_terminal_region": 981, "6463": 981, "movelikeriv": 981, "13193": 981, "12599": 981, "13779": 981, "13780": 981, "12916": 981, "13641": 981, "8478": 981, "12177": 981, "12583": 981, "13601": 981, "danylo": 981, "densif": 981, "13240": 981, "bartosz": 981, "13562": 981, "11646": 981, "11699": 981, "make_dataset": 981, "12860": 981, "13336": 981, "toleranbc": 981, "11754": 981, "13397": 981, "fagan": 981, "12174": 981, "12972": 981, "lucio": 981, "fernandez": 981, "arjona": 981, "coeffeci": 981, "13279": 981, "13328": 981, "13389": 981, "basesgdclassifi": 981, "13422": 981, "cl\u00e9ment": [981, 985, 987], "doumouro": 981, "unhandl": 981, "13363": 981, "12821": 981, "13350": 981, "j\u00e9r\u00f4me": [981, 982, 983], "dock\u00e8": [981, 982, 983], "9907": 981, "12232": 981, "sangeeth": 981, "11179": 981, "13151": 981, "12568": 981, "8216": 981, "romuald": 981, "menuet": 981, "12732": 981, "12334": 981, "13607": 981, "12855": 981, "pawel": 981, "sendyk": 981, "13628": 981, "wasn": 981, "13447": 981, "10580": 981, "sandra": [981, 987], "mitrov": 981, "13554": 981, "celelibi": 981, "13142": 981, "11354": 981, "12613": 981, "12669": 981, "torrella": [981, 982], "12861": 981, "8773": 981, "13366": 981, "fournier": 981, "10440": 981, "12222": 981, "10058": 981, "chiotelli": 981, "12279": 981, "12582": 981, "my_pipelin": 981, "2568": 981, "make_": 981, "11364": 981, "baze": 981, "petrushev": 981, "__len__": 981, "13439": 981, "12908": 981, "drew": 981, "13253": 981, "12116": 981, "12197": 981, "12251": 981, "float16": 981, "13007": 981, "raffaello": 981, "baluyot": 981, "13333": 981, "13459": 981, "hunter": 981, "mcgushion": 981, "8508": 981, "6261": 981, "vettigli": 981, "justglow": 981, "12300": 981, "11458": 981, "mitar": 981, "milutinov": 981, "12344": 981, "13549": 981, "warn_on_dtyp": 981, "check_pairwise_arrai": 981, "13382": 981, "prathmesh": 981, "saval": 981, "11705": 981, "11973": 981, "our_rand_r": 981, "madhura": [981, 983, 984, 987], "parikh": [981, 986, 987, 988], "13531": 981, "check_fit_idempot": 981, "12328": 981, "alberto": [981, 985, 986], "torr": 981, "amourav": 981, "assiaben": 981, "micha\u0142owski": 981, "brentfagan": 981, "chenal": [981, 982, 984], "choe": 981, "drewmjohnston": 981, "dror": 981, "atariah": 981, "esvhd": 981, "falak": 981, "gandenberg": 981, "luqi": 981, "jf": 981, "kulbear": 981, "leandro": [981, 985], "hermida": [981, 985], "luk": 981, "manimaran": [981, 983, 984, 985, 986], "gaido": 981, "marinelm": 981, "masstran": 981, "roeschk": 981, "aftab": 981, "abdela": 981, "ibraheem": 981, "mwestt": 981, "iijima": 981, "oresti": 981, "osman": [981, 987], "flanagan": [981, 982], "soriano": 981, "peai": 981, "pim": 981, "haan": 981, "raf": 981, "rajdeep": 981, "dua": 981, "ra\u00fal": 981, "garc\u00eda": [981, 982, 987], "lekhwani": 981, "varma": 981, "shiyu": 981, "duan": [981, 983], "smari": [981, 982, 983], "st\u00e9phane": [981, 982, 986, 987], "surgan12": 981, "thibsej": 981, "xhan": 981, "xinyuliu12": 981, "zayd": 981, "hammoudeh": 981, "16397": [982, 983], "16500": 982, "16505": 982, "16076": 982, "shack": [982, 983, 984], "15930": 982, "inder128": 982, "15810": 982, "15898": 982, "gargsya": 982, "15933": 982, "15760": 982, "15888": 982, "15936": 982, "dizietasahi": 982, "15879": 982, "bibhash": [982, 983], "chandra": [982, 983, 986], "mitra": [982, 983, 987], "15937": 982, "blyston": [982, 983], "15863": 982, "abstractmethod": 982, "_check_x": 982, "basenb": 982, "15996": 982, "brigitta": [982, 983, 984, 988], "sip\u0151cz": [982, 983, 984, 988], "15751": 982, "tirth": [982, 983], "15868": 982, "nikla": [982, 983], "smedemark": 982, "marguli": 982, "15797": 982, "15947": 982, "revamp": 982, "14849": 982, "_name_estim": 982, "_gb": 982, "facto": 982, "_birch": 982, "9250": 982, "12927": 982, "deprecationwarn": 982, "interfer": 982, "hinder": 982, "15080": 982, "14464": 982, "13575": 982, "10482": 982, "13726": 982, "shuzh": 982, "9288": 982, "15057": 982, "korolev": 982, "15120": 982, "7943": 982, "12303": 982, "14510": 982, "14890": 982, "miguel": 982, "cabrera": 982, "14544": 982, "15304": 982, "jaim": 982, "ferrando": 982, "huerta": 982, "12068": 982, "12145": 982, "13609": 982, "camila": 982, "williamson": 982, "15661": 982, "15160": 982, "14259": 982, "14764": 982, "14740": 982, "st\u00e9phan": 982, "tulken": 982, "14623": 982, "sarra": 982, "habchi": 982, "15257": 982, "willocx": 982, "12650": 982, "13960": 982, "multiouput": 982, "14908": 982, "martina": [982, 984], "vila": [982, 984], "15382": 982, "14933": 982, "15138": 982, "cusick": 982, "14406": 982, "14012": 982, "faouzi": [982, 983], "13769": 982, "14194": 982, "least_absolute_devi": [982, 984, 985], "13896": 982, "13933": 982, "14710": 982, "categorical_crossentropi": [982, 986], "14869": 982, "14682": 982, "hancock": 982, "5963": 982, "pablo": [982, 985, 986], "dubou": 982, "14287": 982, "15375": 982, "14305": 982, "14114": 982, "15084": 982, "14294": 982, "14907": 982, "14602": 982, "chawla": 982, "vectorizermixin": 982, "14430": 982, "strip_accents_unicod": 982, "15100": 982, "gradi": 982, "overflowerror": 982, "15463": 982, "norvan": 982, "sahin": 982, "14520": 982, "11635": 982, "alec": 982, "13704": 982, "15557": 982, "14378": 982, "masashi": [982, 984], "shibata": 982, "ashim": 982, "bhattarai": 982, "15010": 982, "skip_comput": 982, "13773": 982, "14356": 982, "15393": 982, "venkatachalam": [982, 983, 984, 985, 986], "14646": 982, "14028": 982, "15429": 982, "14706": 982, "14108": 982, "14170": 982, "14296": 982, "13618": 982, "13995": 982, "14458": 982, "14591": 982, "14864": 982, "15044": 982, "15086": 982, "15038": 982, "15082": 982, "13213": 982, "14647": 982, "linalgerror": 982, "13393": 982, "13707": 982, "training_data_": 982, "14357": 982, "14900": 982, "socastro": 982, "9951": 982, "14936": 982, "15083": 982, "12789": 982, "15274": 982, "13938": 982, "15049": 982, "toccac": 982, "ptocca": 982, "13231": 982, "dong": 982, "13467": 982, "14595": 982, "14865": 982, "l\u00e9onard": [982, 987], "binet": [982, 987], "14732": 982, "14417": 982, "15625": 982, "12258": 982, "14898": 982, "matcovici": 982, "14593": 982, "reboul": 982, "14549": 982, "14704": 982, "15096": 982, "14629": 982, "15488": 982, "15490": 982, "12569": 982, "bicker": 982, "9597": 982, "wenbo": [982, 984], "zhao": [982, 984, 985, 986, 987], "14336": 982, "dexter": 982, "9274": 982, "perri": 982, "13806": 982, "ana\u00ebl": 982, "beaugnon": 982, "15119": 982, "15053": 982, "13290": 982, "13987": 982, "_pairwis": [982, 984], "13925": 982, "robson": 982, "15524": 982, "xun": [982, 984], "12557": 982, "border": 982, "14286": 982, "15099": 982, "baselibsvm": 982, "_sparse_fit": 982, "14894": 982, "danna": 982, "naser": 982, "12887": 982, "15028": 982, "guan": 982, "14381": 982, "11232": 982, "sievert": 982, "10815": 982, "14035": 982, "14475": 982, "14538": 982, "14872": 982, "upcast": [982, 986], "15094": 982, "choose_check_classifiers_label": 982, "enforce_estimator_tags_i": 982, "mock": 982, "mockdatafram": 982, "checkingclassifi": 982, "newton_cg": 982, "random_choice_csc": 982, "fast_dict": 982, "parallel_help": 982, "14902": 982, "14971": 982, "nep": 982, "14702": 982, "13013": 982, "13875": 982, "14680": 982, "check_classifier_multioutput": 982, "check_regressor_multioutput": 982, "13392": 982, "rok": 982, "mihevc": 982, "check_transformer_data_not_an_arrai": 982, "mro": [982, 983], "14884": 982, "alphonsu": 982, "abbi": [982, 983], "popa": [982, 983], "abdur": 982, "rahmaan": 982, "janhang": 982, "abenbihi": 982, "abhinav": [982, 985], "sagar": 982, "jana": 982, "lagat": 982, "alessandro": [982, 984, 987], "surac": 982, "siqueira": 982, "alexgoryainov": 982, "itk": [982, 983, 984], "alexshack": [982, 983, 984], "akinkunl": 982, "kaseorg": 982, "maldonado": [982, 985], "angela": [982, 983, 987], "ambroz": [982, 983], "anisha": 982, "keshavan": 982, "gutierrez": 982, "anuja": 982, "archana": [982, 984], "alva": 982, "arnaudstiegl": 982, "arpanchowdhri": 982, "ashimb9": 982, "ayomid": 982, "bamidel": 982, "baran": 982, "buluttekin": 982, "barrycg": 982, "bill": [982, 983], "mill": 982, "biswadip": 982, "mandal": 982, "blackd0t": 982, "barklei": 982, "c56poni": 982, "camilaagw": 982, "cartman_nabana": 982, "catajara": 982, "cgsavard": [982, 983], "vesteghem": 982, "dakota": 982, "grusak": 982, "datenbergwerk": 982, "dormagen": 982, "deeplook": 982, "drgfreeman": 982, "cashman": 982, "edvardlindelof": 982, "ndirangu": [982, 986], "eunseop": 982, "jeong": 982, "fanni": 982, "federicopisanu": 982, "divo": 982, "flaviomorelli": 982, "francidona": 982, "franco": 982, "luqu": 982, "freder": 982, "haas": 982, "g0g0gadget": 982, "altai": 982, "vale": 982, "rio": [982, 984, 985, 986], "ganevgv": 982, "gdex1": 982, "getgaurav2": 982, "gideon": 982, "sonoiya": 982, "gpapadok": [982, 986], "mogavero": 982, "h4dr1en": 982, "hadshirt": 982, "hailei": [982, 983], "nguyen": [982, 983, 986, 987], "hannah": [982, 984, 986], "bruce": [982, 983], "macdonald": [982, 983], "honglu": 982, "ingrid": 982, "spielman": 982, "a16": [982, 983], "jaehong": 982, "jai": [982, 986], "jeromedock": 982, "jesper": 982, "dramsch": 982, "joanna": 982, "ortiz": 982, "kanika": 982, "sabharw": 982, "katarina": [982, 984], "slama": [982, 984], "kellycarmodi": 982, "eth": 982, "kensuk": 982, "arai": 982, "kesshi": [982, 983], "kevad": 982, "lofti": [982, 983], "winata": [982, 984], "sheng": 982, "dolmatov": 982, "kirthi": 982, "shankar": 982, "sivamani": 982, "katyal": 982, "lakshmi": 982, "krishnan": 982, "lalliacqua": [982, 985], "lbfin": 982, "loopym": 982, "lostcoast": 982, "huynh": [982, 984], "lrjball": [982, 983], "roeder": 982, "maggiecheg": [982, 986], "maithreyi": 982, "venkatesh": 982, "maltimor": 982, "maocx": 982, "douriez": [982, 983], "oywa": 982, "aladago": 982, "mbillingr": 982, "clare": 982, "micah": 982, "miguelbarao": 982, "mina": [982, 983], "naghshhnejad": [982, 983], "motmoti": 982, "mschaffenroth": 982, "natasha": 982, "nezar": 982, "nidhin": 982, "pattaniyil": 982, "nishan": 982, "mann": 982, "nitya": 982, "mandyam": 982, "novaya": [982, 985], "nxorabl": 982, "oleg": 982, "stikhin": 982, "omar": [982, 987, 988], "saleem": 982, "panpiort8": [982, 984], "paula": [982, 983], "poorna": [982, 984], "pspachtholz": [982, 983, 984], "qdeffens": [982, 985], "garg": [982, 983], "rapha\u00ebl": 982, "bournhonesqu": 982, "reza": 982, "gharibi": 982, "payn": 982, "rlm": 982, "juergen": [982, 987], "sanjabi": 982, "ruchitagard": 982, "ruth": 982, "waithera": 982, "sackei": 982, "samesh": [982, 983], "lakhotia": [982, 983], "sewook": 982, "dare": 982, "shreya": 982, "simoncw": 982, "smujjiga": 982, "s\u00f6nke": 982, "behrend": 982, "soumirai": 982, "steinfurt": [982, 984], "cowlei": 982, "th0rwa": [982, 983], "theoptip": [982, 983], "theotheo": 982, "thierno": 982, "ibrahima": 982, "diop": 982, "schmitt": [982, 983], "tilen": 982, "kusterl": 982, "timsaur": 982, "tola": 982, "topisan": 982, "ttang131": 982, "veerlosar": 982, "luzgin": 982, "jeanselm": 982, "lostanlen": 982, "vnherdeiro": 982, "wendi": 982, "willdarnel": 982, "wolframalpha": 982, "xcjason": 982, "martian": 982, "xsat": 982, "yinglr": 982, "yokasr": 982, "maxin": [982, 983], "yulia": 982, "zamrii": 982, "feng": [982, 984, 985, 986], "17959": 983, "17848": 983, "17742": 983, "17995": 983, "thomaz": 983, "santana": [983, 986], "dsouza": [983, 984, 985, 986], "17433": 983, "17985": 983, "multinomialdevi": 983, "logloss": [983, 987], "17694": 983, "rempfler": 983, "tsutomu": 983, "kusanagi": [983, 985], "17357": 983, "18016": 983, "x_copi": 983, "17914": 983, "15730": 983, "forrest": [983, 984], "17309": 983, "swier": [983, 984], "heer": 983, "17360": 983, "17812": 983, "bruno": [983, 984, 985], "idl": 983, "17210": 983, "17235": 983, "17204": 983, "changed_onli": 983, "17205": 983, "15005": [983, 985], "slep009": [983, 985, 986], "estimator_samples_": 983, "16149": 983, "11950": 983, "11514": 983, "16075": 983, "16484": 983, "agglomerativecluclust": 983, "16257": 983, "simona": [983, 984, 985], "maggio": [983, 984, 985], "16801": 983, "rcwoolston": 983, "16431": 983, "14048": 983, "15963": 983, "16084": 983, "15950": 983, "stephani": 983, "15980": 983, "wconnel": 983, "15709": 983, "15707": 983, "maciej": 983, "mikulski": 983, "16006": 983, "rushabh": 983, "vasani": 983, "streamhandl": 983, "logger": 983, "handler": 983, "16451": 983, "16280": 983, "16837": 983, "wornbb": 983, "15669": 983, "chaitanya": 983, "16224": 983, "schwetlick": [983, 984], "gelavizh": 983, "ahmadi": 983, "marija": [983, 984], "vlajic": [983, 984], "wheeler": [983, 984], "16841": 983, "16655": 983, "16718": 983, "miotto": 983, "16981": 983, "g\u00f3rski": [983, 984], "14696": 983, "14516": 983, "15582": 983, "16069": 983, "bail": 983, "16183": 983, "16182": 983, "santhosh": 983, "16437": 983, "hwan": 983, "cho": 983, "16539": 983, "deros": 983, "16692": 983, "16663": 983, "15834": 983, "santiago": 983, "mola": 983, "16103": 983, "divyaprabha": 983, "selectormixin": 983, "16132": 983, "trimeta": 983, "15503": 983, "15782": 983, "plgreenliru": 983, "16403": 983, "narendra": 983, "mukherje": 983, "16508": 983, "15864": 983, "14300": 983, "15436": 983, "15652": 983, "15179": 983, "angelaambroz": 983, "15773": 983, "15655": 983, "14848": 983, "absgrad": 983, "_newton_cg": 983, "16266": 983, "standard_coef_": 983, "standard_intercept_": 983, "average_coef_": 983, "average_intercept_": 983, "16261": 983, "brandt": 983, "16849": 983, "14264": 983, "17021": 983, "16323": 983, "16362": 983, "16442": 983, "parson": [983, 985], "rick": 983, "mackenbach": 983, "16993": 983, "emit": 983, "15622": 983, "mors": 983, "15918": 983, "kubin": 983, "fit_grid_point": 983, "16401": 983, "pratama": 983, "sutiono": 983, "15953": 983, "15959": 983, "16111": 983, "16090": 983, "jayaratn": [983, 984, 987], "14075": 983, "meyer89": 983, "16117": 983, "15785": 983, "16245": 983, "16585": 983, "15762": 983, "16466": 983, "16632": 983, "maura": 983, "pintor": 983, "battista": 983, "biggio": 983, "15946": 983, "ngshya": 983, "32767": 983, "mt19937": 983, "mersenn": 983, "twister": 983, "31bit": 983, "63bit": 983, "crude": 983, "postprocessor": 983, "lemir": 983, "13511": 983, "kennel": 983, "11296": 983, "15558": 983, "15806": 983, "16331": 983, "batiss": 983, "15926": 983, "16021": 983, "sparsearrai": 983, "16728": 983, "uint": 983, "17032": 983, "_safe_tag": 983, "16950": 983, "15380": 983, "acitiv": 983, "16726": 983, "16112": 983, "16622": 983, "17061": 983, "aleksandra": 983, "kocot": 983, "alonso": [983, 985], "allend": [983, 985], "ana": [983, 985], "casado": 983, "ankit810": 983, "arunav": 983, "konwar": 983, "maingret": 983, "beier": 983, "berni": 983, "bharathi": 983, "brigi": [983, 984], "castachick": 983, "castor": 983, "corri": 983, "bartelheim": 983, "dani\u00ebl": 983, "gelder": 983, "daphn": 983, "breuer": 983, "cort": [983, 984, 987], "dbauer9": 983, "borovikova": 983, "eln": 983, "emili": [983, 984], "leung": 983, "evgeni": 983, "chasnovski": 983, "fabiana": 983, "facundo": [983, 986], "ferr\u00edn": 983, "franziska": 983, "boenisch": 983, "bolmier": [983, 984], "gholdman1": 983, "gonthier": 983, "hao": [983, 984, 986, 987], "chun": [983, 984, 986, 987], "haoyin": [983, 985, 986], "h\u00e9lion": 983, "bourboux": 983, "himanshu": [983, 986], "hirofumi": [983, 984], "suzuki": [983, 984], "huangk10": 983, "kemenad": 983, "hye": 983, "sung": 983, "indecisiveus": [983, 984], "inderjeet": 983, "jjmistri": 983, "haitz": [983, 985, 986], "legarreta": [983, 985, 986], "gorro\u00f1o": [983, 985, 986], "judithabk6": 983, "jumon": 983, "kathryn": 983, "krishnachaitanya9": 983, "gia": 983, "thuan": 983, "lkubin": 983, "lopusz": 983, "lucgiffon": 983, "lucyleeow": 983, "kemk": 983, "magda": 983, "zielinska": 983, "mandi": [983, 986], "gu": [983, 984, 986], "manish": 983, "aradwad": 983, "maren": [983, 984, 985, 986, 987], "westermann": [983, 984, 985, 986, 987], "mariana": 983, "meirel": 983, "mariel": 983, "mc4229": 983, "shoemak": 983, "micha\u0142": 983, "s\u0142apek": 983, "mo": 983, "mojca": 983, "bertoncelj": 983, "narendramukherje": 983, "nicolasservel": 983, "nkish": 983, "noa": 983, "tamir": [983, 986], "olicairn": 983, "ur": 983, "lenz": [983, 987], "delanou": 983, "qizhi": 983, "quang": 983, "rachelcjordan": 983, "raduspaimoc": 983, "riccardo": 983, "folloni": 983, "ritchi": 983, "rori": 983, "hartong": 983, "redden": 983, "sambhav": 983, "kothari": 983, "santhoshbala18": 983, "sarat": 983, "addep": 983, "scibol": 983, "kie\u00dfl": 983, "sergiodsr": 983, "shiki": 983, "shubh": 983, "chatterje": 983, "simonamaggio": [983, 984, 985], "snowhit": 983, "stareh": 983, "marsh": 983, "sunmi": 983, "yoon": 983, "talgatomarov": 983, "tamirlan1": 983, "nonner": 983, "vink": [983, 985], "tiphain": 983, "viard": 983, "titu": 983, "vachan": 983, "vandana": 983, "iyer": 983, "waelbenamara": 983, "wderos": 983, "wenliwyan": 983, "windber": 983, "19579": 984, "19646": 984, "stopiter": 984, "19922": 984, "19732": 984, "ishikawa": [984, 985], "19407": 984, "ushtanit": [984, 985], "19982": 984, "19939": 984, "halvic": 984, "19703": 984, "sobkevich": 984, "villaz\u00f3n": 984, "terraza": 984, "fonari": [984, 985], "19182": 984, "yosuk": [984, 985], "kobayashi": [984, 985], "19721": 984, "19659": 984, "19211": 984, "19847": 984, "xiaoyu": 984, "chai": [984, 987], "19308": 984, "19234": 984, "19727": 984, "delong": [984, 985], "transfrom": 984, "19888": 984, "19924": 984, "19271": 984, "zhaowei": 984, "19580": 984, "brice": [984, 985], "adamson": 984, "wil": 984, "yegelwel": 984, "css": 984, "19417": 984, "19179": 984, "19126": 984, "17448": 984, "17107": 984, "17546": 984, "17856": 984, "17984": 984, "riedmann": 984, "francesco": [984, 987], "casalegno": 984, "18052": 984, "sean": [984, 985, 987], "stallei": 984, "17937": 984, "counts_": 984, "init_size_": 984, "17864": 984, "17616": 984, "18167": 984, "18256": 984, "jayratn": 984, "16392": 984, "17095": 984, "18746": 984, "18525": 984, "norm_y_weight": 984, "x_mean_": 984, "y_mean_": 984, "x_std_": 984, "y_std_": 984, "18768": 984, "18302": 984, "md5": 984, "checksum": 984, "14800": 984, "17396": 984, "jiaxiang": 984, "17491": 984, "18280": 984, "17499": 984, "17610": 984, "11064": 984, "17414": 984, "18149": 984, "17679": 984, "18528": 984, "villanova": [984, 985], "14446": 984, "18394": 984, "16985": 984, "garbag": 984, "18334": 984, "multicor": [984, 985], "18341": 984, "egor": 984, "smirnov": 984, "18410": 984, "17702": 984, "18326": 984, "changedbehaviorwarn": 984, "nonblasdotwarn": 984, "17804": 984, "17367": 984, "15427": 984, "gangesh": 984, "gudmalwar": 984, "erin": 984, "6545": 984, "17159": 984, "15361": 984, "17878": 984, "17090": 984, "_check_bounds_param": 984, "12638": 984, "lannuzel": 984, "17526": 984, "ayako": 984, "yagi": 984, "17612": 984, "srimukh": 984, "sripada": 984, "16493": 984, "darshan": 984, "15636": 984, "18987": 984, "16619": 984, "16906": 984, "roei": 984, "kahni": 984, "18293": 984, "16289": 984, "kishimoto": 984, "17379": 984, "18639": 984, "13003": 984, "s\u00e1nchez": 984, "18545": 984, "laurenz": 984, "reitsam": 984, "17578": 984, "knox": 984, "6624": 984, "marijn": 984, "vliet": 984, "18121": 984, "18607": 984, "fhaselbeck": 984, "18622": 984, "haesun": [984, 987], "10493": 984, "17997": 984, "maisonneuv": 984, "17662": 984, "18278": 984, "17412": 984, "16625": 984, "10591": 984, "karnowski": 984, "plot_det_curv": [984, 985], "18176": 984, "10708": 984, "15007": 984, "hathidara": 984, "10711": 984, "17192": 984, "avi": [984, 985], "17225": 984, "17569": 984, "17651": 984, "mato": 984, "17777": 984, "shubhanshu": 984, "mishra": [984, 985], "17826": 984, "decal": 984, "willard": 984, "17935": 984, "cari": 984, "goltermann": 984, "18114": 984, "18405": 984, "yakov": 984, "pchelintsev": 984, "13900": 984, "17478": 984, "teon": 984, "13204": 984, "kosic": 984, "18527": 984, "18343": 984, "devi": 984, "sandeep": 984, "18595": 984, "18222": 984, "18266": 984, "subrat": 984, "sahu": 984, "15126": 984, "17987": 984, "17233": 984, "zolisa": 984, "bleki": 984, "histgradientboost": 984, "18124": 984, "brocchini": 984, "16326": 984, "armstrong": 984, "17427": 984, "17038": 984, "neighborsbas": [984, 987], "17148": 984, "18691": 984, "18370": 984, "18612": 984, "17603": 984, "17604": 984, "17606": 984, "17608": 984, "17609": 984, "17633": 984, "17661": 984, "17932": 984, "16352": 984, "17759": 984, "18269": 984, "17876": 984, "18429": 984, "biernat": 984, "17317": 984, "17406": 984, "wick": 984, "18406": 984, "17833": 984, "yashika": 984, "18510": 984, "18447": 984, "16066": 984, "18682": 984, "16935": 984, "17193": 984, "16335": 984, "14982": 984, "11682": 984, "patric": [984, 985], "15763": 984, "16530": 984, "shuhua": 984, "17386": 984, "17187": 984, "x_idx_sort": 984, "17614": 984, "check_methods_sample_order_invari": [984, 986], "17598": 984, "ngo": 984, "17992": 984, "endian": 984, "17644": 984, "18508": 984, "abo7atm": 984, "spannbauer": 984, "deodhar": 984, "alexandracraciun": 984, "allan": 984, "amy12xx": 984, "tiwari": 984, "choraria": 984, "subramaniyan": 984, "kushwaha": 984, "atsushi": [984, 985], "nukariya": [984, 985], "aura": 984, "autoviz": 984, "auto_viml": 984, "avinash": 984, "anak": 984, "barankaraku": 984, "barberogaston": 984, "beatrizsmg": 984, "mainy": 984, "bossan": [984, 986, 987], "pedigo": [984, 985], "bhavika": 984, "devnani": 984, "biprateep": 984, "dei": 984, "bmaisonn": 984, "byron": 984, "ceethinwa": [984, 985], "chaitanyamog": 984, "clmbst": 984, "coelhudo": 984, "crispinlogan": [984, 987, 988], "cristina": 984, "mula": 984, "darioka": [984, 986, 987], "declan": 984, "neill": 984, "deeksha": 984, "madan": 984, "fiegel": [984, 985, 987], "khoo": 984, "eschibli": 984, "fran": [984, 985, 986], "larsson": [984, 985, 986], "sheni": 984, "genvalen": [984, 985, 986, 987], "kiragu": 984, "gesa": 984, "stupperich": 984, "ghislain": 984, "vaillant": 984, "gim": 984, "seng": 984, "chevali": 984, "bohl": [984, 986], "schole": 984, "hitesh": 984, "somani": 984, "hoda1394": 984, "moin": 984, "hugorichard": 984, "isuru": 984, "wiryadi": 984, "j0rd1smit": 984, "jaehyun": 984, "ahn": 984, "tae": 984, "hoctor": 984, "vese": 984, "jeevan": 984, "jeroenpeterbo": 984, "jhay": 984, "jigna": 984, "panchal": 984, "jim0421": 984, "joaquin": 984, "gorb": 984, "moya": 984, "kartik": 984, "chugh": 984, "kaylani2": 984, "kendrick": 984, "cetina": 984, "kenni": 984, "isakov": 984, "koki": 984, "nishihara": 984, "krum": [984, 986], "arnaudov": [984, 986], "oldja": 984, "guitton": 984, "mariam": 984, "l\u00f6ning": 984, "scheubrein": 984, "megasari": 984, "mathschi": 984, "giudic": 984, "milan": 984, "straka": 984, "muoki": 984, "caleb": 984, "haiat": 984, "nadia": 984, "tahiri": 984, "ph": 984, "hamada": 984, "neil": 984, "botelho": 984, "nil": 984, "noelano": 984, "oj_lappi": 984, "oleh": [984, 986], "kozynet": [984, 986], "pankaj": 984, "jindal": 984, "pardeep": 984, "parthiv": 984, "chigurupati": 984, "pgithub": 984, "probinette4": 984, "pwalchessen": 984, "rachel": [984, 987], "fischoff": 984, "toshniw": 984, "rafei": 984, "iqbal": 984, "rahul": 984, "jakhar": 984, "rachum": 984, "ramyanp": [984, 985], "rauwuckl": 984, "ravi": [984, 987], "kiran": 984, "boggavarapu": 984, "rishi": 984, "advani": 984, "rithvik": 984, "romijnd": 984, "tavenard": 984, "rubi": 984, "werman": 984, "ryotaro": 984, "tsukada": 984, "sadak": 984, "khandelw": 984, "ezebunandu": 984, "kimbinyi": 984, "shail": 984, "keller": 984, "shao": [984, 985, 986], "shooter23": [984, 985], "soledad": 984, "galli": 984, "subrat93": 984, "sunitha": 984, "selvan": 984, "kusanagi2": 984, "terenc": [984, 985], "honl": [984, 985], "thij": [984, 987, 988], "thomas9292": 984, "thorben": 984, "tijanajovanov": 984, "timo": 984, "tnwei": 984, "ufmay": 984, "umberto": 984, "lupo": 984, "vika": [984, 986], "viniciu": [984, 985], "fuck": [984, 985], "violeta": 984, "watchtheblur": 984, "willpeppo": 984, "xethan": 984, "qianm": 984, "yue": 984, "yutaro": 984, "ikeda": 984, "zacchari": 984, "ramzi": 984, "zoj613": 984, "21271": 985, "21833": 985, "siavash": 985, "rezazadeh": 985, "19210": 985, "21295": 985, "22050": 985, "21991": 985, "19869": 985, "21481": [985, 986], "andr\u00e9": [985, 986], "babino": [985, 986], "disconnect": 985, "21915": 985, "21694": 985, "minknowski": 985, "21741": 985, "21871": 985, "21845": 985, "21517": 985, "21917": 985, "21552": 985, "escap": [985, 987], "21493": 985, "21199": 985, "20638": 985, "bohn\u00e9": 985, "21179": 985, "21195": 985, "21130": 985, "20761": 985, "21251": 985, "min_idf": 985, "max_idf": 985, "20752": 985, "alek": [985, 986], "lefebvr": [985, 986], "21340": 985, "21093": 985, "21351": 985, "cve": 985, "28975": 985, "21336": 985, "_check_sample_weight": 985, "only_non_neg": 985, "20880": 985, "andr\u00e1": [985, 986, 987], "if_delegate_has_method": [985, 986], "21145": 985, "zahlii": 985, "21389": 985, "20002": 985, "19310": 985, "least_squar": 985, "19733": 985, "lad": 985, "absolute_loss": 985, "20165": 985, "18444": 985, "18010": 985, "threadsaf": 985, "18736": 985, "17443": 985, "19641": 985, "20087": 985, "fauchereau": 985, "19002": 985, "19052": 985, "yusuk": 985, "nagasaka": 985, "17622": 985, "19024": 985, "franki": 985, "robertson": 985, "20117": 985, "natchiappan": [985, 986], "19883": 985, "20597": 985, "20899": 985, "20200": 985, "fit_": 985, "partial_fit_": 985, "19297": 985, "20560": 985, "18393": 985, "bittarello": 985, "19263": 985, "19244": 985, "18459": 985, "nd": 985, "18898": 985, "ora": 985, "phongpanagnam": 985, "21080": 985, "ledoit_wolf_shrinkag": 985, "20416": 985, "defoi": 985, "20583": 985, "19365": 985, "ateif": 985, "sara": 985, "19669": 985, "importlib": 985, "pyoxid": 985, "20297": 985, "20209": 985, "19011": 985, "20729": 985, "12069": 985, "19046": 985, "surya": [985, 986], "18433": 985, "19198": 985, "19159": 985, "beno\u00eet": 985, "mal\u00e9zieux": 985, "19908": 985, "20512": 985, "20960": 985, "cgroup": [985, 986], "quota": [985, 986], "20477": 985, "19799": 985, "19564": 985, "19836": 985, "19162": 985, "10096": 985, "fenil": 985, "suchak": 985, "20159": 985, "murata": [985, 986], "20534": 985, "19296": 985, "19035": 985, "19520": 985, "18964": 985, "19401": 985, "relova": 985, "17169": 985, "dmytro": 985, "lituiev": 985, "20380": 985, "pulido": 985, "felip": [985, 986, 987, 988], "bidu": [985, 986], "rutter": 985, "20515": 985, "carsten": 985, "allefeld": 985, "19568": 985, "shyam": 985, "20207": 985, "tomohiro": 985, "endo": 985, "20161": 985, "shuhei": 985, "kayawari": 985, "arka204": [985, 987], "20431": 985, "pfaffel": 985, "19428": 985, "hamoumi": 985, "19411": 985, "20959": 985, "20554": 985, "xiangyin": 985, "kong": 985, "9978": 985, "10027": 985, "16449": 985, "20231": 985, "naka": 985, "19571": 985, "20155": 985, "oura": [985, 986, 987], "19004": 985, "midvidi": 985, "19055": 985, "19172": 985, "19426": 985, "19499": 985, "strubel": 985, "19616": 985, "19391": 985, "19390": 985, "linearmodel": 985, "17743": 985, "17772": 985, "17746": 985, "17785": 985, "17750": 985, "17769": 985, "20683": 985, "19491": 985, "19472": 985, "shortest_path": 985, "20531": 985, "19415": 985, "17036": 985, "20326": 985, "uttam": 985, "9843": 985, "19643": 985, "attard": 985, "19784": 985, "18328": 985, "20312": 985, "divyanshu": 985, "deoli": 985, "18543": 985, "20552": 985, "19278": 985, "20030": 985, "tingshan": 985, "18649": 985, "rodion": 985, "martynov": 985, "20619": 985, "baseshufflesplit": 985, "20056": 985, "pabloduque0": 985, "prematur": 985, "20904": 985, "tomasz": 985, "jakubek": [985, 986], "18925": 985, "poznik": [985, 986, 987], "18842": 985, "19473": 985, "jiefangxuanyan": 985, "20072": 985, "20842": 985, "mart\u00edn": [985, 986], "19631": 985, "19790": 985, "flynn": [985, 987], "18368": 985, "19483": 985, "20526": 985, "19069": 985, "19041": 985, "20250": 985, "20652": 985, "19934": 985, "gleb": [985, 987, 988], "levitskii": 985, "19734": 985, "robinson": 985, "19752": 985, "zhehao": [985, 986, 987], "19527": 985, "19788": 985, "19356": 985, "makoeppel": 985, "19879": 985, "19906": 985, "20727": 985, "20961": 985, "n_input_features_": 985, "20240": 985, "20843": 985, "18959": 985, "wstate": 985, "20023": 985, "19336": 985, "20272": 985, "19459": 985, "bezuidenhout": 985, "clifford": 985, "akai": 985, "nettei": 985, "19948": 985, "20657": 985, "19766": 985, "propreti": 985, "20385": 985, "_weighted_percentil": 985, "huberlossfunct": 985, "20528": 985, "_safe_index": 985, "20673": 985, "is_scalar_nan": 985, "assert_warn": 985, "assert_warns_messag": 985, "20521": 985, "abdulelah": 985, "mesfer": 985, "adrian": [985, 986, 987], "garcia": 985, "badaracco": 985, "sad\u0142ocha": 985, "rubial": 985, "alessia": 985, "marcolini": 985, "alihan": 985, "zihna": 985, "alin": 985, "amol": 985, "deshmukh": 985, "pessoa": 985, "anavelyz": 985, "ashish": 985, "ashvith": 985, "shetti": 985, "baam": [985, 986], "baptbillard": 985, "bmalezieux": 985, "bumblebe": 985, "caherrera": 985, "meli": [985, 986, 987], "chrissobel": 985, "yeh": 985, "chuliang": 985, "cliffordemmanuel": 985, "conner": 985, "shen": 985, "dimitri": [985, 986, 987], "papadopoulo": [985, 986, 987], "orfano": [985, 986, 987], "dmallia17": 985, "ds_ana": 985, "jardim": 985, "edwinwenink": 985, "eleni": 985, "markou": 985, "ericellwang": [985, 986], "ezri": 985, "mudd": 985, "fato": 985, "morina": 985, "hafner": 985, "flyingdutchman23": 985, "uwha": [985, 986], "bereng": 985, "frederick": 985, "frellwan": 985, "vicent": [985, 986, 987], "geroldcsend": 985, "glen": 985, "gl\u00f2ria": [985, 987], "mu\u00f1oz": [985, 987], "gregorystrubel": 985, "groceryheist": 985, "guiweb": 985, "haidar": [985, 986], "almubarak": [985, 986], "moritz": [985, 987], "g\u00fcnther": 985, "mirza": 985, "harutaka": 985, "kawamura": 985, "hassan": 985, "alsawadi": 985, "geovan": [985, 986], "gome": [985, 986], "lima": [985, 986], "ilic": 985, "ikko": 985, "ashimin": 985, "isaack": 985, "mungui": 985, "ishaan": 985, "bhat": [985, 987], "ishan": [985, 986], "iwhalv": 985, "preiss": 985, "budarz": 985, "jannik": 985, "jennif": 985, "jianzhu": 985, "guo": 985, "jnboehm": 985, "johanwork": 985, "paton": 985, "schneider": 985, "n\u00e1pole": 985, "julio": 985, "julyrashchenko": 985, "jvm": 985, "kadatatlu": 985, "kishor": 985, "karen": 985, "palacio": 985, "kmatt10": 985, "kobaski": 985, "kot271828": 985, "kunj": 985, "kurumeyuta": 985, "kxytim": 985, "lacrosse91": 985, "laveen": 985, "bagai": 985, "leonardo": 985, "rocco": [985, 986, 987], "uieda": 985, "leopoldo": 985, "corona": 985, "lsturtew": 985, "lucca": 985, "quadro": 985, "ly648499246": 985, "mabu": 985, "manaileng": 985, "mariangela": 985, "marielaraj": 985, "hirzel": 985, "mateo": 985, "nore\u00f1a": 985, "mathi": 985, "batoul": 985, "calcot": 985, "prieur": 985, "\u00f6zer": 985, "miao": 985, "cai": 985, "karbownik": 985, "michalkrawczyk": [985, 986], "mitzi": [985, 986], "mlondschien": 985, "haseeb": [985, 986], "khoual": 985, "jarir": 985, "kanji": 985, "nadim": 985, "kawwa": 985, "nanshan": 985, "naozin555": 985, "fultz": 985, "nic": 985, "annau": 985, "stefani": [985, 987], "nigel": 985, "bosch": 985, "nodar": 985, "okroshiashvili": 985, "ogbonna": 985, "chibuik": 985, "ogordon100": 985, "phongpanangam": 985, "duqu": 985, "ibieta": 985, "jimenez": [985, 986], "lacouth": 985, "olszewski": 985, "dye": 985, "pierreattard": [985, 986], "yve": 985, "borgn": 985, "pranayanchuri": 985, "princ": 985, "canuma": 985, "putschblo": 985, "ranjanikrishnan": 985, "rene": 985, "corneil": 985, "ricardojnf": 985, "richardscottoz": 985, "sandi": 985, "khosasi": 985, "benhur": 985, "flore": 985, "shinehid": 985, "shinnar": 985, "tootoonian": 985, "solosil": 985, "kolawol": 985, "stagg": 985, "swpeas": 985, "tfifi": 985, "caswel": 985, "timotheemathieu": 985, "wolodzko": 985, "tliu68": 985, "uhmann": 985, "tom1092": 985, "tom\u00e1": [985, 986], "moreyra": 985, "tommaso": 985, "noto": 985, "tsuga": 985, "vang": 985, "gkiasta": 985, "vil\u00e9m": 985, "zouhar": 985, "vlasovet": 985, "waijean": 985, "whidou": 985, "xiaoyuchai": 985, "yasmeen": 985, "alsaedi": 985, "yoch": 985, "yusukenagasaka": 985, "yzhenman": 985, "zeyusun": 985, "zhaoweiwang": 985, "msvcp140": 986, "dll": 986, "24631": 986, "24446": 986, "10805": 986, "mathia": 986, "23471": 986, "24015": 986, "23990": 986, "23833": 986, "24017": 986, "sorski": [986, 987], "23395": 986, "23636": 986, "22063": 986, "22059": 986, "kurz": [986, 987], "23608": 986, "23548": 986, "24087": 986, "23273": 986, "23194": 986, "23198": 986, "lise": 986, "kleiber": 986, "23358": 986, "23264": 986, "feature_names_in": 986, "23299": 986, "23214": 986, "collot": [986, 987], "baak": 986, "23370": 986, "23410": 986, "compute_sample_weight": 986, "23115": 986, "22868": 986, "multiindex": 986, "22410": 986, "23271": 986, "21987": 986, "22064": 986, "22065": 986, "22288": 986, "22320": 986, "21219": 986, "21542": 986, "23098": 986, "22318": 986, "23036": 986, "binary_crossentropi": 986, "23040": 986, "23046": 986, "22856": 986, "21032": 986, "18170": 986, "21038": 986, "14975": 986, "22526": 986, "23095": 986, "silk": 986, "20031": 986, "krawczyk": 986, "21148": 986, "22255": 986, "21881": 986, "vassard": 986, "22217": 986, "21735": 986, "22154": 986, "22537": 986, "iofal": 986, "arisa": [986, 987], "22775": 986, "22913": 986, "randomgeek78": 986, "22493": 986, "19680": 986, "thibaut": 986, "22119": 986, "22016": 986, "22015": 986, "19747": 986, "attalla": 986, "22498": 986, "21482": 986, "pujalt": 986, "22412": 986, "16605": 986, "21901": 986, "rileran": 986, "23113": 986, "ilion": 986, "beyst": 986, "21425": 986, "stefanini": 986, "16948": 986, "patricio": 986, "cerda": 986, "22002": 986, "21109": 986, "inner_stats_": 986, "iter_offset_": 986, "18975": 986, "22111": 986, "22181": 986, "21334": 986, "21705": 986, "stanlei": [986, 987], "21432": 986, "22806": 986, "jihan": 986, "benni": 986, "21713": 986, "haya": 986, "21567": 986, "maggi": 986, "chege": 986, "22300": 986, "15948": 986, "sysuresh": 986, "22553": 986, "19490": 986, "ferrin": 986, "22120": 986, "15984": 986, "okon": 986, "22696": 986, "22486": 986, "21800": 986, "20567": 986, "22159": 986, "20811": 986, "21814": 986, "16748": 986, "siqi": 986, "22215": 986, "23047": 986, "22695": 986, "22697": 986, "21762": 986, "22106": 986, "gijsber": 986, "21632": 986, "genesi": 986, "valencia": 986, "22566": 986, "22908": 986, "23097": 986, "23079": 986, "20803": 986, "23023": 986, "21573": 986, "21832": 986, "20145": 986, "22356": 986, "18482": 986, "gameiro": 986, "kharsa": 986, "22370": 986, "17819": 986, "22235": 986, "21837": 986, "wagner": 986, "22199": 986, "aidar": 986, "shakerimoff": 986, "tenavi": 986, "nakamura": 986, "22223": 986, "marcom": 986, "21617": 986, "ritter": [986, 987], "21114": 986, "21078": 986, "21448": 986, "16061": 986, "19438": 986, "18310": 986, "elfner": 986, "22249": 986, "22137": 986, "22694": 986, "22808": 986, "22950": 986, "21086": 986, "22206": 986, "21808": 986, "22548": 986, "22062": 986, "trujillo": [986, 987], "22148": 986, "22240": 986, "9087": 986, "22525": 986, "19689": 986, "21606": 986, "21341": 986, "preservs": 986, "21767": 986, "21724": 986, "yar": 986, "khine": 986, "phyo": 986, "21998": 986, "22891": 986, "22899": 986, "23256": 986, "19794": 986, "21534": 986, "22254": 986, "21805": 986, "jeann": 986, "dionisi": 986, "22685": 986, "n_neighbour": 986, "18832": 986, "23033": 986, "21565": 986, "17266": 986, "interpet": 986, "22118": 986, "ohad": 986, "22284": 986, "19158": 986, "nicki": 986, "skaft": 986, "20753": 986, "22108": 986, "22635": 986, "19085": 986, "22866": 986, "21576": 986, "emil": 986, "dugnat": 986, "21873": 986, "21177": 986, "20408": 986, "ceballo": 986, "22058": 986, "23034": 986, "22203": 986, "21026": 986, "21880": 986, "mrinal": 986, "tyagi": 986, "22982": 986, "22508": 986, "comb": 986, "22604": 986, "22212": 986, "21430": 986, "desislava": 986, "vasileva": 986, "22687": 986, "22150": 986, "22248": 986, "20860": 986, "shubhraneel": 986, "21888": 986, "21954": 986, "22953": 986, "16018": 986, "21445": 986, "21988": 986, "get_output_feature_nam": 986, "21569": 986, "21079": 986, "20653": 986, "21434": 986, "19916": 986, "22735": 986, "compute_inverse_transform": 986, "21701": 986, "22114": 986, "21330": 986, "21408": 986, "22149": 986, "21436": 986, "22191": 986, "22476": 986, "21278": 986, "21316": 986, "clickabl": 986, "21298": 986, "22237": 986, "check_scalar": 986, "22218": 986, "validationerror": 986, "check_requires_y_non": 986, "22578": 986, "arcidiacono": [986, 987], "22595": 986, "21310": 986, "22027": 986, "lanterni": 986, "23077": 986, "22188": 986, "22830": 986, "2357juan": [986, 987], "adamgonzo": 986, "adijohar": 986, "kumawat": 986, "raghuwanshi": 986, "duron": 986, "ahmadjubair33": 986, "aj": 986, "druck": 986, "peixinho": 986, "arroyo": 986, "alexanmv": 986, "almeidayoel": 986, "amar": [986, 987, 988], "amrcod": 986, "griva": [986, 987], "andrii": 986, "herrou": 986, "ducout": 986, "arth": 986, "arthurmello": 986, "arturoamor": 986, "atharva": 986, "patil": 986, "aufarkari": 986, "avm19": [986, 987], "ayan": 986, "bardiya": [986, 987], "behrouz": 986, "ben3940": 986, "bijil": 986, "subhash": 986, "bmreinig": 986, "brenden": 986, "kadota": 986, "cdrig": 986, "chalmer": 986, "chitteti": 986, "srinath": [986, 987], "chloe": 986, "agath": 986, "azencott": 986, "christopherlim98": 986, "weidemann": 986, "combsccod": 986, "daniela": [986, 987], "darren": [986, 987], "eargl": 986, "gilbertson": [986, 987], "dea": [986, 987, 988], "mar\u00eda": [986, 987, 988], "denni": 986, "osei": 986, "dessyvv": 986, "dev514": 986, "diwakar": 986, "ries": 986, "drskd": 986, "emiko": 986, "sano": 986, "emmanouil": 986, "gionanidi": 986, "ermolaevpa": [986, 987], "estefania": 986, "barreto": 986, "ojeda": 986, "eyast": 986, "fatima": 986, "gasmi": 986, "luna": 986, "glushchenkov": 986, "fkaren27": 986, "fpgawesom": 986, "ftorres16": [986, 987], "gabor": 986, "berei": 986, "kertesz": 986, "gauthier": 986, "giancarlo": 986, "glennfrutiz": 986, "guillermo": 986, "fern\u00e1ndez": 986, "hansin": [986, 987], "henrymooresc": [986, 987], "hideaki": 986, "imamura": 986, "hind": 986, "hmasdev": 986, "hvassard": 986, "aki": [986, 987], "iasoon": 986, "ingela": 986, "cowton": 986, "jalexand3r": 986, "jauhar": 986, "jaya": 986, "kommireddi": 986, "je": 986, "jelfner": 986, "jenni": 986, "jirka": 986, "borovec": 986, "cipri\u00e1n": 986, "loayza": 986, "chazalon": 986, "mess": 986, "jovan": [986, 987], "stojanov": [986, 987], "jschuerz": 986, "katotten": 986, "ken4git": 986, "doucet": 986, "kimayoung": 986, "koushik": 986, "kranthi": 986, "sedamaki": 986, "krumetoft": 986, "lesne": 986, "casino": [986, 987], "logan": [986, 987], "lucieclair": 986, "luiz": 986, "magali": 986, "mandjev": 986, "wurp": [986, 987], "boerner": 986, "wimld": 986, "martel": 986, "corentin": 986, "mat\u00eda": 986, "matjansen": 986, "francia": 986, "megabyt": 986, "mehrdad": 986, "moradizadeh": 986, "melemo2": 986, "micky774": [986, 987], "milana2": 986, "millawel": 986, "miwojc": 986, "mizuki": 986, "mlant": 986, "mohit": 986, "moonkyung94": 986, "mpoemsl": 986, "mrinaltyagi": 986, "leu": 986, "msabati": 986, "nadirhan": 986, "\u015fahin": 986, "naipawat": [986, 987], "poolsawat": [986, 987], "nartayxd": 986, "nastegiano": 986, "nathansquan": 986, "detlefsen": 986, "niket": 986, "nikhil": 986, "suresh": 986, "kondratyev": 986, "husak": 986, "partev": [986, 987], "pelennor": 986, "piet": [986, 987], "br\u00f6mmel": [986, 987], "pinki": 986, "poloso": 986, "pramod": 986, "anantharam": 986, "puhuk": [986, 987], "purna": 986, "mansingh": 986, "quadv": 986, "rahil": [986, 987, 988], "boy": 986, "raz": 986, "hoshia": 986, "rishabh": 986, "barnowski": [986, 987], "rsnegrin": 986, "yadav": 986, "sakinaouisrani": 986, "sanjai": 986, "marreddi": 986, "seel": 986, "sele": [986, 987], "seyedsaman": 986, "emami": 986, "shandeng123": 986, "sharmadharmp": 986, "shaymernaturalint": 986, "shuangchi": [986, 987], "siavrez": 986, "slishak": 986, "spikebh": 986, "sply88": 986, "kailasa": [986, 987], "sultan": 986, "orazbayev": 986, "sumit": 986, "saha": 986, "sven": [986, 987], "eschlbeck": 986, "stehl": [986, 987], "swapnil": 986, "teunp": 986, "ferr\u00e9": 986, "hjortkj\u00e6r": 986, "thiruvenkadam": 986, "toastedyeast": [986, 987], "mctiernan": [986, 987], "udit": 986, "ugo": 986, "marchand": 986, "vera": [986, 987], "komey": [986, 987], "victoireloui": 986, "vishwakarma": 986, "vikrant": 986, "khedkar": 986, "chernyi": 986, "weijiadu": 986, "yuan": [986, 987], "yiyangq": 986, "yosshi999": 986, "yuki": 986, "koyama": 986, "zeel": 986, "zempleni": 986, "zhenfish": 986, "\u8d75\u4e30": 986, "2023": 987, "25747": 987, "base_estimator__": 987, "25477": 987, "25563": 987, "25570": 987, "25664": 987, "25774": 987, "25500": 987, "25589": 987, "25704": 987, "min_sample_split": 987, "25744": 987, "25619": 987, "25638": 987, "25354": 987, "25174": 987, "25089": 987, "25129": 987, "auxillari": 987, "25363": 987, "25188": 987, "25295": 987, "spec": 987, "25312": 987, "backslash": 987, "25511": 987, "25172": 987, "25341": 987, "25094": 987, "25250": 987, "25370": 987, "23101": 987, "24873": 987, "25694": 987, "25274": 987, "25296": 987, "25147": 987, "23619": 987, "24354": 987, "safiuddin": 987, "khaja": 987, "gsiisg": 987, "23935": 987, "22527": 987, "_sgd_fast": 987, "_plain_sgd": 987, "oversc": 987, "23798": 987, "24543": 987, "24465": 987, "23734": 987, "24699": 987, "23865": 987, "simd": 987, "primit": 987, "23446": 987, "23197": 987, "23604": 987, "23585": 987, "24556": 987, "maladi\u00e8r": [987, 988], "24617": 987, "sim4n6": 987, "24688": 987, "22054": 987, "roic": 987, "24264": 987, "maladier": 987, "14736": 987, "hunt": 987, "zhan": 987, "20802": 987, "pokorni": 987, "22965": 987, "22968": 987, "23038": 987, "propog": 987, "23210": 987, "24258": 987, "23470": 987, "21938": 987, "23127": 987, "19075": 987, "ramo": 987, "carre\u00f1o": 987, "24951": 987, "22268": 987, "mohamedbsh": 987, "23905": 987, "11860": 987, "ablin": 987, "24528": 987, "23726": 987, "24421": 987, "kshitij": [987, 988], "22554": 987, "24218": 987, "molin": 987, "21020": 987, "24856": 987, "22014": 987, "23252": 987, "24538": 987, "24889": 987, "24146": 987, "peretti": 987, "nestor": 987, "navarro": 987, "nati": 987, "tomatti": 987, "24855": 987, "24849": 987, "20415": 987, "24283": 987, "24894": 987, "23819": 987, "edoardo": 987, "abati": 987, "24747": 987, "24245": 987, "24405": 987, "salman": [987, 988], "16695": 987, "vitor": 987, "rosa": 987, "18298": 987, "25077": 987, "24317": 987, "24350": 987, "24755": 987, "levitski": [987, 988], "24637": 987, "24767": 987, "23275": 987, "maxwelllzh": 987, "24433": 987, "yogendrasingh": 987, "23637": 987, "23877": 987, "10168": 987, "\u0142ukasz": 987, "borchmann": 987, "12285": 987, "miltenberg": 987, "13042": 987, "parizi": 987, "18094": 987, "22562": 987, "24714": 987, "foor": 987, "23834": 987, "24051": 987, "22518": 987, "18020": 987, "24338": 987, "23442": 987, "atukorala": 987, "22710": 987, "conroi": 987, "trinh": 987, "23461": 987, "24365": 987, "24630": 987, "rushil": 987, "24084": 987, "iinfo": 987, "24141": 987, "24539": 987, "23977": 987, "23683": 987, "andrei": 987, "melnik": 987, "16747": 987, "18805": 987, "hongshaoyang": 987, "22269": 987, "23139": 987, "24645": 987, "10468": 987, "ruben": 987, "22993": 987, "24750": 987, "rudresh": 987, "veerkhar": 987, "23874": 987, "24075": 987, "22665": 987, "24683": 987, "24058": 987, "perdok": 987, "20331": 987, "23993": 987, "22629": 987, "24412": 987, "22898": 987, "23480": 987, "21469": 987, "lapack_svd_driv": 987, "20617": 987, "ouptut": 987, "25067": 987, "14862": 987, "24512": 987, "24667": 987, "25080": 987, "24523": 987, "mia": 987, "bajic": 987, "3llobo": 987, "kania": 987, "anulekh": 987, "admir": 987, "demiraj": 987, "adoublet": 987, "ahmedbgh": 987, "aiko": 987, "akshita": 987, "prasanth": 987, "ala": 987, "miola": 987, "lebel": 987, "buzenet": [987, 988], "kassa": 987, "bera": 987, "maennel": 987, "aniket": 987, "shirsat": 987, "anthony22": 987, "apostolo": 987, "tsetogl": 987, "aravindh": 987, "artur": 987, "hermano": 987, "ashah002": 987, "ashwin": [987, 988], "azaria": 987, "gebremichael": 987, "b0rxington": 987, "badr": 987, "moufad": 987, "bart\u0142omiej": 987, "go\u0144da": 987, "bdegraaff": 987, "berkecanrizai": 987, "bernd": 987, "fritzk": 987, "bhoomika": 987, "biswaroop": 987, "cannon": 987, "bsh": 987, "ceh": 987, "chalulu": 987, "changyao": 987, "zablit": 987, "veenhui": 987, "christianwaldmann": 987, "christin": 987, "verrier": 987, "dangonite57": 987, "danielgaerb": 987, "davidblnc": 987, "dayn": 987, "khant": 987, "dhanshre": 987, "diadochokinet": 987, "diederikwp": 987, "litsidi": 987, "drewhogg": 987, "oc": 987, "dwight": 987, "lindquist": 987, "eden": 987, "brekk": 987, "edern": 987, "eleanor": 987, "eliaschiavon": 987, "emir": 987, "fabrizio": 987, "damicelli": 987, "fcharra": 987, "siola": [987, 988], "tuveri": 987, "franck": 987, "charra": 987, "geevarghes": 987, "georgiamaydai": 987, "gianr": 987, "lazz": 987, "guitar": 987, "gunesbayir": 987, "harshit5674": 987, "hasan": 987, "yaman": 987, "vrigazov": 987, "htsedebenham": 987, "humahn": 987, "ido": 987, "iglesi": 987, "iliya": 987, "zhechev": 987, "iren": 987, "ivanllt": 987, "sedykh": 987, "mcivor": 987, "janfidor": 987, "jiten": 987, "sidhpura": 987, "jkarolczak": 987, "jo\u00e3o": 987, "johnathanpi": 987, "koumenti": 987, "panga": [987, 988], "johnthagen": 987, "fleme": 987, "choo": 987, "yun": 987, "keat": 987, "juanfe88": 987, "juliaschoepp": 987, "jygerardi": 987, "ka00ri": 987, "kanishk": 987, "sachdev": 987, "kanissh": 987, "kendal": 987, "kento": 987, "nozawa": 987, "eliasi": 987, "kluge": 987, "lieret": 987, "kirandevraj": 987, "kraig": 987, "vamsi": 987, "kapadni": 987, "lingyi1110": 987, "mantovani": 987, "maascha": 987, "madinak": 987, "maksym": 987, "mansi": 987, "kostelac": [987, 988], "marvin": [987, 988], "krawutschk": [987, 988], "masanori": 987, "kanazu": 987, "haberland": 987, "mauroantonioserrano": 987, "maxi": 987, "marufo": 987, "maximesaur": 987, "smolskii": 987, "bou": 987, "mehgarg": 987, "mehmetcanakbai": 987, "baji\u0107": 987, "flak": 987, "hornstein": 987, "ruiter": 987, "paradi": 987, "iljin": 987, "misa": 987, "ogura": 987, "wilksch": 987, "mrastgoo": 987, "naois": 987, "holohan": 987, "nass": 987, "jacobi": 987, "nawazish": 987, "alam": 987, "nguy\u1ec5n": 987, "v\u0103n": 987, "di\u1ec5n": 987, "fanelli": 987, "nihal": 987, "thukarama": 987, "jare": 987, "nima10khodaveisi": 987, "nima": 987, "sarajpoor": 987, "nitinramvelraj": 987, "nnlnr": 987, "npach": 987, "nwanna": 987, "nymark": 987, "kho": 987, "holman": 987, "oll": 987, "lukowski": 987, "hassoun": 987, "tamer": 987, "ouss1508": 987, "oyindamola": 987, "olatunji": 987, "pab": 987, "pandata": 987, "soar": 987, "petar": 987, "mlinari\u0107": 987, "pooja": 987, "subramaniam": 987, "priyam": 987, "kakati": 987, "freeland": 987, "keerti": 987, "rafal": 987, "wojdyla": 987, "raghuv": 987, "makhija": 987, "rehan": 987, "guha": 987, "klima": 987, "crockett": 987, "homm": 987, "roman4oo": 987, "rowan": 987, "mankoo": 987, "sabri": 987, "monaf": 987, "safikh": 987, "salahuddin": 987, "yojana": 987, "menes": 987, "ephrem": 987, "sangam": 987, "sangamswadik": 987, "sanjai_3": 987, "sarahremu": 987, "sashka": 987, "savkomax": 987, "gustafson": 987, "sec65": 987, "seljak": 987, "shadi": 987, "gewili": 987, "shellyfung": 987, "shinsuk": 987, "mori": 987, "shiva": 987, "shoaib": 987, "khan": 987, "shogo": 987, "hida": 987, "shrankhla": 987, "sonniv": 987, "sortofamudkip": 987, "stanislav": 987, "modrak": 987, "stellalin7": 987, "vaerenbergh": 987, "schmerler": 987, "tabea": 987, "kossen": 987, "thedevpanda": 987, "syd": 987, "sre": 987, "weezel": [987, 988], "bonald": 987, "germer": 987, "ion": 987, "timofei": 987, "kornev": 987, "pitter": 987, "tomiock": 987, "mathew": 987, "tspeng": 987, "egashira": 987, "rey": 987, "puerta": 987, "vishal": 987, "vyom": 987, "pathak": 987, "wattai": 987, "wchathura": 987, "wen": 987, "x110": 987, "xuniu": 987, "yanhong": 987, "ef": 987, "yusuf": 987, "raji": 987, "adil": 987, "khwaja": 987, "zeeshan": 987, "lone": 987, "25196": 988, "24871": 988, "25438": 988, "yotam": 988, "avidar": 988, "constantini": 988, "25294": 988, "25308": 988, "25291": 988, "25367": 988, "25402": 988, "25044": 988, "25102": 988, "24568": 988, "25805": 988, "25251": 988, "25784": 988, "25490": 988, "22409": 988, "25177": 988, "24882": 988, "25186": 988, "breve": 988, "25506": 988, "25601": 988, "fidor": 988, "sckit": 988, "verion": 988, "25297": 988, "24230": 988, "25232": 988, "21809": 988, "25732": 988, "25587": 988, "25713": 988, "25432": 988, "25299": 988, "omarmanzoor": 988, "25659": 988, "24140": 988, "25417": 988, "24076": 988, "25443": 988, "feature_union": 988, "25093": 988, "25220": 988, "22506": 988, "24935": 988, "seladu": 988, "25257": 988, "25190": 988, "25387": 988, "check_transformers_unfitted_stateless": 988, "25733": 988, "19664": 988}, "objects": {"sklearn": [[361, 0, 0, "-", "base"], [361, 0, 0, "-", "calibration"], [361, 0, 0, "-", "cluster"], [361, 0, 0, "-", "compose"], [418, 4, 1, "", "config_context"], [361, 0, 0, "-", "covariance"], [361, 0, 0, "-", "cross_decomposition"], [361, 0, 0, "-", "datasets"], [361, 0, 0, "-", "decomposition"], [361, 0, 0, "-", "discriminant_analysis"], [361, 0, 0, "-", "dummy"], [361, 0, 0, "-", "ensemble"], [361, 0, 0, "-", "exceptions"], [361, 0, 0, "-", "experimental"], [361, 0, 0, "-", "feature_extraction"], [361, 0, 0, "-", "feature_selection"], [361, 0, 0, "-", "gaussian_process"], [576, 4, 1, "", "get_config"], [361, 0, 0, "-", "impute"], [361, 0, 0, "-", "inspection"], [361, 0, 0, "-", "isotonic"], [361, 0, 0, "-", "kernel_approximation"], [361, 0, 0, "-", "kernel_ridge"], [361, 0, 0, "-", "linear_model"], [361, 0, 0, "-", "manifold"], [361, 0, 0, "-", "metrics"], [361, 0, 0, "-", "mixture"], [361, 0, 0, "-", "model_selection"], [361, 0, 0, "-", "multiclass"], [361, 0, 0, "-", "multioutput"], [361, 0, 0, "-", "naive_bayes"], [361, 0, 0, "-", "neighbors"], [361, 0, 0, "-", "neural_network"], [361, 0, 0, "-", "pipeline"], [361, 0, 0, "-", "preprocessing"], [361, 0, 0, "-", "random_projection"], [361, 0, 0, "-", "semi_supervised"], [845, 4, 1, "", "set_config"], [846, 4, 1, "", "show_versions"], [361, 0, 0, "-", "svm"], [361, 0, 0, "-", "tree"], [361, 0, 0, "-", "utils"]], "sklearn.base": [[376, 1, 1, "", "BaseEstimator"], [377, 1, 1, "", "BiclusterMixin"], [378, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [379, 1, 1, "", "ClassifierMixin"], [380, 1, 1, "", "ClusterMixin"], [381, 1, 1, "", "DensityMixin"], [382, 1, 1, "", "OneToOneFeatureMixin"], [383, 1, 1, "", "RegressorMixin"], [384, 1, 1, "", "TransformerMixin"], [385, 4, 1, "", "clone"], [386, 4, 1, "", "is_classifier"], [387, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[376, 2, 1, "", "get_params"], [376, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[377, 3, 1, "", "biclusters_"], [377, 2, 1, "", "get_indices"], [377, 2, 1, "", "get_shape"], [377, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[378, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[379, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[380, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[381, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[382, 2, 1, "", "get_feature_names_out"]], "sklearn.base.RegressorMixin": [[383, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[384, 2, 1, "", "fit_transform"], [384, 2, 1, "", "set_output"]], "sklearn.calibration": [[388, 1, 1, "", "CalibratedClassifierCV"], [389, 1, 1, "", "CalibrationDisplay"], [390, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[388, 2, 1, "", "fit"], [388, 2, 1, "", "get_params"], [388, 2, 1, "", "predict"], [388, 2, 1, "", "predict_proba"], [388, 2, 1, "", "score"], [388, 2, 1, "", "set_params"]], "sklearn.calibration.CalibrationDisplay": [[389, 2, 1, "", "from_estimator"], [389, 2, 1, "", "from_predictions"], [389, 2, 1, "", "plot"]], "sklearn.cluster": [[391, 1, 1, "", "AffinityPropagation"], [392, 1, 1, "", "AgglomerativeClustering"], [393, 1, 1, "", "Birch"], [394, 1, 1, "", "BisectingKMeans"], [395, 1, 1, "", "DBSCAN"], [396, 1, 1, "", "FeatureAgglomeration"], [397, 1, 1, "", "KMeans"], [398, 1, 1, "", "MeanShift"], [399, 1, 1, "", "MiniBatchKMeans"], [400, 1, 1, "", "OPTICS"], [401, 1, 1, "", "SpectralBiclustering"], [402, 1, 1, "", "SpectralClustering"], [403, 1, 1, "", "SpectralCoclustering"], [404, 4, 1, "", "affinity_propagation"], [405, 4, 1, "", "cluster_optics_dbscan"], [406, 4, 1, "", "cluster_optics_xi"], [407, 4, 1, "", "compute_optics_graph"], [373, 4, 1, "", "dbscan"], [408, 4, 1, "", "estimate_bandwidth"], [409, 4, 1, "", "k_means"], [410, 4, 1, "", "kmeans_plusplus"], [411, 4, 1, "", "mean_shift"], [412, 4, 1, "", "spectral_clustering"], [413, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[391, 2, 1, "", "fit"], [391, 2, 1, "", "fit_predict"], [391, 2, 1, "", "get_params"], [391, 2, 1, "", "predict"], [391, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[392, 2, 1, "", "fit"], [392, 2, 1, "", "fit_predict"], [392, 2, 1, "", "get_params"], [392, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[393, 2, 1, "", "fit"], [393, 2, 1, "", "fit_predict"], [393, 2, 1, "", "fit_transform"], [393, 2, 1, "", "get_feature_names_out"], [393, 2, 1, "", "get_params"], [393, 2, 1, "", "partial_fit"], [393, 2, 1, "", "predict"], [393, 2, 1, "", "set_output"], [393, 2, 1, "", "set_params"], [393, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[394, 2, 1, "", "fit"], [394, 2, 1, "", "fit_predict"], [394, 2, 1, "", "fit_transform"], [394, 2, 1, "", "get_feature_names_out"], [394, 2, 1, "", "get_params"], [394, 2, 1, "", "predict"], [394, 2, 1, "", "score"], [394, 2, 1, "", "set_output"], [394, 2, 1, "", "set_params"], [394, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[395, 2, 1, "", "fit"], [395, 2, 1, "", "fit_predict"], [395, 2, 1, "", "get_params"], [395, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[396, 2, 1, "", "fit"], [396, 3, 1, "", "fit_predict"], [396, 2, 1, "", "fit_transform"], [396, 2, 1, "", "get_feature_names_out"], [396, 2, 1, "", "get_params"], [396, 2, 1, "", "inverse_transform"], [396, 2, 1, "", "set_output"], [396, 2, 1, "", "set_params"], [396, 2, 1, "", "transform"]], "sklearn.cluster.KMeans": [[397, 2, 1, "", "fit"], [397, 2, 1, "", "fit_predict"], [397, 2, 1, "", "fit_transform"], [397, 2, 1, "", "get_feature_names_out"], [397, 2, 1, "", "get_params"], [397, 2, 1, "", "predict"], [397, 2, 1, "", "score"], [397, 2, 1, "", "set_output"], [397, 2, 1, "", "set_params"], [397, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[398, 2, 1, "", "fit"], [398, 2, 1, "", "fit_predict"], [398, 2, 1, "", "get_params"], [398, 2, 1, "", "predict"], [398, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[399, 2, 1, "", "fit"], [399, 2, 1, "", "fit_predict"], [399, 2, 1, "", "fit_transform"], [399, 2, 1, "", "get_feature_names_out"], [399, 2, 1, "", "get_params"], [399, 2, 1, "", "partial_fit"], [399, 2, 1, "", "predict"], [399, 2, 1, "", "score"], [399, 2, 1, "", "set_output"], [399, 2, 1, "", "set_params"], [399, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[400, 2, 1, "", "fit"], [400, 2, 1, "", "fit_predict"], [400, 2, 1, "", "get_params"], [400, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[401, 3, 1, "", "biclusters_"], [401, 2, 1, "", "fit"], [401, 2, 1, "", "get_indices"], [401, 2, 1, "", "get_params"], [401, 2, 1, "", "get_shape"], [401, 2, 1, "", "get_submatrix"], [401, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[402, 2, 1, "", "fit"], [402, 2, 1, "", "fit_predict"], [402, 2, 1, "", "get_params"], [402, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[403, 3, 1, "", "biclusters_"], [403, 2, 1, "", "fit"], [403, 2, 1, "", "get_indices"], [403, 2, 1, "", "get_params"], [403, 2, 1, "", "get_shape"], [403, 2, 1, "", "get_submatrix"], [403, 2, 1, "", "set_params"]], "sklearn.compose": [[414, 1, 1, "", "ColumnTransformer"], [415, 1, 1, "", "TransformedTargetRegressor"], [416, 4, 1, "", "make_column_selector"], [417, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[414, 2, 1, "", "fit"], [414, 2, 1, "", "fit_transform"], [414, 2, 1, "", "get_feature_names_out"], [414, 2, 1, "", "get_params"], [414, 3, 1, "", "named_transformers_"], [414, 2, 1, "", "set_output"], [414, 2, 1, "", "set_params"], [414, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[415, 2, 1, "", "fit"], [415, 2, 1, "", "get_params"], [415, 3, 1, "", "n_features_in_"], [415, 2, 1, "", "predict"], [415, 2, 1, "", "score"], [415, 2, 1, "", "set_params"]], "sklearn.covariance": [[419, 1, 1, "", "EllipticEnvelope"], [420, 1, 1, "", "EmpiricalCovariance"], [421, 1, 1, "", "GraphicalLasso"], [422, 1, 1, "", "GraphicalLassoCV"], [423, 1, 1, "", "LedoitWolf"], [424, 1, 1, "", "MinCovDet"], [425, 1, 1, "", "OAS"], [426, 1, 1, "", "ShrunkCovariance"], [427, 4, 1, "", "empirical_covariance"], [428, 4, 1, "", "graphical_lasso"], [429, 4, 1, "", "ledoit_wolf"], [430, 4, 1, "", "ledoit_wolf_shrinkage"], [375, 4, 1, "", "oas"], [431, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[419, 2, 1, "", "correct_covariance"], [419, 2, 1, "", "decision_function"], [419, 2, 1, "", "error_norm"], [419, 2, 1, "", "fit"], [419, 2, 1, "", "fit_predict"], [419, 2, 1, "", "get_params"], [419, 2, 1, "", "get_precision"], [419, 2, 1, "", "mahalanobis"], [419, 2, 1, "", "predict"], [419, 2, 1, "", "reweight_covariance"], [419, 2, 1, "", "score"], [419, 2, 1, "", "score_samples"], [419, 2, 1, "", "set_params"]], "sklearn.covariance.EmpiricalCovariance": [[420, 2, 1, "", "error_norm"], [420, 2, 1, "", "fit"], [420, 2, 1, "", "get_params"], [420, 2, 1, "", "get_precision"], [420, 2, 1, "", "mahalanobis"], [420, 2, 1, "", "score"], [420, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLasso": [[421, 2, 1, "", "error_norm"], [421, 2, 1, "", "fit"], [421, 2, 1, "", "get_params"], [421, 2, 1, "", "get_precision"], [421, 2, 1, "", "mahalanobis"], [421, 2, 1, "", "score"], [421, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLassoCV": [[422, 2, 1, "", "error_norm"], [422, 2, 1, "", "fit"], [422, 2, 1, "", "get_params"], [422, 2, 1, "", "get_precision"], [422, 2, 1, "", "mahalanobis"], [422, 2, 1, "", "score"], [422, 2, 1, "", "set_params"]], "sklearn.covariance.LedoitWolf": [[423, 2, 1, "", "error_norm"], [423, 2, 1, "", "fit"], [423, 2, 1, "", "get_params"], [423, 2, 1, "", "get_precision"], [423, 2, 1, "", "mahalanobis"], [423, 2, 1, "", "score"], [423, 2, 1, "", "set_params"]], "sklearn.covariance.MinCovDet": [[424, 2, 1, "", "correct_covariance"], [424, 2, 1, "", "error_norm"], [424, 2, 1, "", "fit"], [424, 2, 1, "", "get_params"], [424, 2, 1, "", "get_precision"], [424, 2, 1, "", "mahalanobis"], [424, 2, 1, "", "reweight_covariance"], [424, 2, 1, "", "score"], [424, 2, 1, "", "set_params"]], "sklearn.covariance.OAS": [[425, 2, 1, "", "error_norm"], [425, 2, 1, "", "fit"], [425, 2, 1, "", "get_params"], [425, 2, 1, "", "get_precision"], [425, 2, 1, "", "mahalanobis"], [425, 2, 1, "", "score"], [425, 2, 1, "", "set_params"]], "sklearn.covariance.ShrunkCovariance": [[426, 2, 1, "", "error_norm"], [426, 2, 1, "", "fit"], [426, 2, 1, "", "get_params"], [426, 2, 1, "", "get_precision"], [426, 2, 1, "", "mahalanobis"], [426, 2, 1, "", "score"], [426, 2, 1, "", "set_params"]], "sklearn.cross_decomposition": [[432, 1, 1, "", "CCA"], [433, 1, 1, "", "PLSCanonical"], [434, 1, 1, "", "PLSRegression"], [435, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[432, 3, 1, "", "coef_"], [432, 2, 1, "", "fit"], [432, 2, 1, "", "fit_transform"], [432, 2, 1, "", "get_feature_names_out"], [432, 2, 1, "", "get_params"], [432, 2, 1, "", "inverse_transform"], [432, 2, 1, "", "predict"], [432, 2, 1, "", "score"], [432, 2, 1, "", "set_output"], [432, 2, 1, "", "set_params"], [432, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[433, 3, 1, "", "coef_"], [433, 2, 1, "", "fit"], [433, 2, 1, "", "fit_transform"], [433, 2, 1, "", "get_feature_names_out"], [433, 2, 1, "", "get_params"], [433, 2, 1, "", "inverse_transform"], [433, 2, 1, "", "predict"], [433, 2, 1, "", "score"], [433, 2, 1, "", "set_output"], [433, 2, 1, "", "set_params"], [433, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[434, 3, 1, "", "coef_"], [434, 2, 1, "", "fit"], [434, 2, 1, "", "fit_transform"], [434, 2, 1, "", "get_feature_names_out"], [434, 2, 1, "", "get_params"], [434, 2, 1, "", "inverse_transform"], [434, 2, 1, "", "predict"], [434, 2, 1, "", "score"], [434, 2, 1, "", "set_output"], [434, 2, 1, "", "set_params"], [434, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[435, 2, 1, "", "fit"], [435, 2, 1, "", "fit_transform"], [435, 2, 1, "", "get_feature_names_out"], [435, 2, 1, "", "get_params"], [435, 2, 1, "", "set_output"], [435, 2, 1, "", "set_params"], [435, 2, 1, "", "transform"]], "sklearn.datasets": [[436, 4, 1, "", "clear_data_home"], [437, 4, 1, "", "dump_svmlight_file"], [438, 4, 1, "", "fetch_20newsgroups"], [439, 4, 1, "", "fetch_20newsgroups_vectorized"], [440, 4, 1, "", "fetch_california_housing"], [441, 4, 1, "", "fetch_covtype"], [442, 4, 1, "", "fetch_kddcup99"], [443, 4, 1, "", "fetch_lfw_pairs"], [444, 4, 1, "", "fetch_lfw_people"], [445, 4, 1, "", "fetch_olivetti_faces"], [446, 4, 1, "", "fetch_openml"], [447, 4, 1, "", "fetch_rcv1"], [448, 4, 1, "", "fetch_species_distributions"], [449, 4, 1, "", "get_data_home"], [450, 4, 1, "", "load_breast_cancer"], [451, 4, 1, "", "load_diabetes"], [452, 4, 1, "", "load_digits"], [453, 4, 1, "", "load_files"], [454, 4, 1, "", "load_iris"], [455, 4, 1, "", "load_linnerud"], [456, 4, 1, "", "load_sample_image"], [457, 4, 1, "", "load_sample_images"], [458, 4, 1, "", "load_svmlight_file"], [459, 4, 1, "", "load_svmlight_files"], [460, 4, 1, "", "load_wine"], [461, 4, 1, "", "make_biclusters"], [462, 4, 1, "", "make_blobs"], [463, 4, 1, "", "make_checkerboard"], [464, 4, 1, "", "make_circles"], [465, 4, 1, "", "make_classification"], [466, 4, 1, "", "make_friedman1"], [467, 4, 1, "", "make_friedman2"], [468, 4, 1, "", "make_friedman3"], [469, 4, 1, "", "make_gaussian_quantiles"], [470, 4, 1, "", "make_hastie_10_2"], [471, 4, 1, "", "make_low_rank_matrix"], [472, 4, 1, "", "make_moons"], [473, 4, 1, "", "make_multilabel_classification"], [474, 4, 1, "", "make_regression"], [475, 4, 1, "", "make_s_curve"], [476, 4, 1, "", "make_sparse_coded_signal"], [477, 4, 1, "", "make_sparse_spd_matrix"], [478, 4, 1, "", "make_sparse_uncorrelated"], [479, 4, 1, "", "make_spd_matrix"], [480, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[481, 1, 1, "", "DictionaryLearning"], [482, 1, 1, "", "FactorAnalysis"], [483, 1, 1, "", "FastICA"], [484, 1, 1, "", "IncrementalPCA"], [485, 1, 1, "", "KernelPCA"], [486, 1, 1, "", "LatentDirichletAllocation"], [487, 1, 1, "", "MiniBatchDictionaryLearning"], [488, 1, 1, "", "MiniBatchNMF"], [489, 1, 1, "", "MiniBatchSparsePCA"], [490, 1, 1, "", "NMF"], [491, 1, 1, "", "PCA"], [492, 1, 1, "", "SparseCoder"], [493, 1, 1, "", "SparsePCA"], [494, 1, 1, "", "TruncatedSVD"], [495, 4, 1, "", "dict_learning"], [496, 4, 1, "", "dict_learning_online"], [374, 4, 1, "", "fastica"], [497, 4, 1, "", "non_negative_factorization"], [498, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[481, 2, 1, "", "fit"], [481, 2, 1, "", "fit_transform"], [481, 2, 1, "", "get_feature_names_out"], [481, 2, 1, "", "get_params"], [481, 2, 1, "", "set_output"], [481, 2, 1, "", "set_params"], [481, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[482, 2, 1, "", "fit"], [482, 2, 1, "", "fit_transform"], [482, 2, 1, "", "get_covariance"], [482, 2, 1, "", "get_feature_names_out"], [482, 2, 1, "", "get_params"], [482, 2, 1, "", "get_precision"], [482, 2, 1, "", "score"], [482, 2, 1, "", "score_samples"], [482, 2, 1, "", "set_output"], [482, 2, 1, "", "set_params"], [482, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[483, 2, 1, "", "fit"], [483, 2, 1, "", "fit_transform"], [483, 2, 1, "", "get_feature_names_out"], [483, 2, 1, "", "get_params"], [483, 2, 1, "", "inverse_transform"], [483, 2, 1, "", "set_output"], [483, 2, 1, "", "set_params"], [483, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[484, 2, 1, "", "fit"], [484, 2, 1, "", "fit_transform"], [484, 2, 1, "", "get_covariance"], [484, 2, 1, "", "get_feature_names_out"], [484, 2, 1, "", "get_params"], [484, 2, 1, "", "get_precision"], [484, 2, 1, "", "inverse_transform"], [484, 2, 1, "", "partial_fit"], [484, 2, 1, "", "set_output"], [484, 2, 1, "", "set_params"], [484, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[485, 2, 1, "", "fit"], [485, 2, 1, "", "fit_transform"], [485, 2, 1, "", "get_feature_names_out"], [485, 2, 1, "", "get_params"], [485, 2, 1, "", "inverse_transform"], [485, 2, 1, "", "set_output"], [485, 2, 1, "", "set_params"], [485, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[486, 2, 1, "", "fit"], [486, 2, 1, "", "fit_transform"], [486, 2, 1, "", "get_feature_names_out"], [486, 2, 1, "", "get_params"], [486, 2, 1, "", "partial_fit"], [486, 2, 1, "", "perplexity"], [486, 2, 1, "", "score"], [486, 2, 1, "", "set_output"], [486, 2, 1, "", "set_params"], [486, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[487, 2, 1, "", "fit"], [487, 2, 1, "", "fit_transform"], [487, 2, 1, "", "get_feature_names_out"], [487, 2, 1, "", "get_params"], [487, 2, 1, "", "partial_fit"], [487, 2, 1, "", "set_output"], [487, 2, 1, "", "set_params"], [487, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[488, 2, 1, "", "fit"], [488, 2, 1, "", "fit_transform"], [488, 2, 1, "", "get_feature_names_out"], [488, 2, 1, "", "get_params"], [488, 2, 1, "", "inverse_transform"], [488, 2, 1, "", "partial_fit"], [488, 2, 1, "", "set_output"], [488, 2, 1, "", "set_params"], [488, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[489, 2, 1, "", "fit"], [489, 2, 1, "", "fit_transform"], [489, 2, 1, "", "get_feature_names_out"], [489, 2, 1, "", "get_params"], [489, 2, 1, "", "inverse_transform"], [489, 2, 1, "", "set_output"], [489, 2, 1, "", "set_params"], [489, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[490, 2, 1, "", "fit"], [490, 2, 1, "", "fit_transform"], [490, 2, 1, "", "get_feature_names_out"], [490, 2, 1, "", "get_params"], [490, 2, 1, "", "inverse_transform"], [490, 2, 1, "", "set_output"], [490, 2, 1, "", "set_params"], [490, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[491, 2, 1, "", "fit"], [491, 2, 1, "", "fit_transform"], [491, 2, 1, "", "get_covariance"], [491, 2, 1, "", "get_feature_names_out"], [491, 2, 1, "", "get_params"], [491, 2, 1, "", "get_precision"], [491, 2, 1, "", "inverse_transform"], [491, 2, 1, "", "score"], [491, 2, 1, "", "score_samples"], [491, 2, 1, "", "set_output"], [491, 2, 1, "", "set_params"], [491, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[492, 2, 1, "", "fit"], [492, 2, 1, "", "fit_transform"], [492, 2, 1, "", "get_feature_names_out"], [492, 2, 1, "", "get_params"], [492, 3, 1, "", "n_components_"], [492, 3, 1, "", "n_features_in_"], [492, 2, 1, "", "set_output"], [492, 2, 1, "", "set_params"], [492, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[493, 2, 1, "", "fit"], [493, 2, 1, "", "fit_transform"], [493, 2, 1, "", "get_feature_names_out"], [493, 2, 1, "", "get_params"], [493, 2, 1, "", "inverse_transform"], [493, 2, 1, "", "set_output"], [493, 2, 1, "", "set_params"], [493, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[494, 2, 1, "", "fit"], [494, 2, 1, "", "fit_transform"], [494, 2, 1, "", "get_feature_names_out"], [494, 2, 1, "", "get_params"], [494, 2, 1, "", "inverse_transform"], [494, 2, 1, "", "set_output"], [494, 2, 1, "", "set_params"], [494, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[499, 1, 1, "", "LinearDiscriminantAnalysis"], [500, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[499, 2, 1, "", "decision_function"], [499, 2, 1, "", "fit"], [499, 2, 1, "", "fit_transform"], [499, 2, 1, "", "get_feature_names_out"], [499, 2, 1, "", "get_params"], [499, 2, 1, "", "predict"], [499, 2, 1, "", "predict_log_proba"], [499, 2, 1, "", "predict_proba"], [499, 2, 1, "", "score"], [499, 2, 1, "", "set_output"], [499, 2, 1, "", "set_params"], [499, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[500, 2, 1, "", "decision_function"], [500, 2, 1, "", "fit"], [500, 2, 1, "", "get_params"], [500, 2, 1, "", "predict"], [500, 2, 1, "", "predict_log_proba"], [500, 2, 1, "", "predict_proba"], [500, 2, 1, "", "score"], [500, 2, 1, "", "set_params"]], "sklearn.dummy": [[501, 1, 1, "", "DummyClassifier"], [502, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[501, 2, 1, "", "fit"], [501, 2, 1, "", "get_params"], [501, 2, 1, "", "predict"], [501, 2, 1, "", "predict_log_proba"], [501, 2, 1, "", "predict_proba"], [501, 2, 1, "", "score"], [501, 2, 1, "", "set_params"]], "sklearn.dummy.DummyRegressor": [[502, 2, 1, "", "fit"], [502, 2, 1, "", "get_params"], [502, 2, 1, "", "predict"], [502, 2, 1, "", "score"], [502, 2, 1, "", "set_params"]], "sklearn.ensemble": [[503, 1, 1, "", "AdaBoostClassifier"], [504, 1, 1, "", "AdaBoostRegressor"], [505, 1, 1, "", "BaggingClassifier"], [506, 1, 1, "", "BaggingRegressor"], [507, 1, 1, "", "ExtraTreesClassifier"], [508, 1, 1, "", "ExtraTreesRegressor"], [509, 1, 1, "", "GradientBoostingClassifier"], [510, 1, 1, "", "GradientBoostingRegressor"], [511, 1, 1, "", "HistGradientBoostingClassifier"], [512, 1, 1, "", "HistGradientBoostingRegressor"], [513, 1, 1, "", "IsolationForest"], [514, 1, 1, "", "RandomForestClassifier"], [515, 1, 1, "", "RandomForestRegressor"], [516, 1, 1, "", "RandomTreesEmbedding"], [517, 1, 1, "", "StackingClassifier"], [518, 1, 1, "", "StackingRegressor"], [519, 1, 1, "", "VotingClassifier"], [520, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[503, 3, 1, "", "base_estimator_"], [503, 2, 1, "", "decision_function"], [503, 3, 1, "", "feature_importances_"], [503, 2, 1, "", "fit"], [503, 2, 1, "", "get_params"], [503, 2, 1, "", "predict"], [503, 2, 1, "", "predict_log_proba"], [503, 2, 1, "", "predict_proba"], [503, 2, 1, "", "score"], [503, 2, 1, "", "set_params"], [503, 2, 1, "", "staged_decision_function"], [503, 2, 1, "", "staged_predict"], [503, 2, 1, "", "staged_predict_proba"], [503, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[504, 3, 1, "", "base_estimator_"], [504, 3, 1, "", "feature_importances_"], [504, 2, 1, "", "fit"], [504, 2, 1, "", "get_params"], [504, 2, 1, "", "predict"], [504, 2, 1, "", "score"], [504, 2, 1, "", "set_params"], [504, 2, 1, "", "staged_predict"], [504, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[505, 3, 1, "", "base_estimator_"], [505, 2, 1, "", "decision_function"], [505, 3, 1, "", "estimators_samples_"], [505, 2, 1, "", "fit"], [505, 2, 1, "", "get_params"], [505, 2, 1, "", "predict"], [505, 2, 1, "", "predict_log_proba"], [505, 2, 1, "", "predict_proba"], [505, 2, 1, "", "score"], [505, 2, 1, "", "set_params"]], "sklearn.ensemble.BaggingRegressor": [[506, 3, 1, "", "base_estimator_"], [506, 3, 1, "", "estimators_samples_"], [506, 2, 1, "", "fit"], [506, 2, 1, "", "get_params"], [506, 2, 1, "", "predict"], [506, 2, 1, "", "score"], [506, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesClassifier": [[507, 2, 1, "", "apply"], [507, 3, 1, "", "base_estimator_"], [507, 2, 1, "", "decision_path"], [507, 3, 1, "", "feature_importances_"], [507, 2, 1, "", "fit"], [507, 2, 1, "", "get_params"], [507, 2, 1, "", "predict"], [507, 2, 1, "", "predict_log_proba"], [507, 2, 1, "", "predict_proba"], [507, 2, 1, "", "score"], [507, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesRegressor": [[508, 2, 1, "", "apply"], [508, 3, 1, "", "base_estimator_"], [508, 2, 1, "", "decision_path"], [508, 3, 1, "", "feature_importances_"], [508, 2, 1, "", "fit"], [508, 2, 1, "", "get_params"], [508, 2, 1, "", "predict"], [508, 2, 1, "", "score"], [508, 2, 1, "", "set_params"]], "sklearn.ensemble.GradientBoostingClassifier": [[509, 2, 1, "", "apply"], [509, 3, 1, "", "base_estimator_"], [509, 2, 1, "", "decision_function"], [509, 3, 1, "", "feature_importances_"], [509, 2, 1, "", "fit"], [509, 2, 1, "", "get_params"], [509, 2, 1, "", "predict"], [509, 2, 1, "", "predict_log_proba"], [509, 2, 1, "", "predict_proba"], [509, 2, 1, "", "score"], [509, 2, 1, "", "set_params"], [509, 2, 1, "", "staged_decision_function"], [509, 2, 1, "", "staged_predict"], [509, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[510, 2, 1, "", "apply"], [510, 3, 1, "", "base_estimator_"], [510, 3, 1, "", "feature_importances_"], [510, 2, 1, "", "fit"], [510, 2, 1, "", "get_params"], [510, 2, 1, "", "predict"], [510, 2, 1, "", "score"], [510, 2, 1, "", "set_params"], [510, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[511, 2, 1, "", "decision_function"], [511, 2, 1, "", "fit"], [511, 2, 1, "", "get_params"], [511, 3, 1, "", "n_iter_"], [511, 2, 1, "", "predict"], [511, 2, 1, "", "predict_proba"], [511, 2, 1, "", "score"], [511, 2, 1, "", "set_params"], [511, 2, 1, "", "staged_decision_function"], [511, 2, 1, "", "staged_predict"], [511, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[512, 2, 1, "", "fit"], [512, 2, 1, "", "get_params"], [512, 3, 1, "", "n_iter_"], [512, 2, 1, "", "predict"], [512, 2, 1, "", "score"], [512, 2, 1, "", "set_params"], [512, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[513, 3, 1, "", "base_estimator_"], [513, 2, 1, "", "decision_function"], [513, 3, 1, "", "estimators_samples_"], [513, 2, 1, "", "fit"], [513, 2, 1, "", "fit_predict"], [513, 2, 1, "", "get_params"], [513, 2, 1, "", "predict"], [513, 2, 1, "", "score_samples"], [513, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[514, 2, 1, "", "apply"], [514, 3, 1, "", "base_estimator_"], [514, 2, 1, "", "decision_path"], [514, 3, 1, "", "feature_importances_"], [514, 2, 1, "", "fit"], [514, 2, 1, "", "get_params"], [514, 2, 1, "", "predict"], [514, 2, 1, "", "predict_log_proba"], [514, 2, 1, "", "predict_proba"], [514, 2, 1, "", "score"], [514, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestRegressor": [[515, 2, 1, "", "apply"], [515, 3, 1, "", "base_estimator_"], [515, 2, 1, "", "decision_path"], [515, 3, 1, "", "feature_importances_"], [515, 2, 1, "", "fit"], [515, 2, 1, "", "get_params"], [515, 2, 1, "", "predict"], [515, 2, 1, "", "score"], [515, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomTreesEmbedding": [[516, 2, 1, "", "apply"], [516, 3, 1, "", "base_estimator_"], [516, 2, 1, "", "decision_path"], [516, 3, 1, "", "feature_importances_"], [516, 2, 1, "", "fit"], [516, 2, 1, "", "fit_transform"], [516, 2, 1, "", "get_feature_names_out"], [516, 2, 1, "", "get_params"], [516, 2, 1, "", "set_output"], [516, 2, 1, "", "set_params"], [516, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[517, 2, 1, "", "decision_function"], [517, 2, 1, "", "fit"], [517, 2, 1, "", "fit_transform"], [517, 2, 1, "", "get_feature_names_out"], [517, 2, 1, "", "get_params"], [517, 3, 1, "", "n_features_in_"], [517, 3, 1, "", "named_estimators"], [517, 2, 1, "", "predict"], [517, 2, 1, "", "predict_proba"], [517, 2, 1, "", "score"], [517, 2, 1, "", "set_output"], [517, 2, 1, "", "set_params"], [517, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[518, 2, 1, "", "fit"], [518, 2, 1, "", "fit_transform"], [518, 2, 1, "", "get_feature_names_out"], [518, 2, 1, "", "get_params"], [518, 3, 1, "", "n_features_in_"], [518, 3, 1, "", "named_estimators"], [518, 2, 1, "", "predict"], [518, 2, 1, "", "score"], [518, 2, 1, "", "set_output"], [518, 2, 1, "", "set_params"], [518, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[519, 2, 1, "", "fit"], [519, 2, 1, "", "fit_transform"], [519, 2, 1, "", "get_feature_names_out"], [519, 2, 1, "", "get_params"], [519, 3, 1, "", "n_features_in_"], [519, 3, 1, "", "named_estimators"], [519, 2, 1, "", "predict"], [519, 2, 1, "", "predict_proba"], [519, 2, 1, "", "score"], [519, 2, 1, "", "set_output"], [519, 2, 1, "", "set_params"], [519, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[520, 2, 1, "", "fit"], [520, 2, 1, "", "fit_transform"], [520, 2, 1, "", "get_feature_names_out"], [520, 2, 1, "", "get_params"], [520, 3, 1, "", "n_features_in_"], [520, 3, 1, "", "named_estimators"], [520, 2, 1, "", "predict"], [520, 2, 1, "", "score"], [520, 2, 1, "", "set_output"], [520, 2, 1, "", "set_params"], [520, 2, 1, "", "transform"]], "sklearn.exceptions": [[521, 1, 1, "", "ConvergenceWarning"], [522, 1, 1, "", "DataConversionWarning"], [523, 1, 1, "", "DataDimensionalityWarning"], [524, 1, 1, "", "EfficiencyWarning"], [525, 1, 1, "", "FitFailedWarning"], [526, 1, 1, "", "InconsistentVersionWarning"], [527, 1, 1, "", "NotFittedError"], [528, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[521, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[522, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[523, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[524, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[525, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[526, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[527, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[528, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[529, 0, 0, "-", "enable_halving_search_cv"], [530, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[531, 1, 1, "", "DictVectorizer"], [532, 1, 1, "", "FeatureHasher"], [361, 0, 0, "-", "image"], [361, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[531, 2, 1, "", "fit"], [531, 2, 1, "", "fit_transform"], [531, 2, 1, "", "get_feature_names_out"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "inverse_transform"], [531, 2, 1, "", "restrict"], [531, 2, 1, "", "set_output"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[533, 1, 1, "", "PatchExtractor"], [534, 4, 1, "", "extract_patches_2d"], [535, 4, 1, "", "grid_to_graph"], [536, 4, 1, "", "img_to_graph"], [537, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[538, 1, 1, "", "CountVectorizer"], [539, 1, 1, "", "HashingVectorizer"], [540, 1, 1, "", "TfidfTransformer"], [541, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[538, 2, 1, "", "build_analyzer"], [538, 2, 1, "", "build_preprocessor"], [538, 2, 1, "", "build_tokenizer"], [538, 2, 1, "", "decode"], [538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "get_stop_words"], [538, 2, 1, "", "inverse_transform"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[539, 2, 1, "", "build_analyzer"], [539, 2, 1, "", "build_preprocessor"], [539, 2, 1, "", "build_tokenizer"], [539, 2, 1, "", "decode"], [539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "get_stop_words"], [539, 2, 1, "", "partial_fit"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_params"], [540, 3, 1, "", "idf_"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[541, 2, 1, "", "build_analyzer"], [541, 2, 1, "", "build_preprocessor"], [541, 2, 1, "", "build_tokenizer"], [541, 2, 1, "", "decode"], [541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "get_stop_words"], [541, 3, 1, "", "idf_"], [541, 2, 1, "", "inverse_transform"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.feature_selection": [[542, 1, 1, "", "GenericUnivariateSelect"], [543, 1, 1, "", "RFE"], [544, 1, 1, "", "RFECV"], [545, 1, 1, "", "SelectFdr"], [546, 1, 1, "", "SelectFpr"], [547, 1, 1, "", "SelectFromModel"], [548, 1, 1, "", "SelectFwe"], [549, 1, 1, "", "SelectKBest"], [550, 1, 1, "", "SelectPercentile"], [551, 1, 1, "", "SelectorMixin"], [552, 1, 1, "", "SequentialFeatureSelector"], [553, 1, 1, "", "VarianceThreshold"], [554, 4, 1, "", "chi2"], [555, 4, 1, "", "f_classif"], [556, 4, 1, "", "f_regression"], [557, 4, 1, "", "mutual_info_classif"], [558, 4, 1, "", "mutual_info_regression"], [559, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "get_support"], [542, 2, 1, "", "inverse_transform"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[543, 3, 1, "", "classes_"], [543, 2, 1, "", "decision_function"], [543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "get_support"], [543, 2, 1, "", "inverse_transform"], [543, 2, 1, "", "predict"], [543, 2, 1, "", "predict_log_proba"], [543, 2, 1, "", "predict_proba"], [543, 2, 1, "", "score"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[544, 3, 1, "", "classes_"], [544, 2, 1, "", "decision_function"], [544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "get_support"], [544, 2, 1, "", "inverse_transform"], [544, 2, 1, "", "predict"], [544, 2, 1, "", "predict_log_proba"], [544, 2, 1, "", "predict_proba"], [544, 2, 1, "", "score"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "get_support"], [545, 2, 1, "", "inverse_transform"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_feature_names_out"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "get_support"], [546, 2, 1, "", "inverse_transform"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "get_support"], [547, 2, 1, "", "inverse_transform"], [547, 3, 1, "", "n_features_in_"], [547, 2, 1, "", "partial_fit"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 3, 1, "", "threshold_"], [547, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[548, 2, 1, "", "fit"], [548, 2, 1, "", "fit_transform"], [548, 2, 1, "", "get_feature_names_out"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "get_support"], [548, 2, 1, "", "inverse_transform"], [548, 2, 1, "", "set_output"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[549, 2, 1, "", "fit"], [549, 2, 1, "", "fit_transform"], [549, 2, 1, "", "get_feature_names_out"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "get_support"], [549, 2, 1, "", "inverse_transform"], [549, 2, 1, "", "set_output"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[550, 2, 1, "", "fit"], [550, 2, 1, "", "fit_transform"], [550, 2, 1, "", "get_feature_names_out"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "get_support"], [550, 2, 1, "", "inverse_transform"], [550, 2, 1, "", "set_output"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[551, 2, 1, "", "fit_transform"], [551, 2, 1, "", "get_feature_names_out"], [551, 2, 1, "", "get_support"], [551, 2, 1, "", "inverse_transform"], [551, 2, 1, "", "set_output"], [551, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[552, 2, 1, "", "fit"], [552, 2, 1, "", "fit_transform"], [552, 2, 1, "", "get_feature_names_out"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "get_support"], [552, 2, 1, "", "inverse_transform"], [552, 2, 1, "", "set_output"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[553, 2, 1, "", "fit"], [553, 2, 1, "", "fit_transform"], [553, 2, 1, "", "get_feature_names_out"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "get_support"], [553, 2, 1, "", "inverse_transform"], [553, 2, 1, "", "set_output"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[560, 1, 1, "", "GaussianProcessClassifier"], [561, 1, 1, "", "GaussianProcessRegressor"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[560, 2, 1, "", "fit"], [560, 2, 1, "", "get_params"], [560, 3, 1, "", "kernel_"], [560, 2, 1, "", "log_marginal_likelihood"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "predict_proba"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_params"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[561, 2, 1, "", "fit"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "log_marginal_likelihood"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "sample_y"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_params"]], "sklearn.gaussian_process.kernels": [[562, 1, 1, "", "CompoundKernel"], [563, 1, 1, "", "ConstantKernel"], [564, 1, 1, "", "DotProduct"], [565, 1, 1, "", "ExpSineSquared"], [566, 1, 1, "", "Exponentiation"], [567, 1, 1, "", "Hyperparameter"], [568, 1, 1, "", "Kernel"], [569, 1, 1, "", "Matern"], [570, 1, 1, "", "PairwiseKernel"], [571, 1, 1, "", "Product"], [572, 1, 1, "", "RBF"], [573, 1, 1, "", "RationalQuadratic"], [574, 1, 1, "", "Sum"], [575, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[562, 2, 1, "", "__call__"], [562, 3, 1, "", "bounds"], [562, 2, 1, "", "clone_with_theta"], [562, 2, 1, "", "diag"], [562, 2, 1, "", "get_params"], [562, 3, 1, "", "hyperparameters"], [562, 2, 1, "", "is_stationary"], [562, 3, 1, "", "n_dims"], [562, 3, 1, "", "requires_vector_input"], [562, 2, 1, "", "set_params"], [562, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[563, 2, 1, "", "__call__"], [563, 3, 1, "", "bounds"], [563, 2, 1, "", "clone_with_theta"], [563, 2, 1, "", "diag"], [563, 2, 1, "", "get_params"], [563, 3, 1, "", "hyperparameters"], [563, 2, 1, "", "is_stationary"], [563, 3, 1, "", "n_dims"], [563, 3, 1, "", "requires_vector_input"], [563, 2, 1, "", "set_params"], [563, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[564, 2, 1, "", "__call__"], [564, 3, 1, "", "bounds"], [564, 2, 1, "", "clone_with_theta"], [564, 2, 1, "", "diag"], [564, 2, 1, "", "get_params"], [564, 3, 1, "", "hyperparameters"], [564, 2, 1, "", "is_stationary"], [564, 3, 1, "", "n_dims"], [564, 3, 1, "", "requires_vector_input"], [564, 2, 1, "", "set_params"], [564, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[565, 2, 1, "", "__call__"], [565, 3, 1, "", "bounds"], [565, 2, 1, "", "clone_with_theta"], [565, 2, 1, "", "diag"], [565, 2, 1, "", "get_params"], [565, 3, 1, "", "hyperparameter_length_scale"], [565, 3, 1, "", "hyperparameters"], [565, 2, 1, "", "is_stationary"], [565, 3, 1, "", "n_dims"], [565, 3, 1, "", "requires_vector_input"], [565, 2, 1, "", "set_params"], [565, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[566, 2, 1, "", "__call__"], [566, 3, 1, "", "bounds"], [566, 2, 1, "", "clone_with_theta"], [566, 2, 1, "", "diag"], [566, 2, 1, "", "get_params"], [566, 3, 1, "", "hyperparameters"], [566, 2, 1, "", "is_stationary"], [566, 3, 1, "", "n_dims"], [566, 3, 1, "", "requires_vector_input"], [566, 2, 1, "", "set_params"], [566, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[567, 2, 1, "", "__call__"], [567, 5, 1, "", "bounds"], [567, 2, 1, "", "count"], [567, 5, 1, "", "fixed"], [567, 2, 1, "", "index"], [567, 5, 1, "", "n_elements"], [567, 5, 1, "", "name"], [567, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[568, 2, 1, "", "__call__"], [568, 3, 1, "", "bounds"], [568, 2, 1, "", "clone_with_theta"], [568, 2, 1, "", "diag"], [568, 2, 1, "", "get_params"], [568, 3, 1, "", "hyperparameters"], [568, 2, 1, "", "is_stationary"], [568, 3, 1, "", "n_dims"], [568, 3, 1, "", "requires_vector_input"], [568, 2, 1, "", "set_params"], [568, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[569, 2, 1, "", "__call__"], [569, 3, 1, "", "bounds"], [569, 2, 1, "", "clone_with_theta"], [569, 2, 1, "", "diag"], [569, 2, 1, "", "get_params"], [569, 3, 1, "", "hyperparameters"], [569, 2, 1, "", "is_stationary"], [569, 3, 1, "", "n_dims"], [569, 3, 1, "", "requires_vector_input"], [569, 2, 1, "", "set_params"], [569, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[570, 2, 1, "", "__call__"], [570, 3, 1, "", "bounds"], [570, 2, 1, "", "clone_with_theta"], [570, 2, 1, "", "diag"], [570, 2, 1, "", "get_params"], [570, 3, 1, "", "hyperparameters"], [570, 2, 1, "", "is_stationary"], [570, 3, 1, "", "n_dims"], [570, 3, 1, "", "requires_vector_input"], [570, 2, 1, "", "set_params"], [570, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[571, 2, 1, "", "__call__"], [571, 3, 1, "", "bounds"], [571, 2, 1, "", "clone_with_theta"], [571, 2, 1, "", "diag"], [571, 2, 1, "", "get_params"], [571, 3, 1, "", "hyperparameters"], [571, 2, 1, "", "is_stationary"], [571, 3, 1, "", "n_dims"], [571, 3, 1, "", "requires_vector_input"], [571, 2, 1, "", "set_params"], [571, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[572, 2, 1, "", "__call__"], [572, 3, 1, "", "bounds"], [572, 2, 1, "", "clone_with_theta"], [572, 2, 1, "", "diag"], [572, 2, 1, "", "get_params"], [572, 3, 1, "", "hyperparameters"], [572, 2, 1, "", "is_stationary"], [572, 3, 1, "", "n_dims"], [572, 3, 1, "", "requires_vector_input"], [572, 2, 1, "", "set_params"], [572, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[573, 2, 1, "", "__call__"], [573, 3, 1, "", "bounds"], [573, 2, 1, "", "clone_with_theta"], [573, 2, 1, "", "diag"], [573, 2, 1, "", "get_params"], [573, 3, 1, "", "hyperparameters"], [573, 2, 1, "", "is_stationary"], [573, 3, 1, "", "n_dims"], [573, 3, 1, "", "requires_vector_input"], [573, 2, 1, "", "set_params"], [573, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[574, 2, 1, "", "__call__"], [574, 3, 1, "", "bounds"], [574, 2, 1, "", "clone_with_theta"], [574, 2, 1, "", "diag"], [574, 2, 1, "", "get_params"], [574, 3, 1, "", "hyperparameters"], [574, 2, 1, "", "is_stationary"], [574, 3, 1, "", "n_dims"], [574, 3, 1, "", "requires_vector_input"], [574, 2, 1, "", "set_params"], [574, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[575, 2, 1, "", "__call__"], [575, 3, 1, "", "bounds"], [575, 2, 1, "", "clone_with_theta"], [575, 2, 1, "", "diag"], [575, 2, 1, "", "get_params"], [575, 3, 1, "", "hyperparameters"], [575, 2, 1, "", "is_stationary"], [575, 3, 1, "", "n_dims"], [575, 3, 1, "", "requires_vector_input"], [575, 2, 1, "", "set_params"], [575, 3, 1, "", "theta"]], "sklearn.impute": [[577, 1, 1, "", "IterativeImputer"], [578, 1, 1, "", "KNNImputer"], [579, 1, 1, "", "MissingIndicator"], [580, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[577, 2, 1, "", "fit"], [577, 2, 1, "", "fit_transform"], [577, 2, 1, "", "get_feature_names_out"], [577, 2, 1, "", "get_params"], [577, 2, 1, "", "set_output"], [577, 2, 1, "", "set_params"], [577, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[578, 2, 1, "", "fit"], [578, 2, 1, "", "fit_transform"], [578, 2, 1, "", "get_feature_names_out"], [578, 2, 1, "", "get_params"], [578, 2, 1, "", "set_output"], [578, 2, 1, "", "set_params"], [578, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[579, 2, 1, "", "fit"], [579, 2, 1, "", "fit_transform"], [579, 2, 1, "", "get_feature_names_out"], [579, 2, 1, "", "get_params"], [579, 2, 1, "", "set_output"], [579, 2, 1, "", "set_params"], [579, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[580, 2, 1, "", "fit"], [580, 2, 1, "", "fit_transform"], [580, 2, 1, "", "get_feature_names_out"], [580, 2, 1, "", "get_params"], [580, 2, 1, "", "inverse_transform"], [580, 2, 1, "", "set_output"], [580, 2, 1, "", "set_params"], [580, 2, 1, "", "transform"]], "sklearn.inspection": [[581, 1, 1, "", "DecisionBoundaryDisplay"], [582, 1, 1, "", "PartialDependenceDisplay"], [583, 4, 1, "", "partial_dependence"], [584, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[581, 2, 1, "", "from_estimator"], [581, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[582, 2, 1, "", "from_estimator"], [582, 2, 1, "", "plot"]], "sklearn.isotonic": [[585, 1, 1, "", "IsotonicRegression"], [586, 4, 1, "", "check_increasing"], [587, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[585, 2, 1, "", "fit"], [585, 2, 1, "", "fit_transform"], [585, 2, 1, "", "get_feature_names_out"], [585, 2, 1, "", "get_params"], [585, 2, 1, "", "predict"], [585, 2, 1, "", "score"], [585, 2, 1, "", "set_output"], [585, 2, 1, "", "set_params"], [585, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[588, 1, 1, "", "AdditiveChi2Sampler"], [589, 1, 1, "", "Nystroem"], [590, 1, 1, "", "PolynomialCountSketch"], [591, 1, 1, "", "RBFSampler"], [592, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_feature_names_out"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "set_output"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_feature_names_out"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[593, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[593, 2, 1, "", "fit"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "predict"], [593, 2, 1, "", "score"], [593, 2, 1, "", "set_params"]], "sklearn.linear_model": [[594, 1, 1, "", "ARDRegression"], [595, 1, 1, "", "BayesianRidge"], [596, 1, 1, "", "ElasticNet"], [597, 1, 1, "", "ElasticNetCV"], [598, 1, 1, "", "GammaRegressor"], [599, 1, 1, "", "HuberRegressor"], [600, 1, 1, "", "Lars"], [601, 1, 1, "", "LarsCV"], [602, 1, 1, "", "Lasso"], [603, 1, 1, "", "LassoCV"], [604, 1, 1, "", "LassoLars"], [605, 1, 1, "", "LassoLarsCV"], [606, 1, 1, "", "LassoLarsIC"], [607, 1, 1, "", "LinearRegression"], [608, 1, 1, "", "LogisticRegression"], [609, 1, 1, "", "LogisticRegressionCV"], [610, 1, 1, "", "MultiTaskElasticNet"], [611, 1, 1, "", "MultiTaskElasticNetCV"], [612, 1, 1, "", "MultiTaskLasso"], [613, 1, 1, "", "MultiTaskLassoCV"], [614, 1, 1, "", "OrthogonalMatchingPursuit"], [615, 1, 1, "", "OrthogonalMatchingPursuitCV"], [616, 1, 1, "", "PassiveAggressiveClassifier"], [617, 4, 1, "", "PassiveAggressiveRegressor"], [618, 1, 1, "", "Perceptron"], [619, 1, 1, "", "PoissonRegressor"], [620, 1, 1, "", "QuantileRegressor"], [621, 1, 1, "", "RANSACRegressor"], [622, 1, 1, "", "Ridge"], [623, 1, 1, "", "RidgeCV"], [624, 1, 1, "", "RidgeClassifier"], [625, 1, 1, "", "RidgeClassifierCV"], [626, 1, 1, "", "SGDClassifier"], [627, 1, 1, "", "SGDOneClassSVM"], [628, 1, 1, "", "SGDRegressor"], [629, 1, 1, "", "TheilSenRegressor"], [630, 1, 1, "", "TweedieRegressor"], [631, 4, 1, "", "enet_path"], [632, 4, 1, "", "lars_path"], [633, 4, 1, "", "lars_path_gram"], [634, 4, 1, "", "lasso_path"], [635, 4, 1, "", "orthogonal_mp"], [636, 4, 1, "", "orthogonal_mp_gram"], [637, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[594, 2, 1, "", "fit"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "predict"], [594, 2, 1, "", "score"], [594, 2, 1, "", "set_params"]], "sklearn.linear_model.BayesianRidge": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "predict"], [595, 2, 1, "", "score"], [595, 2, 1, "", "set_params"]], "sklearn.linear_model.ElasticNet": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "path"], [596, 2, 1, "", "predict"], [596, 2, 1, "", "score"], [596, 2, 1, "", "set_params"], [596, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "path"], [597, 2, 1, "", "predict"], [597, 2, 1, "", "score"], [597, 2, 1, "", "set_params"]], "sklearn.linear_model.GammaRegressor": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "predict"], [598, 2, 1, "", "score"], [598, 2, 1, "", "set_params"]], "sklearn.linear_model.HuberRegressor": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "predict"], [599, 2, 1, "", "score"], [599, 2, 1, "", "set_params"]], "sklearn.linear_model.Lars": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "predict"], [600, 2, 1, "", "score"], [600, 2, 1, "", "set_params"]], "sklearn.linear_model.LarsCV": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "predict"], [601, 2, 1, "", "score"], [601, 2, 1, "", "set_params"]], "sklearn.linear_model.Lasso": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "path"], [602, 2, 1, "", "predict"], [602, 2, 1, "", "score"], [602, 2, 1, "", "set_params"], [602, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "path"], [603, 2, 1, "", "predict"], [603, 2, 1, "", "score"], [603, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLars": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "predict"], [604, 2, 1, "", "score"], [604, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsCV": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "predict"], [605, 2, 1, "", "score"], [605, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsIC": [[606, 2, 1, "", "fit"], [606, 2, 1, "", "get_params"], [606, 2, 1, "", "predict"], [606, 2, 1, "", "score"], [606, 2, 1, "", "set_params"]], "sklearn.linear_model.LinearRegression": [[607, 2, 1, "", "fit"], [607, 2, 1, "", "get_params"], [607, 2, 1, "", "predict"], [607, 2, 1, "", "score"], [607, 2, 1, "", "set_params"]], "sklearn.linear_model.LogisticRegression": [[608, 2, 1, "", "decision_function"], [608, 2, 1, "", "densify"], [608, 2, 1, "", "fit"], [608, 2, 1, "", "get_params"], [608, 2, 1, "", "predict"], [608, 2, 1, "", "predict_log_proba"], [608, 2, 1, "", "predict_proba"], [608, 2, 1, "", "score"], [608, 2, 1, "", "set_params"], [608, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[609, 2, 1, "", "decision_function"], [609, 2, 1, "", "densify"], [609, 2, 1, "", "fit"], [609, 2, 1, "", "get_params"], [609, 2, 1, "", "predict"], [609, 2, 1, "", "predict_log_proba"], [609, 2, 1, "", "predict_proba"], [609, 2, 1, "", "score"], [609, 2, 1, "", "set_params"], [609, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[610, 2, 1, "", "fit"], [610, 2, 1, "", "get_params"], [610, 2, 1, "", "path"], [610, 2, 1, "", "predict"], [610, 2, 1, "", "score"], [610, 2, 1, "", "set_params"], [610, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[611, 2, 1, "", "fit"], [611, 2, 1, "", "get_params"], [611, 2, 1, "", "path"], [611, 2, 1, "", "predict"], [611, 2, 1, "", "score"], [611, 2, 1, "", "set_params"]], "sklearn.linear_model.MultiTaskLasso": [[612, 2, 1, "", "fit"], [612, 2, 1, "", "get_params"], [612, 2, 1, "", "path"], [612, 2, 1, "", "predict"], [612, 2, 1, "", "score"], [612, 2, 1, "", "set_params"], [612, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[613, 2, 1, "", "fit"], [613, 2, 1, "", "get_params"], [613, 2, 1, "", "path"], [613, 2, 1, "", "predict"], [613, 2, 1, "", "score"], [613, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[614, 2, 1, "", "fit"], [614, 2, 1, "", "get_params"], [614, 2, 1, "", "predict"], [614, 2, 1, "", "score"], [614, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[615, 2, 1, "", "fit"], [615, 2, 1, "", "get_params"], [615, 2, 1, "", "predict"], [615, 2, 1, "", "score"], [615, 2, 1, "", "set_params"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[616, 2, 1, "", "decision_function"], [616, 2, 1, "", "densify"], [616, 2, 1, "", "fit"], [616, 2, 1, "", "get_params"], [616, 2, 1, "", "partial_fit"], [616, 2, 1, "", "predict"], [616, 2, 1, "", "score"], [616, 2, 1, "", "set_params"], [616, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[618, 2, 1, "", "decision_function"], [618, 2, 1, "", "densify"], [618, 2, 1, "", "fit"], [618, 2, 1, "", "get_params"], [618, 2, 1, "", "partial_fit"], [618, 2, 1, "", "predict"], [618, 2, 1, "", "score"], [618, 2, 1, "", "set_params"], [618, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[619, 2, 1, "", "fit"], [619, 2, 1, "", "get_params"], [619, 2, 1, "", "predict"], [619, 2, 1, "", "score"], [619, 2, 1, "", "set_params"]], "sklearn.linear_model.QuantileRegressor": [[620, 2, 1, "", "fit"], [620, 2, 1, "", "get_params"], [620, 2, 1, "", "predict"], [620, 2, 1, "", "score"], [620, 2, 1, "", "set_params"]], "sklearn.linear_model.RANSACRegressor": [[621, 2, 1, "", "fit"], [621, 2, 1, "", "get_params"], [621, 2, 1, "", "predict"], [621, 2, 1, "", "score"], [621, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[622, 2, 1, "", "fit"], [622, 2, 1, "", "get_params"], [622, 2, 1, "", "predict"], [622, 2, 1, "", "score"], [622, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeCV": [[623, 2, 1, "", "fit"], [623, 2, 1, "", "get_params"], [623, 2, 1, "", "predict"], [623, 2, 1, "", "score"], [623, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifier": [[624, 3, 1, "", "classes_"], [624, 2, 1, "", "decision_function"], [624, 2, 1, "", "fit"], [624, 2, 1, "", "get_params"], [624, 2, 1, "", "predict"], [624, 2, 1, "", "score"], [624, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifierCV": [[625, 3, 1, "", "classes_"], [625, 2, 1, "", "decision_function"], [625, 2, 1, "", "fit"], [625, 2, 1, "", "get_params"], [625, 2, 1, "", "predict"], [625, 2, 1, "", "score"], [625, 2, 1, "", "set_params"]], "sklearn.linear_model.SGDClassifier": [[626, 2, 1, "", "decision_function"], [626, 2, 1, "", "densify"], [626, 2, 1, "", "fit"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "partial_fit"], [626, 2, 1, "", "predict"], [626, 2, 1, "", "predict_log_proba"], [626, 2, 1, "", "predict_proba"], [626, 2, 1, "", "score"], [626, 2, 1, "", "set_params"], [626, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[627, 2, 1, "", "decision_function"], [627, 2, 1, "", "densify"], [627, 2, 1, "", "fit"], [627, 2, 1, "", "fit_predict"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "partial_fit"], [627, 2, 1, "", "predict"], [627, 2, 1, "", "score_samples"], [627, 2, 1, "", "set_params"], [627, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[628, 2, 1, "", "densify"], [628, 2, 1, "", "fit"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "partial_fit"], [628, 2, 1, "", "predict"], [628, 2, 1, "", "score"], [628, 2, 1, "", "set_params"], [628, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "predict"], [629, 2, 1, "", "score"], [629, 2, 1, "", "set_params"]], "sklearn.linear_model.TweedieRegressor": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "predict"], [630, 2, 1, "", "score"], [630, 2, 1, "", "set_params"]], "sklearn.manifold": [[638, 1, 1, "", "Isomap"], [639, 1, 1, "", "LocallyLinearEmbedding"], [640, 1, 1, "", "MDS"], [641, 1, 1, "", "SpectralEmbedding"], [642, 1, 1, "", "TSNE"], [643, 4, 1, "", "locally_linear_embedding"], [644, 4, 1, "", "smacof"], [645, 4, 1, "", "spectral_embedding"], [646, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "fit_transform"], [638, 2, 1, "", "get_feature_names_out"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "reconstruction_error"], [638, 2, 1, "", "set_output"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "fit_transform"], [639, 2, 1, "", "get_feature_names_out"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "set_output"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "fit_transform"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "fit_transform"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "fit_transform"], [642, 2, 1, "", "get_feature_names_out"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "set_output"], [642, 2, 1, "", "set_params"]], "sklearn.metrics": [[647, 1, 1, "", "ConfusionMatrixDisplay"], [648, 1, 1, "", "DetCurveDisplay"], [649, 1, 1, "", "DistanceMetric"], [650, 1, 1, "", "PrecisionRecallDisplay"], [651, 1, 1, "", "PredictionErrorDisplay"], [652, 1, 1, "", "RocCurveDisplay"], [653, 4, 1, "", "accuracy_score"], [654, 4, 1, "", "adjusted_mutual_info_score"], [655, 4, 1, "", "adjusted_rand_score"], [656, 4, 1, "", "auc"], [657, 4, 1, "", "average_precision_score"], [658, 4, 1, "", "balanced_accuracy_score"], [659, 4, 1, "", "brier_score_loss"], [660, 4, 1, "", "calinski_harabasz_score"], [661, 4, 1, "", "check_scoring"], [662, 4, 1, "", "class_likelihood_ratios"], [663, 4, 1, "", "classification_report"], [361, 0, 0, "-", "cluster"], [666, 4, 1, "", "cohen_kappa_score"], [667, 4, 1, "", "completeness_score"], [668, 4, 1, "", "confusion_matrix"], [669, 4, 1, "", "consensus_score"], [670, 4, 1, "", "coverage_error"], [671, 4, 1, "", "d2_absolute_error_score"], [672, 4, 1, "", "d2_pinball_score"], [673, 4, 1, "", "d2_tweedie_score"], [674, 4, 1, "", "davies_bouldin_score"], [675, 4, 1, "", "dcg_score"], [676, 4, 1, "", "det_curve"], [677, 4, 1, "", "explained_variance_score"], [678, 4, 1, "", "f1_score"], [679, 4, 1, "", "fbeta_score"], [680, 4, 1, "", "fowlkes_mallows_score"], [681, 4, 1, "", "get_scorer"], [682, 4, 1, "", "get_scorer_names"], [683, 4, 1, "", "hamming_loss"], [684, 4, 1, "", "hinge_loss"], [685, 4, 1, "", "homogeneity_completeness_v_measure"], [686, 4, 1, "", "homogeneity_score"], [687, 4, 1, "", "jaccard_score"], [688, 4, 1, "", "label_ranking_average_precision_score"], [689, 4, 1, "", "label_ranking_loss"], [690, 4, 1, "", "log_loss"], [691, 4, 1, "", "make_scorer"], [692, 4, 1, "", "matthews_corrcoef"], [693, 4, 1, "", "max_error"], [694, 4, 1, "", "mean_absolute_error"], [695, 4, 1, "", "mean_absolute_percentage_error"], [696, 4, 1, "", "mean_gamma_deviance"], [697, 4, 1, "", "mean_pinball_loss"], [698, 4, 1, "", "mean_poisson_deviance"], [699, 4, 1, "", "mean_squared_error"], [700, 4, 1, "", "mean_squared_log_error"], [701, 4, 1, "", "mean_tweedie_deviance"], [702, 4, 1, "", "median_absolute_error"], [703, 4, 1, "", "multilabel_confusion_matrix"], [704, 4, 1, "", "mutual_info_score"], [705, 4, 1, "", "ndcg_score"], [706, 4, 1, "", "normalized_mutual_info_score"], [361, 0, 0, "-", "pairwise"], [727, 4, 1, "", "pairwise_distances"], [728, 4, 1, "", "pairwise_distances_argmin"], [729, 4, 1, "", "pairwise_distances_argmin_min"], [730, 4, 1, "", "pairwise_distances_chunked"], [731, 4, 1, "", "precision_recall_curve"], [732, 4, 1, "", "precision_recall_fscore_support"], [733, 4, 1, "", "precision_score"], [734, 4, 1, "", "r2_score"], [735, 4, 1, "", "rand_score"], [736, 4, 1, "", "recall_score"], [737, 4, 1, "", "roc_auc_score"], [738, 4, 1, "", "roc_curve"], [739, 4, 1, "", "silhouette_samples"], [740, 4, 1, "", "silhouette_score"], [741, 4, 1, "", "top_k_accuracy_score"], [742, 4, 1, "", "v_measure_score"], [743, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[647, 2, 1, "", "from_estimator"], [647, 2, 1, "", "from_predictions"], [647, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[648, 2, 1, "", "from_estimator"], [648, 2, 1, "", "from_predictions"], [648, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[649, 2, 1, "", "dist_to_rdist"], [649, 2, 1, "", "get_metric"], [649, 2, 1, "", "pairwise"], [649, 2, 1, "", "rdist_to_dist"]], "sklearn.metrics.PrecisionRecallDisplay": [[650, 2, 1, "", "from_estimator"], [650, 2, 1, "", "from_predictions"], [650, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[651, 2, 1, "", "from_estimator"], [651, 2, 1, "", "from_predictions"], [651, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[652, 2, 1, "", "from_estimator"], [652, 2, 1, "", "from_predictions"], [652, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[664, 4, 1, "", "contingency_matrix"], [665, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[707, 4, 1, "", "additive_chi2_kernel"], [708, 4, 1, "", "chi2_kernel"], [709, 4, 1, "", "cosine_distances"], [710, 4, 1, "", "cosine_similarity"], [711, 4, 1, "", "distance_metrics"], [712, 4, 1, "", "euclidean_distances"], [713, 4, 1, "", "haversine_distances"], [714, 4, 1, "", "kernel_metrics"], [715, 4, 1, "", "laplacian_kernel"], [716, 4, 1, "", "linear_kernel"], [717, 4, 1, "", "manhattan_distances"], [718, 4, 1, "", "nan_euclidean_distances"], [719, 4, 1, "", "paired_cosine_distances"], [720, 4, 1, "", "paired_distances"], [721, 4, 1, "", "paired_euclidean_distances"], [722, 4, 1, "", "paired_manhattan_distances"], [723, 4, 1, "", "pairwise_kernels"], [724, 4, 1, "", "polynomial_kernel"], [725, 4, 1, "", "rbf_kernel"], [726, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[744, 1, 1, "", "BayesianGaussianMixture"], [745, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[744, 2, 1, "", "fit"], [744, 2, 1, "", "fit_predict"], [744, 2, 1, "", "get_params"], [744, 2, 1, "", "predict"], [744, 2, 1, "", "predict_proba"], [744, 2, 1, "", "sample"], [744, 2, 1, "", "score"], [744, 2, 1, "", "score_samples"], [744, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[745, 2, 1, "", "aic"], [745, 2, 1, "", "bic"], [745, 2, 1, "", "fit"], [745, 2, 1, "", "fit_predict"], [745, 2, 1, "", "get_params"], [745, 2, 1, "", "predict"], [745, 2, 1, "", "predict_proba"], [745, 2, 1, "", "sample"], [745, 2, 1, "", "score"], [745, 2, 1, "", "score_samples"], [745, 2, 1, "", "set_params"]], "sklearn.model_selection": [[746, 1, 1, "", "GridSearchCV"], [747, 1, 1, "", "GroupKFold"], [748, 1, 1, "", "GroupShuffleSplit"], [749, 1, 1, "", "HalvingGridSearchCV"], [750, 1, 1, "", "HalvingRandomSearchCV"], [751, 1, 1, "", "KFold"], [752, 1, 1, "", "LearningCurveDisplay"], [753, 1, 1, "", "LeaveOneGroupOut"], [754, 1, 1, "", "LeaveOneOut"], [755, 1, 1, "", "LeavePGroupsOut"], [756, 1, 1, "", "LeavePOut"], [757, 1, 1, "", "ParameterGrid"], [758, 1, 1, "", "ParameterSampler"], [759, 1, 1, "", "PredefinedSplit"], [760, 1, 1, "", "RandomizedSearchCV"], [761, 1, 1, "", "RepeatedKFold"], [762, 1, 1, "", "RepeatedStratifiedKFold"], [763, 1, 1, "", "ShuffleSplit"], [764, 1, 1, "", "StratifiedGroupKFold"], [765, 1, 1, "", "StratifiedKFold"], [766, 1, 1, "", "StratifiedShuffleSplit"], [767, 1, 1, "", "TimeSeriesSplit"], [768, 4, 1, "", "check_cv"], [769, 4, 1, "", "cross_val_predict"], [770, 4, 1, "", "cross_val_score"], [771, 4, 1, "", "cross_validate"], [772, 4, 1, "", "learning_curve"], [773, 4, 1, "", "permutation_test_score"], [774, 4, 1, "", "train_test_split"], [775, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[746, 3, 1, "", "classes_"], [746, 2, 1, "", "decision_function"], [746, 2, 1, "", "fit"], [746, 2, 1, "", "get_params"], [746, 2, 1, "", "inverse_transform"], [746, 3, 1, "", "n_features_in_"], [746, 2, 1, "", "predict"], [746, 2, 1, "", "predict_log_proba"], [746, 2, 1, "", "predict_proba"], [746, 2, 1, "", "score"], [746, 2, 1, "", "score_samples"], [746, 2, 1, "", "set_params"], [746, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[747, 2, 1, "", "get_n_splits"], [747, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[748, 2, 1, "", "get_n_splits"], [748, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[749, 3, 1, "", "classes_"], [749, 2, 1, "", "decision_function"], [749, 2, 1, "", "fit"], [749, 2, 1, "", "get_params"], [749, 2, 1, "", "inverse_transform"], [749, 3, 1, "", "n_features_in_"], [749, 2, 1, "", "predict"], [749, 2, 1, "", "predict_log_proba"], [749, 2, 1, "", "predict_proba"], [749, 2, 1, "", "score"], [749, 2, 1, "", "score_samples"], [749, 2, 1, "", "set_params"], [749, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[750, 3, 1, "", "classes_"], [750, 2, 1, "", "decision_function"], [750, 2, 1, "", "fit"], [750, 2, 1, "", "get_params"], [750, 2, 1, "", "inverse_transform"], [750, 3, 1, "", "n_features_in_"], [750, 2, 1, "", "predict"], [750, 2, 1, "", "predict_log_proba"], [750, 2, 1, "", "predict_proba"], [750, 2, 1, "", "score"], [750, 2, 1, "", "score_samples"], [750, 2, 1, "", "set_params"], [750, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[751, 2, 1, "", "get_n_splits"], [751, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[752, 2, 1, "", "from_estimator"], [752, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[753, 2, 1, "", "get_n_splits"], [753, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[754, 2, 1, "", "get_n_splits"], [754, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[755, 2, 1, "", "get_n_splits"], [755, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[756, 2, 1, "", "get_n_splits"], [756, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[759, 2, 1, "", "get_n_splits"], [759, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[760, 3, 1, "", "classes_"], [760, 2, 1, "", "decision_function"], [760, 2, 1, "", "fit"], [760, 2, 1, "", "get_params"], [760, 2, 1, "", "inverse_transform"], [760, 3, 1, "", "n_features_in_"], [760, 2, 1, "", "predict"], [760, 2, 1, "", "predict_log_proba"], [760, 2, 1, "", "predict_proba"], [760, 2, 1, "", "score"], [760, 2, 1, "", "score_samples"], [760, 2, 1, "", "set_params"], [760, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[761, 2, 1, "", "get_n_splits"], [761, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[762, 2, 1, "", "get_n_splits"], [762, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[763, 2, 1, "", "get_n_splits"], [763, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[764, 2, 1, "", "get_n_splits"], [764, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[765, 2, 1, "", "get_n_splits"], [765, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[766, 2, 1, "", "get_n_splits"], [766, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[767, 2, 1, "", "get_n_splits"], [767, 2, 1, "", "split"]], "sklearn.multiclass": [[776, 1, 1, "", "OneVsOneClassifier"], [777, 1, 1, "", "OneVsRestClassifier"], [778, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[776, 2, 1, "", "decision_function"], [776, 2, 1, "", "fit"], [776, 2, 1, "", "get_params"], [776, 3, 1, "", "n_classes_"], [776, 2, 1, "", "partial_fit"], [776, 2, 1, "", "predict"], [776, 2, 1, "", "score"], [776, 2, 1, "", "set_params"]], "sklearn.multiclass.OneVsRestClassifier": [[777, 2, 1, "", "decision_function"], [777, 2, 1, "", "fit"], [777, 2, 1, "", "get_params"], [777, 3, 1, "", "multilabel_"], [777, 3, 1, "", "n_classes_"], [777, 2, 1, "", "partial_fit"], [777, 2, 1, "", "predict"], [777, 2, 1, "", "predict_proba"], [777, 2, 1, "", "score"], [777, 2, 1, "", "set_params"]], "sklearn.multiclass.OutputCodeClassifier": [[778, 2, 1, "", "fit"], [778, 2, 1, "", "get_params"], [778, 2, 1, "", "predict"], [778, 2, 1, "", "score"], [778, 2, 1, "", "set_params"]], "sklearn.multioutput": [[779, 1, 1, "", "ClassifierChain"], [780, 1, 1, "", "MultiOutputClassifier"], [781, 1, 1, "", "MultiOutputRegressor"], [782, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[779, 2, 1, "", "decision_function"], [779, 2, 1, "", "fit"], [779, 2, 1, "", "get_params"], [779, 2, 1, "", "predict"], [779, 2, 1, "", "predict_proba"], [779, 2, 1, "", "score"], [779, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputClassifier": [[780, 2, 1, "", "fit"], [780, 2, 1, "", "get_params"], [780, 2, 1, "", "partial_fit"], [780, 2, 1, "", "predict"], [780, 2, 1, "", "predict_proba"], [780, 2, 1, "", "score"], [780, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputRegressor": [[781, 2, 1, "", "fit"], [781, 2, 1, "", "get_params"], [781, 2, 1, "", "partial_fit"], [781, 2, 1, "", "predict"], [781, 2, 1, "", "score"], [781, 2, 1, "", "set_params"]], "sklearn.multioutput.RegressorChain": [[782, 2, 1, "", "fit"], [782, 2, 1, "", "get_params"], [782, 2, 1, "", "predict"], [782, 2, 1, "", "score"], [782, 2, 1, "", "set_params"]], "sklearn.naive_bayes": [[783, 1, 1, "", "BernoulliNB"], [784, 1, 1, "", "CategoricalNB"], [785, 1, 1, "", "ComplementNB"], [786, 1, 1, "", "GaussianNB"], [787, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[783, 2, 1, "", "fit"], [783, 2, 1, "", "get_params"], [783, 2, 1, "", "partial_fit"], [783, 2, 1, "", "predict"], [783, 2, 1, "", "predict_joint_log_proba"], [783, 2, 1, "", "predict_log_proba"], [783, 2, 1, "", "predict_proba"], [783, 2, 1, "", "score"], [783, 2, 1, "", "set_params"]], "sklearn.naive_bayes.CategoricalNB": [[784, 2, 1, "", "fit"], [784, 2, 1, "", "get_params"], [784, 2, 1, "", "partial_fit"], [784, 2, 1, "", "predict"], [784, 2, 1, "", "predict_joint_log_proba"], [784, 2, 1, "", "predict_log_proba"], [784, 2, 1, "", "predict_proba"], [784, 2, 1, "", "score"], [784, 2, 1, "", "set_params"]], "sklearn.naive_bayes.ComplementNB": [[785, 2, 1, "", "fit"], [785, 2, 1, "", "get_params"], [785, 2, 1, "", "partial_fit"], [785, 2, 1, "", "predict"], [785, 2, 1, "", "predict_joint_log_proba"], [785, 2, 1, "", "predict_log_proba"], [785, 2, 1, "", "predict_proba"], [785, 2, 1, "", "score"], [785, 2, 1, "", "set_params"]], "sklearn.naive_bayes.GaussianNB": [[786, 2, 1, "", "fit"], [786, 2, 1, "", "get_params"], [786, 2, 1, "", "partial_fit"], [786, 2, 1, "", "predict"], [786, 2, 1, "", "predict_joint_log_proba"], [786, 2, 1, "", "predict_log_proba"], [786, 2, 1, "", "predict_proba"], [786, 2, 1, "", "score"], [786, 2, 1, "", "set_params"]], "sklearn.naive_bayes.MultinomialNB": [[787, 2, 1, "", "fit"], [787, 2, 1, "", "get_params"], [787, 2, 1, "", "partial_fit"], [787, 2, 1, "", "predict"], [787, 2, 1, "", "predict_joint_log_proba"], [787, 2, 1, "", "predict_log_proba"], [787, 2, 1, "", "predict_proba"], [787, 2, 1, "", "score"], [787, 2, 1, "", "set_params"]], "sklearn.neighbors": [[788, 1, 1, "", "BallTree"], [789, 1, 1, "", "KDTree"], [790, 1, 1, "", "KNeighborsClassifier"], [791, 1, 1, "", "KNeighborsRegressor"], [792, 1, 1, "", "KNeighborsTransformer"], [793, 1, 1, "", "KernelDensity"], [794, 1, 1, "", "LocalOutlierFactor"], [795, 1, 1, "", "NearestCentroid"], [796, 1, 1, "", "NearestNeighbors"], [797, 1, 1, "", "NeighborhoodComponentsAnalysis"], [798, 1, 1, "", "RadiusNeighborsClassifier"], [799, 1, 1, "", "RadiusNeighborsRegressor"], [800, 1, 1, "", "RadiusNeighborsTransformer"], [801, 4, 1, "", "kneighbors_graph"], [802, 4, 1, "", "radius_neighbors_graph"], [803, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[788, 2, 1, "", "get_arrays"], [788, 2, 1, "", "get_n_calls"], [788, 2, 1, "", "get_tree_stats"], [788, 2, 1, "", "kernel_density"], [788, 2, 1, "", "query"], [788, 2, 1, "", "query_radius"], [788, 2, 1, "", "reset_n_calls"], [788, 2, 1, "", "two_point_correlation"], [788, 2, 1, "", "valid_metrics"]], "sklearn.neighbors.KDTree": [[789, 2, 1, "", "get_arrays"], [789, 2, 1, "", "get_n_calls"], [789, 2, 1, "", "get_tree_stats"], [789, 2, 1, "", "kernel_density"], [789, 2, 1, "", "query"], [789, 2, 1, "", "query_radius"], [789, 2, 1, "", "reset_n_calls"], [789, 2, 1, "", "two_point_correlation"], [789, 2, 1, "", "valid_metrics"]], "sklearn.neighbors.KNeighborsClassifier": [[790, 2, 1, "", "fit"], [790, 2, 1, "", "get_params"], [790, 2, 1, "", "kneighbors"], [790, 2, 1, "", "kneighbors_graph"], [790, 2, 1, "", "predict"], [790, 2, 1, "", "predict_proba"], [790, 2, 1, "", "score"], [790, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsRegressor": [[791, 2, 1, "", "fit"], [791, 2, 1, "", "get_params"], [791, 2, 1, "", "kneighbors"], [791, 2, 1, "", "kneighbors_graph"], [791, 2, 1, "", "predict"], [791, 2, 1, "", "score"], [791, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsTransformer": [[792, 2, 1, "", "fit"], [792, 2, 1, "", "fit_transform"], [792, 2, 1, "", "get_feature_names_out"], [792, 2, 1, "", "get_params"], [792, 2, 1, "", "kneighbors"], [792, 2, 1, "", "kneighbors_graph"], [792, 2, 1, "", "set_output"], [792, 2, 1, "", "set_params"], [792, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[793, 2, 1, "", "fit"], [793, 2, 1, "", "get_params"], [793, 2, 1, "", "sample"], [793, 2, 1, "", "score"], [793, 2, 1, "", "score_samples"], [793, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[794, 2, 1, "", "decision_function"], [794, 2, 1, "", "fit"], [794, 2, 1, "", "fit_predict"], [794, 2, 1, "", "get_params"], [794, 2, 1, "", "kneighbors"], [794, 2, 1, "", "kneighbors_graph"], [794, 2, 1, "", "predict"], [794, 2, 1, "", "score_samples"], [794, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[795, 2, 1, "", "fit"], [795, 2, 1, "", "get_params"], [795, 2, 1, "", "predict"], [795, 2, 1, "", "score"], [795, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestNeighbors": [[796, 2, 1, "", "fit"], [796, 2, 1, "", "get_params"], [796, 2, 1, "", "kneighbors"], [796, 2, 1, "", "kneighbors_graph"], [796, 2, 1, "", "radius_neighbors"], [796, 2, 1, "", "radius_neighbors_graph"], [796, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[797, 2, 1, "", "fit"], [797, 2, 1, "", "fit_transform"], [797, 2, 1, "", "get_feature_names_out"], [797, 2, 1, "", "get_params"], [797, 2, 1, "", "set_output"], [797, 2, 1, "", "set_params"], [797, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[798, 2, 1, "", "fit"], [798, 2, 1, "", "get_params"], [798, 2, 1, "", "predict"], [798, 2, 1, "", "predict_proba"], [798, 2, 1, "", "radius_neighbors"], [798, 2, 1, "", "radius_neighbors_graph"], [798, 2, 1, "", "score"], [798, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[799, 2, 1, "", "fit"], [799, 2, 1, "", "get_params"], [799, 2, 1, "", "predict"], [799, 2, 1, "", "radius_neighbors"], [799, 2, 1, "", "radius_neighbors_graph"], [799, 2, 1, "", "score"], [799, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[800, 2, 1, "", "fit"], [800, 2, 1, "", "fit_transform"], [800, 2, 1, "", "get_feature_names_out"], [800, 2, 1, "", "get_params"], [800, 2, 1, "", "radius_neighbors"], [800, 2, 1, "", "radius_neighbors_graph"], [800, 2, 1, "", "set_output"], [800, 2, 1, "", "set_params"], [800, 2, 1, "", "transform"]], "sklearn.neural_network": [[804, 1, 1, "", "BernoulliRBM"], [805, 1, 1, "", "MLPClassifier"], [806, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[804, 2, 1, "", "fit"], [804, 2, 1, "", "fit_transform"], [804, 2, 1, "", "get_feature_names_out"], [804, 2, 1, "", "get_params"], [804, 2, 1, "", "gibbs"], [804, 2, 1, "", "partial_fit"], [804, 2, 1, "", "score_samples"], [804, 2, 1, "", "set_output"], [804, 2, 1, "", "set_params"], [804, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[805, 2, 1, "", "fit"], [805, 2, 1, "", "get_params"], [805, 2, 1, "", "partial_fit"], [805, 2, 1, "", "predict"], [805, 2, 1, "", "predict_log_proba"], [805, 2, 1, "", "predict_proba"], [805, 2, 1, "", "score"], [805, 2, 1, "", "set_params"]], "sklearn.neural_network.MLPRegressor": [[806, 2, 1, "", "fit"], [806, 2, 1, "", "get_params"], [806, 2, 1, "", "partial_fit"], [806, 2, 1, "", "predict"], [806, 2, 1, "", "score"], [806, 2, 1, "", "set_params"]], "sklearn.pipeline": [[807, 1, 1, "", "FeatureUnion"], [808, 1, 1, "", "Pipeline"], [809, 4, 1, "", "make_pipeline"], [810, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[807, 3, 1, "", "feature_names_in_"], [807, 2, 1, "", "fit"], [807, 2, 1, "", "fit_transform"], [807, 2, 1, "", "get_feature_names_out"], [807, 2, 1, "", "get_params"], [807, 3, 1, "", "n_features_in_"], [807, 2, 1, "", "set_output"], [807, 2, 1, "", "set_params"], [807, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[808, 3, 1, "", "classes_"], [808, 2, 1, "", "decision_function"], [808, 3, 1, "", "feature_names_in_"], [808, 2, 1, "", "fit"], [808, 2, 1, "", "fit_predict"], [808, 2, 1, "", "fit_transform"], [808, 2, 1, "", "get_feature_names_out"], [808, 2, 1, "", "get_params"], [808, 2, 1, "", "inverse_transform"], [808, 3, 1, "", "n_features_in_"], [808, 3, 1, "", "named_steps"], [808, 2, 1, "", "predict"], [808, 2, 1, "", "predict_log_proba"], [808, 2, 1, "", "predict_proba"], [808, 2, 1, "", "score"], [808, 2, 1, "", "score_samples"], [808, 2, 1, "", "set_output"], [808, 2, 1, "", "set_params"], [808, 2, 1, "", "transform"]], "sklearn.preprocessing": [[811, 1, 1, "", "Binarizer"], [812, 1, 1, "", "FunctionTransformer"], [813, 1, 1, "", "KBinsDiscretizer"], [814, 1, 1, "", "KernelCenterer"], [815, 1, 1, "", "LabelBinarizer"], [816, 1, 1, "", "LabelEncoder"], [817, 1, 1, "", "MaxAbsScaler"], [818, 1, 1, "", "MinMaxScaler"], [819, 1, 1, "", "MultiLabelBinarizer"], [820, 1, 1, "", "Normalizer"], [821, 1, 1, "", "OneHotEncoder"], [822, 1, 1, "", "OrdinalEncoder"], [823, 1, 1, "", "PolynomialFeatures"], [824, 1, 1, "", "PowerTransformer"], [825, 1, 1, "", "QuantileTransformer"], [826, 1, 1, "", "RobustScaler"], [827, 1, 1, "", "SplineTransformer"], [828, 1, 1, "", "StandardScaler"], [829, 4, 1, "", "add_dummy_feature"], [830, 4, 1, "", "binarize"], [831, 4, 1, "", "label_binarize"], [832, 4, 1, "", "maxabs_scale"], [833, 4, 1, "", "minmax_scale"], [834, 4, 1, "", "normalize"], [835, 4, 1, "", "power_transform"], [836, 4, 1, "", "quantile_transform"], [837, 4, 1, "", "robust_scale"], [838, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[811, 2, 1, "", "fit"], [811, 2, 1, "", "fit_transform"], [811, 2, 1, "", "get_feature_names_out"], [811, 2, 1, "", "get_params"], [811, 2, 1, "", "set_output"], [811, 2, 1, "", "set_params"], [811, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[812, 2, 1, "", "fit"], [812, 2, 1, "", "fit_transform"], [812, 2, 1, "", "get_feature_names_out"], [812, 2, 1, "", "get_params"], [812, 2, 1, "", "inverse_transform"], [812, 2, 1, "", "set_output"], [812, 2, 1, "", "set_params"], [812, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[813, 2, 1, "", "fit"], [813, 2, 1, "", "fit_transform"], [813, 2, 1, "", "get_feature_names_out"], [813, 2, 1, "", "get_params"], [813, 2, 1, "", "inverse_transform"], [813, 2, 1, "", "set_output"], [813, 2, 1, "", "set_params"], [813, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[814, 2, 1, "", "fit"], [814, 2, 1, "", "fit_transform"], [814, 2, 1, "", "get_feature_names_out"], [814, 2, 1, "", "get_params"], [814, 2, 1, "", "set_output"], [814, 2, 1, "", "set_params"], [814, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[815, 2, 1, "", "fit"], [815, 2, 1, "", "fit_transform"], [815, 2, 1, "", "get_params"], [815, 2, 1, "", "inverse_transform"], [815, 2, 1, "", "set_output"], [815, 2, 1, "", "set_params"], [815, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[816, 2, 1, "", "fit"], [816, 2, 1, "", "fit_transform"], [816, 2, 1, "", "get_params"], [816, 2, 1, "", "inverse_transform"], [816, 2, 1, "", "set_output"], [816, 2, 1, "", "set_params"], [816, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[817, 2, 1, "", "fit"], [817, 2, 1, "", "fit_transform"], [817, 2, 1, "", "get_feature_names_out"], [817, 2, 1, "", "get_params"], [817, 2, 1, "", "inverse_transform"], [817, 2, 1, "", "partial_fit"], [817, 2, 1, "", "set_output"], [817, 2, 1, "", "set_params"], [817, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[818, 2, 1, "", "fit"], [818, 2, 1, "", "fit_transform"], [818, 2, 1, "", "get_feature_names_out"], [818, 2, 1, "", "get_params"], [818, 2, 1, "", "inverse_transform"], [818, 2, 1, "", "partial_fit"], [818, 2, 1, "", "set_output"], [818, 2, 1, "", "set_params"], [818, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[819, 2, 1, "", "fit"], [819, 2, 1, "", "fit_transform"], [819, 2, 1, "", "get_params"], [819, 2, 1, "", "inverse_transform"], [819, 2, 1, "", "set_output"], [819, 2, 1, "", "set_params"], [819, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[820, 2, 1, "", "fit"], [820, 2, 1, "", "fit_transform"], [820, 2, 1, "", "get_feature_names_out"], [820, 2, 1, "", "get_params"], [820, 2, 1, "", "set_output"], [820, 2, 1, "", "set_params"], [820, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[821, 2, 1, "", "fit"], [821, 2, 1, "", "fit_transform"], [821, 2, 1, "", "get_feature_names_out"], [821, 2, 1, "", "get_params"], [821, 3, 1, "", "infrequent_categories_"], [821, 2, 1, "", "inverse_transform"], [821, 2, 1, "", "set_output"], [821, 2, 1, "", "set_params"], [821, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[822, 2, 1, "", "fit"], [822, 2, 1, "", "fit_transform"], [822, 2, 1, "", "get_feature_names_out"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "inverse_transform"], [822, 2, 1, "", "set_output"], [822, 2, 1, "", "set_params"], [822, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[823, 2, 1, "", "fit"], [823, 2, 1, "", "fit_transform"], [823, 2, 1, "", "get_feature_names_out"], [823, 2, 1, "", "get_params"], [823, 3, 1, "", "powers_"], [823, 2, 1, "", "set_output"], [823, 2, 1, "", "set_params"], [823, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[824, 2, 1, "", "fit"], [824, 2, 1, "", "fit_transform"], [824, 2, 1, "", "get_feature_names_out"], [824, 2, 1, "", "get_params"], [824, 2, 1, "", "inverse_transform"], [824, 2, 1, "", "set_output"], [824, 2, 1, "", "set_params"], [824, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[825, 2, 1, "", "fit"], [825, 2, 1, "", "fit_transform"], [825, 2, 1, "", "get_feature_names_out"], [825, 2, 1, "", "get_params"], [825, 2, 1, "", "inverse_transform"], [825, 2, 1, "", "set_output"], [825, 2, 1, "", "set_params"], [825, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[826, 2, 1, "", "fit"], [826, 2, 1, "", "fit_transform"], [826, 2, 1, "", "get_feature_names_out"], [826, 2, 1, "", "get_params"], [826, 2, 1, "", "inverse_transform"], [826, 2, 1, "", "set_output"], [826, 2, 1, "", "set_params"], [826, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[827, 2, 1, "", "fit"], [827, 2, 1, "", "fit_transform"], [827, 2, 1, "", "get_feature_names_out"], [827, 2, 1, "", "get_params"], [827, 2, 1, "", "set_output"], [827, 2, 1, "", "set_params"], [827, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[828, 2, 1, "", "fit"], [828, 2, 1, "", "fit_transform"], [828, 2, 1, "", "get_feature_names_out"], [828, 2, 1, "", "get_params"], [828, 2, 1, "", "inverse_transform"], [828, 2, 1, "", "partial_fit"], [828, 2, 1, "", "set_output"], [828, 2, 1, "", "set_params"], [828, 2, 1, "", "transform"]], "sklearn.random_projection": [[839, 1, 1, "", "GaussianRandomProjection"], [840, 1, 1, "", "SparseRandomProjection"], [841, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "fit_transform"], [839, 2, 1, "", "get_feature_names_out"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "inverse_transform"], [839, 2, 1, "", "set_output"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "fit_transform"], [840, 2, 1, "", "get_feature_names_out"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "inverse_transform"], [840, 2, 1, "", "set_output"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[842, 1, 1, "", "LabelPropagation"], [843, 1, 1, "", "LabelSpreading"], [844, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "predict_proba"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_params"]], "sklearn.semi_supervised.LabelSpreading": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "predict_proba"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_params"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[844, 2, 1, "", "decision_function"], [844, 2, 1, "", "fit"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "predict_log_proba"], [844, 2, 1, "", "predict_proba"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_params"]], "sklearn.svm": [[847, 1, 1, "", "LinearSVC"], [848, 1, 1, "", "LinearSVR"], [849, 1, 1, "", "NuSVC"], [850, 1, 1, "", "NuSVR"], [851, 1, 1, "", "OneClassSVM"], [852, 1, 1, "", "SVC"], [853, 1, 1, "", "SVR"], [854, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[847, 2, 1, "", "decision_function"], [847, 2, 1, "", "densify"], [847, 2, 1, "", "fit"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "score"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "predict"], [848, 2, 1, "", "score"], [848, 2, 1, "", "set_params"]], "sklearn.svm.NuSVC": [[849, 3, 1, "", "coef_"], [849, 2, 1, "", "decision_function"], [849, 2, 1, "", "fit"], [849, 2, 1, "", "get_params"], [849, 3, 1, "", "n_support_"], [849, 2, 1, "", "predict"], [849, 2, 1, "", "predict_log_proba"], [849, 2, 1, "", "predict_proba"], [849, 3, 1, "", "probA_"], [849, 3, 1, "", "probB_"], [849, 2, 1, "", "score"], [849, 2, 1, "", "set_params"]], "sklearn.svm.NuSVR": [[850, 3, 1, "", "coef_"], [850, 2, 1, "", "fit"], [850, 2, 1, "", "get_params"], [850, 3, 1, "", "n_support_"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "score"], [850, 2, 1, "", "set_params"]], "sklearn.svm.OneClassSVM": [[851, 3, 1, "", "coef_"], [851, 2, 1, "", "decision_function"], [851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_predict"], [851, 2, 1, "", "get_params"], [851, 3, 1, "", "n_support_"], [851, 2, 1, "", "predict"], [851, 2, 1, "", "score_samples"], [851, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[852, 3, 1, "", "coef_"], [852, 2, 1, "", "decision_function"], [852, 2, 1, "", "fit"], [852, 2, 1, "", "get_params"], [852, 3, 1, "", "n_support_"], [852, 2, 1, "", "predict"], [852, 2, 1, "", "predict_log_proba"], [852, 2, 1, "", "predict_proba"], [852, 3, 1, "", "probA_"], [852, 3, 1, "", "probB_"], [852, 2, 1, "", "score"], [852, 2, 1, "", "set_params"]], "sklearn.svm.SVR": [[853, 3, 1, "", "coef_"], [853, 2, 1, "", "fit"], [853, 2, 1, "", "get_params"], [853, 3, 1, "", "n_support_"], [853, 2, 1, "", "predict"], [853, 2, 1, "", "score"], [853, 2, 1, "", "set_params"]], "sklearn.tree": [[855, 1, 1, "", "DecisionTreeClassifier"], [856, 1, 1, "", "DecisionTreeRegressor"], [857, 1, 1, "", "ExtraTreeClassifier"], [858, 1, 1, "", "ExtraTreeRegressor"], [859, 4, 1, "", "export_graphviz"], [860, 4, 1, "", "export_text"], [861, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[855, 2, 1, "", "apply"], [855, 2, 1, "", "cost_complexity_pruning_path"], [855, 2, 1, "", "decision_path"], [855, 3, 1, "", "feature_importances_"], [855, 2, 1, "", "fit"], [855, 2, 1, "", "get_depth"], [855, 2, 1, "", "get_n_leaves"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "predict"], [855, 2, 1, "", "predict_log_proba"], [855, 2, 1, "", "predict_proba"], [855, 2, 1, "", "score"], [855, 2, 1, "", "set_params"]], "sklearn.tree.DecisionTreeRegressor": [[856, 2, 1, "", "apply"], [856, 2, 1, "", "cost_complexity_pruning_path"], [856, 2, 1, "", "decision_path"], [856, 3, 1, "", "feature_importances_"], [856, 2, 1, "", "fit"], [856, 2, 1, "", "get_depth"], [856, 2, 1, "", "get_n_leaves"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "predict"], [856, 2, 1, "", "score"], [856, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeClassifier": [[857, 2, 1, "", "apply"], [857, 2, 1, "", "cost_complexity_pruning_path"], [857, 2, 1, "", "decision_path"], [857, 3, 1, "", "feature_importances_"], [857, 2, 1, "", "fit"], [857, 2, 1, "", "get_depth"], [857, 2, 1, "", "get_n_leaves"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "predict"], [857, 2, 1, "", "predict_log_proba"], [857, 2, 1, "", "predict_proba"], [857, 2, 1, "", "score"], [857, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeRegressor": [[858, 2, 1, "", "apply"], [858, 2, 1, "", "cost_complexity_pruning_path"], [858, 2, 1, "", "decision_path"], [858, 3, 1, "", "feature_importances_"], [858, 2, 1, "", "fit"], [858, 2, 1, "", "get_depth"], [858, 2, 1, "", "get_n_leaves"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "predict"], [858, 2, 1, "", "score"], [858, 2, 1, "", "set_params"]], "sklearn.utils": [[862, 1, 1, "", "Bunch"], [863, 4, 1, "", "_safe_indexing"], [865, 4, 1, "", "as_float_array"], [866, 4, 1, "", "assert_all_finite"], [867, 4, 1, "", "check_X_y"], [868, 4, 1, "", "check_array"], [869, 4, 1, "", "check_consistent_length"], [870, 4, 1, "", "check_random_state"], [871, 4, 1, "", "check_scalar"], [874, 4, 1, "", "deprecated"], [880, 4, 1, "", "estimator_html_repr"], [887, 4, 1, "", "gen_batches"], [888, 4, 1, "", "gen_even_slices"], [890, 4, 1, "", "indexable"], [896, 4, 1, "", "murmurhash3_32"], [899, 4, 1, "", "parallel_backend"], [901, 4, 1, "", "register_parallel_backend"], [902, 4, 1, "", "resample"], [903, 4, 1, "", "safe_mask"], [904, 4, 1, "", "safe_sqr"], [905, 4, 1, "", "shuffle"]], "sklearn.utils.Bunch": [[862, 2, 1, "", "clear"], [862, 2, 1, "", "copy"], [862, 2, 1, "", "fromkeys"], [862, 2, 1, "", "get"], [862, 2, 1, "", "items"], [862, 2, 1, "", "keys"], [862, 2, 1, "", "pop"], [862, 2, 1, "", "popitem"], [862, 2, 1, "", "setdefault"], [862, 2, 1, "", "update"], [862, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[864, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[872, 4, 1, "", "compute_class_weight"], [873, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[875, 4, 1, "", "all_displays"], [876, 4, 1, "", "all_estimators"], [877, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[878, 4, 1, "", "check_estimator"], [879, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[881, 4, 1, "", "density"], [882, 4, 1, "", "fast_logdet"], [883, 4, 1, "", "randomized_range_finder"], [884, 4, 1, "", "randomized_svd"], [885, 4, 1, "", "safe_sparse_dot"], [886, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[889, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metaestimators": [[891, 4, 1, "", "available_if"], [892, 4, 1, "", "if_delegate_has_method"]], "sklearn.utils.multiclass": [[893, 4, 1, "", "is_multilabel"], [894, 4, 1, "", "type_of_target"], [895, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[897, 1, 1, "", "Parallel"], [898, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[897, 2, 1, "", "dispatch_next"], [897, 2, 1, "", "dispatch_one_batch"], [897, 2, 1, "", "format"], [897, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[900, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[906, 4, 1, "", "incr_mean_variance_axis"], [907, 4, 1, "", "inplace_column_scale"], [908, 4, 1, "", "inplace_csr_column_scale"], [909, 4, 1, "", "inplace_row_scale"], [910, 4, 1, "", "inplace_swap_column"], [911, 4, 1, "", "inplace_swap_row"], [912, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[913, 4, 1, "", "inplace_csr_row_normalize_l1"], [914, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[915, 4, 1, "", "check_is_fitted"], [916, 4, 1, "", "check_memory"], [917, 4, 1, "", "check_symmetric"], [918, 4, 1, "", "column_or_1d"], [919, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 348], "u": 0, "histori": [0, 970], "govern": [0, 351], "author": [0, 972], "contributor": [0, 336, 337, 351, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "experi": [0, 33, 336, 351], "team": [0, 336, 351], "commun": [0, 337, 351], "emeritu": 0, "core": [0, 8, 325, 336, 341, 343, 348, 351, 370, 933], "develop": [0, 335, 338, 339, 340, 341, 344, 345, 346, 351, 920], "cite": 0, "scikit": [0, 230, 280, 281, 282, 283, 284, 285, 322, 323, 335, 338, 339, 341, 342, 348, 351, 353, 949, 951, 952, 955, 957, 958, 963, 966], "learn": [0, 5, 12, 46, 85, 88, 134, 148, 150, 151, 152, 156, 198, 199, 200, 201, 212, 230, 237, 263, 269, 280, 281, 282, 283, 284, 285, 287, 288, 289, 322, 323, 325, 333, 335, 337, 338, 339, 341, 342, 348, 351, 353, 361, 367, 369, 926, 928, 936, 944, 949, 951, 952, 953, 955, 957, 958, 960, 963, 964, 965, 966, 967], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 78, 90, 94, 210, 337, 339, 348, 361, 943, 948, 951], "infrastructur": 0, "support": [0, 23, 108, 148, 173, 280, 281, 282, 283, 285, 293, 296, 305, 348, 353, 358, 360, 361, 369, 946, 954, 964, 978], "exampl": [3, 6, 9, 49, 54, 69, 79, 92, 114, 142, 148, 175, 176, 303, 307, 325, 331, 332, 342, 348, 352, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 384, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 410, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 437, 438, 439, 440, 441, 442, 444, 445, 446, 448, 449, 450, 451, 452, 454, 456, 460, 461, 462, 463, 464, 465, 469, 470, 472, 473, 474, 475, 476, 477, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 531, 532, 534, 537, 538, 539, 540, 541, 543, 544, 547, 549, 550, 552, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 567, 568, 569, 572, 573, 575, 577, 578, 580, 581, 582, 583, 584, 585, 589, 590, 591, 593, 594, 595, 596, 598, 599, 602, 603, 605, 606, 607, 608, 609, 612, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 638, 639, 640, 641, 642, 643, 647, 650, 651, 652, 653, 654, 655, 656, 657, 659, 662, 663, 667, 668, 669, 676, 678, 683, 686, 687, 690, 691, 694, 697, 698, 699, 701, 702, 704, 706, 727, 728, 731, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 777, 779, 781, 783, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 801, 804, 805, 806, 807, 808, 809, 812, 813, 815, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 833, 836, 840, 841, 843, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 856, 861, 862, 870, 879, 881, 888, 891, 905, 915, 920, 923, 925, 926, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 941, 943, 944, 945, 946, 947, 948, 957, 963, 964, 965, 969, 972], "base": [3, 4, 77, 105, 106, 133, 148, 212, 280, 281, 283, 285, 337, 361, 362, 366, 369, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 927, 939, 981, 982, 984, 985, 986, 987, 988], "real": [3, 9, 69, 98, 148, 332], "world": [3, 69, 148, 332], "dataset": [3, 4, 5, 8, 22, 23, 25, 29, 31, 40, 53, 57, 64, 77, 79, 80, 81, 82, 83, 85, 94, 107, 108, 118, 123, 124, 135, 137, 139, 140, 142, 144, 148, 150, 151, 152, 158, 161, 168, 179, 181, 188, 197, 199, 200, 206, 211, 216, 233, 241, 242, 291, 292, 295, 310, 315, 329, 330, 331, 332, 333, 334, 342, 348, 361, 372, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 957, 963, 964, 966, 980, 981, 982, 983, 984, 985, 986, 987, 988], "time": [4, 109, 173, 211, 212, 310, 366], "relat": [4, 8, 331, 337, 939, 951, 979], "featur": [4, 47, 50, 68, 90, 104, 105, 106, 108, 112, 115, 116, 127, 129, 131, 132, 133, 148, 153, 154, 156, 158, 173, 176, 197, 211, 216, 236, 271, 274, 275, 278, 280, 282, 283, 301, 310, 311, 323, 325, 337, 341, 361, 363, 369, 370, 371, 921, 939, 941, 948, 965, 966, 975, 976, 977, 978, 979], "engin": [4, 153, 951, 955], "data": [4, 7, 9, 12, 16, 22, 24, 34, 43, 45, 46, 52, 53, 58, 59, 61, 62, 64, 69, 71, 73, 75, 77, 78, 86, 87, 90, 91, 92, 93, 98, 100, 105, 106, 112, 114, 118, 129, 132, 133, 140, 141, 143, 147, 150, 153, 154, 156, 159, 163, 165, 172, 173, 207, 212, 215, 218, 226, 230, 232, 236, 241, 242, 244, 245, 248, 265, 271, 273, 277, 278, 287, 298, 301, 305, 311, 312, 319, 323, 325, 332, 342, 348, 350, 362, 363, 365, 366, 371, 372, 941, 945, 955, 957, 960, 963, 965, 966], "explor": 4, "bike": [4, 152], "share": [4, 152], "demand": 4, "cross": [4, 76, 77, 123, 124, 132, 148, 168, 230, 231, 233, 234, 238, 240, 245, 301, 319, 337, 361, 365, 366, 920, 927, 961], "valid": [4, 123, 124, 132, 168, 210, 230, 231, 233, 234, 238, 240, 245, 250, 301, 319, 323, 339, 346, 361, 366, 915, 916, 917, 918, 919, 920, 926, 927, 934, 961], "gradient": [4, 108, 109, 110, 111, 112, 113, 152, 179, 187, 193, 280, 281, 283, 285, 369, 927, 945], "boost": [4, 108, 109, 110, 111, 112, 113, 152, 179, 280, 281, 283, 285, 369], "naiv": [4, 22, 23, 361, 933], "linear": [4, 23, 30, 31, 111, 135, 148, 151, 157, 158, 175, 179, 182, 185, 199, 200, 211, 281, 297, 304, 305, 323, 346, 348, 361, 925, 927, 928, 929, 941, 964], "regress": [4, 67, 69, 77, 78, 100, 111, 112, 121, 135, 140, 141, 142, 143, 158, 159, 162, 168, 170, 171, 172, 175, 177, 179, 181, 194, 196, 197, 209, 212, 265, 305, 316, 317, 333, 361, 363, 369, 372, 922, 924, 927, 931, 932, 934, 935, 945, 946, 947, 964], "step": [4, 217, 349, 363], "categori": [4, 284, 941], "trigonometr": 4, "period": [4, 180], "spline": [4, 180, 283, 941], "qualit": 4, "analysi": [4, 30, 31, 55, 85, 91, 93, 96, 111, 221, 237, 238, 245, 261, 262, 263, 310, 361, 365, 367, 925, 934, 948, 965, 966], "impact": [4, 56, 987, 988], "model": [4, 7, 11, 52, 69, 77, 86, 93, 98, 105, 106, 108, 112, 114, 132, 133, 135, 140, 148, 151, 152, 153, 156, 157, 158, 167, 168, 173, 179, 182, 197, 207, 212, 216, 220, 222, 226, 227, 228, 234, 235, 237, 242, 265, 271, 278, 281, 283, 305, 310, 323, 339, 348, 349, 351, 356, 357, 361, 366, 920, 926, 927, 930, 931, 933, 935, 936, 957, 961, 964, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "predict": [4, 10, 22, 78, 100, 111, 121, 136, 150, 159, 179, 212, 215, 231, 242, 287, 323, 348, 349, 365, 366, 372, 931, 942, 957, 964], "pairwis": [4, 235, 361, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 929], "interact": [4, 152, 285, 369, 964], "polynomi": [4, 156, 158, 159, 180, 923, 927, 929, 941, 964], "non": [4, 14, 85, 111, 174, 179, 199, 240, 297, 304, 305, 367, 927, 941], "kernel": [4, 5, 90, 135, 140, 141, 143, 144, 148, 155, 156, 211, 212, 257, 258, 266, 282, 294, 297, 302, 305, 361, 367, 368, 372, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 923, 924, 929, 941, 946, 964], "conclud": [4, 98, 203], "remark": [4, 52, 98, 203, 210], "imag": [5, 43, 46, 49, 61, 88, 331, 361, 370, 533, 534, 535, 536, 537], "denois": [5, 88], "us": [5, 6, 12, 16, 44, 85, 86, 88, 115, 116, 118, 166, 182, 193, 195, 235, 239, 244, 274, 305, 310, 311, 319, 325, 338, 342, 343, 345, 348, 366, 367, 369, 370, 371, 376, 384, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 410, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 437, 438, 439, 440, 441, 442, 444, 445, 446, 448, 449, 450, 451, 452, 454, 456, 460, 461, 462, 463, 464, 465, 469, 470, 472, 473, 474, 475, 476, 477, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 531, 532, 534, 537, 538, 539, 540, 541, 543, 544, 547, 549, 550, 552, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 567, 568, 569, 572, 573, 575, 577, 578, 580, 581, 582, 583, 584, 585, 589, 590, 591, 593, 594, 595, 596, 598, 599, 602, 603, 605, 606, 607, 608, 609, 612, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 638, 639, 640, 641, 642, 643, 647, 650, 651, 652, 653, 654, 655, 656, 657, 659, 662, 663, 667, 668, 669, 676, 678, 683, 686, 687, 690, 691, 694, 697, 698, 699, 701, 702, 704, 706, 727, 728, 731, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 777, 779, 781, 783, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 801, 804, 805, 806, 807, 808, 809, 812, 813, 815, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 833, 836, 840, 841, 843, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 856, 861, 862, 870, 879, 881, 888, 891, 905, 915, 925, 927, 928, 931, 935, 945, 946, 947, 955, 964, 966, 982], "pca": [5, 53, 67, 85, 86, 89, 90, 91, 92, 93, 94, 278, 367, 491, 948, 965], "refer": [5, 11, 23, 25, 73, 74, 88, 102, 153, 156, 167, 235, 240, 241, 266, 331, 332, 334, 359, 360, 361, 362, 364, 365, 366, 367, 369, 370, 371, 372, 920, 921, 923, 924, 925, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 943, 944, 945, 946, 947], "load": [5, 7, 16, 46, 53, 106, 108, 112, 123, 133, 153, 172, 197, 200, 207, 211, 218, 236, 244, 245, 278, 298, 301, 310, 311, 312, 330, 331, 342, 348, 370, 957, 965, 966], "via": [5, 49, 167, 168, 197, 369, 923], "openml": [5, 280, 331], "basi": [5, 144, 372, 923, 927, 964], "reconstruct": [5, 13, 88], "test": [5, 71, 128, 238, 241, 248, 310, 314, 335, 337, 339, 345, 346, 366, 957, 964, 966], "face": [6, 46, 85, 214, 332, 955, 962], "recognit": [6, 332, 334, 962], "eigenfac": [6, 85, 962], "svm": [6, 126, 129, 130, 156, 193, 211, 283, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 361, 847, 848, 849, 850, 851, 852, 853, 854, 927, 937, 945, 964, 980, 981, 982, 983, 984, 985, 986, 987], "complex": [7, 208, 217, 234, 237, 289, 314, 323, 362, 927, 928, 934, 935, 945, 946, 947], "influenc": [7, 10, 323], "benchmark": [7, 10, 53, 310], "choos": [7, 920, 957, 959, 961], "paramet": [7, 71, 111, 233, 282, 298, 306, 337, 339, 349, 350, 361, 363, 369, 920, 927, 931, 946, 957, 961, 966], "run": [7, 53, 239], "code": [7, 85, 95, 337, 339, 342, 343, 345, 367, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "plot": [7, 8, 10, 22, 27, 31, 34, 37, 43, 45, 46, 52, 58, 59, 61, 62, 71, 75, 77, 82, 83, 86, 87, 91, 98, 100, 107, 112, 114, 118, 119, 120, 121, 123, 132, 147, 152, 158, 159, 163, 171, 172, 173, 183, 184, 188, 200, 207, 211, 215, 216, 218, 226, 231, 232, 237, 239, 242, 244, 248, 250, 271, 280, 282, 283, 287, 295, 296, 301, 310, 315, 344, 361, 926, 938, 969], "result": [7, 8, 34, 43, 45, 46, 52, 53, 58, 59, 62, 71, 73, 75, 86, 87, 98, 100, 118, 121, 147, 156, 184, 212, 215, 239, 248, 305, 311, 319, 920], "conclus": [7, 135, 168], "out": [8, 110, 325, 345, 366, 370, 920, 927, 933], "classif": [8, 24, 26, 27, 29, 30, 64, 82, 125, 136, 137, 138, 139, 143, 148, 195, 213, 238, 241, 242, 245, 256, 264, 271, 280, 286, 291, 310, 333, 361, 369, 372, 927, 931, 932, 934, 935, 945, 946, 947, 964, 966], "text": [8, 148, 208, 236, 291, 309, 310, 311, 312, 332, 361, 370, 538, 539, 540, 541, 966], "document": [8, 18, 148, 282, 283, 309, 310, 311, 337, 951, 952, 954, 972, 975, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "reuter": 8, "routin": [8, 324, 346], "main": [8, 179], "outlier": [9, 161, 196, 206, 215, 259, 260, 273, 361, 927, 937, 941], "detect": [9, 206, 215, 232, 259, 260, 931, 937, 946], "set": [9, 69, 71, 92, 118, 147, 242, 298, 314, 348, 366, 927, 957, 963, 964, 966], "first": [9, 33, 337], "second": [9, 33], "latenc": [10, 323], "helper": [10, 144, 200, 346], "function": [10, 31, 144, 169, 183, 184, 189, 200, 215, 230, 248, 282, 301, 312, 346, 361, 366, 369, 372, 923, 927, 931, 946, 964], "bulk": [10, 323], "atom": [10, 323], "speed": [10, 343], "variou": [10, 48, 186, 204], "regressor": [10, 100, 111, 158, 280, 283, 361, 369], "n_featur": 10, "throughput": [10, 323], "speci": [11, 266], "distribut": [11, 197, 199, 266, 277, 353, 928, 941], "visual": [12, 53, 96, 207, 212, 218, 230, 270, 281, 298, 361, 362, 363, 931, 969], "stock": [12, 962], "market": [12, 962], "structur": [12, 35, 43, 62, 143, 289, 318, 962], "retriev": [12, 280], "from": [12, 88, 133, 153, 280, 324, 331, 335, 348, 361, 370, 927, 931, 957, 964, 965, 966, 982], "internet": 12, "graph": [12, 280, 346, 348, 362, 370, 889], "cluster": [12, 18, 20, 32, 33, 34, 35, 36, 37, 40, 41, 43, 45, 48, 51, 53, 55, 58, 59, 60, 61, 62, 85, 148, 284, 311, 333, 359, 361, 362, 367, 373, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 664, 665, 931, 965, 980, 981, 982, 983, 984, 985, 986, 987, 988], "affin": [12, 34, 362, 929], "propag": [12, 34, 287, 288, 289, 362, 944], "embed": [12, 48, 199, 200, 210, 263, 369, 928], "2d": [12, 48, 87, 94, 152], "space": [12, 90, 363, 920, 928], "compress": [13, 49, 323, 371], "sens": [13, 371], "tomographi": 13, "l1": [13, 170, 172, 195, 306, 371], "prior": [13, 144, 221], "lasso": [13, 163, 164, 165, 166, 167, 168, 173, 281, 602, 927], "topic": 14, "extract": [14, 68, 88, 197, 236, 311, 323, 325, 361, 370, 966], "neg": [14, 85, 174, 367, 927], "matrix": [14, 16, 143, 160, 229, 361, 362, 367, 931, 946], "factor": [14, 85, 93, 96, 259, 260, 367, 937], "latent": [14, 77, 367], "dirichlet": [14, 367, 930], "alloc": [14, 367], "libsvm": [15, 331], "gui": 15, "wikipedia": 16, "princip": [16, 78, 91, 367, 948, 965], "eigenvector": 16, "download": [16, 118, 147, 331], "alreadi": 16, "disk": 16, "redirect": 16, "file": [16, 353, 370, 966], "comput": [16, 34, 43, 45, 58, 59, 62, 71, 172, 184, 248, 322, 323, 362, 363, 366, 938], "adjac": 16, "singular": [16, 367], "vector": [16, 23, 49, 148, 293, 296, 305, 310, 312, 332, 361, 370, 946, 964, 965], "random": [16, 85, 103, 116, 117, 153, 154, 210, 218, 241, 243, 319, 339, 346, 361, 366, 367, 369, 900, 920, 927, 943, 948], "svd": [16, 85, 367], "central": 16, "score": [16, 77, 109, 123, 132, 147, 158, 226, 234, 241, 242, 301, 362, 366, 926, 931, 946, 961], "biclust": [17, 18, 19, 148, 333, 359, 361], "spectral": [18, 19, 20, 61, 199, 359, 362, 928], "co": [18, 20, 359], "algorithm": [18, 19, 20, 34, 40, 45, 58, 59, 60, 199, 206, 343, 348, 925, 927, 930, 932, 934, 935, 939, 947, 964], "A": [19, 20, 43, 53, 58, 179, 283, 336, 343, 356, 366, 960, 963], "demo": [19, 20, 34, 43, 45, 53, 58, 60], "calibr": [21, 22, 23, 24, 25, 111, 148, 179, 360, 361, 388, 389, 390, 981, 982, 984, 985, 986, 987, 988], "probabl": [22, 23, 24, 27, 120, 138, 360, 361, 369, 946], "classifi": [22, 23, 25, 28, 121, 162, 217, 232, 252, 280, 292, 295, 298, 310, 318, 360, 361, 369, 925, 934, 964, 966], "gener": [22, 31, 34, 43, 45, 52, 58, 59, 61, 62, 71, 73, 75, 82, 83, 86, 87, 88, 105, 114, 129, 132, 135, 141, 142, 144, 148, 157, 158, 159, 163, 173, 179, 181, 212, 226, 232, 248, 265, 271, 281, 287, 305, 319, 333, 337, 350, 361, 367, 369, 927, 941, 952, 961], "synthet": [22, 69, 158, 232, 342], "gaussian": [22, 23, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 220, 221, 222, 225, 226, 227, 273, 361, 372, 930, 933, 941, 943], "bay": [22, 23, 361, 933], "curv": [23, 25, 159, 212, 218, 227, 232, 237, 242, 244, 250, 360, 926], "summari": [23, 168, 311, 312, 972, 973, 974, 975, 976, 977, 978, 979], "3": [24, 162, 361, 966, 980, 981, 986, 988], "class": [24, 33, 99, 101, 120, 162, 188, 193, 238, 242, 244, 283, 297, 300, 350, 361, 366, 369, 370, 930, 931, 934, 937, 945, 946, 972, 973], "fit": [24, 52, 86, 93, 105, 106, 109, 111, 112, 140, 158, 159, 160, 173, 176, 181, 185, 242, 265, 305, 319, 339, 349, 369, 933, 937, 957], "compar": [24, 38, 40, 57, 71, 77, 109, 117, 129, 156, 158, 165, 181, 186, 206, 212, 235, 243, 261, 269, 273, 348], "comparison": [25, 28, 39, 59, 73, 94, 108, 128, 135, 199, 200, 212, 235, 246, 312, 362, 372, 927], "recogn": 29, "hand": 29, "written": 29, "digit": [29, 48, 53, 80, 124, 125, 200, 271, 287, 288, 334, 963], "normal": [30, 156, 179, 273, 277, 361, 820, 834, 931, 941], "ledoit": [30, 72, 364], "wolf": [30, 72, 364], "oa": [30, 71, 72, 375, 425], "discrimin": [30, 31, 361, 925], "quadrat": [31, 372, 925], "covari": [31, 70, 71, 73, 74, 75, 148, 223, 361, 364, 375, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 925, 980, 984, 985, 986], "ellipsoid": [31, 222], "colormap": 31, "adjust": 33, "chanc": 33, "perform": [33, 39, 238, 278, 282, 284, 287, 311, 323, 337, 338, 362, 366, 370, 966], "evalu": [33, 53, 56, 74, 179, 215, 236, 239, 271, 311, 349, 357, 359, 362, 366, 369, 920, 926, 931, 966], "defin": [33, 43, 53, 62, 199, 215, 230, 232, 233, 312, 931], "list": [33, 954], "metric": [33, 36, 111, 239, 361, 362, 366, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 920, 928, 929, 931, 934, 980, 981, 982, 983, 984, 985, 986, 987, 988], "fix": [33, 341, 972, 975, 976, 977, 978, 979, 985], "ground": [33, 158], "truth": [33, 158], "label": [33, 242, 287, 288, 289, 332, 333, 362, 366, 369, 931, 942, 944], "grow": 33, "number": [33, 55, 108, 132, 247, 323, 339, 920, 921, 930], "vari": [33, 268, 290, 362], "sampl": [34, 58, 71, 86, 87, 129, 160, 192, 212, 236, 248, 265, 281, 305, 308, 331, 346, 350, 361, 362, 369, 927], "agglom": [35, 36, 48, 965], "without": [35, 109, 261, 310], "differ": [36, 40, 57, 71, 144, 152, 273, 276, 295, 339, 348, 362, 927, 964], "hierarch": [37, 43, 57, 62, 362, 965], "dendrogram": 37, "birch": [38, 362, 393], "minibatchkmean": [38, 59, 85, 399], "bisect": [39, 362], "k": [39, 41, 44, 52, 53, 54, 56, 59, 62, 77, 278, 311, 362, 366, 931, 934, 941, 964, 965], "mean": [39, 41, 44, 52, 53, 54, 56, 58, 59, 105, 106, 147, 153, 311, 362, 931, 941, 965], "regular": [39, 71, 113, 151, 172, 183, 184, 268, 306, 927, 935], "toi": [40, 57, 206, 334], "segment": [42, 61], "pictur": 42, "greek": 42, "coin": [42, 43], "region": [42, 235], "ward": [43, 62, 362, 965], "an": [43, 54, 147, 160, 168, 215, 263, 280, 284, 348, 370, 920, 937, 957, 963, 964], "color": 44, "quantiz": [44, 49, 965], "dbscan": [45, 362, 373, 395], "onlin": [46, 186, 283, 284, 945], "dictionari": [46, 85, 88, 95, 367], "part": [46, 371], "agglomer": [47, 50, 948, 965], "origin": [49, 90, 241, 263, 273], "encod": [49, 108, 941, 942], "strategi": [49, 233, 269, 276, 325, 361, 362, 931], "memori": [49, 323, 343, 345, 362], "footprint": 49, "v": [50, 62, 71, 72, 74, 78, 90, 132, 153, 161, 171, 197, 238, 244, 248, 249, 314, 362, 921, 941, 957], "univari": [50, 77, 129, 301, 371, 921], "select": [50, 55, 66, 93, 123, 127, 129, 132, 133, 148, 167, 168, 173, 226, 228, 301, 348, 357, 361, 366, 371, 920, 927, 930, 961, 978], "induct": 51, "demonstr": [52, 239, 276, 287], "assumpt": 52, "possibl": [52, 342], "solut": 52, "final": [52, 135], "handwritten": [53, 200, 334], "our": [53, 230, 233, 337], "reduc": [53, 323], "initi": [54, 56, 224, 930], "silhouett": [55, 362], "kmean": [55, 59, 281, 397], "empir": [56, 74, 210, 364], "linkag": [57, 362], "method": [57, 68, 77, 97, 135, 148, 199, 201, 224, 251, 350, 361, 362, 369, 923, 930, 937, 938, 965], "shift": [58, 362], "meanshift": [58, 398], "establish": [59, 156], "pariti": 59, "between": [59, 246], "optic": [60, 334, 362, 400], "four": 61, "circl": 61, "two": [61, 101, 165, 216, 235], "unstructur": 62, "we": 62, "ar": [62, 283, 348], "nearest": [62, 148, 253, 254, 255, 256, 261, 264, 265, 280, 361, 921, 934, 964], "neighbor": [62, 148, 199, 253, 254, 255, 256, 261, 265, 278, 280, 361, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 921, 928, 934, 964, 980, 981, 982, 984, 985, 986, 987, 988], "10": [62, 972], "pipelin": [63, 64, 66, 67, 118, 130, 148, 151, 208, 217, 236, 301, 339, 348, 349, 361, 363, 371, 807, 808, 809, 810, 948, 962, 966, 980, 981, 982, 983, 984, 985, 986, 987, 988], "composit": [63, 148, 361, 363, 920], "estim": [63, 70, 71, 72, 73, 74, 75, 102, 108, 110, 117, 141, 147, 148, 158, 182, 185, 208, 214, 215, 225, 243, 257, 258, 266, 280, 281, 282, 285, 319, 339, 348, 349, 350, 358, 361, 363, 364, 366, 368, 369, 372, 920, 921, 925, 927, 930, 931, 946, 951, 959, 961, 963, 973, 980, 981, 982], "column": [64, 65, 217], "transform": [64, 65, 66, 69, 77, 104, 116, 217, 282, 283, 284, 329, 348, 349, 363, 365, 366, 934, 941, 942, 943, 965], "heterogen": [64, 363], "sourc": [64, 86, 335], "20": [64, 310, 332, 966, 980], "newsgroup": [64, 310, 332, 966], "creat": [64, 91, 93, 207, 242, 301, 348], "mix": 65, "type": [65, 221, 339, 350, 362, 957], "dimension": [66, 199, 202, 217, 262, 278, 311, 925, 928, 934, 948, 964], "reduct": [66, 199, 203, 217, 262, 278, 311, 925, 934, 948], "gridsearchcv": [66, 123, 239, 369, 746], "illustr": [66, 139, 144, 263, 372], "cach": [66, 255, 363], "within": 66, "chain": [67, 217, 252, 349, 363], "logist": [67, 162, 169, 170, 171, 172, 194, 195, 927, 964], "concaten": 68, "multipl": [68, 217, 239, 319, 344, 366, 920, 921, 931, 980, 981], "effect": [69, 150, 204, 273, 278, 290, 314, 934], "target": [69, 142, 197, 348, 350, 363, 365, 932, 942], "shrinkag": [71, 364, 369, 925, 964], "ledoitwolf": [71, 423], "max": [71, 931], "likelihood": [71, 158, 159, 238, 931, 936], "approach": [71, 168, 235], "robust": [73, 74, 158, 182, 185, 319, 361, 364, 920, 927], "mahalanobi": [73, 934], "distanc": [73, 361, 934], "relev": [73, 927], "minimum": [74, 364], "determin": [74, 364, 927, 931], "spars": [75, 85, 95, 151, 163, 165, 194, 280, 310, 311, 346, 364, 367, 371, 941, 943, 945], "invers": [75, 364, 943], "decomposit": [76, 77, 84, 85, 102, 148, 333, 361, 365, 367, 374, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 965, 980, 981, 982, 983, 984, 985, 986, 987, 988], "variabl": [77, 150, 151, 324, 348, 361, 964], "canon": [77, 365], "symmetr": 77, "pl": 77, "scatter": 77, "multivari": [77, 921], "respons": [77, 351], "pls2": 77, "pls1": 77, "cca": [77, 432], "mode": [77, 323, 335], "b": 77, "deflat": 77, "compon": [78, 85, 91, 261, 262, 263, 367, 930, 934, 948, 965], "partial": [78, 150, 152, 216, 938], "least": [78, 111, 168, 174, 177, 927], "squar": [78, 111, 144, 174, 177, 372, 923, 927, 929, 931], "The": [78, 80, 81, 150, 151, 179, 204, 210, 233, 242, 332, 341, 366, 370, 930, 931, 943, 964, 965], "one": [78, 108, 216, 927, 931], "power": [78, 179], "iri": [81, 92, 94, 107, 137, 188, 292, 295, 315, 334, 372, 963], "randomli": [82, 83], "multilabel": [83, 213, 333, 346, 361, 931, 932, 957], "prepar": [85, 98, 100, 156, 199, 244, 245, 278, 298, 341], "nmf": [85, 284, 367, 490], "independ": [85, 367, 965], "fastica": [85, 86, 87, 374, 483], "minibatchsparsepca": [85, 367, 489], "center": [85, 941], "fa": [85, 93], "posit": [85, 283], "blind": 86, "separ": [86, 191, 299, 300], "ica": [86, 367, 965], "point": [87, 263], "cloud": 87, "distort": 88, "displai": [88, 184, 207, 208, 217, 285, 345, 969], "patch": [88, 370], "noisi": [88, 142], "them": [88, 336], "increment": [89, 325, 367], "kernelpca": [90, 485], "figur": 91, "probabilist": [93, 136, 367, 372], "lda": [94, 367, 925], "precomput": [95, 160, 280, 367], "rotat": 96, "pattern": 96, "ensembl": [97, 104, 107, 148, 284, 361, 369, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 980, 981, 982, 983, 984, 985, 986, 987, 988], "discret": [98, 114, 143, 274, 275, 941], "versu": [98, 102, 193, 240, 292, 323], "adaboost": [98, 99, 100, 101, 369], "baselin": [98, 156, 179], "samm": 98, "r": 98, "multi": [99, 117, 173, 188, 202, 214, 239, 242, 268, 317, 343, 361, 927, 928, 931, 935, 946, 947], "decis": [99, 100, 107, 114, 119, 148, 211, 292, 313, 314, 315, 316, 317, 318, 348, 351, 361, 947], "tree": [99, 100, 104, 105, 106, 107, 116, 148, 153, 179, 280, 285, 313, 314, 315, 316, 317, 318, 348, 361, 369, 371, 855, 856, 857, 858, 859, 860, 861, 934, 939, 947, 980, 981, 982, 983, 984, 985, 986, 987, 988], "train": [100, 112, 114, 121, 132, 207, 212, 216, 218, 226, 248, 271, 282, 290, 298, 310, 314, 315, 318, 332, 366, 934, 944, 957, 964, 966], "decisiontre": 100, "singl": [102, 118, 197, 207, 333, 362, 921], "bag": [102, 110, 310, 369, 370, 920, 966], "bia": 102, "varianc": [102, 177, 371, 931, 941], "oob": 103, "error": [103, 111, 123, 158, 232, 248, 345, 353, 927, 931], "forest": [103, 105, 106, 117, 153, 154, 218, 332, 369, 937], "import": [105, 106, 112, 133, 153, 154, 211, 278, 280, 369, 939], "decreas": [105, 106, 153], "impur": [105, 106, 153, 314, 939], "permut": [105, 153, 154, 241, 280, 366, 939], "pixel": 106, "parallel": [106, 324, 335, 343, 362, 369, 897, 898, 920], "mdi": [106, 153], "surfac": [107, 211, 315], "categor": [108, 282, 348, 369, 933, 941], "am": 108, "hous": [108, 332], "drop": 108, "hot": 108, "ordin": 108, "nativ": [108, 280, 282], "limit": [108, 135, 323, 353, 356, 370], "split": [108, 282, 319, 366], "earli": [109, 187], "stop": [109, 187, 370, 945], "interv": 111, "quantil": [111, 181, 283, 284, 927], "confid": 111, "tune": [111, 233, 236, 282, 920, 966], "hyper": [111, 233, 282, 361, 920], "preprocess": [112, 118, 148, 151, 152, 215, 217, 272, 312, 319, 348, 361, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 941, 980, 981, 982, 983, 984, 985, 986, 987, 988], "devianc": [112, 931], "isolationforest": [114, 513], "boundari": [114, 119, 292], "path": [114, 166, 172, 184, 318, 353], "length": [114, 353], "monoton": [115, 369], "constraint": [115, 285, 362, 369], "name": [115, 283, 348], "specifi": [115, 348, 920], "hash": [116, 346, 370], "total": [116, 314, 369], "output": [117, 214, 273, 285, 317, 947, 964], "meta": [117, 282, 369], "combin": [118, 207], "predictor": 118, "stack": [118, 280, 369], "make": [118, 121, 147, 337, 341, 351], "measur": [118, 238, 362, 931], "votingclassifi": [119, 120, 369, 519], "calcul": 120, "individu": [121, 152, 282, 938], "vote": [121, 369], "tutori": [122, 148, 950, 958, 960, 966], "exercis": [122, 123, 124, 125, 126, 148, 961, 964, 966], "diabet": [123, 216, 334, 964], "appli": 123, "line": [123, 138], "show": [123, 244], "std": [123, 158], "bonu": 123, "how": [123, 319, 337, 343, 348], "much": 123, "can": [123, 348], "you": [123, 348], "trust": 123, "alpha": [123, 314], "f": [128, 931], "mutual": [128, 362], "inform": [128, 147, 167, 168, 341, 362, 920, 927], "anova": [130, 301], "recurs": [131, 132, 371], "elimin": [131, 132, 371, 920], "sequenti": [133, 371], "coeffici": [133, 151, 158, 183, 184, 362, 931], "discuss": [133, 336], "process": [134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 151, 319, 351, 361, 372, 930, 960], "machin": [134, 148, 150, 151, 152, 271, 293, 345, 361, 936, 946, 957, 964], "ridg": [135, 159, 161, 177, 183, 184, 212, 361, 372, 622, 924, 927], "simpl": [135, 258, 343, 963], "gpc": [136, 137, 138, 139, 372], "iso": [138, 242], "xor": [139, 372], "gpr": [140, 141, 372], "mauna": [140, 372], "loa": [140, 372], "co2": [140, 372], "build": [140, 147, 335, 337, 345, 966], "design": 140, "proper": 140, "extrapol": 140, "interpret": [140, 151, 215, 367, 369], "hyperparamet": [140, 141, 236, 243, 567], "nois": [141, 142, 159, 372], "level": [141, 324, 362, 369, 372], "optimis": 141, "basic": [142, 197, 349, 364, 372], "introductori": 142, "free": 142, "sequenc": [143, 348], "similar": [143, 929, 931], "under": [143, 348], "posterior": 144, "cookbook": 144, "radial": [144, 372, 923, 964], "ration": [144, 372], "quadradt": 144, "exp": [144, 372], "sine": [144, 227, 372], "dot": [144, 372], "product": [144, 197, 345, 348, 372, 571], "mat\u00e9rn": [144, 372], "miss": [145, 146, 147, 148, 280, 369, 921, 941], "valu": [145, 146, 147, 148, 204, 280, 337, 367, 369, 921, 931, 939, 941], "imput": [145, 146, 147, 148, 280, 361, 577, 578, 579, 580, 921, 941, 980, 981, 982, 983, 984, 985, 986, 987, 988], "variant": 146, "iterativeimput": [146, 577, 921], "befor": [147, 341], "replac": 147, "0": [147, 280, 281, 282, 283, 947, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "knn": [147, 280], "iter": [147, 247, 366, 920], "releas": [148, 279, 280, 281, 282, 283, 284, 285, 341, 353, 970, 978], "highlight": [148, 279, 280, 281, 282, 283, 284, 285, 972, 975, 976, 979, 980], "mixtur": [148, 220, 221, 222, 225, 226, 227, 361, 744, 745, 930, 980, 981, 985, 986], "inspect": [148, 149, 352, 361, 581, 582, 583, 584, 981, 982, 983, 984, 985, 986, 987, 988], "approxim": [148, 155, 156, 211, 253, 282, 361, 364, 923], "manifold": [148, 198, 199, 200, 201, 333, 361, 638, 639, 640, 641, 642, 643, 644, 645, 646, 928, 980, 981, 982, 983, 984, 985, 986, 987], "miscellan": [148, 205, 361, 980, 981, 982, 983, 984, 985], "multioutput": [148, 251, 361, 779, 780, 781, 782, 932, 980, 981, 982, 983, 984, 987], "neural": [148, 152, 267, 361, 935, 936], "network": [148, 152, 267, 361, 935, 936], "semi": [148, 286, 287, 291, 292, 361, 944], "supervis": [148, 286, 287, 291, 292, 361, 935, 944, 953, 964], "work": [148, 309, 323, 336, 348, 966], "failur": [150, 920], "infer": [150, 930], "causal": [150, 151], "simul": 150, "hourli": 150, "wage": [150, 151], "descript": 150, "incom": 150, "fulli": 150, "observ": [150, 964, 965], "lesson": [150, 151], "common": [151, 319, 350, 370, 931], "pitfal": [151, 319], "scale": [151, 199, 202, 278, 306, 325, 370, 838, 928, 937, 941, 948], "matter": 151, "check": [151, 237, 280, 345, 980, 981, 982], "problem": [151, 367, 946, 947, 957, 962, 964, 965], "correl": [151, 154, 365, 931, 939], "numer": [151, 324, 339], "wrong": [151, 348], "depend": [152, 216, 335, 938, 972, 985, 986], "condit": [152, 282, 938], "expect": [152, 282, 930, 938], "preprocessor": 152, "1": [152, 176, 283, 284, 285, 348, 361, 966, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "wai": [152, 337, 348], "accuraci": [153, 211, 310, 314, 931], "": [153, 278, 340, 348, 369, 931], "multicollinear": 154, "breast": [154, 334], "cancer": [154, 334], "handl": [154, 921], "scalabl": [156, 237, 281], "partit": 156, "bayesian": [158, 159, 221, 235, 361, 927, 930], "recov": 158, "weight": [158, 160, 192, 270, 281, 308, 369, 370], "true": [158, 159], "margin": [158, 159, 191, 299, 303], "log": [158, 159, 931], "expans": 158, "sinusoid": 159, "cubic": 159, "l": 159, "elast": [160, 163, 164, 927], "net": [160, 163, 164, 927], "gram": [160, 946], "huberregressor": [161, 599], "strong": 161, "signal": [163, 367, 965], "elasticnet": [163, 281, 596], "dens": 165, "implement": [165, 348, 362, 370, 931, 934, 945, 946], "lar": [166, 600, 927], "criteria": [167, 348, 927, 947], "aic": 168, "bic": [168, 226], "criterion": [168, 282, 920, 945], "coordin": 168, "descent": [168, 187, 193, 927, 945], "angl": [168, 927], "penalti": [170, 190, 306], "sparsiti": [170, 176, 370, 964], "multinomi": [171, 195, 927, 933], "One": [171, 193, 244, 283, 297, 366, 937, 945], "rest": [171, 244], "joint": 173, "task": [173, 361, 927, 951], "seri": [173, 366], "onli": [176, 196, 983, 985], "2": [176, 285, 966, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "ordinari": [177, 927], "orthogon": [178, 927], "match": [178, 927], "pursuit": [178, 927], "poisson": [179, 197, 281, 282, 931], "loss": [179, 189, 281, 284, 369, 931], "french": 179, "motor": 179, "third": [179, 353], "parti": [179, 353], "liabil": 179, "claim": [179, 197], "constant": [179, 921], "rank": [179, 361, 931], "takeawai": 179, "interpol": 180, "quantileregressor": [181, 620], "linearregress": [181, 607], "ransac": [182, 927], "l2": [183, 306], "solver": [186, 367, 927], "stochast": [187, 193, 199, 269, 927, 928, 936, 945], "sgd": [188, 189, 190, 191, 192, 927, 945], "convex": 189, "maximum": [191, 299, 936], "hyperplan": [191, 299, 300], "multiclass": [194, 244, 280, 346, 360, 361, 776, 777, 778, 893, 894, 895, 931, 932, 957, 964, 981, 984, 985, 986], "20newgroup": 194, "mnist": [195, 270], "theil": [196, 927], "sen": [196, 927], "y": [196, 348, 365, 942, 944], "direct": 196, "x": 196, "tweedi": [197, 931], "insur": 197, "definit": [197, 271, 938, 982], "frequenc": [197, 966], "sever": [197, 201], "gamma": [197, 931], "pure": 197, "premium": 197, "tweedieregressor": [197, 630], "local": [199, 200, 259, 260, 928, 937], "isomap": [199, 200, 638, 928], "multidimension": 199, "t": [199, 204, 928], "techniqu": 200, "sphere": 201, "swiss": 203, "roll": [203, 339], "And": [203, 351], "hole": 203, "sne": [204, 928], "perplex": 204, "shape": [204, 957], "anomali": 206, "object": [207, 230, 339, 348, 920, 931, 963, 969], "confusionmatrixdisplai": [207, 647], "roccurvedisplai": [207, 652], "precisionrecalldisplai": [207, 650], "compact": 208, "represent": [208, 281, 323, 370, 965], "rich": [208, 281], "html": 208, "isoton": [209, 360, 361, 585, 586, 587, 922, 980, 981, 982, 984, 986, 987], "johnson": [210, 943], "lindenstrauss": [210, 943], "bound": 210, "theoret": [210, 927], "explicit": 211, "map": [211, 277, 941], "rbf": [211, 297, 298, 372, 572, 929, 946, 964], "python": [211, 324, 343, 356, 946, 950, 951, 978], "packag": [211, 951, 984], "svr": [212, 305, 853, 946], "construct": [212, 363], "look": [212, 305], "complet": [214, 362], "advanc": 216, "With": [216, 966], "togeth": [216, 244, 962, 965], "grid": [217, 233, 235, 243, 246, 920, 961, 966], "search": [217, 233, 235, 243, 246, 349, 920, 961, 966], "over": 217, "roc": [218, 232, 244, 245, 280, 931], "api": [218, 219, 280, 283, 285, 324, 339, 344, 350, 358, 361, 372, 972, 973, 974, 975, 976, 977, 978, 979, 982], "svc": [218, 306, 852, 946], "introduc": 219, "set_output": [219, 285, 339], "concentr": 221, "variat": [221, 930], "gmm": [223, 224], "densiti": [225, 257, 258, 266, 368, 881, 946], "best": [226, 338, 348], "confus": [229, 362, 931], "behavior": 230, "indic": 230, "mani": [230, 285, 324, 348], "cv": [230, 319], "tradeoff": [232, 931], "det": [232, 931], "custom": [233, 294, 370, 941, 946], "refit": [233, 957], "balanc": [234, 931], "statist": [235, 951, 960, 963], "frequentist": 235, "practic": [235, 319, 338, 342, 927, 928, 935, 945, 946, 947], "equival": 235, "all": [235, 244, 284, 353, 962, 987, 988], "take": 235, "home": 235, "messag": 235, "ratio": [238, 931], "pre": [238, 319, 349], "post": [238, 314], "invari": 238, "respect": 238, "preval": 238, "cross_val_scor": [239, 770], "nest": [240, 363, 961], "see": [240, 363], "also": [240, 341, 363], "signific": 241, "precis": [242, 931], "recal": [242, 931], "In": 242, "binari": [242, 927, 931], "averag": [242, 244, 362, 369, 931], "micro": [242, 244], "each": [242, 247, 310, 920], "f1": 242, "receiv": [244, 245, 931], "oper": [244, 245, 336, 346, 372, 931], "characterist": [244, 245, 931], "specif": [244, 335, 339, 356, 920, 951, 952], "ovr": 244, "macro": 244, "ovo": 244, "success": [246, 247, 282, 920], "halv": [246, 247, 282, 920], "candid": [247, 920], "amount": [247, 920], "resourc": [247, 324, 337, 920, 950, 954], "underfit": 249, "overfit": 249, "tsne": [253, 642], "1d": 258, "novelti": [259, 937, 946], "lof": [259, 260], "neighborhood": [261, 262, 263, 934], "centroid": [264, 934], "layer": [268, 935], "perceptron": [268, 618, 927, 935], "mlpclassifi": [269, 805], "mlp": 270, "restrict": [271, 936], "boltzmann": [271, 936], "scaler": 273, "standardscal": [273, 828], "minmaxscal": [273, 818], "maxabsscal": [273, 817], "robustscal": [273, 826], "powertransform": [273, 824], "quantiletransform": [273, 825], "uniform": [273, 941], "kbinsdiscret": [274, 276, 813], "continu": [274, 337], "rescal": 278, "22": [280, 982], "new": [280, 282, 283, 285, 337, 348, 950, 972, 973, 975, 976, 977, 978, 979], "prune": [280, 314, 947], "datafram": [280, 348], "compat": [280, 337, 339, 358], "auc": [280, 656], "now": [280, 283, 982], "23": [281, 983], "stabil": 281, "improv": [281, 282, 283, 284, 285, 336, 337, 975, 976], "histogram": [281, 283, 285, 368, 369], "24": [282, 984], "histgradientboost": 282, "self": [282, 290, 944], "sequentialfeatureselector": [282, 552], "polynomialcountsketch": [282, 590], "decisiontreeregressor": [282, 856], "keyword": [283, 983, 985], "argument": [283, 339, 983, 985], "more": [283, 332, 348, 356, 935], "flexibl": [283, 921], "stabl": 283, "histgradientboostingregressor": [284, 512], "get_feature_names_out": 284, "avail": [284, 920, 969], "group": [284, 366, 955, 965], "infrequ": [284, 941], "onehotencod": [284, 821], "minibatchnmf": [284, 488], "version": [284, 331, 335, 341, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "bisectingkmean": [284, 394], "divid": 284, "panda": [285, 342, 348], "enhanc": [285, 351, 951, 975, 976, 977, 978, 979], "faster": [285, 369], "parser": [285, 331], "fetch_openml": [285, 446], "experiment": [285, 341, 358, 361, 529, 530], "arrai": [285, 346, 358, 957], "lineardiscriminantanalysi": [285, 499], "effici": [285, 346], "most": 287, "uncertain": 287, "activ": 288, "threshold": 290, "linearsvc": [296, 847, 946], "unbalanc": [300, 946], "some": 301, "plai": 301, "percentil": 301, "case": [306, 927, 931], "tie": 307, "break": 307, "word": [310, 370, 966], "metadata": 310, "strip": 310, "quantifi": [311, 931], "qualiti": [311, 931], "tfidfvector": [311, 312, 541], "lsa": 311, "top": [311, 931], "term": [311, 350, 370], "per": 311, "hashingvector": [311, 370, 539], "featurehash": [312, 532], "dictvector": [312, 531], "special": 312, "purpos": [312, 952], "cost": [314, 947], "leav": [314, 366, 927], "understand": 318, "recommend": [319, 332, 951], "inconsist": 319, "leakag": 319, "dure": 319, "avoid": [319, 363], "control": [319, 369, 935], "none": 319, "randomst": 319, "instanc": [319, 325], "repeat": [319, 363, 366], "call": [319, 336], "splitter": [319, 361], "subtleti": 319, "get": [319, 348, 349], "reproduc": [319, 342], "across": 319, "execut": [319, 348], "configur": [323, 324], "overhead": 323, "input": [323, 339, 358, 362, 941], "tip": [323, 338, 345, 920, 928, 935, 945, 946, 947], "trick": [323, 343, 345, 370], "algebra": [323, 346], "librari": [323, 324], "reshap": [323, 963], "link": [323, 331, 931], "manag": [324, 353], "higher": 324, "joblib": [324, 343], "lower": 324, "openmp": [324, 338], "numpi": [324, 342], "scipi": 324, "oversubscript": 324, "spawn": 324, "too": 324, "thread": 324, "switch": 324, "environ": 324, "sklearn_assume_finit": 324, "sklearn_working_memori": 324, "sklearn_se": 324, "sklearn_tests_global_random_se": 324, "sklearn_skip_network_test": 324, "sklearn_run_float32_test": 324, "sklearn_enable_debug_cython_direct": 324, "sklearn_build_enable_debug_symbol": 324, "sklearn_pairwise_dist_chunk_s": 324, "computation": 325, "bigger": 325, "stream": 325, "note": [325, 363, 366, 927], "tabl": [326, 348], "Of": 326, "content": [326, 348, 957], "util": [330, 342, 346, 361, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 966, 969, 980, 981, 982, 983, 984, 985, 986, 987, 988], "other": [331, 348, 951, 972], "svmlight": 331, "format": [331, 342, 348, 356, 932], "org": [331, 341, 955], "repositori": 331, "arff": 331, "extern": [331, 950, 957, 972, 981], "olivetti": 332, "usag": [332, 343, 348, 358, 360, 363, 369, 370, 927], "convert": 332, "filter": 332, "realist": 332, "consider": [332, 927], "wild": 332, "covertyp": 332, "rcv1": 332, "kddcup": 332, "99": 332, "california": 332, "plant": 334, "linnerrud": 334, "wine": 334, "wisconsin": 334, "diagnost": 334, "instal": [335, 353], "nightli": 335, "runtim": 335, "tag": [335, 337, 339], "edit": 335, "platform": [335, 345, 353], "instruct": 335, "window": [335, 353], "maco": 335, "compil": [335, 343], "conda": [335, 353], "forg": 335, "homebrew": 335, "linux": [335, 348, 353], "system": 335, "freebsd": 335, "altern": [335, 920], "bug": [336, 337, 341, 954, 975, 976, 977, 978, 979, 980, 981], "triag": 336, "issu": [336, 337], "curat": 336, "fruit": 336, "pr": [336, 341], "help": [336, 337, 348], "review": [336, 337, 345, 966], "member": 336, "close": 336, "tough": 336, "typic": 336, "workflow": [336, 337], "contribut": [337, 348], "submit": 337, "report": [337, 342, 931], "request": [337, 341, 345, 348], "good": [337, 342], "video": [337, 950], "git": 337, "pull": [337, 341, 345, 348], "checklist": [337, 341], "integr": 337, "ci": 337, "stall": 337, "unclaim": 337, "easi": 337, "want": 337, "guidelin": [337, 339], "write": 337, "referenc": 337, "github": 337, "action": 337, "coverag": [337, 345, 931], "matplotlib": 337, "monitor": 337, "tracker": [337, 954], "maintain": [337, 341, 356], "backward": 337, "deprec": [337, 361, 874, 982], "chang": [337, 351, 955, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "default": 337, "read": 337, "exist": 337, "cython": [338, 343, 345], "convent": [338, 957], "knowledg": 338, "eas": 338, "instanti": 339, "attribut": [339, 350, 920], "option": 339, "univers": 339, "your": [339, 342, 931], "own": [339, 348, 931], "templat": 339, "baseestim": [339, 376], "mixin": 339, "get_param": 339, "set_param": 339, "init": 339, "clone": [339, 385], "assert": 339, "guid": [340, 968], "major": [341, 369, 980, 981], "minor": 341, "known": [341, 980, 981], "merg": 341, "web": 341, "site": 341, "craft": 342, "minim": [342, 947, 985, 986], "provid": 342, "fail": 342, "comment": 342, "boil": 342, "down": 342, "script": 342, "someth": 342, "small": 342, "do": [342, 348], "NOT": 342, "unless": 342, "i": [342, 348, 366, 955], "extrem": [342, 369], "necessari": 342, "markdown": 342, "make_regress": [342, 474], "make_classif": [342, 465], "make_blob": [342, 462], "optim": [343, 361, 920, 928], "c": 343, "profil": 343, "extens": 343, "yep": 343, "gperftool": 343, "debugg": 343, "gdb": 343, "gprof": 343, "valgrind": [343, 345], "callgrind": 343, "kcachegrind": 343, "warm": 343, "restart": 343, "overview": [344, 362, 937], "ax": 344, "saniti": 345, "preserv": 345, "fold": [345, 366], "unfold": 345, "outdat": 345, "diff": 345, "remot": 345, "track": 345, "branch": 345, "pytest": 345, "alias": 345, "flag": 345, "standard": [345, 941], "repli": 345, "debug": 345, "arm64": 345, "x86_64": 345, "tool": [346, 348], "matric": [346, 941], "warn": [346, 361], "except": [346, 361, 521, 522, 523, 524, 525, 526, 527, 528, 984, 988], "dispatch": 347, "frequent": 348, "ask": 348, "question": [348, 954], "what": 348, "lot": 348, "peopl": [348, 972, 973, 974, 975], "pronounc": 348, "why": [348, 369], "pypi": 348, "deep": 348, "reinforc": 348, "Will": 348, "add": 348, "graphic": [348, 936], "did": 348, "remov": [348, 361, 371, 941, 972], "hmm": 348, "gpu": 348, "need": 348, "doe": 348, "directli": 348, "plan": 348, "so": 348, "my": 348, "ani": 348, "attent": 348, "inclus": 348, "includ": 348, "should": 348, "save": 348, "export": 348, "deploi": 348, "bunch": [348, 862], "usabl": 348, "deal": 348, "string": 348, "sometim": 348, "crash": 348, "freez": 348, "n_job": 348, "osx": [348, 353], "job": 348, "than": 348, "random_st": 348, "entir": 348, "start": 349, "processor": 349, "automat": [349, 927], "next": 349, "glossari": 350, "element": 350, "concept": [350, 927], "properti": 350, "role": 351, "technic": 351, "committe": 351, "propos": 351, "slep": 351, "latest": 353, "appl": 353, "silicon": 353, "m1": 353, "hardwar": 353, "alpin": 353, "arch": 353, "debian": 353, "ubuntu": 353, "fedora": 353, "netbsd": 353, "macport": 353, "mac": 353, "anaconda": 353, "enthought": 353, "deploy": 353, "intel": 353, "channel": 353, "winpython": 353, "troubleshoot": 353, "caus": 353, "persist": 356, "serial": 356, "secur": 356, "skop": 356, "interoper": [356, 951], "mathemat": [359, 362, 369, 923, 925, 927, 934, 935, 938, 945, 946, 947], "formul": [359, 362, 369, 925, 927, 934, 935, 945, 946, 947], "sigmoid": [360, 929], "sklearn": [361, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 980, 981, 982, 983, 984, 985, 986, 987, 988], "compos": [361, 414, 415, 416, 417, 980, 981, 982, 983, 984, 985, 986, 987], "cross_decomposit": [361, 432, 433, 434, 435, 982, 984, 986], "loader": 361, "discriminant_analysi": [361, 499, 500, 980, 981, 984, 986, 987], "dummi": [361, 501, 502, 931, 980, 981, 982, 985, 986], "feature_extract": [361, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 980, 981, 982, 983, 984, 985, 986, 987, 988], "feature_select": [361, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 980, 982, 983, 984, 985, 986, 987, 988], "gaussian_process": [361, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 980, 982, 983, 984, 985, 986, 987], "kernel_approxim": [361, 588, 589, 590, 591, 592, 982, 984, 985, 986, 987], "kernel_ridg": [361, 593], "linear_model": [361, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 980, 981, 982, 983, 984, 985, 986, 987, 988], "classic": [361, 930], "glm": 361, "interfac": 361, "model_select": [361, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 980, 981, 982, 983, 984, 985, 986, 987, 988], "naive_bay": [361, 783, 784, 785, 786, 787, 980, 982, 983, 984, 985, 987, 988], "neural_network": [361, 804, 805, 806, 980, 981, 982, 983, 984, 985, 986, 987, 988], "random_project": [361, 839, 840, 841, 986], "semi_supervis": [361, 842, 843, 844, 982, 983, 984, 988], "recent": 361, "To": 361, "low": [362, 369, 371], "mini": [362, 367], "batch": [362, 367], "assign": 362, "featureagglomer": [362, 396], "hierarchi": 362, "ad": 362, "connect": [362, 370, 965], "consumpt": 362, "larg": [362, 370], "size": [362, 369], "rand": 362, "index": [362, 890], "advantag": 362, "drawback": 362, "homogen": 362, "fowlk": 362, "mallow": 362, "calinski": 362, "harabasz": 362, "davi": 362, "bouldin": 362, "conting": 362, "pair": 362, "access": 363, "featureunion": [363, 807], "columntransform": [363, 414], "shrunk": 364, "oracl": 364, "plscanon": [365, 433], "plssvd": [365, 435], "plsregress": [365, 434], "held": 366, "cross_valid": [366, 771], "obtain": 366, "d": [366, 934], "loo": 366, "p": [366, 955], "lpo": 366, "shuffl": [366, 905], "stratif": 366, "stratifi": 366, "stratifiedgroupkfold": [366, 764], "predefin": [366, 931], "decompos": 367, "exact": 367, "sparsepca": [367, 493], "kpca": 367, "choic": [367, 930, 934], "truncat": 367, "semant": 367, "nnmf": 367, "frobeniu": 367, "norm": 367, "beta": 367, "diverg": 367, "addit": [369, 923], "weak": 369, "learner": 369, "rate": 369, "subsampl": 369, "hard": 369, "soft": 369, "dict": 370, "detail": [370, 923, 927, 945, 946], "tf": 370, "idf": 370, "decod": 370, "applic": [370, 965], "corpu": 370, "selectfrommodel": [371, 547], "recoveri": 371, "biclustermixin": 377, "classnameprefixfeaturesoutmixin": 378, "classifiermixin": 379, "clustermixin": 380, "densitymixin": 381, "onetoonefeaturemixin": 382, "regressormixin": 383, "transformermixin": 384, "is_classifi": 386, "is_regressor": 387, "calibratedclassifiercv": 388, "calibrationdisplai": 389, "calibration_curv": 390, "affinitypropag": 391, "agglomerativeclust": 392, "spectralbiclust": 401, "spectralclust": 402, "spectralcoclust": 403, "affinity_propag": 404, "cluster_optics_dbscan": 405, "cluster_optics_xi": 406, "compute_optics_graph": 407, "estimate_bandwidth": 408, "k_mean": 409, "kmeans_plusplu": 410, "mean_shift": 411, "spectral_clust": 412, "ward_tre": 413, "transformedtargetregressor": 415, "make_column_selector": 416, "make_column_transform": 417, "config_context": 418, "ellipticenvelop": 419, "empiricalcovari": 420, "graphicallasso": 421, "graphicallassocv": 422, "mincovdet": 424, "shrunkcovari": 426, "empirical_covari": 427, "graphical_lasso": 428, "ledoit_wolf": 429, "ledoit_wolf_shrinkag": 430, "shrunk_covari": 431, "clear_data_hom": 436, "dump_svmlight_fil": 437, "fetch_20newsgroup": 438, "fetch_20newsgroups_vector": 439, "fetch_california_h": 440, "fetch_covtyp": 441, "fetch_kddcup99": 442, "fetch_lfw_pair": 443, "fetch_lfw_peopl": 444, "fetch_olivetti_fac": 445, "fetch_rcv1": 447, "fetch_species_distribut": 448, "get_data_hom": 449, "load_breast_canc": 450, "load_diabet": 451, "load_digit": 452, "load_fil": 453, "load_iri": 454, "load_linnerud": 455, "load_sample_imag": [456, 457], "load_svmlight_fil": [458, 459], "load_win": 460, "make_biclust": 461, "make_checkerboard": 463, "make_circl": 464, "make_friedman1": 466, "make_friedman2": 467, "make_friedman3": 468, "make_gaussian_quantil": 469, "make_hastie_10_2": 470, "make_low_rank_matrix": 471, "make_moon": 472, "make_multilabel_classif": 473, "make_s_curv": 475, "make_sparse_coded_sign": 476, "make_sparse_spd_matrix": 477, "make_sparse_uncorrel": 478, "make_spd_matrix": 479, "make_swiss_rol": 480, "dictionarylearn": 481, "factoranalysi": 482, "incrementalpca": 484, "latentdirichletalloc": 486, "minibatchdictionarylearn": 487, "sparsecod": 492, "truncatedsvd": 494, "dict_learn": 495, "dict_learning_onlin": 496, "non_negative_factor": 497, "sparse_encod": 498, "quadraticdiscriminantanalysi": 500, "dummyclassifi": 501, "dummyregressor": 502, "adaboostclassifi": 503, "adaboostregressor": 504, "baggingclassifi": 505, "baggingregressor": 506, "extratreesclassifi": 507, "extratreesregressor": 508, "gradientboostingclassifi": 509, "gradientboostingregressor": 510, "histgradientboostingclassifi": 511, "randomforestclassifi": 514, "randomforestregressor": 515, "randomtreesembed": 516, "stackingclassifi": 517, "stackingregressor": 518, "votingregressor": 520, "convergencewarn": 521, "dataconversionwarn": 522, "datadimensionalitywarn": 523, "efficiencywarn": 524, "fitfailedwarn": 525, "inconsistentversionwarn": 526, "notfittederror": 527, "undefinedmetricwarn": 528, "enable_halving_search_cv": 529, "enable_iterative_imput": 530, "patchextractor": 533, "extract_patches_2d": 534, "grid_to_graph": 535, "img_to_graph": 536, "reconstruct_from_patches_2d": 537, "countvector": 538, "tfidftransform": 540, "genericunivariateselect": 542, "rfe": 543, "rfecv": 544, "selectfdr": 545, "selectfpr": 546, "selectfw": 548, "selectkbest": 549, "selectpercentil": 550, "selectormixin": 551, "variancethreshold": 553, "chi2": 554, "f_classif": 555, "f_regress": 556, "mutual_info_classif": 557, "mutual_info_regress": 558, "r_regress": 559, "gaussianprocessclassifi": 560, "gaussianprocessregressor": 561, "compoundkernel": 562, "constantkernel": 563, "dotproduct": 564, "expsinesquar": 565, "exponenti": 566, "matern": 569, "pairwisekernel": 570, "rationalquadrat": 573, "sum": 574, "whitekernel": 575, "get_config": 576, "knnimput": 578, "missingind": 579, "simpleimput": 580, "decisionboundarydisplai": 581, "partialdependencedisplai": 582, "partial_depend": 583, "permutation_import": 584, "isotonicregress": 585, "check_increas": 586, "isotonic_regress": 587, "additivechi2sampl": 588, "nystroem": [589, 923], "rbfsampler": 591, "skewedchi2sampl": 592, "kernelridg": 593, "ardregress": 594, "bayesianridg": 595, "elasticnetcv": 597, "gammaregressor": 598, "larscv": 601, "lassocv": 603, "lassolar": 604, "lassolarscv": 605, "lassolars": 606, "logisticregress": 608, "logisticregressioncv": 609, "multitaskelasticnet": 610, "multitaskelasticnetcv": 611, "multitasklasso": 612, "multitasklassocv": 613, "orthogonalmatchingpursuit": 614, "orthogonalmatchingpursuitcv": 615, "passiveaggressiveclassifi": 616, "passiveaggressiveregressor": 617, "poissonregressor": 619, "ransacregressor": 621, "ridgecv": 623, "ridgeclassifi": 624, "ridgeclassifiercv": 625, "sgdclassifi": 626, "sgdoneclasssvm": 627, "sgdregressor": 628, "theilsenregressor": 629, "enet_path": 631, "lars_path": 632, "lars_path_gram": 633, "lasso_path": 634, "orthogonal_mp": 635, "orthogonal_mp_gram": 636, "ridge_regress": 637, "locallylinearembed": 639, "md": [640, 928], "spectralembed": 641, "locally_linear_embed": 643, "smacof": 644, "spectral_embed": 645, "trustworthi": 646, "detcurvedisplai": 648, "distancemetr": 649, "predictionerrordisplai": 651, "accuracy_scor": 653, "adjusted_mutual_info_scor": 654, "adjusted_rand_scor": 655, "average_precision_scor": 657, "balanced_accuracy_scor": 658, "brier_score_loss": 659, "calinski_harabasz_scor": 660, "check_scor": 661, "class_likelihood_ratio": 662, "classification_report": 663, "contingency_matrix": 664, "pair_confusion_matrix": 665, "cohen_kappa_scor": 666, "completeness_scor": 667, "confusion_matrix": 668, "consensus_scor": 669, "coverage_error": 670, "d2_absolute_error_scor": 671, "d2_pinball_scor": 672, "d2_tweedie_scor": 673, "davies_bouldin_scor": 674, "dcg_score": 675, "det_curv": 676, "explained_variance_scor": 677, "f1_score": 678, "fbeta_scor": 679, "fowlkes_mallows_scor": 680, "get_scor": 681, "get_scorer_nam": 682, "hamming_loss": 683, "hinge_loss": 684, "homogeneity_completeness_v_measur": 685, "homogeneity_scor": 686, "jaccard_scor": 687, "label_ranking_average_precision_scor": 688, "label_ranking_loss": 689, "log_loss": 690, "make_scor": 691, "matthews_corrcoef": 692, "max_error": 693, "mean_absolute_error": 694, "mean_absolute_percentage_error": 695, "mean_gamma_devi": 696, "mean_pinball_loss": 697, "mean_poisson_devi": 698, "mean_squared_error": 699, "mean_squared_log_error": 700, "mean_tweedie_devi": 701, "median_absolute_error": 702, "multilabel_confusion_matrix": 703, "mutual_info_scor": 704, "ndcg_score": 705, "normalized_mutual_info_scor": 706, "additive_chi2_kernel": 707, "chi2_kernel": 708, "cosine_dist": 709, "cosine_similar": 710, "distance_metr": 711, "euclidean_dist": 712, "haversine_dist": 713, "kernel_metr": 714, "laplacian_kernel": 715, "linear_kernel": 716, "manhattan_dist": 717, "nan_euclidean_dist": 718, "paired_cosine_dist": 719, "paired_dist": 720, "paired_euclidean_dist": 721, "paired_manhattan_dist": 722, "pairwise_kernel": 723, "polynomial_kernel": 724, "rbf_kernel": 725, "sigmoid_kernel": 726, "pairwise_dist": 727, "pairwise_distances_argmin": 728, "pairwise_distances_argmin_min": 729, "pairwise_distances_chunk": 730, "precision_recall_curv": 731, "precision_recall_fscore_support": 732, "precision_scor": 733, "r2_score": 734, "rand_scor": 735, "recall_scor": 736, "roc_auc_scor": 737, "roc_curv": 738, "silhouette_sampl": 739, "silhouette_scor": 740, "top_k_accuracy_scor": 741, "v_measure_scor": 742, "zero_one_loss": 743, "bayesiangaussianmixtur": [744, 930], "gaussianmixtur": [745, 930], "groupkfold": 747, "groupshufflesplit": 748, "halvinggridsearchcv": 749, "halvingrandomsearchcv": 750, "kfold": 751, "learningcurvedisplai": 752, "leaveonegroupout": 753, "leaveoneout": 754, "leavepgroupsout": 755, "leavepout": 756, "parametergrid": 757, "parametersampl": 758, "predefinedsplit": 759, "randomizedsearchcv": 760, "repeatedkfold": 761, "repeatedstratifiedkfold": 762, "shufflesplit": 763, "stratifiedkfold": 765, "stratifiedshufflesplit": 766, "timeseriessplit": 767, "check_cv": 768, "cross_val_predict": 769, "learning_curv": 772, "permutation_test_scor": 773, "train_test_split": 774, "validation_curv": 775, "onevsoneclassifi": [776, 932], "onevsrestclassifi": [777, 932], "outputcodeclassifi": [778, 932], "classifierchain": [779, 932], "multioutputclassifi": [780, 932], "multioutputregressor": [781, 932], "regressorchain": [782, 932], "bernoullinb": 783, "categoricalnb": 784, "complementnb": 785, "gaussiannb": 786, "multinomialnb": 787, "balltre": [788, 934], "kdtree": [789, 934], "kneighborsclassifi": 790, "kneighborsregressor": 791, "kneighborstransform": 792, "kerneldens": 793, "localoutlierfactor": 794, "nearestcentroid": 795, "nearestneighbor": 796, "neighborhoodcomponentsanalysi": 797, "radiusneighborsclassifi": 798, "radiusneighborsregressor": 799, "radiusneighborstransform": 800, "kneighbors_graph": 801, "radius_neighbors_graph": 802, "sort_graph_by_row_valu": 803, "bernoullirbm": 804, "mlpregressor": 806, "make_pipelin": 809, "make_union": 810, "binar": [811, 830, 941, 942], "functiontransform": 812, "kernelcenter": 814, "labelbinar": [815, 942], "labelencod": 816, "multilabelbinar": [819, 942], "ordinalencod": 822, "polynomialfeatur": 823, "splinetransform": 827, "add_dummy_featur": 829, "label_binar": 831, "maxabs_scal": 832, "minmax_scal": 833, "power_transform": 835, "quantile_transform": 836, "robust_scal": 837, "gaussianrandomproject": 839, "sparserandomproject": 840, "johnson_lindenstrauss_min_dim": 841, "labelpropag": 842, "labelspread": 843, "selftrainingclassifi": 844, "set_config": 845, "show_vers": 846, "linearsvr": [848, 946], "nusvc": [849, 946], "nusvr": 850, "oneclasssvm": 851, "l1_min_c": 854, "decisiontreeclassifi": 855, "extratreeclassifi": 857, "extratreeregressor": 858, "export_graphviz": 859, "export_text": 860, "plot_tre": 861, "_safe_index": 863, "arrayfunc": 864, "min_po": 864, "as_float_arrai": 865, "assert_all_finit": 866, "check_x_i": 867, "check_arrai": 868, "check_consistent_length": 869, "check_random_st": 870, "check_scalar": 871, "class_weight": [872, 873], "compute_class_weight": 872, "compute_sample_weight": 873, "discoveri": [875, 876, 877], "all_displai": 875, "all_estim": 876, "all_funct": 877, "estimator_check": [878, 879], "check_estim": 878, "parametrize_with_check": 879, "estimator_html_repr": 880, "extmath": [881, 882, 883, 884, 885, 886], "fast_logdet": 882, "randomized_range_find": 883, "randomized_svd": 884, "safe_sparse_dot": 885, "weighted_mod": 886, "gen_batch": 887, "gen_even_slic": 888, "single_source_shortest_path_length": 889, "metaestim": [891, 892], "available_if": 891, "if_delegate_has_method": 892, "is_multilabel": 893, "type_of_target": 894, "unique_label": 895, "murmurhash3_32": 896, "delai": 898, "parallel_backend": 899, "sample_without_replac": 900, "register_parallel_backend": 901, "resampl": 902, "safe_mask": 903, "safe_sqr": 904, "sparsefunc": [906, 907, 908, 909, 910, 911, 912, 981], "incr_mean_variance_axi": 906, "inplace_column_scal": 907, "inplace_csr_column_scal": 908, "inplace_row_scal": 909, "inplace_swap_column": 910, "inplace_swap_row": 911, "mean_variance_axi": 912, "sparsefuncs_fast": [913, 914], "inplace_csr_row_normalize_l1": 913, "inplace_csr_row_normalize_l2": 914, "check_is_fit": 915, "check_memori": 916, "check_symmetr": 917, "column_or_1d": 918, "has_fit_paramet": 919, "exhaust": 920, "min_resourc": 920, "aggress": [920, 927], "analyz": 920, "cv_results_": 920, "brute": [920, 934], "forc": [920, 934], "keep": 921, "mark": 921, "nan": 921, "chi": [923, 929], "skew": 923, "tensor": 923, "sketch": 923, "qda": 925, "omp": 927, "ard": 927, "liblinear": 927, "passiv": 927, "scenario": 927, "trade": 927, "off": 927, "which": 927, "consensu": 927, "median": [927, 931], "huber": 927, "extend": 927, "introduct": [928, 957], "modifi": 928, "hessian": 928, "eigenmap": 928, "tangent": 928, "align": 928, "nonmetr": 928, "barn": 928, "hut": 928, "cosin": 929, "laplacian": 929, "pro": 930, "con": 930, "maxim": 930, "rule": 931, "cohen": 931, "kappa": 931, "ham": 931, "jaccard": 931, "hing": 931, "matthew": 931, "zero": 931, "brier": 931, "discount": 931, "cumul": 931, "gain": 931, "r\u00b2": 931, "absolut": 931, "logarithm": 931, "percentag": 931, "explain": 931, "pinbal": 931, "d\u00b2": 931, "complement": 933, "bernoulli": [933, 936], "unsupervis": [934, 936, 948, 965, 967], "find": 934, "ball": 934, "leaf_siz": 934, "shrunken": 934, "warm_start": 935, "parametr": 936, "up": 937, "ellipt": 937, "envelop": 937, "isol": 937, "ic": 938, "outlin": 939, "mislead": 939, "strongli": 939, "rang": 941, "whiten": 941, "bin": 941, "lemma": 943, "unlabel": 944, "entri": 944, "id3": 947, "c4": 947, "5": [947, 972], "c5": 947, "cart": 947, "welcom": 949, "talk": 950, "scientif": [950, 960], "framework": 951, "domain": 951, "translat": 951, "roadmap": 952, "thi": 952, "statement": 952, "2018": 952, "architectur": 952, "goal": 952, "subpackag": 952, "mail": 954, "user": [954, 968], "gitter": 954, "who": 955, "j": 955, "morgan": 955, "spotifi": 955, "inria": 955, "betawork": 955, "hug": 955, "evernot": 955, "t\u00e9l\u00e9com": 955, "paristech": 955, "book": 955, "com": 955, "aweb": 955, "yhat": 955, "rangespan": 955, "birchbox": 955, "bestofmedia": 955, "phimeca": 955, "howaboutw": 955, "peerindex": 955, "datarobot": 955, "okcupid": 955, "love": 955, "publica": 955, "machinali": 955, "solido": 955, "infonea": 955, "dataiku": 955, "otto": 955, "zopa": 955, "mar": 955, "bnp": 955, "pariba": 955, "cardif": 955, "section": 957, "cast": 957, "updat": [957, 982], "right": 959, "put": 962, "open": 962, "ship": 963, "would": 963, "high": 964, "solv": [964, 965], "vocabulari": 964, "curs": 964, "iris": 964, "same": 964, "seek": 965, "constrain": 965, "inverse_transform": 965, "setup": 966, "token": 966, "occurr": 966, "languag": 966, "identif": 966, "sentiment": 966, "movi": 966, "cli": 966, "where": 966, "here": 966, "12": 972, "changelog": [972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "11": 972, "9": 972, "8": 972, "7": 972, "6": [972, 978], "modul": [972, 980, 981, 987, 988], "misc": 972, "4": [972, 980], "earlier": 972, "13": 973, "14": 974, "15": 975, "16": 976, "17": 977, "18": 978, "last": 978, "19": 979, "21": 981, "legend": [981, 982, 983, 984, 985, 986, 987, 988], "post1": 982, "websit": 982, "clear": 982, "public": 982, "futurewarn": 982, "enforc": [983, 985]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [972, "authors"], [972, "id20"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [351, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [148, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [98, "concluding-remarks"], [203, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [23, "references"], [25, "references"], [74, "references"], [102, "references"], [156, "references"], [167, null], [235, null], [266, "references"], [332, null], [332, null], [332, null], [334, null], [334, null], [334, null], [334, null], [334, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [369, null], [369, null], [369, null], [369, null], [369, null], [369, null], [369, null], [369, null], [370, null], [372, "references"], [921, "references"], [921, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [938, null], [941, null], [944, null], [944, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [46, "load-the-data"], [112, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [168, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [45, "plot-results"], [71, "plot-results"], [86, "plot-results"], [87, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [323, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [298, "visualization"], [361, "visualization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[13, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[14, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Libsvm GUI": [[15, "libsvm-gui"]], "Wikipedia principal eigenvector": [[16, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[16, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[16, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[16, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[16, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[16, "computing-centrality-scores"]], "Biclustering": [[17, "biclustering"], [148, "biclustering"], [333, "biclustering"], [359, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[18, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[19, "a-demo-of-the-spectral-biclustering-algorithm"]], "A demo of the Spectral Co-Clustering algorithm": [[20, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[21, "calibration"], [148, "calibration"]], "Probability calibration of classifiers": [[22, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[22, "generate-synthetic-dataset"], [158, "generate-synthetic-dataset"], [158, "id1"]], "Gaussian Naive-Bayes": [[22, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[22, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[23, "probability-calibration-curves"]], "Dataset": [[23, "dataset"], [25, "dataset"], [168, "dataset"], [241, "dataset"]], "Calibration curves": [[23, "calibration-curves"], [25, "calibration-curves"], [360, "calibration-curves"]], "Gaussian Naive Bayes": [[23, "gaussian-naive-bayes"], [933, "gaussian-naive-bayes"]], "Linear support vector classifier": [[23, "linear-support-vector-classifier"]], "Summary": [[23, "summary"], [312, "summary"]], "Probability Calibration for 3-class classification": [[24, "probability-calibration-for-3-class-classification"]], "Data": [[24, "data"]], "Fitting and calibration": [[24, "fitting-and-calibration"]], "Compare probabilities": [[24, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[25, "comparison-of-calibration-of-classifiers"]], "Classification": [[26, "classification"], [29, "classification"], [143, "classification"], [148, "classification"], [369, "classification"], [369, "id18"], [927, "classification"], [934, "id4"], [935, "classification"], [945, "classification"], [946, "classification"], [947, "classification"], [964, "classification"]], "Plot classification probability": [[27, "plot-classification-probability"]], "Classifier comparison": [[28, "classifier-comparison"]], "Recognizing hand-written digits": [[29, "recognizing-hand-written-digits"]], "Digits dataset": [[29, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[30, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[31, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Colormap": [[31, "colormap"]], "Datasets generation functions": [[31, "datasets-generation-functions"]], "Plot functions": [[31, "plot-functions"]], "Plot": [[31, "plot"], [163, "plot"]], "Clustering": [[32, "clustering"], [148, "clustering"], [362, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[33, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[33, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[33, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[33, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[34, "demo-of-affinity-propagation-clustering-algorithm"]], "Generate sample data": [[34, "generate-sample-data"], [58, "generate-sample-data"], [71, "generate-sample-data"], [86, "generate-sample-data"], [87, "generate-sample-data"], [129, "generate-sample-data"], [212, "generate-sample-data"], [248, "generate-sample-data"], [265, "generate-sample-data"], [305, "generate-sample-data"]], "Compute Affinity Propagation": [[34, "compute-affinity-propagation"]], "Plot result": [[34, "plot-result"], [58, "plot-result"], [62, "plot-result"], [62, "id2"]], "Agglomerative clustering with and without structure": [[35, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[36, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[37, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[38, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[39, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[40, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[41, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[42, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[43, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[43, "generate-data"], [62, "generate-data"], [73, "generate-data"], [173, "generate-data"], [271, "generate-data"]], "Define structure of the data": [[43, "define-structure-of-the-data"]], "Compute clustering": [[43, "compute-clustering"], [62, "compute-clustering"], [62, "id1"]], "Plot the results on an image": [[43, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[44, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[45, "demo-of-dbscan-clustering-algorithm"]], "Data generation": [[45, "data-generation"], [52, "data-generation"], [114, "data-generation"], [132, "data-generation"], [141, "data-generation"], [226, "data-generation"], [287, "data-generation"]], "Compute DBSCAN": [[45, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[46, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[46, "learn-the-dictionary-of-images"]], "Plot the results": [[46, "plot-the-results"], [75, "plot-the-results"], [121, "plot-the-results"], [147, "plot-the-results"]], "Feature agglomeration": [[47, "feature-agglomeration"], [948, "feature-agglomeration"], [965, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[48, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[49, "vector-quantization-example"]], "Original image": [[49, "original-image"]], "Compression via vector quantization": [[49, "compression-via-vector-quantization"]], "Encoding strategy": [[49, "encoding-strategy"]], "Memory footprint": [[49, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[50, "feature-agglomeration-vs-univariate-selection"]], "Inductive Clustering": [[51, "inductive-clustering"]], "Demonstration of k-means assumptions": [[52, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[52, "fit-models-and-plot-results"]], "Possible solutions": [[52, "possible-solutions"]], "Final remarks": [[52, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[53, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[53, "load-the-dataset"]], "Define our evaluation benchmark": [[53, "define-our-evaluation-benchmark"]], "Run the benchmark": [[53, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[53, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[54, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[55, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[56, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[57, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[58, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[58, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[59, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[59, "generate-the-data"], [61, "generate-the-data"], [75, "generate-the-data"]], "Compute clustering with KMeans": [[59, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[59, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[59, "establishing-parity-between-clusters"]], "Plotting the results": [[59, "plotting-the-results"], [98, "plotting-the-results"], [100, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[60, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[61, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[61, "plotting-four-circles"]], "Plotting two circles": [[61, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[62, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[62, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[63, "pipelines-and-composite-estimators"], [148, "pipelines-and-composite-estimators"], [363, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[64, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[64, "newsgroups-dataset"]], "Creating transformers": [[64, "creating-transformers"]], "Classification pipeline": [[64, "classification-pipeline"]], "Column Transformer with Mixed Types": [[65, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[66, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[66, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[66, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[67, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[68, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[69, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[69, "synthetic-example"]], "Real-world data set": [[69, "real-world-data-set"]], "Covariance estimation": [[70, "covariance-estimation"], [148, "covariance-estimation"], [364, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[71, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[71, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[71, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[72, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[73, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[73, null], [153, null], [240, null], [241, null], [331, null], [332, null], [359, null], [359, null], [359, null], [360, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [364, null], [364, null], [364, null], [364, null], [366, null], [366, null], [367, null], [367, null], [367, null], [367, null], [367, null], [367, null], [367, null], [367, null], [370, null], [371, null], [920, null], [920, null], [923, null], [924, null], [925, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [929, null], [929, null], [931, null], [931, null], [931, null], [931, null], [931, null], [931, null], [931, null], [931, null], [932, null], [932, null], [932, null], [933, null], [933, null], [933, null], [934, null], [934, null], [934, null], [935, null], [936, null], [937, null], [937, null], [937, null], [937, null], [939, null], [941, null], [941, null], [943, null], [943, null], [943, null], [945, null], [945, null], [946, null], [947, null], [947, null]], "Comparison of results": [[73, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[74, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[74, "minimum-covariance-determinant-estimator"]], "Evaluation": [[74, "evaluation"], [271, "evaluation"]], "Sparse inverse covariance estimation": [[75, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[75, "estimate-the-covariance"]], "Cross decomposition": [[76, "cross-decomposition"], [148, "cross-decomposition"], [365, "cross-decomposition"]], "Compare cross decomposition methods": [[77, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[77, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[77, "canonical-symmetric-pls"]], "Transform data": [[77, "transform-data"]], "Scatter plot of scores": [[77, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[77, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[77, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[77, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[78, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[78, "the-data"]], "Projection on one component and predictive power": [[78, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[79, "dataset-examples"], [148, "dataset-examples"]], "The Digit Dataset": [[80, "the-digit-dataset"]], "The Iris Dataset": [[81, "the-iris-dataset"]], "Plot randomly generated classification dataset": [[82, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[83, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[84, "decomposition"], [85, "decomposition"], [148, "decomposition"]], "Faces dataset decompositions": [[85, "faces-dataset-decompositions"]], "Dataset preparation": [[85, "dataset-preparation"], [199, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[85, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[85, "non-negative-components-nmf"]], "Independent components - FastICA": [[85, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[85, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[85, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[85, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[85, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[85, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[85, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[85, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[85, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[86, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[86, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[87, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[88, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[88, "generate-distorted-image"]], "Display the distorted image": [[88, "display-the-distorted-image"]], "Extract reference patches": [[88, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[88, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[88, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[89, "incremental-pca"], [367, "incremental-pca"]], "Kernel PCA": [[90, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[90, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[90, "projecting-into-the-original-feature-space"]], "Principal components analysis (PCA)": [[91, "principal-components-analysis-pca"]], "Create the data": [[91, "create-the-data"], [93, "create-the-data"]], "Plot the figures": [[91, "plot-the-figures"]], "PCA example with Iris Data-set": [[92, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[93, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Fit the models": [[93, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[94, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[95, "sparse-coding-with-a-precomputed-dictionary"], [367, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[96, "factor-analysis-with-rotation-to-visualize-patterns"]], "Ensemble methods": [[97, "ensemble-methods"], [148, "ensemble-methods"], [369, "ensemble-methods"]], "Discrete versus Real AdaBoost": [[98, "discrete-versus-real-adaboost"]], "Preparing the data and baseline models": [[98, "preparing-the-data-and-baseline-models"]], "Adaboost with discrete SAMME and real SAMME.R": [[98, "adaboost-with-discrete-samme-and-real-samme-r"]], "Multi-class AdaBoosted Decision Trees": [[99, "multi-class-adaboosted-decision-trees"]], "Decision Tree Regression with AdaBoost": [[100, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[100, "preparing-the-data"], [156, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[100, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[101, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[102, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[103, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[104, "feature-transformations-with-ensembles-of-trees"]], "Feature importances with a forest of trees": [[105, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[105, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[105, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[105, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[106, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[106, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[106, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[107, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[108, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[108, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[108, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[108, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[108, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[108, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[108, "model-comparison"]], "Limiting the number of splits": [[108, "limiting-the-number-of-splits"]], "Early stopping of Gradient Boosting": [[109, "early-stopping-of-gradient-boosting"]], "Compare scores with and without early stopping": [[109, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[109, "compare-fit-times-with-and-without-early-stopping"]], "Gradient Boosting Out-of-Bag estimates": [[110, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[111, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[111, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[111, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[111, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[111, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[112, "gradient-boosting-regression"]], "Data preprocessing": [[112, "data-preprocessing"]], "Fit regression model": [[112, "fit-regression-model"], [265, "fit-regression-model"], [305, "fit-regression-model"]], "Plot training deviance": [[112, "plot-training-deviance"]], "Plot feature importance": [[112, "plot-feature-importance"]], "Gradient Boosting regularization": [[113, "gradient-boosting-regularization"]], "IsolationForest example": [[114, "isolationforest-example"]], "Training of the model": [[114, "training-of-the-model"]], "Plot discrete decision boundary": [[114, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[114, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[115, "monotonic-constraints"], [369, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[115, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[116, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[117, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[118, "combine-predictors-using-stacking"]], "Download the dataset": [[118, "download-the-dataset"]], "Make pipeline to preprocess the data": [[118, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[118, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[118, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[119, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[120, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[121, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[121, "training-classifiers"]], "Making predictions": [[121, "making-predictions"]], "Tutorial exercises": [[122, "tutorial-exercises"], [148, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[123, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[123, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[123, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[123, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Cross-validation on Digits Dataset Exercise": [[124, "cross-validation-on-digits-dataset-exercise"]], "Digits Classification Exercise": [[125, "digits-classification-exercise"]], "SVM Exercise": [[126, "svm-exercise"]], "Feature Selection": [[127, "feature-selection"], [148, "feature-selection"]], "Comparison of F-test and mutual information": [[128, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[129, "univariate-feature-selection"]], "Univariate feature selection": [[129, "id1"], [371, "univariate-feature-selection"]], "Compare with SVMs": [[129, "compare-with-svms"]], "Pipeline ANOVA SVM": [[130, "pipeline-anova-svm"]], "Recursive feature elimination": [[131, "recursive-feature-elimination"], [371, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[132, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[132, "model-training-and-selection"], [226, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[132, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[133, "model-based-and-sequential-feature-selection"]], "Loading the data": [[133, "loading-the-data"]], "Feature importance from coefficients": [[133, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[133, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[133, "selecting-features-with-sequential-feature-selection"]], "Discussion": [[133, "discussion"]], "Gaussian Process for Machine Learning": [[134, "gaussian-process-for-machine-learning"], [148, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[135, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[135, "generating-a-dataset"]], "Limitations of a simple linear model": [[135, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[135, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[135, "kernel-ridge"]], "Gaussian process regression": [[135, "gaussian-process-regression"]], "Final conclusion": [[135, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[136, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[137, "gaussian-process-classification-gpc-on-iris-dataset"], [372, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[138, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[139, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Gaussian process regression (GPR) on Mauna Loa CO2 data": [[140, "gaussian-process-regression-gpr-on-mauna-loa-co2-data"]], "Build the dataset": [[140, "build-the-dataset"]], "Design the proper kernel": [[140, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[140, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[140, "interpretation-of-kernel-hyperparameters"]], "Gaussian process regression (GPR) with noise-level estimation": [[141, "gaussian-process-regression-gpr-with-noise-level-estimation"]], "Optimisation of kernel hyperparameters in GPR": [[141, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[142, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[142, "dataset-generation"], [181, "dataset-generation"]], "Example with noise-free target": [[142, "example-with-noise-free-target"]], "Example with noisy targets": [[142, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[143, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[143, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[143, "regression"], [369, "regression"], [369, "id17"], [927, "regression"], [935, "regression"], [945, "regression"], [946, "regression"], [947, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[144, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[144, "helper-function"]], "Dataset and Gaussian process generation": [[144, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[144, "kernel-cookbook"]], "Radial Basis Function kernel": [[144, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[144, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[144, "exp-sine-squared-kernel"], [372, "exp-sine-squared-kernel"]], "Dot-product kernel": [[144, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[144, "matern-kernel"], [372, "matern-kernel"]], "Missing Value Imputation": [[145, "missing-value-imputation"], [148, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[146, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[147, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[147, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[147, "impute-the-missing-data-and-score"]], "Missing information": [[147, "missing-information"]], "Estimate the score": [[147, "estimate-the-score"]], "Replace missing values by 0": [[147, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[147, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[147, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[147, "iterative-imputation-of-the-missing-values"]], "Examples": [[148, "examples"], [325, "examples"], [332, null], [332, "examples"], [366, null], [366, null], [371, null], [371, null], [944, null], [944, null], [948, null], [948, null], [948, null], [972, "examples"]], "Release Highlights": [[148, "release-highlights"], [279, "release-highlights"]], "Decision Trees": [[148, "decision-trees"], [313, "decision-trees"], [947, "decision-trees"]], "Gaussian Mixture Models": [[148, "gaussian-mixture-models"], [220, "gaussian-mixture-models"]], "Generalized Linear Models": [[148, "generalized-linear-models"], [157, "generalized-linear-models"], [927, "generalized-linear-models"]], "Inspection": [[148, "inspection"], [149, "inspection"], [352, "inspection"]], "Kernel Approximation": [[148, "kernel-approximation"], [155, "kernel-approximation"], [923, "kernel-approximation"]], "Manifold learning": [[148, "manifold-learning"], [198, "manifold-learning"], [928, "manifold-learning"]], "Miscellaneous": [[148, "miscellaneous"], [205, "miscellaneous"], [361, "miscellaneous"], [980, "miscellaneous"], [980, "id40"], [981, "miscellaneous"], [982, "miscellaneous"], [983, "miscellaneous"], [983, "id13"], [984, "miscellaneous"], [985, "miscellaneous"]], "Model Selection": [[148, "model-selection"], [228, "model-selection"]], "Multioutput methods": [[148, "multioutput-methods"], [251, "multioutput-methods"]], "Nearest Neighbors": [[148, "nearest-neighbors"], [254, "nearest-neighbors"], [934, "nearest-neighbors"]], "Neural Networks": [[148, "neural-networks"], [267, "neural-networks"]], "Preprocessing": [[148, "preprocessing"], [272, "preprocessing"]], "Semi Supervised Classification": [[148, "semi-supervised-classification"], [286, "semi-supervised-classification"]], "Support Vector Machines": [[148, "support-vector-machines"], [293, "support-vector-machines"], [946, "support-vector-machines"]], "Working with text documents": [[148, "working-with-text-documents"], [309, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[150, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[150, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[150, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[150, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[150, "income-prediction-with-partial-observations"]], "Lessons learned": [[150, "lessons-learned"], [151, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[151, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[151, "the-dataset-wages"]], "The machine-learning pipeline": [[151, "the-machine-learning-pipeline"]], "Processing the dataset": [[151, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[151, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[151, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[151, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[151, "preprocessing-numerical-variables"]], "Linear models with regularization": [[151, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[151, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[151, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[152, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[152, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[152, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[152, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[152, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[152, "way-partial-dependence-with-different-models"]], "2D interaction plots": [[152, "d-interaction-plots"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[153, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[153, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[153, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[153, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[154, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[154, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[154, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[156, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[156, "partitioning-the-data"]], "Feature normalization": [[156, "feature-normalization"]], "Establishing a baseline model": [[156, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[156, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[156, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[156, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[158, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[158, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[158, "fit-the-regressors"], [158, "id2"]], "Plot the true and estimated coefficients": [[158, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[158, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[158, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[158, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[159, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[159, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[159, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[159, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[160, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[161, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[162, "logistic-regression-3-class-classifier"]], "Lasso and Elastic Net for Sparse Signals": [[163, "lasso-and-elastic-net-for-sparse-signals"]], "Data Generation": [[163, "data-generation"]], "Lasso": [[163, "lasso"], [927, "lasso"]], "ElasticNet": [[163, "elasticnet"]], "Lasso and Elastic Net": [[164, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[165, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[165, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[165, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[166, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[167, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[168, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[168, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[168, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[168, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[168, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[168, "summary-of-cross-validation-approach"]], "Logistic function": [[169, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[170, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[171, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[172, "regularization-path-of-l1-logistic-regression"]], "Load data": [[172, "load-data"]], "Compute regularization path": [[172, "compute-regularization-path"]], "Plot regularization path": [[172, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[173, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[173, "fit-models"]], "Plot support and time series": [[173, "plot-support-and-time-series"]], "Non-negative least squares": [[174, "non-negative-least-squares"]], "Linear Regression Example": [[175, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[176, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[177, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[178, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[179, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[179, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[179, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[179, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[179, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[179, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[179, "evaluation-of-the-ranking-power"]], "Main takeaways": [[179, "main-takeaways"]], "Polynomial and Spline interpolation": [[180, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[180, "periodic-splines"]], "Quantile regression": [[181, "quantile-regression"]], "Fitting a QuantileRegressor": [[181, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[181, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[182, "robust-linear-model-estimation-using-ransac"]], "Plot Ridge coefficients as a function of the L2 regularization": [[183, "plot-ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Plot Ridge coefficients as a function of the regularization": [[184, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[184, "compute-paths"]], "Display results": [[184, "display-results"]], "Robust linear estimator fitting": [[185, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[186, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[187, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[188, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[189, "sgd-convex-loss-functions"]], "SGD: Penalties": [[190, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[191, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[192, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[193, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[194, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[195, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[196, "theil-sen-regression"]], "Outliers only in the y direction": [[196, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[196, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[197, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[197, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[197, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[197, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[197, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[199, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[199, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[199, "locally-linear-embeddings"]], "Isomap Embedding": [[199, "isomap-embedding"]], "Multidimensional scaling": [[199, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[199, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[199, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[200, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[200, "load-digits-dataset"]], "Helper function to plot embedding": [[200, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[200, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[201, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[202, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[203, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[203, "swiss-roll"]], "Swiss-Hole": [[203, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[204, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[206, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[207, "visualizations-with-display-objects"]], "Load Data and train model": [[207, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[207, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[207, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[207, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[207, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[208, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[208, "compact-text-representation"]], "Rich HTML representation": [[208, "rich-html-representation"]], "Isotonic Regression": [[209, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[210, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[210, "theoretical-bounds"]], "Empirical validation": [[210, "empirical-validation"]], "Remarks": [[210, "remarks"]], "Explicit feature map approximation for RBF kernels": [[211, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[211, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[211, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[211, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[212, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[212, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[212, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[212, "look-at-the-results"], [305, "look-at-the-results"]], "Visualize training and prediction times": [[212, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[212, "visualize-the-learning-curves"]], "Multilabel classification": [[213, "multilabel-classification"], [932, "multilabel-classification"]], "Face completion with a multi-output estimators": [[214, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[215, "evaluation-of-outlier-detection-estimators"]], "Define a data preprocessing function": [[215, "define-a-data-preprocessing-function"]], "Define an outlier prediction function": [[215, "define-an-outlier-prediction-function"]], "Plot and interpret results": [[215, "plot-and-interpret-results"]], "Advanced Plotting With Partial Dependence": [[216, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[216, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[216, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[216, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[216, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[217, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[217, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[217, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[217, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[217, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[217, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[218, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[218, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[218, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[218, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[219, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[221, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[222, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[223, "gmm-covariances"]], "GMM Initialization Methods": [[224, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[225, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[226, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[226, "plot-the-bic-scores"]], "Plot the best model": [[226, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[227, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[229, "confusion-matrix"], [931, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[230, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[230, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[230, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[230, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[231, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[232, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[232, "generate-synthetic-data"]], "Define the classifiers": [[232, "define-the-classifiers"]], "Plot ROC and DET curves": [[232, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[233, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[233, "the-dataset"]], "Define our grid-search strategy": [[233, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[233, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[234, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[235, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[235, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[235, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[235, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[235, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[235, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[235, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[236, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[236, "data-loading"]], "Pipeline with hyperparameter tuning": [[236, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[237, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[237, "learning-curve"]], "Complexity analysis": [[237, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[238, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[238, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[238, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[238, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[239, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[239, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[239, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[240, "nested-versus-non-nested-cross-validation"]], "See Also:": [[240, null], [363, null]], "Test with permutations the significance of a classification score": [[241, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[241, "permutation-test-score"], [366, "permutation-test-score"]], "Original data": [[241, "original-data"], [273, "original-data"]], "Random data": [[241, "random-data"]], "Precision-Recall": [[242, "precision-recall"]], "In binary classification settings": [[242, "in-binary-classification-settings"]], "Dataset and model": [[242, "dataset-and-model"]], "Plot the Precision-Recall curve": [[242, "plot-the-precision-recall-curve"]], "In multi-label settings": [[242, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[242, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[242, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[242, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[242, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[243, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[244, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[244, "load-and-prepare-data"], [245, "load-and-prepare-data"], [278, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[244, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[244, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[244, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[244, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[244, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[244, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[244, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[244, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[245, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[245, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[246, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[247, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[247, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[248, "train-error-vs-test-error"]], "Compute train and test errors": [[248, "compute-train-and-test-errors"]], "Plot results functions": [[248, "plot-results-functions"]], "Underfitting vs. Overfitting": [[249, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[250, "plotting-validation-curves"]], "Classifier Chain": [[252, "classifier-chain"]], "Approximate nearest neighbors in TSNE": [[253, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[255, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[256, "nearest-neighbors-classification"], [934, "nearest-neighbors-classification"]], "Kernel Density Estimation": [[257, "kernel-density-estimation"], [368, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[258, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[259, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[260, "outlier-detection-with-local-outlier-factor-lof"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[261, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[262, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[263, "neighborhood-components-analysis-illustration"]], "Original points": [[263, "original-points"]], "Learning an embedding": [[263, "learning-an-embedding"]], "Nearest Centroid Classification": [[264, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[265, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[266, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[268, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[269, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[270, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[271, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[271, "models-definition"]], "Training": [[271, "training"], [934, "training"]], "Plotting": [[271, "plotting"], [361, "plotting"], [361, "id7"], [361, "id9"]], "Compare the effect of different scalers on data with outliers": [[273, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[273, "standardscaler"]], "MinMaxScaler": [[273, "minmaxscaler"]], "MaxAbsScaler": [[273, "maxabsscaler"]], "RobustScaler": [[273, "robustscaler"]], "PowerTransformer": [[273, "powertransformer"]], "QuantileTransformer (uniform output)": [[273, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[273, "quantiletransformer-gaussian-output"]], "Normalizer": [[273, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[274, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[275, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[276, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[277, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[278, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[278, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[278, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[278, "effect-of-rescaling-on-model-s-performance"]], "Release Highlights for scikit-learn 0.22": [[280, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[280, "new-plotting-api"]], "Stacking Classifier and Regressor": [[280, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[280, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[280, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[280, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[280, "knn-based-imputation"]], "Tree pruning": [[280, "tree-pruning"]], "Retrieve dataframes from OpenML": [[280, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[280, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[280, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[281, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[281, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[281, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[281, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[281, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[281, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[282, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[282, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[282, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[282, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[282, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[282, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[282, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[282, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[282, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[282, "new-documentation-improvements"], [283, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[283, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[283, "keyword-and-positional-arguments"]], "Spline Transformers": [[283, "spline-transformers"]], "Quantile Regressor": [[283, "quantile-regressor"]], "Feature Names Support": [[283, "feature-names-support"]], "A more flexible plotting API": [[283, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[283, "online-one-class-svm"], [945, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[283, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[284, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[284, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[284, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[284, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[284, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[284, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[284, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[285, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[285, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[285, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[285, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[285, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[285, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[285, "improved-efficiency-of-many-estimators"]], "Label Propagation digits: Demonstrating performance": [[287, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[287, "semi-supervised-learning"], [944, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[287, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[288, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[289, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[290, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[291, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[292, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[294, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[295, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[296, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[297, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[298, "rbf-svm-parameters"]], "Load and prepare data set": [[298, "load-and-prepare-data-set"]], "Train classifiers": [[298, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[299, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[300, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[301, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[301, "load-some-data-to-play-with"]], "Create the pipeline": [[301, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[301, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "SVM-Kernels": [[302, "svm-kernels"]], "SVM Margins Example": [[303, "svm-margins-example"]], "Non-linear SVM": [[304, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[305, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[306, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[306, "l1-penalty-case"]], "L2-penalty case": [[306, "l2-penalty-case"]], "SVM Tie Breaking Example": [[307, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[308, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[310, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[310, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[310, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[310, "model-without-metadata-stripping"]], "Model with metadata stripping": [[310, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[310, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[310, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[311, "clustering-text-documents-using-k-means"]], "Loading text data": [[311, "loading-text-data"]], "Quantifying the quality of clustering results": [[311, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[311, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[311, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[311, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[311, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[311, "top-terms-per-cluster"]], "HashingVectorizer": [[311, "hashingvectorizer"]], "Clustering evaluation summary": [[311, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[312, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[312, "load-data"]], "Define preprocessing functions": [[312, "define-preprocessing-functions"]], "DictVectorizer": [[312, "dictvectorizer"]], "FeatureHasher": [[312, "featurehasher"]], "Comparison with special purpose text vectorizers": [[312, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[312, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[314, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[314, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[314, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[315, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[316, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[317, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[318, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[318, "train-tree-classifier"]], "Tree structure": [[318, "tree-structure"]], "Decision path": [[318, "decision-path"]], "Common pitfalls and recommended practices": [[319, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[319, "inconsistent-preprocessing"]], "Data leakage": [[319, "data-leakage"]], "Data leakage during pre-processing": [[319, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[319, "how-to-avoid-data-leakage"]], "Controlling randomness": [[319, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[319, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Estimators": [[319, "estimators"], [319, "id2"], [339, "estimators"], [361, "estimators"]], "CV splitters": [[319, "cv-splitters"], [319, "id3"]], "Common pitfalls and subtleties": [[319, "common-pitfalls-and-subtleties"]], "General recommendations": [[319, "general-recommendations"]], "Getting reproducible results across multiple executions": [[319, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[319, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[322, "computing-with-scikit-learn"]], "Computational Performance": [[323, "computational-performance"]], "Bulk versus Atomic mode": [[323, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[323, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[323, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[323, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[323, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[323, "feature-extraction-latency"]], "Prediction Throughput": [[323, "prediction-throughput"]], "Tips and Tricks": [[323, "tips-and-tricks"]], "Linear algebra libraries": [[323, "linear-algebra-libraries"]], "Limiting Working Memory": [[323, "limiting-working-memory"]], "Model Compression": [[323, "model-compression"]], "Model Reshaping": [[323, "model-reshaping"]], "Links": [[323, "links"]], "Parallelism, resource management, and configuration": [[324, "parallelism-resource-management-and-configuration"]], "Parallelism": [[324, "parallelism"], [920, "parallelism"]], "Higher-level parallelism with joblib": [[324, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[324, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[324, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[324, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[324, "configuration-switches"]], "Python API": [[324, "python-api"]], "Environment variables": [[324, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[324, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[324, "sklearn-working-memory"]], "SKLEARN_SEED": [[324, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[324, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[324, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[324, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[324, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[324, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[324, "sklearn-pairwise-dist-chunk-size"]], "Strategies to scale computationally: bigger data": [[325, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[325, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[325, "streaming-instances"]], "Extracting features": [[325, "extracting-features"]], "Incremental learning": [[325, "incremental-learning"]], "Notes": [[325, "notes"], [363, "notes"], [927, "notes"]], "Table Of Contents": [[326, "table-of-contents"]], "Dataset transformations": [[329, "dataset-transformations"]], "Dataset loading utilities": [[330, "dataset-loading-utilities"], [342, "dataset-loading-utilities"]], "Loading other datasets": [[331, "loading-other-datasets"]], "Sample images": [[331, "sample-images"]], "Examples:": [[331, null], [352, null], [359, null], [359, null], [360, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [363, null], [363, null], [363, null], [363, null], [363, null], [364, null], [364, null], [364, null], [364, null], [364, null], [364, null], [365, null], [367, null], [367, null], [367, null], [367, null], [367, null], [367, null], [367, null], [367, null], [367, null], [367, null], [367, null], [367, null], [368, null], [369, null], [369, null], [369, null], [369, null], [369, null], [369, null], [369, null], [369, null], [369, null], [369, null], [369, null], [369, null], [371, null], [371, null], [371, null], [371, null], [920, null], [920, null], [920, null], [923, null], [923, null], [925, null], [925, null], [925, null], [926, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [927, null], [928, null], [930, null], [930, null], [930, null], [930, null], [931, null], [931, null], [931, null], [931, null], [931, null], [932, null], [934, null], [934, null], [934, null], [934, null], [934, null], [935, null], [935, null], [936, null], [937, null], [937, null], [937, null], [937, null], [937, null], [937, null], [938, null], [939, null], [941, null], [941, null], [945, null], [945, null], [946, null], [946, null], [946, null], [946, null], [946, null], [946, null], [947, null], [947, null], [947, null], [947, null], [969, null]], "Datasets in svmlight / libsvm format": [[331, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[331, null]], "Downloading datasets from the openml.org repository": [[331, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[331, "dataset-versions"]], "ARFF parser": [[331, "arff-parser"]], "Loading from external datasets": [[331, "loading-from-external-datasets"], [957, null]], "Real world datasets": [[332, "real-world-datasets"]], "The Olivetti faces dataset": [[332, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[332, "the-20-newsgroups-text-dataset"]], "Usage": [[332, "usage"], [332, "id2"], [360, "usage"], [363, "usage"], [363, "id1"], [369, "usage"], [369, "id26"], [369, "id31"], [369, "id32"], [369, "id34"], [927, "usage"]], "Converting text to vectors": [[332, "converting-text-to-vectors"]], "Filtering text for more realistic training": [[332, "filtering-text-for-more-realistic-training"]], "Data Considerations": [[332, null]], "Recommendation": [[332, null]], "The Labeled Faces in the Wild face recognition dataset": [[332, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[332, "forest-covertypes"]], "RCV1 dataset": [[332, "rcv1-dataset"]], "Kddcup 99 dataset": [[332, "kddcup-99-dataset"]], "California Housing dataset": [[332, "california-housing-dataset"]], "Generated datasets": [[333, "generated-datasets"]], "Generators for classification and clustering": [[333, "generators-for-classification-and-clustering"]], "Single label": [[333, "single-label"]], "Multilabel": [[333, "multilabel"]], "Generators for regression": [[333, "generators-for-regression"]], "Generators for manifold learning": [[333, "generators-for-manifold-learning"]], "Generators for decomposition": [[333, "generators-for-decomposition"]], "Toy datasets": [[334, "toy-datasets"]], "Iris plants dataset": [[334, "iris-plants-dataset"]], "Diabetes dataset": [[334, "diabetes-dataset"], [964, null]], "Optical recognition of handwritten digits dataset": [[334, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[334, "linnerrud-dataset"]], "Wine recognition dataset": [[334, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[334, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[335, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[335, "installing-nightly-builds"]], "Building from source": [[335, "building-from-source"]], "Dependencies": [[335, "dependencies"]], "Runtime dependencies": [[335, "runtime-dependencies"]], "Build dependencies": [[335, "build-dependencies"]], "Test dependencies": [[335, "test-dependencies"]], "Building a specific version from a tag": [[335, "building-a-specific-version-from-a-tag"]], "Editable mode": [[335, "editable-mode"]], "Platform-specific instructions": [[335, "platform-specific-instructions"]], "Windows": [[335, "windows"]], "macOS": [[335, "macos"]], "macOS compilers from conda-forge": [[335, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[335, "macos-compilers-from-homebrew"]], "Linux": [[335, "linux"]], "Linux compilers from the system": [[335, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[335, "linux-compilers-from-conda-forge"]], "FreeBSD": [[335, "freebsd"]], "Alternative compilers": [[335, "alternative-compilers"]], "Parallel builds": [[335, "parallel-builds"]], "Bug triaging and issue curation": [[336, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[336, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[336, null]], "Working on PRs to help review": [[336, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[336, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[336, null]], "A typical workflow for triaging issues": [[336, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[337, "contributing"], [348, "contributing"]], "Our community, our values": [[337, null]], "Ways to contribute": [[337, "ways-to-contribute"]], "Contributing to related projects": [[337, null]], "Submitting a bug report or a feature request": [[337, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[337, "how-to-make-a-good-bug-report"]], "Contributing code": [[337, "contributing-code"]], "Video resources": [[337, "video-resources"]], "How to contribute": [[337, "how-to-contribute"]], "Learning git:": [[337, null]], "Pull request checklist": [[337, "pull-request-checklist"]], "Continuous Integration (CI)": [[337, "continuous-integration-ci"]], "Stalled pull requests": [[337, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[337, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[337, "issues-for-new-contributors"]], "good first issue tag": [[337, null]], "Easy tag": [[337, null]], "help wanted tag": [[337, null]], "Documentation": [[337, "documentation"], [972, "documentation"]], "Building the documentation": [[337, "building-the-documentation"]], "Guidelines for writing documentation": [[337, "guidelines-for-writing-documentation"]], "Cross-referencing": [[337, "cross-referencing"]], "Generated documentation on GitHub Actions": [[337, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[337, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[337, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[337, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[337, "monitoring-performance"]], "Issue Tracker Tags": [[337, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[337, "maintaining-backwards-compatibility"]], "Deprecation": [[337, "deprecation"]], "Change the default value of a parameter": [[337, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[337, "code-review-guidelines"]], "Communication Guidelines": [[337, "communication-guidelines"]], "Reading the existing code base": [[337, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[338, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[338, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[338, "tips-to-ease-development"]], "Tips for performance": [[338, "tips-for-performance"]], "Using OpenMP": [[338, "using-openmp"]], "Developing scikit-learn estimators": [[339, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[339, "apis-of-scikit-learn-objects"]], "Different objects": [[339, "different-objects"]], "Instantiation": [[339, "instantiation"]], "Fitting": [[339, "fitting"]], "Estimated Attributes": [[339, "estimated-attributes"]], "Optional Arguments": [[339, "optional-arguments"]], "Universal attributes": [[339, "universal-attributes"]], "Rolling your own estimator": [[339, "rolling-your-own-estimator"]], "Project template:": [[339, null]], "BaseEstimator and mixins:": [[339, null]], "get_params and set_params": [[339, "get-params-and-set-params"]], "Parameters and init": [[339, "parameters-and-init"]], "Cloning": [[339, "cloning"]], "Pipeline compatibility": [[339, "pipeline-compatibility"]], "Estimator types": [[339, "estimator-types"]], "Specific models": [[339, "specific-models"]], "Estimator Tags": [[339, "estimator-tags"]], "Developer API for set_output": [[339, "developer-api-for-set-output"]], "Coding guidelines": [[339, "coding-guidelines"]], "Input validation": [[339, "input-validation"]], "Random Numbers": [[339, "random-numbers"]], "Numerical assertions in tests": [[339, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[340, "developer-s-guide"]], "Maintainer / core-developer information": [[341, "maintainer-core-developer-information"]], "Releasing": [[341, "releasing"]], "Before a release": [[341, "before-a-release"]], "Preparing a release PR": [[341, "preparing-a-release-pr"]], "Major version release": [[341, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[341, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[341, "making-a-release"]], "Release checklist": [[341, "release-checklist"]], "Merging Pull Requests": [[341, "merging-pull-requests"]], "The scikit-learn.org web site": [[341, "the-scikit-learn-org-web-site"]], "Experimental features": [[341, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[342, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[342, "good-practices"]], "Provide a failing code example with minimal comments": [[342, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[342, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[342, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[342, "use-markdown-formatting"]], "Synthetic dataset": [[342, "synthetic-dataset"]], "NumPy": [[342, "numpy"]], "Pandas": [[342, "pandas"]], "make_regression": [[342, "make-regression"]], "make_classification": [[342, "make-classification"]], "make_blobs": [[342, "make-blobs"]], "How to optimize for speed": [[343, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[343, "python-cython-or-c-c"]], "Profiling Python code": [[343, "profiling-python-code"]], "Memory usage profiling": [[343, "memory-usage-profiling"]], "Using Cython": [[343, "using-cython"]], "Profiling compiled extensions": [[343, "profiling-compiled-extensions"]], "Using yep and gperftools": [[343, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[343, "using-a-debugger-gdb"]], "Using gprof": [[343, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[343, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[343, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[343, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[343, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[344, "developing-with-the-plotting-api"]], "Plotting API Overview": [[344, "plotting-api-overview"]], "Plotting with Multiple Axes": [[344, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[345, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[345, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[345, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[345, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[345, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[345, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[345, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[345, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[345, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[346, "utilities-for-developers"]], "Validation Tools": [[346, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[346, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[346, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[346, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[346, "graph-routines"]], "Testing Functions": [[346, "testing-functions"]], "Multiclass and multilabel utility function": [[346, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[346, "helper-functions"]], "Hash Functions": [[346, "hash-functions"]], "Warnings and Exceptions": [[346, "warnings-and-exceptions"]], "Dispatching": [[347, "dispatching"]], "Frequently Asked Questions": [[348, "frequently-asked-questions"]], "Table of Contents": [[348, "table-of-contents"]], "About the project": [[348, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[348, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[348, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[348, "why-scikit"]], "Do you support PyPy?": [[348, "do-you-support-pypy"]], "Implementation decisions": [[348, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[348, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[348, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[348, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[348, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[348, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[348, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[348, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[348, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[348, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[348, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[348, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[348, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[348, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[348, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[348, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[348, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[348, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[348, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[348, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[348, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[348, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[349, "getting-started"]], "Fitting and predicting: estimator basics": [[349, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[349, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[349, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[349, "model-evaluation"]], "Automatic parameter searches": [[349, "automatic-parameter-searches"]], "Next steps": [[349, "next-steps"]], "Glossary of Common Terms and API Elements": [[350, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[350, "general-concepts"]], "Class APIs and Estimator Types": [[350, "class-apis-and-estimator-types"]], "Target Types": [[350, "target-types"]], "Methods": [[350, "methods"]], "Parameters": [[350, "parameters"], [369, "parameters"]], "Attributes": [[350, "attributes"]], "Data and sample properties": [[350, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[351, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[351, "roles-and-responsibilities"]], "Contributors": [[351, "contributors"]], "Communication team": [[351, "communication-team"]], "Core developers": [[351, "core-developers"]], "Technical Committee": [[351, "technical-committee"]], "Decision Making Process": [[351, "decision-making-process"]], "Governance Model Changes": [[351, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[351, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[353, "installing-scikit-learn"]], "Installing the latest release": [[353, "installing-the-latest-release"]], "Installing on Apple Silicon M1 hardware": [[353, "installing-on-apple-silicon-m1-hardware"]], "Third party distributions of scikit-learn": [[353, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[353, "alpine-linux"]], "Arch Linux": [[353, "arch-linux"]], "Debian/Ubuntu": [[353, "debian-ubuntu"]], "Fedora": [[353, "fedora"]], "NetBSD": [[353, "netbsd"]], "MacPorts for Mac OSX": [[353, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[353, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel conda channel": [[353, "intel-conda-channel"]], "WinPython for Windows": [[353, "winpython-for-windows"]], "Troubleshooting": [[353, "troubleshooting"]], "Error caused by file path length limit on Windows": [[353, "error-caused-by-file-path-length-limit-on-windows"]], "Model persistence": [[356, "model-persistence"]], "Python specific serialization": [[356, "python-specific-serialization"]], "Security & maintainability limitations": [[356, "security-maintainability-limitations"]], "A more secure format: skops": [[356, "a-more-secure-format-skops"]], "Interoperable formats": [[356, "interoperable-formats"]], "Model selection and evaluation": [[357, "model-selection-and-evaluation"]], "Array API support (experimental)": [[358, "array-api-support-experimental"]], "Example usage": [[358, "example-usage"]], "Estimators with support for Array API-compatible inputs": [[358, "estimators-with-support-for-array-api-compatible-inputs"]], "Spectral Co-Clustering": [[359, "spectral-co-clustering"]], "Mathematical formulation": [[359, "mathematical-formulation"], [359, "id3"], [362, "mathematical-formulation"], [362, "id12"], [362, "id19"], [362, "id29"], [362, "id33"], [369, "mathematical-formulation"], [927, "mathematical-formulation"], [934, "mathematical-formulation"], [935, "mathematical-formulation"], [945, "mathematical-formulation"], [946, "mathematical-formulation"], [947, "mathematical-formulation"]], "Spectral Biclustering": [[359, "spectral-biclustering"]], "Biclustering evaluation": [[359, "biclustering-evaluation"]], "Probability calibration": [[360, "probability-calibration"]], "Calibrating a classifier": [[360, "calibrating-a-classifier"]], "Sigmoid": [[360, "sigmoid"]], "Isotonic": [[360, "isotonic"]], "Multiclass support": [[360, "multiclass-support"]], "API Reference": [[361, "api-reference"]], "sklearn.base: Base classes and utility functions": [[361, "module-sklearn.base"]], "Base classes": [[361, "base-classes"]], "Functions": [[361, "functions"], [361, "id1"]], "sklearn.calibration: Probability Calibration": [[361, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[361, "module-sklearn.cluster"]], "Classes": [[361, "classes"]], "sklearn.compose: Composite Estimators": [[361, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[361, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[361, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[361, "module-sklearn.datasets"]], "Loaders": [[361, "loaders"]], "Samples generator": [[361, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[361, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[361, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[361, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[361, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[361, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[361, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[361, "module-sklearn.feature_extraction"]], "From images": [[361, "module-sklearn.feature_extraction.image"]], "From text": [[361, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[361, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[361, "module-sklearn.gaussian_process"]], "sklearn.impute: Impute": [[361, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[361, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[361, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[361, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[361, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[361, "module-sklearn.linear_model"]], "Linear classifiers": [[361, "linear-classifiers"]], "Classical linear regressors": [[361, "classical-linear-regressors"]], "Regressors with variable selection": [[361, "regressors-with-variable-selection"]], "Bayesian regressors": [[361, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[361, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[361, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[361, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[361, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[361, "sklearn-metrics-metrics"]], "Model Selection Interface": [[361, "model-selection-interface"]], "Classification metrics": [[361, "classification-metrics"], [931, "classification-metrics"]], "Regression metrics": [[361, "regression-metrics"], [931, "regression-metrics"]], "Multilabel ranking metrics": [[361, "multilabel-ranking-metrics"], [931, "multilabel-ranking-metrics"]], "Clustering metrics": [[361, "clustering-metrics"], [931, "clustering-metrics"]], "Biclustering metrics": [[361, "biclustering-metrics"]], "Distance metrics": [[361, "distance-metrics"]], "Pairwise metrics": [[361, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[361, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[361, "module-sklearn.model_selection"]], "Splitter Classes": [[361, "splitter-classes"]], "Splitter Functions": [[361, "splitter-functions"]], "Hyper-parameter optimizers": [[361, "hyper-parameter-optimizers"]], "Model validation": [[361, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[361, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[361, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[361, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[361, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[361, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[361, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[361, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[361, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[361, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[361, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[361, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[361, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[361, "module-sklearn.utils"]], "Recently deprecated": [[361, "recently-deprecated"]], "To be removed in 1.3": [[361, "to-be-removed-in-1-3"]], "Input data": [[362, null]], "Overview of clustering methods": [[362, "overview-of-clustering-methods"]], "K-means": [[362, "k-means"]], "Low-level parallelism": [[362, "low-level-parallelism"], [369, "low-level-parallelism"]], "Mini Batch K-Means": [[362, "mini-batch-k-means"]], "Affinity Propagation": [[362, "affinity-propagation"]], "Mean Shift": [[362, "mean-shift"]], "Spectral clustering": [[362, "spectral-clustering"]], "Different label assignment strategies": [[362, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[362, "spectral-clustering-graphs"]], "Hierarchical clustering": [[362, "hierarchical-clustering"]], "FeatureAgglomeration": [[362, null]], "Different linkage type: Ward, complete, average, and single linkage": [[362, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[362, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[362, "adding-connectivity-constraints"]], "Varying the metric": [[362, "varying-the-metric"]], "Bisecting K-Means": [[362, "bisecting-k-means"]], "DBSCAN": [[362, "dbscan"]], "Implementation": [[362, null], [934, "implementation"]], "Memory consumption for large sample sizes": [[362, null]], "OPTICS": [[362, "optics"]], "Comparison with DBSCAN": [[362, null]], "Computational Complexity": [[362, null]], "BIRCH": [[362, "birch"]], "Clustering performance evaluation": [[362, "clustering-performance-evaluation"]], "Rand index": [[362, "rand-index"]], "Advantages": [[362, "advantages"], [362, "id10"], [362, "id17"], [362, "id21"], [362, "id24"], [362, "id27"], [362, "id31"], [362, "id35"]], "Drawbacks": [[362, "drawbacks"], [362, "id11"], [362, "id18"], [362, "id22"], [362, "id25"], [362, "id28"], [362, "id32"], [362, "id36"]], "Mutual Information based scores": [[362, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[362, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[362, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[362, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[362, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[362, "davies-bouldin-index"]], "Contingency Matrix": [[362, "contingency-matrix"]], "Pair Confusion Matrix": [[362, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[363, "pipeline-chaining-estimators"]], "Construction": [[363, "construction"]], "Accessing steps": [[363, "accessing-steps"]], "Nested parameters": [[363, "nested-parameters"]], "Caching transformers: avoid repeated computation": [[363, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[363, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[363, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[363, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[363, "visualizing-composite-estimators"]], "Empirical covariance": [[364, "empirical-covariance"]], "Shrunk Covariance": [[364, "shrunk-covariance"]], "Basic shrinkage": [[364, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[364, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[364, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[364, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[364, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[364, "minimum-covariance-determinant"]], "PLSCanonical": [[365, "plscanonical"]], "Transforming data": [[365, "transforming-data"]], "Predicting the targets Y": [[365, "predicting-the-targets-y"]], "PLSSVD": [[365, "plssvd"]], "PLSRegression": [[365, "plsregression"]], "Canonical Correlation Analysis": [[365, "canonical-correlation-analysis"]], "Reference:": [[365, null]], "Cross-validation: evaluating estimator performance": [[366, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[366, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[366, null]], "The cross_validate function and multiple metric evaluation": [[366, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[366, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[366, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[366, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[366, "k-fold"]], "Repeated K-Fold": [[366, "repeated-k-fold"]], "Leave One Out (LOO)": [[366, "leave-one-out-loo"]], "Leave P Out (LPO)": [[366, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[366, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels.": [[366, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[366, "stratified-k-fold"]], "Stratified Shuffle Split": [[366, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[366, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[366, "group-k-fold"]], "StratifiedGroupKFold": [[366, "stratifiedgroupkfold"]], "Leave One Group Out": [[366, "leave-one-group-out"]], "Leave P Groups Out": [[366, "leave-p-groups-out"]], "Group Shuffle Split": [[366, "group-shuffle-split"]], "Predefined Fold-Splits / Validation-Sets": [[366, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[366, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[366, "cross-validation-of-time-series-data"]], "Time Series Split": [[366, "time-series-split"]], "A note on shuffling": [[366, "a-note-on-shuffling"]], "Cross validation and model selection": [[366, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[367, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[367, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[367, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[367, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[367, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[367, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[367, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[367, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[367, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[367, "dictionary-learning"]], "Generic dictionary learning": [[367, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[367, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[367, null]], "Factor Analysis": [[367, "factor-analysis"]], "Independent component analysis (ICA)": [[367, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[367, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[367, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[367, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[367, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[367, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[368, "density-estimation"]], "Density Estimation: Histograms": [[368, "density-estimation-histograms"]], "Bagging meta-estimator": [[369, "bagging-meta-estimator"]], "Forests of randomized trees": [[369, "forests-of-randomized-trees"]], "Random Forests": [[369, "random-forests"]], "Extremely Randomized Trees": [[369, "extremely-randomized-trees"]], "Parallelization": [[369, "parallelization"]], "Feature importance evaluation": [[369, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[369, "totally-random-trees-embedding"]], "AdaBoost": [[369, "adaboost"]], "Gradient Tree Boosting": [[369, "gradient-tree-boosting"]], "Fitting additional weak-learners": [[369, "fitting-additional-weak-learners"]], "Controlling the tree size": [[369, "controlling-the-tree-size"]], "Loss Functions": [[369, "loss-functions"]], "Shrinkage via learning rate": [[369, "shrinkage-via-learning-rate"]], "Subsampling": [[369, "subsampling"]], "Interpretation with feature importance": [[369, "interpretation-with-feature-importance"]], "Histogram-Based Gradient Boosting": [[369, "histogram-based-gradient-boosting"]], "Missing values support": [[369, "missing-values-support"]], "Sample weight support": [[369, "sample-weight-support"]], "Categorical Features Support": [[369, "categorical-features-support"]], "Interaction constraints": [[369, "interaction-constraints"]], "Why it\u2019s faster": [[369, "why-it-s-faster"]], "Voting Classifier": [[369, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[369, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[369, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[369, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[369, "voting-regressor"]], "Stacked generalization": [[369, "stacked-generalization"]], "Feature extraction": [[370, "feature-extraction"]], "Loading features from dicts": [[370, "loading-features-from-dicts"]], "Feature hashing": [[370, "feature-hashing"]], "Implementation details": [[370, "implementation-details"], [945, "implementation-details"], [946, "implementation-details"]], "Text feature extraction": [[370, "text-feature-extraction"]], "The Bag of Words representation": [[370, "the-bag-of-words-representation"]], "Sparsity": [[370, "sparsity"], [964, "sparsity"]], "Common Vectorizer usage": [[370, "common-vectorizer-usage"]], "Using stop words": [[370, "using-stop-words"]], "Tf\u2013idf term weighting": [[370, "tfidf-term-weighting"]], "Decoding text files": [[370, "decoding-text-files"]], "Applications and examples": [[370, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[370, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[370, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Performing out-of-core scaling with HashingVectorizer": [[370, "performing-out-of-core-scaling-with-hashingvectorizer"]], "Customizing the vectorizer classes": [[370, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[370, "image-feature-extraction"]], "Patch extraction": [[370, "patch-extraction"]], "Connectivity graph of an image": [[370, "connectivity-graph-of-an-image"]], "Feature selection": [[371, "feature-selection"]], "Removing features with low variance": [[371, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[371, null]], "Feature selection using SelectFromModel": [[371, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[371, "l1-based-feature-selection"]], "L1-recovery and compressive sensing": [[371, "compressive-sensing"]], "Tree-based feature selection": [[371, "tree-based-feature-selection"]], "Sequential Feature Selection": [[371, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[371, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[372, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[372, "gaussian-process-regression-gpr"]], "GPR examples": [[372, "gpr-examples"]], "GPR with noise-level estimation": [[372, "gpr-with-noise-level-estimation"]], "Comparison of GPR and Kernel Ridge Regression": [[372, "comparison-of-gpr-and-kernel-ridge-regression"]], "GPR on Mauna Loa CO2 data": [[372, "gpr-on-mauna-loa-co2-data"]], "Gaussian Process Classification (GPC)": [[372, "gaussian-process-classification-gpc"]], "GPC examples": [[372, "gpc-examples"]], "Probabilistic predictions with GPC": [[372, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[372, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[372, "kernels-for-gaussian-processes"]], "Gaussian Process Kernel API": [[372, "gaussian-process-kernel-api"]], "Basic kernels": [[372, "basic-kernels"]], "Kernel operators": [[372, "kernel-operators"]], "Radial basis function (RBF) kernel": [[372, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[372, "rational-quadratic-kernel"]], "Dot-Product kernel": [[372, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[373, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[374, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[375, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[376, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[376, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[377, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[378, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[379, "sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[380, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[381, "sklearn-base-densitymixin"]], "sklearn.base.OneToOneFeatureMixin": [[382, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.RegressorMixin": [[383, "sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[384, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[384, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[385, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[386, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[387, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[388, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[388, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[389, "sklearn-calibration-calibrationdisplay"]], "sklearn.calibration.calibration_curve": [[390, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[391, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[391, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[392, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[392, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[393, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[393, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[394, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[394, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[395, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[395, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[396, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[396, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.KMeans": [[397, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[397, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[398, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[398, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[399, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[399, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[400, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[400, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[401, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[401, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[402, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[402, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[403, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[403, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[404, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[404, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[405, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[405, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[406, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[407, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[408, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[408, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[409, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[410, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[410, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[411, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[412, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[412, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[413, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[414, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[414, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[415, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[415, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[416, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[416, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[417, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[417, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[418, "sklearn-config-context"]], "Examples using sklearn.config_context": [[418, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[419, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[419, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[420, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[420, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[421, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[422, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[422, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[423, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[423, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[424, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[424, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[425, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[425, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[426, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[426, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[427, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[427, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[428, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[429, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[429, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[430, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[431, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[432, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[432, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[433, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[433, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[434, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[434, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[435, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[436, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[437, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[437, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[438, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[438, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[439, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[439, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[440, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[440, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[441, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[441, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[442, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[442, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[443, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[444, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[444, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[445, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[445, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[446, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[446, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[447, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[448, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[448, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[449, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[449, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[450, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[450, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[451, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[451, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[452, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[452, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[453, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[454, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[454, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[455, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[456, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[456, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[457, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[458, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[459, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[460, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[460, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[461, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[461, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[462, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[462, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[463, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[463, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[464, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[464, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[465, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[465, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[466, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[467, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[468, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[469, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[469, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[470, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[470, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[471, "sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[472, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[472, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[473, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[473, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[474, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[474, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[475, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[475, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[476, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[476, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[477, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[477, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[478, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[479, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[480, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[480, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[481, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[482, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[482, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[483, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[483, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[484, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[484, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[485, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[485, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[486, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[486, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[487, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[487, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[488, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[488, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[489, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[489, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[490, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[490, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[491, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[491, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[492, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[492, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[493, "sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[494, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[494, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[495, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[496, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[497, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[498, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[499, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[499, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[500, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[500, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[501, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[501, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[502, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[502, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[503, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[503, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[504, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[504, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[505, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[506, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[506, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[507, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[507, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[508, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[508, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[509, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[509, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[510, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[510, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[511, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[511, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[512, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[512, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[513, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[513, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[514, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[514, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[515, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[515, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[516, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[516, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[517, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[517, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[518, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[518, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[519, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[519, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[520, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[520, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[521, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[521, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[522, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[523, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[524, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[525, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[526, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[527, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[528, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[529, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[530, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[531, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[531, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[532, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[532, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[533, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[534, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[534, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[535, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[536, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[537, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[537, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[538, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[538, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[539, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[539, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[540, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[540, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[541, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[541, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[542, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[543, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[543, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[544, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[544, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[545, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[546, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[547, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[547, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[548, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[549, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[549, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[550, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[550, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[551, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[552, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[552, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[553, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[554, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[554, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[555, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[555, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[556, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[556, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[557, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[557, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[558, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[558, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[559, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[560, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[560, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[561, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[561, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[562, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[563, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[563, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[564, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[564, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[565, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[565, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[566, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[567, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[567, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[568, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[568, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[569, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[569, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[570, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[571, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[572, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[572, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[573, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[573, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[574, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[575, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[575, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[576, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[577, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[577, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[578, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[578, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[579, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[580, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[580, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[581, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[581, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "sklearn.inspection.PartialDependenceDisplay": [[582, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[582, "examples-using-sklearn-inspection-partialdependencedisplay"]], "sklearn.inspection.partial_dependence": [[583, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[583, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[584, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[584, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[585, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[585, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[586, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[587, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[588, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[589, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[589, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[590, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[590, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[591, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[591, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[592, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[593, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[593, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[594, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[594, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[595, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[595, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[596, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[596, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[597, "sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[598, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[598, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[599, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[599, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[600, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[601, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[602, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[602, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[603, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[603, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[604, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[605, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[605, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[606, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[606, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[607, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[607, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[608, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[608, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[609, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[609, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[610, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[611, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[612, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[612, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[613, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[614, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[614, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[615, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[615, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[616, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[616, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[617, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[618, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[618, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[619, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[619, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[620, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[620, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[621, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[621, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[622, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[622, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[623, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[623, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[624, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[624, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[625, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[626, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[626, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[627, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[627, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[628, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[628, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[629, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[629, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[630, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[630, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[631, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[631, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[632, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[632, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[633, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[634, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[634, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[635, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[636, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[637, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[638, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[638, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[639, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[639, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[640, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[640, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[641, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[641, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[642, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[642, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[643, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[643, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[644, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[645, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[646, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[647, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[647, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "sklearn.metrics.DetCurveDisplay": [[648, "sklearn-metrics-detcurvedisplay"]], "sklearn.metrics.DistanceMetric": [[649, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[650, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[650, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "sklearn.metrics.PredictionErrorDisplay": [[651, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[651, "examples-using-sklearn-metrics-predictionerrordisplay"]], "sklearn.metrics.RocCurveDisplay": [[652, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[652, "examples-using-sklearn-metrics-roccurvedisplay"]], "sklearn.metrics.accuracy_score": [[653, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[653, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[654, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[654, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[655, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[655, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[656, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[656, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[657, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[657, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[658, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[659, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[659, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[660, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[661, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[662, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[662, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[663, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[663, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[664, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[665, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[666, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[667, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[667, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[668, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[668, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[669, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[669, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[670, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[671, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[672, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[673, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[674, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[675, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[676, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[676, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[677, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[678, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[678, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[679, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[680, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[681, "sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[682, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[683, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[683, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[684, "sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[685, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[686, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[686, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[687, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[687, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[688, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[689, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[690, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[690, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[691, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[691, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[692, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[693, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[694, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[694, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[695, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[696, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[697, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[697, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[698, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[698, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[699, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[699, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[700, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[701, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[701, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[702, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[702, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[703, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[704, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[704, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[705, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[706, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[706, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[707, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[708, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[709, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[710, "sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[711, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[712, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[713, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[714, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[715, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[716, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[717, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[718, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[719, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[720, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[721, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[722, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[723, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[724, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[725, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[726, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[727, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[727, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[728, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[728, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[729, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[730, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[731, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[731, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[732, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[733, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[733, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[734, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[734, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[735, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[735, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[736, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[736, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[737, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[737, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[738, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[738, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.silhouette_samples": [[739, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[739, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[740, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[740, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[741, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[742, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[742, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[743, "sklearn-metrics-zero-one-loss"]], "Examples using sklearn.metrics.zero_one_loss": [[743, "examples-using-sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[744, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[744, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[745, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[745, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[746, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[746, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[747, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[747, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[748, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[748, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[749, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[749, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[750, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[750, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[751, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[751, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[752, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[752, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "sklearn.model_selection.LeaveOneGroupOut": [[753, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[754, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[755, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[756, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[757, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[758, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[759, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[760, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[760, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[761, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[761, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[762, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[762, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[763, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[763, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[764, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[764, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[765, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[765, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[766, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[766, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[767, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[767, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.check_cv": [[768, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[769, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[769, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[770, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[770, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[771, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[771, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[772, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[772, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[773, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[773, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[774, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[774, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[775, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[775, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[776, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[777, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[777, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[778, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[779, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[779, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[780, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[781, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[781, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[782, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[783, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[783, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[784, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[785, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[785, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[786, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[786, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[787, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[787, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[788, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[789, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[790, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[790, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[791, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[791, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[792, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[792, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[793, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[793, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[794, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[794, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[795, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[795, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[796, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[796, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[797, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[797, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[798, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[799, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[800, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[801, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[801, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[802, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[803, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[804, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[804, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[805, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[805, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[806, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[806, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[807, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[807, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[808, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[808, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[809, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[809, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[810, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[811, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[812, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[812, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[813, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[813, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[814, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[815, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[815, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[816, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[817, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[817, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[818, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[818, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[819, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[820, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[820, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[821, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[821, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[822, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[822, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[823, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[823, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[824, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[824, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[825, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[825, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[826, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[826, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[827, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[827, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[828, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[828, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.add_dummy_feature": [[829, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[830, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[831, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[831, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[832, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[833, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[833, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[834, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[835, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[836, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[836, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[837, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[838, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[839, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[840, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[840, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[841, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[841, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[842, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[843, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[843, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[844, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[844, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[845, "sklearn-set-config"]], "Examples using sklearn.set_config": [[845, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[846, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[847, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[847, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[848, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[849, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[849, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[850, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[850, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[851, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[851, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[852, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[852, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[853, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[853, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[854, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[854, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[855, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[855, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[856, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[856, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[857, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[858, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[859, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[860, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[861, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[861, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[862, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[862, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[863, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[864, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[865, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[866, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[867, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[868, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[869, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[870, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[870, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[871, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[872, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[873, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[874, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[875, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[876, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[877, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[878, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[879, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[879, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[880, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[881, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[881, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[882, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[883, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[884, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[885, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[886, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[887, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[888, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[888, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[889, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[890, "sklearn-utils-indexable"]], "sklearn.utils.metaestimators.available_if": [[891, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[891, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.metaestimators.if_delegate_has_method": [[892, "sklearn-utils-metaestimators-if-delegate-has-method"]], "sklearn.utils.multiclass.is_multilabel": [[893, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[894, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[895, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[896, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[897, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[898, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[899, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[900, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[901, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[902, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[903, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[904, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[905, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[905, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[906, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[907, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[908, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[909, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[910, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[911, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[912, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[913, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[914, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[915, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[915, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[916, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[917, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[918, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[919, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[920, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[920, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[920, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[920, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[920, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[920, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[920, "choosing-a-resource"]], "Exhausting the available resources": [[920, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[920, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[920, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[920, "tips-for-parameter-search"]], "Specifying an objective metric": [[920, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[920, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[920, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[920, "model-selection-development-and-evaluation"]], "Robustness to failure": [[920, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[920, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[920, "model-specific-cross-validation"]], "Information Criterion": [[920, "information-criterion"]], "Out of Bag Estimates": [[920, "out-of-bag-estimates"]], "Imputation of missing values": [[921, "imputation-of-missing-values"], [941, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[921, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[921, "univariate-feature-imputation"]], "Multivariate feature imputation": [[921, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[921, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[921, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[921, "nearest-neighbors-imputation"]], "Keeping the number of features constants": [[921, "keeping-the-number-of-features-constants"]], "Marking imputed values": [[921, "marking-imputed-values"]], "Estimators that handle NaN values": [[921, "estimators-that-handle-nan-values"]], "Isotonic regression": [[922, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[923, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[923, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[923, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[923, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[923, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[923, "mathematical-details"]], "Kernel ridge regression": [[924, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[925, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[925, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[925, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[925, "qda"]], "LDA": [[925, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[925, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[925, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[925, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[926, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[926, "validation-curve"]], "Learning curve": [[926, "learning-curve"]], "Linear Models": [[927, "linear-models"]], "Ordinary Least Squares": [[927, "ordinary-least-squares"]], "Non-Negative Least Squares": [[927, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[927, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[927, "ridge-regression-and-classification"]], "Ridge Complexity": [[927, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[927, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[927, "setting-regularization-parameter"]], "Using cross-validation": [[927, "using-cross-validation"]], "Information-criteria based model selection": [[927, "information-criteria-based-model-selection"]], "Comparison with the regularization parameter of SVM": [[927, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[927, "multi-task-lasso"]], "Elastic-Net": [[927, "elastic-net"]], "Multi-task Elastic-Net": [[927, "multi-task-elastic-net"]], "Least Angle Regression": [[927, "least-angle-regression"]], "LARS Lasso": [[927, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[927, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[927, "bayesian-regression"]], "Bayesian Ridge Regression": [[927, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[927, "automatic-relevance-determination-ard"]], "Logistic regression": [[927, "logistic-regression"]], "Binary Case": [[927, "binary-case"]], "Multinomial Case": [[927, "multinomial-case"]], "Solvers": [[927, "solvers"]], "Differences from liblinear:": [[927, "liblinear-differences"]], "Practical considerations": [[927, "practical-considerations"]], "Stochastic Gradient Descent - SGD": [[927, "stochastic-gradient-descent-sgd"]], "Perceptron": [[927, "perceptron"]], "Passive Aggressive Algorithms": [[927, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[927, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[927, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator?": [[927, null]], "RANSAC: RANdom SAmple Consensus": [[927, "ransac-random-sample-consensus"]], "Details of the algorithm": [[927, "details-of-the-algorithm"]], "Theil-Sen estimator: generalized-median-based estimator": [[927, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical considerations": [[927, "theoretical-considerations"]], "Huber Regression": [[927, "huber-regression"]], "Quantile Regression": [[927, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[927, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[928, "introduction"]], "Isomap": [[928, "isomap"]], "Complexity": [[928, "complexity"], [928, "id3"], [928, "id4"], [928, "id5"], [928, "id7"], [928, "id8"], [934, "complexity"], [935, "complexity"], [945, "complexity"], [946, "complexity"], [947, "complexity"]], "Locally Linear Embedding": [[928, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[928, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[928, "hessian-eigenmapping"]], "Spectral Embedding": [[928, "spectral-embedding"]], "Local Tangent Space Alignment": [[928, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[928, "multi-dimensional-scaling-mds"]], "Metric MDS": [[928, "metric-mds"]], "Nonmetric MDS": [[928, "nonmetric-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[928, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Optimizing t-SNE": [[928, "optimizing-t-sne"]], "Barnes-Hut t-SNE": [[928, "barnes-hut-t-sne"]], "Tips on practical use": [[928, "tips-on-practical-use"], [947, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[929, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[929, "cosine-similarity"]], "Linear kernel": [[929, "linear-kernel"], [964, "linear-kernel"]], "Polynomial kernel": [[929, "polynomial-kernel"], [964, "polynomial-kernel"]], "Sigmoid kernel": [[929, "sigmoid-kernel"]], "RBF kernel": [[929, "rbf-kernel"]], "Laplacian kernel": [[929, "laplacian-kernel"]], "Chi-squared kernel": [[929, "chi-squared-kernel"]], "Gaussian mixture models": [[930, "gaussian-mixture-models"]], "Gaussian Mixture": [[930, "gaussian-mixture"]], "Pros and cons of class GaussianMixture": [[930, "pros-and-cons-of-class-gaussianmixture"]], "Pros": [[930, "pros"], [930, "id2"]], "Cons": [[930, "cons"], [930, "id3"]], "Selecting the number of components in a classical Gaussian Mixture Model": [[930, "selecting-the-number-of-components-in-a-classical-gaussian-mixture-model"]], "Estimation algorithm Expectation-maximization": [[930, "estimation-algorithm-expectation-maximization"]], "Choice of the Initialization Method": [[930, "choice-of-the-initialization-method"]], "Variational Bayesian Gaussian Mixture": [[930, "variational-bayesian-gaussian-mixture"]], "Estimation algorithm: variational inference": [[930, "estimation-algorithm-variational-inference"]], "Pros and cons of variational inference with BayesianGaussianMixture": [[930, "pros-and-cons-of-variational-inference-with-bayesiangaussianmixture"]], "The Dirichlet Process": [[930, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[931, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[931, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[931, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[931, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[931, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[931, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[931, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[931, "accuracy-score"]], "Example:": [[931, null], [931, null], [931, null], [931, null], [931, null], [931, null], [931, null], [931, null], [943, null], [964, null]], "Top-k accuracy score": [[931, "top-k-accuracy-score"]], "Balanced accuracy score": [[931, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[931, "cohen-s-kappa"]], "Classification report": [[931, "classification-report"]], "Hamming loss": [[931, "hamming-loss"]], "Precision, recall and F-measures": [[931, "precision-recall-and-f-measures"]], "Binary classification": [[931, "binary-classification"]], "Multiclass and multilabel classification": [[931, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[931, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[931, "hinge-loss"]], "Log loss": [[931, "log-loss"]], "Matthews correlation coefficient": [[931, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[931, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[931, "receiver-operating-characteristic-roc"]], "Binary case": [[931, "binary-case"]], "Multi-class case": [[931, "multi-class-case"]], "Multi-label case": [[931, "multi-label-case"]], "Detection error tradeoff (DET)": [[931, "detection-error-tradeoff-det"]], "Zero one loss": [[931, "zero-one-loss"]], "Brier score loss": [[931, "brier-score-loss"]], "Class likelihood ratios": [[931, "class-likelihood-ratios"]], "Coverage error": [[931, "coverage-error"]], "Label ranking average precision": [[931, "label-ranking-average-precision"]], "Ranking loss": [[931, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[931, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[931, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[931, "mean-absolute-error"]], "Mean squared error": [[931, "mean-squared-error"]], "Mean squared logarithmic error": [[931, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[931, "mean-absolute-percentage-error"]], "Median absolute error": [[931, "median-absolute-error"]], "Max error": [[931, "max-error"]], "Explained variance score": [[931, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[931, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[931, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[931, "pinball-loss"]], "D\u00b2 score": [[931, "d2-score"]], "D\u00b2 Tweedie score": [[931, "d2-tweedie-score"]], "D\u00b2 pinball score": [[931, "d2-pinball-score"]], "D\u00b2 absolute error score": [[931, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[931, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[931, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[932, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[932, "multiclass-classification"], [964, null]], "Target format": [[932, "target-format"], [932, "id5"], [932, "id8"], [932, "id10"]], "OneVsRestClassifier": [[932, "onevsrestclassifier"]], "OneVsOneClassifier": [[932, "onevsoneclassifier"]], "OutputCodeClassifier": [[932, "outputcodeclassifier"]], "MultiOutputClassifier": [[932, "multioutputclassifier"]], "ClassifierChain": [[932, "classifierchain"]], "Multiclass-multioutput classification": [[932, "multiclass-multioutput-classification"]], "Multioutput regression": [[932, "multioutput-regression"]], "MultiOutputRegressor": [[932, "multioutputregressor"]], "RegressorChain": [[932, "regressorchain"]], "Naive Bayes": [[933, "naive-bayes"]], "Multinomial Naive Bayes": [[933, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[933, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[933, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[933, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[933, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[934, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[934, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[934, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[934, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[934, "nearest-neighbor-algorithms"]], "Brute Force": [[934, "brute-force"]], "K-D Tree": [[934, "k-d-tree"]], "Ball Tree": [[934, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[934, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[934, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[934, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[934, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[934, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[934, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[934, "neighborhood-components-analysis"]], "Dimensionality reduction": [[934, "dimensionality-reduction"]], "Mahalanobis distance": [[934, "mahalanobis-distance"]], "Transform": [[934, "transform"]], "Neural network models (supervised)": [[935, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[935, "multi-layer-perceptron"]], "Regularization": [[935, "regularization"]], "Algorithms": [[935, "algorithms"]], "Tips on Practical Use": [[935, "tips-on-practical-use"], [945, "tips-on-practical-use"], [946, "tips-on-practical-use"]], "More control with warm_start": [[935, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[936, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[936, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[936, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[936, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[936, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[937, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[937, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[937, "novelty-detection"]], "Scaling up the One-Class SVM": [[937, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[937, "id1"]], "Fitting an elliptic envelope": [[937, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[937, "isolation-forest"]], "Local Outlier Factor": [[937, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[937, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[938, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[938, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[938, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[938, "mathematical-definition"]], "Computation methods": [[938, "computation-methods"]], "Permutation feature importance": [[939, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[939, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[939, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[939, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[941, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[941, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[941, "scaling-features-to-a-range"]], "Scaling sparse data": [[941, "scaling-sparse-data"]], "Scaling data with outliers": [[941, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[941, null]], "Centering kernel matrices": [[941, "centering-kernel-matrices"]], "Non-linear transformation": [[941, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[941, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[941, "mapping-to-a-gaussian-distribution"]], "Normalization": [[941, "normalization"]], "Sparse input": [[941, null], [941, null]], "Encoding categorical features": [[941, "encoding-categorical-features"]], "Infrequent categories": [[941, "infrequent-categories"]], "Discretization": [[941, "discretization"]], "K-bins discretization": [[941, "k-bins-discretization"]], "Feature binarization": [[941, "feature-binarization"]], "Generating polynomial features": [[941, "generating-polynomial-features"]], "Polynomial features": [[941, "polynomial-features"]], "Spline transformer": [[941, "spline-transformer"]], "Custom transformers": [[941, "custom-transformers"]], "Transforming the prediction target (y)": [[942, "transforming-the-prediction-target-y"]], "Label binarization": [[942, "label-binarization"]], "LabelBinarizer": [[942, "labelbinarizer"]], "MultiLabelBinarizer": [[942, "multilabelbinarizer"]], "Label encoding": [[942, "label-encoding"]], "Random Projection": [[943, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[943, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[943, "gaussian-random-projection"]], "Sparse random projection": [[943, "sparse-random-projection"]], "Inverse Transform": [[943, "inverse-transform"]], "Unlabeled entries in y": [[944, null]], "Self Training": [[944, "self-training"]], "Label Propagation": [[944, "label-propagation"]], "Stochastic Gradient Descent": [[945, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[945, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[945, "stopping-criterion"]], "SGD": [[945, "id5"]], "Multi-class classification": [[946, "multi-class-classification"]], "Scores and probabilities": [[946, "scores-and-probabilities"]], "Unbalanced problems": [[946, "unbalanced-problems"]], "Density estimation, novelty detection": [[946, "density-estimation-novelty-detection"]], "Kernel functions": [[946, "kernel-functions"]], "Parameters of the RBF Kernel": [[946, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[946, "custom-kernels"]], "Using Python functions as kernels": [[946, "using-python-functions-as-kernels"]], "Using the Gram matrix": [[946, "using-the-gram-matrix"]], "SVC": [[946, "svc"]], "LinearSVC": [[946, "linearsvc"]], "NuSVC": [[946, "nusvc"]], "SVR": [[946, "svr"]], "LinearSVR": [[946, "linearsvr"]], "Multi-output problems": [[947, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[947, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[947, "classification-criteria"]], "Regression criteria": [[947, "regression-criteria"]], "Minimal Cost-Complexity Pruning": [[947, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[948, "unsupervised-dimensionality-reduction"]], "Pipelining": [[948, null], [962, "pipelining"]], "PCA: principal component analysis": [[948, "pca-principal-component-analysis"]], "Random projections": [[948, "random-projections"]], "Feature scaling": [[948, null]], "Welcome to scikit-learn": [[949, "welcome-to-scikit-learn"]], "External Resources, Videos and Talks": [[950, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[950, "new-to-scientific-python"]], "External Tutorials": [[950, "external-tutorials"]], "Videos": [[950, "videos"]], "Related Projects": [[951, "related-projects"]], "Interoperability and framework enhancements": [[951, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[951, "other-estimators-and-tasks"]], "Statistical learning with Python": [[951, "statistical-learning-with-python"]], "Recommendation Engine packages": [[951, "recommendation-engine-packages"]], "Domain specific packages": [[951, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[951, "translations-of-scikit-learn-documentation"]], "Roadmap": [[952, "id1"]], "Purpose of this document": [[952, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[952, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[952, "architectural-general-goals"]], "Subpackage-specific goals": [[952, "subpackage-specific-goals"]], "Supervised learning": [[953, "supervised-learning"]], "Support": [[954, "support"]], "Mailing List": [[954, "mailing-list"]], "User questions": [[954, "user-questions"]], "Bug tracker": [[954, "bug-tracker"]], "Gitter": [[954, "gitter"]], "Documentation resources": [[954, "documentation-resources"]], "Who is using scikit-learn?": [[955, "who-is-using-scikit-learn"]], "J.P.Morgan": [[955, "id1"]], "Spotify": [[955, "id2"]], "Inria": [[955, "id3"]], "betaworks": [[955, "id4"]], "Hugging Face": [[955, "id5"]], "Evernote": [[955, "id6"]], "T\u00e9l\u00e9com ParisTech": [[955, "id7"]], "Booking.com": [[955, "id8"]], "AWeber": [[955, "id9"]], "Yhat": [[955, "id10"]], "Rangespan": [[955, "id11"]], "Birchbox": [[955, "id12"]], "Bestofmedia Group": [[955, "id13"]], "Change.org": [[955, "id14"]], "PHIMECA Engineering": [[955, "id15"]], "HowAboutWe": [[955, "id16"]], "PeerIndex": [[955, "id17"]], "DataRobot": [[955, "id18"]], "OkCupid": [[955, "id19"]], "Lovely": [[955, "id20"]], "Data Publica": [[955, "id21"]], "Machinalis": [[955, "id22"]], "solido": [[955, "id23"]], "INFONEA": [[955, "id24"]], "Dataiku": [[955, "id25"]], "Otto Group": [[955, "id26"]], "Zopa": [[955, "id27"]], "MARS": [[955, "id28"]], "BNP Paribas Cardif": [[955, "id29"]], "An introduction to machine learning with scikit-learn": [[957, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[957, null]], "Machine learning: the problem setting": [[957, "machine-learning-the-problem-setting"]], "Training set and testing set": [[957, null], [964, null]], "Loading an example dataset": [[957, "loading-an-example-dataset"]], "Shape of the data arrays": [[957, null]], "Learning and predicting": [[957, "learning-and-predicting"]], "Choosing the parameters of the model": [[957, null]], "Conventions": [[957, "conventions"]], "Type casting": [[957, "type-casting"]], "Refitting and updating parameters": [[957, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[957, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[958, "scikit-learn-tutorials"]], "Choosing the right estimator": [[959, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[960, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[960, null]], "Model selection: choosing estimators and their parameters": [[961, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[961, "score-and-cross-validated-scores"]], "Cross-validation generators": [[961, "cross-validation-generators"]], "Exercise": [[961, null], [961, null], [964, null], [964, null]], "Grid-search and cross-validated estimators": [[961, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[961, "grid-search"]], "Nested cross-validation": [[961, null]], "Cross-validated estimators": [[961, "cross-validated-estimators"]], "Putting it all together": [[962, "putting-it-all-together"]], "Face recognition with eigenfaces": [[962, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[962, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[963, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[963, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[963, null]], "An example of reshaping data would be the digits dataset": [[963, null]], "Estimators objects": [[963, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[964, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[964, null]], "Vocabulary: classification and regression": [[964, null]], "Nearest neighbor and the curse of dimensionality": [[964, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[964, null]], "k-Nearest neighbors classifier": [[964, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[964, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[964, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[964, "linear-regression"]], "Shrinkage": [[964, "shrinkage"]], "Different algorithms for the same problem": [[964, null]], "Shrinkage and sparsity with logistic regression": [[964, null]], "Support vector machines (SVMs)": [[964, "support-vector-machines-svms"]], "Linear SVMs": [[964, "linear-svms"]], "Using kernels": [[964, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[964, "rbf-kernel-radial-basis-function"]], "Interactive example": [[964, null]], "Unsupervised learning: seeking representations of the data": [[965, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[965, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[965, null]], "K-means clustering": [[965, "k-means-clustering"]], "Application example: vector quantization": [[965, null]], "Hierarchical agglomerative clustering: Ward": [[965, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[965, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[965, null]], "Decompositions: from a signal to components and loadings": [[965, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[965, null]], "Principal component analysis: PCA": [[965, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[965, "independent-component-analysis-ica"]], "Working With Text Data": [[966, "working-with-text-data"]], "Tutorial setup": [[966, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[966, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[966, "extracting-features-from-text-files"]], "Bags of words": [[966, "bags-of-words"]], "Tokenizing text with scikit-learn": [[966, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[966, "from-occurrences-to-frequencies"]], "Training a classifier": [[966, "training-a-classifier"]], "Building a pipeline": [[966, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[966, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[966, "parameter-tuning-using-grid-search"]], "Exercises": [[966, "exercises"]], "Exercise 1: Language identification": [[966, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[966, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[966, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[966, "where-to-from-here"]], "Unsupervised learning": [[967, "unsupervised-learning"]], "User Guide": [[968, "user-guide"]], "Visualizations": [[969, "visualizations"]], "Available Plotting Utilities": [[969, "available-plotting-utilities"]], "Display Objects": [[969, "display-objects"]], "Release History": [[970, "release-history"]], "Version 0.12.1": [[972, "version-0-12-1"]], "Changelog": [[972, "changelog"], [972, "id1"], [972, "id3"], [972, "id6"], [972, "id9"], [972, "id12"], [972, "id14"], [972, "id16"], [972, "id18"], [972, "id19"], [973, "changelog"], [973, "id1"], [974, "changelog"], [975, "changelog"], [976, "changelog"], [976, "id1"], [977, "changelog"], [977, "id1"], [978, "changelog"], [978, "id1"], [978, "id2"], [979, "changelog"], [979, "id1"], [980, "changelog"], [980, "id1"], [980, "id5"], [980, "id10"], [980, "id23"], [981, "changelog"], [981, "id1"], [981, "id2"], [981, "id7"], [982, "changelog"], [982, "id1"], [982, "id4"], [983, "changelog"], [983, "id1"], [983, "id4"], [984, "changelog"], [984, "id1"], [984, "id4"], [985, "changelog"], [985, "id1"], [985, "id7"], [986, "changelog"], [986, "id1"], [986, "id7"], [987, "changelog"], [987, "id1"], [987, "id9"], [988, "changelog"]], "People": [[972, "people"], [972, "id2"], [972, "id5"], [972, "id8"], [972, "id11"], [972, "id13"], [972, "id15"], [972, "id17"], [973, "people"], [973, "id2"], [974, "people"], [975, "people"]], "Version 0.12": [[972, "version-0-12"]], "API changes summary": [[972, "api-changes-summary"], [972, "id4"], [972, "id7"], [972, "id10"], [973, "api-changes-summary"], [974, "api-changes-summary"], [975, "api-changes-summary"], [976, "api-changes-summary"], [977, "api-changes-summary"], [978, "api-changes-summary"], [978, "id5"], [979, "api-changes-summary"]], "Version 0.11": [[972, "version-0-11"]], "Highlights": [[972, "highlights"], [975, "highlights"], [976, "highlights"], [979, "highlights"], [980, "highlights"]], "Other changes": [[972, "other-changes"]], "Version 0.10": [[972, "version-0-10"]], "Version 0.9": [[972, "version-0-9"]], "Version 0.8": [[972, "version-0-8"]], "Version 0.7": [[972, "version-0-7"]], "Version 0.6": [[972, "version-0-6"]], "Version 0.5": [[972, "version-0-5"]], "New classes": [[972, "new-classes"]], "Fixes": [[972, "fixes"]], "External dependencies": [[972, "external-dependencies"]], "Removed modules": [[972, "removed-modules"]], "Misc": [[972, "misc"]], "Version 0.4": [[972, "version-0-4"]], "Earlier versions": [[972, "earlier-versions"]], "Version 0.13.1": [[973, "version-0-13-1"]], "Version 0.13": [[973, "version-0-13"]], "New Estimator Classes": [[973, "new-estimator-classes"]], "Version 0.14": [[974, "version-0-14"]], "Version 0.15.2": [[975, "version-0-15-2"]], "Bug fixes": [[975, "bug-fixes"], [975, "id1"], [975, "id2"], [976, "bug-fixes"], [976, "id2"], [977, "bug-fixes"], [977, "id2"], [978, "bug-fixes"], [978, "id4"], [979, "bug-fixes"], [979, "id3"]], "Version 0.15.1": [[975, "version-0-15-1"]], "Version 0.15": [[975, "version-0-15"]], "New features": [[975, "new-features"], [976, "new-features"], [977, "new-features"], [978, "new-features"], [979, "new-features"]], "Enhancements": [[975, "enhancements"], [976, "enhancements"], [977, "enhancements"], [978, "enhancements"], [978, "id3"], [979, "enhancements"], [979, "id2"]], "Documentation improvements": [[975, "documentation-improvements"], [976, "documentation-improvements"]], "Version 0.16.1": [[976, "version-0-16-1"]], "Version 0.16": [[976, "version-0-16"]], "Code Contributors": [[976, "code-contributors"], [977, "code-contributors"], [978, "code-contributors"], [978, "id6"]], "Version 0.17.1": [[977, "version-0-17-1"]], "Version 0.17": [[977, "version-0-17"]], "Version 0.18.2": [[978, "version-0-18-2"]], "Last release with Python 2.6 support": [[978, null], [978, null]], "Version 0.18.1": [[978, "version-0-18-1"]], "Version 0.18": [[978, "version-0-18"]], "Model Selection Enhancements and API Changes": [[978, "model-selection-enhancements-and-api-changes"]], "Version 0.19.2": [[979, "version-0-19-2"]], "Related changes": [[979, "related-changes"]], "Version 0.19.1": [[979, "version-0-19-1"]], "API changes": [[979, "api-changes"]], "Code and Documentation Contributors": [[979, "code-and-documentation-contributors"], [979, "id9"], [980, "code-and-documentation-contributors"], [980, "id8"], [980, "id21"], [980, "id41"], [981, "code-and-documentation-contributors"], [982, "code-and-documentation-contributors"], [983, "code-and-documentation-contributors"], [984, "code-and-documentation-contributors"], [985, "code-and-documentation-contributors"], [986, "code-and-documentation-contributors"], [987, "code-and-documentation-contributors"], [988, "code-and-documentation-contributors"]], "Version 0.19": [[979, "version-0-19"]], "Changed models": [[979, "changed-models"], [980, "changed-models"], [980, "id9"], [980, "id22"], [981, "changed-models"], [981, "id6"], [982, "changed-models"], [983, "changed-models"], [983, "id3"], [984, "changed-models"], [985, "changed-models"], [986, "changed-models"], [986, "id6"], [987, "changed-models"], [987, "id7"], [988, "changed-models"]], "Version 0.20.4": [[980, "version-0-20-4"]], "sklearn.cluster": [[980, "sklearn-cluster"], [980, "id2"], [980, "id11"], [980, "id24"], [981, "sklearn-cluster"], [981, "id8"], [982, "sklearn-cluster"], [982, "id5"], [983, "sklearn-cluster"], [983, "id2"], [983, "id5"], [984, "sklearn-cluster"], [985, "sklearn-cluster"], [985, "id2"], [985, "id9"], [986, "sklearn-cluster"], [986, "id8"], [987, "sklearn-cluster"], [987, "id12"], [988, "sklearn-cluster"]], "sklearn.compose": [[980, "sklearn-compose"], [980, "id3"], [980, "id6"], [980, "id12"], [980, "id25"], [981, "sklearn-compose"], [981, "id9"], [982, "sklearn-compose"], [983, "sklearn-compose"], [984, "sklearn-compose"], [984, "id5"], [985, "sklearn-compose"], [986, "sklearn-compose"], [987, "sklearn-compose"]], "sklearn.decomposition": [[980, "sklearn-decomposition"], [980, "id4"], [980, "id14"], [980, "id28"], [981, "sklearn-decomposition"], [981, "id11"], [982, "sklearn-decomposition"], [983, "sklearn-decomposition"], [983, "id6"], [984, "sklearn-decomposition"], [984, "id7"], [985, "sklearn-decomposition"], [985, "id11"], [986, "sklearn-decomposition"], [986, "id10"], [987, "sklearn-decomposition"], [987, "id14"], [988, "sklearn-decomposition"]], "sklearn.model_selection": [[980, "sklearn-model-selection"], [980, "id35"], [981, "sklearn-model-selection"], [982, "sklearn-model-selection"], [982, "id9"], [982, "id13"], [983, "sklearn-model-selection"], [984, "sklearn-model-selection"], [984, "id12"], [985, "sklearn-model-selection"], [986, "sklearn-model-selection"], [987, "sklearn-model-selection"], [987, "id20"], [988, "sklearn-model-selection"]], "sklearn.neighbors": [[980, "sklearn-neighbors"], [980, "id7"], [980, "id18"], [980, "id36"], [981, "sklearn-neighbors"], [981, "id5"], [981, "id17"], [982, "sklearn-neighbors"], [982, "id11"], [984, "sklearn-neighbors"], [985, "sklearn-neighbors"], [985, "id5"], [985, "id18"], [986, "sklearn-neighbors"], [987, "sklearn-neighbors"], [988, "sklearn-neighbors"]], "Version 0.20.3": [[980, "version-0-20-3"]], "sklearn.covariance": [[980, "sklearn-covariance"], [980, "id26"], [984, "sklearn-covariance"], [985, "sklearn-covariance"], [986, "sklearn-covariance"]], "sklearn.datasets": [[980, "sklearn-datasets"], [980, "id13"], [980, "id27"], [981, "sklearn-datasets"], [981, "id10"], [982, "sklearn-datasets"], [983, "sklearn-datasets"], [984, "sklearn-datasets"], [985, "sklearn-datasets"], [985, "id10"], [986, "sklearn-datasets"], [986, "id9"], [987, "sklearn-datasets"], [987, "id13"], [988, "sklearn-datasets"]], "sklearn.feature_extraction": [[980, "sklearn-feature-extraction"], [980, "id15"], [980, "id30"], [981, "sklearn-feature-extraction"], [982, "sklearn-feature-extraction"], [983, "sklearn-feature-extraction"], [983, "id8"], [984, "sklearn-feature-extraction"], [985, "sklearn-feature-extraction"], [985, "id13"], [986, "sklearn-feature-extraction"], [987, "sklearn-feature-extraction"], [988, "sklearn-feature-extraction"]], "sklearn.impute": [[980, "sklearn-impute"], [980, "id31"], [981, "sklearn-impute"], [981, "id13"], [982, "sklearn-impute"], [982, "id6"], [983, "sklearn-impute"], [984, "sklearn-impute"], [985, "sklearn-impute"], [986, "sklearn-impute"], [986, "id12"], [987, "sklearn-impute"], [988, "sklearn-impute"]], "sklearn.linear_model": [[980, "sklearn-linear-model"], [980, "id16"], [980, "id32"], [981, "sklearn-linear-model"], [981, "id15"], [982, "sklearn-linear-model"], [983, "sklearn-linear-model"], [983, "id9"], [984, "sklearn-linear-model"], [984, "id10"], [985, "sklearn-linear-model"], [985, "id4"], [985, "id15"], [986, "sklearn-linear-model"], [986, "id13"], [987, "sklearn-linear-model"], [987, "id18"], [988, "sklearn-linear-model"]], "sklearn.preprocessing": [[980, "sklearn-preprocessing"], [980, "id19"], [980, "id37"], [981, "sklearn-preprocessing"], [981, "id18"], [982, "sklearn-preprocessing"], [982, "id12"], [983, "sklearn-preprocessing"], [984, "sklearn-preprocessing"], [984, "id14"], [985, "sklearn-preprocessing"], [985, "id20"], [986, "sklearn-preprocessing"], [986, "id4"], [986, "id16"], [987, "sklearn-preprocessing"], [987, "id4"], [987, "id22"], [988, "sklearn-preprocessing"]], "sklearn.svm": [[980, "sklearn-svm"], [980, "id38"], [981, "sklearn-svm"], [982, "sklearn-svm"], [983, "sklearn-svm"], [984, "sklearn-svm"], [985, "sklearn-svm"], [985, "id21"], [986, "sklearn-svm"], [987, "sklearn-svm"]], "Version 0.20.2": [[980, "version-0-20-2"]], "sklearn.metrics": [[980, "sklearn-metrics"], [980, "id17"], [980, "id33"], [981, "sklearn-metrics"], [981, "id4"], [981, "id16"], [982, "sklearn-metrics"], [982, "id2"], [982, "id8"], [983, "sklearn-metrics"], [983, "id10"], [984, "sklearn-metrics"], [984, "id2"], [984, "id11"], [985, "sklearn-metrics"], [985, "id17"], [986, "sklearn-metrics"], [986, "id3"], [986, "id15"], [987, "sklearn-metrics"], [988, "sklearn-metrics"]], "sklearn.utils": [[980, "sklearn-utils"], [980, "id20"], [980, "id39"], [981, "sklearn-utils"], [982, "sklearn-utils"], [982, "id14"], [983, "sklearn-utils"], [983, "id12"], [984, "sklearn-utils"], [984, "id17"], [985, "sklearn-utils"], [985, "id6"], [985, "id23"], [986, "sklearn-utils"], [986, "id18"], [987, "sklearn-utils"], [987, "id6"], [987, "id24"], [988, "sklearn-utils"]], "Version 0.20.1": [[980, "version-0-20-1"]], "sklearn.ensemble": [[980, "sklearn-ensemble"], [980, "id29"], [981, "sklearn-ensemble"], [981, "id12"], [982, "sklearn-ensemble"], [983, "sklearn-ensemble"], [983, "id7"], [984, "sklearn-ensemble"], [984, "id8"], [985, "sklearn-ensemble"], [985, "id3"], [985, "id12"], [986, "sklearn-ensemble"], [987, "sklearn-ensemble"], [987, "id3"], [987, "id15"], [988, "sklearn-ensemble"]], "sklearn.mixture": [[980, "sklearn-mixture"], [980, "id34"], [981, "sklearn-mixture"], [985, "sklearn-mixture"], [986, "sklearn-mixture"]], "Version 0.20.0": [[980, "version-0-20-0"]], "Known Major Bugs": [[980, "known-major-bugs"], [981, "known-major-bugs"]], "sklearn.discriminant_analysis": [[980, "sklearn-discriminant-analysis"], [981, "sklearn-discriminant-analysis"], [984, "sklearn-discriminant-analysis"], [986, "sklearn-discriminant-analysis"], [987, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[980, "sklearn-dummy"], [981, "sklearn-dummy"], [982, "sklearn-dummy"], [985, "sklearn-dummy"], [986, "sklearn-dummy"]], "sklearn.feature_selection": [[980, "sklearn-feature-selection"], [982, "sklearn-feature-selection"], [983, "sklearn-feature-selection"], [984, "sklearn-feature-selection"], [985, "sklearn-feature-selection"], [985, "id14"], [986, "sklearn-feature-selection"], [986, "id2"], [986, "id11"], [987, "sklearn-feature-selection"], [987, "id16"], [988, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[980, "sklearn-gaussian-process"], [982, "sklearn-gaussian-process"], [983, "sklearn-gaussian-process"], [984, "sklearn-gaussian-process"], [984, "id9"], [985, "sklearn-gaussian-process"], [986, "sklearn-gaussian-process"], [987, "sklearn-gaussian-process"]], "sklearn.isotonic": [[980, "sklearn-isotonic"], [981, "sklearn-isotonic"], [982, "sklearn-isotonic"], [984, "sklearn-isotonic"], [986, "sklearn-isotonic"], [987, "sklearn-isotonic"]], "sklearn.manifold": [[980, "sklearn-manifold"], [981, "sklearn-manifold"], [982, "sklearn-manifold"], [983, "sklearn-manifold"], [984, "sklearn-manifold"], [985, "sklearn-manifold"], [985, "id16"], [986, "sklearn-manifold"], [986, "id14"], [987, "sklearn-manifold"], [987, "id19"]], "sklearn.multioutput": [[980, "sklearn-multioutput"], [981, "sklearn-multioutput"], [982, "sklearn-multioutput"], [983, "sklearn-multioutput"], [984, "sklearn-multioutput"], [984, "id13"], [987, "sklearn-multioutput"]], "sklearn.naive_bayes": [[980, "sklearn-naive-bayes"], [982, "sklearn-naive-bayes"], [982, "id10"], [983, "sklearn-naive-bayes"], [984, "sklearn-naive-bayes"], [985, "sklearn-naive-bayes"], [987, "sklearn-naive-bayes"], [988, "sklearn-naive-bayes"]], "sklearn.neural_network": [[980, "sklearn-neural-network"], [981, "sklearn-neural-network"], [982, "sklearn-neural-network"], [983, "sklearn-neural-network"], [984, "sklearn-neural-network"], [985, "sklearn-neural-network"], [986, "sklearn-neural-network"], [987, "sklearn-neural-network"], [987, "id21"], [988, "sklearn-neural-network"]], "sklearn.pipeline": [[980, "sklearn-pipeline"], [981, "sklearn-pipeline"], [982, "sklearn-pipeline"], [983, "sklearn-pipeline"], [984, "sklearn-pipeline"], [985, "sklearn-pipeline"], [985, "id19"], [986, "sklearn-pipeline"], [987, "sklearn-pipeline"], [988, "sklearn-pipeline"]], "sklearn.tree": [[980, "sklearn-tree"], [981, "sklearn-tree"], [981, "id19"], [982, "sklearn-tree"], [983, "sklearn-tree"], [984, "sklearn-tree"], [984, "id16"], [985, "sklearn-tree"], [985, "id22"], [986, "sklearn-tree"], [986, "id5"], [986, "id17"], [987, "sklearn-tree"], [987, "id5"], [987, "id23"], [988, "sklearn-tree"]], "Multiple modules": [[980, "multiple-modules"], [981, "multiple-modules"]], "Changes to estimator checks": [[980, "changes-to-estimator-checks"], [981, "changes-to-estimator-checks"], [982, "changes-to-estimator-checks"]], "Version 0.21.3": [[981, "version-0-21-3"]], "Legend for changelogs": [[981, "legend-for-changelogs"], [982, "legend-for-changelogs"], [983, "legend-for-changelogs"], [984, "legend-for-changelogs"], [985, "legend-for-changelogs"], [986, "legend-for-changelogs"], [987, "legend-for-changelogs"], [988, "legend-for-changelogs"]], "sklearn.inspection": [[981, "sklearn-inspection"], [981, "id3"], [981, "id14"], [982, "sklearn-inspection"], [982, "id7"], [983, "sklearn-inspection"], [983, "id11"], [984, "sklearn-inspection"], [985, "sklearn-inspection"], [986, "sklearn-inspection"], [987, "sklearn-inspection"], [987, "id17"], [988, "sklearn-inspection"]], "Version 0.21.2": [[981, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[981, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[981, "version-0-21-1"]], "Version 0.21.0": [[981, "version-0-21-0"]], "sklearn.base": [[981, "sklearn-base"], [982, "sklearn-base"], [984, "sklearn-base"], [985, "sklearn-base"], [986, "sklearn-base"], [987, "sklearn-base"], [987, "id2"], [987, "id10"], [988, "sklearn-base"]], "sklearn.calibration": [[981, "sklearn-calibration"], [982, "sklearn-calibration"], [984, "sklearn-calibration"], [985, "sklearn-calibration"], [985, "id8"], [986, "sklearn-calibration"], [987, "sklearn-calibration"], [987, "id11"], [988, "sklearn-calibration"]], "sklearn.externals": [[981, "sklearn-externals"]], "sklearn.multiclass": [[981, "sklearn-multiclass"], [984, "sklearn-multiclass"], [985, "sklearn-multiclass"], [986, "sklearn-multiclass"]], "Version 0.22.2.post1": [[982, "version-0-22-2-post1"]], "Version 0.22.1": [[982, "version-0-22-1"]], "sklearn.semi_supervised": [[982, "sklearn-semi-supervised"], [983, "sklearn-semi-supervised"], [984, "sklearn-semi-supervised"], [984, "id3"], [984, "id15"], [988, "sklearn-semi-supervised"]], "Version 0.22.0": [[982, "version-0-22-0"]], "Website update": [[982, "website-update"]], "Clear definition of the public API": [[982, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[982, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[982, "sklearn-cross-decomposition"], [984, "sklearn-cross-decomposition"], [984, "id6"], [986, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[982, "sklearn-kernel-approximation"], [984, "sklearn-kernel-approximation"], [985, "sklearn-kernel-approximation"], [986, "sklearn-kernel-approximation"], [987, "sklearn-kernel-approximation"]], "Version 0.23.2": [[983, "version-0-23-2"]], "Version 0.23.1": [[983, "version-0-23-1"]], "Version 0.23.0": [[983, "version-0-23-0"]], "Enforcing keyword-only arguments": [[983, "enforcing-keyword-only-arguments"], [985, "enforcing-keyword-only-arguments"]], "Version 0.24.2": [[984, "version-0-24-2"]], "feature_extraction": [[984, "feature-extraction"]], "Version 0.24.1": [[984, "version-0-24-1"]], "Packaging": [[984, "packaging"]], "Version 0.24.0": [[984, "version-0-24-0"]], "sklearn.exceptions": [[984, "sklearn-exceptions"]], "Version 1.0.2": [[985, "version-1-0-2"]], "Version 1.0.1": [[985, "version-1-0-1"]], "Fixed models": [[985, "fixed-models"]], "Version 1.0.0": [[985, "version-1-0-0"]], "Minimal dependencies": [[985, "minimal-dependencies"], [986, "minimal-dependencies"]], "Version 1.1.3": [[986, "version-1-1-3"]], "Version 1.1.2": [[986, "version-1-1-2"]], "Version 1.1.1": [[986, "version-1-1-1"]], "Version 1.1.0": [[986, "version-1-1-0"]], "sklearn.random_projection": [[986, "sklearn-random-projection"]], "Version 1.2.2": [[987, "version-1-2-2"]], "Version 1.2.1": [[987, "version-1-2-1"]], "Changes impacting all modules": [[987, "changes-impacting-all-modules"], [987, "id8"], [988, "changes-impacting-all-modules"]], "Version 1.2.0": [[987, "version-1-2-0"]], "Version 1.3.0": [[988, "version-1-3-0"]], "sklearn.exception": [[988, "sklearn-exception"]]}, "indexentries": {"1d": [[350, "term-1d"]], "1d array": [[350, "term-1d-array"]], "2d": [[350, "term-2d"]], "2d array": [[350, "term-2d-array"]], "api": [[350, "term-API"]], "cv splitter": [[350, "term-CV-splitter"]], "slep": [[350, "term-SLEP"]], "sleps": [[350, "term-SLEPs"]], "x": [[350, "term-X"]], "xt": [[350, "term-Xt"]], "y": [[350, "term-Y"], [350, "term-y"]], "_estimator_type": [[350, "term-_estimator_type"]], "array-like": [[350, "term-array-like"]], "attribute": [[350, "term-attribute"]], "attributes": [[350, "term-attributes"]], "backwards compatibility": [[350, "term-backwards-compatibility"]], "binary": [[350, "term-binary"]], "callable": [[350, "term-callable"]], "categorical feature": [[350, "term-categorical-feature"]], "class_weight": [[350, "term-class_weight"]], "classes_": [[350, "term-classes_"]], "classifier": [[350, "term-classifier"]], "classifiers": [[350, "term-classifiers"]], "clone": [[350, "term-clone"]], "cloned": [[350, "term-cloned"]], "clusterer": [[350, "term-clusterer"]], "clusterers": [[350, "term-clusterers"]], "coef_": [[350, "term-coef_"]], "common tests": [[350, "term-common-tests"]], "components_": [[350, "term-components_"]], "continuous": [[350, "term-continuous"]], "continuous multi-output": [[350, "term-continuous-multi-output"]], "continuous multioutput": [[350, "term-continuous-multioutput"]], "cross-validation estimator": [[350, "term-cross-validation-estimator"]], "cross-validation generator": [[350, "term-cross-validation-generator"]], "cross-validation splitter": [[350, "term-cross-validation-splitter"]], "cv": [[350, "term-cv"]], "data leakage": [[350, "term-data-leakage"]], "data type": [[350, "term-data-type"]], "decision_function": [[350, "term-decision_function"]], "density estimator": [[350, "term-density-estimator"]], "deprecation": [[350, "term-deprecation"]], "dimensionality": [[350, "term-dimensionality"]], "docstring": [[350, "term-docstring"]], "double underscore": [[350, "term-double-underscore"]], "double underscore notation": [[350, "term-double-underscore-notation"]], "dtype": [[350, "term-dtype"]], "duck typing": [[350, "term-duck-typing"]], "early stopping": [[350, "term-early-stopping"]], "embedding_": [[350, "term-embedding_"]], "estimator": [[350, "term-estimator"]], "estimator instance": [[350, "term-estimator-instance"]], "estimator tags": [[350, "term-estimator-tags"]], "estimators": [[350, "term-estimators"]], "evaluation metric": [[350, "term-evaluation-metric"]], "evaluation metrics": [[350, "term-evaluation-metrics"]], "examples": [[350, "term-examples"]], "experimental": [[350, "term-experimental"]], "feature": [[350, "term-feature"]], "feature extractor": [[350, "term-feature-extractor"]], "feature extractors": [[350, "term-feature-extractors"]], "feature vector": [[350, "term-feature-vector"]], "feature_importances_": [[350, "term-feature_importances_"]], "features": [[350, "term-features"]], "fit": [[350, "term-fit"]], "fit_predict": [[350, "term-fit_predict"]], "fit_transform": [[350, "term-fit_transform"]], "fitted": [[350, "term-fitted"]], "fitting": [[350, "term-fitting"]], "function": [[350, "term-function"]], "gallery": [[350, "term-gallery"]], "get_feature_names_out": [[350, "term-get_feature_names_out"]], "get_n_splits": [[350, "term-get_n_splits"]], "get_params": [[350, "term-get_params"]], "groups": [[350, "term-groups"]], "hyper-parameter": [[350, "term-hyper-parameter"]], "hyperparameter": [[350, "term-hyperparameter"]], "imputation": [[350, "term-imputation"]], "impute": [[350, "term-impute"]], "indexable": [[350, "term-indexable"]], "induction": [[350, "term-induction"]], "inductive": [[350, "term-inductive"]], "joblib": [[350, "term-joblib"]], "kernel": [[350, "term-kernel"]], "label indicator matrix": [[350, "term-label-indicator-matrix"]], "labels_": [[350, "term-labels_"]], "leakage": [[350, "term-leakage"]], "max_iter": [[350, "term-max_iter"]], "memmapping": [[350, "term-memmapping"]], "memory": [[350, "term-memory"]], "memory map": [[350, "term-memory-map"]], "memory mapping": [[350, "term-memory-mapping"]], "meta-estimator": [[350, "term-meta-estimator"]], "meta-estimators": [[350, "term-meta-estimators"]], "metaestimator": [[350, "term-metaestimator"]], "metaestimators": [[350, "term-metaestimators"]], "metric": [[350, "term-metric"]], "missing values": [[350, "term-missing-values"]], "multi-class": [[350, "term-multi-class"]], "multi-class multi-output": [[350, "term-multi-class-multi-output"]], "multi-label": [[350, "term-multi-label"]], "multi-output": [[350, "term-multi-output"]], "multi-output continuous": [[350, "term-multi-output-continuous"]], "multi-output multi-class": [[350, "term-multi-output-multi-class"]], "multiclass": [[350, "term-multiclass"]], "multiclass multioutput": [[350, "term-multiclass-multioutput"]], "multilabel": [[350, "term-multilabel"]], "multilabel indicator matrices": [[350, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[350, "term-multilabel-indicator-matrix"]], "multioutput": [[350, "term-multioutput"]], "multioutput continuous": [[350, "term-multioutput-continuous"]], "multioutput multiclass": [[350, "term-multioutput-multiclass"]], "n_components": [[350, "term-n_components"]], "n_features": [[350, "term-n_features"]], "n_iter_": [[350, "term-n_iter_"]], "n_iter_no_change": [[350, "term-n_iter_no_change"]], "n_jobs": [[350, "term-n_jobs"]], "n_outputs": [[350, "term-n_outputs"]], "n_samples": [[350, "term-n_samples"]], "n_targets": [[350, "term-n_targets"]], "narrative docs": [[350, "term-narrative-docs"]], "narrative documentation": [[350, "term-narrative-documentation"]], "np": [[350, "term-np"]], "online learning": [[350, "term-online-learning"]], "out-of-core": [[350, "term-out-of-core"]], "outlier detector": [[350, "term-outlier-detector"]], "outlier detectors": [[350, "term-outlier-detectors"]], "outputs": [[350, "term-outputs"]], "pair": [[350, "term-pair"]], "pairwise metric": [[350, "term-pairwise-metric"]], "pairwise metrics": [[350, "term-pairwise-metrics"]], "param": [[350, "term-param"]], "parameter": [[350, "term-parameter"]], "parameters": [[350, "term-parameters"]], "params": [[350, "term-params"]], "partial_fit": [[350, "term-partial_fit"]], "pd": [[350, "term-pd"]], "pos_label": [[350, "term-pos_label"]], "precomputed": [[350, "term-precomputed"]], "predict": [[350, "term-predict"]], "predict_log_proba": [[350, "term-predict_log_proba"]], "predict_proba": [[350, "term-predict_proba"]], "predictor": [[350, "term-predictor"]], "predictors": [[350, "term-predictors"]], "random_state": [[350, "term-random_state"]], "rectangular": [[350, "term-rectangular"]], "regressor": [[350, "term-regressor"]], "regressors": [[350, "term-regressors"]], "sample": [[350, "term-sample"]], "sample properties": [[350, "term-sample-properties"]], "sample property": [[350, "term-sample-property"]], "sample_weight": [[350, "term-sample_weight"]], "samples": [[350, "term-samples"]], "scikit-learn enhancement proposals": [[350, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[350, "term-scikit-learn-contrib"]], "score": [[350, "term-score"]], "score_samples": [[350, "term-score_samples"]], "scorer": [[350, "term-scorer"]], "scoring": [[350, "term-scoring"]], "semi-supervised": [[350, "term-semi-supervised"]], "semi-supervised learning": [[350, "term-semi-supervised-learning"]], "semisupervised": [[350, "term-semisupervised"]], "set_params": [[350, "term-set_params"]], "sparse graph": [[350, "term-sparse-graph"]], "sparse matrix": [[350, "term-sparse-matrix"]], "split": [[350, "term-split"]], "stateless": [[350, "term-stateless"]], "supervised": [[350, "term-supervised"]], "supervised learning": [[350, "term-supervised-learning"]], "target": [[350, "term-target"]], "targets": [[350, "term-targets"]], "transduction": [[350, "term-transduction"]], "transductive": [[350, "term-transductive"]], "transform": [[350, "term-transform"]], "transformer": [[350, "term-transformer"]], "transformers": [[350, "term-transformers"]], "unlabeled": [[350, "term-unlabeled"]], "unlabeled data": [[350, "term-unlabeled-data"]], "unsupervised": [[350, "term-unsupervised"]], "unsupervised learning": [[350, "term-unsupervised-learning"]], "vectorizer": [[350, "term-vectorizer"]], "vectorizers": [[350, "term-vectorizers"]], "verbose": [[350, "term-verbose"]], "warm_start": [[350, "term-warm_start"]], "module": [[361, "module-sklearn.base"], [361, "module-sklearn.calibration"], [361, "module-sklearn.cluster"], [361, "module-sklearn.compose"], [361, "module-sklearn.covariance"], [361, "module-sklearn.cross_decomposition"], [361, "module-sklearn.datasets"], [361, "module-sklearn.decomposition"], [361, "module-sklearn.discriminant_analysis"], [361, "module-sklearn.dummy"], [361, "module-sklearn.ensemble"], [361, "module-sklearn.exceptions"], [361, "module-sklearn.experimental"], [361, "module-sklearn.feature_extraction"], [361, "module-sklearn.feature_extraction.image"], [361, "module-sklearn.feature_extraction.text"], [361, "module-sklearn.feature_selection"], [361, "module-sklearn.gaussian_process"], [361, "module-sklearn.impute"], [361, "module-sklearn.inspection"], [361, "module-sklearn.isotonic"], [361, "module-sklearn.kernel_approximation"], [361, "module-sklearn.kernel_ridge"], [361, "module-sklearn.linear_model"], [361, "module-sklearn.manifold"], [361, "module-sklearn.metrics"], [361, "module-sklearn.metrics.cluster"], [361, "module-sklearn.metrics.pairwise"], [361, "module-sklearn.mixture"], [361, "module-sklearn.model_selection"], [361, "module-sklearn.multiclass"], [361, "module-sklearn.multioutput"], [361, "module-sklearn.naive_bayes"], [361, "module-sklearn.neighbors"], [361, "module-sklearn.neural_network"], [361, "module-sklearn.pipeline"], [361, "module-sklearn.preprocessing"], [361, "module-sklearn.random_projection"], [361, "module-sklearn.semi_supervised"], [361, "module-sklearn.svm"], [361, "module-sklearn.tree"], [361, "module-sklearn.utils"], [529, "module-sklearn.experimental.enable_halving_search_cv"], [530, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.base": [[361, "module-sklearn.base"]], "sklearn.calibration": [[361, "module-sklearn.calibration"]], "sklearn.cluster": [[361, "module-sklearn.cluster"]], "sklearn.compose": [[361, "module-sklearn.compose"]], "sklearn.covariance": [[361, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[361, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[361, "module-sklearn.datasets"]], "sklearn.decomposition": [[361, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[361, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[361, "module-sklearn.dummy"]], "sklearn.ensemble": [[361, "module-sklearn.ensemble"]], "sklearn.exceptions": [[361, "module-sklearn.exceptions"]], "sklearn.experimental": [[361, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[361, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[361, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[361, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[361, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[361, "module-sklearn.gaussian_process"]], "sklearn.impute": [[361, "module-sklearn.impute"]], "sklearn.inspection": [[361, "module-sklearn.inspection"]], "sklearn.isotonic": [[361, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[361, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[361, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[361, "module-sklearn.linear_model"]], "sklearn.manifold": [[361, "module-sklearn.manifold"]], "sklearn.metrics": [[361, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[361, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[361, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[361, "module-sklearn.mixture"]], "sklearn.model_selection": [[361, "module-sklearn.model_selection"]], "sklearn.multiclass": [[361, "module-sklearn.multiclass"]], "sklearn.multioutput": [[361, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[361, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[361, "module-sklearn.neighbors"]], "sklearn.neural_network": [[361, "module-sklearn.neural_network"]], "sklearn.pipeline": [[361, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[361, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[361, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[361, "module-sklearn.semi_supervised"]], "sklearn.svm": [[361, "module-sklearn.svm"]], "sklearn.tree": [[361, "module-sklearn.tree"]], "sklearn.utils": [[361, "module-sklearn.utils"]], "dbscan() (in module sklearn.cluster)": [[373, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[374, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[375, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[376, "sklearn.base.BaseEstimator"]], "get_params() (sklearn.base.baseestimator method)": [[376, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[376, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[377, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[377, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[377, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[377, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[377, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[378, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[378, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[379, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[379, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[380, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[380, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[381, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[381, "sklearn.base.DensityMixin.score"]], "onetoonefeaturemixin (class in sklearn.base)": [[382, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[382, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "regressormixin (class in sklearn.base)": [[383, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[383, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[384, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[384, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[384, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[385, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[386, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[387, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[388, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[388, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[388, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[388, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[388, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[388, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[388, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "calibrationdisplay (class in sklearn.calibration)": [[389, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[389, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[389, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[389, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[390, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[391, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[391, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[391, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[391, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[391, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[391, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[392, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[392, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[392, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[392, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[392, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[393, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[393, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[393, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[393, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[393, "sklearn.cluster.Birch.get_feature_names_out"]], "get_params() (sklearn.cluster.birch method)": [[393, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[393, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[393, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[393, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[393, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[393, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[394, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[394, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[394, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[394, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[394, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[394, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[394, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[394, "sklearn.cluster.BisectingKMeans.score"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[394, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[394, "sklearn.cluster.BisectingKMeans.set_params"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[394, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[395, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[395, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[395, "sklearn.cluster.DBSCAN.fit_predict"]], "get_params() (sklearn.cluster.dbscan method)": [[395, "sklearn.cluster.DBSCAN.get_params"]], "set_params() (sklearn.cluster.dbscan method)": [[395, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[396, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[396, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[396, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[396, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[396, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[396, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[396, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[396, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[396, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[396, "sklearn.cluster.FeatureAgglomeration.transform"]], "kmeans (class in sklearn.cluster)": [[397, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[397, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[397, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[397, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[397, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.kmeans method)": [[397, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[397, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[397, "sklearn.cluster.KMeans.score"]], "set_output() (sklearn.cluster.kmeans method)": [[397, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[397, "sklearn.cluster.KMeans.set_params"]], "transform() (sklearn.cluster.kmeans method)": [[397, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[398, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[398, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[398, "sklearn.cluster.MeanShift.fit_predict"]], "get_params() (sklearn.cluster.meanshift method)": [[398, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[398, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[398, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[399, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[399, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[399, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[399, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[399, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[399, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[399, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[399, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[399, "sklearn.cluster.MiniBatchKMeans.score"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[399, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[399, "sklearn.cluster.MiniBatchKMeans.set_params"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[399, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[400, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[400, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[400, "sklearn.cluster.OPTICS.fit_predict"]], "get_params() (sklearn.cluster.optics method)": [[400, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[400, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[401, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[401, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[401, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[401, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[401, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[401, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[401, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[401, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[402, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[402, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[402, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_params() (sklearn.cluster.spectralclustering method)": [[402, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[402, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[403, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[403, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[403, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[403, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[403, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[403, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[403, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[403, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[404, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[405, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[406, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[407, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[408, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[409, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[410, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[411, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[412, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[413, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[414, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[414, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[414, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[414, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_params() (sklearn.compose.columntransformer method)": [[414, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[414, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[414, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[414, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[414, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[415, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[415, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[415, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[415, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[415, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[415, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[415, "sklearn.compose.TransformedTargetRegressor.set_params"]], "make_column_selector() (in module sklearn.compose)": [[416, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[417, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[418, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[419, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[419, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[419, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[419, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[419, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[419, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[419, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[419, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[419, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[419, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[419, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[419, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[419, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[419, "sklearn.covariance.EllipticEnvelope.set_params"]], "empiricalcovariance (class in sklearn.covariance)": [[420, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[420, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[420, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[420, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[420, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[420, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[420, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[420, "sklearn.covariance.EmpiricalCovariance.set_params"]], "graphicallasso (class in sklearn.covariance)": [[421, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[421, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[421, "sklearn.covariance.GraphicalLasso.fit"]], "get_params() (sklearn.covariance.graphicallasso method)": [[421, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[421, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[421, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[421, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[421, "sklearn.covariance.GraphicalLasso.set_params"]], "graphicallassocv (class in sklearn.covariance)": [[422, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[422, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[422, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[422, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[422, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[422, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[422, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[422, "sklearn.covariance.GraphicalLassoCV.set_params"]], "ledoitwolf (class in sklearn.covariance)": [[423, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[423, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[423, "sklearn.covariance.LedoitWolf.fit"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[423, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[423, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[423, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[423, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[423, "sklearn.covariance.LedoitWolf.set_params"]], "mincovdet (class in sklearn.covariance)": [[424, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[424, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[424, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[424, "sklearn.covariance.MinCovDet.fit"]], "get_params() (sklearn.covariance.mincovdet method)": [[424, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[424, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[424, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[424, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[424, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[424, "sklearn.covariance.MinCovDet.set_params"]], "oas (class in sklearn.covariance)": [[425, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[425, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[425, "sklearn.covariance.OAS.fit"]], "get_params() (sklearn.covariance.oas method)": [[425, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[425, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[425, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[425, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[425, "sklearn.covariance.OAS.set_params"]], "shrunkcovariance (class in sklearn.covariance)": [[426, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[426, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[426, "sklearn.covariance.ShrunkCovariance.fit"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[426, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[426, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[426, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[426, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[426, "sklearn.covariance.ShrunkCovariance.set_params"]], "empirical_covariance() (in module sklearn.covariance)": [[427, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[428, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[429, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[430, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[431, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[432, "sklearn.cross_decomposition.CCA"]], "coef_ (sklearn.cross_decomposition.cca property)": [[432, "sklearn.cross_decomposition.CCA.coef_"]], "fit() (sklearn.cross_decomposition.cca method)": [[432, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[432, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[432, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.cca method)": [[432, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[432, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[432, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[432, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[432, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[432, "sklearn.cross_decomposition.CCA.set_params"]], "transform() (sklearn.cross_decomposition.cca method)": [[432, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[433, "sklearn.cross_decomposition.PLSCanonical"]], "coef_ (sklearn.cross_decomposition.plscanonical property)": [[433, "sklearn.cross_decomposition.PLSCanonical.coef_"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[433, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[433, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[433, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[433, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[433, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[433, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[433, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[433, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[433, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[433, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[434, "sklearn.cross_decomposition.PLSRegression"]], "coef_ (sklearn.cross_decomposition.plsregression property)": [[434, "sklearn.cross_decomposition.PLSRegression.coef_"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[434, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[434, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[434, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[434, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[434, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[434, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[434, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[434, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[434, "sklearn.cross_decomposition.PLSRegression.set_params"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[434, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[435, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[435, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[435, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[435, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[435, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[435, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[435, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[435, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[436, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[437, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[438, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[439, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[440, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[441, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[442, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[443, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[444, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[445, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[446, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[447, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[448, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[449, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[450, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[451, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[452, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[453, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[454, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[455, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[456, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[457, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[458, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[459, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[460, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[461, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[462, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[463, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[464, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[465, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[466, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[467, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[468, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[469, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[470, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[471, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[472, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[473, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[474, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[475, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[476, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[477, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[478, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[479, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[480, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[481, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[481, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[481, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[481, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[481, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[481, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[481, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[481, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[482, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[482, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[482, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[482, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[482, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[482, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[482, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[482, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[482, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[482, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[482, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[482, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[483, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[483, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[483, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[483, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_params() (sklearn.decomposition.fastica method)": [[483, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[483, "sklearn.decomposition.FastICA.inverse_transform"]], "set_output() (sklearn.decomposition.fastica method)": [[483, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[483, "sklearn.decomposition.FastICA.set_params"]], "transform() (sklearn.decomposition.fastica method)": [[483, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[484, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[484, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[484, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[484, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[484, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[484, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[484, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[484, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[484, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[484, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[484, "sklearn.decomposition.IncrementalPCA.set_params"]], "transform() (sklearn.decomposition.incrementalpca method)": [[484, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[485, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[485, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[485, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[485, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.kernelpca method)": [[485, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[485, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[485, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[485, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[485, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[486, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[486, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[486, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[486, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[486, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[486, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[486, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[486, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[486, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[486, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[486, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[487, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[487, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[487, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[487, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[487, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[487, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[487, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[487, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[487, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[488, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[488, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[488, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[488, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[488, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[488, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[488, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[488, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[488, "sklearn.decomposition.MiniBatchNMF.set_params"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[488, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[489, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[489, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[489, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[489, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[489, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[489, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[489, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[489, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[489, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[490, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[490, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[490, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[490, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.nmf method)": [[490, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[490, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[490, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[490, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[490, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[491, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[491, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[491, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[491, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[491, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.pca method)": [[491, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[491, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[491, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[491, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[491, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[491, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[491, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[491, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[492, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[492, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[492, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[492, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[492, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[492, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[492, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[492, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[492, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[492, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[493, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[493, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[493, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[493, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsepca method)": [[493, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[493, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[493, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[493, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[493, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[494, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[494, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[494, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[494, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[494, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[494, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[494, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[494, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[494, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[495, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[496, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[497, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[498, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[499, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[499, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[499, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[499, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[499, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[499, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[499, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[499, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[499, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[499, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[499, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[499, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[499, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[500, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "dummyclassifier (class in sklearn.dummy)": [[501, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[501, "sklearn.dummy.DummyClassifier.fit"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[501, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[501, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[501, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[501, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[501, "sklearn.dummy.DummyClassifier.score"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[501, "sklearn.dummy.DummyClassifier.set_params"]], "dummyregressor (class in sklearn.dummy)": [[502, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[502, "sklearn.dummy.DummyRegressor.fit"]], "get_params() (sklearn.dummy.dummyregressor method)": [[502, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[502, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[502, "sklearn.dummy.DummyRegressor.score"]], "set_params() (sklearn.dummy.dummyregressor method)": [[502, "sklearn.dummy.DummyRegressor.set_params"]], "adaboostclassifier (class in sklearn.ensemble)": [[503, "sklearn.ensemble.AdaBoostClassifier"]], "base_estimator_ (sklearn.ensemble.adaboostclassifier property)": [[503, "sklearn.ensemble.AdaBoostClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[503, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[503, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[503, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[503, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[503, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[503, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[503, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[503, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[503, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[503, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[503, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[503, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[503, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[504, "sklearn.ensemble.AdaBoostRegressor"]], "base_estimator_ (sklearn.ensemble.adaboostregressor property)": [[504, "sklearn.ensemble.AdaBoostRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[504, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[504, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[504, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[504, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[504, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[504, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[504, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[504, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[505, "sklearn.ensemble.BaggingClassifier"]], "base_estimator_ (sklearn.ensemble.baggingclassifier property)": [[505, "sklearn.ensemble.BaggingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[505, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[505, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[505, "sklearn.ensemble.BaggingClassifier.fit"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[505, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[505, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[505, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[505, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[505, "sklearn.ensemble.BaggingClassifier.score"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[505, "sklearn.ensemble.BaggingClassifier.set_params"]], "baggingregressor (class in sklearn.ensemble)": [[506, "sklearn.ensemble.BaggingRegressor"]], "base_estimator_ (sklearn.ensemble.baggingregressor property)": [[506, "sklearn.ensemble.BaggingRegressor.base_estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[506, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[506, "sklearn.ensemble.BaggingRegressor.fit"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[506, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[506, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[506, "sklearn.ensemble.BaggingRegressor.score"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[506, "sklearn.ensemble.BaggingRegressor.set_params"]], "extratreesclassifier (class in sklearn.ensemble)": [[507, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[507, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "base_estimator_ (sklearn.ensemble.extratreesclassifier property)": [[507, "sklearn.ensemble.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[507, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[507, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[507, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[507, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[507, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[507, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[507, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[507, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[507, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "extratreesregressor (class in sklearn.ensemble)": [[508, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[508, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "base_estimator_ (sklearn.ensemble.extratreesregressor property)": [[508, "sklearn.ensemble.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[508, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[508, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[508, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[508, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[508, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[508, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[508, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[509, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[509, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[509, "sklearn.ensemble.GradientBoostingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[509, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[509, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[509, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[509, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[509, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[509, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[509, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[509, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[509, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[509, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[509, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[509, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[510, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[510, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[510, "sklearn.ensemble.GradientBoostingRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[510, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[510, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[510, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[510, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[510, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[510, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[510, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[511, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[511, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[511, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[511, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[511, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[511, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[511, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[511, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[511, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[511, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[511, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[511, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[512, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[512, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[512, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[512, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[512, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[512, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[512, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[512, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[513, "sklearn.ensemble.IsolationForest"]], "base_estimator_ (sklearn.ensemble.isolationforest property)": [[513, "sklearn.ensemble.IsolationForest.base_estimator_"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[513, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[513, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[513, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[513, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_params() (sklearn.ensemble.isolationforest method)": [[513, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[513, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[513, "sklearn.ensemble.IsolationForest.score_samples"]], "set_params() (sklearn.ensemble.isolationforest method)": [[513, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[514, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[514, "sklearn.ensemble.RandomForestClassifier.apply"]], "base_estimator_ (sklearn.ensemble.randomforestclassifier property)": [[514, "sklearn.ensemble.RandomForestClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[514, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[514, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[514, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[514, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[514, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[514, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[514, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[514, "sklearn.ensemble.RandomForestClassifier.score"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[514, "sklearn.ensemble.RandomForestClassifier.set_params"]], "randomforestregressor (class in sklearn.ensemble)": [[515, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[515, "sklearn.ensemble.RandomForestRegressor.apply"]], "base_estimator_ (sklearn.ensemble.randomforestregressor property)": [[515, "sklearn.ensemble.RandomForestRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[515, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[515, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[515, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[515, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[515, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[515, "sklearn.ensemble.RandomForestRegressor.score"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[515, "sklearn.ensemble.RandomForestRegressor.set_params"]], "randomtreesembedding (class in sklearn.ensemble)": [[516, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[516, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "base_estimator_ (sklearn.ensemble.randomtreesembedding property)": [[516, "sklearn.ensemble.RandomTreesEmbedding.base_estimator_"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[516, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[516, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[516, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[516, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[516, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[516, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[516, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[516, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[516, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[517, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[517, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[517, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[517, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[517, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[517, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[517, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[517, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[517, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[517, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[517, "sklearn.ensemble.StackingClassifier.score"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[517, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[517, "sklearn.ensemble.StackingClassifier.set_params"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[517, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[518, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[518, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[518, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[518, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[518, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[518, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[518, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[518, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[518, "sklearn.ensemble.StackingRegressor.score"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[518, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[518, "sklearn.ensemble.StackingRegressor.set_params"]], "transform() (sklearn.ensemble.stackingregressor method)": [[518, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[519, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[519, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[519, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[519, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[519, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[519, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[519, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[519, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[519, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[519, "sklearn.ensemble.VotingClassifier.score"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[519, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[519, "sklearn.ensemble.VotingClassifier.set_params"]], "transform() (sklearn.ensemble.votingclassifier method)": [[519, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[520, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[520, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[520, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[520, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingregressor method)": [[520, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[520, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[520, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[520, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[520, "sklearn.ensemble.VotingRegressor.score"]], "set_output() (sklearn.ensemble.votingregressor method)": [[520, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[520, "sklearn.ensemble.VotingRegressor.set_params"]], "transform() (sklearn.ensemble.votingregressor method)": [[520, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[521, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[521, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[522, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[522, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[523, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[523, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[524, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[524, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[525, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[525, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[526, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[526, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[527, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[527, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[528, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[528, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[529, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[530, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[531, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[531, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[531, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[531, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[531, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[531, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[531, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[531, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[531, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[531, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[532, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[532, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[532, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[532, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[532, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[532, "sklearn.feature_extraction.FeatureHasher.set_params"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[532, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[533, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[533, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[533, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[533, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[533, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[533, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[533, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[534, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[535, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[536, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[537, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[538, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[538, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[538, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[538, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[538, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[538, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[538, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[538, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[538, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[538, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[538, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[538, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[538, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[539, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[539, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[539, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[539, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[539, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[539, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[539, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[539, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[539, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[539, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[539, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[539, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[539, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[540, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[540, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[540, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[540, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[540, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[540, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[540, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[540, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[540, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[541, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[541, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[541, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[541, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[541, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[541, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[541, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[541, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[541, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[541, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[541, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[541, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[541, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[541, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[542, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[542, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[542, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[542, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[542, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[542, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[542, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[542, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[542, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[542, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[543, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[543, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[543, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[543, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[543, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[543, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfe method)": [[543, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[543, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[543, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[543, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[543, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[543, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[543, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[543, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[543, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[543, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[544, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[544, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[544, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[544, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[544, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[544, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfecv method)": [[544, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[544, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[544, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[544, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[544, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[544, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[544, "sklearn.feature_selection.RFECV.score"]], "set_output() (sklearn.feature_selection.rfecv method)": [[544, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[544, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[544, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[545, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[545, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[545, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[545, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[545, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[545, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[545, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[545, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[545, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[545, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[546, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[546, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[546, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[546, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[546, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[546, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[546, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[546, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[546, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[546, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[547, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[547, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[547, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[547, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[547, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[547, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[547, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[547, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[547, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[547, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[547, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[547, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[547, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[548, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[548, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[548, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[548, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[548, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[548, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[548, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[548, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[548, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[548, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[549, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[549, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[549, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[549, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[549, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[549, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[549, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[549, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[549, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[549, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[550, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[550, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[550, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[550, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[550, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[550, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[550, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[550, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[550, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[550, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[551, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[551, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[551, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[551, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[551, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[551, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[551, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[552, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[552, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[552, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[552, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[552, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[552, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[552, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[552, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[552, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[552, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[553, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[553, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[553, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[553, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[553, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[553, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[553, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[553, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[553, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[553, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[554, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[555, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[556, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[557, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[558, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[559, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[560, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[560, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[560, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[560, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[560, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[560, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[560, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[560, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[560, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[561, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[561, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[561, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[561, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[561, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[561, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[561, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[561, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[562, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[562, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[562, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[562, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[562, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[562, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[562, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[562, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[562, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[562, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[562, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[562, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[563, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[563, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[563, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[563, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[563, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[563, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[563, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[563, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[563, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[563, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[563, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[563, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[564, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[564, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[564, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[564, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[564, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[564, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[564, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[564, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[564, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[564, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[564, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[564, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[565, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[565, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[565, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[565, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[565, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[565, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[565, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[565, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[565, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[565, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[565, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[565, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[565, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[566, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[566, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[566, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[566, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[566, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[566, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[566, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[566, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[566, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[566, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[566, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[566, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[567, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[567, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[567, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[567, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[567, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[567, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[567, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[567, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[567, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[568, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[568, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[568, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[568, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[568, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[568, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[568, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[568, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[568, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[568, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[568, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[568, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[569, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[569, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[569, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[569, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[569, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[569, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[569, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[569, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[569, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[569, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[569, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[569, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[570, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[570, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[570, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[570, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[570, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[570, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[570, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[570, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[570, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[570, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[570, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[570, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[571, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[571, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[571, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[571, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[571, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[571, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[571, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[571, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[571, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[571, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[571, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[571, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[572, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[572, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[572, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[572, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[572, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[572, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[572, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[572, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[572, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[572, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[572, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[572, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[573, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[573, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[573, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[573, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[573, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[573, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[573, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[573, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[573, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[573, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[573, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[573, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[574, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[574, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[574, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[574, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[574, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[574, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[574, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[574, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[574, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[574, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[574, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[574, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[575, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[575, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[575, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[575, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[575, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[575, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[575, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[575, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[575, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[575, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[575, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[575, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[576, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[577, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[577, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[577, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[577, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_params() (sklearn.impute.iterativeimputer method)": [[577, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[577, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[577, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[577, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[578, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[578, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[578, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[578, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_params() (sklearn.impute.knnimputer method)": [[578, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[578, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[578, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[578, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[579, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[579, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[579, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[579, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_params() (sklearn.impute.missingindicator method)": [[579, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[579, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[579, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[579, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[580, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[580, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[580, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[580, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_params() (sklearn.impute.simpleimputer method)": [[580, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[580, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[580, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[580, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[580, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[581, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[581, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[581, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[582, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[582, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[582, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[583, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[584, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[585, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[585, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[585, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[585, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[585, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[585, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[585, "sklearn.isotonic.IsotonicRegression.score"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[585, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[585, "sklearn.isotonic.IsotonicRegression.set_params"]], "transform() (sklearn.isotonic.isotonicregression method)": [[585, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[586, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[587, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[588, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[588, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[588, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[588, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[588, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[588, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[588, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[588, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[589, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[589, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[589, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[589, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[589, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[589, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[589, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[589, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[590, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[590, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[590, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[590, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[590, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[590, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[590, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[590, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[591, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[591, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[591, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[591, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[591, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[591, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[591, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[591, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[592, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[592, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[592, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[592, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[592, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[592, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[592, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[592, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[593, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[593, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[593, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[593, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[593, "sklearn.kernel_ridge.KernelRidge.score"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[593, "sklearn.kernel_ridge.KernelRidge.set_params"]], "ardregression (class in sklearn.linear_model)": [[594, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[594, "sklearn.linear_model.ARDRegression.fit"]], "get_params() (sklearn.linear_model.ardregression method)": [[594, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[594, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[594, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[594, "sklearn.linear_model.ARDRegression.set_params"]], "bayesianridge (class in sklearn.linear_model)": [[595, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[595, "sklearn.linear_model.BayesianRidge.fit"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[595, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[595, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[595, "sklearn.linear_model.BayesianRidge.score"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[595, "sklearn.linear_model.BayesianRidge.set_params"]], "elasticnet (class in sklearn.linear_model)": [[596, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[596, "sklearn.linear_model.ElasticNet.fit"]], "get_params() (sklearn.linear_model.elasticnet method)": [[596, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[596, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[596, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[596, "sklearn.linear_model.ElasticNet.score"]], "set_params() (sklearn.linear_model.elasticnet method)": [[596, "sklearn.linear_model.ElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[596, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[597, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[597, "sklearn.linear_model.ElasticNetCV.fit"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[597, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[597, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[597, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[597, "sklearn.linear_model.ElasticNetCV.score"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[597, "sklearn.linear_model.ElasticNetCV.set_params"]], "gammaregressor (class in sklearn.linear_model)": [[598, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[598, "sklearn.linear_model.GammaRegressor.fit"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[598, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[598, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[598, "sklearn.linear_model.GammaRegressor.score"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[598, "sklearn.linear_model.GammaRegressor.set_params"]], "huberregressor (class in sklearn.linear_model)": [[599, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[599, "sklearn.linear_model.HuberRegressor.fit"]], "get_params() (sklearn.linear_model.huberregressor method)": [[599, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[599, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[599, "sklearn.linear_model.HuberRegressor.score"]], "set_params() (sklearn.linear_model.huberregressor method)": [[599, "sklearn.linear_model.HuberRegressor.set_params"]], "lars (class in sklearn.linear_model)": [[600, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[600, "sklearn.linear_model.Lars.fit"]], "get_params() (sklearn.linear_model.lars method)": [[600, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[600, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[600, "sklearn.linear_model.Lars.score"]], "set_params() (sklearn.linear_model.lars method)": [[600, "sklearn.linear_model.Lars.set_params"]], "larscv (class in sklearn.linear_model)": [[601, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[601, "sklearn.linear_model.LarsCV.fit"]], "get_params() (sklearn.linear_model.larscv method)": [[601, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[601, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[601, "sklearn.linear_model.LarsCV.score"]], "set_params() (sklearn.linear_model.larscv method)": [[601, "sklearn.linear_model.LarsCV.set_params"]], "lasso (class in sklearn.linear_model)": [[602, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[602, "sklearn.linear_model.Lasso.fit"]], "get_params() (sklearn.linear_model.lasso method)": [[602, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[602, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[602, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[602, "sklearn.linear_model.Lasso.score"]], "set_params() (sklearn.linear_model.lasso method)": [[602, "sklearn.linear_model.Lasso.set_params"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[602, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[603, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[603, "sklearn.linear_model.LassoCV.fit"]], "get_params() (sklearn.linear_model.lassocv method)": [[603, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[603, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[603, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[603, "sklearn.linear_model.LassoCV.score"]], "set_params() (sklearn.linear_model.lassocv method)": [[603, "sklearn.linear_model.LassoCV.set_params"]], "lassolars (class in sklearn.linear_model)": [[604, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[604, "sklearn.linear_model.LassoLars.fit"]], "get_params() (sklearn.linear_model.lassolars method)": [[604, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[604, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[604, "sklearn.linear_model.LassoLars.score"]], "set_params() (sklearn.linear_model.lassolars method)": [[604, "sklearn.linear_model.LassoLars.set_params"]], "lassolarscv (class in sklearn.linear_model)": [[605, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[605, "sklearn.linear_model.LassoLarsCV.fit"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[605, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[605, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[605, "sklearn.linear_model.LassoLarsCV.score"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[605, "sklearn.linear_model.LassoLarsCV.set_params"]], "lassolarsic (class in sklearn.linear_model)": [[606, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[606, "sklearn.linear_model.LassoLarsIC.fit"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[606, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[606, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[606, "sklearn.linear_model.LassoLarsIC.score"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[606, "sklearn.linear_model.LassoLarsIC.set_params"]], "linearregression (class in sklearn.linear_model)": [[607, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[607, "sklearn.linear_model.LinearRegression.fit"]], "get_params() (sklearn.linear_model.linearregression method)": [[607, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[607, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[607, "sklearn.linear_model.LinearRegression.score"]], "set_params() (sklearn.linear_model.linearregression method)": [[607, "sklearn.linear_model.LinearRegression.set_params"]], "logisticregression (class in sklearn.linear_model)": [[608, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[608, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[608, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[608, "sklearn.linear_model.LogisticRegression.fit"]], "get_params() (sklearn.linear_model.logisticregression method)": [[608, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[608, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[608, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[608, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[608, "sklearn.linear_model.LogisticRegression.score"]], "set_params() (sklearn.linear_model.logisticregression method)": [[608, "sklearn.linear_model.LogisticRegression.set_params"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[608, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[609, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[609, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[609, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[609, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[609, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[609, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[609, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[609, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[609, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[609, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[609, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[610, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[610, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[610, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[610, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[610, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[610, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[610, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[610, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[611, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[611, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[611, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[611, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[611, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[611, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[611, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "multitasklasso (class in sklearn.linear_model)": [[612, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[612, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[612, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[612, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[612, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[612, "sklearn.linear_model.MultiTaskLasso.score"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[612, "sklearn.linear_model.MultiTaskLasso.set_params"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[612, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[613, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[613, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[613, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[613, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[613, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[613, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[613, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[614, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[614, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[614, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[614, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[614, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[614, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[615, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[615, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[615, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[615, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[615, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[615, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[616, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[616, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[616, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[616, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[616, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[616, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[616, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[616, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[616, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[616, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor() (in module sklearn.linear_model)": [[617, "sklearn.linear_model.PassiveAggressiveRegressor"]], "perceptron (class in sklearn.linear_model)": [[618, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[618, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[618, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[618, "sklearn.linear_model.Perceptron.fit"]], "get_params() (sklearn.linear_model.perceptron method)": [[618, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[618, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[618, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[618, "sklearn.linear_model.Perceptron.score"]], "set_params() (sklearn.linear_model.perceptron method)": [[618, "sklearn.linear_model.Perceptron.set_params"]], "sparsify() (sklearn.linear_model.perceptron method)": [[618, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[619, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[619, "sklearn.linear_model.PoissonRegressor.fit"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[619, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[619, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[619, "sklearn.linear_model.PoissonRegressor.score"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[619, "sklearn.linear_model.PoissonRegressor.set_params"]], "quantileregressor (class in sklearn.linear_model)": [[620, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[620, "sklearn.linear_model.QuantileRegressor.fit"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[620, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[620, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[620, "sklearn.linear_model.QuantileRegressor.score"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[620, "sklearn.linear_model.QuantileRegressor.set_params"]], "ransacregressor (class in sklearn.linear_model)": [[621, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[621, "sklearn.linear_model.RANSACRegressor.fit"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[621, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[621, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[621, "sklearn.linear_model.RANSACRegressor.score"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[621, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[622, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[622, "sklearn.linear_model.Ridge.fit"]], "get_params() (sklearn.linear_model.ridge method)": [[622, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[622, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[622, "sklearn.linear_model.Ridge.score"]], "set_params() (sklearn.linear_model.ridge method)": [[622, "sklearn.linear_model.Ridge.set_params"]], "ridgecv (class in sklearn.linear_model)": [[623, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[623, "sklearn.linear_model.RidgeCV.fit"]], "get_params() (sklearn.linear_model.ridgecv method)": [[623, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[623, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[623, "sklearn.linear_model.RidgeCV.score"]], "set_params() (sklearn.linear_model.ridgecv method)": [[623, "sklearn.linear_model.RidgeCV.set_params"]], "ridgeclassifier (class in sklearn.linear_model)": [[624, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[624, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[624, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[624, "sklearn.linear_model.RidgeClassifier.fit"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[624, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[624, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[624, "sklearn.linear_model.RidgeClassifier.score"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[624, "sklearn.linear_model.RidgeClassifier.set_params"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[625, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[625, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[625, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[625, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[625, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[625, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[625, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[625, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "sgdclassifier (class in sklearn.linear_model)": [[626, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[626, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[626, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[626, "sklearn.linear_model.SGDClassifier.fit"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[626, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[626, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[626, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[626, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[626, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[626, "sklearn.linear_model.SGDClassifier.score"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[626, "sklearn.linear_model.SGDClassifier.set_params"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[626, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[627, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[627, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[627, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[627, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[627, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[627, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[627, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[627, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[627, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[627, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[627, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[628, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[628, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[628, "sklearn.linear_model.SGDRegressor.fit"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[628, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[628, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[628, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[628, "sklearn.linear_model.SGDRegressor.score"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[628, "sklearn.linear_model.SGDRegressor.set_params"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[628, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[629, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[629, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[629, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[629, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[629, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[629, "sklearn.linear_model.TheilSenRegressor.set_params"]], "tweedieregressor (class in sklearn.linear_model)": [[630, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[630, "sklearn.linear_model.TweedieRegressor.fit"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[630, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[630, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[630, "sklearn.linear_model.TweedieRegressor.score"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[630, "sklearn.linear_model.TweedieRegressor.set_params"]], "enet_path() (in module sklearn.linear_model)": [[631, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[632, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[633, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[634, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[635, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[636, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[637, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[638, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[638, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[638, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[638, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_params() (sklearn.manifold.isomap method)": [[638, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[638, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[638, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[638, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[638, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[639, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[639, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[639, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[639, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[639, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[639, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[639, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[639, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[640, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[640, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[640, "sklearn.manifold.MDS.fit_transform"]], "get_params() (sklearn.manifold.mds method)": [[640, "sklearn.manifold.MDS.get_params"]], "set_params() (sklearn.manifold.mds method)": [[640, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[641, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[641, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[641, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_params() (sklearn.manifold.spectralembedding method)": [[641, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[641, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[642, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[642, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[642, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[642, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_params() (sklearn.manifold.tsne method)": [[642, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[642, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[642, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[643, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[644, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[645, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[646, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[647, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[647, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[647, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[647, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[648, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[648, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[648, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[648, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[649, "sklearn.metrics.DistanceMetric"]], "dist_to_rdist() (sklearn.metrics.distancemetric method)": [[649, "sklearn.metrics.DistanceMetric.dist_to_rdist"]], "get_metric() (sklearn.metrics.distancemetric method)": [[649, "sklearn.metrics.DistanceMetric.get_metric"]], "pairwise() (sklearn.metrics.distancemetric method)": [[649, "sklearn.metrics.DistanceMetric.pairwise"]], "rdist_to_dist() (sklearn.metrics.distancemetric method)": [[649, "sklearn.metrics.DistanceMetric.rdist_to_dist"]], "precisionrecalldisplay (class in sklearn.metrics)": [[650, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[650, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[650, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[650, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[651, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[651, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[651, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[651, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[652, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[652, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[652, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[652, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[653, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[654, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[655, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[656, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[657, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[658, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[659, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[660, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[661, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[662, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[663, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[664, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[665, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[666, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[667, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[668, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[669, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[670, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[671, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[672, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[673, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[674, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[675, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[676, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[677, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[678, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[679, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[680, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[681, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[682, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[683, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[684, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[685, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[686, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[687, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[688, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[689, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[690, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[691, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[692, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[693, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[694, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[695, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[696, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[697, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[698, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[699, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[700, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[701, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[702, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[703, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[707, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[708, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[709, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[710, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[711, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[712, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[713, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[714, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[715, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[716, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[717, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[718, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[719, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[720, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[721, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[722, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[723, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[724, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[725, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[726, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[727, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[728, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[729, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[730, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[731, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[732, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[733, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[734, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[735, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[736, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[737, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[738, "sklearn.metrics.roc_curve"]], "silhouette_samples() (in module sklearn.metrics)": [[739, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[740, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[741, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[742, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[743, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[744, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[744, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[744, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[744, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[744, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[744, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[744, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[744, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[744, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[744, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[745, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[745, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[745, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[745, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[745, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[745, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[745, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[745, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[745, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[745, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[745, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[745, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[746, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[746, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[746, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[746, "sklearn.model_selection.GridSearchCV.fit"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[746, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[746, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[746, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[746, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[746, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[746, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[746, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[746, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[746, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[746, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[747, "sklearn.model_selection.GroupKFold"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[747, "sklearn.model_selection.GroupKFold.get_n_splits"]], "split() (sklearn.model_selection.groupkfold method)": [[747, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[748, "sklearn.model_selection.GroupShuffleSplit"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[748, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[748, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[749, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[749, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[749, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[749, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[749, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[749, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[749, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[749, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[749, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[749, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[749, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[749, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[749, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[749, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[750, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[750, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[750, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[750, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[750, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[750, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[750, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[750, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[750, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[750, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[750, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[750, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[750, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[750, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[751, "sklearn.model_selection.KFold"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[751, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[751, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[752, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[752, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[752, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[753, "sklearn.model_selection.LeaveOneGroupOut"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[753, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[753, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[754, "sklearn.model_selection.LeaveOneOut"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[754, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[754, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[755, "sklearn.model_selection.LeavePGroupsOut"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[755, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[755, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[756, "sklearn.model_selection.LeavePOut"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[756, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[756, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[757, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[758, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[759, "sklearn.model_selection.PredefinedSplit"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[759, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[759, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[760, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[760, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[760, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[760, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[760, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[760, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[760, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[760, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[760, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[760, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[760, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[760, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[760, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[760, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[761, "sklearn.model_selection.RepeatedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[761, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[761, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[762, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[762, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[762, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[763, "sklearn.model_selection.ShuffleSplit"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[763, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[763, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[764, "sklearn.model_selection.StratifiedGroupKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[764, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[764, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[765, "sklearn.model_selection.StratifiedKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[765, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[765, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[766, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[766, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[766, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[767, "sklearn.model_selection.TimeSeriesSplit"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[767, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[767, "sklearn.model_selection.TimeSeriesSplit.split"]], "check_cv() (in module sklearn.model_selection)": [[768, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[769, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[770, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[771, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[772, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[773, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[774, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[775, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[776, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[776, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[776, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[776, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[776, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[776, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[776, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[776, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[776, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "onevsrestclassifier (class in sklearn.multiclass)": [[777, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[777, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[777, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[777, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[777, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[777, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[777, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[777, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[777, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[777, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[777, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "outputcodeclassifier (class in sklearn.multiclass)": [[778, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[778, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[778, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[778, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[778, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[778, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "classifierchain (class in sklearn.multioutput)": [[779, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[779, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[779, "sklearn.multioutput.ClassifierChain.fit"]], "get_params() (sklearn.multioutput.classifierchain method)": [[779, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[779, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[779, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[779, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[779, "sklearn.multioutput.ClassifierChain.set_params"]], "multioutputclassifier (class in sklearn.multioutput)": [[780, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[780, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[780, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[780, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[780, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[780, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[780, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[780, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "multioutputregressor (class in sklearn.multioutput)": [[781, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[781, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[781, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[781, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[781, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[781, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[781, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "regressorchain (class in sklearn.multioutput)": [[782, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[782, "sklearn.multioutput.RegressorChain.fit"]], "get_params() (sklearn.multioutput.regressorchain method)": [[782, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[782, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[782, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[782, "sklearn.multioutput.RegressorChain.set_params"]], "bernoullinb (class in sklearn.naive_bayes)": [[783, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[783, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[783, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[783, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[783, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[783, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[783, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[783, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[783, "sklearn.naive_bayes.BernoulliNB.score"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[783, "sklearn.naive_bayes.BernoulliNB.set_params"]], "categoricalnb (class in sklearn.naive_bayes)": [[784, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[784, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[784, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[784, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[784, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[784, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[784, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[784, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[784, "sklearn.naive_bayes.CategoricalNB.score"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[784, "sklearn.naive_bayes.CategoricalNB.set_params"]], "complementnb (class in sklearn.naive_bayes)": [[785, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[785, "sklearn.naive_bayes.ComplementNB.fit"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[785, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[785, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[785, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[785, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[785, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[785, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[785, "sklearn.naive_bayes.ComplementNB.score"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[785, "sklearn.naive_bayes.ComplementNB.set_params"]], "gaussiannb (class in sklearn.naive_bayes)": [[786, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[786, "sklearn.naive_bayes.GaussianNB.fit"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[786, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[786, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[786, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[786, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[786, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[786, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[786, "sklearn.naive_bayes.GaussianNB.score"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[786, "sklearn.naive_bayes.GaussianNB.set_params"]], "multinomialnb (class in sklearn.naive_bayes)": [[787, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[787, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[787, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[787, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[787, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[787, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[787, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[787, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[787, "sklearn.naive_bayes.MultinomialNB.score"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[787, "sklearn.naive_bayes.MultinomialNB.set_params"]], "balltree (class in sklearn.neighbors)": [[788, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[788, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[788, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[788, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[788, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[788, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[788, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[788, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[788, "sklearn.neighbors.BallTree.two_point_correlation"]], "valid_metrics() (sklearn.neighbors.balltree method)": [[788, "sklearn.neighbors.BallTree.valid_metrics"]], "kdtree (class in sklearn.neighbors)": [[789, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[789, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[789, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[789, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[789, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[789, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[789, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[789, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[789, "sklearn.neighbors.KDTree.two_point_correlation"]], "valid_metrics() (sklearn.neighbors.kdtree method)": [[789, "sklearn.neighbors.KDTree.valid_metrics"]], "kneighborsclassifier (class in sklearn.neighbors)": [[790, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[790, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[790, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[790, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[790, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[790, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[790, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[790, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[790, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "kneighborsregressor (class in sklearn.neighbors)": [[791, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[791, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[791, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[791, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[791, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[791, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[791, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[791, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "kneighborstransformer (class in sklearn.neighbors)": [[792, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[792, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[792, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[792, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[792, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[792, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[792, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[792, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[792, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[792, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[793, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[793, "sklearn.neighbors.KernelDensity.fit"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[793, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[793, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[793, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[793, "sklearn.neighbors.KernelDensity.score_samples"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[793, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[794, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[794, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[794, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[794, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[794, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[794, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[794, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[794, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[794, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[794, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[795, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[795, "sklearn.neighbors.NearestCentroid.fit"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[795, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[795, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[795, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[795, "sklearn.neighbors.NearestCentroid.set_params"]], "nearestneighbors (class in sklearn.neighbors)": [[796, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[796, "sklearn.neighbors.NearestNeighbors.fit"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[796, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[796, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[796, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[796, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[796, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[796, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[797, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[797, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[797, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[797, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[797, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[797, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[797, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[797, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[798, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[798, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[798, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[798, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[798, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[798, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[798, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[798, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[798, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[799, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[799, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[799, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[799, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[799, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[799, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[799, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[799, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[800, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[800, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[800, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[800, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[800, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[800, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[800, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[800, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[800, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[800, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[801, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[802, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[803, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[804, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[804, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[804, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[804, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[804, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[804, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[804, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[804, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[804, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[804, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[804, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[805, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[805, "sklearn.neural_network.MLPClassifier.fit"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[805, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[805, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[805, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[805, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[805, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[805, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[805, "sklearn.neural_network.MLPClassifier.set_params"]], "mlpregressor (class in sklearn.neural_network)": [[806, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[806, "sklearn.neural_network.MLPRegressor.fit"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[806, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[806, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[806, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[806, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[806, "sklearn.neural_network.MLPRegressor.set_params"]], "featureunion (class in sklearn.pipeline)": [[807, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[807, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[807, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[807, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[807, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_params() (sklearn.pipeline.featureunion method)": [[807, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[807, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[807, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[807, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[807, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[808, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[808, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[808, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[808, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[808, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[808, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[808, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[808, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_params() (sklearn.pipeline.pipeline method)": [[808, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[808, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[808, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[808, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[808, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[808, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[808, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[808, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[808, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[808, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[808, "sklearn.pipeline.Pipeline.set_params"]], "transform() (sklearn.pipeline.pipeline method)": [[808, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[809, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[810, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[811, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[811, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[811, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[811, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.binarizer method)": [[811, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[811, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[811, "sklearn.preprocessing.Binarizer.set_params"]], "transform() (sklearn.preprocessing.binarizer method)": [[811, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[812, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[812, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[812, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[812, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[812, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[812, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[812, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[812, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[812, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[813, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[813, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[813, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[813, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[813, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[813, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[813, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[813, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[813, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[814, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[814, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[814, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[814, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[814, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[814, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[814, "sklearn.preprocessing.KernelCenterer.set_params"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[814, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[815, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[815, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[815, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[815, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[815, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[815, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[815, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[815, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[816, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[816, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[816, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[816, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[816, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[816, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[816, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[816, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[817, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[817, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[817, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[817, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[817, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[817, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[817, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[817, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[817, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[817, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[818, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[818, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[818, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[818, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[818, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[818, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[818, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[818, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[818, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[818, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[819, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[819, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[819, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[819, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[819, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[819, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[819, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[819, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[820, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[820, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[820, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[820, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.normalizer method)": [[820, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[820, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[820, "sklearn.preprocessing.Normalizer.set_params"]], "transform() (sklearn.preprocessing.normalizer method)": [[820, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[821, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[821, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[821, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[821, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[821, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[821, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[821, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[821, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[821, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[821, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[822, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[822, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[822, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[822, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[822, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[822, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[822, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[822, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[822, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[823, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[823, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[823, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[823, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[823, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[823, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[823, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[823, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[823, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[824, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[824, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[824, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[824, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[824, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[824, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[824, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[824, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[824, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[825, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[825, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[825, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[825, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[825, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[825, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[825, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[825, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[825, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[826, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[826, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[826, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[826, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[826, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[826, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[826, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[826, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[826, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[827, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[827, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[827, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[827, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[827, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[827, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[827, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[827, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[828, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[828, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[828, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[828, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[828, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[828, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[828, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[828, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[828, "sklearn.preprocessing.StandardScaler.set_params"]], "transform() (sklearn.preprocessing.standardscaler method)": [[828, "sklearn.preprocessing.StandardScaler.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[829, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[830, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[831, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[832, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[833, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[834, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[835, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[836, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[837, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[838, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[839, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[839, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[839, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[839, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[839, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[839, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[839, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[839, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[839, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[840, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[840, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[840, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[840, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[840, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[840, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[840, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[840, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[840, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[841, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[842, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[842, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[842, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[842, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[842, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[842, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[842, "sklearn.semi_supervised.LabelPropagation.set_params"]], "labelspreading (class in sklearn.semi_supervised)": [[843, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[843, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[843, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[843, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[843, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[843, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[843, "sklearn.semi_supervised.LabelSpreading.set_params"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[844, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[844, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[844, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[844, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[844, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[844, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[844, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[844, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[844, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[845, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[846, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[847, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[847, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[847, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[847, "sklearn.svm.LinearSVC.fit"]], "get_params() (sklearn.svm.linearsvc method)": [[847, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[847, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[847, "sklearn.svm.LinearSVC.score"]], "set_params() (sklearn.svm.linearsvc method)": [[847, "sklearn.svm.LinearSVC.set_params"]], "sparsify() (sklearn.svm.linearsvc method)": [[847, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[848, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[848, "sklearn.svm.LinearSVR.fit"]], "get_params() (sklearn.svm.linearsvr method)": [[848, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[848, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[848, "sklearn.svm.LinearSVR.score"]], "set_params() (sklearn.svm.linearsvr method)": [[848, "sklearn.svm.LinearSVR.set_params"]], "nusvc (class in sklearn.svm)": [[849, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[849, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[849, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[849, "sklearn.svm.NuSVC.fit"]], "get_params() (sklearn.svm.nusvc method)": [[849, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[849, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[849, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[849, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[849, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[849, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[849, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[849, "sklearn.svm.NuSVC.score"]], "set_params() (sklearn.svm.nusvc method)": [[849, "sklearn.svm.NuSVC.set_params"]], "nusvr (class in sklearn.svm)": [[850, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[850, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[850, "sklearn.svm.NuSVR.fit"]], "get_params() (sklearn.svm.nusvr method)": [[850, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[850, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[850, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[850, "sklearn.svm.NuSVR.score"]], "set_params() (sklearn.svm.nusvr method)": [[850, "sklearn.svm.NuSVR.set_params"]], "oneclasssvm (class in sklearn.svm)": [[851, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[851, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[851, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[851, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[851, "sklearn.svm.OneClassSVM.fit_predict"]], "get_params() (sklearn.svm.oneclasssvm method)": [[851, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[851, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[851, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[851, "sklearn.svm.OneClassSVM.score_samples"]], "set_params() (sklearn.svm.oneclasssvm method)": [[851, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[852, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[852, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[852, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[852, "sklearn.svm.SVC.fit"]], "get_params() (sklearn.svm.svc method)": [[852, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[852, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[852, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[852, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[852, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[852, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[852, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[852, "sklearn.svm.SVC.score"]], "set_params() (sklearn.svm.svc method)": [[852, "sklearn.svm.SVC.set_params"]], "svr (class in sklearn.svm)": [[853, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[853, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[853, "sklearn.svm.SVR.fit"]], "get_params() (sklearn.svm.svr method)": [[853, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[853, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[853, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[853, "sklearn.svm.SVR.score"]], "set_params() (sklearn.svm.svr method)": [[853, "sklearn.svm.SVR.set_params"]], "l1_min_c() (in module sklearn.svm)": [[854, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[855, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[855, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[855, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[855, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[855, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[855, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[855, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[855, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[855, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[855, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[855, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[855, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[855, "sklearn.tree.DecisionTreeClassifier.score"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[855, "sklearn.tree.DecisionTreeClassifier.set_params"]], "decisiontreeregressor (class in sklearn.tree)": [[856, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[856, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[856, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[856, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[856, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[856, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[856, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[856, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[856, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[856, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[856, "sklearn.tree.DecisionTreeRegressor.score"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[856, "sklearn.tree.DecisionTreeRegressor.set_params"]], "extratreeclassifier (class in sklearn.tree)": [[857, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[857, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[857, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[857, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[857, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[857, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[857, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[857, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[857, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[857, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[857, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[857, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[857, "sklearn.tree.ExtraTreeClassifier.score"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[857, "sklearn.tree.ExtraTreeClassifier.set_params"]], "extratreeregressor (class in sklearn.tree)": [[858, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[858, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[858, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[858, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[858, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[858, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[858, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[858, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[858, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[858, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[858, "sklearn.tree.ExtraTreeRegressor.score"]], "set_params() (sklearn.tree.extratreeregressor method)": [[858, "sklearn.tree.ExtraTreeRegressor.set_params"]], "export_graphviz() (in module sklearn.tree)": [[859, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[860, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[861, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[862, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[862, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[862, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[862, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[862, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[862, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[862, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[862, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[862, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[862, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[862, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[862, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[863, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[864, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[865, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[866, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[867, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[868, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[869, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[870, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[871, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[872, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[873, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[874, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[875, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[876, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[877, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[878, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[879, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[880, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[881, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[882, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[883, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[884, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[885, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[886, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[887, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[888, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[889, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[890, "sklearn.utils.indexable"]], "available_if() (in module sklearn.utils.metaestimators)": [[891, "sklearn.utils.metaestimators.available_if"]], "if_delegate_has_method() (in module sklearn.utils.metaestimators)": [[892, "sklearn.utils.metaestimators.if_delegate_has_method"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[893, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[894, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[895, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[896, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[897, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[897, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[897, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[897, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[897, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[898, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[899, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[900, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[901, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[902, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[903, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[904, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[905, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[906, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[907, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[908, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[909, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[910, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[911, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[912, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[913, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[914, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[915, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[916, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[917, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[918, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[919, "sklearn.utils.validation.has_fit_parameter"]]}})