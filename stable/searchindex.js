Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_hastie_10_2", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "faq", "getting_started", "glossary", "governance", "inspection", "install", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_hastie_10_2.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Ensemble methods", "Discrete versus Real AdaBoost", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping of Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Gaussian process regression (GPR) on Mauna Loa CO2 data", "Gaussian process regression (GPR) with noise-level estimation", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "Lasso and Elastic Net for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Plot Ridge coefficients as a function of the L2 regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Multioutput methods", "Classifier Chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "SVM-Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensemble methods", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.2", "Version 1.3.0"], "terms": {"thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 324, 325, 326, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 383, 384, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 433, 434, 435, 436, 438, 440, 441, 444, 447, 448, 449, 450, 452, 453, 454, 456, 459, 460, 466, 467, 468, 469, 470, 471, 472, 474, 475, 477, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 650, 651, 652, 653, 654, 655, 657, 658, 660, 663, 664, 665, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 682, 686, 687, 688, 689, 690, 691, 692, 693, 698, 704, 705, 706, 707, 708, 709, 711, 712, 713, 715, 718, 719, 724, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 869, 870, 875, 876, 878, 880, 881, 886, 888, 893, 895, 898, 899, 900, 902, 903, 906, 907, 916, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 955, 956, 958, 961, 962, 963, 964, 965, 966, 967, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "wa": [0, 4, 8, 13, 15, 36, 65, 73, 78, 83, 115, 118, 144, 151, 156, 203, 227, 229, 231, 233, 235, 241, 242, 270, 278, 281, 282, 286, 290, 291, 313, 319, 320, 324, 333, 335, 336, 338, 342, 343, 351, 354, 357, 359, 360, 363, 366, 367, 371, 375, 392, 393, 397, 401, 405, 408, 411, 420, 425, 466, 474, 486, 487, 489, 491, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 536, 537, 539, 541, 542, 553, 578, 581, 592, 601, 602, 605, 606, 607, 609, 615, 616, 636, 637, 664, 679, 680, 718, 733, 734, 737, 745, 746, 747, 750, 751, 761, 772, 774, 786, 796, 822, 823, 842, 846, 852, 853, 855, 880, 881, 899, 920, 921, 922, 931, 932, 935, 938, 942, 945, 948, 952, 958, 966, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "start": [0, 4, 7, 10, 12, 24, 49, 53, 59, 62, 78, 88, 98, 104, 109, 111, 130, 133, 140, 142, 152, 156, 159, 160, 168, 179, 180, 181, 187, 197, 199, 203, 211, 224, 235, 243, 253, 285, 289, 311, 319, 320, 324, 325, 326, 327, 331, 338, 339, 340, 342, 343, 344, 349, 351, 354, 360, 363, 367, 368, 372, 373, 375, 392, 394, 401, 405, 407, 484, 489, 561, 568, 583, 596, 604, 610, 617, 619, 627, 628, 629, 641, 645, 731, 732, 745, 746, 747, 750, 751, 761, 791, 792, 793, 795, 797, 805, 891, 916, 921, 928, 931, 936, 937, 946, 953, 956, 958, 966, 967, 976, 978, 981, 983, 985, 986, 987, 988, 989], "2007": [0, 34, 167, 333, 363, 372, 392, 403, 405, 411, 413, 517, 607, 642, 668, 684, 687, 708, 709, 743, 924, 928, 930, 932], "googl": [0, 16, 349, 363, 394, 951, 963, 973], "summer": [0, 4, 44, 973], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 324, 325, 332, 336, 337, 339, 341, 342, 347, 349, 351, 352, 354, 357, 359, 362, 363, 370, 371, 394, 395, 398, 400, 410, 447, 477, 481, 482, 488, 489, 493, 494, 496, 497, 499, 517, 523, 532, 533, 536, 537, 597, 598, 601, 602, 603, 604, 605, 606, 607, 611, 612, 613, 614, 615, 616, 633, 634, 636, 637, 777, 778, 779, 816, 823, 900, 929, 933, 942, 944, 946, 947, 952, 953, 955, 956, 959, 967, 973, 975, 976], "david": [0, 2, 33, 52, 74, 158, 181, 236, 238, 278, 311, 312, 313, 333, 363, 370, 373, 413, 483, 487, 518, 519, 573, 574, 579, 675, 745, 846, 922, 928, 936, 945, 956, 973, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988], "cournapeau": [0, 2, 973, 976], "later": [0, 11, 49, 104, 112, 135, 152, 156, 158, 266, 313, 320, 344, 349, 350, 354, 357, 795, 818, 819, 827, 829, 942, 962, 967, 976, 979, 981, 985], "year": [0, 4, 121, 140, 150, 151, 152, 179, 180, 197, 335, 337, 349, 367, 371, 373, 749, 754, 756, 828, 928, 932, 953, 956, 965], "matthieu": [0, 2, 973, 977, 988], "brucher": [0, 2, 973], "work": [0, 4, 9, 16, 29, 40, 41, 44, 48, 62, 71, 102, 108, 121, 133, 141, 142, 150, 151, 152, 168, 196, 221, 223, 233, 259, 260, 279, 282, 284, 285, 301, 312, 313, 320, 325, 326, 327, 332, 333, 336, 338, 339, 340, 341, 342, 343, 344, 346, 350, 351, 352, 354, 359, 360, 361, 363, 364, 365, 368, 370, 371, 372, 375, 376, 377, 378, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 411, 416, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 459, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 646, 659, 692, 724, 728, 729, 730, 731, 738, 745, 746, 747, 750, 751, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 837, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 886, 890, 921, 922, 924, 926, 927, 928, 929, 931, 932, 934, 935, 938, 939, 942, 945, 946, 952, 953, 956, 958, 959, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "part": [0, 28, 32, 56, 65, 75, 102, 107, 111, 116, 123, 124, 125, 126, 130, 140, 148, 158, 224, 230, 232, 249, 268, 275, 278, 313, 326, 333, 335, 338, 340, 344, 346, 350, 351, 354, 361, 363, 367, 368, 370, 371, 373, 400, 444, 445, 446, 472, 482, 488, 493, 525, 535, 536, 537, 564, 576, 741, 814, 832, 834, 835, 836, 837, 838, 839, 840, 921, 922, 924, 929, 933, 951, 952, 953, 954, 956, 960, 967, 969, 973, 981, 982, 984, 986, 988], "hi": [0, 364, 932, 967], "thesi": [0, 335, 363, 370], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 23, 24, 25, 33, 35, 44, 45, 49, 52, 53, 55, 61, 62, 65, 68, 69, 71, 73, 74, 75, 78, 80, 85, 87, 90, 93, 94, 102, 105, 107, 108, 111, 113, 114, 116, 118, 129, 130, 132, 133, 135, 139, 140, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 167, 168, 170, 174, 179, 180, 181, 182, 183, 184, 187, 196, 197, 206, 207, 208, 211, 212, 213, 216, 218, 219, 224, 226, 229, 231, 232, 233, 235, 236, 237, 238, 240, 241, 244, 245, 249, 250, 252, 253, 259, 260, 262, 271, 273, 274, 275, 278, 279, 281, 282, 283, 285, 286, 290, 292, 299, 307, 311, 312, 313, 315, 319, 320, 324, 325, 326, 331, 332, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 389, 392, 393, 394, 395, 396, 398, 399, 400, 403, 413, 414, 415, 420, 423, 426, 444, 447, 454, 459, 460, 462, 474, 485, 487, 489, 491, 492, 493, 495, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 539, 542, 553, 557, 560, 561, 562, 581, 583, 584, 585, 587, 594, 595, 596, 598, 599, 600, 602, 604, 606, 609, 610, 612, 614, 616, 617, 619, 620, 625, 626, 627, 630, 631, 635, 636, 637, 647, 650, 654, 663, 669, 671, 676, 678, 679, 684, 685, 688, 690, 692, 704, 706, 707, 731, 733, 735, 738, 742, 744, 745, 746, 747, 750, 751, 753, 761, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 783, 784, 785, 786, 787, 788, 791, 792, 793, 795, 796, 797, 799, 800, 801, 806, 814, 816, 822, 823, 827, 828, 830, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 846, 849, 850, 851, 854, 857, 859, 864, 868, 870, 886, 900, 921, 922, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 942, 943, 944, 945, 946, 947, 948, 953, 955, 956, 958, 965, 966, 967, 970, 973, 974, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "2010": [0, 43, 62, 72, 152, 240, 241, 360, 363, 365, 367, 368, 376, 426, 487, 655, 659, 670, 671, 690, 774, 806, 807, 924, 928, 932, 936, 946, 951, 973], "fabian": [0, 2, 166, 184, 200, 265, 973, 974, 975, 976, 977, 979, 980, 982], "pedregosa": [0, 2, 166, 184, 200, 265, 973, 974, 975, 976, 977, 979], "gael": [0, 1, 12, 29, 35, 36, 42, 48, 49, 61, 62, 75, 87, 91, 168, 169, 200, 211, 223, 951, 953, 956, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "varoquaux": [0, 1, 12, 28, 29, 35, 36, 41, 42, 47, 48, 49, 61, 62, 67, 75, 80, 81, 87, 91, 92, 162, 168, 169, 176, 177, 200, 202, 209, 211, 223, 275, 303, 304, 352, 951, 956, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "alexandr": [0, 1, 2, 22, 23, 27, 38, 43, 50, 62, 85, 87, 93, 164, 166, 167, 168, 170, 172, 173, 206, 209, 241, 248, 265, 352, 956, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "gramfort": [0, 1, 22, 23, 27, 38, 43, 50, 62, 85, 87, 93, 164, 166, 167, 168, 170, 172, 173, 206, 209, 241, 248, 265, 352, 956, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "vincent": [0, 2, 43, 62, 138, 142, 956, 973, 975, 977, 978, 980, 983, 988, 989], "michel": [0, 2, 43, 62, 973, 975, 976, 978, 980, 987, 988], "inria": [0, 5, 9, 27, 33, 48, 50, 52, 69, 75, 141, 158, 164, 166, 170, 172, 173, 184, 200, 201, 206, 209, 236, 238, 241, 248, 265, 278, 307, 311, 312, 313, 609, 950, 973], "took": [0, 38, 243], "leadership": 0, "made": [0, 74, 80, 90, 121, 142, 151, 152, 179, 197, 227, 239, 279, 282, 299, 316, 324, 333, 335, 338, 342, 351, 352, 363, 371, 375, 395, 398, 400, 410, 447, 454, 539, 540, 542, 581, 582, 607, 616, 636, 637, 685, 733, 747, 750, 751, 761, 765, 766, 767, 786, 789, 790, 933, 938, 948, 952, 956, 964, 966, 973, 974, 975, 976, 977, 980, 982, 983, 986, 987], "first": [0, 4, 5, 7, 8, 11, 16, 23, 24, 27, 28, 29, 35, 51, 53, 56, 59, 60, 61, 62, 64, 65, 66, 69, 73, 77, 78, 80, 81, 82, 90, 94, 100, 104, 105, 106, 107, 108, 110, 112, 115, 118, 119, 120, 121, 129, 130, 133, 135, 136, 137, 140, 141, 142, 143, 147, 150, 151, 152, 154, 156, 158, 160, 162, 168, 175, 176, 177, 180, 181, 187, 188, 193, 200, 203, 210, 211, 213, 214, 216, 218, 219, 223, 227, 230, 235, 237, 238, 242, 244, 246, 247, 252, 253, 255, 256, 258, 262, 263, 264, 268, 270, 273, 275, 278, 279, 282, 283, 289, 292, 295, 296, 299, 301, 311, 312, 313, 315, 316, 319, 320, 325, 326, 332, 333, 335, 336, 337, 340, 342, 343, 344, 346, 349, 351, 360, 361, 363, 366, 367, 368, 370, 371, 372, 373, 375, 395, 398, 401, 410, 411, 415, 423, 434, 438, 439, 441, 442, 443, 445, 448, 451, 453, 455, 459, 460, 461, 479, 484, 485, 489, 492, 504, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 533, 535, 539, 540, 541, 542, 544, 561, 562, 568, 572, 575, 582, 583, 584, 585, 597, 603, 610, 617, 619, 625, 627, 639, 646, 649, 650, 651, 653, 663, 667, 686, 713, 714, 732, 742, 745, 746, 750, 751, 752, 754, 759, 761, 768, 777, 778, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 794, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 814, 822, 826, 827, 828, 831, 838, 839, 851, 854, 857, 858, 859, 860, 862, 864, 869, 870, 871, 888, 890, 899, 903, 906, 918, 921, 922, 926, 927, 928, 929, 931, 932, 933, 934, 935, 939, 942, 943, 946, 947, 948, 956, 958, 964, 965, 966, 967, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 986, 987, 988], "public": [0, 72, 332, 338, 340, 342, 343, 349, 350, 351, 352, 367, 370, 615, 622, 636, 637, 643, 928, 936, 973, 978, 979, 984, 985, 986], "releas": [0, 325, 327, 336, 338, 339, 341, 346, 349, 351, 371, 395, 398, 415, 418, 441, 442, 447, 452, 455, 463, 466, 475, 489, 512, 513, 515, 516, 518, 550, 553, 579, 581, 585, 591, 597, 599, 603, 609, 620, 631, 639, 668, 698, 738, 747, 750, 751, 761, 775, 791, 793, 810, 814, 819, 822, 823, 824, 828, 829, 846, 847, 849, 854, 858, 881, 900, 948, 950, 973, 974, 975, 976, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "februari": [0, 365, 424, 932, 974, 978], "1st": [0, 4, 55, 81, 143, 180, 278, 827, 828], "sinc": [0, 4, 5, 11, 23, 25, 33, 45, 49, 61, 64, 65, 66, 86, 108, 123, 130, 133, 135, 140, 151, 152, 156, 161, 179, 181, 196, 207, 211, 212, 223, 226, 231, 235, 237, 238, 244, 245, 253, 255, 279, 284, 285, 293, 296, 299, 307, 311, 312, 313, 320, 325, 333, 336, 338, 339, 340, 342, 343, 346, 349, 350, 351, 354, 361, 363, 364, 365, 366, 367, 368, 370, 371, 373, 375, 380, 389, 393, 397, 398, 400, 401, 404, 407, 420, 447, 477, 484, 487, 488, 489, 490, 491, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 512, 513, 514, 515, 518, 520, 539, 540, 542, 553, 561, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 589, 601, 602, 605, 606, 607, 609, 610, 615, 616, 617, 619, 622, 625, 626, 627, 630, 643, 650, 658, 660, 685, 691, 718, 739, 750, 751, 777, 778, 779, 780, 784, 785, 786, 787, 788, 791, 796, 799, 806, 807, 814, 822, 839, 840, 844, 845, 849, 851, 852, 853, 854, 855, 857, 859, 880, 883, 886, 921, 924, 925, 926, 928, 929, 933, 934, 935, 936, 938, 940, 942, 946, 947, 948, 956, 958, 967, 973, 974, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "sever": [0, 4, 9, 12, 23, 28, 33, 51, 52, 56, 68, 82, 102, 109, 116, 118, 121, 130, 135, 140, 141, 148, 151, 156, 168, 179, 198, 199, 210, 223, 230, 235, 240, 255, 269, 273, 284, 311, 312, 324, 332, 333, 335, 338, 340, 343, 349, 351, 360, 362, 363, 364, 367, 369, 370, 371, 373, 398, 400, 415, 438, 450, 459, 460, 489, 506, 507, 510, 511, 514, 515, 516, 521, 539, 540, 542, 561, 596, 597, 603, 639, 640, 641, 642, 643, 644, 745, 746, 747, 750, 751, 761, 777, 778, 784, 785, 786, 787, 788, 808, 809, 816, 833, 857, 858, 859, 860, 872, 900, 921, 924, 929, 932, 933, 935, 940, 942, 946, 948, 949, 951, 952, 955, 956, 958, 965, 966, 967, 973, 974, 975, 976, 977, 978, 980, 981, 982, 986], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 22, 23, 24, 25, 33, 35, 38, 39, 41, 42, 43, 46, 49, 52, 55, 57, 59, 60, 65, 71, 73, 78, 80, 82, 83, 90, 92, 99, 105, 107, 108, 109, 111, 129, 130, 133, 135, 136, 140, 141, 142, 147, 150, 151, 152, 153, 154, 156, 158, 179, 180, 181, 197, 203, 206, 208, 213, 215, 216, 222, 223, 224, 226, 229, 235, 236, 238, 241, 242, 249, 253, 255, 259, 260, 273, 278, 279, 281, 283, 284, 289, 290, 291, 296, 302, 304, 311, 312, 319, 320, 324, 325, 326, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 354, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 438, 443, 445, 446, 447, 459, 460, 465, 474, 475, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 636, 638, 639, 640, 641, 642, 643, 650, 655, 656, 663, 666, 671, 676, 681, 686, 692, 706, 707, 708, 709, 732, 735, 736, 740, 743, 745, 746, 747, 750, 751, 752, 753, 758, 761, 765, 770, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 869, 871, 873, 875, 886, 907, 921, 922, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 942, 944, 945, 946, 947, 948, 949, 952, 953, 956, 958, 959, 962, 963, 965, 966, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "appear": [0, 8, 42, 44, 102, 151, 230, 232, 233, 259, 260, 268, 270, 274, 289, 311, 312, 313, 333, 336, 338, 343, 351, 365, 368, 439, 440, 506, 518, 519, 530, 561, 578, 579, 581, 648, 651, 653, 663, 667, 669, 732, 739, 748, 765, 784, 785, 786, 787, 788, 851, 854, 888, 928, 934, 938, 973, 981, 985, 986], "follow": [0, 4, 7, 18, 24, 29, 33, 41, 50, 52, 58, 62, 65, 66, 83, 85, 95, 99, 102, 111, 115, 128, 140, 146, 150, 151, 152, 153, 158, 160, 167, 168, 177, 179, 180, 194, 197, 207, 213, 215, 227, 235, 244, 245, 273, 279, 281, 282, 284, 285, 286, 296, 307, 311, 312, 313, 315, 319, 320, 324, 325, 332, 333, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 354, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 383, 385, 393, 395, 397, 398, 399, 400, 404, 412, 414, 415, 416, 419, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 466, 485, 489, 491, 492, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 521, 532, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 578, 579, 580, 581, 582, 584, 585, 597, 603, 609, 610, 621, 622, 631, 643, 645, 650, 656, 660, 664, 669, 766, 786, 791, 792, 793, 795, 797, 799, 800, 801, 808, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 838, 847, 849, 850, 857, 858, 859, 860, 864, 865, 885, 900, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 951, 952, 953, 958, 967, 970, 973, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 128, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 151, 152, 153, 156, 157, 158, 159, 161, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 193, 194, 195, 196, 197, 199, 200, 201, 202, 204, 206, 210, 211, 212, 213, 215, 217, 221, 222, 223, 225, 227, 230, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 291, 293, 295, 296, 298, 299, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 316, 317, 319, 320, 325, 326, 332, 333, 335, 336, 338, 339, 340, 343, 344, 349, 350, 351, 354, 355, 356, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 386, 389, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 409, 410, 411, 413, 415, 417, 418, 420, 421, 422, 423, 425, 426, 427, 433, 434, 435, 436, 444, 445, 447, 448, 455, 456, 457, 458, 461, 463, 467, 468, 469, 470, 476, 477, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 528, 532, 534, 535, 538, 544, 545, 553, 554, 558, 559, 561, 563, 568, 578, 579, 580, 581, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 643, 644, 645, 650, 651, 654, 655, 656, 660, 664, 667, 668, 672, 673, 674, 676, 678, 679, 680, 681, 684, 685, 686, 687, 691, 693, 694, 695, 696, 698, 700, 701, 702, 703, 704, 706, 707, 718, 719, 725, 731, 732, 733, 734, 735, 736, 737, 738, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 813, 814, 815, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 837, 841, 842, 843, 844, 845, 846, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 875, 880, 884, 885, 886, 888, 889, 890, 891, 895, 896, 898, 899, 900, 906, 921, 922, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 938, 939, 942, 943, 945, 947, 948, 950, 951, 955, 958, 959, 962, 963, 965, 966, 971, 973, 974, 975, 976, 978, 979, 980, 983, 985, 986, 988], "month": [0, 4, 140, 333, 338, 342, 352, 973], "cycl": [0, 4, 38, 40, 46, 57, 85, 164, 222, 227, 242, 244, 284, 285, 338, 342, 362, 368, 530, 531, 578, 750, 751, 865, 921, 922, 981, 982, 983, 985, 986, 987, 988], "thrive": [0, 338], "intern": [0, 24, 65, 75, 90, 112, 123, 136, 146, 179, 253, 255, 290, 313, 320, 325, 333, 335, 340, 344, 347, 349, 351, 357, 360, 363, 367, 368, 370, 371, 373, 374, 389, 391, 396, 416, 419, 462, 485, 486, 497, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 544, 545, 561, 562, 589, 591, 594, 597, 603, 619, 627, 629, 647, 659, 681, 684, 708, 709, 733, 789, 790, 805, 806, 807, 828, 844, 845, 847, 849, 850, 851, 854, 857, 858, 859, 860, 900, 928, 929, 930, 932, 935, 938, 942, 944, 947, 948, 956, 973, 976, 982, 984, 985, 986, 987, 988, 989], "ha": [0, 4, 5, 8, 11, 12, 15, 23, 27, 31, 33, 40, 46, 51, 52, 55, 68, 73, 74, 78, 85, 104, 107, 109, 111, 115, 120, 132, 135, 140, 141, 142, 147, 151, 152, 153, 156, 172, 176, 179, 180, 181, 185, 196, 197, 199, 206, 210, 212, 216, 219, 221, 222, 224, 226, 227, 230, 233, 234, 235, 238, 239, 241, 246, 247, 252, 259, 260, 261, 263, 270, 273, 274, 276, 278, 281, 282, 283, 284, 285, 288, 291, 299, 304, 306, 311, 319, 320, 324, 325, 326, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 346, 347, 349, 350, 351, 352, 357, 360, 361, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 375, 386, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 412, 413, 414, 416, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 444, 445, 448, 449, 459, 460, 467, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 570, 578, 579, 580, 581, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 636, 638, 639, 640, 641, 642, 643, 646, 662, 664, 671, 691, 713, 724, 728, 741, 745, 746, 747, 748, 750, 751, 752, 753, 754, 761, 765, 768, 773, 774, 777, 778, 780, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 809, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 864, 868, 869, 870, 888, 901, 917, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 942, 944, 945, 946, 947, 948, 953, 956, 958, 962, 965, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "been": [0, 4, 9, 15, 24, 40, 49, 55, 74, 90, 135, 140, 142, 151, 203, 206, 208, 213, 233, 235, 241, 281, 282, 283, 284, 285, 290, 320, 325, 332, 333, 335, 336, 337, 338, 340, 342, 344, 346, 347, 349, 350, 351, 352, 357, 360, 361, 363, 365, 367, 368, 370, 373, 386, 389, 420, 422, 423, 425, 429, 438, 474, 485, 487, 500, 501, 518, 519, 532, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 584, 585, 609, 610, 617, 619, 624, 626, 627, 628, 629, 671, 741, 747, 750, 751, 753, 761, 773, 774, 798, 846, 849, 922, 924, 925, 927, 928, 929, 932, 933, 935, 938, 942, 944, 946, 947, 953, 956, 958, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "lead": [0, 7, 23, 28, 33, 48, 56, 66, 108, 111, 132, 133, 151, 152, 153, 158, 168, 170, 179, 183, 211, 235, 236, 238, 242, 258, 259, 270, 273, 275, 278, 279, 283, 299, 312, 315, 320, 324, 325, 332, 337, 346, 347, 350, 351, 357, 360, 361, 363, 365, 367, 368, 369, 370, 372, 403, 413, 416, 419, 447, 466, 478, 486, 489, 490, 491, 494, 498, 502, 508, 509, 510, 511, 514, 515, 516, 517, 557, 581, 597, 598, 601, 603, 604, 605, 611, 612, 613, 614, 630, 642, 646, 696, 745, 750, 751, 777, 789, 790, 794, 813, 820, 830, 841, 842, 847, 849, 857, 858, 859, 860, 921, 926, 928, 929, 931, 932, 933, 935, 936, 938, 940, 942, 945, 946, 948, 956, 958, 976, 978, 980, 981, 982, 983, 985, 986, 988], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 24, 27, 28, 29, 31, 33, 35, 36, 40, 41, 42, 43, 44, 46, 48, 49, 52, 53, 55, 56, 57, 58, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 79, 82, 83, 85, 88, 90, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 121, 128, 129, 130, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 152, 153, 154, 156, 158, 160, 161, 162, 164, 167, 168, 170, 171, 172, 173, 174, 175, 177, 180, 181, 182, 183, 185, 187, 188, 196, 197, 198, 202, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 226, 227, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 252, 253, 255, 258, 259, 260, 261, 262, 263, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 290, 291, 296, 297, 299, 303, 304, 305, 307, 308, 309, 311, 312, 313, 315, 317, 318, 319, 320, 324, 325, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 702, 703, 704, 705, 706, 707, 708, 709, 712, 714, 715, 716, 717, 720, 721, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 867, 868, 869, 870, 872, 873, 874, 875, 876, 880, 881, 882, 883, 884, 885, 886, 888, 889, 895, 897, 898, 899, 900, 901, 902, 903, 906, 916, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 945, 946, 947, 948, 949, 951, 952, 953, 955, 956, 958, 959, 960, 962, 963, 964, 967, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "decis": [0, 4, 15, 23, 25, 28, 31, 51, 53, 55, 97, 98, 101, 102, 104, 116, 139, 151, 161, 162, 171, 188, 189, 192, 193, 206, 207, 209, 216, 238, 256, 261, 264, 268, 273, 274, 275, 278, 287, 295, 296, 297, 298, 299, 300, 301, 305, 308, 309, 311, 324, 327, 334, 335, 338, 351, 361, 363, 370, 389, 420, 451, 455, 470, 487, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 544, 545, 582, 583, 584, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 649, 651, 653, 654, 658, 671, 676, 677, 685, 689, 690, 692, 706, 732, 738, 739, 742, 747, 750, 751, 761, 775, 777, 778, 780, 791, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 926, 932, 933, 934, 935, 936, 938, 939, 940, 945, 946, 947, 950, 952, 953, 954, 956, 965, 969, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 986, 987, 989], "make": [0, 4, 7, 8, 11, 14, 16, 20, 23, 24, 25, 35, 36, 39, 40, 51, 56, 57, 62, 67, 90, 108, 111, 116, 130, 133, 135, 140, 143, 150, 151, 152, 153, 158, 165, 168, 171, 172, 173, 175, 179, 180, 181, 185, 197, 200, 208, 210, 212, 213, 221, 223, 226, 227, 230, 235, 237, 238, 244, 245, 246, 262, 270, 273, 274, 279, 285, 299, 309, 311, 312, 313, 320, 324, 325, 326, 327, 332, 333, 336, 337, 339, 340, 341, 343, 344, 346, 349, 351, 354, 357, 360, 361, 363, 364, 365, 367, 368, 370, 371, 372, 373, 375, 392, 393, 394, 395, 397, 398, 400, 402, 403, 404, 409, 410, 411, 413, 439, 454, 465, 466, 473, 474, 478, 483, 485, 492, 502, 503, 506, 507, 534, 535, 558, 559, 582, 600, 606, 607, 622, 642, 646, 687, 692, 718, 719, 731, 745, 746, 747, 749, 752, 758, 762, 763, 764, 766, 767, 771, 772, 779, 780, 783, 816, 825, 828, 829, 833, 837, 839, 840, 841, 842, 855, 863, 869, 870, 880, 886, 892, 893, 918, 921, 922, 924, 926, 928, 929, 931, 932, 933, 934, 935, 937, 938, 939, 940, 942, 945, 946, 947, 948, 950, 951, 952, 953, 955, 956, 958, 963, 965, 967, 970, 973, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989], "process": [0, 4, 5, 24, 27, 28, 41, 42, 43, 44, 46, 61, 64, 66, 68, 72, 74, 86, 87, 89, 108, 115, 123, 124, 125, 126, 150, 158, 181, 213, 221, 222, 227, 235, 237, 238, 247, 273, 283, 289, 312, 313, 315, 324, 325, 326, 327, 333, 337, 338, 340, 342, 344, 347, 349, 350, 351, 357, 363, 364, 365, 367, 368, 369, 370, 371, 372, 376, 399, 400, 426, 447, 455, 474, 485, 486, 487, 488, 489, 512, 513, 514, 539, 540, 542, 561, 562, 564, 565, 566, 568, 569, 570, 573, 574, 576, 578, 583, 584, 590, 594, 615, 623, 636, 637, 654, 673, 691, 731, 745, 747, 750, 751, 761, 770, 771, 772, 781, 782, 798, 812, 816, 818, 819, 820, 829, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 898, 900, 921, 924, 928, 932, 935, 942, 944, 946, 948, 950, 951, 952, 953, 954, 956, 958, 959, 966, 967, 969, 973, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987], "structur": [0, 3, 9, 14, 16, 19, 32, 39, 40, 75, 96, 114, 134, 148, 199, 203, 208, 227, 230, 241, 258, 278, 282, 285, 287, 299, 314, 316, 324, 333, 335, 338, 340, 343, 349, 351, 352, 354, 360, 363, 365, 366, 367, 368, 370, 371, 372, 373, 393, 394, 397, 401, 402, 403, 404, 405, 408, 413, 414, 423, 447, 454, 455, 459, 462, 464, 465, 472, 481, 486, 492, 495, 514, 561, 562, 563, 567, 568, 569, 640, 647, 660, 664, 775, 797, 802, 829, 841, 842, 845, 857, 858, 859, 860, 863, 885, 886, 903, 906, 929, 931, 932, 935, 937, 938, 942, 945, 948, 952, 953, 961, 966, 967, 973, 974, 976, 977, 979, 983], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 297, 298, 299, 304, 305, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 723, 724, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 888, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 913, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 958, 960, 961, 962, 963, 964, 965, 966, 967, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "laid": [0, 150, 338], "out": [0, 3, 4, 7, 9, 12, 14, 16, 24, 27, 36, 46, 65, 93, 97, 103, 105, 112, 126, 148, 150, 153, 179, 181, 187, 197, 221, 223, 233, 235, 238, 243, 247, 252, 278, 279, 284, 291, 293, 295, 296, 299, 311, 323, 333, 335, 336, 338, 340, 341, 342, 344, 349, 351, 363, 366, 368, 370, 373, 379, 387, 388, 394, 395, 397, 398, 400, 423, 433, 434, 435, 436, 450, 466, 467, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 539, 540, 542, 555, 558, 559, 585, 590, 591, 592, 593, 602, 606, 617, 619, 624, 626, 627, 639, 640, 643, 652, 677, 691, 692, 747, 749, 750, 751, 752, 754, 755, 756, 757, 761, 775, 784, 785, 786, 787, 788, 793, 798, 801, 805, 806, 807, 815, 819, 826, 838, 841, 842, 864, 894, 896, 901, 922, 926, 927, 931, 932, 933, 935, 940, 942, 953, 954, 955, 956, 962, 965, 967, 969, 973, 975, 977, 979, 981, 982, 985, 986, 989], "document": [0, 3, 14, 17, 28, 41, 47, 52, 65, 67, 80, 81, 83, 85, 115, 160, 162, 176, 177, 194, 210, 213, 219, 236, 270, 292, 304, 313, 324, 325, 326, 327, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 346, 349, 351, 352, 354, 357, 360, 362, 363, 368, 371, 374, 396, 398, 399, 400, 401, 404, 408, 415, 439, 440, 450, 452, 462, 472, 474, 487, 495, 515, 539, 540, 541, 542, 545, 555, 582, 590, 594, 609, 610, 617, 619, 624, 625, 626, 627, 647, 654, 656, 662, 668, 687, 708, 709, 719, 728, 729, 730, 741, 743, 747, 750, 751, 761, 771, 773, 776, 779, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 810, 821, 849, 854, 865, 868, 870, 883, 898, 921, 928, 930, 932, 933, 934, 935, 936, 940, 946, 949, 950, 951, 956, 960, 965, 967, 974, 975, 979], "peopl": [0, 6, 151, 214, 238, 311, 325, 326, 333, 335, 337, 338, 342, 369, 444, 445, 592, 786, 952, 963], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 29, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 61, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 78, 83, 85, 87, 90, 93, 96, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 117, 118, 119, 120, 129, 130, 132, 133, 135, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 183, 188, 190, 197, 199, 200, 201, 202, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 219, 222, 223, 224, 226, 229, 230, 232, 233, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 255, 258, 259, 263, 266, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 285, 286, 288, 290, 291, 292, 293, 297, 299, 301, 303, 307, 308, 311, 312, 313, 315, 319, 320, 324, 325, 326, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 350, 351, 352, 354, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 383, 385, 386, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 439, 440, 444, 446, 447, 449, 451, 452, 453, 454, 455, 459, 460, 461, 463, 466, 467, 468, 469, 470, 471, 474, 475, 477, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 655, 656, 658, 660, 663, 664, 666, 667, 668, 669, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 690, 691, 693, 695, 696, 698, 700, 701, 703, 704, 706, 707, 711, 712, 713, 715, 717, 718, 719, 723, 724, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 750, 751, 753, 754, 759, 761, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 873, 874, 875, 878, 880, 885, 886, 887, 890, 891, 895, 896, 898, 900, 903, 906, 907, 911, 912, 913, 916, 918, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 955, 956, 958, 959, 960, 961, 962, 964, 965, 966, 967, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "current": [0, 8, 42, 140, 151, 197, 273, 281, 325, 326, 333, 336, 338, 339, 340, 343, 347, 349, 351, 352, 359, 360, 362, 363, 367, 370, 371, 372, 373, 392, 401, 419, 420, 421, 422, 423, 424, 425, 426, 427, 483, 486, 492, 504, 505, 508, 509, 510, 511, 513, 515, 516, 517, 527, 542, 544, 561, 568, 577, 578, 597, 609, 618, 622, 626, 627, 628, 629, 738, 745, 746, 794, 798, 806, 807, 825, 837, 847, 857, 858, 859, 860, 863, 899, 907, 921, 926, 928, 932, 935, 936, 942, 953, 965, 981, 985, 987, 988, 989], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 18, 22, 25, 27, 31, 34, 35, 36, 38, 39, 40, 42, 43, 44, 48, 49, 52, 53, 54, 55, 56, 57, 59, 60, 62, 64, 65, 71, 72, 75, 77, 81, 82, 83, 85, 86, 87, 90, 91, 94, 95, 96, 98, 99, 101, 105, 107, 108, 110, 111, 112, 114, 115, 116, 117, 119, 126, 128, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 151, 152, 154, 156, 159, 160, 161, 163, 165, 167, 168, 169, 170, 171, 177, 179, 181, 185, 186, 188, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 206, 207, 210, 212, 213, 215, 221, 223, 224, 226, 230, 235, 236, 237, 238, 239, 242, 246, 248, 249, 253, 256, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 273, 276, 281, 283, 284, 285, 286, 289, 290, 296, 297, 298, 299, 300, 303, 304, 305, 306, 309, 311, 312, 313, 316, 317, 318, 319, 320, 324, 325, 326, 327, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 344, 345, 346, 347, 351, 352, 353, 354, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 371, 373, 375, 377, 383, 386, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 410, 411, 414, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 440, 447, 449, 451, 455, 461, 462, 470, 476, 477, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 523, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 636, 638, 639, 640, 641, 642, 643, 644, 651, 652, 653, 659, 662, 667, 671, 685, 691, 692, 708, 709, 729, 730, 745, 746, 747, 749, 750, 751, 756, 761, 765, 766, 771, 772, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 864, 867, 869, 870, 873, 886, 888, 916, 920, 921, 923, 924, 926, 928, 929, 930, 933, 934, 935, 936, 937, 939, 940, 942, 944, 945, 946, 947, 948, 952, 953, 956, 958, 962, 963, 965, 966, 967, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "mainten": [0, 338, 346, 349, 354, 356, 928, 953, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "j\u00e9r\u00e9mie": [0, 1, 981, 982, 983, 984, 985, 986, 987, 988, 989], "du": [0, 1, 2, 973, 974, 981, 982, 983, 984, 985, 986, 987, 988, 989], "boisberrang": [0, 1, 981, 982, 983, 984, 985, 986, 987, 988, 989], "jori": [0, 1, 980, 981, 982, 985, 986], "van": [0, 1, 332, 365, 420, 425, 485, 578, 643, 647, 922, 929, 932, 938, 956, 974, 975, 976, 977, 980, 981, 982, 984, 985, 986, 988, 989], "den": [0, 1, 974, 975, 980, 981, 982, 985, 986], "bossch": [0, 1, 980, 981, 982, 986], "lo\u00efc": [0, 1, 981, 984, 986, 987, 988], "est\u00e8v": [0, 1, 981, 984, 986, 987, 988], "thoma": [0, 1, 93, 206, 273, 325, 328, 352, 845, 928, 942, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "j": [0, 1, 11, 16, 33, 34, 36, 39, 56, 72, 73, 74, 98, 102, 103, 113, 136, 147, 152, 191, 202, 214, 221, 234, 235, 240, 246, 257, 263, 266, 277, 319, 325, 332, 333, 335, 342, 344, 349, 360, 361, 363, 365, 367, 368, 370, 371, 373, 374, 389, 392, 396, 404, 405, 420, 425, 449, 464, 467, 468, 469, 471, 479, 482, 485, 487, 488, 489, 491, 492, 498, 510, 511, 544, 545, 583, 584, 588, 595, 596, 599, 600, 617, 618, 620, 631, 639, 640, 641, 643, 644, 645, 647, 656, 659, 661, 665, 667, 669, 672, 673, 674, 676, 705, 706, 708, 709, 724, 728, 738, 739, 740, 741, 778, 779, 786, 791, 792, 793, 795, 797, 798, 799, 800, 801, 802, 803, 820, 829, 857, 858, 921, 922, 926, 928, 929, 930, 932, 933, 934, 935, 936, 938, 939, 940, 942, 944, 946, 947, 948, 950, 967, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988], "fan": [0, 1, 325, 352, 947, 981, 982, 983, 984, 985, 986, 987, 988, 989], "olivi": [0, 1, 14, 16, 33, 44, 56, 168, 179, 197, 200, 236, 238, 311, 312, 313, 352, 845, 945, 951, 953, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "grisel": [0, 1, 14, 16, 33, 44, 56, 168, 179, 197, 200, 236, 238, 311, 312, 313, 352, 951, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "yaroslav": [0, 1, 973, 974, 975, 976, 979, 980, 981, 982], "halchenko": [0, 1, 973, 974, 975, 976, 979, 980, 981, 982], "tim": [0, 1, 104, 117, 973, 978, 979, 982, 983, 984, 986, 988, 989], "head": [0, 1, 24, 65, 104, 117, 140, 151, 167, 168, 197, 219, 226, 279, 281, 286, 338, 346, 368, 956, 978, 979, 988, 989], "nicola": [0, 1, 133, 277, 609, 928, 945, 973, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "hug": [0, 1, 133, 277, 950, 981, 982, 983, 984, 985, 986, 987], "adrin": [0, 1, 60, 308, 352, 981, 982, 983, 984, 985, 986, 987, 988, 989], "jalali": [0, 1, 60, 308, 352, 981, 982, 983, 984, 985, 986, 987, 988, 989], "julien": [0, 1, 609, 928, 956, 973, 976, 980, 981, 985, 986, 987, 988, 989], "jerphanion": [0, 1, 985, 986, 987, 988, 989], "guillaum": [0, 1, 5, 7, 66, 69, 90, 118, 135, 140, 141, 142, 144, 167, 168, 181, 200, 273, 956, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "lemaitr": [0, 1, 5, 7, 66, 69, 90, 118, 135, 140, 141, 142, 144, 167, 168, 181, 200, 273, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "christian": [0, 1, 18, 179, 180, 181, 197, 311, 333, 956, 967, 973, 974, 977, 980, 981, 983, 984, 985, 986, 987, 988, 989], "lorentzen": [0, 1, 179, 180, 181, 197, 983, 984, 985, 986, 987, 988, 989], "jan": [0, 1, 22, 23, 24, 25, 135, 136, 138, 139, 140, 141, 142, 144, 180, 212, 828, 973, 976, 977, 978, 979, 981, 982, 985, 989], "hendrik": [0, 1, 22, 23, 24, 25, 135, 136, 138, 139, 140, 141, 142, 144, 212, 973, 976, 977, 978, 979], "metzen": [0, 1, 22, 23, 24, 25, 135, 136, 138, 139, 140, 141, 142, 144, 212, 973, 976, 977, 978, 979], "andrea": [0, 1, 28, 68, 90, 103, 170, 211, 274, 275, 290, 307, 308, 352, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "mueller": [0, 1, 68, 90, 103, 170, 211, 290, 307, 308, 956, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "vlad": [0, 1, 85, 213, 271, 973, 974, 975, 976, 977, 978, 980, 981, 982], "nicula": [0, 1, 85, 213, 271, 973, 974, 975, 976, 977, 978, 980, 981, 982], "joel": [0, 1, 66, 352, 371, 486, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "nothman": [0, 1, 66, 352, 371, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "hanmin": [0, 1, 274, 980, 981, 982, 983, 984], "qin": [0, 1, 274, 335, 371, 980, 981, 982, 983, 984], "bertrand": [0, 1, 973, 979, 980, 985, 986], "thirion": [0, 1, 973, 979, 980, 986], "tom": [0, 1, 171, 187, 253, 255, 275, 276, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "dupr\u00e9": [0, 1, 275, 276, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988], "la": [0, 1, 171, 187, 253, 255, 275, 276, 335, 956, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "tour": [0, 1, 171, 187, 253, 255, 275, 276, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "nell": [0, 1, 35, 202, 209, 973, 974, 975, 976, 977, 978, 979, 980, 982, 985], "roman": [0, 1, 179, 197, 578, 863, 975, 980, 981, 982, 983, 984, 985, 986, 987], "yurchak": [0, 1, 179, 197, 371, 980, 981, 982, 983, 984, 985, 986, 987], "meekail": [0, 1, 987, 988, 989], "zain": [0, 1, 987, 988, 989], "pleas": [0, 16, 105, 112, 183, 211, 253, 263, 281, 282, 283, 284, 285, 286, 325, 332, 333, 336, 338, 339, 340, 342, 346, 349, 350, 351, 354, 357, 359, 362, 363, 370, 371, 401, 447, 518, 519, 582, 583, 584, 601, 602, 605, 606, 607, 615, 616, 750, 751, 772, 826, 838, 851, 854, 857, 858, 859, 860, 921, 932, 936, 942, 946, 947, 952, 953, 955, 958, 965, 967, 973, 976, 980, 981, 982, 983, 984, 985, 986, 987, 988], "do": [0, 4, 10, 23, 38, 56, 62, 68, 81, 89, 91, 92, 95, 103, 105, 107, 109, 111, 112, 118, 124, 130, 140, 146, 151, 152, 153, 176, 179, 197, 199, 201, 213, 227, 230, 233, 236, 238, 252, 253, 255, 259, 284, 293, 296, 299, 304, 307, 312, 313, 319, 320, 324, 325, 326, 333, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 351, 352, 361, 362, 363, 364, 365, 366, 367, 370, 371, 372, 401, 412, 454, 487, 489, 493, 495, 503, 506, 532, 533, 539, 540, 542, 596, 597, 603, 606, 607, 610, 617, 619, 627, 687, 713, 728, 732, 764, 767, 781, 782, 786, 813, 814, 816, 823, 827, 829, 834, 835, 837, 838, 839, 840, 857, 858, 859, 860, 868, 906, 921, 924, 926, 928, 929, 932, 933, 935, 936, 940, 942, 947, 948, 952, 953, 956, 958, 965, 966, 967, 973, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "email": [0, 311, 338, 349, 371, 784, 934, 956], "directli": [0, 6, 18, 25, 41, 42, 51, 65, 104, 133, 143, 167, 179, 185, 197, 207, 240, 271, 273, 285, 313, 320, 324, 336, 338, 339, 340, 342, 344, 350, 351, 352, 360, 361, 363, 364, 365, 366, 367, 371, 373, 394, 403, 413, 415, 420, 425, 478, 518, 519, 520, 521, 548, 562, 571, 583, 594, 597, 598, 603, 604, 611, 612, 613, 614, 615, 628, 632, 635, 641, 724, 728, 731, 740, 741, 747, 750, 751, 761, 794, 808, 809, 810, 816, 826, 828, 831, 838, 900, 921, 928, 930, 935, 937, 939, 942, 947, 948, 953, 959, 962, 963, 973, 981, 982, 984, 985, 986], "ask": [0, 146, 147, 235, 327, 337, 338, 342, 343, 346, 351, 352, 372, 791, 792, 793, 795, 797, 799, 800, 801, 950, 955, 989], "assist": [0, 338, 349, 942, 956], "report": [0, 4, 8, 29, 64, 69, 130, 143, 167, 233, 243, 281, 288, 320, 333, 337, 339, 340, 341, 344, 346, 349, 351, 354, 357, 363, 367, 562, 600, 609, 615, 636, 637, 651, 664, 679, 680, 688, 733, 734, 737, 778, 787, 806, 807, 844, 862, 880, 928, 935, 952, 953, 955, 974, 977, 980, 981, 983, 984, 986, 988, 989], "issu": [0, 4, 23, 72, 78, 179, 197, 240, 325, 327, 332, 341, 342, 343, 346, 347, 349, 351, 352, 353, 354, 357, 359, 363, 365, 366, 371, 373, 400, 403, 413, 424, 433, 434, 435, 485, 490, 494, 524, 536, 537, 539, 540, 542, 562, 578, 642, 646, 719, 820, 825, 837, 876, 921, 922, 929, 935, 940, 942, 947, 952, 953, 955, 966, 967, 973, 975, 977, 978, 979, 980, 981, 982, 983, 985, 986, 988], "instead": [0, 4, 5, 6, 44, 49, 51, 52, 65, 90, 102, 106, 115, 130, 133, 135, 179, 181, 194, 197, 203, 227, 231, 232, 236, 237, 252, 258, 273, 281, 282, 283, 284, 285, 299, 301, 311, 313, 320, 324, 325, 332, 333, 336, 337, 338, 339, 340, 342, 343, 346, 347, 349, 350, 351, 357, 359, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 384, 389, 392, 393, 394, 396, 397, 398, 401, 407, 410, 416, 418, 433, 434, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 460, 461, 484, 486, 488, 490, 491, 492, 497, 498, 500, 501, 504, 505, 506, 507, 508, 509, 511, 513, 515, 516, 519, 521, 533, 534, 540, 541, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 578, 581, 583, 586, 589, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 621, 622, 623, 624, 627, 629, 630, 638, 641, 645, 650, 658, 696, 724, 728, 733, 745, 746, 747, 751, 759, 761, 766, 767, 782, 783, 792, 800, 806, 807, 810, 811, 812, 821, 822, 827, 829, 839, 840, 843, 850, 852, 854, 855, 857, 858, 859, 860, 862, 863, 875, 881, 886, 907, 921, 922, 924, 928, 929, 931, 932, 933, 936, 937, 942, 946, 947, 948, 952, 955, 963, 965, 967, 970, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "see": [0, 4, 5, 7, 22, 23, 25, 33, 40, 45, 46, 49, 52, 53, 57, 59, 60, 62, 63, 73, 78, 80, 81, 85, 90, 92, 96, 100, 101, 102, 105, 106, 107, 108, 110, 112, 115, 118, 123, 129, 130, 131, 135, 140, 141, 142, 146, 148, 151, 152, 154, 156, 158, 159, 160, 170, 180, 181, 182, 185, 196, 197, 199, 201, 208, 210, 216, 217, 219, 222, 223, 224, 229, 230, 232, 234, 235, 236, 237, 238, 242, 244, 245, 246, 249, 250, 253, 259, 260, 262, 266, 273, 279, 281, 282, 283, 284, 285, 286, 290, 299, 311, 312, 313, 315, 316, 317, 318, 320, 324, 325, 326, 330, 331, 332, 333, 335, 336, 337, 338, 340, 342, 344, 345, 346, 349, 350, 351, 354, 361, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 385, 389, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 433, 434, 435, 436, 438, 439, 442, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 561, 562, 565, 570, 573, 574, 578, 579, 580, 581, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 650, 652, 657, 659, 662, 664, 693, 713, 724, 728, 729, 730, 731, 738, 740, 741, 745, 746, 747, 749, 750, 751, 752, 753, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 885, 886, 901, 903, 906, 921, 922, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 942, 943, 944, 945, 946, 947, 948, 949, 951, 953, 956, 958, 960, 965, 966, 967, 973, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 986, 987, 988], "what": [0, 4, 9, 12, 36, 41, 48, 49, 78, 86, 90, 107, 150, 151, 168, 185, 187, 195, 208, 219, 270, 313, 315, 320, 325, 333, 338, 339, 340, 342, 344, 346, 350, 351, 352, 353, 363, 369, 370, 371, 454, 487, 539, 540, 542, 597, 603, 647, 834, 835, 837, 838, 839, 840, 857, 858, 859, 860, 931, 932, 933, 935, 948, 953, 955, 958, 973, 980], "best": [0, 4, 6, 8, 12, 13, 18, 22, 24, 36, 42, 50, 56, 64, 65, 66, 67, 71, 77, 85, 89, 93, 94, 95, 102, 108, 109, 110, 111, 112, 118, 121, 133, 135, 136, 141, 146, 151, 158, 163, 167, 168, 175, 193, 194, 195, 199, 202, 206, 211, 212, 215, 223, 227, 229, 233, 234, 235, 236, 239, 242, 243, 246, 247, 249, 250, 252, 257, 262, 274, 279, 283, 284, 299, 302, 307, 311, 312, 313, 318, 324, 325, 327, 332, 335, 337, 338, 341, 344, 350, 351, 354, 360, 361, 363, 367, 368, 370, 371, 372, 373, 384, 395, 398, 400, 402, 403, 404, 410, 413, 416, 423, 433, 434, 435, 489, 496, 497, 503, 505, 507, 508, 509, 510, 511, 513, 515, 516, 517, 519, 521, 544, 545, 548, 553, 561, 562, 586, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 620, 621, 622, 623, 624, 626, 627, 629, 630, 631, 639, 640, 641, 644, 645, 654, 659, 670, 671, 672, 673, 674, 678, 679, 689, 690, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 733, 734, 735, 737, 740, 741, 742, 744, 745, 746, 747, 750, 751, 761, 772, 774, 777, 782, 783, 792, 800, 806, 807, 850, 852, 855, 857, 858, 859, 860, 921, 926, 927, 928, 929, 932, 935, 936, 938, 946, 948, 952, 953, 956, 958, 963, 967, 973, 976, 979, 981, 982, 983, 986, 987, 988], "wai": [0, 4, 16, 25, 46, 55, 65, 68, 104, 110, 114, 116, 133, 142, 151, 153, 154, 180, 184, 194, 208, 209, 212, 216, 230, 235, 242, 244, 273, 274, 284, 286, 320, 324, 325, 326, 332, 334, 336, 337, 340, 341, 346, 347, 351, 352, 354, 357, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 378, 395, 396, 402, 403, 404, 410, 411, 413, 414, 420, 447, 506, 507, 514, 523, 540, 550, 551, 562, 583, 617, 618, 627, 628, 629, 655, 657, 668, 686, 687, 704, 705, 707, 713, 724, 728, 738, 743, 770, 778, 795, 816, 822, 827, 833, 859, 860, 903, 906, 921, 922, 926, 927, 928, 929, 930, 931, 932, 933, 935, 937, 938, 939, 940, 942, 944, 946, 947, 948, 952, 953, 955, 956, 958, 966, 967, 973, 975, 981, 986, 987], "question": [0, 123, 150, 235, 307, 327, 337, 338, 343, 346, 367, 370, 778, 851, 854, 928, 931, 932, 938, 950, 956], "faq": [0, 346, 367, 643, 929, 942], "how": [0, 4, 5, 7, 8, 9, 10, 19, 20, 23, 24, 29, 30, 33, 46, 47, 48, 49, 52, 55, 63, 64, 65, 68, 71, 73, 78, 91, 95, 99, 100, 103, 106, 107, 108, 109, 111, 112, 116, 118, 130, 140, 142, 148, 151, 152, 153, 154, 156, 160, 168, 169, 175, 180, 181, 182, 183, 186, 187, 193, 197, 203, 204, 208, 211, 214, 215, 216, 218, 227, 230, 231, 233, 235, 236, 237, 242, 244, 245, 247, 248, 249, 253, 255, 257, 259, 260, 270, 278, 282, 283, 284, 296, 297, 299, 302, 307, 311, 312, 315, 319, 324, 325, 326, 327, 333, 336, 337, 339, 340, 341, 343, 346, 350, 351, 352, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 385, 389, 394, 395, 396, 397, 398, 400, 403, 415, 419, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 510, 517, 518, 519, 520, 521, 532, 533, 534, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 561, 573, 574, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 639, 640, 642, 643, 655, 671, 707, 740, 747, 750, 751, 761, 772, 793, 795, 798, 801, 805, 806, 807, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 847, 854, 921, 922, 926, 927, 928, 929, 931, 932, 938, 939, 940, 942, 944, 945, 947, 948, 951, 953, 955, 956, 958, 960, 962, 967, 969, 973, 975, 978, 984, 987, 988, 989], "you": [0, 14, 15, 22, 65, 106, 107, 110, 112, 130, 133, 147, 152, 167, 180, 181, 208, 219, 224, 230, 235, 236, 242, 250, 259, 281, 282, 285, 289, 292, 320, 324, 325, 326, 332, 333, 336, 337, 338, 339, 340, 342, 343, 344, 346, 347, 350, 351, 354, 357, 361, 362, 363, 364, 365, 367, 370, 371, 372, 374, 375, 380, 389, 396, 400, 415, 418, 420, 447, 451, 454, 455, 460, 461, 483, 484, 487, 500, 501, 502, 504, 506, 508, 510, 512, 515, 518, 519, 520, 521, 530, 531, 539, 540, 542, 558, 559, 561, 578, 597, 598, 601, 602, 603, 605, 606, 607, 609, 610, 615, 616, 617, 619, 623, 625, 626, 627, 628, 629, 638, 651, 735, 746, 749, 750, 751, 752, 762, 763, 764, 766, 767, 777, 778, 779, 780, 784, 785, 786, 787, 788, 791, 792, 793, 795, 796, 797, 799, 806, 808, 809, 813, 814, 821, 822, 823, 834, 835, 837, 838, 839, 840, 842, 844, 845, 849, 851, 854, 857, 858, 859, 860, 886, 898, 921, 922, 927, 928, 932, 933, 936, 938, 939, 942, 943, 946, 947, 948, 951, 952, 955, 956, 958, 959, 962, 965, 967, 973, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "can": [0, 4, 5, 7, 8, 9, 10, 12, 14, 15, 18, 22, 23, 24, 25, 28, 29, 30, 33, 36, 38, 39, 42, 44, 45, 49, 51, 52, 53, 55, 56, 57, 58, 60, 64, 65, 66, 67, 71, 72, 73, 74, 75, 78, 86, 88, 89, 90, 91, 93, 95, 96, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 128, 129, 130, 132, 133, 135, 140, 141, 142, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 164, 167, 168, 170, 172, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 187, 195, 196, 197, 199, 200, 201, 206, 207, 208, 209, 210, 212, 216, 219, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 242, 244, 246, 247, 249, 250, 252, 253, 255, 257, 258, 259, 260, 262, 269, 270, 271, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 289, 290, 292, 293, 296, 297, 299, 302, 307, 311, 312, 313, 317, 318, 319, 320, 324, 325, 326, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 346, 347, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 384, 386, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 423, 433, 434, 435, 438, 447, 450, 454, 459, 460, 463, 472, 475, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 530, 531, 532, 533, 534, 535, 539, 540, 542, 543, 545, 548, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 583, 585, 586, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 638, 640, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 655, 658, 660, 662, 663, 669, 671, 672, 673, 674, 676, 677, 679, 680, 682, 683, 687, 688, 689, 690, 692, 693, 696, 702, 705, 706, 707, 708, 709, 713, 729, 730, 732, 733, 734, 735, 737, 738, 739, 742, 743, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 806, 807, 808, 809, 812, 813, 814, 816, 817, 818, 822, 823, 824, 827, 828, 829, 834, 841, 842, 847, 849, 850, 851, 852, 854, 855, 857, 858, 859, 860, 861, 862, 865, 867, 869, 873, 875, 880, 885, 886, 892, 895, 898, 900, 902, 903, 906, 913, 916, 917, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 952, 953, 955, 956, 958, 959, 960, 962, 963, 964, 965, 966, 967, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "contribut": [0, 13, 112, 140, 244, 278, 327, 335, 336, 340, 341, 342, 346, 351, 352, 354, 368, 369, 370, 373, 398, 400, 504, 505, 510, 511, 676, 679, 706, 926, 932, 935, 940, 947, 950, 952, 953, 956, 965, 973, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "activ": [0, 148, 187, 221, 227, 236, 287, 313, 332, 333, 336, 338, 339, 344, 346, 349, 351, 352, 354, 364, 447, 453, 477, 583, 586, 588, 601, 602, 604, 605, 606, 614, 615, 616, 633, 634, 635, 636, 637, 664, 669, 745, 805, 806, 807, 845, 898, 928, 929, 930, 931, 935, 936, 937, 945], "who": [0, 325, 327, 333, 338, 345, 352, 354, 791, 792, 793, 795, 797, 799, 800, 801, 950, 952, 975, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "also": [0, 4, 7, 11, 16, 18, 22, 23, 24, 25, 29, 42, 44, 49, 52, 53, 55, 59, 64, 65, 71, 73, 77, 78, 85, 93, 95, 102, 106, 108, 110, 111, 112, 116, 118, 129, 130, 131, 133, 135, 137, 140, 147, 151, 152, 153, 154, 156, 159, 160, 162, 168, 171, 172, 175, 179, 180, 181, 184, 188, 196, 197, 199, 209, 211, 216, 227, 233, 235, 236, 237, 238, 241, 242, 244, 245, 246, 253, 256, 261, 264, 266, 268, 273, 274, 275, 277, 278, 281, 282, 283, 284, 293, 295, 296, 297, 299, 301, 311, 312, 313, 315, 316, 319, 320, 324, 325, 326, 331, 332, 333, 335, 336, 337, 338, 340, 341, 344, 346, 347, 349, 350, 351, 354, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 389, 390, 391, 393, 394, 397, 398, 399, 401, 403, 413, 414, 416, 418, 433, 435, 443, 447, 449, 454, 459, 483, 484, 486, 487, 492, 497, 500, 502, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 558, 559, 560, 561, 562, 573, 583, 584, 586, 594, 595, 596, 597, 598, 601, 603, 604, 605, 607, 611, 612, 613, 614, 623, 627, 629, 632, 635, 638, 642, 645, 646, 650, 661, 664, 673, 679, 680, 688, 693, 713, 729, 730, 733, 734, 737, 745, 746, 747, 750, 751, 761, 764, 767, 771, 772, 774, 775, 776, 778, 788, 791, 792, 793, 795, 796, 797, 799, 800, 801, 805, 806, 807, 809, 811, 812, 817, 818, 822, 826, 829, 834, 838, 851, 854, 857, 858, 859, 860, 869, 888, 896, 900, 921, 922, 924, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 942, 943, 945, 946, 947, 948, 952, 953, 955, 956, 958, 963, 965, 966, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "help": [0, 4, 9, 11, 15, 64, 68, 90, 96, 152, 197, 199, 236, 238, 271, 296, 299, 313, 320, 324, 325, 336, 339, 340, 341, 342, 343, 344, 346, 347, 351, 352, 353, 357, 363, 364, 367, 371, 373, 385, 487, 528, 578, 601, 605, 616, 636, 637, 643, 665, 785, 857, 858, 859, 860, 922, 926, 927, 929, 931, 932, 934, 936, 942, 943, 948, 951, 952, 953, 955, 956, 967, 979, 980, 981, 984, 987], "triag": [0, 327, 338, 341], "pr": [0, 120, 325, 338, 341, 346, 371, 691, 932, 983, 985], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 60, 64, 65, 66, 67, 68, 69, 72, 74, 77, 78, 79, 80, 81, 85, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 130, 131, 133, 136, 137, 138, 139, 140, 143, 146, 147, 150, 151, 152, 153, 154, 156, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 285, 286, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 324, 325, 327, 330, 331, 333, 335, 339, 340, 341, 342, 343, 344, 346, 347, 349, 350, 357, 360, 361, 363, 367, 369, 371, 372, 373, 375, 379, 383, 384, 389, 392, 395, 398, 400, 403, 405, 409, 410, 411, 413, 415, 416, 418, 420, 423, 425, 433, 434, 435, 439, 442, 443, 446, 447, 448, 454, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 487, 489, 491, 492, 494, 495, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 561, 562, 565, 566, 569, 570, 571, 573, 574, 578, 579, 580, 581, 583, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 620, 621, 622, 623, 624, 626, 628, 629, 630, 631, 636, 637, 640, 641, 642, 643, 644, 645, 646, 652, 655, 657, 668, 672, 673, 674, 687, 693, 707, 728, 731, 735, 741, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 779, 780, 781, 782, 783, 789, 790, 792, 794, 795, 797, 798, 799, 800, 801, 805, 806, 807, 809, 812, 813, 814, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 834, 835, 837, 838, 839, 840, 841, 842, 849, 850, 851, 852, 854, 855, 858, 860, 861, 862, 863, 880, 881, 885, 886, 889, 890, 897, 901, 903, 906, 921, 922, 924, 926, 927, 929, 931, 932, 933, 935, 937, 938, 939, 940, 944, 945, 947, 948, 950, 952, 954, 955, 956, 958, 961, 965, 966, 969, 973, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 989], "arturo": [0, 33, 52, 158, 236, 238, 278, 311, 312, 313, 328, 987, 988], "amor": [0, 33, 52, 158, 236, 238, 278, 311, 312, 313, 328, 987, 988], "juan": [0, 328, 973, 984, 985, 986, 987, 988], "carlo": [0, 211, 328, 370, 373, 562, 592, 593, 924, 937, 973, 984, 985, 986, 987, 988], "alfaro": [0, 328, 984, 985, 986, 987, 988], "jim\u00e9nez": [0, 328, 981, 984, 985, 986, 987, 988], "luci": [0, 241, 328, 984, 985, 986, 987, 988], "liu": [0, 241, 328, 514, 676, 706, 932, 938, 976, 979, 980, 981, 984, 985, 986, 987, 988], "martin": [0, 328, 672, 673, 674, 928, 932, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988], "loyola": [0, 328, 986, 987], "sylvain": [0, 328, 977, 982, 983, 984, 985, 986, 987], "mari\u00e9": [0, 328, 982, 983, 984, 985, 986, 987], "chiara": [0, 328, 329, 983, 984, 985, 986, 987, 988, 989], "marmo": [0, 328, 329, 983, 984, 985, 986, 987, 988, 989], "maxwel": [0, 328, 983, 986, 987, 988], "norbert": [0, 328, 975, 985, 986, 987], "prein": [0, 328, 985, 986, 987], "reshama": [0, 322, 328, 981, 982, 984, 985, 986, 987, 988], "shaikh": [0, 322, 328, 981, 982, 984, 985, 986, 987, 988], "albert": [0, 206, 328, 980, 981, 982, 985, 986], "around": [0, 4, 24, 33, 48, 77, 102, 111, 141, 152, 156, 238, 271, 288, 290, 291, 299, 302, 311, 312, 313, 320, 333, 335, 338, 344, 349, 363, 367, 368, 371, 373, 422, 423, 466, 495, 571, 591, 600, 655, 745, 753, 795, 797, 799, 800, 801, 829, 928, 929, 931, 932, 938, 942, 946, 952, 953, 956, 965, 967, 977, 978], "lauren": [0, 321, 643, 647, 929, 985, 988], "burk": [0, 321, 988], "francoisgoupil": [0, 321, 987], "longer": [0, 4, 49, 102, 152, 164, 270, 284, 338, 340, 367, 370, 371, 373, 400, 487, 927, 931, 932, 934, 937, 947, 956, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "mathieu": [0, 2, 22, 44, 90, 170, 180, 200, 213, 236, 311, 973, 974, 975, 976, 977, 978, 979, 980, 986], "blondel": [0, 2, 22, 44, 90, 170, 180, 200, 213, 236, 311, 973, 974, 975, 976, 977, 978, 979, 980, 986], "lar": [0, 2, 14, 88, 148, 157, 168, 311, 312, 313, 335, 422, 423, 429, 452, 482, 488, 490, 493, 494, 496, 497, 499, 602, 603, 604, 605, 606, 607, 614, 615, 616, 629, 633, 634, 635, 636, 637, 954, 965, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 986], "buitinck": [0, 2, 14, 311, 312, 313, 973, 974, 975, 976, 977, 978, 979, 980], "noel": [0, 2, 98, 99, 100, 101, 973, 974, 975, 976, 977, 985], "daw": [0, 2, 98, 99, 100, 101, 973, 974, 975, 976, 977], "dubourg": [0, 2, 138, 142, 956, 973, 977], "edouard": [0, 2, 973], "duchesnai": [0, 2, 973], "alexand": [0, 2, 363, 368, 486, 815, 975, 976, 977, 979, 980, 981, 985, 986, 987], "fabisch": [0, 2, 975, 976, 977, 979], "virgil": [0, 2, 9, 973, 974, 976], "fritsch": [0, 2, 9, 973, 974, 976], "satrajit": [0, 2, 973, 974], "ghosh": [0, 2, 363, 973, 974], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 973, 976, 981, 982, 983, 984, 987], "gorgolewski": [0, 2, 973, 976], "jaqu": [0, 2, 28, 41, 47, 49, 67, 80, 81, 91, 162, 175, 176, 177, 201, 304, 307, 973, 974, 975, 976], "grobler": [0, 2, 28, 41, 47, 49, 67, 80, 81, 91, 162, 175, 176, 177, 201, 304, 307, 973, 974, 975, 976], "brian": [0, 2, 42, 659, 932, 973, 974, 976, 977, 978, 979, 980, 983, 984, 986, 987], "holt": [0, 2, 973], "arnaud": [0, 2, 974, 975, 976, 977, 978, 979], "joli": [0, 2, 974, 975, 976, 977, 978, 979], "thoui": [0, 2, 973], "rai": [0, 2, 900, 932, 973, 983, 985, 986], "jone": [0, 2, 333, 973], "kyle": [0, 2, 89, 974, 975, 976, 977, 979, 980, 981, 982, 984, 985], "kastner": [0, 2, 89, 975, 976, 977, 984, 985], "manoj": [0, 2, 38, 133, 161, 976, 977, 978, 979, 980], "kumar": [0, 2, 38, 133, 161, 333, 363, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988], "robert": [0, 2, 44, 66, 167, 335, 368, 479, 486, 579, 607, 672, 673, 674, 685, 815, 922, 928, 973, 974, 975, 976, 977, 978, 979, 980, 983, 988], "layton": [0, 2, 44, 973, 974, 975, 976, 978], "wei": [0, 2, 946, 973, 974, 977, 978, 979, 980, 982, 986, 989], "li": [0, 2, 291, 333, 590, 593, 647, 676, 706, 842, 921, 924, 932, 935, 942, 944, 947, 973, 974, 980, 981, 982, 983, 984, 985, 986, 987, 988], "paolo": [0, 2, 973, 977, 983], "losi": [0, 2, 973], "gill": [0, 2, 102, 103, 973, 974, 975, 976, 977, 978, 979], "loupp": [0, 2, 102, 103, 370, 506, 507, 973, 974, 975, 976, 977, 978, 979], "jarrod": [0, 2, 982], "millman": [0, 2, 982], "passo": [0, 2, 973, 974], "peter": [0, 2, 11, 15, 58, 98, 110, 112, 113, 236, 311, 312, 363, 399, 401, 408, 600, 740, 741, 928, 932, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 988], "prettenhof": [0, 2, 11, 15, 98, 110, 112, 113, 236, 311, 312, 973, 974, 975, 976, 977, 978], "venkat": [0, 2], "raghav": [0, 2, 109, 239, 273, 977, 978, 979, 980, 981, 985], "rajagopalan": [0, 2, 981, 985], "jacob": [0, 2, 978, 979, 980], "schreiber": [0, 2, 978, 979, 980], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 973, 974], "jake": [0, 2, 11, 142, 180, 199, 224, 258, 266, 951, 973, 974, 975, 976, 977, 978, 979, 980, 981, 985, 987], "vanderpla": [0, 2, 11, 142, 180, 199, 224, 258, 266, 951, 973, 974, 975, 976, 977, 978, 979, 980, 981], "ward": [0, 2, 32, 35, 40, 48, 50, 51, 57, 148, 154, 371, 393, 397, 414, 481, 802, 973, 976, 978], "farlei": [0, 2, 973], "ron": [0, 2, 223, 973], "weiss": [0, 2, 223, 363, 642, 973], "respons": [0, 152, 175, 179, 182, 245, 335, 344, 351, 362, 363, 364, 370, 373, 415, 433, 434, 435, 582, 583, 584, 625, 626, 649, 651, 653, 745, 746, 933, 939, 950, 958], "If": [0, 4, 11, 15, 25, 29, 38, 45, 65, 75, 88, 106, 111, 118, 144, 147, 151, 160, 179, 194, 196, 235, 242, 250, 258, 266, 273, 278, 279, 299, 307, 308, 312, 313, 319, 320, 324, 325, 332, 333, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 351, 352, 354, 357, 360, 361, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 383, 385, 386, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 463, 465, 466, 470, 473, 474, 475, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 662, 663, 664, 665, 667, 668, 669, 676, 677, 678, 679, 680, 681, 682, 686, 688, 691, 692, 695, 696, 698, 700, 701, 703, 704, 705, 706, 707, 708, 709, 711, 713, 714, 716, 717, 718, 719, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 753, 759, 761, 764, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 872, 873, 874, 875, 878, 884, 886, 888, 890, 895, 898, 900, 901, 903, 906, 907, 913, 916, 917, 918, 919, 921, 922, 924, 926, 927, 928, 929, 930, 932, 935, 936, 938, 939, 942, 944, 946, 947, 948, 949, 952, 953, 955, 958, 959, 965, 966, 967, 973, 976, 977, 978, 979, 982, 983, 985, 986, 987], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 29, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 78, 81, 82, 83, 84, 87, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 119, 120, 121, 123, 124, 125, 126, 129, 130, 132, 133, 135, 136, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 172, 175, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 191, 194, 196, 197, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 249, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 307, 310, 313, 315, 317, 318, 319, 323, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 345, 347, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 363, 364, 365, 366, 369, 373, 374, 375, 376, 379, 381, 382, 383, 384, 390, 391, 407, 408, 410, 412, 414, 422, 429, 431, 432, 436, 444, 454, 459, 460, 467, 482, 494, 496, 497, 498, 499, 506, 523, 525, 526, 528, 529, 534, 536, 537, 543, 546, 547, 549, 552, 554, 560, 567, 571, 572, 575, 580, 587, 589, 593, 598, 601, 602, 605, 611, 612, 614, 618, 626, 634, 636, 637, 638, 645, 646, 647, 649, 650, 662, 665, 666, 667, 672, 673, 674, 676, 678, 680, 682, 685, 686, 689, 693, 696, 701, 706, 708, 709, 713, 714, 716, 717, 718, 719, 721, 724, 725, 726, 727, 730, 731, 733, 742, 754, 755, 756, 757, 758, 759, 760, 769, 777, 779, 781, 783, 785, 789, 790, 799, 800, 801, 803, 811, 812, 815, 817, 820, 831, 832, 834, 836, 837, 839, 840, 841, 844, 848, 850, 859, 860, 861, 862, 865, 868, 869, 870, 875, 876, 885, 886, 895, 899, 900, 901, 903, 904, 908, 909, 910, 914, 915, 921, 922, 924, 925, 927, 930, 931, 933, 934, 935, 937, 938, 939, 940, 942, 943, 944, 945, 949, 950, 951, 952, 953, 954, 955, 958, 959, 961, 962, 963, 964, 966, 968, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989], "scientif": [0, 29, 123, 124, 125, 126, 211, 327, 332, 336, 349, 354, 363, 403, 413, 452, 956, 959], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 22, 23, 24, 25, 27, 29, 33, 36, 37, 38, 40, 43, 45, 46, 49, 51, 52, 53, 57, 59, 60, 61, 64, 65, 66, 67, 69, 71, 73, 74, 75, 78, 80, 81, 83, 85, 86, 87, 88, 90, 93, 94, 96, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 118, 120, 121, 123, 128, 129, 130, 132, 133, 135, 137, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 162, 165, 167, 168, 170, 172, 174, 176, 179, 180, 181, 182, 185, 187, 188, 191, 192, 193, 194, 195, 197, 199, 200, 203, 204, 206, 207, 209, 210, 211, 213, 216, 218, 219, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 249, 252, 253, 255, 256, 258, 261, 262, 263, 264, 266, 268, 269, 270, 271, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 295, 296, 297, 299, 300, 301, 302, 304, 307, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 324, 325, 326, 332, 333, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 349, 350, 351, 352, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 401, 420, 421, 422, 423, 424, 425, 426, 427, 452, 474, 482, 483, 485, 488, 500, 512, 513, 514, 520, 521, 533, 534, 540, 562, 568, 578, 583, 584, 589, 591, 602, 606, 609, 610, 617, 619, 624, 625, 626, 627, 628, 643, 662, 669, 671, 676, 696, 706, 714, 731, 770, 791, 792, 793, 795, 797, 798, 799, 800, 801, 812, 821, 822, 823, 829, 834, 835, 837, 838, 839, 840, 842, 845, 849, 853, 896, 898, 921, 922, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 942, 944, 945, 946, 947, 948, 949, 951, 952, 953, 956, 958, 962, 963, 964, 965, 966, 967, 970, 977, 980, 981, 982, 983, 984, 985, 986], "would": [0, 4, 6, 9, 24, 29, 41, 49, 53, 64, 71, 73, 74, 78, 83, 90, 91, 111, 133, 135, 140, 141, 151, 152, 153, 154, 156, 169, 179, 180, 181, 194, 197, 206, 223, 231, 235, 236, 241, 243, 245, 253, 259, 270, 273, 274, 278, 279, 284, 291, 299, 308, 311, 313, 320, 324, 333, 334, 338, 339, 340, 344, 346, 347, 349, 350, 351, 352, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 384, 416, 419, 433, 434, 435, 440, 483, 485, 487, 492, 495, 503, 505, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 519, 521, 534, 535, 538, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 562, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 621, 623, 624, 625, 626, 627, 629, 630, 651, 653, 659, 663, 664, 671, 706, 732, 735, 739, 747, 749, 761, 774, 782, 783, 792, 800, 807, 834, 835, 837, 838, 839, 840, 841, 842, 847, 849, 850, 852, 855, 857, 858, 859, 860, 921, 922, 925, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 942, 947, 952, 953, 956, 958, 963, 965, 967, 970, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "appreci": [0, 338], "citat": [0, 332, 335, 349], "paper": [0, 156, 235, 335, 344, 349, 363, 365, 394, 400, 429, 455, 485, 492, 514, 592, 609, 617, 618, 622, 627, 630, 643, 738, 786, 795, 798, 841, 842, 928, 932, 935, 938, 947, 967, 973, 980, 981], "machin": [0, 4, 6, 8, 9, 25, 58, 129, 130, 135, 140, 149, 153, 191, 218, 235, 238, 241, 267, 273, 278, 283, 286, 295, 300, 307, 313, 324, 325, 327, 331, 332, 333, 335, 336, 338, 341, 344, 345, 349, 350, 351, 353, 357, 361, 363, 367, 368, 370, 371, 373, 389, 391, 399, 429, 453, 455, 461, 467, 468, 469, 481, 483, 485, 492, 495, 506, 507, 508, 509, 510, 511, 515, 516, 517, 544, 545, 561, 562, 565, 570, 573, 585, 589, 590, 592, 594, 595, 596, 601, 602, 605, 606, 607, 608, 609, 610, 627, 633, 634, 643, 659, 664, 675, 685, 691, 693, 735, 738, 745, 774, 775, 789, 790, 795, 798, 805, 806, 807, 809, 827, 829, 835, 849, 850, 851, 852, 854, 855, 859, 860, 921, 922, 924, 925, 928, 929, 930, 932, 933, 935, 938, 939, 940, 942, 946, 948, 951, 952, 953, 954, 955, 956, 959, 960, 961, 963, 967, 968, 969, 970, 973, 975, 985, 986, 987, 988], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 324, 326, 332, 336, 338, 339, 340, 341, 342, 343, 346, 347, 349, 351, 352, 354, 364, 371, 447, 459, 460, 532, 650, 758, 823, 900, 932, 942, 948, 950, 953, 955, 956, 958, 959, 961, 967, 969, 973, 975, 976, 978, 980, 981, 982, 983, 984, 986, 987, 988], "et": [0, 11, 71, 72, 98, 99, 113, 167, 266, 335, 360, 363, 365, 368, 370, 371, 372, 402, 449, 470, 471, 479, 486, 492, 495, 514, 633, 634, 670, 671, 784, 786, 806, 807, 842, 885, 886, 928, 929, 932, 938, 942, 944, 947, 948, 981], "al": [0, 11, 71, 72, 98, 99, 113, 167, 266, 335, 360, 363, 365, 368, 370, 371, 372, 402, 449, 470, 471, 479, 486, 492, 495, 514, 633, 634, 670, 671, 784, 786, 806, 807, 842, 885, 886, 928, 929, 932, 938, 942, 944, 947, 948, 981, 986], "jmlr": [0, 363, 617, 618, 627, 655, 928, 947], "12": [0, 4, 6, 36, 38, 39, 49, 51, 52, 67, 77, 107, 108, 112, 138, 139, 140, 147, 152, 154, 159, 179, 187, 199, 202, 203, 206, 207, 209, 216, 223, 224, 234, 235, 237, 238, 241, 247, 277, 278, 279, 286, 307, 313, 335, 336, 343, 350, 352, 363, 367, 371, 395, 398, 400, 433, 434, 435, 436, 483, 485, 492, 521, 615, 620, 622, 636, 637, 640, 643, 644, 745, 746, 748, 765, 768, 780, 801, 817, 921, 922, 928, 930, 933, 942, 946, 947, 950, 958, 963, 971, 974, 976, 980, 981, 983, 984], "pp": [0, 58, 234, 335, 363, 365, 371, 374, 375, 396, 399, 403, 413, 462, 484, 485, 492, 541, 586, 594, 615, 636, 637, 671, 676, 680, 690, 706, 719, 733, 784, 786, 788, 805, 825, 837, 925, 932, 934, 935, 945], "2825": 0, "2830": 0, "2011": [0, 43, 152, 200, 344, 368, 371, 486, 489, 491, 492, 498, 541, 578, 589, 609, 680, 922, 936, 946, 951, 973], "bibtex": 0, "entri": [0, 15, 69, 118, 147, 231, 281, 312, 320, 342, 344, 346, 350, 351, 360, 361, 363, 368, 370, 373, 414, 423, 482, 483, 488, 496, 497, 512, 513, 539, 542, 545, 562, 571, 583, 589, 591, 598, 602, 604, 606, 607, 610, 612, 614, 615, 616, 624, 626, 633, 634, 636, 637, 650, 655, 658, 660, 663, 666, 667, 669, 676, 679, 680, 681, 684, 685, 688, 693, 706, 708, 709, 733, 735, 738, 739, 740, 741, 760, 773, 789, 790, 797, 798, 799, 800, 801, 820, 826, 838, 918, 921, 922, 928, 932, 935, 942, 947, 953, 958, 980, 983, 984, 986], "articl": [0, 16, 333, 337, 338, 346, 367, 376, 426, 656, 928, 932, 967, 986], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 19, 20, 22, 23, 24, 25, 27, 29, 31, 33, 34, 35, 37, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 71, 72, 74, 75, 77, 78, 82, 85, 86, 87, 88, 89, 93, 94, 95, 100, 101, 102, 106, 107, 108, 111, 112, 114, 117, 120, 121, 126, 128, 129, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 151, 158, 159, 161, 163, 164, 166, 167, 168, 171, 172, 178, 179, 181, 183, 184, 185, 187, 188, 193, 196, 197, 199, 200, 201, 206, 210, 211, 212, 213, 214, 221, 222, 223, 224, 225, 226, 227, 229, 234, 235, 236, 238, 239, 240, 244, 245, 249, 250, 255, 256, 259, 260, 261, 262, 264, 265, 266, 273, 277, 278, 279, 290, 293, 295, 296, 297, 298, 299, 302, 308, 309, 311, 316, 317, 318, 337, 338, 342, 346, 364, 932, 955, 963], "p": [0, 11, 13, 22, 24, 25, 37, 56, 73, 74, 77, 83, 93, 110, 129, 138, 156, 191, 196, 197, 199, 201, 210, 224, 235, 241, 242, 266, 332, 333, 335, 336, 343, 346, 360, 361, 363, 365, 366, 368, 370, 372, 373, 374, 376, 394, 396, 398, 401, 408, 420, 422, 425, 426, 429, 449, 479, 485, 489, 491, 492, 498, 500, 501, 502, 504, 506, 507, 508, 509, 510, 512, 515, 516, 517, 541, 543, 544, 545, 546, 547, 549, 550, 551, 555, 556, 557, 558, 559, 560, 566, 567, 578, 591, 594, 639, 641, 643, 645, 650, 656, 666, 674, 691, 702, 736, 738, 749, 755, 756, 757, 760, 774, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 805, 809, 810, 825, 837, 843, 859, 860, 861, 925, 926, 928, 929, 930, 932, 934, 935, 936, 937, 938, 939, 942, 946, 947, 950, 962, 965, 973, 974, 976, 979, 981, 988], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 14, 15, 16, 24, 29, 33, 39, 43, 44, 45, 48, 49, 53, 59, 62, 65, 69, 78, 88, 102, 105, 106, 108, 111, 118, 119, 125, 127, 129, 132, 133, 135, 141, 142, 144, 148, 150, 151, 152, 153, 156, 163, 165, 168, 179, 180, 181, 189, 200, 210, 212, 215, 219, 226, 233, 235, 236, 237, 238, 241, 242, 244, 245, 247, 253, 268, 269, 270, 275, 278, 279, 281, 283, 285, 288, 289, 307, 311, 312, 313, 320, 333, 338, 339, 340, 342, 344, 349, 361, 364, 368, 370, 371, 372, 373, 438, 459, 460, 482, 483, 488, 489, 517, 532, 533, 534, 543, 546, 547, 549, 550, 551, 555, 556, 557, 558, 559, 560, 568, 578, 583, 586, 609, 664, 673, 676, 679, 680, 706, 733, 734, 737, 738, 748, 749, 752, 754, 755, 756, 757, 760, 762, 763, 764, 765, 766, 767, 768, 773, 806, 807, 811, 820, 823, 824, 828, 829, 864, 869, 870, 924, 927, 936, 939, 940, 942, 946, 975, 981, 982, 983, 985, 987], "g": [0, 4, 7, 8, 9, 10, 12, 15, 22, 23, 24, 25, 29, 49, 60, 64, 67, 75, 78, 93, 102, 103, 110, 111, 118, 124, 135, 136, 137, 138, 140, 142, 143, 144, 147, 150, 161, 164, 179, 180, 181, 197, 200, 204, 212, 221, 235, 239, 240, 246, 252, 259, 273, 278, 291, 306, 313, 320, 324, 330, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 349, 351, 357, 361, 362, 363, 365, 367, 368, 370, 371, 372, 373, 375, 454, 479, 482, 484, 485, 488, 492, 506, 507, 508, 509, 510, 515, 516, 518, 519, 520, 521, 532, 533, 539, 540, 542, 544, 545, 548, 555, 562, 568, 573, 574, 581, 584, 585, 615, 625, 628, 631, 637, 643, 648, 671, 678, 688, 690, 713, 735, 747, 750, 751, 753, 761, 765, 770, 771, 772, 773, 776, 779, 784, 788, 791, 792, 793, 796, 798, 799, 800, 801, 805, 812, 814, 819, 822, 825, 827, 829, 832, 834, 835, 836, 837, 838, 839, 840, 849, 857, 858, 859, 860, 885, 886, 900, 921, 922, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 942, 946, 947, 948, 953, 955, 956, 967, 973, 977, 980, 981, 982, 983, 985, 986, 987, 988, 989], "A": [0, 15, 16, 17, 23, 25, 28, 32, 35, 55, 69, 71, 74, 78, 83, 86, 87, 88, 93, 100, 101, 105, 106, 108, 117, 121, 123, 124, 125, 126, 130, 131, 132, 135, 138, 140, 142, 143, 144, 148, 151, 152, 167, 180, 189, 193, 194, 197, 200, 235, 236, 238, 242, 249, 268, 273, 275, 278, 281, 283, 286, 289, 291, 293, 299, 304, 311, 312, 313, 317, 319, 320, 324, 326, 327, 332, 333, 335, 336, 338, 340, 341, 343, 346, 349, 350, 351, 352, 353, 358, 360, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 384, 389, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 409, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 439, 441, 442, 443, 445, 448, 451, 452, 453, 454, 455, 459, 461, 462, 463, 464, 465, 471, 473, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 521, 532, 539, 540, 541, 542, 544, 545, 548, 553, 558, 559, 562, 568, 571, 578, 581, 583, 584, 586, 588, 589, 590, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 621, 623, 624, 626, 627, 628, 629, 630, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 655, 656, 661, 662, 663, 667, 668, 670, 672, 673, 674, 675, 676, 681, 686, 687, 690, 693, 694, 697, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 714, 716, 717, 724, 725, 726, 727, 728, 731, 738, 741, 743, 745, 746, 747, 750, 751, 753, 758, 761, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 813, 816, 820, 825, 829, 830, 833, 834, 835, 837, 838, 839, 840, 845, 849, 850, 851, 852, 854, 855, 857, 858, 859, 860, 862, 884, 885, 886, 917, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 942, 945, 946, 947, 948, 951, 952, 953, 958, 959, 965, 966, 967, 969, 973, 975, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "v": [0, 4, 15, 16, 18, 25, 27, 30, 31, 32, 33, 34, 45, 53, 69, 70, 73, 76, 77, 85, 87, 88, 91, 103, 111, 148, 149, 152, 154, 157, 168, 179, 194, 210, 222, 223, 226, 227, 228, 231, 250, 281, 296, 312, 320, 325, 330, 335, 338, 344, 346, 351, 360, 361, 362, 365, 366, 368, 370, 371, 384, 393, 397, 403, 413, 414, 415, 416, 421, 424, 425, 426, 427, 428, 433, 434, 435, 447, 463, 475, 481, 482, 488, 492, 496, 497, 501, 503, 505, 507, 509, 511, 513, 515, 516, 519, 521, 532, 540, 544, 545, 551, 557, 562, 581, 585, 586, 590, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 621, 623, 624, 627, 629, 630, 639, 646, 650, 652, 655, 668, 686, 687, 689, 704, 705, 707, 738, 743, 747, 752, 759, 761, 771, 775, 777, 778, 779, 782, 783, 784, 792, 800, 802, 805, 807, 809, 810, 813, 816, 822, 823, 824, 829, 833, 843, 849, 850, 851, 852, 854, 855, 858, 860, 864, 926, 927, 928, 929, 932, 933, 934, 937, 940, 946, 947, 949, 969, 973, 976, 977, 978, 981, 983, 984, 987, 988], "b": [0, 8, 9, 10, 22, 24, 54, 60, 73, 91, 93, 99, 101, 102, 107, 111, 112, 121, 123, 124, 136, 137, 138, 143, 147, 161, 164, 180, 185, 213, 215, 234, 238, 240, 245, 249, 252, 284, 291, 320, 333, 335, 338, 342, 343, 344, 360, 361, 363, 366, 367, 368, 371, 389, 433, 451, 492, 497, 517, 539, 540, 541, 542, 558, 559, 561, 562, 579, 597, 598, 599, 600, 609, 620, 623, 625, 627, 631, 638, 639, 656, 670, 680, 681, 740, 741, 758, 759, 796, 822, 823, 824, 825, 828, 829, 837, 864, 886, 887, 895, 922, 924, 928, 929, 930, 932, 935, 937, 942, 946, 947, 962, 973, 981, 984, 986, 987, 988], "o": [0, 16, 18, 25, 27, 34, 45, 55, 56, 58, 59, 75, 77, 82, 87, 115, 143, 167, 172, 177, 179, 194, 212, 221, 235, 237, 244, 273, 274, 278, 282, 285, 292, 315, 324, 333, 335, 338, 354, 363, 365, 368, 370, 374, 376, 396, 398, 399, 401, 424, 426, 485, 555, 578, 617, 618, 643, 777, 805, 820, 861, 900, 901, 924, 926, 928, 929, 932, 933, 935, 936, 946, 947, 948, 973, 976, 979, 981, 982, 985, 986, 988], "m": [0, 8, 9, 11, 18, 24, 25, 40, 53, 54, 58, 59, 60, 73, 74, 85, 121, 140, 161, 163, 179, 197, 235, 239, 266, 292, 295, 306, 324, 325, 332, 333, 335, 336, 342, 344, 351, 354, 360, 361, 363, 365, 368, 370, 372, 374, 396, 397, 401, 408, 424, 425, 451, 464, 479, 483, 485, 487, 492, 590, 596, 600, 615, 622, 636, 637, 640, 644, 659, 667, 676, 691, 706, 708, 709, 745, 746, 795, 820, 886, 911, 912, 922, 924, 926, 928, 929, 930, 932, 933, 934, 935, 936, 940, 942, 946, 948, 956, 981, 982, 983, 984, 987, 988, 989], "r": [0, 8, 10, 11, 12, 13, 15, 22, 23, 24, 25, 35, 39, 60, 69, 71, 72, 73, 74, 78, 85, 93, 96, 99, 102, 103, 107, 111, 112, 113, 121, 129, 136, 137, 138, 142, 143, 144, 146, 147, 151, 161, 163, 164, 168, 179, 186, 189, 197, 204, 209, 212, 221, 224, 227, 234, 235, 238, 240, 241, 242, 245, 248, 250, 252, 255, 260, 264, 266, 279, 285, 301, 313, 320, 333, 335, 339, 342, 349, 351, 360, 361, 363, 365, 366, 367, 368, 370, 371, 380, 384, 389, 402, 404, 416, 420, 425, 429, 433, 434, 435, 449, 455, 464, 471, 485, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 520, 521, 539, 540, 541, 542, 557, 560, 561, 562, 578, 586, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 636, 637, 643, 647, 667, 672, 673, 674, 678, 680, 731, 735, 738, 747, 761, 764, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 798, 799, 800, 806, 807, 820, 825, 837, 844, 845, 849, 850, 851, 852, 854, 855, 857, 858, 859, 860, 862, 898, 922, 924, 926, 928, 929, 932, 933, 934, 935, 936, 939, 940, 942, 946, 947, 948, 952, 967, 973, 977, 980, 983, 984, 985, 986, 988], "d": [0, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 27, 28, 29, 33, 34, 38, 44, 45, 46, 55, 56, 58, 65, 75, 80, 83, 85, 88, 93, 95, 109, 135, 143, 179, 187, 193, 195, 197, 204, 207, 209, 210, 211, 212, 224, 234, 235, 243, 252, 259, 260, 266, 270, 288, 289, 292, 298, 299, 304, 313, 332, 333, 335, 340, 344, 349, 361, 363, 365, 366, 368, 370, 371, 373, 374, 396, 398, 403, 411, 414, 439, 444, 454, 477, 485, 487, 508, 509, 516, 517, 532, 533, 541, 565, 566, 570, 573, 574, 595, 596, 599, 620, 621, 622, 631, 639, 640, 643, 644, 648, 650, 656, 659, 672, 673, 674, 676, 706, 714, 718, 728, 731, 738, 759, 784, 786, 788, 789, 790, 805, 816, 820, 822, 823, 825, 837, 842, 859, 860, 864, 924, 926, 928, 929, 930, 931, 932, 934, 940, 942, 944, 947, 948, 955, 963, 964, 965, 976, 978, 980, 981, 983, 984, 985, 986, 987], "perrot": [0, 973], "e": [0, 4, 8, 10, 11, 15, 23, 24, 29, 49, 52, 56, 64, 71, 73, 74, 75, 77, 78, 88, 90, 91, 102, 108, 110, 111, 114, 123, 129, 132, 133, 143, 150, 151, 152, 156, 159, 168, 169, 179, 180, 181, 197, 199, 200, 212, 231, 235, 236, 238, 240, 241, 249, 250, 259, 266, 275, 278, 281, 283, 307, 313, 317, 318, 319, 320, 324, 325, 326, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 349, 350, 351, 354, 357, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 389, 391, 393, 396, 397, 398, 401, 405, 414, 420, 421, 422, 423, 424, 426, 427, 447, 449, 451, 452, 453, 454, 475, 484, 486, 487, 489, 491, 492, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 528, 532, 533, 539, 540, 541, 542, 544, 545, 548, 554, 555, 557, 558, 559, 560, 561, 562, 568, 573, 574, 581, 584, 585, 586, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 635, 638, 639, 641, 643, 645, 648, 650, 652, 655, 656, 659, 660, 678, 679, 680, 681, 688, 691, 692, 705, 713, 717, 735, 738, 745, 746, 747, 750, 751, 753, 760, 761, 765, 770, 771, 772, 773, 774, 776, 788, 789, 790, 791, 792, 793, 795, 799, 800, 801, 805, 806, 807, 812, 814, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 832, 834, 835, 836, 837, 838, 839, 840, 849, 850, 856, 857, 858, 859, 860, 864, 880, 885, 886, 888, 891, 892, 900, 907, 918, 921, 922, 924, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 942, 943, 946, 947, 948, 953, 955, 956, 965, 966, 967, 973, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "journal": [0, 74, 152, 235, 241, 332, 333, 335, 361, 363, 365, 370, 403, 413, 424, 485, 492, 578, 586, 596, 640, 643, 644, 656, 666, 681, 684, 685, 708, 709, 736, 774, 779, 825, 837, 921, 922, 926, 928, 929, 930, 933, 939, 944, 946, 947], "research": [0, 150, 235, 241, 333, 335, 349, 363, 452, 464, 586, 596, 643, 685, 774, 779, 921, 929, 933, 935, 947, 952, 953, 956], "volum": [0, 61, 72, 140, 333, 335, 363, 365, 373, 424, 485, 719, 928, 947, 956], "page": [0, 16, 199, 283, 324, 333, 335, 338, 340, 342, 344, 346, 352, 362, 363, 365, 424, 467, 468, 469, 579, 595, 779, 844, 886, 922, 932, 933, 958, 967, 971, 973, 977, 978], "want": [0, 4, 12, 22, 23, 24, 59, 65, 133, 147, 151, 179, 180, 181, 227, 235, 249, 270, 293, 296, 311, 320, 324, 325, 326, 336, 337, 339, 340, 342, 343, 344, 349, 350, 351, 352, 354, 357, 361, 362, 363, 364, 365, 370, 371, 372, 451, 454, 455, 461, 486, 500, 605, 606, 607, 609, 610, 617, 619, 625, 626, 627, 714, 795, 798, 814, 821, 842, 849, 921, 928, 931, 932, 933, 936, 938, 942, 943, 947, 952, 953, 958, 966, 973, 987], "its": [0, 4, 9, 12, 13, 18, 24, 31, 33, 60, 61, 71, 73, 75, 78, 82, 83, 90, 107, 111, 123, 133, 135, 140, 142, 151, 152, 154, 156, 158, 168, 192, 196, 197, 201, 206, 214, 217, 219, 221, 226, 227, 234, 238, 240, 242, 244, 253, 255, 259, 260, 275, 284, 291, 296, 309, 311, 312, 315, 319, 320, 325, 326, 331, 332, 333, 334, 338, 339, 340, 342, 343, 346, 349, 350, 351, 352, 354, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 379, 392, 393, 394, 396, 397, 401, 405, 407, 411, 414, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 448, 454, 474, 482, 484, 485, 488, 489, 491, 492, 493, 495, 501, 506, 507, 508, 509, 510, 511, 515, 516, 517, 534, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 578, 595, 596, 622, 623, 625, 636, 637, 638, 639, 643, 647, 659, 675, 679, 680, 686, 687, 691, 728, 731, 733, 745, 746, 747, 770, 777, 778, 791, 792, 793, 795, 796, 797, 799, 800, 801, 808, 809, 813, 818, 821, 822, 824, 841, 842, 845, 849, 850, 857, 859, 869, 870, 875, 881, 900, 902, 921, 927, 928, 929, 931, 932, 933, 934, 935, 938, 939, 940, 945, 946, 947, 948, 952, 956, 958, 960, 962, 965, 966, 967, 975, 976, 977, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989], "api": [0, 12, 46, 148, 205, 207, 216, 253, 312, 313, 326, 327, 331, 332, 338, 339, 341, 342, 347, 348, 349, 350, 352, 354, 357, 368, 370, 371, 381, 382, 385, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 447, 455, 459, 461, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 514, 515, 517, 518, 519, 520, 521, 530, 531, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 562, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 609, 628, 639, 640, 641, 642, 643, 745, 746, 750, 751, 775, 793, 795, 797, 798, 801, 805, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 847, 853, 854, 898, 900, 921, 930, 931, 932, 935, 942, 946, 952, 953, 956, 958, 962, 964, 969, 970, 971, 972, 981, 982, 984, 985, 986, 987, 988, 989], "design": [0, 13, 73, 118, 138, 150, 151, 160, 226, 273, 319, 326, 332, 338, 343, 349, 350, 351, 352, 353, 363, 370, 372, 373, 466, 479, 583, 584, 599, 616, 620, 627, 631, 636, 747, 765, 766, 784, 786, 922, 928, 929, 932, 933, 942, 952, 953, 956, 960, 975, 982], "mai": [0, 8, 18, 23, 35, 40, 42, 51, 65, 78, 85, 98, 108, 133, 151, 156, 159, 168, 185, 204, 238, 240, 242, 243, 268, 278, 289, 299, 311, 312, 313, 320, 324, 325, 326, 330, 332, 333, 334, 335, 337, 338, 340, 342, 343, 346, 349, 351, 352, 357, 360, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 384, 391, 392, 393, 395, 396, 397, 398, 400, 402, 403, 404, 405, 410, 413, 416, 420, 423, 433, 434, 435, 438, 439, 440, 447, 459, 460, 466, 485, 486, 489, 491, 495, 498, 499, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 525, 532, 545, 548, 553, 561, 562, 568, 571, 585, 586, 588, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 621, 623, 624, 625, 627, 628, 629, 630, 632, 635, 637, 639, 640, 642, 643, 644, 646, 648, 656, 663, 666, 667, 669, 670, 672, 673, 674, 676, 688, 706, 713, 735, 736, 747, 749, 750, 751, 752, 761, 762, 763, 764, 766, 767, 770, 774, 777, 782, 783, 784, 785, 786, 788, 791, 792, 793, 795, 797, 799, 800, 801, 807, 808, 809, 812, 814, 824, 826, 827, 828, 829, 830, 832, 838, 841, 842, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 862, 867, 889, 890, 900, 921, 922, 924, 926, 928, 929, 932, 933, 934, 935, 936, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 953, 958, 964, 965, 973, 975, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "consid": [0, 4, 12, 13, 23, 35, 61, 65, 74, 85, 89, 108, 109, 111, 128, 132, 133, 147, 152, 179, 181, 235, 238, 242, 246, 253, 259, 260, 273, 283, 296, 304, 307, 311, 320, 324, 325, 326, 330, 337, 338, 340, 344, 346, 349, 351, 359, 363, 368, 369, 370, 371, 372, 373, 374, 375, 390, 396, 401, 408, 425, 459, 460, 472, 484, 500, 501, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 536, 537, 539, 540, 542, 544, 558, 559, 571, 583, 584, 597, 603, 609, 610, 611, 613, 622, 630, 639, 640, 641, 643, 644, 645, 647, 651, 653, 656, 658, 660, 666, 676, 680, 684, 706, 736, 738, 742, 791, 792, 793, 795, 797, 799, 800, 801, 804, 806, 807, 812, 822, 823, 830, 844, 845, 854, 855, 857, 858, 859, 860, 916, 921, 927, 928, 929, 930, 932, 933, 935, 938, 939, 940, 942, 946, 947, 948, 953, 958, 965, 976, 977, 981, 985, 986, 988], "softwar": [0, 324, 335, 338, 346, 349, 351, 371, 578, 586, 609, 922, 956], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 324, 326, 330, 331, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 455, 457, 458, 459, 460, 461, 463, 466, 470, 472, 474, 475, 477, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 635, 638, 639, 640, 641, 642, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 666, 668, 669, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 685, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 713, 714, 718, 719, 721, 723, 724, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 876, 877, 878, 879, 880, 881, 884, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 899, 900, 901, 903, 906, 920, 921, 922, 924, 926, 927, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 951, 952, 953, 956, 959, 961, 962, 963, 964, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989], "2013": [0, 156, 335, 367, 368, 487, 676, 706, 924, 932, 951, 974, 975], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 13, 15, 16, 36, 42, 43, 61, 62, 74, 102, 153, 171, 174, 188, 189, 240, 241, 242, 269, 277, 307, 335, 336, 344, 346, 360, 361, 363, 367, 368, 370, 373, 425, 467, 468, 469, 489, 491, 498, 506, 507, 508, 509, 516, 517, 541, 558, 559, 561, 562, 566, 570, 573, 574, 585, 599, 600, 609, 620, 623, 625, 631, 638, 640, 643, 644, 656, 666, 675, 676, 681, 706, 736, 786, 820, 857, 858, 859, 860, 921, 926, 928, 929, 932, 934, 935, 936, 940, 944, 946, 948, 966, 976, 981, 985, 986, 987, 988], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 371, 784, 934, 951], "languag": [0, 313, 343, 357, 368, 371, 946, 952, 953, 956, 959], "data": [0, 3, 6, 8, 11, 13, 14, 15, 18, 19, 20, 23, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 48, 49, 50, 51, 54, 55, 57, 60, 63, 65, 66, 68, 72, 74, 81, 83, 84, 85, 88, 89, 94, 96, 102, 104, 107, 108, 109, 110, 111, 115, 116, 117, 119, 121, 123, 124, 125, 126, 130, 134, 135, 136, 137, 139, 142, 146, 148, 151, 152, 157, 158, 161, 162, 164, 168, 169, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 206, 209, 210, 211, 214, 216, 219, 221, 222, 223, 224, 225, 227, 229, 233, 235, 237, 238, 239, 240, 243, 249, 252, 253, 256, 257, 259, 260, 261, 262, 263, 264, 266, 269, 270, 272, 274, 275, 276, 281, 283, 285, 286, 289, 290, 292, 293, 295, 296, 298, 303, 304, 307, 311, 316, 317, 318, 319, 323, 325, 327, 330, 331, 332, 334, 335, 338, 340, 341, 344, 345, 346, 347, 350, 354, 357, 359, 360, 361, 362, 365, 368, 369, 370, 371, 374, 375, 376, 378, 380, 381, 382, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 471, 472, 473, 474, 475, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 523, 524, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 566, 568, 569, 573, 574, 576, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 655, 656, 658, 659, 661, 662, 664, 668, 669, 671, 675, 677, 678, 679, 680, 681, 684, 686, 687, 688, 690, 691, 692, 704, 705, 707, 711, 713, 714, 719, 733, 734, 735, 737, 738, 739, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 867, 868, 869, 870, 873, 874, 875, 885, 886, 895, 898, 903, 904, 906, 907, 908, 909, 910, 913, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 959, 960, 962, 963, 965, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "mine": [0, 235, 312, 333, 363, 374, 396, 462, 514, 671, 684, 690, 733, 928, 932, 938, 944], "108": [0, 974], "122": [0, 101, 147, 152, 183, 211, 344, 933], "high": [0, 4, 9, 11, 12, 23, 25, 28, 33, 36, 40, 45, 52, 57, 60, 68, 73, 74, 87, 88, 102, 104, 105, 106, 111, 112, 114, 116, 125, 126, 135, 141, 147, 150, 152, 153, 154, 174, 180, 181, 193, 199, 200, 201, 206, 210, 221, 227, 233, 237, 241, 242, 250, 259, 260, 268, 270, 275, 277, 278, 279, 291, 296, 298, 299, 311, 312, 317, 318, 324, 333, 335, 338, 343, 346, 347, 349, 350, 360, 361, 362, 363, 367, 369, 370, 371, 372, 373, 396, 398, 400, 401, 403, 420, 433, 434, 435, 504, 505, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 595, 621, 622, 630, 640, 643, 644, 676, 681, 692, 696, 706, 739, 740, 755, 757, 789, 790, 794, 823, 824, 828, 830, 851, 853, 854, 857, 858, 859, 860, 901, 921, 926, 927, 928, 929, 931, 932, 935, 936, 938, 940, 942, 944, 947, 948, 949, 952, 953, 958, 959, 961, 967, 973, 974, 976, 977, 981, 984, 985, 986, 987, 988], "qualiti": [0, 6, 22, 33, 42, 44, 45, 53, 88, 107, 151, 185, 229, 233, 242, 243, 244, 338, 346, 349, 351, 357, 358, 362, 363, 365, 368, 403, 413, 420, 425, 508, 509, 510, 511, 515, 516, 693, 761, 841, 842, 857, 858, 859, 860, 886, 927, 929, 937, 944, 948, 952, 953, 956, 962, 963, 969], "png": [0, 29, 861], "svg": 0, "logo": [0, 367, 754], "avail": [0, 5, 11, 12, 13, 37, 51, 52, 88, 106, 109, 110, 133, 135, 140, 144, 150, 151, 152, 168, 179, 187, 197, 200, 215, 232, 233, 238, 239, 242, 258, 259, 260, 266, 278, 281, 282, 283, 284, 286, 291, 293, 320, 324, 332, 333, 335, 336, 337, 338, 339, 343, 347, 350, 351, 354, 357, 360, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 398, 401, 402, 403, 404, 420, 421, 422, 423, 424, 425, 426, 427, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 459, 486, 500, 506, 507, 508, 509, 510, 511, 515, 516, 539, 542, 544, 545, 561, 562, 583, 584, 608, 616, 621, 623, 624, 625, 627, 640, 647, 650, 682, 683, 747, 750, 751, 761, 771, 772, 777, 778, 780, 781, 782, 783, 795, 806, 807, 816, 825, 833, 837, 842, 893, 900, 922, 926, 929, 931, 932, 933, 934, 935, 938, 942, 945, 946, 947, 951, 952, 953, 956, 958, 962, 967, 969, 973, 978, 979, 980, 981, 982, 983, 986, 987, 989], "doc": [0, 4, 8, 18, 311, 313, 325, 336, 338, 342, 343, 346, 351, 354, 356, 357, 371, 539, 540, 542, 728, 731, 740, 741, 772, 967, 973, 977, 987], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 332, 335, 337, 338, 339, 341, 342, 344, 346, 347, 349, 350, 354, 357, 360, 364, 368, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 916, 917, 918, 919, 920, 929, 942, 948, 952, 956, 966, 967, 983, 987], "directori": [0, 8, 255, 332, 336, 338, 340, 344, 346, 351, 354, 364, 393, 397, 401, 437, 450, 809, 810, 987], "driven": [0, 952, 956], "howev": [0, 4, 5, 7, 13, 22, 23, 25, 33, 43, 45, 49, 55, 66, 69, 71, 75, 77, 90, 93, 102, 104, 108, 111, 112, 118, 130, 133, 135, 140, 141, 152, 153, 160, 168, 179, 200, 203, 204, 206, 212, 235, 242, 249, 252, 253, 258, 269, 273, 283, 307, 311, 312, 320, 324, 325, 326, 332, 333, 335, 336, 337, 338, 340, 344, 346, 349, 351, 357, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 392, 395, 398, 400, 402, 405, 410, 447, 459, 483, 502, 518, 532, 533, 534, 540, 557, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 581, 583, 584, 589, 594, 606, 607, 623, 638, 643, 646, 651, 713, 715, 747, 750, 751, 761, 772, 776, 777, 788, 806, 807, 812, 821, 822, 827, 851, 852, 854, 865, 901, 921, 922, 925, 926, 927, 928, 929, 931, 932, 933, 935, 936, 937, 939, 940, 942, 946, 947, 948, 958, 962, 965, 982, 983, 985, 986], "institut": [0, 335, 935], "privat": [0, 342, 351, 352, 865, 956, 973, 981, 983, 984, 986, 987], "grant": [0, 338], "assur": [0, 351, 745, 746, 980, 981, 982, 983, 984, 985, 986], "sustain": 0, "like": [0, 4, 12, 18, 48, 53, 55, 64, 80, 83, 88, 93, 95, 101, 105, 111, 114, 135, 141, 151, 159, 179, 227, 235, 238, 239, 242, 243, 249, 262, 271, 273, 278, 279, 281, 291, 299, 320, 324, 326, 330, 332, 333, 336, 337, 338, 340, 342, 345, 346, 347, 349, 350, 351, 357, 359, 361, 363, 364, 366, 367, 368, 370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 411, 412, 413, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 463, 464, 466, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 530, 532, 533, 534, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 713, 714, 718, 719, 720, 722, 723, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 867, 874, 875, 883, 888, 895, 896, 900, 903, 904, 905, 917, 919, 921, 924, 926, 927, 928, 929, 932, 934, 935, 936, 938, 939, 942, 947, 948, 952, 953, 955, 956, 958, 965, 967, 970, 973, 976, 977, 980, 981, 983, 984, 985, 987, 988], "thank": [0, 4, 16, 23, 78, 153, 156, 179, 244, 337, 346, 956, 973, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "funder": 0, "member": [0, 311, 312, 333, 338, 341, 352, 363, 378, 394, 399, 402, 404, 443, 506, 507, 514, 532, 609, 610, 617, 619, 627, 628, 629, 655, 656, 666, 668, 681, 686, 687, 707, 736, 743, 747, 849, 928, 935, 958, 973, 985, 988], "consortium": [0, 956], "foundat": [0, 118, 338, 361, 935], "face": [0, 3, 32, 49, 84, 88, 106, 148, 205, 331, 338, 342, 363, 368, 370, 372, 400, 423, 444, 445, 446, 472, 483, 484, 488, 490, 491, 492, 509, 535, 608, 624, 664, 761, 775, 792, 829, 854, 872, 935, 948, 949, 950, 961, 966, 969, 973, 981], "2022": [0, 325, 370, 656, 942, 987, 988], "microsoft": [0, 12, 336, 339, 354], "m\u00fcller": [0, 28, 274, 275, 352, 368, 486, 815, 936, 942, 946, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 987], "2020": [0, 333, 983, 984, 985, 986], "quansight": 0, "lab": [0, 333, 419, 487, 847, 956, 984], "2021": [0, 336, 338, 354, 622, 985, 986], "columbia": 0, "univers": [0, 143, 333, 335, 341, 363, 368, 371, 541, 738, 784, 788, 844, 928, 930, 932, 934], "2016": [0, 204, 332, 363, 921, 978, 979], "sydnei": 0, "2017": [0, 235, 332, 361, 363, 374, 396, 932, 979, 980], "receiv": [0, 123, 148, 228, 232, 313, 320, 338, 340, 346, 351, 367, 370, 455, 609, 653, 657, 659, 677, 732, 738, 739, 766, 775, 777, 778, 816, 854, 933, 936, 937, 946, 983, 984], "improv": [0, 4, 22, 23, 30, 71, 72, 75, 90, 96, 99, 100, 107, 109, 110, 111, 113, 118, 129, 147, 151, 156, 165, 179, 187, 197, 236, 238, 253, 271, 278, 302, 312, 320, 325, 336, 341, 343, 344, 346, 347, 349, 351, 352, 357, 362, 368, 370, 372, 400, 401, 482, 483, 485, 488, 489, 490, 492, 493, 494, 497, 505, 508, 509, 510, 511, 512, 513, 515, 516, 553, 561, 562, 594, 603, 615, 617, 618, 619, 623, 624, 625, 626, 627, 629, 636, 638, 643, 679, 680, 734, 737, 738, 798, 806, 807, 823, 825, 837, 857, 858, 860, 886, 926, 928, 929, 932, 935, 936, 946, 947, 948, 951, 952, 953, 956, 965, 973, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 15, 22, 23, 25, 31, 62, 96, 115, 120, 150, 151, 164, 174, 179, 180, 181, 197, 202, 210, 215, 232, 235, 238, 242, 244, 245, 273, 282, 283, 311, 319, 324, 333, 337, 338, 340, 345, 347, 351, 352, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 375, 390, 391, 394, 398, 400, 415, 418, 445, 449, 451, 455, 459, 460, 461, 476, 478, 480, 481, 482, 484, 486, 487, 488, 493, 496, 497, 499, 500, 501, 512, 513, 514, 543, 544, 545, 546, 547, 549, 550, 551, 557, 561, 562, 571, 583, 594, 597, 598, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 620, 623, 624, 625, 626, 628, 631, 632, 633, 634, 635, 638, 641, 649, 651, 653, 658, 660, 663, 664, 666, 669, 671, 674, 677, 679, 680, 681, 685, 686, 688, 689, 690, 691, 692, 693, 694, 702, 704, 708, 732, 733, 734, 737, 738, 739, 745, 746, 750, 751, 772, 789, 790, 795, 812, 813, 816, 822, 825, 828, 833, 837, 841, 842, 844, 845, 849, 850, 853, 854, 855, 866, 884, 886, 897, 899, 923, 924, 928, 930, 932, 933, 935, 936, 937, 939, 942, 947, 963, 965, 967, 974, 976, 977, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989], "It": [0, 4, 7, 8, 9, 15, 23, 33, 36, 49, 53, 66, 71, 73, 75, 85, 88, 89, 95, 102, 104, 107, 111, 118, 133, 140, 141, 142, 146, 147, 151, 152, 153, 159, 167, 168, 176, 179, 193, 196, 197, 199, 200, 206, 211, 230, 231, 233, 235, 236, 238, 241, 242, 253, 256, 259, 260, 261, 263, 264, 266, 273, 277, 278, 281, 295, 299, 307, 311, 312, 313, 319, 320, 324, 325, 326, 331, 333, 335, 336, 338, 340, 342, 343, 344, 346, 347, 349, 350, 351, 354, 357, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 403, 410, 413, 418, 420, 425, 429, 436, 438, 447, 459, 466, 475, 484, 486, 487, 489, 491, 492, 500, 501, 504, 505, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 540, 547, 553, 557, 558, 559, 562, 565, 566, 570, 571, 573, 574, 578, 581, 582, 583, 584, 592, 593, 594, 597, 598, 601, 603, 604, 605, 606, 609, 611, 612, 613, 614, 617, 618, 619, 621, 622, 623, 625, 627, 628, 629, 632, 633, 634, 635, 638, 640, 642, 643, 644, 646, 647, 648, 649, 651, 653, 655, 659, 660, 661, 667, 673, 684, 692, 693, 697, 708, 709, 712, 715, 731, 733, 747, 749, 750, 751, 753, 759, 760, 761, 785, 786, 791, 792, 793, 795, 798, 799, 800, 801, 805, 806, 807, 811, 812, 813, 817, 818, 819, 823, 826, 828, 838, 841, 842, 846, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 873, 886, 900, 903, 906, 908, 909, 910, 911, 912, 913, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 942, 943, 945, 946, 947, 948, 952, 956, 958, 964, 965, 966, 967, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "provid": [0, 5, 8, 11, 22, 25, 33, 38, 55, 74, 85, 105, 106, 116, 118, 135, 141, 151, 152, 158, 165, 167, 168, 180, 200, 204, 207, 208, 226, 235, 236, 237, 241, 263, 266, 270, 273, 277, 281, 282, 284, 286, 297, 311, 312, 315, 320, 324, 326, 330, 332, 333, 334, 336, 337, 338, 339, 340, 341, 344, 346, 347, 349, 350, 351, 353, 354, 357, 359, 360, 362, 363, 364, 365, 367, 368, 370, 371, 372, 373, 374, 375, 383, 389, 392, 394, 395, 396, 398, 400, 401, 403, 410, 411, 444, 445, 447, 449, 452, 483, 484, 485, 489, 491, 498, 502, 503, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 539, 542, 544, 545, 552, 556, 562, 578, 583, 584, 585, 594, 597, 598, 603, 607, 608, 609, 610, 611, 612, 613, 614, 617, 619, 622, 624, 627, 628, 629, 632, 645, 650, 662, 685, 691, 714, 724, 728, 738, 740, 742, 746, 747, 749, 750, 751, 752, 754, 755, 756, 757, 759, 760, 761, 766, 767, 768, 778, 780, 783, 784, 785, 786, 787, 788, 791, 792, 793, 795, 796, 797, 799, 800, 801, 819, 820, 824, 826, 845, 849, 850, 853, 854, 857, 858, 859, 860, 864, 875, 880, 908, 909, 910, 921, 922, 924, 927, 928, 929, 931, 932, 933, 935, 936, 937, 938, 939, 940, 942, 945, 946, 947, 948, 949, 952, 953, 956, 958, 962, 965, 967, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "2012": [0, 74, 361, 370, 506, 507, 514, 590, 693, 921, 925, 932, 951, 973], "full": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 324, 325, 326, 331, 333, 336, 338, 343, 346, 349, 351, 352, 354, 362, 363, 365, 367, 368, 371, 393, 397, 398, 400, 410, 439, 440, 443, 447, 448, 451, 452, 453, 454, 455, 456, 458, 461, 486, 488, 492, 510, 511, 518, 519, 583, 599, 601, 605, 620, 631, 672, 673, 678, 695, 696, 698, 700, 701, 703, 735, 745, 746, 758, 786, 875, 921, 928, 931, 934, 935, 939, 942, 945, 953, 965, 973, 977, 979, 981, 983, 984, 986, 987], "time": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 315, 316, 317, 318, 319, 320, 324, 325, 326, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 346, 349, 351, 352, 354, 359, 360, 361, 362, 363, 365, 366, 368, 370, 371, 373, 374, 389, 393, 395, 396, 397, 398, 401, 403, 406, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 423, 447, 450, 452, 470, 474, 485, 487, 489, 491, 498, 513, 518, 519, 520, 521, 541, 561, 570, 578, 579, 580, 581, 585, 590, 591, 594, 597, 601, 603, 605, 611, 613, 615, 617, 618, 624, 627, 628, 629, 636, 637, 641, 643, 645, 742, 745, 746, 747, 749, 750, 751, 752, 754, 756, 761, 762, 763, 766, 768, 770, 771, 772, 773, 774, 777, 779, 784, 785, 786, 787, 788, 789, 790, 797, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 813, 814, 816, 819, 822, 823, 824, 828, 833, 841, 842, 846, 847, 851, 854, 855, 863, 888, 898, 921, 922, 924, 925, 928, 929, 931, 932, 933, 934, 935, 936, 937, 939, 940, 942, 944, 945, 946, 947, 948, 952, 956, 958, 963, 965, 966, 967, 973, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "host": [0, 333, 338, 342, 346, 347, 842, 900, 967], "other": [0, 4, 8, 12, 22, 25, 27, 28, 30, 33, 36, 40, 48, 52, 61, 63, 66, 78, 87, 88, 90, 93, 102, 104, 107, 108, 112, 114, 120, 128, 146, 147, 148, 150, 151, 152, 153, 156, 158, 172, 179, 197, 199, 200, 201, 203, 206, 207, 208, 210, 212, 216, 219, 223, 226, 230, 232, 235, 236, 237, 244, 245, 258, 259, 260, 272, 273, 277, 278, 281, 282, 284, 288, 299, 306, 309, 311, 312, 315, 319, 320, 324, 330, 331, 333, 334, 335, 338, 340, 342, 343, 344, 346, 347, 350, 351, 352, 354, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 396, 399, 401, 403, 408, 415, 420, 439, 447, 448, 454, 485, 486, 492, 500, 502, 503, 511, 512, 513, 518, 519, 532, 539, 540, 542, 548, 553, 561, 562, 563, 564, 571, 578, 579, 581, 590, 594, 603, 609, 610, 622, 623, 624, 625, 626, 627, 630, 638, 643, 647, 650, 655, 669, 713, 724, 728, 735, 740, 747, 750, 751, 752, 753, 754, 756, 761, 764, 766, 769, 770, 771, 772, 773, 774, 776, 778, 796, 804, 809, 810, 821, 822, 823, 825, 829, 830, 837, 849, 850, 851, 852, 853, 854, 855, 880, 921, 922, 924, 925, 926, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 945, 946, 947, 948, 950, 953, 955, 956, 958, 962, 965, 966, 969, 974, 976, 977, 979, 980, 981, 982, 986, 987, 988], "event": [0, 4, 15, 179, 197, 238, 361, 363, 539, 540, 587, 784, 874, 928, 933, 934, 952, 956, 979], "pari": [0, 335, 364, 417, 714, 817, 943, 987], "saclai": 0, "center": [0, 4, 7, 8, 9, 13, 22, 24, 30, 33, 34, 36, 38, 39, 41, 44, 45, 49, 51, 54, 55, 56, 58, 59, 74, 82, 90, 92, 95, 109, 110, 111, 112, 147, 152, 160, 171, 173, 179, 180, 190, 191, 202, 203, 206, 207, 221, 224, 225, 236, 246, 258, 261, 263, 269, 273, 275, 276, 285, 290, 297, 299, 300, 301, 306, 312, 313, 333, 334, 335, 343, 362, 363, 365, 366, 368, 369, 370, 376, 392, 394, 395, 398, 399, 400, 403, 405, 410, 411, 412, 413, 414, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 452, 463, 475, 485, 486, 492, 495, 501, 557, 560, 561, 562, 583, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 629, 641, 645, 745, 814, 815, 818, 827, 829, 839, 840, 849, 850, 926, 928, 929, 931, 939, 974, 976, 977, 978, 979, 980, 981, 984, 985, 986, 987], "scienc": [0, 34, 73, 143, 332, 335, 349, 363, 392, 405, 489, 491, 498, 639, 640, 644, 796, 922, 924, 928, 929, 932, 935, 944, 953, 956, 961, 981], "onenyu": [0, 109, 161, 798], "moor": [0, 685, 932, 956], "environ": [0, 324, 333, 335, 336, 338, 344, 346, 349, 354, 357, 364, 450, 952, 953, 956, 980, 981], "student": [0, 87, 235, 929, 953, 956], "t\u00e9l\u00e9com": [0, 950], "paristech": [0, 22, 23, 38, 206, 950], "rv": [0, 109, 239, 273, 751, 759, 761, 921, 973, 974, 977, 978, 979, 980, 981], "thierri": [0, 221, 223, 956, 979, 980, 987], "guillemot": [0, 221, 223, 979, 980], "labex": 0, "digicosm": 0, "goix": [0, 977, 979, 980, 981, 982], "mathurin": [0, 984, 986, 987], "massia": [0, 984, 986, 987], "2019": [0, 152, 336, 363, 403, 413, 643, 929, 939, 942, 981, 982, 983], "dure": [0, 4, 5, 12, 46, 53, 66, 69, 78, 90, 103, 108, 115, 130, 135, 140, 151, 152, 154, 168, 180, 187, 233, 237, 253, 283, 284, 324, 326, 336, 338, 340, 343, 351, 352, 363, 364, 368, 370, 371, 373, 374, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 410, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 564, 565, 566, 568, 570, 571, 573, 574, 576, 578, 579, 580, 581, 583, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 739, 745, 746, 747, 750, 751, 761, 770, 771, 772, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 834, 837, 840, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 921, 922, 924, 928, 929, 935, 942, 944, 962, 967, 969, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989], "phd": [0, 363, 370, 953, 956], "chan": [0, 787, 829], "zuckerberg": 0, "initi": [0, 7, 12, 16, 32, 41, 52, 53, 55, 59, 74, 112, 119, 120, 121, 136, 141, 148, 151, 159, 172, 194, 199, 200, 204, 220, 223, 235, 253, 283, 290, 299, 312, 320, 325, 333, 338, 340, 346, 347, 349, 351, 363, 368, 370, 372, 373, 375, 394, 395, 398, 399, 400, 401, 402, 403, 404, 410, 411, 412, 413, 429, 463, 466, 482, 483, 484, 488, 489, 491, 494, 496, 497, 498, 499, 504, 505, 510, 511, 544, 558, 559, 561, 562, 570, 571, 578, 591, 596, 597, 598, 599, 603, 604, 609, 611, 612, 613, 614, 617, 618, 619, 620, 622, 627, 628, 629, 631, 632, 635, 641, 642, 643, 645, 646, 745, 746, 779, 798, 805, 806, 807, 845, 872, 885, 886, 901, 906, 907, 924, 928, 929, 936, 937, 938, 946, 948, 952, 964, 966, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "were": [0, 4, 29, 65, 68, 73, 74, 108, 111, 130, 133, 140, 147, 179, 180, 207, 244, 246, 270, 271, 278, 282, 283, 285, 286, 291, 311, 313, 319, 320, 332, 333, 335, 338, 339, 342, 349, 351, 360, 364, 370, 371, 415, 418, 419, 447, 512, 513, 539, 542, 553, 750, 751, 766, 773, 846, 847, 883, 921, 932, 933, 948, 955, 966, 967, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "through": [0, 7, 104, 108, 143, 151, 199, 211, 230, 235, 238, 258, 277, 278, 297, 304, 313, 319, 335, 336, 338, 340, 345, 347, 351, 352, 354, 363, 366, 368, 370, 372, 373, 415, 418, 423, 486, 508, 509, 512, 515, 516, 517, 532, 544, 545, 548, 598, 602, 604, 606, 609, 610, 612, 614, 616, 619, 627, 628, 639, 642, 671, 753, 825, 837, 841, 842, 857, 858, 859, 860, 892, 921, 922, 929, 932, 934, 935, 936, 938, 940, 942, 946, 947, 948, 956, 958, 965, 967, 973, 979, 980, 981, 982, 984, 985, 986, 988], "program": [0, 46, 320, 325, 326, 335, 336, 338, 344, 349, 459, 586, 621, 839, 840, 928, 947, 948, 952, 953, 973, 975], "immanuel": [0, 973, 974, 978], "bayer": [0, 973, 974, 978], "kemal": [0, 19, 20, 975, 976], "eren": [0, 19, 20, 975, 976], "tr\u00e9segni": [0, 975], "hamzeh": [0, 976, 977], "alsalhi": [0, 976, 977], "issam": [0, 268, 979], "laradji": [0, 268, 979], "maheshakya": [0, 976, 977, 978], "wijewardena": [0, 976, 977, 978], "xue": [0, 977, 978, 979, 981, 982, 985], "nelson": [0, 979, 980, 985], "yenchen": [0, 979], "lin": [0, 485, 609, 947, 978, 979, 980, 981], "neurodebian": 0, "debian": [0, 324, 336, 344], "packag": [0, 42, 49, 146, 253, 325, 331, 332, 335, 336, 338, 339, 340, 342, 344, 347, 349, 351, 354, 365, 370, 371, 403, 429, 597, 598, 900, 922, 928, 931, 935, 942, 948, 956, 961, 973, 979, 981, 982, 983], "dr": [0, 335, 363, 987], "jame": [0, 335, 367, 779, 933, 973, 974, 975, 976, 979, 980, 981, 982, 983, 985, 986], "haxbi": 0, "dartmouth": 0, "colleg": [0, 150], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 18, 22, 23, 25, 33, 40, 46, 49, 51, 53, 57, 62, 65, 68, 71, 73, 74, 78, 81, 85, 100, 101, 111, 114, 115, 118, 119, 129, 135, 137, 140, 141, 142, 143, 144, 146, 147, 148, 151, 152, 153, 154, 156, 158, 160, 162, 167, 168, 169, 173, 174, 179, 180, 187, 188, 193, 196, 197, 199, 201, 206, 210, 215, 222, 223, 224, 229, 230, 235, 236, 237, 238, 241, 243, 256, 259, 260, 264, 269, 270, 273, 278, 282, 283, 284, 285, 286, 295, 296, 298, 299, 307, 309, 311, 312, 313, 319, 320, 324, 325, 326, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 354, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 384, 395, 398, 400, 402, 404, 410, 414, 416, 433, 434, 435, 450, 459, 460, 466, 474, 475, 485, 487, 492, 499, 505, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 521, 523, 525, 539, 557, 560, 562, 583, 584, 586, 590, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 621, 623, 624, 629, 630, 633, 634, 640, 643, 644, 648, 649, 651, 652, 653, 658, 659, 666, 671, 676, 677, 688, 689, 690, 696, 704, 706, 707, 713, 732, 734, 737, 738, 739, 742, 745, 765, 766, 782, 783, 784, 785, 786, 787, 788, 792, 800, 807, 809, 816, 850, 852, 855, 857, 858, 859, 860, 869, 870, 900, 921, 922, 924, 927, 928, 929, 931, 932, 933, 934, 935, 936, 938, 939, 942, 945, 946, 947, 948, 951, 952, 953, 955, 956, 958, 963, 965, 966, 967, 970, 973, 974, 975, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "particip": [0, 337, 338, 352, 956], "could": [0, 4, 9, 13, 25, 33, 38, 49, 65, 66, 85, 88, 100, 101, 108, 111, 130, 135, 140, 147, 150, 151, 152, 179, 180, 188, 197, 203, 211, 212, 229, 235, 256, 261, 264, 284, 295, 296, 311, 315, 326, 338, 344, 346, 351, 354, 357, 361, 367, 370, 371, 375, 425, 484, 489, 558, 559, 580, 622, 749, 754, 756, 921, 922, 928, 929, 939, 940, 942, 947, 953, 966, 970, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "attend": 0, "psf": [0, 338], "dataia": 0, "possibl": [0, 4, 16, 24, 33, 45, 65, 71, 85, 102, 115, 135, 151, 152, 153, 179, 183, 196, 197, 211, 235, 236, 237, 238, 240, 241, 242, 244, 245, 252, 281, 299, 307, 311, 312, 320, 324, 325, 326, 331, 332, 333, 336, 338, 339, 340, 341, 342, 344, 346, 349, 350, 351, 354, 357, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 373, 375, 377, 384, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 413, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 447, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 638, 639, 640, 641, 642, 643, 660, 672, 673, 674, 678, 706, 707, 728, 733, 735, 738, 745, 746, 747, 749, 750, 751, 753, 759, 760, 761, 765, 766, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 841, 842, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 867, 869, 870, 873, 878, 900, 903, 906, 921, 924, 927, 928, 929, 931, 932, 933, 934, 935, 940, 942, 947, 948, 953, 956, 958, 965, 966, 967, 973, 974, 976, 977, 978, 979, 980, 981, 983, 984, 986, 987, 988, 989], "tinyclu": 0, "french": [0, 197], "associ": [0, 11, 22, 23, 73, 135, 150, 151, 224, 279, 288, 290, 311, 346, 363, 365, 367, 368, 370, 371, 400, 420, 421, 422, 423, 424, 425, 426, 427, 444, 445, 446, 475, 508, 512, 515, 556, 557, 581, 596, 609, 610, 617, 619, 625, 626, 627, 640, 646, 650, 681, 689, 772, 792, 800, 814, 826, 838, 846, 855, 857, 859, 875, 931, 932, 935, 942, 945, 956, 966, 973, 985], "fond": [0, 956], "de": [0, 12, 22, 23, 24, 25, 68, 103, 118, 135, 136, 138, 139, 140, 141, 142, 144, 170, 211, 212, 290, 307, 335, 586, 639, 714, 928, 929, 953, 974, 975, 976, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 38, 40, 46, 57, 61, 66, 106, 111, 118, 130, 140, 146, 152, 153, 168, 179, 180, 181, 197, 200, 211, 229, 232, 235, 236, 238, 244, 299, 307, 312, 319, 324, 333, 335, 338, 343, 344, 346, 349, 352, 363, 365, 368, 371, 373, 444, 445, 451, 455, 461, 597, 598, 849, 922, 928, 929, 932, 937, 938, 939, 953, 956, 963, 965, 966, 973], "our": [0, 4, 5, 7, 11, 12, 38, 49, 51, 64, 65, 73, 74, 78, 85, 86, 98, 100, 105, 108, 111, 112, 128, 133, 135, 140, 142, 150, 151, 152, 153, 154, 179, 197, 201, 203, 229, 235, 238, 241, 242, 270, 273, 279, 282, 284, 293, 296, 302, 303, 304, 307, 311, 312, 313, 320, 325, 337, 342, 343, 346, 349, 350, 351, 352, 363, 367, 370, 371, 374, 396, 401, 514, 595, 643, 659, 671, 676, 688, 706, 791, 792, 793, 795, 797, 799, 800, 801, 921, 922, 928, 929, 932, 938, 942, 945, 946, 947, 953, 956, 958, 965, 966, 967, 980, 981, 983, 984, 987, 988], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 324, 325, 330, 335, 336, 339, 340, 342, 346, 349, 350, 351, 352, 354, 357, 360, 361, 363, 364, 366, 367, 368, 372, 373, 389, 452, 486, 490, 492, 494, 497, 510, 511, 562, 567, 572, 575, 589, 590, 591, 592, 607, 617, 619, 624, 627, 638, 640, 643, 644, 650, 660, 747, 769, 777, 778, 779, 781, 787, 795, 806, 810, 829, 921, 926, 928, 929, 931, 932, 933, 939, 940, 946, 947, 953, 956, 958, 969, 973, 977, 978, 981, 985, 986, 987, 988, 989], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 13, 15, 18, 22, 23, 25, 31, 34, 35, 36, 38, 39, 44, 48, 49, 50, 55, 59, 69, 75, 82, 85, 87, 88, 99, 104, 106, 107, 111, 120, 121, 133, 140, 141, 143, 148, 150, 151, 152, 158, 165, 171, 172, 173, 179, 180, 181, 182, 188, 190, 194, 196, 197, 199, 200, 206, 212, 216, 219, 222, 224, 226, 233, 236, 237, 238, 239, 241, 242, 243, 245, 247, 252, 253, 258, 270, 273, 274, 278, 281, 282, 283, 284, 286, 288, 290, 291, 292, 296, 299, 304, 308, 311, 312, 313, 316, 319, 320, 324, 325, 326, 331, 333, 334, 335, 336, 338, 340, 342, 343, 344, 346, 347, 349, 350, 351, 352, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 380, 381, 382, 384, 385, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 454, 459, 460, 466, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 638, 639, 640, 641, 642, 643, 644, 645, 648, 649, 651, 652, 653, 656, 660, 664, 665, 666, 667, 668, 669, 671, 672, 673, 676, 678, 679, 680, 682, 683, 685, 686, 687, 688, 695, 696, 698, 700, 701, 703, 706, 711, 719, 724, 728, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 753, 754, 756, 757, 759, 761, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 841, 842, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 870, 871, 875, 877, 878, 879, 880, 891, 895, 900, 907, 916, 921, 922, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 937, 939, 942, 945, 946, 947, 948, 952, 953, 956, 958, 959, 961, 962, 964, 965, 966, 967, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "handl": [0, 4, 65, 108, 114, 118, 156, 212, 237, 242, 244, 253, 279, 281, 311, 313, 324, 330, 332, 336, 338, 339, 340, 347, 349, 351, 371, 447, 495, 528, 532, 533, 536, 537, 539, 540, 542, 561, 586, 597, 598, 603, 609, 610, 611, 612, 613, 619, 626, 627, 629, 632, 671, 738, 813, 822, 823, 849, 854, 861, 887, 929, 932, 933, 934, 935, 938, 940, 947, 948, 952, 953, 956, 969, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "non": [0, 3, 5, 9, 10, 13, 22, 23, 30, 33, 45, 52, 57, 69, 73, 75, 86, 87, 88, 90, 98, 101, 108, 115, 116, 118, 129, 130, 132, 139, 141, 147, 148, 151, 152, 153, 157, 158, 165, 172, 173, 178, 180, 181, 183, 185, 194, 195, 197, 202, 203, 207, 208, 209, 210, 212, 221, 223, 227, 228, 229, 235, 244, 253, 257, 271, 273, 275, 277, 278, 282, 283, 284, 285, 292, 294, 296, 301, 302, 307, 308, 311, 312, 313, 319, 320, 324, 325, 330, 333, 334, 338, 339, 340, 343, 344, 346, 347, 349, 351, 352, 361, 362, 363, 364, 367, 369, 370, 371, 372, 373, 375, 389, 393, 397, 401, 403, 407, 413, 414, 415, 416, 418, 419, 439, 447, 448, 454, 455, 459, 477, 483, 486, 487, 489, 491, 495, 498, 500, 502, 503, 504, 508, 509, 510, 511, 512, 513, 515, 516, 517, 523, 539, 540, 542, 543, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 586, 589, 594, 601, 603, 608, 609, 610, 611, 615, 616, 617, 619, 620, 623, 627, 628, 629, 636, 637, 638, 639, 640, 641, 642, 643, 645, 649, 650, 653, 657, 658, 663, 666, 668, 670, 671, 676, 677, 678, 685, 687, 689, 690, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 732, 735, 738, 739, 742, 745, 746, 747, 748, 752, 754, 755, 756, 757, 759, 765, 771, 775, 778, 797, 799, 800, 801, 804, 809, 810, 812, 813, 814, 817, 821, 822, 823, 824, 825, 826, 828, 829, 836, 837, 838, 839, 840, 842, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 869, 870, 884, 886, 890, 892, 895, 921, 922, 923, 924, 925, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 943, 944, 945, 946, 947, 948, 953, 965, 966, 967, 968, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "profit": 0, "organ": [0, 11, 73, 332, 337, 338, 352, 797, 952], "which": [0, 4, 7, 10, 12, 13, 14, 15, 16, 18, 20, 23, 24, 25, 33, 35, 36, 39, 40, 42, 45, 49, 51, 52, 53, 60, 62, 64, 65, 66, 69, 71, 73, 74, 78, 83, 87, 89, 90, 91, 96, 102, 103, 104, 108, 109, 110, 111, 114, 116, 117, 118, 119, 120, 121, 123, 128, 130, 132, 133, 135, 136, 140, 141, 142, 146, 147, 150, 151, 152, 154, 156, 158, 159, 168, 172, 179, 180, 181, 185, 187, 193, 195, 196, 197, 199, 200, 201, 203, 206, 207, 210, 211, 212, 213, 215, 216, 221, 222, 226, 227, 229, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 252, 253, 258, 259, 260, 269, 273, 275, 276, 277, 278, 279, 281, 283, 284, 285, 286, 288, 290, 291, 292, 299, 309, 311, 312, 313, 315, 319, 320, 324, 325, 326, 330, 332, 333, 335, 336, 338, 339, 340, 342, 343, 344, 346, 347, 349, 350, 351, 352, 353, 354, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 413, 414, 415, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 438, 474, 482, 483, 484, 485, 488, 489, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 523, 524, 525, 530, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 561, 562, 563, 564, 565, 566, 568, 570, 573, 578, 579, 580, 581, 583, 584, 585, 591, 593, 594, 595, 598, 599, 600, 603, 605, 606, 607, 609, 610, 612, 617, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 658, 660, 667, 668, 670, 671, 673, 675, 676, 684, 685, 686, 687, 693, 696, 706, 708, 728, 729, 730, 731, 732, 733, 739, 745, 746, 747, 750, 751, 752, 753, 755, 757, 761, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 799, 800, 801, 802, 803, 806, 809, 813, 816, 820, 822, 823, 824, 827, 828, 829, 830, 831, 833, 841, 842, 844, 845, 846, 849, 851, 854, 855, 857, 858, 859, 860, 861, 865, 878, 881, 885, 886, 888, 900, 901, 904, 907, 913, 916, 921, 922, 923, 924, 925, 926, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 944, 945, 946, 947, 948, 951, 952, 953, 956, 958, 960, 962, 965, 966, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "manag": [0, 78, 219, 323, 332, 336, 339, 340, 342, 346, 349, 351, 352, 370, 401, 419, 577, 847, 926, 948, 953, 956, 967, 969, 986], "board": 0, "scipi": [0, 6, 13, 16, 18, 31, 37, 42, 43, 49, 50, 71, 72, 75, 86, 88, 91, 93, 110, 135, 151, 154, 165, 169, 181, 222, 226, 227, 232, 235, 243, 247, 253, 258, 263, 271, 282, 283, 288, 289, 324, 332, 333, 336, 338, 340, 344, 347, 349, 350, 351, 354, 356, 363, 368, 371, 401, 402, 403, 404, 408, 413, 414, 447, 454, 459, 483, 485, 486, 492, 495, 532, 533, 536, 537, 539, 540, 561, 562, 599, 600, 604, 608, 609, 610, 614, 617, 619, 620, 621, 623, 625, 627, 628, 629, 631, 635, 638, 642, 643, 646, 650, 710, 713, 728, 729, 730, 731, 740, 741, 751, 759, 761, 775, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 812, 821, 827, 828, 829, 832, 836, 839, 840, 849, 851, 852, 854, 855, 888, 903, 906, 921, 922, 928, 930, 933, 935, 936, 942, 946, 947, 951, 953, 961, 963, 966, 967, 975, 977, 979, 980, 981, 982, 983, 985, 986, 987, 988], "mission": [0, 956], "foster": [0, 981], "comput": [0, 4, 6, 7, 11, 13, 24, 33, 35, 37, 38, 42, 48, 50, 52, 53, 55, 56, 64, 66, 72, 73, 74, 75, 86, 95, 98, 102, 105, 106, 110, 111, 112, 113, 132, 135, 140, 142, 143, 146, 151, 152, 153, 154, 156, 159, 160, 164, 165, 166, 167, 168, 179, 181, 187, 193, 196, 197, 200, 203, 207, 209, 210, 212, 215, 216, 218, 231, 233, 235, 236, 237, 238, 242, 244, 246, 253, 255, 257, 259, 260, 262, 263, 266, 273, 281, 285, 286, 289, 291, 299, 307, 311, 312, 313, 319, 325, 326, 327, 332, 333, 335, 338, 343, 344, 345, 347, 349, 350, 351, 353, 354, 357, 358, 360, 361, 362, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 408, 410, 412, 413, 414, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 467, 482, 483, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 525, 533, 536, 537, 540, 541, 542, 544, 545, 554, 555, 556, 557, 560, 561, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 666, 667, 668, 669, 670, 671, 675, 676, 677, 679, 680, 681, 684, 686, 688, 689, 690, 692, 693, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 777, 778, 779, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 805, 806, 807, 814, 815, 818, 819, 824, 825, 826, 827, 828, 829, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 883, 884, 885, 886, 897, 898, 905, 907, 913, 921, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 942, 944, 945, 946, 947, 948, 952, 953, 956, 962, 963, 966, 967, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "particular": [0, 4, 11, 13, 33, 35, 36, 55, 65, 71, 83, 90, 94, 108, 111, 114, 139, 146, 151, 152, 179, 181, 187, 211, 215, 232, 236, 238, 244, 253, 262, 266, 273, 281, 282, 285, 312, 313, 320, 324, 332, 333, 336, 337, 338, 340, 342, 343, 344, 346, 347, 350, 351, 354, 363, 367, 368, 370, 371, 372, 373, 420, 424, 447, 495, 514, 560, 604, 609, 614, 623, 625, 635, 638, 663, 678, 735, 781, 796, 868, 870, 922, 924, 926, 928, 932, 935, 936, 937, 938, 940, 942, 953, 956, 966, 973, 976, 980, 981, 982, 984, 986, 987, 988], "As": [0, 4, 7, 23, 25, 27, 36, 39, 49, 52, 53, 61, 75, 78, 90, 99, 100, 105, 108, 110, 112, 117, 128, 135, 140, 147, 151, 153, 156, 158, 161, 168, 170, 179, 183, 187, 197, 204, 224, 230, 232, 233, 235, 236, 238, 248, 252, 258, 274, 284, 291, 299, 312, 313, 315, 317, 318, 320, 324, 325, 333, 336, 337, 338, 340, 342, 343, 350, 351, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 444, 505, 513, 517, 570, 583, 606, 607, 623, 625, 638, 685, 708, 714, 791, 792, 793, 795, 797, 828, 921, 926, 928, 929, 931, 932, 933, 935, 939, 942, 946, 947, 948, 953, 956, 958, 962, 965, 966, 967, 973, 979, 984, 989], "fiscal": 0, "home": [0, 12, 118, 333, 336, 346, 354, 362, 437, 450, 630, 956], "ensur": [0, 37, 52, 75, 83, 105, 154, 179, 200, 230, 238, 270, 319, 320, 324, 325, 338, 340, 342, 343, 344, 352, 354, 361, 363, 364, 367, 375, 420, 484, 485, 492, 562, 578, 647, 656, 732, 739, 770, 842, 869, 870, 886, 892, 898, 928, 929, 932, 942, 948, 962, 975, 977, 978, 980, 981, 983, 984, 985, 986, 987, 988, 989], "monei": [0, 197, 956], "when": [0, 4, 9, 10, 11, 22, 23, 24, 25, 35, 36, 39, 51, 55, 62, 64, 65, 66, 71, 73, 74, 78, 85, 88, 89, 90, 93, 102, 107, 108, 109, 111, 114, 118, 119, 120, 130, 135, 146, 150, 151, 152, 153, 154, 158, 159, 168, 170, 172, 176, 179, 181, 184, 195, 206, 207, 208, 212, 219, 222, 224, 231, 234, 235, 236, 237, 238, 242, 244, 245, 253, 255, 259, 260, 261, 273, 275, 277, 278, 279, 281, 282, 283, 284, 285, 290, 291, 293, 299, 302, 303, 307, 311, 312, 313, 315, 320, 324, 325, 326, 332, 333, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 354, 357, 360, 361, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 379, 384, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 440, 441, 442, 443, 447, 451, 452, 453, 454, 455, 456, 459, 460, 461, 463, 466, 475, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 529, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 557, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 651, 652, 653, 655, 656, 658, 659, 663, 664, 667, 677, 678, 679, 680, 682, 684, 685, 688, 692, 696, 698, 701, 704, 705, 707, 711, 713, 717, 718, 719, 721, 724, 728, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 743, 745, 746, 747, 750, 751, 752, 753, 761, 765, 766, 770, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 835, 836, 841, 842, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 868, 869, 870, 876, 880, 884, 885, 886, 887, 889, 890, 893, 900, 901, 921, 922, 924, 926, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 942, 944, 945, 946, 947, 948, 953, 956, 958, 964, 965, 966, 967, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "need": [0, 4, 9, 12, 29, 42, 44, 49, 52, 75, 87, 108, 110, 111, 112, 118, 133, 135, 140, 146, 147, 151, 167, 181, 196, 197, 200, 206, 209, 211, 216, 221, 222, 226, 227, 233, 235, 237, 238, 240, 253, 255, 278, 281, 291, 299, 307, 312, 320, 324, 325, 326, 332, 333, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 357, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 379, 389, 393, 397, 400, 416, 454, 492, 502, 523, 533, 534, 539, 540, 541, 542, 578, 586, 589, 590, 591, 593, 600, 617, 619, 622, 627, 630, 643, 671, 672, 673, 674, 731, 735, 745, 746, 747, 750, 751, 761, 762, 763, 770, 778, 781, 789, 790, 806, 809, 812, 816, 821, 822, 826, 844, 851, 854, 921, 922, 924, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 942, 943, 945, 946, 947, 948, 953, 956, 964, 965, 966, 967, 973, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "keep": [0, 6, 38, 69, 88, 90, 132, 146, 150, 151, 152, 153, 154, 179, 180, 181, 187, 197, 226, 230, 233, 277, 278, 284, 289, 299, 311, 312, 315, 320, 324, 325, 330, 338, 342, 350, 351, 361, 363, 364, 365, 366, 367, 368, 384, 401, 416, 433, 434, 435, 436, 444, 445, 485, 491, 492, 495, 498, 505, 507, 509, 511, 513, 516, 519, 521, 546, 549, 551, 553, 554, 562, 585, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 623, 624, 627, 628, 629, 630, 659, 765, 782, 783, 792, 800, 806, 807, 845, 850, 852, 855, 858, 860, 928, 933, 937, 940, 942, 953, 956, 958, 963, 965, 967, 969, 973, 978, 981, 982, 986, 987], "while": [0, 4, 7, 8, 10, 12, 16, 22, 25, 31, 33, 35, 39, 40, 44, 57, 61, 67, 69, 83, 89, 90, 99, 102, 105, 115, 118, 133, 136, 141, 143, 144, 146, 150, 151, 152, 153, 156, 158, 160, 168, 173, 179, 181, 195, 206, 209, 210, 213, 222, 223, 227, 229, 230, 234, 235, 236, 238, 242, 243, 244, 245, 246, 248, 255, 273, 274, 275, 278, 279, 281, 284, 296, 299, 311, 313, 319, 320, 325, 330, 331, 332, 333, 334, 337, 338, 340, 342, 343, 344, 346, 347, 349, 351, 352, 357, 361, 362, 363, 366, 367, 368, 370, 371, 372, 373, 374, 375, 396, 415, 418, 419, 434, 436, 447, 472, 483, 503, 508, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 526, 533, 539, 540, 541, 542, 545, 548, 557, 585, 594, 597, 598, 600, 607, 608, 609, 610, 627, 628, 629, 630, 659, 679, 680, 688, 704, 724, 728, 733, 734, 737, 738, 742, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 762, 763, 764, 765, 770, 771, 772, 773, 774, 776, 784, 795, 797, 799, 800, 801, 808, 809, 810, 811, 812, 825, 837, 842, 847, 849, 850, 857, 858, 859, 860, 865, 890, 921, 922, 925, 926, 928, 929, 931, 932, 933, 934, 935, 938, 939, 942, 944, 947, 948, 952, 953, 958, 964, 965, 967, 973, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 42, 179, 197, 278, 346, 349, 351, 368, 370, 371, 472, 729, 730, 947, 952, 956, 981, 982, 983], "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 333, 338, 340, 343, 347, 352, 354, 364, 368, 370, 372, 395, 512, 513, 536, 537, 671, 889, 890, 942, 952, 953, 958, 967, 984], "toward": [0, 24, 25, 58, 75, 105, 111, 117, 135, 153, 158, 183, 184, 204, 338, 351, 363, 399, 403, 413, 627, 629, 646, 823, 931, 946, 948, 951, 953], "cover": [0, 48, 156, 179, 197, 320, 330, 333, 338, 350, 586, 671, 742, 932, 933, 951], "travel": 0, "expens": [0, 51, 118, 135, 150, 152, 207, 232, 244, 299, 311, 312, 313, 326, 344, 351, 363, 364, 367, 370, 371, 400, 419, 459, 747, 750, 751, 761, 772, 847, 849, 929, 931, 942, 947, 952, 956, 967, 977], "well": [0, 4, 9, 12, 22, 23, 25, 35, 44, 49, 52, 53, 57, 64, 71, 78, 100, 102, 109, 111, 116, 118, 140, 142, 150, 151, 152, 153, 156, 167, 177, 179, 180, 181, 183, 187, 199, 200, 201, 204, 206, 210, 215, 223, 235, 242, 244, 246, 250, 253, 258, 259, 260, 282, 283, 284, 285, 286, 307, 312, 313, 320, 333, 335, 337, 338, 342, 344, 346, 347, 349, 350, 351, 352, 361, 363, 365, 367, 368, 370, 373, 374, 377, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 410, 411, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 475, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 651, 672, 673, 674, 735, 738, 740, 743, 745, 746, 747, 750, 751, 761, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 884, 885, 921, 922, 924, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 942, 945, 946, 948, 949, 952, 953, 956, 966, 967, 973, 974, 977, 979, 980, 981, 984], "budget": [0, 108, 784, 785, 786, 787, 788, 921], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 153, 154, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 324, 325, 326, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 350, 351, 352, 354, 355, 356, 357, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 439, 440, 442, 444, 446, 447, 448, 451, 452, 455, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 528, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 713, 714, 716, 718, 719, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 875, 880, 883, 884, 886, 888, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 903, 906, 907, 913, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 950, 952, 953, 955, 956, 958, 959, 962, 963, 964, 965, 966, 971, 975], "note": [0, 4, 5, 7, 8, 11, 12, 13, 18, 24, 29, 33, 49, 61, 65, 66, 73, 75, 77, 78, 83, 88, 102, 103, 107, 111, 112, 115, 133, 135, 142, 146, 150, 151, 152, 153, 156, 167, 168, 172, 179, 180, 181, 183, 187, 193, 195, 197, 199, 200, 201, 203, 206, 207, 209, 211, 212, 213, 222, 230, 231, 235, 238, 241, 242, 243, 252, 253, 255, 259, 260, 269, 273, 274, 277, 281, 282, 283, 284, 285, 286, 289, 291, 293, 299, 311, 319, 324, 325, 332, 335, 336, 338, 339, 340, 342, 344, 345, 349, 350, 351, 354, 358, 361, 362, 363, 365, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 384, 386, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 410, 411, 412, 413, 415, 416, 419, 420, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 441, 447, 449, 455, 460, 466, 470, 478, 481, 485, 489, 490, 491, 492, 494, 495, 498, 500, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 536, 537, 539, 540, 541, 542, 544, 545, 548, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 580, 581, 583, 584, 586, 587, 589, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 646, 647, 650, 651, 654, 658, 659, 664, 666, 671, 672, 673, 674, 678, 679, 680, 682, 684, 688, 691, 692, 696, 704, 705, 708, 713, 714, 718, 720, 724, 728, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 761, 762, 763, 764, 765, 766, 767, 768, 770, 772, 773, 774, 776, 778, 781, 782, 783, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 816, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 862, 865, 875, 876, 885, 886, 895, 900, 907, 921, 922, 924, 925, 926, 927, 929, 930, 931, 932, 933, 935, 936, 938, 939, 940, 942, 945, 946, 947, 948, 949, 951, 952, 953, 955, 958, 965, 966, 967, 969, 971, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989], "regard": [0, 5, 7, 11, 49, 65, 90, 125, 135, 140, 152, 153, 168, 176, 181, 201, 212, 237, 244, 245, 307, 312, 334, 338, 339, 343, 349, 351, 357, 362, 363, 368, 370, 371, 373, 395, 398, 403, 410, 413, 452, 565, 570, 607, 609, 652, 693, 746, 753, 773, 791, 792, 925, 928, 932, 934, 935, 937, 939, 946, 947, 948, 960, 967, 980, 983], "might": [0, 4, 5, 28, 38, 40, 55, 57, 64, 99, 107, 116, 130, 141, 147, 151, 152, 153, 156, 179, 197, 206, 235, 237, 269, 283, 309, 320, 324, 325, 332, 336, 338, 339, 340, 342, 343, 344, 346, 349, 351, 354, 357, 361, 364, 367, 368, 369, 370, 371, 373, 386, 395, 439, 447, 452, 454, 459, 466, 474, 487, 506, 507, 508, 515, 530, 531, 533, 561, 562, 578, 601, 605, 606, 607, 609, 610, 627, 629, 643, 707, 742, 750, 751, 773, 798, 814, 829, 842, 861, 863, 865, 869, 870, 886, 901, 921, 922, 924, 926, 928, 929, 931, 932, 934, 935, 939, 940, 942, 947, 948, 967, 974, 976, 981, 982, 984, 987, 988], "pai": [0, 197, 338, 928], "dn": [0, 935], "continu": [0, 16, 18, 38, 108, 109, 135, 148, 152, 180, 187, 197, 200, 203, 218, 222, 226, 227, 270, 272, 278, 279, 283, 284, 319, 333, 336, 340, 341, 342, 343, 346, 349, 351, 352, 354, 363, 368, 370, 443, 543, 546, 547, 550, 551, 558, 559, 560, 583, 597, 598, 603, 604, 608, 611, 612, 613, 614, 676, 692, 706, 759, 761, 812, 814, 816, 818, 819, 828, 829, 830, 846, 858, 895, 921, 928, 929, 932, 933, 935, 936, 942, 948, 953, 955, 956, 958, 965, 970, 973, 975, 976, 981, 986, 987, 988], "integr": [0, 38, 65, 130, 143, 168, 270, 283, 336, 340, 341, 342, 344, 346, 351, 354, 368, 373, 666, 705, 736, 907, 931, 939, 956, 961, 974, 976, 977, 985, 986], "servic": [0, 4, 207, 338, 342, 956, 981], "azur": [0, 338], "cirru": [0, 338], "cl": [0, 8, 12, 15, 345, 351, 859], "circlecl": 0, "free": [0, 5, 140, 141, 147, 178, 226, 273, 332, 337, 338, 339, 346, 349, 354, 371, 373, 403, 560, 622, 805, 855, 921, 924, 928, 932, 953, 981], "cpu": [0, 56, 236, 253, 286, 324, 325, 336, 344, 351, 354, 371, 447, 583, 598, 602, 604, 606, 609, 610, 612, 614, 616, 617, 619, 627, 630, 747, 761, 770, 771, 772, 793, 801, 842, 900, 932, 958, 962, 967, 978, 987, 988], "server": [0, 324, 335, 336, 447, 981], "anaconda": [0, 325, 336, 342], "inc": [0, 234, 922, 944, 956], "storag": [0, 313, 351, 609, 610, 617, 619, 627, 628, 629, 849, 935, 947, 976, 981], "thei": [0, 4, 24, 25, 33, 46, 52, 75, 87, 100, 105, 106, 108, 110, 112, 114, 129, 132, 135, 136, 140, 151, 152, 165, 168, 174, 179, 180, 197, 200, 203, 206, 212, 229, 232, 235, 236, 238, 244, 253, 255, 269, 273, 278, 283, 285, 311, 312, 317, 318, 320, 324, 325, 326, 331, 333, 334, 335, 336, 337, 338, 339, 340, 342, 346, 347, 349, 350, 351, 352, 360, 362, 363, 364, 365, 366, 368, 370, 372, 373, 375, 392, 394, 398, 404, 405, 410, 418, 447, 459, 460, 484, 486, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 539, 542, 561, 570, 580, 594, 597, 598, 603, 609, 610, 611, 612, 613, 621, 623, 627, 629, 632, 638, 712, 713, 715, 718, 724, 739, 747, 761, 778, 784, 785, 786, 787, 788, 806, 809, 811, 817, 828, 829, 851, 854, 857, 858, 859, 860, 864, 921, 922, 924, 926, 928, 931, 932, 933, 934, 935, 937, 938, 939, 940, 942, 943, 944, 946, 947, 948, 956, 958, 962, 964, 965, 967, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989], "stage": [0, 7, 24, 66, 104, 109, 112, 336, 342, 359, 363, 370, 399, 504, 505, 510, 511, 512, 513, 539, 540, 542, 553, 929, 942, 951, 981, 985], "nightli": [0, 325, 341, 342], "build": [0, 4, 7, 16, 29, 39, 62, 68, 89, 107, 109, 115, 121, 130, 132, 145, 146, 148, 151, 187, 240, 243, 253, 270, 271, 274, 279, 313, 320, 324, 325, 326, 334, 340, 341, 342, 343, 344, 351, 354, 356, 362, 363, 364, 367, 370, 371, 394, 441, 452, 454, 475, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 536, 537, 539, 540, 542, 578, 579, 581, 642, 664, 665, 748, 752, 756, 765, 769, 771, 810, 827, 829, 857, 858, 859, 860, 862, 882, 921, 922, 929, 932, 936, 938, 942, 947, 948, 952, 953, 956, 959, 961, 965, 966, 973, 976, 978, 979, 980, 982, 985], "applic": [3, 5, 18, 45, 73, 148, 156, 179, 196, 201, 229, 238, 273, 324, 326, 333, 335, 338, 340, 344, 346, 347, 349, 351, 361, 363, 367, 368, 369, 370, 373, 375, 396, 403, 447, 449, 483, 484, 485, 504, 505, 580, 639, 640, 641, 645, 663, 679, 680, 688, 733, 734, 737, 775, 921, 928, 929, 930, 931, 932, 936, 938, 944, 948, 952, 953, 956, 965, 967, 973, 974, 979, 981, 984], "problem": [3, 4, 5, 6, 11, 13, 14, 24, 33, 50, 52, 61, 85, 99, 102, 106, 111, 112, 135, 148, 153, 156, 158, 165, 168, 172, 173, 179, 181, 196, 197, 201, 206, 207, 213, 218, 233, 235, 240, 244, 245, 249, 253, 258, 265, 277, 284, 296, 299, 307, 308, 311, 312, 320, 324, 333, 334, 335, 336, 337, 339, 340, 343, 344, 347, 349, 351, 361, 362, 363, 365, 367, 369, 370, 371, 372, 373, 374, 375, 396, 398, 400, 401, 403, 408, 413, 416, 429, 454, 459, 460, 466, 467, 468, 469, 474, 475, 479, 482, 484, 488, 490, 493, 494, 495, 496, 497, 498, 499, 502, 503, 508, 512, 515, 518, 522, 524, 540, 561, 582, 594, 599, 601, 603, 605, 606, 607, 608, 609, 610, 615, 616, 617, 619, 620, 623, 624, 625, 626, 627, 628, 630, 631, 636, 637, 638, 639, 640, 642, 644, 646, 659, 667, 679, 680, 685, 689, 734, 737, 738, 745, 746, 748, 749, 750, 751, 752, 754, 755, 756, 757, 762, 763, 764, 765, 766, 767, 769, 777, 778, 779, 789, 790, 791, 792, 793, 794, 795, 797, 799, 800, 801, 815, 816, 822, 830, 833, 839, 840, 849, 850, 857, 859, 875, 886, 922, 923, 927, 928, 929, 931, 932, 933, 934, 935, 936, 940, 942, 946, 949, 953, 954, 956, 959, 960, 961, 967, 968, 969, 973, 974, 976, 978, 979, 980, 982, 983, 985, 986, 987, 988, 989], "medium": [3, 148, 212, 250, 299, 363, 368, 373, 594, 823, 925, 928], "size": [3, 4, 5, 6, 8, 9, 11, 12, 13, 22, 27, 28, 30, 33, 35, 36, 38, 40, 42, 43, 48, 50, 52, 53, 55, 56, 57, 61, 62, 67, 71, 72, 73, 74, 75, 77, 78, 83, 85, 86, 87, 88, 89, 91, 93, 95, 102, 110, 111, 114, 115, 129, 135, 137, 138, 141, 142, 148, 150, 152, 153, 158, 159, 160, 161, 163, 165, 169, 174, 177, 180, 181, 182, 185, 192, 193, 199, 204, 206, 209, 210, 211, 212, 214, 215, 223, 229, 231, 233, 235, 237, 238, 240, 241, 259, 260, 261, 268, 271, 274, 275, 276, 277, 282, 285, 289, 293, 295, 297, 298, 299, 309, 311, 312, 313, 315, 324, 325, 326, 333, 334, 338, 343, 347, 349, 350, 351, 354, 360, 361, 362, 365, 367, 368, 371, 373, 374, 396, 397, 399, 400, 401, 408, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 444, 445, 446, 466, 478, 485, 487, 489, 491, 498, 508, 509, 510, 511, 512, 513, 515, 516, 534, 538, 539, 542, 545, 583, 584, 594, 608, 617, 618, 630, 634, 643, 646, 656, 670, 688, 690, 693, 731, 741, 749, 752, 753, 757, 764, 767, 768, 770, 773, 775, 784, 785, 786, 788, 791, 792, 793, 794, 795, 797, 799, 800, 801, 806, 807, 824, 826, 838, 843, 847, 851, 852, 853, 854, 855, 857, 858, 859, 860, 863, 885, 889, 890, 895, 896, 898, 901, 907, 922, 924, 925, 927, 928, 929, 931, 932, 933, 934, 935, 936, 939, 942, 944, 946, 947, 948, 956, 961, 963, 965, 966, 976, 977, 978, 979, 980, 981, 983, 988, 989], "interact": [3, 81, 112, 148, 179, 204, 208, 236, 282, 337, 339, 340, 342, 344, 349, 351, 352, 364, 510, 511, 512, 513, 583, 584, 824, 828, 921, 924, 928, 929, 930, 937, 939, 942, 951, 953, 975, 980, 987, 988], "user": [3, 23, 63, 85, 144, 148, 151, 167, 199, 226, 232, 242, 244, 253, 259, 260, 263, 279, 281, 282, 283, 284, 285, 286, 320, 324, 325, 327, 332, 336, 337, 338, 340, 342, 344, 345, 346, 349, 350, 351, 354, 357, 361, 362, 363, 364, 365, 367, 368, 370, 371, 372, 374, 375, 376, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 570, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 809, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 882, 886, 921, 922, 928, 929, 931, 932, 933, 935, 942, 946, 950, 953, 956, 960, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "interfac": [3, 98, 148, 331, 332, 339, 340, 347, 349, 351, 367, 373, 374, 393, 397, 401, 447, 650, 747, 750, 751, 761, 809, 810, 835, 917, 921, 935, 947, 952, 953, 956, 973, 975, 978, 979, 981, 982, 987], "compress": [3, 11, 44, 148, 273, 333, 363, 368, 371, 603, 623, 643, 779, 903, 906, 928, 942, 966, 973, 982], "sens": [3, 4, 23, 141, 148, 151, 156, 210, 273, 279, 289, 299, 320, 324, 339, 351, 363, 365, 367, 413, 420, 421, 422, 423, 424, 425, 426, 427, 603, 606, 607, 623, 748, 758, 846, 926, 928, 935, 936, 938, 942, 945], "tomographi": [3, 148, 603, 623, 928], "reconstruct": [3, 85, 86, 90, 148, 178, 202, 203, 285, 368, 371, 433, 434, 435, 482, 484, 486, 488, 489, 490, 491, 493, 494, 499, 534, 538, 603, 623, 639, 640, 644, 841, 842, 928, 929, 987], "l1": [3, 7, 27, 36, 75, 77, 148, 157, 164, 168, 190, 194, 208, 236, 253, 284, 347, 349, 362, 363, 365, 368, 393, 397, 401, 408, 415, 420, 421, 422, 423, 424, 425, 426, 427, 429, 447, 453, 455, 482, 488, 489, 490, 491, 493, 494, 498, 499, 509, 516, 540, 541, 542, 548, 597, 598, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 617, 619, 621, 623, 627, 628, 629, 630, 632, 639, 685, 712, 718, 723, 728, 729, 730, 761, 775, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 821, 829, 836, 849, 850, 856, 858, 860, 872, 914, 928, 930, 932, 935, 942, 946, 947, 948, 965, 978, 980, 986], "prior": [3, 42, 43, 52, 62, 134, 135, 148, 153, 158, 160, 220, 222, 226, 227, 235, 338, 340, 342, 351, 354, 363, 366, 368, 370, 373, 416, 474, 487, 499, 500, 501, 502, 510, 536, 537, 562, 564, 565, 566, 570, 573, 574, 581, 595, 596, 597, 598, 602, 603, 605, 606, 607, 611, 612, 613, 623, 629, 632, 667, 745, 784, 785, 786, 787, 788, 809, 810, 824, 851, 854, 899, 921, 924, 926, 928, 931, 932, 934, 940, 948, 949, 976, 978, 979, 980, 981, 982, 983, 986, 989], "lasso": [3, 95, 118, 123, 148, 151, 157, 284, 324, 349, 365, 366, 368, 370, 371, 372, 422, 423, 429, 452, 475, 482, 488, 490, 493, 494, 496, 497, 499, 548, 597, 598, 600, 601, 602, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 623, 629, 632, 633, 634, 635, 636, 637, 672, 673, 674, 735, 770, 771, 772, 810, 829, 921, 932, 946, 954, 962, 965, 969, 973, 977, 978, 979, 981, 982, 984, 986, 987], "recognit": [3, 9, 148, 271, 278, 331, 343, 368, 370, 372, 445, 453, 483, 485, 492, 659, 664, 691, 719, 738, 739, 745, 761, 775, 829, 854, 924, 928, 932, 933, 937, 947, 949, 958, 961, 969, 973], "eigenfac": [3, 148, 333, 368, 445, 492, 664, 761, 775, 829, 854, 949, 961, 973], "svm": [3, 7, 9, 10, 11, 15, 23, 25, 27, 28, 29, 64, 66, 68, 119, 122, 124, 127, 131, 148, 157, 172, 206, 212, 213, 217, 218, 229, 232, 233, 234, 235, 237, 238, 240, 241, 242, 243, 245, 246, 250, 275, 281, 283, 287, 291, 294, 297, 306, 307, 311, 324, 327, 333, 340, 344, 351, 357, 364, 367, 368, 370, 372, 389, 445, 455, 463, 466, 492, 506, 507, 514, 518, 519, 528, 544, 545, 550, 551, 556, 590, 594, 619, 627, 628, 629, 640, 648, 649, 651, 653, 664, 685, 692, 747, 761, 767, 771, 772, 775, 777, 778, 795, 809, 810, 822, 829, 845, 846, 920, 921, 924, 927, 929, 930, 932, 933, 937, 945, 947, 949, 954, 958, 961, 962, 963, 967, 969, 970, 973, 974, 975, 977, 978, 979, 980], "imag": [3, 6, 13, 29, 32, 42, 44, 47, 50, 53, 64, 80, 84, 85, 106, 131, 139, 148, 170, 200, 208, 211, 214, 233, 262, 270, 271, 282, 288, 289, 330, 331, 333, 335, 338, 343, 346, 349, 351, 354, 356, 363, 368, 393, 397, 403, 413, 444, 445, 446, 447, 453, 454, 457, 458, 485, 486, 488, 492, 558, 559, 642, 648, 688, 775, 819, 928, 932, 933, 935, 937, 944, 948, 952, 956, 958, 963, 964, 966, 967, 969, 973, 976, 981, 982, 986, 988, 989], "denois": [3, 84, 148, 368, 447, 486, 488, 492, 535, 538, 775, 819], "kernel": [3, 6, 9, 10, 11, 15, 27, 28, 68, 84, 95, 119, 124, 126, 131, 134, 136, 137, 138, 139, 142, 146, 180, 193, 205, 206, 213, 217, 229, 233, 235, 237, 240, 241, 245, 250, 254, 284, 290, 293, 294, 296, 299, 300, 301, 304, 305, 308, 320, 324, 327, 330, 340, 349, 351, 361, 363, 364, 367, 370, 371, 384, 392, 399, 403, 412, 413, 416, 433, 434, 435, 442, 447, 449, 453, 455, 465, 484, 485, 486, 492, 495, 505, 507, 509, 511, 513, 516, 519, 521, 544, 545, 561, 562, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 623, 624, 627, 628, 629, 630, 639, 641, 642, 643, 646, 685, 708, 709, 711, 716, 717, 724, 725, 726, 727, 747, 758, 761, 775, 777, 782, 783, 789, 790, 792, 794, 800, 807, 809, 810, 815, 819, 821, 822, 829, 844, 845, 849, 850, 851, 852, 853, 854, 855, 858, 860, 921, 927, 928, 929, 932, 933, 935, 938, 945, 946, 952, 954, 958, 962, 963, 968, 969, 973, 974, 975, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "pca": [3, 6, 63, 66, 68, 78, 81, 84, 87, 96, 148, 200, 202, 211, 213, 217, 234, 253, 257, 262, 284, 320, 330, 340, 351, 362, 363, 364, 369, 379, 424, 427, 447, 453, 455, 465, 483, 484, 485, 486, 490, 491, 494, 495, 500, 594, 609, 639, 641, 643, 747, 771, 775, 798, 805, 808, 809, 811, 819, 827, 829, 924, 926, 929, 935, 942, 946, 948, 963, 968, 969, 973, 975, 976, 977, 979, 980, 981, 984, 986, 987, 988], "libsvm": [3, 148, 156, 297, 331, 344, 438, 459, 514, 849, 850, 851, 852, 853, 854, 855, 947, 952, 969, 973, 975, 981, 984, 987], "gui": [3, 148, 438, 853, 854, 965, 973, 974, 984], "model": [3, 5, 6, 9, 10, 12, 14, 15, 19, 20, 22, 23, 25, 35, 36, 37, 44, 45, 50, 51, 53, 56, 63, 65, 71, 75, 78, 84, 85, 99, 102, 104, 107, 109, 110, 111, 113, 115, 117, 118, 121, 123, 124, 126, 127, 129, 138, 139, 141, 142, 143, 144, 147, 149, 150, 154, 159, 161, 163, 165, 169, 170, 172, 174, 175, 176, 180, 181, 183, 185, 187, 191, 192, 194, 195, 196, 206, 209, 213, 221, 223, 224, 225, 229, 230, 231, 233, 236, 238, 240, 241, 243, 244, 248, 249, 252, 253, 255, 257, 259, 260, 262, 266, 274, 277, 279, 281, 283, 285, 286, 288, 289, 296, 298, 299, 300, 301, 302, 303, 304, 305, 307, 309, 312, 313, 316, 317, 318, 320, 327, 330, 332, 333, 341, 344, 351, 353, 359, 360, 361, 363, 364, 366, 368, 369, 370, 371, 372, 373, 382, 384, 386, 389, 394, 400, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 439, 440, 447, 449, 452, 453, 454, 460, 473, 475, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 539, 540, 542, 544, 545, 548, 553, 557, 560, 561, 562, 566, 578, 585, 586, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 652, 657, 662, 672, 673, 674, 684, 685, 691, 692, 700, 703, 735, 738, 739, 740, 745, 746, 747, 750, 751, 753, 761, 762, 763, 764, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 792, 794, 795, 796, 798, 800, 805, 806, 807, 809, 810, 812, 814, 816, 821, 822, 824, 825, 826, 828, 829, 830, 834, 835, 837, 838, 839, 840, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 922, 924, 925, 926, 929, 930, 933, 935, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 952, 953, 954, 956, 959, 961, 963, 967, 968, 969, 973, 974, 975, 976, 977, 978], "complex": [3, 9, 14, 15, 135, 140, 146, 148, 193, 196, 205, 212, 228, 244, 274, 281, 284, 285, 287, 299, 313, 314, 334, 338, 343, 349, 364, 368, 370, 373, 374, 392, 396, 398, 399, 401, 418, 440, 451, 452, 453, 465, 485, 492, 502, 508, 509, 510, 511, 513, 515, 516, 555, 581, 589, 607, 609, 627, 628, 684, 700, 747, 775, 777, 805, 809, 810, 814, 822, 829, 845, 849, 852, 855, 857, 858, 859, 860, 921, 922, 924, 925, 927, 931, 933, 938, 942, 945, 953, 954, 956, 969, 974, 976, 982, 983, 986], "influenc": [3, 9, 73, 74, 148, 151, 161, 221, 243, 273, 299, 307, 320, 326, 365, 368, 370, 384, 392, 405, 416, 433, 434, 435, 440, 452, 505, 507, 509, 511, 513, 516, 519, 521, 562, 579, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 623, 624, 627, 629, 630, 684, 700, 775, 782, 783, 791, 792, 799, 800, 807, 826, 827, 838, 850, 852, 855, 858, 860, 869, 921, 926, 927, 935, 938, 942, 946, 947, 956, 976, 981, 982], "core": [3, 45, 60, 106, 107, 148, 286, 323, 325, 327, 336, 338, 341, 346, 351, 354, 363, 368, 370, 374, 396, 400, 401, 406, 408, 450, 489, 540, 545, 609, 610, 617, 619, 627, 784, 785, 786, 787, 788, 793, 801, 928, 935, 938, 947, 950, 953, 954, 956, 965, 967, 969, 975, 977, 978, 980, 983, 987, 988], "classif": [3, 6, 7, 21, 22, 23, 25, 28, 41, 65, 66, 67, 79, 88, 98, 99, 101, 103, 105, 106, 107, 109, 112, 116, 122, 129, 130, 131, 132, 134, 151, 152, 156, 157, 171, 172, 179, 187, 205, 207, 211, 215, 218, 224, 228, 232, 233, 234, 235, 236, 244, 250, 254, 255, 261, 263, 266, 267, 275, 288, 295, 299, 302, 305, 307, 308, 310, 312, 313, 320, 324, 326, 327, 331, 332, 333, 335, 340, 343, 347, 350, 351, 358, 361, 363, 364, 367, 368, 371, 372, 380, 389, 420, 426, 433, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 461, 463, 465, 466, 470, 471, 473, 474, 492, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 520, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 556, 557, 560, 561, 562, 564, 565, 573, 583, 584, 594, 609, 610, 617, 619, 625, 626, 627, 648, 654, 656, 658, 659, 663, 664, 666, 667, 669, 676, 677, 679, 680, 684, 688, 691, 692, 693, 704, 706, 708, 709, 732, 733, 734, 736, 737, 738, 739, 742, 744, 747, 748, 750, 751, 752, 753, 761, 765, 766, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 791, 796, 798, 799, 805, 806, 807, 809, 813, 816, 821, 822, 823, 829, 830, 833, 835, 844, 845, 846, 849, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 872, 875, 883, 921, 922, 924, 925, 926, 929, 930, 934, 937, 939, 940, 942, 943, 945, 951, 952, 954, 955, 956, 958, 959, 963, 964, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989], "text": [3, 7, 11, 12, 14, 15, 18, 28, 29, 36, 40, 49, 52, 55, 57, 59, 64, 73, 74, 109, 159, 173, 206, 210, 217, 221, 223, 228, 241, 242, 246, 258, 261, 263, 268, 275, 284, 287, 289, 306, 324, 326, 327, 330, 331, 332, 338, 343, 349, 351, 361, 363, 364, 366, 367, 368, 370, 373, 398, 400, 419, 438, 439, 440, 450, 454, 459, 472, 487, 495, 515, 566, 576, 603, 609, 617, 619, 625, 627, 648, 654, 656, 658, 664, 668, 679, 687, 741, 743, 747, 761, 775, 784, 786, 788, 791, 796, 809, 810, 812, 813, 821, 845, 846, 847, 849, 861, 862, 863, 883, 921, 924, 928, 930, 932, 933, 934, 936, 939, 942, 944, 946, 947, 951, 953, 956, 959, 969, 973, 974, 975, 976, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989], "outlier": [3, 40, 73, 74, 111, 114, 148, 157, 181, 182, 185, 205, 254, 272, 309, 333, 351, 363, 365, 370, 420, 421, 424, 425, 426, 427, 441, 442, 443, 447, 461, 463, 473, 475, 514, 590, 600, 621, 622, 623, 627, 628, 629, 630, 643, 653, 795, 799, 810, 816, 818, 819, 821, 825, 826, 827, 829, 835, 838, 852, 853, 855, 932, 946, 947, 952, 954, 968, 969, 973, 978, 979, 981], "detect": [3, 8, 10, 58, 60, 73, 75, 105, 114, 148, 160, 205, 228, 235, 238, 254, 279, 298, 333, 336, 338, 342, 349, 351, 361, 362, 363, 365, 367, 371, 400, 420, 421, 424, 425, 426, 427, 439, 440, 442, 443, 447, 461, 463, 466, 473, 488, 489, 490, 497, 514, 515, 539, 542, 547, 590, 628, 653, 677, 739, 775, 795, 799, 810, 816, 829, 849, 853, 924, 928, 953, 954, 956, 962, 967, 968, 969, 973, 976, 979, 980, 981, 983, 985, 986, 988], "set": [3, 4, 5, 6, 7, 8, 11, 13, 15, 23, 24, 25, 27, 28, 33, 37, 38, 40, 41, 42, 45, 46, 49, 50, 52, 53, 55, 57, 59, 60, 61, 64, 65, 67, 73, 74, 75, 78, 81, 84, 85, 90, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 120, 123, 129, 130, 133, 135, 141, 142, 143, 148, 150, 151, 152, 153, 154, 158, 163, 164, 167, 168, 170, 172, 174, 175, 178, 179, 180, 181, 183, 184, 187, 192, 193, 197, 199, 200, 201, 206, 207, 208, 209, 211, 212, 219, 221, 223, 225, 226, 229, 230, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 249, 252, 255, 259, 260, 261, 262, 263, 266, 269, 270, 271, 273, 275, 277, 278, 279, 281, 283, 284, 288, 289, 292, 293, 296, 298, 301, 307, 311, 312, 313, 317, 318, 320, 324, 325, 326, 330, 331, 333, 335, 336, 338, 340, 342, 343, 345, 346, 350, 351, 352, 354, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 380, 385, 386, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 439, 440, 444, 446, 447, 448, 450, 453, 454, 455, 459, 460, 461, 466, 474, 475, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 648, 649, 651, 652, 653, 654, 664, 665, 670, 672, 673, 676, 677, 678, 679, 680, 681, 684, 688, 690, 691, 695, 696, 698, 700, 701, 703, 706, 729, 730, 732, 733, 734, 735, 737, 739, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 869, 870, 880, 881, 886, 890, 900, 901, 902, 903, 906, 907, 913, 916, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 952, 953, 959, 961, 962, 963, 966, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "predict": [3, 6, 7, 8, 11, 21, 23, 24, 25, 27, 29, 31, 33, 40, 44, 51, 53, 57, 64, 65, 66, 67, 69, 77, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 125, 126, 130, 134, 135, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 151, 152, 153, 156, 158, 161, 162, 163, 171, 174, 175, 176, 177, 180, 181, 182, 185, 186, 187, 188, 193, 194, 196, 197, 206, 207, 209, 211, 214, 222, 223, 224, 225, 226, 227, 228, 229, 233, 235, 237, 238, 241, 244, 245, 249, 252, 256, 259, 260, 261, 264, 265, 271, 273, 274, 278, 279, 281, 282, 283, 284, 285, 289, 291, 292, 293, 295, 296, 298, 299, 305, 306, 307, 308, 311, 312, 316, 317, 318, 319, 320, 323, 325, 327, 330, 333, 335, 338, 340, 345, 347, 351, 353, 357, 358, 359, 361, 362, 363, 364, 368, 370, 371, 372, 380, 384, 389, 390, 391, 392, 394, 395, 396, 398, 399, 400, 416, 420, 433, 434, 435, 438, 452, 459, 475, 485, 492, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 528, 533, 544, 545, 553, 557, 561, 562, 564, 565, 566, 567, 573, 576, 578, 579, 581, 582, 583, 584, 585, 586, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 648, 649, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 663, 665, 666, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 685, 688, 691, 692, 693, 696, 698, 700, 702, 706, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 744, 745, 746, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 795, 796, 799, 800, 806, 807, 809, 816, 829, 830, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 906, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 933, 934, 935, 936, 938, 939, 940, 942, 945, 946, 947, 948, 951, 952, 953, 955, 956, 959, 961, 962, 963, 967, 969, 970, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "latenc": [3, 7, 109, 148, 323, 475, 516, 623, 629, 775, 829, 855, 897, 906, 952, 969, 976], "speci": [3, 148, 254, 333, 369, 449, 657, 739, 794, 853, 864, 932, 938, 973], "distribut": [3, 4, 8, 9, 10, 25, 33, 35, 40, 48, 49, 52, 57, 69, 72, 73, 74, 83, 99, 101, 111, 114, 128, 135, 144, 148, 150, 151, 156, 158, 179, 181, 183, 201, 203, 206, 210, 221, 226, 227, 231, 235, 241, 243, 254, 258, 272, 273, 275, 278, 288, 289, 304, 307, 324, 325, 333, 334, 335, 336, 338, 339, 342, 343, 344, 351, 357, 361, 362, 363, 365, 367, 368, 369, 373, 375, 398, 400, 420, 421, 422, 423, 424, 425, 426, 427, 439, 449, 454, 466, 467, 468, 469, 470, 474, 483, 484, 487, 501, 502, 503, 514, 562, 576, 591, 593, 595, 596, 599, 609, 610, 620, 630, 631, 639, 640, 641, 643, 657, 659, 674, 702, 739, 745, 746, 751, 752, 759, 761, 765, 766, 775, 785, 788, 794, 798, 805, 812, 825, 826, 827, 828, 829, 837, 838, 839, 844, 845, 853, 864, 888, 900, 921, 926, 928, 930, 931, 932, 934, 935, 937, 938, 944, 945, 950, 952, 953, 958, 962, 966, 968, 969, 973, 979, 980, 981, 982, 983, 984, 985, 986, 989], "relat": [3, 7, 12, 16, 40, 57, 86, 88, 90, 148, 149, 151, 174, 215, 228, 242, 286, 311, 319, 327, 333, 334, 337, 341, 342, 343, 345, 346, 347, 349, 351, 352, 353, 357, 362, 363, 364, 365, 366, 367, 368, 370, 373, 401, 415, 420, 447, 500, 501, 513, 514, 590, 624, 628, 643, 673, 693, 768, 772, 807, 808, 810, 813, 814, 819, 822, 823, 824, 825, 828, 837, 853, 921, 926, 932, 933, 935, 936, 939, 942, 947, 948, 949, 950, 953, 969, 973, 977, 978, 979, 981, 982, 985, 986], "featur": [3, 5, 6, 7, 8, 10, 11, 14, 23, 24, 25, 27, 30, 32, 38, 53, 55, 58, 63, 64, 65, 66, 73, 74, 78, 80, 81, 82, 83, 85, 87, 89, 93, 94, 96, 97, 98, 107, 113, 117, 118, 119, 121, 128, 130, 135, 136, 137, 140, 141, 143, 146, 147, 149, 150, 151, 152, 157, 162, 165, 166, 168, 175, 179, 180, 181, 183, 184, 188, 194, 195, 196, 205, 208, 210, 218, 219, 228, 232, 235, 241, 242, 244, 245, 249, 252, 256, 261, 262, 264, 267, 270, 272, 273, 276, 280, 282, 285, 286, 294, 295, 296, 299, 307, 310, 313, 316, 318, 319, 320, 327, 330, 331, 332, 333, 334, 335, 336, 340, 341, 343, 345, 346, 347, 349, 350, 351, 352, 353, 354, 357, 361, 363, 365, 366, 367, 368, 369, 373, 374, 375, 376, 379, 383, 384, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 530, 531, 532, 533, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 569, 570, 571, 573, 574, 576, 578, 579, 580, 581, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 654, 664, 672, 673, 674, 691, 708, 709, 713, 714, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 731, 735, 740, 741, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 762, 763, 764, 765, 766, 767, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 869, 870, 883, 897, 907, 908, 909, 913, 921, 924, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 943, 944, 945, 946, 947, 948, 951, 952, 953, 954, 955, 956, 958, 959, 963, 964, 965, 969, 970, 971, 972, 973, 974, 975, 981, 982, 983, 984, 985, 986, 987, 988, 989], "engin": [3, 36, 104, 140, 148, 324, 332, 335, 363, 369, 371, 373, 415, 447, 513, 590, 624, 768, 772, 807, 808, 810, 813, 814, 819, 822, 823, 824, 828, 922, 932, 942, 950, 979], "topic": [3, 7, 8, 64, 148, 311, 312, 313, 333, 334, 367, 368, 371, 439, 448, 487, 489, 491, 498, 539, 542, 928, 933, 952, 953, 967, 978, 980], "extract": [3, 4, 6, 8, 11, 12, 16, 46, 63, 64, 65, 77, 85, 148, 183, 194, 228, 271, 311, 313, 320, 327, 330, 333, 335, 340, 344, 347, 349, 363, 364, 367, 368, 401, 403, 406, 407, 413, 415, 439, 440, 444, 445, 454, 455, 482, 485, 486, 487, 488, 489, 490, 491, 492, 494, 496, 497, 498, 534, 535, 539, 540, 542, 544, 545, 548, 550, 582, 669, 738, 747, 761, 786, 808, 809, 854, 886, 896, 921, 929, 933, 937, 942, 946, 952, 956, 959, 963, 964, 969, 973, 974, 982, 985], "neg": [3, 4, 15, 22, 55, 69, 71, 78, 110, 111, 115, 148, 151, 157, 179, 197, 225, 226, 232, 235, 238, 242, 244, 245, 253, 273, 277, 285, 311, 344, 351, 352, 363, 367, 370, 371, 372, 374, 375, 384, 392, 396, 403, 416, 420, 433, 434, 435, 439, 482, 484, 486, 487, 488, 489, 491, 493, 495, 498, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 539, 542, 543, 546, 547, 549, 550, 551, 553, 555, 556, 557, 558, 559, 560, 562, 586, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 620, 621, 623, 624, 628, 629, 630, 631, 638, 649, 650, 655, 656, 663, 664, 666, 669, 670, 672, 673, 674, 677, 679, 680, 681, 685, 688, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 732, 733, 734, 735, 737, 741, 745, 746, 770, 775, 782, 783, 792, 795, 800, 807, 816, 825, 827, 828, 833, 837, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 884, 886, 900, 930, 932, 933, 935, 936, 937, 938, 946, 947, 967, 968, 969, 973, 979, 980, 981, 982, 983, 984, 986, 987, 988], "matrix": [3, 7, 9, 13, 18, 19, 20, 29, 31, 35, 37, 40, 57, 64, 72, 73, 74, 75, 77, 85, 86, 87, 96, 142, 148, 154, 157, 165, 180, 184, 207, 210, 211, 226, 228, 242, 270, 285, 288, 289, 311, 312, 313, 319, 324, 327, 333, 334, 335, 338, 340, 344, 347, 349, 350, 351, 360, 364, 365, 366, 371, 372, 373, 374, 375, 384, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 403, 405, 408, 410, 411, 413, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 443, 447, 448, 451, 452, 453, 454, 455, 456, 459, 460, 461, 470, 472, 474, 475, 477, 478, 480, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 495, 496, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 536, 537, 539, 540, 541, 542, 544, 545, 554, 555, 556, 557, 558, 559, 560, 562, 571, 580, 581, 582, 586, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 658, 663, 664, 665, 666, 667, 669, 679, 680, 681, 684, 688, 689, 690, 691, 704, 705, 708, 709, 710, 711, 713, 714, 716, 717, 718, 722, 724, 725, 727, 728, 729, 730, 731, 733, 734, 737, 738, 740, 744, 745, 746, 747, 750, 751, 761, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 812, 813, 814, 815, 816, 818, 820, 821, 822, 824, 826, 827, 828, 829, 831, 832, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 867, 868, 869, 870, 875, 884, 885, 886, 887, 890, 891, 892, 895, 896, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 918, 922, 924, 926, 928, 929, 933, 934, 935, 936, 942, 943, 944, 945, 946, 948, 949, 966, 967, 968, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "factor": [3, 24, 28, 40, 42, 49, 57, 84, 90, 95, 116, 148, 151, 204, 206, 215, 246, 247, 253, 254, 268, 269, 273, 275, 283, 285, 324, 325, 344, 347, 351, 360, 362, 363, 370, 371, 373, 392, 394, 405, 420, 424, 425, 427, 429, 439, 455, 465, 466, 478, 483, 486, 487, 489, 491, 492, 495, 496, 497, 498, 500, 501, 512, 513, 514, 539, 542, 548, 564, 600, 601, 602, 605, 606, 607, 633, 634, 643, 670, 733, 747, 750, 751, 771, 795, 829, 843, 845, 853, 885, 886, 921, 928, 929, 935, 942, 945, 949, 952, 968, 969, 973, 974, 976, 977, 979, 987, 989], "latent": [3, 16, 96, 148, 271, 312, 366, 371, 373, 439, 483, 487, 489, 490, 491, 494, 495, 539, 542, 805, 931, 952, 967, 968, 969, 975, 978], "dirichlet": [3, 148, 221, 222, 227, 230, 371, 439, 487, 489, 491, 539, 542, 745, 952, 968, 969, 973, 978, 979], "alloc": [3, 23, 56, 148, 247, 283, 334, 338, 339, 363, 371, 395, 398, 410, 439, 487, 489, 491, 535, 539, 542, 597, 603, 611, 613, 750, 751, 753, 773, 776, 921, 942, 952, 968, 969, 977, 978, 983, 984], "visual": [3, 4, 9, 15, 23, 27, 29, 39, 42, 45, 48, 52, 55, 56, 73, 82, 84, 87, 89, 95, 112, 114, 116, 120, 121, 143, 147, 148, 152, 154, 163, 170, 179, 181, 197, 204, 205, 208, 211, 216, 217, 226, 228, 229, 231, 232, 236, 245, 258, 262, 263, 267, 269, 273, 277, 278, 281, 283, 289, 327, 330, 334, 336, 344, 345, 360, 365, 367, 368, 369, 370, 390, 393, 397, 405, 423, 447, 453, 455, 458, 461, 465, 473, 483, 485, 492, 515, 517, 522, 582, 584, 609, 640, 643, 648, 649, 651, 652, 653, 669, 677, 732, 739, 748, 749, 752, 753, 764, 765, 766, 767, 768, 775, 806, 810, 829, 854, 863, 882, 927, 929, 930, 935, 936, 938, 939, 942, 948, 952, 958, 969, 976, 983, 984, 985, 987], "stock": [3, 148, 363, 365, 405, 423, 640, 961], "market": [3, 148, 363, 365, 405, 423, 640, 956, 961], "wikipedia": [3, 22, 148, 346, 362, 363, 546, 558, 559, 587, 607, 619, 622, 633, 634, 646, 655, 656, 658, 660, 663, 667, 669, 676, 679, 680, 681, 684, 685, 688, 693, 706, 733, 735, 736, 738, 739, 740, 741, 791, 792, 797, 798, 799, 800, 827, 843, 857, 858, 924, 928, 932, 935, 944, 948, 967, 973, 980], "princip": [3, 76, 84, 87, 89, 90, 92, 94, 116, 148, 199, 211, 213, 262, 278, 283, 330, 363, 366, 375, 435, 482, 483, 484, 485, 486, 488, 490, 491, 492, 493, 494, 495, 496, 497, 501, 608, 639, 640, 641, 643, 644, 775, 798, 810, 829, 885, 886, 929, 935, 968, 969, 973], "eigenvector": [3, 42, 78, 81, 148, 221, 363, 403, 413, 485, 486, 492, 501, 639, 640, 642, 646, 929, 973, 977, 987], "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 336, 338, 340, 342, 349, 351, 354, 360, 363, 364, 366, 370, 401, 407, 419, 439, 440, 459, 460, 488, 497, 508, 509, 510, 511, 515, 516, 517, 596, 597, 598, 601, 602, 603, 604, 605, 606, 611, 612, 613, 614, 632, 633, 634, 635, 747, 750, 751, 761, 768, 770, 807, 809, 847, 857, 858, 859, 860, 890, 891, 916, 921, 928, 929, 931, 932, 942, 944, 946, 952, 956, 964, 967, 978, 980, 983, 986, 987], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 331, 333, 335, 336, 342, 343, 346, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 461, 948, 963, 965, 967, 969, 977, 978, 981, 985, 986, 987], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 324, 325, 327, 335, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 354, 356, 357, 362, 374, 375, 379, 390, 391, 407, 412, 422, 436, 458, 459, 482, 494, 498, 506, 523, 524, 528, 534, 543, 546, 547, 549, 552, 554, 563, 567, 571, 572, 575, 580, 589, 593, 598, 601, 602, 605, 611, 612, 614, 618, 626, 649, 650, 659, 666, 672, 673, 674, 676, 678, 680, 681, 685, 689, 693, 694, 696, 697, 701, 704, 706, 713, 714, 718, 719, 721, 723, 731, 733, 742, 754, 755, 756, 757, 758, 759, 760, 777, 779, 781, 783, 785, 789, 790, 799, 800, 801, 803, 811, 812, 815, 817, 820, 831, 834, 836, 837, 839, 840, 841, 844, 850, 859, 860, 861, 862, 875, 884, 886, 888, 889, 891, 894, 895, 896, 903, 920, 922, 930, 953, 954, 956, 959, 962, 963, 967, 969, 974, 975, 976, 977, 979, 980, 981, 983, 986, 988, 989], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 324, 325, 336, 338, 339, 340, 342, 343, 344, 345, 346, 349, 351, 352, 354, 359, 363, 365, 367, 370, 373, 374, 375, 389, 395, 396, 398, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 413, 415, 418, 422, 423, 482, 483, 484, 485, 486, 488, 490, 492, 493, 494, 496, 497, 499, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 533, 543, 545, 546, 547, 549, 550, 551, 553, 561, 562, 585, 591, 597, 598, 600, 602, 603, 604, 606, 607, 611, 612, 613, 614, 633, 634, 639, 640, 641, 642, 643, 644, 645, 731, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 781, 782, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 806, 807, 808, 811, 844, 845, 849, 850, 851, 852, 853, 854, 855, 857, 858, 880, 881, 900, 903, 906, 921, 931, 933, 936, 945, 947, 948, 952, 953, 956, 958, 965, 967, 973, 976, 978, 980, 981, 982, 983, 987, 988], "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 324, 325, 326, 332, 336, 337, 338, 339, 341, 342, 344, 346, 347, 349, 350, 351, 354, 357, 362, 363, 364, 365, 371, 374, 375, 396, 454, 484, 512, 513, 553, 585, 597, 638, 747, 750, 751, 753, 761, 772, 774, 880, 929, 936, 942, 945, 946, 947, 948, 949, 951, 952, 955, 956, 960, 967, 974, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 338, 346, 942], "jupyterlit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 339, 344, 364, 419, 847, 948, 951, 952, 953, 984, 987], "introduc": [4, 71, 73, 74, 90, 132, 148, 153, 158, 205, 210, 242, 286, 313, 331, 334, 336, 338, 340, 342, 343, 346, 349, 351, 354, 361, 363, 365, 367, 368, 370, 371, 385, 393, 394, 395, 397, 398, 400, 410, 415, 419, 433, 434, 435, 436, 447, 455, 466, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 506, 507, 517, 518, 519, 520, 521, 532, 533, 534, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 609, 615, 636, 637, 639, 640, 643, 775, 793, 798, 801, 805, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 843, 847, 926, 928, 931, 934, 935, 938, 942, 944, 946, 947, 958, 965, 973, 974, 979, 981, 982, 983, 985, 986, 987, 988, 989], "differ": [4, 5, 7, 10, 12, 13, 14, 15, 22, 25, 27, 28, 31, 32, 33, 39, 41, 42, 45, 49, 52, 53, 59, 60, 61, 62, 64, 65, 66, 73, 77, 78, 81, 82, 83, 85, 87, 88, 90, 93, 94, 95, 98, 102, 104, 107, 108, 111, 113, 118, 119, 120, 121, 123, 126, 128, 133, 134, 135, 136, 137, 140, 141, 142, 146, 147, 148, 150, 151, 153, 156, 158, 159, 165, 166, 167, 168, 170, 176, 179, 180, 181, 183, 184, 185, 186, 187, 197, 199, 200, 201, 204, 206, 208, 211, 212, 215, 221, 223, 224, 225, 226, 227, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 249, 250, 253, 259, 260, 262, 268, 269, 272, 277, 278, 281, 294, 298, 299, 303, 307, 308, 311, 312, 313, 320, 324, 325, 326, 332, 333, 335, 336, 337, 338, 341, 343, 345, 347, 350, 351, 354, 357, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 386, 389, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 409, 410, 413, 415, 426, 429, 441, 444, 445, 447, 454, 455, 459, 460, 463, 465, 473, 488, 489, 490, 491, 497, 498, 500, 501, 506, 507, 514, 539, 540, 541, 542, 545, 562, 564, 565, 566, 570, 573, 574, 578, 583, 584, 585, 589, 594, 595, 598, 600, 602, 604, 606, 609, 612, 617, 618, 619, 623, 625, 627, 628, 629, 631, 641, 643, 645, 649, 650, 651, 652, 655, 656, 657, 658, 660, 666, 668, 669, 677, 678, 679, 680, 681, 684, 687, 693, 707, 708, 709, 718, 728, 732, 733, 734, 736, 737, 739, 740, 741, 743, 746, 747, 749, 750, 751, 752, 753, 756, 761, 762, 763, 764, 765, 766, 767, 770, 772, 773, 776, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 802, 805, 809, 814, 818, 819, 821, 825, 826, 827, 829, 834, 835, 836, 837, 838, 839, 840, 849, 851, 854, 857, 858, 859, 860, 896, 921, 922, 924, 925, 927, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 942, 945, 946, 947, 948, 949, 952, 953, 956, 958, 960, 961, 962, 966, 967, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "strategi": [4, 48, 50, 53, 56, 65, 108, 113, 118, 132, 146, 147, 148, 153, 168, 179, 187, 197, 208, 217, 228, 236, 238, 240, 244, 245, 267, 272, 279, 281, 282, 285, 313, 323, 340, 344, 350, 351, 367, 370, 371, 372, 375, 389, 390, 391, 403, 413, 423, 453, 455, 463, 465, 473, 484, 489, 502, 503, 512, 513, 518, 519, 522, 539, 540, 542, 543, 545, 553, 578, 579, 581, 585, 596, 598, 602, 604, 606, 612, 614, 616, 624, 626, 642, 646, 655, 664, 705, 707, 743, 747, 750, 751, 753, 761, 764, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 806, 814, 819, 830, 844, 849, 851, 854, 857, 858, 859, 860, 903, 921, 922, 931, 933, 934, 935, 936, 938, 940, 942, 946, 947, 948, 952, 962, 967, 969, 976, 977, 978, 981, 982, 983, 984, 985, 986, 987, 989], "leverag": [4, 8, 33, 45, 78, 197, 311, 312, 324, 325, 336, 367, 370, 824, 921, 928, 958, 976, 988], "task": [4, 7, 88, 98, 105, 106, 112, 131, 132, 143, 148, 157, 179, 195, 199, 232, 313, 324, 326, 333, 335, 336, 337, 338, 342, 343, 344, 347, 349, 350, 351, 368, 370, 371, 372, 373, 399, 412, 444, 456, 466, 543, 546, 547, 549, 550, 551, 555, 556, 557, 560, 583, 584, 597, 598, 603, 604, 611, 612, 613, 614, 625, 632, 635, 658, 677, 679, 680, 704, 732, 734, 737, 739, 748, 752, 765, 769, 898, 899, 929, 932, 933, 934, 935, 943, 945, 947, 948, 950, 951, 953, 954, 955, 956, 958, 965, 966, 967, 969, 973, 978, 982, 988], "highli": [4, 9, 66, 73, 74, 87, 96, 114, 174, 184, 235, 238, 244, 269, 312, 324, 325, 338, 340, 344, 361, 363, 367, 370, 371, 403, 413, 447, 514, 622, 643, 759, 761, 805, 928, 932, 935, 936, 938, 946, 947, 951], "depend": [4, 5, 7, 33, 49, 69, 89, 108, 111, 112, 115, 118, 128, 132, 141, 146, 148, 149, 151, 156, 159, 183, 197, 200, 205, 206, 212, 226, 235, 236, 240, 241, 242, 253, 269, 273, 278, 283, 286, 296, 307, 312, 313, 320, 324, 325, 326, 331, 338, 340, 341, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 362, 363, 365, 367, 368, 370, 371, 372, 373, 374, 390, 391, 392, 396, 398, 400, 401, 403, 405, 408, 410, 411, 413, 415, 420, 435, 440, 441, 442, 444, 447, 451, 452, 453, 455, 456, 461, 485, 486, 492, 495, 502, 510, 511, 513, 539, 540, 541, 542, 553, 555, 558, 559, 562, 578, 583, 584, 589, 591, 599, 609, 610, 620, 622, 624, 627, 628, 629, 631, 638, 641, 642, 645, 646, 679, 691, 728, 731, 740, 741, 745, 746, 766, 774, 791, 792, 793, 795, 797, 798, 799, 800, 801, 807, 808, 810, 822, 823, 826, 829, 843, 850, 851, 854, 858, 867, 921, 922, 924, 925, 926, 928, 929, 931, 932, 934, 935, 936, 937, 940, 944, 946, 947, 948, 958, 965, 967, 969, 970, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 988], "busi": [4, 179, 235, 346, 349, 738, 928, 932, 956], "dai": [4, 12, 140, 152, 180, 325, 335, 338, 828, 956, 979, 980, 987, 988], "week": [4, 337, 338, 352, 956, 987], "yearli": 4, "season": [4, 140, 152, 180, 337, 373], "perform": [4, 7, 18, 22, 23, 24, 25, 29, 32, 44, 45, 49, 52, 53, 57, 59, 61, 62, 64, 65, 68, 71, 78, 88, 95, 98, 99, 106, 108, 110, 112, 113, 117, 118, 123, 132, 133, 136, 146, 147, 148, 151, 152, 153, 154, 156, 168, 179, 181, 185, 186, 187, 196, 197, 200, 201, 203, 206, 211, 213, 215, 223, 226, 228, 230, 231, 232, 233, 235, 236, 237, 240, 241, 243, 244, 246, 248, 250, 252, 253, 266, 271, 273, 275, 277, 279, 281, 287, 299, 302, 305, 311, 313, 320, 323, 325, 326, 333, 335, 340, 341, 342, 344, 346, 347, 349, 350, 351, 353, 357, 358, 360, 361, 362, 364, 365, 366, 368, 369, 370, 372, 373, 374, 375, 381, 392, 394, 395, 396, 398, 399, 401, 403, 405, 406, 410, 412, 419, 420, 433, 434, 435, 436, 445, 453, 463, 466, 482, 483, 484, 486, 488, 490, 493, 494, 495, 496, 497, 499, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 532, 533, 534, 539, 540, 541, 542, 552, 553, 554, 561, 562, 578, 581, 589, 591, 596, 602, 605, 606, 607, 609, 615, 616, 617, 618, 619, 621, 624, 626, 627, 628, 629, 633, 634, 636, 638, 640, 641, 644, 645, 654, 655, 656, 658, 659, 663, 664, 676, 679, 680, 688, 690, 692, 705, 706, 707, 728, 733, 734, 736, 737, 738, 742, 743, 744, 745, 746, 747, 750, 751, 758, 759, 761, 765, 770, 771, 772, 774, 775, 778, 781, 782, 784, 785, 786, 787, 788, 789, 790, 796, 798, 804, 805, 806, 807, 809, 810, 812, 815, 816, 818, 819, 821, 822, 823, 825, 826, 829, 830, 832, 834, 835, 836, 837, 838, 839, 840, 844, 845, 847, 851, 852, 853, 854, 855, 857, 858, 859, 860, 869, 870, 905, 916, 921, 922, 924, 926, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 945, 946, 947, 948, 952, 953, 956, 958, 959, 962, 965, 968, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 324, 325, 326, 327, 331, 332, 333, 336, 337, 338, 339, 340, 342, 343, 344, 346, 347, 349, 350, 351, 353, 354, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 921, 922, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 952, 953, 958, 962, 963, 964, 965, 966, 967, 970, 973, 974, 975, 976, 977, 978, 979, 980], "preprocess": [4, 5, 6, 10, 28, 38, 40, 45, 49, 53, 57, 64, 65, 66, 67, 69, 78, 85, 96, 104, 108, 129, 140, 153, 156, 158, 160, 167, 168, 170, 179, 180, 185, 195, 197, 200, 207, 208, 216, 219, 232, 242, 244, 249, 261, 262, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 292, 299, 302, 312, 326, 327, 330, 332, 335, 338, 343, 350, 351, 360, 363, 364, 367, 371, 372, 415, 416, 417, 418, 440, 518, 532, 533, 539, 540, 541, 542, 581, 609, 610, 623, 625, 627, 629, 638, 691, 778, 809, 810, 849, 850, 851, 852, 854, 855, 922, 928, 933, 936, 943, 946, 947, 949, 952, 955, 956, 958, 963, 964, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980], "splinetransform": [4, 180, 284, 824, 942, 986, 988, 989], "class": [4, 8, 9, 10, 13, 15, 18, 21, 22, 23, 25, 27, 31, 36, 51, 53, 66, 82, 83, 90, 94, 97, 98, 106, 114, 119, 135, 136, 139, 143, 144, 146, 148, 156, 157, 169, 170, 171, 187, 191, 194, 195, 200, 206, 213, 215, 221, 222, 223, 228, 229, 230, 235, 237, 241, 245, 246, 252, 253, 256, 258, 261, 262, 263, 264, 278, 281, 285, 288, 290, 291, 294, 295, 299, 300, 308, 311, 312, 313, 326, 327, 330, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 354, 359, 361, 363, 364, 366, 368, 372, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 412, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 451, 453, 454, 455, 459, 460, 461, 463, 465, 466, 470, 473, 474, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 534, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 671, 677, 679, 680, 681, 685, 686, 687, 688, 689, 690, 691, 692, 693, 704, 705, 707, 732, 733, 734, 736, 737, 738, 739, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 874, 875, 876, 877, 878, 880, 881, 893, 898, 900, 902, 903, 916, 921, 922, 923, 924, 926, 927, 928, 929, 933, 934, 936, 939, 940, 942, 943, 945, 948, 953, 954, 956, 958, 962, 965, 967, 969, 970, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "extrapol": [4, 135, 158, 180, 209, 238, 828, 932, 942, 948, 986, 988], "option": [4, 27, 42, 48, 93, 112, 141, 147, 160, 180, 238, 244, 282, 311, 315, 320, 326, 332, 333, 334, 336, 338, 339, 341, 343, 344, 346, 347, 349, 351, 352, 354, 357, 363, 364, 366, 367, 368, 370, 371, 374, 385, 393, 394, 396, 397, 398, 399, 400, 403, 410, 412, 413, 414, 447, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 498, 500, 513, 518, 519, 533, 534, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 579, 581, 583, 584, 585, 586, 589, 590, 591, 592, 593, 597, 603, 608, 609, 610, 621, 624, 626, 627, 628, 629, 631, 633, 634, 638, 639, 640, 643, 645, 646, 662, 664, 668, 672, 679, 680, 685, 686, 687, 707, 708, 709, 714, 716, 717, 721, 724, 725, 726, 727, 728, 731, 733, 734, 737, 740, 741, 743, 750, 751, 753, 773, 775, 776, 780, 781, 782, 783, 789, 790, 793, 798, 801, 805, 808, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 826, 827, 828, 829, 841, 842, 849, 861, 863, 876, 918, 921, 922, 928, 931, 932, 935, 942, 945, 947, 948, 953, 955, 965, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "load": [4, 6, 11, 14, 29, 42, 44, 49, 65, 66, 80, 85, 96, 107, 119, 121, 131, 140, 156, 160, 175, 176, 179, 187, 195, 214, 215, 219, 231, 240, 252, 253, 257, 262, 269, 270, 291, 292, 316, 324, 327, 330, 333, 335, 341, 344, 350, 357, 362, 366, 367, 368, 370, 433, 434, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 483, 485, 494, 789, 790, 886, 942, 953, 959, 961, 963, 969, 973, 978, 980, 981, 983, 984, 985, 986, 987, 988, 989], "openml": [4, 65, 118, 140, 151, 179, 187, 195, 197, 207, 252, 270, 331, 354, 447, 969, 981, 983, 986], "repositori": [4, 8, 156, 331, 333, 335, 336, 338, 340, 342, 346, 352, 354, 455, 952, 955, 969], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 324, 325, 326, 332, 333, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 357, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 411, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 439, 446, 447, 451, 453, 454, 455, 457, 458, 459, 461, 463, 466, 472, 475, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 528, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 635, 639, 640, 641, 642, 643, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 666, 668, 669, 672, 673, 674, 676, 677, 678, 679, 680, 681, 684, 685, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 713, 714, 718, 719, 721, 723, 731, 732, 733, 734, 735, 736, 737, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 837, 838, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 876, 881, 884, 886, 888, 889, 890, 891, 893, 894, 895, 896, 900, 903, 906, 920, 921, 922, 924, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 942, 943, 944, 945, 946, 947, 948, 953, 956, 958, 961, 962, 963, 964, 965, 966, 967, 969, 970, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988], "fetch_openml": [4, 5, 65, 69, 108, 118, 140, 151, 152, 153, 179, 187, 195, 197, 207, 215, 219, 252, 253, 270, 279, 281, 285, 332, 342, 981, 983, 984, 985, 986, 987, 988], "bike_shar": 4, "bike_sharing_demand": [4, 152], "version": [4, 42, 49, 65, 85, 90, 137, 147, 152, 153, 156, 177, 180, 181, 187, 193, 195, 215, 219, 252, 270, 278, 281, 282, 283, 284, 286, 299, 311, 324, 327, 333, 337, 338, 339, 340, 341, 344, 346, 347, 349, 351, 352, 354, 356, 357, 362, 363, 366, 368, 370, 371, 373, 374, 375, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 451, 452, 453, 455, 456, 459, 460, 461, 463, 465, 473, 474, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 534, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 658, 659, 664, 665, 669, 672, 673, 674, 675, 677, 678, 679, 680, 681, 684, 689, 690, 691, 693, 696, 703, 704, 706, 707, 708, 709, 711, 716, 717, 718, 719, 728, 732, 733, 734, 735, 737, 739, 745, 746, 747, 748, 749, 750, 751, 752, 753, 760, 761, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 835, 837, 838, 839, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 867, 869, 870, 880, 881, 883, 885, 886, 895, 898, 899, 900, 902, 907, 913, 918, 919, 921, 924, 926, 929, 932, 934, 936, 938, 940, 945, 946, 948, 950, 953, 955, 966, 971], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 123, 126, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 159, 161, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 320, 324, 325, 326, 332, 333, 335, 336, 338, 340, 342, 343, 344, 345, 347, 349, 350, 351, 354, 355, 356, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 384, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 410, 411, 413, 414, 415, 416, 419, 420, 422, 423, 424, 425, 426, 429, 433, 434, 435, 436, 444, 447, 451, 452, 455, 458, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 528, 532, 533, 535, 536, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 554, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 652, 654, 655, 656, 657, 659, 664, 666, 667, 668, 669, 672, 673, 674, 675, 676, 678, 679, 680, 681, 684, 685, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 713, 714, 718, 719, 721, 723, 726, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 833, 837, 842, 843, 845, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 862, 864, 869, 870, 875, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 900, 903, 905, 906, 919, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 950, 958, 959, 962, 963, 964, 965, 966, 970, 971, 973, 974, 975, 977, 978, 989], "as_fram": [4, 5, 65, 69, 108, 118, 140, 151, 152, 153, 167, 168, 179, 187, 195, 197, 215, 219, 253, 270, 278, 279, 281, 283, 285, 286, 332, 333, 440, 441, 442, 443, 447, 451, 452, 453, 455, 456, 461, 983, 984, 985, 986], "true": [4, 5, 6, 7, 8, 10, 11, 14, 15, 16, 18, 24, 27, 29, 31, 33, 40, 45, 46, 49, 50, 52, 53, 55, 58, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 77, 83, 85, 86, 87, 88, 90, 96, 98, 103, 108, 109, 110, 111, 113, 114, 118, 119, 121, 123, 124, 125, 129, 132, 135, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 156, 163, 164, 166, 167, 168, 170, 172, 174, 175, 176, 179, 181, 182, 183, 186, 187, 193, 194, 195, 197, 199, 202, 203, 206, 207, 210, 212, 213, 214, 215, 218, 219, 221, 224, 226, 229, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 258, 259, 262, 266, 268, 269, 270, 271, 274, 278, 279, 281, 283, 285, 286, 289, 291, 292, 293, 302, 306, 307, 308, 311, 312, 313, 315, 316, 319, 320, 324, 325, 331, 333, 334, 338, 339, 340, 343, 344, 345, 347, 350, 351, 353, 357, 359, 360, 361, 363, 364, 365, 367, 368, 370, 371, 372, 373, 375, 376, 377, 380, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 410, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 470, 473, 474, 475, 477, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 648, 649, 650, 651, 652, 653, 654, 656, 658, 659, 660, 663, 664, 665, 666, 669, 671, 674, 676, 677, 678, 679, 680, 681, 684, 685, 688, 689, 690, 691, 692, 693, 700, 701, 702, 704, 706, 711, 717, 718, 719, 728, 732, 733, 734, 735, 736, 737, 738, 739, 742, 744, 745, 746, 747, 750, 751, 752, 753, 758, 759, 761, 765, 766, 769, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 880, 886, 887, 893, 894, 897, 898, 902, 903, 905, 913, 918, 920, 921, 922, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 942, 944, 945, 946, 947, 948, 952, 958, 962, 963, 965, 966, 967, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "parser": [4, 5, 8, 65, 69, 108, 118, 140, 151, 152, 153, 179, 187, 195, 197, 207, 215, 219, 252, 253, 270, 279, 281, 285, 447, 988], "panda": [4, 5, 12, 23, 64, 65, 66, 67, 69, 105, 108, 111, 115, 118, 140, 146, 150, 151, 152, 153, 158, 168, 179, 187, 195, 197, 207, 215, 216, 219, 226, 233, 235, 236, 238, 246, 247, 252, 253, 270, 278, 279, 281, 284, 285, 307, 311, 312, 332, 333, 336, 337, 338, 340, 341, 351, 354, 356, 364, 385, 394, 395, 397, 398, 400, 415, 417, 419, 433, 434, 435, 436, 440, 441, 442, 443, 447, 451, 452, 453, 455, 456, 461, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 517, 518, 519, 520, 521, 532, 533, 534, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 578, 579, 580, 581, 583, 584, 586, 589, 590, 591, 592, 593, 639, 640, 643, 747, 750, 751, 761, 775, 793, 798, 801, 805, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 847, 865, 921, 922, 942, 952, 953, 967, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "df": [4, 23, 25, 118, 150, 152, 158, 179, 197, 226, 235, 277, 279, 312, 343, 371, 541, 542, 921, 922], "frame": [4, 15, 65, 140, 152, 179, 279, 333, 338, 349, 352, 440, 441, 442, 443, 447, 451, 452, 453, 455, 456, 461, 952, 963, 985], "To": [4, 8, 15, 24, 25, 29, 42, 52, 71, 73, 75, 78, 81, 90, 108, 111, 112, 120, 123, 133, 140, 141, 144, 146, 147, 150, 151, 156, 160, 167, 179, 180, 181, 187, 197, 210, 211, 217, 219, 226, 230, 232, 233, 235, 237, 238, 240, 242, 252, 270, 273, 278, 279, 281, 282, 283, 284, 285, 286, 309, 312, 315, 320, 324, 325, 331, 332, 336, 338, 339, 340, 342, 343, 344, 346, 349, 351, 357, 360, 363, 364, 365, 366, 367, 368, 370, 371, 399, 400, 401, 412, 415, 418, 443, 447, 453, 454, 458, 459, 482, 488, 489, 490, 492, 494, 495, 496, 497, 508, 509, 510, 511, 515, 516, 520, 548, 553, 578, 583, 597, 598, 603, 604, 607, 609, 610, 611, 612, 613, 614, 635, 651, 663, 678, 713, 735, 741, 750, 751, 771, 778, 820, 839, 840, 849, 850, 857, 858, 859, 860, 876, 886, 900, 919, 921, 922, 927, 928, 929, 930, 932, 933, 934, 935, 938, 939, 942, 946, 947, 948, 955, 956, 958, 962, 964, 965, 967, 973, 976, 978, 979, 980, 982, 984], "get": [4, 5, 9, 12, 15, 16, 18, 33, 44, 48, 51, 86, 90, 111, 120, 130, 133, 135, 140, 141, 146, 151, 152, 153, 154, 172, 181, 194, 197, 199, 213, 233, 236, 237, 239, 243, 246, 252, 253, 258, 266, 274, 281, 289, 292, 296, 299, 301, 304, 309, 311, 313, 315, 325, 327, 331, 332, 333, 336, 338, 339, 340, 343, 344, 345, 346, 351, 354, 357, 359, 361, 363, 364, 365, 367, 368, 370, 371, 372, 373, 377, 378, 379, 383, 384, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 413, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 646, 650, 672, 673, 674, 676, 682, 683, 692, 706, 713, 714, 719, 735, 738, 745, 746, 747, 750, 751, 761, 770, 771, 772, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 864, 877, 878, 879, 885, 886, 921, 927, 928, 929, 931, 932, 942, 945, 946, 947, 948, 953, 955, 962, 965, 966, 967, 970, 973, 976, 979, 981, 984, 986, 987], "quick": [4, 90, 218, 338, 340, 344, 354, 557, 775, 932, 933, 942, 956, 965, 970], "understand": [4, 9, 81, 140, 148, 152, 230, 233, 283, 284, 296, 311, 314, 320, 337, 338, 339, 344, 349, 353, 363, 370, 371, 455, 775, 806, 807, 830, 857, 858, 859, 860, 863, 921, 922, 929, 931, 948, 951, 952, 956, 973, 987], "pattern": [4, 15, 58, 75, 84, 135, 146, 148, 152, 284, 311, 312, 313, 320, 335, 338, 340, 360, 363, 364, 368, 370, 371, 399, 415, 417, 455, 483, 485, 492, 506, 507, 589, 659, 675, 691, 719, 738, 739, 745, 829, 924, 926, 928, 932, 933, 939, 947, 949, 953, 956, 985], "let": [4, 5, 49, 59, 65, 69, 85, 90, 98, 105, 108, 111, 112, 115, 135, 141, 142, 147, 151, 152, 153, 160, 168, 179, 181, 197, 199, 203, 230, 235, 238, 242, 311, 313, 319, 320, 333, 338, 340, 344, 349, 360, 363, 367, 370, 371, 451, 455, 461, 485, 597, 598, 601, 602, 603, 604, 605, 606, 607, 611, 612, 613, 614, 632, 635, 815, 822, 823, 928, 929, 930, 931, 932, 939, 940, 942, 947, 948, 956, 965, 967, 983], "u": [4, 10, 11, 12, 15, 16, 31, 46, 48, 51, 85, 93, 108, 109, 135, 144, 150, 151, 152, 176, 180, 187, 197, 200, 203, 210, 218, 219, 222, 223, 227, 230, 235, 238, 242, 277, 311, 319, 325, 327, 333, 338, 342, 344, 346, 349, 354, 360, 363, 366, 368, 370, 371, 384, 414, 416, 433, 434, 435, 482, 488, 496, 497, 501, 503, 505, 507, 509, 511, 513, 516, 519, 521, 539, 540, 542, 562, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 623, 624, 629, 630, 632, 635, 640, 644, 655, 671, 690, 705, 782, 783, 792, 800, 807, 829, 843, 850, 852, 855, 858, 860, 886, 926, 931, 932, 939, 942, 950, 956, 967, 970, 983], "look": [4, 5, 49, 85, 88, 90, 111, 112, 135, 140, 141, 147, 151, 152, 181, 199, 203, 206, 227, 230, 235, 237, 270, 311, 320, 325, 326, 332, 333, 336, 338, 340, 342, 344, 346, 349, 350, 363, 366, 368, 369, 370, 371, 399, 439, 440, 508, 509, 510, 511, 515, 516, 553, 554, 582, 610, 643, 829, 857, 858, 859, 860, 928, 929, 942, 946, 947, 949, 967, 973, 981, 983], "averag": [4, 23, 25, 33, 35, 36, 40, 48, 55, 57, 102, 103, 107, 111, 114, 119, 120, 121, 140, 152, 160, 168, 179, 186, 197, 215, 238, 240, 243, 245, 252, 273, 281, 292, 311, 320, 324, 333, 335, 340, 360, 361, 365, 367, 371, 373, 374, 375, 389, 390, 393, 396, 397, 398, 400, 441, 444, 445, 474, 482, 483, 484, 488, 489, 491, 492, 498, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 520, 521, 538, 583, 584, 599, 609, 610, 617, 618, 620, 623, 625, 627, 628, 629, 631, 638, 651, 654, 655, 657, 658, 659, 664, 671, 672, 673, 675, 676, 678, 679, 680, 684, 685, 686, 688, 689, 690, 693, 695, 696, 698, 700, 701, 703, 706, 714, 731, 732, 733, 734, 735, 737, 738, 743, 744, 745, 746, 773, 795, 815, 830, 918, 922, 927, 928, 933, 936, 938, 939, 946, 947, 948, 965, 967, 973, 976, 977, 978, 980, 981, 982, 983, 984, 987, 988, 989], "per": [4, 10, 44, 49, 59, 82, 104, 108, 140, 142, 151, 152, 179, 194, 197, 219, 222, 231, 242, 244, 273, 279, 283, 307, 311, 313, 324, 333, 334, 338, 343, 344, 347, 349, 351, 361, 363, 367, 368, 369, 370, 371, 373, 399, 401, 408, 412, 415, 419, 438, 451, 453, 454, 455, 459, 461, 463, 466, 474, 483, 485, 486, 487, 490, 492, 494, 500, 501, 512, 513, 520, 534, 539, 542, 561, 562, 583, 584, 592, 593, 609, 610, 617, 619, 622, 624, 625, 626, 627, 629, 643, 647, 664, 667, 671, 691, 704, 708, 709, 731, 733, 745, 746, 770, 777, 778, 779, 781, 782, 785, 787, 805, 808, 814, 816, 818, 819, 822, 823, 829, 830, 847, 849, 850, 851, 852, 853, 854, 855, 874, 875, 886, 907, 921, 924, 928, 931, 932, 933, 936, 939, 946, 947, 948, 952, 953, 965, 967, 975, 976, 977, 978, 979, 980, 981, 982, 985, 986, 987, 989], "hour": [4, 151, 152, 338, 344, 929, 951], "sundai": 4, "weekend": 4, "clearli": [4, 55, 88, 152, 211, 337, 338, 349, 351, 368, 370, 933, 939], "distinguish": [4, 36, 73, 83, 90, 181, 232, 333, 340, 351, 370, 373, 921, 932, 935, 938], "commut": 4, "morn": 4, "even": [4, 13, 25, 36, 38, 48, 69, 78, 88, 111, 141, 151, 152, 153, 168, 179, 180, 187, 197, 203, 204, 212, 222, 241, 273, 275, 277, 278, 293, 312, 313, 320, 326, 333, 337, 338, 339, 340, 342, 343, 346, 349, 351, 361, 362, 363, 364, 365, 367, 368, 370, 371, 373, 393, 395, 397, 398, 399, 400, 410, 412, 483, 486, 508, 509, 510, 511, 515, 516, 533, 540, 545, 578, 579, 581, 590, 609, 610, 646, 656, 663, 693, 711, 717, 724, 728, 731, 736, 738, 772, 809, 810, 841, 842, 857, 858, 859, 860, 886, 901, 921, 922, 924, 926, 928, 931, 932, 935, 937, 938, 940, 942, 944, 946, 947, 948, 956, 967, 980, 981, 982, 985, 987], "leisur": 4, "more": [4, 6, 7, 8, 11, 12, 13, 18, 23, 24, 25, 27, 28, 33, 35, 36, 39, 40, 42, 45, 48, 49, 52, 55, 62, 69, 73, 80, 81, 83, 85, 88, 92, 93, 100, 102, 105, 106, 108, 110, 111, 112, 113, 114, 118, 133, 135, 141, 144, 147, 151, 152, 156, 158, 159, 165, 168, 170, 173, 177, 179, 180, 181, 194, 195, 196, 197, 199, 203, 206, 211, 212, 213, 217, 221, 223, 224, 226, 227, 229, 233, 235, 236, 237, 238, 242, 244, 253, 255, 263, 268, 269, 271, 273, 274, 275, 278, 279, 281, 282, 283, 285, 286, 289, 296, 299, 304, 307, 309, 311, 312, 313, 315, 316, 320, 324, 325, 326, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 342, 344, 345, 346, 350, 351, 352, 354, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 525, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 882, 884, 886, 888, 895, 898, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 952, 953, 954, 955, 956, 958, 962, 963, 964, 965, 966, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "spread": [4, 36, 201, 236, 273, 288, 289, 290, 293, 324, 338, 363, 403, 413, 466, 826, 838, 846, 932], "peak": [4, 25, 152, 361, 367, 987], "middl": [4, 22, 55, 90, 99, 308, 335, 939, 942], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 154, 156, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 285, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 332, 341, 345, 354, 356, 390, 453, 582, 583, 648, 649, 651, 652, 653, 753, 863, 952, 961, 963, 964, 965, 970, 982, 985, 986, 987, 988], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 154, 156, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 285, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 338, 345, 390, 453, 582, 583, 648, 649, 651, 652, 653, 753, 963, 964, 965, 970, 987], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 154, 156, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 285, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 345, 390, 453, 582, 583, 648, 649, 651, 652, 653, 753, 863, 939, 963, 964, 965, 970], "fig": [4, 5, 7, 8, 10, 14, 23, 25, 38, 39, 41, 49, 52, 55, 59, 61, 67, 71, 73, 78, 81, 85, 90, 91, 92, 96, 98, 104, 105, 108, 111, 112, 115, 116, 118, 120, 138, 144, 146, 152, 154, 156, 159, 167, 170, 173, 174, 176, 177, 179, 180, 187, 192, 194, 197, 199, 200, 201, 202, 203, 204, 207, 209, 215, 216, 226, 230, 231, 232, 235, 236, 237, 238, 241, 244, 245, 246, 252, 253, 255, 257, 258, 266, 269, 270, 273, 274, 275, 277, 278, 279, 281, 285, 286, 296, 306, 307, 308, 309, 311, 312, 313, 315, 345, 963], "ax": [4, 5, 7, 8, 10, 12, 14, 15, 23, 25, 27, 28, 29, 36, 38, 39, 41, 49, 51, 52, 59, 61, 66, 67, 69, 73, 75, 78, 81, 83, 85, 91, 92, 96, 98, 101, 104, 105, 108, 115, 116, 118, 119, 120, 138, 139, 144, 146, 150, 151, 152, 153, 154, 156, 158, 159, 162, 168, 170, 171, 174, 176, 177, 179, 180, 181, 183, 184, 187, 188, 190, 192, 194, 197, 199, 200, 201, 202, 203, 204, 207, 212, 215, 216, 218, 221, 223, 226, 230, 231, 232, 235, 237, 238, 239, 241, 242, 244, 245, 246, 247, 249, 252, 253, 255, 256, 257, 258, 261, 263, 264, 268, 269, 270, 273, 275, 276, 277, 278, 279, 281, 282, 285, 286, 295, 296, 297, 300, 301, 306, 307, 308, 309, 311, 312, 313, 315, 316, 340, 341, 368, 373, 390, 485, 492, 501, 582, 583, 648, 649, 651, 652, 653, 669, 753, 863, 932, 935, 939, 970, 983], "subplot": [4, 5, 6, 8, 10, 11, 13, 14, 27, 28, 29, 31, 35, 39, 40, 46, 47, 49, 50, 51, 52, 55, 57, 60, 61, 67, 69, 72, 73, 74, 75, 77, 78, 82, 83, 85, 86, 87, 88, 90, 95, 96, 99, 101, 102, 104, 105, 107, 108, 112, 115, 116, 118, 119, 120, 128, 137, 139, 144, 146, 147, 151, 152, 154, 156, 159, 162, 170, 171, 173, 174, 177, 178, 179, 180, 181, 183, 187, 192, 195, 197, 199, 200, 203, 204, 206, 207, 209, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 226, 227, 230, 231, 232, 235, 237, 238, 240, 241, 242, 244, 245, 246, 248, 249, 252, 253, 255, 256, 257, 258, 261, 262, 264, 265, 266, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 281, 285, 286, 291, 293, 296, 297, 299, 306, 307, 308, 309, 311, 312, 313, 315, 316, 345, 963], "figsiz": [4, 5, 6, 10, 12, 13, 14, 23, 24, 25, 27, 28, 29, 31, 35, 36, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 57, 59, 60, 61, 67, 69, 73, 75, 77, 78, 80, 81, 82, 83, 85, 88, 89, 90, 91, 92, 95, 96, 99, 101, 102, 108, 109, 110, 111, 112, 116, 118, 119, 128, 137, 139, 143, 144, 146, 147, 151, 152, 154, 156, 158, 159, 162, 169, 173, 176, 177, 178, 179, 180, 181, 183, 185, 187, 190, 193, 195, 197, 199, 200, 201, 203, 204, 206, 207, 209, 211, 213, 214, 215, 216, 221, 223, 224, 227, 230, 231, 232, 237, 238, 239, 242, 244, 245, 249, 252, 253, 255, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 285, 286, 288, 290, 297, 299, 303, 304, 306, 307, 308, 309, 311, 312, 313, 863, 963], "4": [4, 5, 6, 7, 9, 10, 16, 19, 23, 24, 25, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 51, 53, 54, 55, 57, 59, 60, 61, 66, 67, 74, 75, 77, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 98, 100, 102, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 123, 129, 138, 140, 141, 143, 144, 146, 147, 151, 152, 156, 158, 159, 161, 162, 169, 170, 171, 172, 176, 177, 178, 179, 180, 185, 186, 187, 189, 192, 193, 197, 199, 206, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 235, 236, 237, 240, 242, 244, 246, 249, 252, 253, 255, 257, 258, 259, 260, 263, 268, 270, 271, 273, 274, 276, 277, 281, 282, 284, 286, 290, 291, 296, 298, 302, 303, 304, 307, 308, 309, 311, 312, 320, 325, 332, 333, 335, 336, 338, 343, 344, 347, 349, 350, 351, 354, 355, 356, 361, 363, 364, 365, 367, 368, 370, 371, 372, 373, 375, 389, 391, 392, 393, 395, 397, 398, 399, 400, 402, 403, 404, 410, 411, 413, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 447, 455, 463, 464, 467, 468, 469, 479, 483, 484, 485, 486, 488, 489, 490, 491, 495, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 515, 516, 521, 528, 532, 533, 540, 541, 542, 544, 545, 554, 558, 559, 565, 568, 570, 573, 578, 579, 580, 581, 584, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 628, 630, 631, 635, 638, 640, 641, 643, 644, 649, 650, 653, 657, 658, 666, 667, 676, 677, 684, 693, 694, 696, 697, 698, 699, 701, 702, 706, 718, 719, 731, 732, 738, 739, 742, 744, 745, 746, 747, 748, 749, 752, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 775, 778, 779, 780, 783, 784, 785, 786, 788, 797, 806, 807, 808, 814, 815, 816, 821, 822, 823, 824, 825, 827, 830, 833, 837, 843, 849, 850, 852, 853, 855, 857, 858, 859, 875, 883, 885, 886, 888, 890, 891, 896, 900, 903, 921, 922, 925, 926, 927, 928, 930, 932, 933, 934, 935, 942, 943, 946, 947, 950, 958, 962, 963, 964, 965, 967, 971, 974, 975, 976, 978, 979, 980, 982, 986, 987, 988], "average_week_demand": 4, "groupbi": [4, 67, 152, 187, 197], "weekdai": [4, 152], "count": [4, 14, 23, 25, 37, 45, 49, 64, 83, 119, 120, 152, 179, 181, 210, 219, 244, 253, 282, 283, 312, 313, 333, 335, 342, 347, 351, 352, 361, 362, 363, 368, 370, 371, 400, 440, 487, 495, 532, 539, 540, 541, 542, 545, 555, 568, 591, 648, 656, 666, 669, 679, 680, 688, 704, 733, 734, 736, 737, 784, 788, 789, 790, 798, 801, 812, 861, 863, 888, 897, 921, 924, 928, 932, 934, 935, 942, 948, 956, 967, 973, 976, 978, 981, 982, 984, 985], "mean": [4, 5, 8, 11, 13, 22, 23, 25, 31, 32, 33, 36, 38, 40, 46, 49, 50, 65, 72, 73, 74, 75, 78, 83, 85, 88, 89, 90, 92, 93, 101, 102, 107, 108, 111, 112, 118, 119, 120, 124, 132, 135, 140, 142, 144, 146, 148, 151, 152, 159, 161, 168, 170, 172, 175, 179, 181, 183, 185, 186, 188, 194, 195, 196, 197, 202, 204, 206, 209, 210, 211, 212, 213, 215, 216, 217, 219, 221, 222, 223, 224, 226, 227, 231, 232, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 264, 273, 276, 278, 279, 281, 284, 291, 299, 302, 307, 309, 310, 311, 313, 320, 324, 330, 332, 333, 335, 338, 339, 340, 342, 343, 344, 346, 347, 349, 350, 351, 360, 361, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 384, 389, 390, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 409, 410, 411, 412, 413, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 439, 452, 453, 455, 457, 463, 470, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 534, 539, 540, 541, 542, 545, 548, 553, 557, 558, 559, 560, 561, 562, 564, 573, 578, 579, 581, 583, 585, 586, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 635, 639, 640, 641, 642, 643, 644, 645, 646, 655, 656, 658, 660, 663, 664, 667, 668, 674, 676, 679, 680, 681, 686, 687, 688, 691, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 707, 724, 728, 729, 731, 733, 734, 735, 737, 738, 740, 741, 743, 745, 746, 747, 750, 751, 753, 761, 765, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 795, 796, 797, 799, 800, 802, 803, 805, 806, 807, 808, 810, 811, 813, 814, 818, 819, 821, 825, 827, 829, 830, 835, 837, 838, 840, 842, 844, 845, 849, 850, 851, 852, 854, 855, 857, 858, 859, 860, 865, 869, 870, 872, 906, 907, 913, 917, 921, 922, 923, 926, 928, 929, 931, 934, 935, 936, 937, 939, 940, 945, 946, 947, 948, 952, 956, 962, 965, 967, 968, 969, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "plot": [4, 5, 6, 9, 11, 12, 14, 15, 23, 24, 25, 26, 28, 29, 30, 32, 33, 36, 38, 39, 41, 50, 51, 53, 54, 55, 56, 57, 60, 66, 67, 69, 72, 73, 74, 78, 79, 81, 85, 88, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 110, 111, 113, 115, 116, 117, 124, 126, 128, 129, 131, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 148, 149, 150, 151, 153, 154, 156, 157, 161, 162, 164, 166, 167, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 193, 194, 196, 197, 201, 202, 203, 204, 205, 206, 209, 210, 212, 213, 214, 219, 221, 222, 223, 225, 227, 228, 229, 230, 235, 236, 238, 240, 241, 245, 246, 247, 249, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 273, 274, 275, 276, 277, 278, 282, 285, 286, 289, 290, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 317, 318, 319, 327, 338, 341, 347, 349, 353, 354, 358, 361, 363, 365, 367, 369, 370, 390, 393, 401, 407, 415, 422, 447, 452, 453, 455, 463, 466, 470, 474, 475, 504, 508, 511, 513, 515, 516, 520, 521, 561, 573, 582, 583, 584, 608, 609, 623, 627, 648, 649, 651, 652, 653, 654, 669, 677, 700, 732, 734, 737, 738, 739, 753, 764, 770, 771, 772, 773, 776, 787, 791, 807, 810, 822, 823, 826, 829, 849, 854, 857, 858, 863, 925, 926, 928, 929, 931, 932, 935, 936, 938, 946, 947, 948, 952, 953, 962, 963, 965, 969, 974, 976, 977, 982, 983, 984, 985, 986, 987, 988], "_": [4, 5, 7, 8, 11, 12, 14, 23, 24, 25, 29, 30, 36, 39, 46, 49, 53, 58, 62, 64, 75, 83, 85, 90, 91, 93, 95, 102, 103, 104, 128, 135, 140, 141, 142, 150, 151, 152, 156, 158, 162, 163, 164, 166, 167, 168, 171, 176, 177, 179, 181, 192, 196, 200, 203, 207, 212, 219, 230, 235, 237, 238, 239, 241, 242, 244, 256, 261, 264, 271, 275, 278, 279, 282, 285, 286, 289, 290, 307, 311, 313, 316, 340, 344, 351, 368, 370, 371, 483, 484, 485, 486, 487, 489, 490, 491, 494, 498, 517, 548, 603, 604, 614, 635, 639, 640, 641, 642, 647, 649, 651, 714, 747, 761, 793, 801, 822, 823, 922, 928, 929, 932, 934, 935, 936, 939, 940, 942, 947, 948, 965, 980], "hourli": [4, 151], "xtick": [4, 6, 8, 11, 27, 36, 40, 42, 46, 47, 48, 53, 54, 57, 75, 77, 81, 88, 108, 109, 110, 137, 138, 139, 143, 162, 169, 175, 192, 206, 213, 222, 223, 224, 227, 234, 235, 249, 257, 266, 271, 279, 288, 299, 302, 303, 304, 305, 648, 963], "24": [4, 5, 61, 148, 152, 253, 280, 281, 342, 354, 363, 370, 371, 389, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 411, 413, 415, 420, 421, 422, 423, 424, 425, 426, 427, 440, 441, 442, 443, 447, 455, 466, 467, 468, 469, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 494, 495, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 564, 578, 579, 580, 581, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 649, 651, 653, 659, 665, 677, 696, 703, 745, 746, 747, 750, 751, 761, 768, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 810, 812, 813, 814, 815, 818, 819, 821, 823, 824, 825, 826, 827, 829, 839, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 880, 881, 907, 913, 921, 939, 942, 950, 971, 973, 981, 982, 983, 984, 986], "rang": [4, 5, 6, 7, 8, 10, 12, 15, 16, 18, 23, 24, 25, 27, 29, 30, 33, 34, 36, 38, 42, 43, 44, 46, 47, 55, 56, 58, 59, 60, 71, 72, 74, 75, 99, 101, 102, 103, 105, 111, 117, 128, 132, 136, 151, 152, 156, 168, 169, 173, 177, 179, 180, 186, 187, 195, 197, 200, 202, 209, 210, 214, 221, 223, 226, 227, 230, 234, 235, 236, 238, 239, 240, 242, 243, 244, 246, 247, 248, 249, 252, 257, 263, 266, 271, 273, 278, 279, 281, 285, 286, 289, 299, 311, 312, 316, 319, 325, 332, 333, 335, 338, 340, 344, 347, 351, 357, 363, 367, 370, 373, 392, 412, 420, 422, 423, 424, 425, 426, 427, 429, 432, 442, 445, 446, 465, 478, 492, 504, 505, 510, 511, 514, 539, 540, 542, 580, 583, 589, 591, 599, 600, 620, 622, 627, 631, 643, 663, 681, 696, 738, 775, 781, 795, 797, 799, 800, 805, 819, 826, 827, 828, 834, 835, 838, 839, 842, 843, 885, 886, 900, 921, 928, 932, 936, 946, 953, 956, 961, 962, 963, 965, 978, 979, 980, 981, 983, 986], "7": [4, 12, 13, 14, 15, 18, 24, 27, 31, 35, 38, 40, 42, 49, 50, 51, 55, 59, 60, 62, 66, 73, 75, 88, 98, 102, 114, 118, 119, 144, 150, 151, 152, 154, 156, 161, 163, 172, 178, 180, 193, 197, 199, 206, 211, 212, 217, 221, 222, 225, 226, 230, 235, 239, 241, 242, 246, 248, 252, 253, 255, 258, 259, 261, 270, 273, 277, 281, 284, 285, 288, 291, 296, 298, 303, 307, 308, 312, 313, 320, 333, 335, 336, 338, 342, 343, 344, 354, 355, 356, 361, 367, 368, 370, 371, 372, 373, 391, 396, 399, 401, 402, 403, 404, 413, 422, 423, 442, 483, 484, 485, 486, 487, 489, 495, 512, 513, 539, 542, 551, 578, 579, 581, 598, 600, 609, 612, 643, 672, 673, 674, 676, 678, 694, 695, 696, 700, 701, 703, 735, 742, 745, 748, 749, 754, 757, 764, 765, 768, 772, 775, 779, 789, 790, 798, 807, 808, 821, 822, 844, 845, 886, 889, 890, 896, 921, 922, 927, 928, 930, 932, 933, 935, 936, 938, 942, 946, 947, 950, 958, 962, 965, 971, 974, 975, 976, 979, 980, 981, 982, 986], "xticklabel": [4, 10, 108, 152, 279], "sun": [4, 152, 981, 986, 987], "mon": [4, 152], "tue": [4, 152, 979], "wed": [4, 152], "thu": [4, 5, 22, 23, 24, 25, 36, 49, 55, 71, 75, 88, 90, 102, 104, 106, 108, 129, 135, 140, 141, 152, 167, 168, 179, 181, 197, 206, 212, 216, 223, 233, 235, 240, 241, 242, 281, 284, 315, 320, 324, 325, 333, 340, 344, 349, 351, 361, 363, 367, 368, 370, 371, 373, 374, 389, 391, 414, 466, 478, 504, 505, 506, 507, 508, 509, 514, 515, 516, 554, 557, 561, 573, 578, 583, 584, 594, 596, 609, 628, 656, 669, 675, 738, 743, 749, 754, 756, 768, 780, 783, 818, 849, 923, 924, 925, 926, 927, 928, 929, 932, 933, 938, 939, 940, 942, 944, 945, 946, 947, 953, 955, 956, 973, 975, 979, 981, 982, 983, 985, 989], "fri": [4, 152, 333], "sat": [4, 152, 371], "xlabel": [4, 8, 9, 22, 23, 24, 25, 30, 33, 37, 56, 71, 72, 74, 75, 77, 78, 81, 87, 93, 99, 100, 101, 103, 108, 109, 110, 111, 112, 113, 117, 121, 123, 124, 128, 129, 132, 135, 136, 137, 138, 140, 141, 142, 151, 158, 161, 162, 164, 166, 167, 168, 169, 172, 173, 179, 181, 182, 183, 184, 186, 188, 189, 193, 197, 210, 212, 213, 230, 234, 235, 239, 240, 244, 245, 248, 249, 250, 255, 256, 259, 260, 279, 296, 298, 299, 302, 311, 316, 317, 318, 582], "ylabel": [4, 8, 9, 22, 23, 24, 25, 27, 30, 31, 33, 56, 71, 72, 74, 75, 77, 78, 81, 87, 93, 99, 100, 101, 103, 109, 110, 111, 112, 113, 117, 121, 123, 124, 128, 129, 132, 135, 136, 137, 138, 140, 141, 142, 151, 158, 161, 162, 164, 166, 167, 168, 169, 172, 173, 179, 181, 182, 183, 184, 186, 188, 189, 197, 210, 212, 213, 230, 234, 235, 238, 239, 240, 244, 245, 248, 249, 250, 256, 296, 299, 302, 311, 316, 317, 318, 582], "number": [4, 5, 7, 8, 10, 12, 13, 18, 23, 24, 25, 29, 30, 32, 34, 35, 37, 39, 40, 42, 43, 44, 45, 46, 49, 50, 52, 56, 57, 58, 62, 64, 65, 66, 67, 69, 75, 77, 78, 82, 83, 85, 87, 89, 90, 93, 98, 99, 100, 102, 106, 107, 109, 110, 111, 112, 114, 118, 120, 129, 130, 133, 143, 144, 147, 148, 151, 152, 156, 168, 178, 179, 180, 181, 186, 187, 193, 194, 195, 196, 197, 199, 206, 210, 213, 216, 221, 222, 224, 226, 227, 229, 230, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 253, 255, 259, 260, 273, 275, 276, 279, 281, 282, 283, 284, 285, 286, 292, 299, 303, 304, 307, 312, 313, 315, 319, 320, 325, 326, 330, 332, 333, 334, 335, 336, 338, 341, 342, 344, 345, 346, 347, 349, 350, 351, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 532, 533, 534, 535, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 652, 654, 655, 656, 658, 663, 664, 665, 667, 669, 671, 674, 678, 679, 680, 681, 684, 685, 688, 690, 702, 705, 724, 728, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 838, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 869, 870, 873, 885, 886, 889, 890, 900, 901, 903, 906, 907, 924, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 944, 946, 947, 948, 949, 952, 953, 955, 958, 965, 966, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "rental": [4, 152, 939], "target": [4, 6, 16, 18, 24, 27, 29, 30, 41, 48, 63, 68, 78, 81, 89, 92, 94, 98, 100, 106, 107, 108, 111, 112, 115, 117, 118, 119, 121, 126, 128, 131, 133, 135, 137, 140, 141, 147, 148, 150, 151, 152, 153, 154, 158, 162, 172, 175, 179, 181, 184, 187, 188, 200, 207, 209, 210, 211, 212, 214, 215, 216, 223, 229, 233, 236, 238, 240, 241, 244, 245, 253, 256, 261, 264, 265, 269, 272, 273, 282, 283, 285, 288, 289, 292, 293, 295, 296, 299, 303, 305, 306, 311, 312, 316, 317, 318, 319, 320, 324, 326, 327, 330, 331, 332, 333, 334, 335, 340, 342, 343, 346, 347, 350, 353, 363, 367, 370, 373, 385, 389, 390, 391, 394, 397, 415, 416, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 459, 461, 471, 475, 482, 483, 485, 487, 488, 490, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 520, 521, 524, 533, 534, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 578, 579, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 648, 649, 651, 652, 653, 658, 659, 660, 663, 664, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 685, 688, 689, 690, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 732, 733, 734, 735, 737, 738, 739, 742, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 796, 798, 799, 800, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 826, 827, 828, 829, 830, 833, 838, 841, 842, 844, 845, 846, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 869, 894, 895, 896, 923, 924, 925, 928, 929, 932, 936, 939, 940, 946, 947, 948, 953, 955, 956, 958, 963, 965, 967, 969, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "absolut": [4, 69, 89, 108, 133, 151, 179, 181, 185, 197, 340, 363, 365, 367, 368, 370, 371, 372, 373, 374, 396, 401, 407, 408, 482, 488, 493, 496, 497, 499, 500, 501, 509, 511, 512, 513, 516, 539, 541, 542, 544, 548, 553, 570, 578, 583, 597, 600, 601, 603, 605, 607, 622, 623, 625, 627, 629, 633, 634, 650, 655, 668, 672, 686, 687, 695, 696, 698, 703, 705, 707, 718, 743, 749, 753, 764, 767, 773, 775, 787, 789, 790, 794, 813, 818, 821, 834, 858, 860, 918, 928, 929, 942, 946, 948, 965, 966, 974, 979, 984, 985, 986, 987], "basi": [4, 6, 13, 90, 135, 140, 142, 180, 270, 284, 299, 330, 336, 339, 363, 368, 370, 403, 485, 573, 583, 590, 642, 828, 930, 942, 947, 954, 962, 963, 966, 969, 981, 983, 986], "max": [4, 8, 9, 10, 11, 12, 16, 18, 23, 25, 28, 36, 40, 48, 53, 57, 62, 66, 70, 75, 81, 85, 88, 96, 99, 101, 107, 116, 123, 125, 126, 128, 129, 137, 139, 140, 147, 148, 161, 166, 167, 168, 172, 174, 181, 182, 185, 193, 195, 197, 202, 210, 213, 233, 234, 235, 246, 248, 252, 253, 255, 259, 260, 266, 268, 270, 273, 275, 276, 278, 284, 291, 293, 298, 305, 308, 324, 363, 365, 368, 420, 421, 422, 423, 424, 425, 426, 427, 428, 463, 487, 506, 507, 508, 509, 510, 511, 514, 515, 516, 557, 578, 582, 583, 599, 600, 620, 623, 625, 631, 642, 643, 647, 650, 655, 656, 691, 707, 739, 740, 741, 747, 806, 807, 818, 819, 821, 828, 835, 836, 857, 858, 859, 860, 900, 928, 930, 935, 942, 946, 947, 965, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "rescal": [4, 42, 43, 90, 160, 167, 202, 273, 309, 365, 375, 420, 421, 422, 423, 424, 425, 426, 427, 484, 489, 597, 600, 603, 821, 827, 851, 852, 853, 854, 855, 932, 942, 966, 977, 978], "variabl": [4, 9, 11, 12, 15, 33, 64, 102, 105, 108, 111, 112, 125, 126, 128, 142, 143, 146, 147, 152, 153, 156, 168, 179, 183, 184, 197, 201, 227, 235, 238, 245, 278, 279, 320, 324, 326, 333, 335, 336, 338, 340, 342, 343, 346, 351, 363, 364, 365, 366, 368, 370, 371, 372, 401, 433, 434, 435, 438, 450, 452, 459, 466, 483, 485, 487, 492, 495, 504, 510, 511, 555, 557, 558, 559, 591, 601, 602, 605, 606, 612, 633, 634, 646, 660, 697, 748, 749, 752, 754, 755, 756, 757, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 774, 777, 781, 782, 812, 823, 826, 830, 838, 850, 921, 922, 924, 928, 931, 932, 933, 934, 935, 937, 939, 940, 942, 946, 948, 952, 953, 955, 958, 959, 961, 963, 973, 978, 981, 983, 986, 988], "rel": [4, 6, 8, 16, 25, 56, 90, 105, 140, 156, 159, 179, 197, 224, 259, 260, 274, 282, 285, 299, 311, 312, 333, 337, 340, 346, 351, 361, 363, 367, 370, 371, 373, 392, 395, 398, 400, 410, 472, 475, 482, 485, 488, 492, 508, 509, 510, 511, 515, 516, 517, 555, 600, 609, 610, 622, 623, 625, 641, 645, 679, 697, 747, 750, 751, 753, 761, 773, 776, 789, 790, 794, 806, 807, 818, 819, 829, 845, 849, 850, 851, 854, 856, 857, 858, 859, 860, 928, 929, 932, 934, 935, 936, 938, 955, 963], "so": [4, 9, 12, 15, 16, 38, 44, 51, 56, 60, 74, 107, 110, 117, 135, 140, 151, 153, 156, 159, 179, 180, 206, 235, 253, 259, 260, 263, 269, 270, 274, 279, 282, 291, 299, 307, 313, 319, 320, 324, 325, 326, 332, 333, 337, 338, 340, 342, 343, 344, 346, 347, 351, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 376, 377, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 447, 459, 460, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 558, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 646, 656, 659, 667, 676, 691, 706, 738, 745, 746, 747, 750, 751, 753, 754, 761, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 839, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 886, 898, 907, 921, 922, 924, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 938, 942, 944, 945, 946, 947, 953, 956, 965, 966, 967, 973, 975, 976, 979, 980, 981, 982, 983, 984, 986, 987, 989], "error": [4, 5, 7, 13, 16, 25, 69, 71, 72, 74, 89, 95, 97, 98, 99, 102, 105, 108, 112, 135, 146, 148, 151, 168, 175, 179, 181, 183, 185, 186, 193, 197, 209, 212, 227, 228, 231, 235, 236, 240, 249, 259, 260, 285, 298, 307, 311, 312, 335, 336, 338, 340, 341, 342, 343, 347, 349, 351, 357, 361, 362, 363, 364, 365, 367, 368, 370, 371, 372, 373, 395, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 447, 454, 466, 475, 482, 488, 493, 494, 496, 499, 504, 505, 506, 507, 509, 510, 511, 512, 513, 515, 516, 518, 526, 543, 546, 547, 549, 550, 551, 557, 580, 583, 594, 597, 598, 599, 602, 604, 606, 612, 614, 616, 620, 622, 624, 626, 628, 629, 631, 636, 639, 640, 643, 644, 647, 649, 652, 653, 660, 663, 671, 672, 673, 677, 690, 693, 694, 695, 696, 697, 698, 700, 701, 703, 706, 714, 728, 732, 738, 739, 747, 750, 751, 753, 761, 771, 772, 773, 775, 776, 777, 778, 779, 784, 785, 786, 788, 789, 790, 796, 797, 799, 800, 801, 804, 807, 810, 822, 823, 828, 829, 847, 849, 851, 852, 853, 858, 860, 867, 868, 869, 870, 873, 895, 916, 919, 921, 922, 923, 925, 926, 927, 929, 933, 936, 940, 942, 946, 947, 948, 954, 965, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "easili": [4, 9, 28, 130, 154, 182, 195, 211, 216, 219, 235, 237, 244, 258, 275, 338, 340, 351, 352, 364, 370, 371, 373, 400, 926, 928, 929, 942, 946, 947, 948, 959, 962, 967, 979], "interpret": [4, 25, 133, 142, 148, 149, 150, 152, 179, 180, 195, 197, 229, 235, 237, 238, 271, 274, 277, 283, 311, 313, 324, 336, 338, 339, 344, 346, 347, 351, 353, 361, 363, 364, 369, 371, 403, 415, 416, 418, 447, 492, 523, 562, 590, 594, 604, 623, 624, 642, 643, 646, 652, 679, 703, 708, 709, 733, 740, 741, 753, 762, 772, 773, 775, 778, 810, 822, 829, 900, 926, 928, 932, 933, 939, 942, 948, 952, 958, 966, 973, 974, 978, 981, 986, 988], "fraction": [4, 23, 25, 109, 111, 179, 187, 197, 307, 312, 361, 367, 370, 390, 391, 400, 401, 407, 408, 466, 478, 508, 509, 510, 511, 515, 516, 517, 541, 544, 553, 617, 618, 619, 622, 627, 628, 629, 654, 672, 673, 674, 684, 742, 744, 749, 753, 773, 774, 788, 816, 851, 852, 853, 857, 858, 859, 860, 898, 928, 932, 935, 939, 940, 942, 947, 948, 953, 974, 975, 976, 987], "maximum": [4, 8, 11, 25, 30, 33, 52, 71, 72, 73, 74, 75, 87, 104, 107, 109, 136, 142, 148, 157, 167, 245, 255, 259, 260, 266, 273, 294, 312, 315, 317, 318, 324, 343, 344, 350, 351, 360, 361, 363, 365, 366, 368, 370, 371, 373, 374, 375, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 405, 408, 410, 412, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 434, 435, 449, 460, 462, 463, 464, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 534, 535, 548, 561, 578, 582, 583, 586, 588, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 625, 627, 628, 629, 630, 633, 634, 636, 637, 638, 639, 640, 641, 643, 644, 645, 667, 694, 731, 745, 747, 750, 751, 753, 761, 768, 773, 798, 805, 806, 807, 813, 814, 818, 819, 821, 824, 825, 826, 828, 837, 838, 843, 844, 845, 846, 849, 850, 854, 857, 858, 859, 860, 861, 863, 866, 873, 921, 927, 928, 929, 931, 932, 934, 935, 936, 938, 942, 946, 947, 948, 966, 980, 981, 983, 984, 987, 988], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 22, 23, 25, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 53, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 107, 108, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 126, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 148, 150, 151, 152, 153, 154, 156, 157, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 202, 206, 207, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 311, 312, 315, 316, 317, 318, 319, 324, 326, 327, 330, 333, 335, 338, 341, 343, 344, 347, 349, 351, 357, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 371, 372, 373, 374, 379, 384, 385, 386, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 452, 460, 461, 475, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 528, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 561, 562, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 645, 648, 649, 651, 652, 653, 662, 673, 685, 700, 738, 745, 746, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 837, 838, 839, 840, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 878, 916, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 939, 940, 942, 943, 944, 945, 946, 947, 948, 952, 953, 954, 956, 962, 963, 964, 965, 966, 967, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "method": [4, 8, 16, 18, 19, 22, 23, 24, 25, 32, 33, 37, 45, 46, 49, 50, 51, 52, 53, 56, 60, 63, 72, 73, 76, 85, 88, 90, 94, 95, 96, 104, 105, 106, 112, 118, 128, 133, 146, 156, 166, 168, 180, 187, 196, 198, 200, 206, 212, 219, 220, 237, 242, 244, 253, 259, 260, 262, 273, 277, 281, 283, 284, 311, 312, 313, 319, 320, 324, 325, 326, 327, 330, 335, 336, 338, 339, 340, 344, 345, 347, 349, 350, 353, 357, 359, 360, 361, 364, 365, 366, 367, 368, 369, 371, 372, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 410, 413, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 455, 463, 465, 473, 476, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 534, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 661, 662, 681, 682, 685, 686, 691, 692, 713, 718, 719, 724, 728, 733, 738, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 837, 838, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 872, 886, 893, 898, 901, 916, 917, 920, 921, 922, 926, 927, 928, 929, 932, 933, 934, 935, 936, 937, 940, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 958, 962, 964, 965, 967, 968, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "minim": [4, 12, 52, 61, 71, 72, 111, 135, 143, 158, 175, 177, 179, 181, 187, 197, 199, 209, 210, 221, 226, 236, 244, 245, 273, 281, 284, 296, 307, 315, 327, 337, 338, 341, 346, 349, 351, 361, 363, 365, 368, 370, 392, 393, 397, 401, 414, 489, 491, 498, 508, 509, 510, 511, 515, 516, 560, 561, 562, 592, 597, 600, 608, 609, 618, 622, 623, 625, 629, 630, 638, 643, 645, 646, 698, 730, 796, 798, 807, 825, 837, 843, 857, 858, 859, 860, 923, 928, 929, 932, 935, 936, 942, 944, 945, 946, 947, 952, 954, 965, 966, 969, 977, 982, 983], "squar": [4, 5, 56, 65, 72, 73, 74, 76, 86, 96, 102, 112, 114, 135, 140, 148, 151, 157, 158, 160, 168, 175, 179, 181, 183, 184, 189, 196, 197, 209, 210, 212, 224, 244, 245, 249, 277, 283, 284, 286, 296, 311, 330, 335, 338, 344, 347, 351, 363, 365, 366, 368, 369, 370, 374, 375, 384, 392, 394, 395, 396, 398, 400, 401, 408, 410, 411, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 452, 482, 488, 490, 492, 494, 498, 500, 503, 505, 507, 509, 510, 511, 513, 516, 519, 521, 541, 542, 543, 546, 547, 549, 550, 551, 555, 556, 557, 560, 562, 566, 573, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 633, 634, 637, 638, 639, 641, 643, 645, 647, 650, 660, 672, 673, 674, 700, 701, 708, 709, 713, 719, 720, 735, 775, 782, 783, 791, 792, 795, 797, 799, 800, 807, 810, 829, 849, 850, 852, 854, 855, 856, 858, 860, 884, 905, 918, 923, 925, 926, 935, 936, 940, 946, 948, 954, 965, 966, 969, 973, 976, 978, 980, 981, 983, 984, 985, 986, 987, 989], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 22, 24, 25, 27, 30, 33, 34, 40, 41, 45, 50, 51, 52, 53, 56, 58, 65, 66, 68, 77, 78, 85, 86, 87, 93, 95, 97, 98, 99, 104, 105, 107, 109, 111, 115, 118, 119, 120, 121, 123, 124, 131, 132, 133, 134, 135, 140, 142, 145, 146, 150, 151, 157, 160, 163, 167, 168, 174, 179, 181, 183, 184, 186, 187, 196, 197, 205, 206, 207, 212, 219, 220, 221, 223, 224, 226, 228, 229, 232, 233, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 253, 254, 260, 273, 275, 284, 285, 302, 307, 312, 313, 316, 324, 325, 326, 327, 330, 336, 338, 341, 342, 345, 346, 347, 348, 354, 357, 358, 361, 363, 366, 368, 371, 372, 374, 375, 376, 377, 378, 381, 382, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 412, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 441, 442, 443, 446, 447, 449, 452, 453, 475, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 530, 531, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 635, 638, 639, 640, 641, 642, 643, 648, 649, 651, 652, 653, 658, 659, 662, 663, 664, 667, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 732, 733, 734, 735, 737, 738, 739, 742, 745, 746, 747, 750, 751, 752, 753, 758, 759, 761, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 834, 835, 837, 838, 840, 841, 842, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 862, 868, 869, 870, 872, 874, 875, 878, 880, 881, 882, 916, 920, 927, 929, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 948, 949, 950, 953, 954, 956, 958, 959, 961, 963, 965, 966, 967, 968, 969, 970, 973, 975, 976, 977, 978, 979, 980, 984, 985, 986, 987, 988, 989], "condit": [4, 12, 23, 25, 75, 106, 111, 148, 149, 151, 168, 181, 184, 197, 238, 284, 319, 344, 349, 353, 360, 361, 363, 365, 368, 370, 372, 402, 415, 423, 424, 429, 447, 464, 474, 475, 487, 490, 491, 492, 494, 496, 498, 500, 501, 513, 578, 583, 584, 594, 601, 602, 603, 605, 606, 607, 621, 623, 624, 625, 626, 633, 634, 638, 648, 663, 668, 669, 686, 687, 743, 784, 785, 786, 787, 788, 807, 810, 813, 822, 823, 826, 830, 886, 926, 928, 929, 930, 932, 934, 935, 937, 942, 948, 952, 965, 969, 974, 976, 977, 978, 980, 981, 983, 985, 987, 988, 989], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25, 30, 32, 33, 40, 42, 44, 46, 48, 49, 50, 51, 52, 53, 55, 56, 61, 65, 66, 67, 69, 71, 72, 73, 74, 80, 85, 86, 87, 88, 89, 90, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 121, 124, 125, 126, 129, 133, 135, 136, 137, 140, 141, 142, 144, 145, 146, 148, 150, 151, 152, 153, 156, 157, 158, 159, 162, 163, 167, 174, 179, 180, 181, 184, 186, 187, 193, 195, 196, 197, 199, 200, 201, 202, 204, 206, 207, 209, 210, 211, 212, 213, 219, 221, 222, 226, 227, 229, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 248, 250, 252, 253, 256, 259, 260, 261, 264, 266, 273, 278, 279, 282, 283, 284, 286, 289, 293, 295, 296, 298, 299, 301, 302, 311, 312, 313, 315, 318, 319, 320, 324, 325, 326, 327, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 383, 385, 386, 389, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 452, 454, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 526, 527, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 561, 562, 563, 570, 573, 574, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 655, 656, 657, 660, 662, 663, 669, 671, 672, 677, 679, 680, 684, 685, 687, 692, 693, 695, 696, 698, 700, 701, 703, 706, 708, 709, 713, 714, 716, 717, 718, 719, 720, 723, 725, 726, 727, 728, 731, 732, 733, 734, 737, 738, 739, 740, 741, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 862, 864, 866, 867, 869, 870, 872, 873, 876, 880, 881, 882, 884, 885, 886, 888, 890, 893, 895, 896, 897, 900, 902, 903, 906, 907, 913, 916, 918, 919, 920, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 956, 959, 961, 962, 966, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "median": [4, 33, 65, 69, 73, 74, 111, 146, 147, 151, 181, 185, 196, 208, 273, 282, 284, 285, 333, 365, 370, 372, 392, 405, 409, 412, 425, 503, 505, 509, 516, 548, 578, 581, 586, 621, 622, 630, 672, 703, 796, 827, 839, 858, 860, 922, 942, 948, 976, 977], "measur": [4, 7, 8, 10, 11, 18, 23, 33, 34, 45, 53, 55, 56, 86, 102, 103, 111, 114, 121, 135, 140, 148, 150, 151, 152, 156, 168, 173, 178, 179, 185, 197, 228, 233, 235, 241, 242, 248, 278, 311, 312, 324, 333, 335, 340, 344, 351, 360, 362, 365, 367, 368, 369, 370, 371, 400, 403, 413, 449, 466, 489, 491, 498, 502, 508, 509, 510, 511, 514, 515, 516, 555, 558, 559, 562, 578, 609, 641, 643, 649, 650, 653, 655, 656, 658, 660, 663, 664, 667, 668, 671, 675, 676, 677, 679, 681, 686, 687, 689, 690, 693, 697, 705, 706, 707, 732, 733, 734, 736, 737, 739, 740, 743, 770, 772, 775, 795, 826, 838, 857, 858, 859, 860, 922, 928, 930, 935, 937, 938, 940, 946, 948, 962, 965, 973, 976, 978, 979, 981, 983], "test": [4, 6, 8, 10, 11, 15, 22, 23, 24, 25, 28, 29, 30, 64, 65, 77, 90, 98, 99, 102, 104, 105, 106, 109, 110, 111, 112, 113, 123, 126, 127, 129, 132, 135, 136, 148, 150, 151, 152, 153, 154, 156, 163, 168, 174, 175, 179, 180, 181, 186, 187, 194, 195, 197, 203, 207, 212, 214, 223, 228, 229, 230, 233, 234, 235, 236, 237, 239, 240, 242, 243, 245, 246, 247, 252, 261, 262, 268, 270, 275, 278, 279, 292, 299, 307, 313, 320, 324, 325, 332, 333, 335, 341, 342, 343, 344, 349, 350, 351, 353, 354, 356, 358, 361, 364, 365, 368, 370, 371, 372, 373, 380, 382, 384, 387, 388, 389, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 439, 440, 444, 448, 449, 453, 455, 475, 482, 488, 490, 494, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 520, 521, 543, 545, 546, 547, 549, 550, 551, 553, 555, 556, 557, 559, 560, 561, 562, 578, 579, 581, 586, 587, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 650, 663, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 796, 799, 800, 806, 807, 809, 834, 835, 837, 838, 839, 840, 844, 845, 847, 849, 850, 851, 852, 854, 855, 857, 858, 859, 860, 878, 880, 881, 927, 928, 931, 932, 935, 936, 940, 942, 946, 947, 948, 952, 953, 955, 956, 959, 962, 963, 969, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989], "discuss": [4, 49, 53, 151, 168, 199, 204, 238, 311, 320, 326, 333, 335, 338, 343, 344, 346, 349, 351, 352, 363, 365, 369, 370, 373, 449, 633, 634, 791, 792, 797, 799, 800, 922, 926, 928, 929, 932, 935, 942, 949, 953, 976], "choos": [4, 11, 12, 40, 41, 42, 46, 49, 55, 57, 61, 71, 91, 92, 107, 118, 123, 124, 133, 151, 154, 172, 213, 215, 230, 240, 247, 315, 320, 324, 325, 326, 327, 340, 343, 346, 351, 363, 365, 367, 370, 371, 373, 374, 395, 396, 398, 400, 410, 474, 483, 489, 510, 511, 533, 553, 609, 610, 623, 625, 630, 638, 639, 640, 644, 676, 706, 747, 750, 751, 761, 816, 857, 858, 859, 860, 922, 923, 927, 928, 929, 930, 931, 935, 942, 945, 946, 947, 959, 961, 965, 966, 975, 976, 980, 982, 984], "focu": [4, 9, 25, 85, 135, 227, 263, 324, 343, 361, 370, 504, 505, 510, 512, 513, 629, 929, 935, 942, 952, 953], "intuit": [4, 28, 40, 48, 57, 90, 102, 108, 128, 135, 151, 152, 180, 181, 201, 206, 236, 258, 275, 278, 296, 299, 312, 338, 351, 361, 363, 365, 367, 369, 732, 733, 734, 737, 820, 924, 928, 929, 932, 933, 939, 942, 943, 947, 956, 965, 967, 973], "than": [4, 5, 7, 11, 12, 13, 18, 25, 27, 28, 36, 40, 43, 49, 66, 69, 73, 75, 78, 83, 85, 88, 90, 93, 98, 99, 101, 102, 104, 105, 107, 108, 111, 133, 135, 141, 146, 151, 152, 153, 156, 158, 165, 168, 179, 181, 185, 195, 196, 197, 203, 206, 212, 213, 222, 232, 233, 235, 236, 237, 238, 241, 244, 252, 253, 259, 260, 271, 273, 277, 278, 279, 283, 285, 289, 311, 312, 313, 320, 324, 325, 326, 332, 333, 334, 337, 338, 340, 343, 344, 346, 351, 352, 357, 360, 361, 362, 363, 365, 366, 367, 368, 370, 371, 372, 373, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 403, 405, 408, 411, 414, 415, 418, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 444, 445, 447, 460, 465, 466, 474, 482, 485, 486, 487, 488, 489, 491, 492, 493, 495, 498, 499, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 524, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 561, 562, 578, 579, 581, 585, 591, 593, 594, 595, 596, 597, 598, 603, 604, 606, 609, 610, 611, 612, 613, 614, 617, 618, 619, 622, 623, 625, 627, 628, 629, 630, 633, 638, 643, 645, 647, 655, 656, 663, 671, 672, 673, 674, 685, 686, 689, 714, 729, 730, 731, 733, 735, 743, 745, 746, 747, 750, 751, 757, 761, 766, 768, 770, 771, 772, 773, 774, 777, 779, 780, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 795, 797, 798, 799, 800, 801, 803, 806, 807, 812, 822, 823, 824, 826, 827, 829, 832, 838, 839, 843, 846, 849, 850, 851, 854, 855, 857, 858, 859, 860, 861, 875, 886, 888, 889, 895, 901, 903, 906, 921, 922, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 942, 946, 947, 948, 952, 953, 958, 962, 965, 966, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "root": [4, 15, 73, 160, 319, 335, 338, 346, 363, 394, 452, 492, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 590, 701, 857, 858, 859, 860, 861, 863, 938, 948, 975, 981, 982, 983, 984, 987, 988], "metric": [4, 6, 7, 11, 18, 19, 20, 22, 23, 24, 27, 29, 32, 34, 40, 44, 45, 48, 53, 55, 59, 64, 69, 75, 98, 99, 104, 110, 112, 113, 118, 130, 136, 146, 148, 150, 151, 153, 163, 168, 174, 175, 179, 181, 183, 185, 197, 202, 207, 210, 211, 215, 218, 228, 229, 231, 232, 233, 235, 236, 238, 242, 244, 245, 252, 253, 255, 263, 266, 271, 273, 278, 281, 282, 284, 285, 286, 288, 289, 291, 292, 311, 312, 320, 324, 327, 330, 333, 338, 340, 349, 350, 351, 353, 358, 361, 368, 369, 370, 373, 374, 380, 389, 393, 396, 397, 401, 408, 420, 471, 486, 500, 501, 502, 504, 506, 508, 509, 510, 512, 513, 515, 516, 518, 520, 529, 553, 561, 571, 579, 585, 589, 590, 591, 592, 593, 594, 609, 610, 614, 617, 619, 625, 626, 627, 639, 641, 643, 645, 647, 747, 750, 751, 753, 761, 770, 771, 772, 774, 777, 778, 779, 780, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 815, 821, 844, 845, 849, 851, 854, 857, 859, 922, 924, 927, 933, 938, 940, 952, 953, 962, 963, 967, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980], "studi": [4, 55, 111, 179, 197, 238, 241, 242, 311, 333, 335, 367, 372, 647, 659, 708, 709, 774, 930, 932, 946, 958], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 22, 23, 24, 25, 27, 28, 30, 31, 35, 36, 38, 39, 40, 41, 48, 50, 51, 52, 55, 56, 57, 60, 61, 65, 66, 67, 68, 69, 74, 77, 78, 81, 82, 83, 87, 89, 90, 91, 92, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 150, 151, 152, 153, 154, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 194, 195, 197, 199, 200, 201, 204, 207, 209, 210, 211, 212, 213, 215, 216, 218, 219, 221, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 315, 316, 317, 318, 319, 320, 330, 331, 332, 333, 336, 338, 340, 343, 345, 347, 350, 351, 357, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 376, 380, 381, 382, 384, 385, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 438, 449, 451, 453, 456, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 477, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 650, 651, 652, 653, 657, 662, 676, 685, 691, 692, 706, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 738, 739, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 869, 874, 875, 894, 895, 896, 903, 906, 919, 921, 922, 923, 924, 926, 927, 928, 930, 932, 933, 934, 935, 936, 937, 939, 942, 946, 947, 948, 953, 958, 962, 963, 965, 969, 970, 973, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "hist": [4, 23, 25, 49, 69, 101, 179, 181, 210, 241, 258, 273, 277, 279, 285], "bin": [4, 22, 23, 25, 49, 69, 101, 179, 210, 241, 258, 273, 274, 275, 276, 277, 279, 336, 346, 354, 361, 369, 370, 390, 391, 399, 412, 512, 513, 812, 814, 828, 888, 966, 981, 982, 983, 987], "30": [4, 8, 10, 14, 35, 36, 50, 55, 65, 67, 71, 91, 93, 107, 111, 117, 123, 135, 136, 139, 141, 152, 156, 158, 173, 177, 179, 197, 199, 200, 204, 211, 214, 225, 235, 240, 249, 253, 262, 263, 277, 278, 288, 289, 293, 297, 300, 302, 305, 324, 333, 335, 343, 344, 367, 371, 374, 396, 401, 408, 451, 486, 489, 490, 492, 494, 521, 543, 546, 547, 549, 599, 643, 685, 733, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 830, 845, 858, 921, 926, 932, 933, 935, 940, 963, 973, 974, 980, 981, 982], "rent": 4, "fleet": 4, "input": [4, 6, 10, 28, 30, 67, 85, 89, 98, 107, 111, 112, 141, 142, 143, 151, 156, 158, 179, 182, 183, 187, 194, 197, 209, 210, 212, 219, 230, 257, 258, 270, 274, 275, 276, 277, 281, 284, 286, 299, 305, 308, 313, 332, 335, 338, 341, 343, 347, 348, 349, 350, 351, 360, 361, 364, 367, 368, 369, 370, 371, 372, 373, 375, 381, 383, 384, 385, 386, 389, 390, 391, 392, 393, 394, 397, 399, 400, 401, 405, 408, 409, 412, 415, 416, 418, 419, 420, 423, 433, 434, 435, 440, 454, 460, 467, 468, 469, 471, 475, 479, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 562, 571, 573, 578, 579, 580, 581, 582, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 636, 637, 638, 639, 640, 641, 643, 644, 647, 648, 649, 650, 651, 652, 653, 672, 673, 674, 678, 695, 696, 698, 700, 701, 703, 704, 711, 717, 718, 721, 722, 724, 728, 729, 730, 731, 735, 745, 746, 747, 750, 751, 753, 761, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 795, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 866, 867, 868, 869, 870, 871, 875, 880, 885, 896, 905, 907, 913, 918, 919, 922, 924, 926, 928, 929, 930, 931, 932, 934, 935, 936, 937, 939, 940, 944, 945, 946, 947, 948, 952, 953, 956, 958, 962, 963, 969, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "annot": [4, 9, 24, 120, 156, 200, 239, 242, 311, 338, 339, 340, 363, 667, 863, 932, 948, 982], "log": [4, 19, 23, 24, 25, 71, 85, 111, 118, 129, 136, 137, 139, 140, 141, 144, 164, 167, 168, 172, 179, 183, 184, 189, 197, 210, 212, 225, 263, 278, 311, 333, 335, 336, 338, 342, 346, 347, 351, 360, 361, 363, 364, 365, 368, 370, 371, 373, 399, 402, 411, 416, 421, 422, 423, 424, 425, 426, 427, 483, 487, 492, 500, 501, 502, 504, 506, 508, 510, 513, 515, 541, 542, 544, 545, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 593, 596, 599, 609, 610, 620, 622, 627, 631, 691, 701, 705, 745, 746, 747, 750, 751, 761, 784, 785, 786, 787, 788, 789, 790, 794, 805, 806, 813, 814, 843, 846, 851, 854, 856, 857, 859, 884, 921, 924, 926, 928, 929, 934, 935, 937, 940, 942, 946, 948, 952, 953, 965, 975, 976, 977, 982, 983, 984, 987], "describ": [4, 51, 118, 151, 197, 211, 235, 244, 320, 324, 325, 331, 333, 335, 337, 338, 340, 343, 346, 351, 352, 360, 363, 365, 366, 367, 368, 370, 371, 413, 420, 424, 425, 442, 444, 446, 447, 448, 451, 452, 453, 454, 455, 456, 461, 467, 468, 469, 479, 558, 559, 596, 610, 665, 745, 746, 784, 786, 824, 886, 921, 924, 927, 928, 931, 932, 934, 938, 946, 947, 948, 955, 958, 964, 965, 981, 983], "weather": [4, 140, 152, 373, 928, 932], "includ": [4, 29, 73, 108, 110, 150, 151, 153, 179, 197, 236, 253, 269, 273, 284, 285, 299, 304, 311, 313, 320, 324, 325, 332, 334, 336, 338, 339, 340, 342, 343, 344, 346, 347, 351, 352, 354, 360, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 396, 401, 407, 417, 420, 421, 422, 423, 424, 425, 426, 427, 440, 441, 442, 447, 451, 452, 453, 455, 456, 461, 485, 492, 508, 515, 525, 583, 589, 597, 598, 603, 611, 612, 613, 616, 632, 639, 640, 648, 664, 679, 680, 685, 687, 688, 721, 733, 734, 737, 743, 747, 749, 750, 751, 760, 761, 764, 767, 772, 775, 797, 799, 800, 801, 822, 823, 824, 828, 846, 857, 859, 861, 863, 869, 870, 873, 875, 878, 921, 928, 931, 932, 933, 935, 936, 942, 946, 947, 948, 952, 953, 955, 956, 965, 967, 973, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "both": [4, 5, 7, 9, 10, 14, 15, 23, 24, 38, 50, 59, 65, 71, 73, 77, 78, 90, 93, 98, 102, 105, 108, 117, 118, 121, 128, 129, 133, 135, 142, 144, 150, 151, 152, 153, 158, 165, 167, 168, 179, 180, 181, 184, 185, 187, 197, 203, 212, 213, 221, 222, 223, 224, 225, 226, 235, 236, 237, 238, 242, 244, 246, 250, 253, 265, 273, 277, 278, 281, 283, 290, 291, 296, 301, 307, 311, 312, 313, 319, 320, 324, 325, 326, 331, 332, 333, 334, 336, 338, 340, 344, 345, 347, 349, 350, 351, 352, 354, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 376, 389, 398, 403, 410, 413, 419, 426, 433, 434, 435, 436, 439, 440, 447, 448, 451, 453, 456, 458, 459, 460, 485, 489, 491, 498, 502, 506, 507, 508, 514, 515, 516, 517, 518, 528, 539, 540, 542, 548, 558, 559, 578, 583, 584, 594, 608, 609, 610, 623, 625, 627, 629, 638, 650, 655, 663, 667, 681, 686, 707, 711, 717, 724, 728, 733, 738, 739, 743, 750, 751, 753, 778, 806, 807, 821, 823, 825, 837, 842, 847, 849, 850, 857, 859, 873, 887, 895, 907, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 942, 945, 946, 947, 948, 952, 953, 955, 956, 962, 965, 966, 967, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "numer": [4, 18, 61, 65, 69, 106, 108, 118, 140, 143, 152, 153, 168, 179, 197, 217, 219, 263, 279, 284, 313, 332, 333, 335, 341, 343, 344, 349, 350, 351, 363, 365, 370, 371, 372, 373, 375, 376, 392, 395, 398, 410, 422, 423, 426, 429, 440, 441, 442, 447, 451, 452, 453, 455, 456, 461, 482, 484, 486, 491, 498, 518, 532, 541, 562, 568, 571, 578, 581, 583, 584, 597, 603, 605, 623, 638, 641, 645, 665, 738, 742, 747, 750, 751, 753, 761, 771, 772, 773, 776, 784, 785, 786, 787, 788, 806, 807, 812, 817, 822, 823, 830, 861, 862, 863, 869, 870, 885, 886, 921, 922, 928, 929, 933, 940, 942, 943, 948, 955, 956, 958, 967, 973, 974, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "categor": [4, 65, 97, 104, 118, 148, 151, 152, 153, 179, 197, 217, 219, 284, 286, 326, 330, 332, 333, 340, 343, 351, 364, 371, 417, 418, 440, 441, 447, 456, 512, 513, 532, 533, 558, 559, 583, 584, 599, 609, 610, 620, 631, 660, 772, 784, 785, 786, 787, 788, 810, 812, 816, 817, 820, 822, 823, 830, 844, 845, 922, 928, 939, 940, 948, 952, 953, 954, 955, 956, 967, 969, 973, 974, 977, 978, 981, 983, 985, 988, 989], "inform": [4, 5, 8, 11, 12, 13, 23, 25, 30, 33, 34, 45, 49, 53, 61, 62, 64, 65, 78, 80, 81, 82, 92, 105, 106, 127, 129, 130, 132, 135, 140, 148, 151, 152, 154, 156, 157, 158, 159, 180, 194, 196, 197, 216, 223, 224, 226, 230, 232, 235, 236, 237, 240, 242, 244, 259, 260, 263, 284, 302, 307, 311, 312, 313, 316, 319, 320, 324, 327, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 343, 344, 346, 349, 350, 351, 352, 357, 360, 367, 368, 370, 371, 372, 373, 403, 413, 443, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 461, 466, 475, 479, 485, 486, 489, 490, 492, 494, 508, 512, 513, 515, 538, 540, 541, 543, 544, 545, 546, 547, 550, 551, 557, 558, 559, 560, 590, 591, 607, 609, 638, 642, 646, 648, 652, 655, 656, 666, 676, 680, 693, 705, 706, 707, 736, 738, 743, 745, 746, 747, 748, 749, 750, 751, 752, 754, 756, 761, 765, 772, 784, 788, 789, 790, 794, 798, 810, 821, 826, 829, 834, 835, 837, 838, 839, 840, 845, 848, 851, 854, 857, 859, 861, 863, 922, 924, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 942, 943, 946, 948, 953, 956, 964, 965, 966, 967, 973, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "alreadi": [4, 6, 10, 15, 53, 90, 118, 133, 151, 207, 213, 218, 236, 242, 253, 284, 338, 339, 343, 349, 351, 361, 365, 367, 369, 370, 375, 389, 450, 474, 484, 518, 519, 585, 597, 600, 615, 616, 617, 618, 619, 625, 627, 628, 629, 636, 637, 650, 718, 784, 804, 812, 818, 819, 821, 826, 832, 834, 835, 836, 838, 839, 840, 846, 849, 850, 872, 921, 938, 942, 943, 953, 958, 963, 967, 970, 974, 978, 981, 985, 986, 987, 988], "expand": [4, 15, 45, 60, 208, 279, 282, 320, 330, 370, 396, 401, 450, 508, 509, 510, 511, 515, 516, 517, 857, 858, 859, 860, 932, 974, 981, 982], "complementari": [4, 371], "column": [4, 19, 20, 55, 63, 66, 69, 81, 105, 107, 108, 111, 115, 118, 140, 146, 148, 150, 151, 152, 153, 168, 179, 180, 187, 197, 214, 216, 226, 235, 236, 246, 247, 270, 278, 283, 284, 285, 286, 311, 312, 313, 324, 332, 333, 335, 338, 340, 344, 347, 349, 350, 351, 360, 363, 364, 366, 368, 370, 371, 372, 375, 378, 402, 404, 415, 417, 418, 422, 423, 429, 438, 439, 440, 441, 442, 443, 445, 447, 451, 452, 453, 455, 456, 459, 460, 461, 462, 464, 466, 477, 482, 485, 488, 493, 495, 499, 506, 508, 509, 515, 516, 517, 518, 532, 533, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 561, 578, 581, 583, 584, 585, 597, 599, 603, 609, 611, 613, 615, 616, 620, 631, 636, 637, 648, 664, 669, 670, 679, 680, 688, 704, 713, 718, 719, 720, 723, 733, 734, 737, 738, 747, 750, 751, 761, 770, 775, 780, 783, 784, 785, 786, 787, 788, 789, 790, 809, 813, 814, 815, 816, 822, 823, 824, 828, 829, 830, 831, 833, 849, 851, 854, 857, 859, 865, 869, 870, 875, 886, 895, 908, 909, 911, 919, 921, 922, 928, 930, 932, 933, 940, 942, 947, 953, 973, 975, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "x": [4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 22, 23, 24, 25, 27, 28, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 199, 200, 201, 204, 206, 207, 209, 210, 211, 212, 213, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 324, 331, 332, 333, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 357, 361, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 381, 382, 383, 384, 385, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 438, 444, 445, 446, 449, 451, 452, 453, 456, 457, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 657, 661, 662, 675, 685, 692, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 738, 740, 741, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 873, 885, 886, 888, 893, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 921, 922, 923, 924, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 942, 944, 945, 946, 947, 948, 953, 958, 962, 963, 965, 966, 967, 970, 973, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989], "drop": [4, 5, 65, 69, 78, 140, 150, 151, 152, 154, 179, 197, 219, 245, 279, 283, 286, 312, 342, 346, 364, 368, 370, 415, 418, 518, 519, 520, 521, 646, 651, 653, 732, 739, 808, 822, 828, 922, 928, 932, 940, 942, 952, 973, 974, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989], "axi": [4, 5, 7, 11, 12, 13, 14, 16, 18, 23, 24, 31, 33, 35, 36, 43, 44, 46, 48, 49, 50, 56, 65, 66, 69, 75, 78, 82, 83, 85, 86, 87, 88, 89, 95, 99, 101, 102, 105, 107, 114, 117, 121, 126, 129, 139, 140, 144, 146, 150, 151, 160, 164, 166, 168, 171, 172, 173, 179, 183, 184, 188, 191, 193, 194, 196, 197, 200, 201, 204, 206, 210, 211, 214, 215, 221, 223, 225, 226, 231, 232, 236, 237, 242, 244, 245, 250, 252, 253, 258, 259, 260, 263, 264, 265, 271, 273, 277, 289, 291, 293, 295, 298, 299, 302, 303, 304, 305, 306, 307, 309, 311, 312, 316, 317, 318, 319, 340, 347, 351, 361, 363, 371, 375, 390, 397, 415, 418, 482, 484, 487, 488, 490, 492, 494, 501, 536, 563, 582, 583, 636, 637, 652, 713, 729, 730, 731, 732, 753, 777, 818, 819, 826, 827, 829, 832, 834, 835, 836, 838, 839, 840, 863, 865, 869, 870, 888, 907, 913, 922, 932, 939, 942, 947, 964, 966, 981, 983, 985], "onli": [4, 7, 11, 13, 14, 22, 23, 24, 25, 27, 30, 33, 35, 36, 41, 45, 49, 53, 61, 64, 65, 66, 68, 69, 74, 81, 88, 89, 96, 99, 101, 105, 106, 107, 108, 110, 117, 118, 128, 129, 130, 133, 135, 137, 140, 142, 144, 147, 148, 150, 151, 152, 156, 157, 162, 168, 175, 179, 180, 182, 185, 187, 188, 197, 199, 200, 206, 208, 210, 212, 216, 219, 221, 222, 223, 226, 227, 231, 233, 235, 237, 238, 241, 242, 243, 244, 246, 247, 253, 256, 259, 261, 264, 266, 270, 273, 274, 278, 279, 283, 284, 288, 289, 291, 295, 296, 299, 304, 307, 308, 311, 312, 313, 315, 316, 319, 320, 324, 325, 326, 331, 332, 333, 335, 336, 338, 340, 342, 343, 344, 345, 346, 347, 349, 351, 352, 354, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 440, 441, 442, 443, 445, 447, 448, 451, 452, 453, 454, 455, 456, 459, 460, 461, 463, 467, 470, 474, 475, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 650, 658, 660, 664, 676, 679, 680, 684, 686, 687, 688, 691, 692, 693, 706, 708, 710, 724, 728, 729, 730, 731, 733, 734, 737, 738, 740, 741, 742, 745, 746, 747, 749, 750, 751, 753, 761, 765, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 867, 869, 870, 873, 875, 878, 886, 888, 891, 893, 898, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 942, 943, 944, 946, 947, 948, 952, 953, 956, 965, 966, 967, 970, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 985, 987, 988, 989], "present": [4, 5, 39, 45, 83, 85, 93, 104, 111, 114, 132, 141, 144, 158, 161, 168, 179, 206, 209, 226, 233, 238, 241, 244, 245, 253, 273, 276, 278, 312, 335, 336, 340, 343, 349, 351, 363, 365, 368, 370, 371, 381, 382, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 440, 441, 442, 443, 447, 451, 452, 453, 454, 455, 456, 461, 482, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 500, 501, 514, 517, 520, 521, 532, 533, 534, 539, 540, 542, 568, 578, 579, 580, 581, 601, 605, 628, 639, 640, 641, 642, 663, 679, 680, 688, 692, 719, 733, 734, 737, 745, 746, 747, 750, 751, 759, 761, 773, 791, 792, 793, 795, 797, 799, 800, 801, 808, 813, 821, 822, 823, 824, 825, 827, 841, 842, 853, 861, 863, 864, 886, 916, 931, 932, 933, 934, 939, 942, 951, 953, 976, 981, 983, 984, 985, 987, 988], "date": [4, 64, 140, 152, 333, 335, 338, 342, 352, 364, 953], "datetim": [4, 16, 140, 152], "http": [4, 6, 7, 8, 12, 16, 22, 65, 112, 118, 147, 156, 179, 187, 195, 197, 204, 207, 215, 252, 253, 270, 332, 333, 335, 336, 338, 342, 343, 344, 346, 349, 351, 354, 363, 367, 372, 394, 400, 403, 413, 438, 443, 447, 451, 453, 459, 460, 461, 481, 482, 485, 487, 488, 492, 546, 587, 592, 595, 600, 609, 615, 617, 618, 619, 622, 627, 630, 633, 634, 636, 637, 642, 643, 646, 656, 672, 673, 674, 708, 709, 719, 784, 786, 787, 788, 791, 792, 797, 798, 799, 800, 805, 827, 842, 843, 844, 857, 858, 928, 930, 932, 935, 945, 948, 955, 956, 963, 978, 983], "pydata": [4, 951, 956], "org": [4, 12, 13, 14, 16, 22, 29, 33, 42, 44, 56, 61, 65, 156, 170, 171, 179, 187, 195, 197, 200, 207, 211, 236, 238, 252, 270, 288, 289, 290, 293, 311, 312, 313, 325, 331, 336, 338, 341, 344, 346, 352, 354, 367, 546, 587, 619, 622, 627, 646, 656, 719, 791, 792, 797, 798, 799, 800, 827, 843, 857, 858, 928, 932, 948, 950, 969, 981, 985], "stabl": [4, 151, 173, 177, 181, 253, 282, 312, 336, 338, 342, 344, 347, 351, 354, 367, 371, 375, 422, 423, 429, 484, 606, 623, 625, 638, 643, 674, 702, 885, 886, 928, 934, 935, 942, 953, 973, 974, 979, 984, 986], "user_guid": 4, "timeseri": 4, "html": [4, 8, 65, 156, 217, 333, 335, 338, 339, 342, 346, 364, 367, 371, 438, 459, 460, 609, 784, 788, 882, 930, 952, 953, 984, 985, 986, 987, 988], "compon": [4, 5, 16, 40, 53, 57, 64, 67, 76, 77, 84, 86, 87, 89, 90, 92, 93, 94, 96, 116, 140, 148, 150, 199, 210, 211, 213, 221, 222, 225, 226, 227, 234, 236, 254, 271, 278, 283, 324, 330, 333, 338, 340, 344, 347, 349, 362, 363, 364, 366, 371, 373, 375, 377, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 413, 414, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 453, 455, 466, 472, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 524, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 646, 679, 680, 688, 733, 734, 737, 745, 746, 747, 750, 751, 761, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 885, 886, 924, 929, 942, 944, 947, 952, 953, 954, 956, 961, 967, 968, 969, 973, 975, 979, 980, 981, 982, 984, 985, 986, 987, 988], "now": [4, 5, 7, 16, 49, 52, 65, 78, 90, 98, 100, 104, 105, 107, 108, 111, 112, 118, 121, 133, 135, 140, 141, 142, 147, 150, 151, 152, 153, 156, 158, 160, 165, 167, 168, 180, 181, 203, 211, 231, 235, 238, 246, 247, 278, 282, 283, 285, 286, 290, 299, 307, 311, 312, 313, 320, 324, 326, 333, 338, 339, 340, 344, 349, 350, 351, 360, 367, 368, 370, 371, 375, 444, 459, 460, 463, 487, 500, 530, 531, 533, 578, 581, 600, 604, 609, 614, 635, 676, 706, 745, 746, 750, 751, 781, 796, 907, 921, 922, 928, 932, 938, 941, 942, 947, 948, 951, 953, 958, 965, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989], "introspect": [4, 6, 65, 344, 510, 511, 539, 540, 542, 942, 963], "value_count": [4, 152], "heavy_rain": [4, 152], "cannot": [4, 36, 51, 69, 75, 85, 90, 106, 151, 152, 179, 197, 273, 299, 326, 337, 339, 344, 351, 352, 363, 364, 365, 367, 368, 370, 371, 373, 416, 472, 489, 490, 491, 494, 498, 561, 564, 565, 566, 568, 570, 571, 573, 574, 576, 602, 606, 633, 643, 662, 668, 728, 750, 751, 796, 797, 799, 800, 801, 809, 810, 819, 820, 831, 867, 869, 870, 921, 922, 926, 928, 929, 933, 938, 942, 947, 948, 953, 956, 962, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "train": [4, 5, 6, 7, 8, 10, 11, 15, 22, 24, 25, 27, 28, 29, 30, 51, 53, 59, 64, 65, 69, 77, 78, 81, 85, 88, 90, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 118, 119, 120, 123, 130, 135, 136, 137, 140, 141, 142, 143, 144, 148, 150, 151, 152, 153, 154, 156, 162, 163, 165, 167, 168, 170, 171, 172, 174, 175, 179, 180, 181, 183, 186, 187, 188, 191, 193, 194, 197, 206, 209, 211, 214, 215, 223, 225, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 256, 259, 260, 261, 262, 264, 266, 268, 269, 270, 273, 275, 277, 278, 281, 284, 287, 288, 289, 292, 293, 295, 298, 306, 307, 313, 314, 317, 318, 320, 324, 325, 326, 330, 335, 340, 343, 349, 350, 351, 357, 359, 361, 363, 364, 365, 366, 368, 370, 371, 372, 373, 375, 389, 392, 393, 395, 396, 398, 400, 402, 403, 404, 405, 410, 416, 420, 421, 423, 424, 425, 426, 427, 433, 434, 435, 436, 438, 439, 440, 444, 448, 449, 451, 455, 475, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 578, 579, 581, 582, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 638, 639, 640, 642, 643, 647, 654, 691, 738, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 809, 814, 815, 818, 819, 822, 823, 827, 828, 829, 830, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 906, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 942, 946, 947, 948, 952, 953, 954, 956, 959, 962, 963, 969, 970, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "learn": [4, 6, 7, 8, 9, 10, 15, 16, 23, 24, 25, 28, 29, 31, 32, 33, 45, 51, 62, 64, 69, 74, 75, 84, 90, 95, 98, 102, 103, 104, 106, 107, 113, 115, 116, 117, 118, 123, 124, 125, 126, 130, 133, 135, 138, 140, 146, 147, 149, 153, 155, 165, 167, 168, 193, 197, 203, 205, 206, 211, 213, 218, 219, 228, 232, 234, 235, 238, 240, 241, 243, 249, 253, 257, 258, 259, 260, 261, 266, 267, 270, 271, 273, 274, 278, 280, 287, 291, 293, 298, 305, 307, 311, 312, 313, 315, 316, 317, 318, 320, 325, 327, 330, 331, 332, 333, 335, 337, 341, 344, 345, 346, 347, 350, 351, 353, 357, 358, 359, 360, 361, 363, 364, 365, 367, 369, 371, 372, 373, 377, 378, 380, 381, 382, 384, 385, 389, 390, 391, 394, 395, 398, 400, 401, 408, 410, 415, 416, 418, 419, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 459, 460, 461, 463, 465, 466, 467, 468, 469, 471, 473, 475, 476, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 522, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 550, 553, 554, 561, 562, 565, 570, 573, 577, 579, 581, 585, 589, 591, 592, 594, 595, 596, 597, 599, 603, 608, 609, 619, 620, 627, 628, 629, 631, 639, 640, 641, 642, 643, 647, 651, 652, 659, 664, 668, 669, 672, 673, 674, 676, 685, 691, 693, 698, 706, 728, 729, 730, 735, 738, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 791, 793, 798, 805, 806, 807, 808, 810, 812, 814, 816, 819, 821, 822, 823, 824, 827, 828, 829, 833, 841, 842, 844, 845, 846, 847, 849, 850, 851, 854, 857, 858, 859, 860, 872, 880, 881, 898, 899, 921, 922, 924, 925, 926, 928, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 942, 943, 946, 947, 948, 949, 951, 955, 960, 962, 963, 969, 970, 971, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "simplifi": [4, 65, 167, 299, 337, 339, 343, 366, 466, 513, 808, 809, 932, 934, 942], "represent": [4, 16, 19, 49, 65, 85, 88, 116, 151, 152, 156, 199, 200, 201, 217, 263, 271, 312, 313, 320, 330, 332, 340, 351, 357, 363, 364, 368, 369, 370, 414, 482, 486, 488, 491, 493, 499, 517, 539, 541, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 581, 594, 597, 603, 609, 610, 611, 613, 617, 619, 627, 628, 629, 719, 745, 746, 753, 805, 818, 822, 823, 827, 829, 842, 849, 861, 863, 866, 882, 898, 924, 929, 931, 933, 935, 936, 937, 939, 942, 947, 953, 958, 959, 961, 965, 967, 973, 974, 977, 984, 985, 986, 987, 988, 989], "collaps": [4, 152, 273, 299, 349], "those": [4, 7, 12, 16, 18, 55, 65, 100, 111, 133, 150, 152, 153, 154, 179, 181, 197, 204, 210, 214, 215, 227, 229, 235, 238, 241, 269, 273, 278, 296, 299, 311, 312, 313, 324, 325, 332, 338, 340, 342, 343, 344, 345, 349, 351, 354, 360, 361, 363, 367, 368, 370, 371, 373, 399, 401, 412, 415, 419, 445, 446, 447, 454, 508, 509, 515, 516, 520, 521, 532, 643, 648, 663, 669, 686, 747, 750, 751, 759, 761, 768, 791, 792, 793, 795, 797, 798, 799, 800, 801, 851, 854, 857, 858, 859, 860, 921, 924, 928, 931, 932, 934, 935, 936, 939, 942, 948, 951, 952, 956, 958, 967, 973, 976, 979, 980, 981, 986, 987, 988], "rain": [4, 152, 928], "replac": [4, 23, 73, 89, 135, 142, 146, 152, 165, 180, 215, 238, 253, 275, 283, 301, 336, 338, 340, 342, 344, 347, 351, 357, 364, 367, 370, 371, 393, 397, 454, 466, 506, 507, 514, 533, 539, 540, 541, 542, 558, 559, 578, 581, 585, 590, 592, 678, 735, 759, 761, 808, 809, 812, 832, 845, 852, 901, 903, 906, 921, 922, 928, 932, 942, 947, 948, 952, 953, 973, 974, 975, 977, 978, 979, 980, 981, 983, 984, 985, 986, 988], "to_replac": [4, 152], "valu": [4, 5, 7, 9, 11, 12, 13, 15, 16, 18, 20, 24, 25, 29, 33, 36, 38, 40, 42, 49, 55, 56, 57, 61, 65, 67, 69, 71, 73, 75, 85, 88, 96, 101, 103, 104, 105, 106, 108, 111, 112, 114, 115, 117, 118, 128, 129, 132, 133, 135, 138, 141, 143, 150, 151, 152, 153, 154, 156, 158, 159, 161, 165, 167, 168, 169, 170, 172, 177, 179, 180, 181, 183, 185, 194, 197, 198, 202, 206, 207, 208, 209, 210, 211, 212, 215, 218, 219, 221, 227, 229, 231, 233, 235, 236, 238, 240, 241, 242, 244, 246, 247, 248, 250, 253, 266, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 283, 291, 299, 304, 307, 311, 312, 313, 315, 319, 320, 324, 325, 326, 327, 330, 331, 332, 333, 335, 339, 340, 341, 343, 344, 345, 347, 349, 350, 351, 353, 354, 360, 361, 362, 363, 364, 365, 366, 367, 371, 372, 373, 374, 375, 376, 377, 384, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 438, 441, 442, 444, 447, 448, 449, 452, 459, 460, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 648, 649, 650, 651, 652, 653, 655, 656, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 719, 721, 724, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 758, 759, 761, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 867, 868, 869, 870, 873, 874, 875, 876, 878, 886, 888, 893, 894, 895, 896, 900, 908, 909, 910, 921, 924, 925, 926, 927, 928, 929, 931, 933, 934, 935, 936, 937, 938, 939, 943, 945, 946, 947, 948, 956, 958, 963, 965, 966, 967, 968, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "inplac": [4, 152, 197, 247, 405, 433, 434, 435, 436, 804, 812, 815, 818, 819, 821, 825, 826, 827, 829, 832, 834, 835, 836, 837, 838, 839, 840, 905, 908, 909, 910, 914, 915, 982], "expect": [4, 5, 10, 22, 33, 40, 49, 78, 83, 90, 102, 104, 105, 108, 111, 130, 135, 141, 148, 149, 153, 165, 170, 179, 180, 181, 187, 197, 210, 216, 222, 223, 226, 227, 242, 253, 278, 311, 312, 320, 324, 325, 338, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 359, 361, 363, 364, 365, 367, 370, 371, 372, 384, 415, 416, 418, 419, 420, 433, 434, 435, 447, 474, 483, 487, 489, 492, 503, 505, 506, 507, 509, 511, 513, 514, 516, 518, 519, 521, 523, 536, 537, 539, 540, 542, 546, 548, 557, 562, 578, 583, 584, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 623, 624, 625, 626, 629, 630, 646, 655, 656, 667, 685, 738, 742, 782, 783, 784, 785, 786, 787, 788, 792, 795, 800, 807, 810, 815, 822, 823, 826, 829, 830, 839, 840, 847, 849, 850, 851, 852, 853, 854, 855, 858, 860, 895, 921, 928, 932, 934, 938, 942, 946, 947, 948, 955, 963, 966, 967, 969, 973, 974, 975, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989], "balanc": [4, 6, 49, 61, 148, 184, 228, 238, 273, 326, 349, 351, 361, 367, 368, 370, 453, 466, 485, 491, 492, 498, 508, 512, 515, 591, 609, 610, 617, 619, 625, 626, 627, 654, 659, 679, 693, 732, 737, 747, 748, 765, 809, 849, 851, 854, 857, 859, 874, 875, 921, 947, 948, 963, 973, 975, 978, 979, 982, 983, 987], "order": [4, 13, 22, 43, 59, 60, 66, 71, 80, 95, 106, 107, 108, 112, 126, 140, 150, 151, 154, 156, 168, 172, 175, 179, 180, 185, 193, 197, 201, 210, 223, 230, 233, 235, 242, 252, 271, 273, 278, 279, 283, 284, 307, 311, 313, 320, 324, 325, 333, 338, 340, 343, 344, 347, 351, 354, 357, 363, 364, 365, 367, 368, 369, 370, 371, 373, 375, 392, 395, 398, 400, 401, 406, 407, 408, 410, 415, 439, 440, 441, 446, 448, 466, 485, 486, 490, 491, 492, 494, 498, 502, 504, 506, 507, 508, 510, 514, 515, 518, 532, 539, 542, 544, 545, 548, 557, 558, 559, 561, 573, 578, 582, 591, 609, 610, 616, 627, 636, 637, 639, 640, 644, 648, 650, 651, 653, 655, 663, 664, 669, 676, 679, 680, 688, 690, 691, 704, 706, 728, 732, 733, 734, 737, 738, 739, 742, 747, 748, 750, 751, 752, 754, 758, 761, 765, 766, 770, 777, 778, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 799, 806, 809, 820, 822, 823, 824, 828, 829, 830, 833, 834, 835, 837, 838, 839, 840, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 869, 870, 875, 886, 896, 901, 922, 928, 929, 932, 933, 935, 936, 942, 945, 946, 947, 948, 953, 962, 964, 965, 967, 973, 975, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "sensit": [4, 40, 73, 74, 102, 111, 152, 181, 182, 206, 273, 299, 325, 326, 352, 365, 370, 403, 413, 643, 663, 664, 738, 927, 928, 929, 931, 932, 936, 938, 946, 947, 958, 966, 977], "splitter": [4, 351, 367, 389, 423, 518, 519, 545, 553, 598, 602, 604, 606, 612, 614, 616, 624, 626, 747, 749, 750, 751, 752, 753, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 776, 780, 783, 857, 858, 859, 860, 953, 979, 980, 981, 982], "evalu": [4, 5, 6, 10, 11, 22, 29, 32, 45, 65, 66, 88, 98, 105, 106, 108, 109, 111, 129, 138, 148, 154, 156, 159, 168, 181, 186, 197, 205, 228, 229, 232, 233, 235, 238, 240, 241, 242, 244, 246, 247, 249, 252, 262, 266, 278, 283, 299, 311, 320, 327, 331, 333, 340, 344, 351, 353, 362, 364, 371, 372, 373, 398, 400, 439, 442, 443, 444, 447, 460, 471, 487, 502, 512, 513, 514, 518, 519, 542, 545, 553, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 582, 583, 584, 585, 598, 604, 610, 624, 626, 648, 650, 652, 653, 654, 655, 656, 662, 664, 665, 666, 668, 669, 676, 677, 686, 687, 692, 704, 705, 706, 707, 736, 743, 745, 746, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 780, 786, 789, 790, 795, 807, 809, 816, 834, 835, 837, 838, 839, 840, 851, 854, 857, 872, 880, 906, 924, 928, 930, 934, 935, 938, 939, 940, 943, 946, 948, 952, 956, 958, 959, 962, 963, 965, 968, 969, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 986], "forecast": [4, 235, 361, 932, 952], "realist": [4, 8, 237, 244, 245, 296, 932], "gap": [4, 333, 367, 422, 423, 429, 539, 597, 598, 603, 604, 611, 612, 613, 614, 632, 635, 768, 857, 858, 859, 860, 928, 929, 981, 985, 987], "between": [4, 5, 8, 9, 11, 12, 33, 34, 35, 36, 38, 39, 49, 55, 56, 61, 77, 88, 90, 94, 98, 102, 108, 111, 128, 135, 140, 141, 143, 148, 150, 151, 152, 153, 158, 165, 170, 174, 175, 179, 180, 181, 183, 184, 187, 197, 199, 206, 211, 215, 228, 231, 234, 235, 236, 237, 238, 240, 241, 242, 244, 255, 259, 260, 262, 263, 273, 278, 284, 291, 299, 307, 311, 312, 313, 319, 320, 324, 325, 333, 338, 340, 347, 349, 350, 351, 357, 360, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 383, 392, 393, 396, 397, 401, 403, 404, 405, 407, 408, 409, 414, 420, 421, 422, 423, 424, 425, 426, 427, 442, 444, 445, 446, 447, 448, 449, 453, 465, 466, 472, 475, 478, 485, 487, 488, 489, 490, 491, 492, 497, 498, 500, 504, 505, 510, 511, 513, 514, 535, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 555, 556, 557, 558, 559, 560, 571, 578, 583, 584, 585, 590, 593, 596, 597, 598, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 621, 627, 629, 630, 632, 635, 639, 641, 643, 645, 646, 647, 650, 652, 654, 655, 656, 658, 660, 661, 665, 666, 667, 668, 670, 674, 675, 676, 679, 680, 681, 684, 686, 687, 693, 702, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 736, 737, 740, 741, 743, 744, 745, 746, 747, 749, 750, 756, 764, 765, 767, 774, 775, 777, 779, 791, 792, 793, 795, 796, 797, 799, 800, 801, 802, 803, 806, 807, 813, 816, 817, 819, 820, 822, 823, 826, 827, 828, 830, 835, 838, 839, 843, 854, 857, 858, 859, 860, 862, 883, 901, 921, 924, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 946, 947, 948, 949, 953, 965, 966, 973, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "side": [4, 15, 25, 54, 111, 172, 197, 201, 209, 273, 311, 320, 333, 349, 361, 364, 367, 368, 371, 466, 928, 929, 932, 934, 947, 982], "split": [4, 5, 6, 11, 14, 16, 22, 24, 28, 29, 64, 90, 98, 104, 105, 107, 110, 111, 112, 113, 114, 123, 129, 150, 151, 163, 174, 175, 179, 182, 187, 197, 207, 222, 223, 229, 230, 233, 235, 240, 242, 245, 262, 268, 270, 274, 275, 285, 291, 299, 311, 313, 319, 333, 345, 350, 351, 354, 361, 363, 368, 370, 371, 389, 394, 395, 423, 424, 430, 431, 448, 482, 488, 490, 493, 497, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 539, 540, 542, 545, 553, 598, 602, 604, 606, 612, 614, 616, 624, 626, 646, 655, 656, 668, 681, 687, 707, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 780, 783, 789, 790, 806, 807, 830, 834, 835, 837, 838, 839, 840, 857, 858, 859, 860, 903, 921, 928, 929, 935, 938, 939, 940, 942, 946, 948, 953, 958, 962, 963, 965, 966, 967, 969, 973, 976, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989], "limit": [4, 8, 16, 33, 38, 52, 61, 75, 105, 106, 112, 118, 146, 151, 152, 153, 158, 179, 180, 196, 210, 242, 275, 279, 284, 313, 320, 325, 339, 340, 343, 349, 351, 352, 361, 363, 366, 368, 372, 414, 419, 510, 511, 512, 513, 583, 601, 609, 610, 630, 633, 634, 639, 728, 768, 797, 799, 800, 801, 822, 823, 847, 851, 852, 853, 854, 855, 900, 921, 928, 929, 931, 932, 939, 940, 942, 953, 958, 969, 981, 983, 986, 987], "cv": [4, 12, 22, 23, 24, 50, 65, 66, 67, 71, 93, 108, 110, 123, 124, 132, 146, 147, 151, 168, 178, 181, 231, 233, 234, 235, 236, 237, 238, 240, 241, 245, 249, 279, 286, 299, 307, 350, 351, 361, 367, 370, 389, 423, 518, 519, 545, 553, 598, 602, 604, 606, 610, 612, 614, 616, 624, 626, 747, 749, 750, 751, 752, 753, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 776, 780, 783, 830, 857, 858, 921, 924, 927, 928, 932, 942, 953, 962, 963, 967, 975, 979, 980, 981, 982, 983, 985, 987, 989], "fold": [4, 62, 71, 107, 110, 123, 132, 151, 168, 223, 230, 231, 233, 235, 236, 238, 245, 291, 307, 320, 333, 341, 342, 350, 351, 363, 372, 389, 423, 444, 487, 518, 519, 545, 553, 598, 602, 604, 606, 610, 612, 614, 616, 624, 626, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 780, 783, 830, 851, 854, 921, 928, 932, 942, 947, 962, 973, 975, 977, 978, 979, 981, 982, 984, 985], "1000": [4, 8, 14, 24, 28, 33, 66, 69, 77, 95, 102, 104, 105, 110, 111, 115, 120, 125, 128, 156, 165, 171, 182, 201, 209, 212, 221, 225, 233, 235, 241, 244, 246, 258, 260, 274, 277, 282, 283, 285, 300, 301, 308, 311, 312, 343, 344, 350, 361, 371, 389, 424, 430, 431, 482, 483, 488, 493, 494, 496, 497, 499, 504, 515, 583, 597, 598, 602, 603, 604, 606, 611, 612, 613, 614, 617, 618, 619, 623, 627, 628, 629, 638, 643, 649, 652, 714, 826, 838, 844, 849, 850, 921, 925, 947, 962, 965, 980, 982], "datapoint": [4, 38, 48, 51, 139, 142, 162, 211, 212, 230, 235, 252, 305, 373, 453, 508, 509, 510, 511, 515, 516, 517, 562, 857, 858, 859, 860, 925], "should": [4, 5, 6, 8, 9, 14, 16, 23, 25, 28, 33, 49, 102, 108, 111, 133, 146, 151, 156, 158, 159, 179, 181, 197, 206, 211, 212, 235, 238, 241, 242, 244, 253, 274, 275, 290, 299, 307, 312, 320, 324, 325, 326, 333, 336, 337, 338, 340, 342, 343, 345, 346, 347, 350, 351, 354, 357, 361, 363, 365, 367, 368, 370, 371, 372, 373, 374, 375, 377, 392, 394, 395, 396, 397, 398, 400, 401, 403, 405, 408, 409, 410, 413, 414, 415, 418, 425, 433, 434, 435, 436, 438, 447, 454, 459, 460, 467, 472, 474, 475, 478, 483, 484, 487, 500, 508, 509, 512, 513, 514, 515, 516, 518, 532, 533, 536, 537, 539, 540, 542, 544, 545, 548, 553, 558, 559, 571, 578, 579, 580, 582, 583, 584, 586, 589, 590, 591, 594, 596, 597, 598, 599, 600, 603, 604, 605, 607, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 622, 623, 624, 626, 627, 628, 629, 630, 631, 635, 638, 640, 641, 642, 643, 644, 645, 646, 647, 652, 660, 677, 678, 721, 724, 728, 729, 730, 731, 732, 735, 738, 739, 740, 749, 755, 757, 764, 765, 766, 767, 771, 775, 777, 778, 789, 790, 791, 792, 793, 794, 795, 797, 799, 806, 807, 812, 813, 816, 817, 818, 820, 821, 822, 823, 830, 832, 836, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 869, 873, 875, 878, 886, 893, 898, 901, 903, 906, 907, 908, 909, 910, 911, 912, 913, 921, 922, 926, 927, 928, 929, 932, 933, 935, 937, 938, 939, 942, 945, 946, 947, 948, 953, 955, 956, 963, 967, 970, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "enough": [4, 33, 40, 57, 107, 135, 146, 152, 153, 168, 179, 211, 213, 277, 313, 320, 336, 338, 342, 352, 361, 362, 363, 365, 367, 370, 518, 519, 540, 747, 750, 751, 753, 761, 773, 886, 921, 926, 929, 931, 938, 942, 947, 952, 956, 979], "quantifi": [4, 33, 45, 71, 140, 197, 242, 340, 351, 358, 362, 524, 812, 927, 940, 942, 969], "repres": [4, 8, 10, 12, 14, 24, 29, 40, 44, 45, 46, 49, 82, 85, 87, 94, 95, 105, 106, 114, 151, 158, 166, 171, 181, 183, 184, 188, 201, 203, 211, 215, 224, 229, 232, 235, 238, 242, 258, 275, 311, 313, 319, 326, 330, 333, 335, 340, 349, 350, 351, 352, 357, 361, 363, 367, 368, 369, 370, 371, 372, 390, 394, 403, 414, 421, 422, 423, 424, 425, 426, 427, 439, 441, 442, 443, 445, 447, 449, 451, 452, 453, 455, 456, 461, 485, 487, 489, 491, 492, 498, 506, 514, 532, 539, 542, 580, 583, 585, 591, 627, 629, 648, 652, 693, 739, 747, 749, 760, 761, 764, 767, 772, 774, 775, 778, 779, 785, 791, 792, 793, 795, 796, 797, 799, 800, 801, 806, 807, 816, 822, 823, 846, 869, 870, 890, 922, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 940, 942, 943, 945, 946, 948, 958, 963, 964, 966, 979, 981, 984, 985, 988], "bit": [4, 44, 49, 71, 88, 177, 181, 273, 299, 312, 320, 324, 333, 336, 370, 371, 533, 540, 609, 779, 869, 870, 929, 933, 951, 960, 967, 973, 976, 979, 981, 982, 985, 986, 987], "less": [4, 5, 8, 48, 49, 55, 83, 85, 88, 96, 105, 111, 112, 135, 142, 151, 161, 179, 181, 183, 212, 222, 224, 235, 236, 244, 246, 249, 274, 277, 278, 279, 283, 285, 311, 312, 320, 324, 326, 333, 338, 340, 349, 351, 363, 367, 368, 370, 371, 375, 391, 393, 395, 397, 399, 401, 403, 408, 411, 413, 414, 433, 434, 435, 447, 466, 482, 486, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 541, 547, 570, 578, 585, 598, 612, 627, 629, 643, 652, 672, 673, 674, 675, 686, 702, 714, 729, 730, 735, 743, 745, 746, 749, 750, 751, 757, 773, 784, 785, 786, 788, 789, 790, 791, 792, 793, 795, 797, 798, 799, 800, 801, 812, 824, 826, 827, 829, 832, 838, 839, 849, 850, 857, 858, 859, 860, 875, 889, 921, 922, 924, 925, 926, 929, 931, 932, 935, 937, 942, 946, 947, 948, 952, 965, 967, 973, 974, 976, 977, 979, 980, 981, 983, 987, 988], "half": [4, 22, 88, 211, 214, 233, 235, 247, 333, 334, 368, 414, 473, 513, 544, 548, 553, 720, 808, 816, 932, 935, 948], "contigu": [4, 20, 340, 349, 360, 367, 371, 395, 398, 400, 410, 597, 598, 603, 604, 611, 612, 613, 614, 632, 635, 731, 766, 789, 790, 849, 851, 852, 853, 854, 855, 947, 976, 983, 987], "model_select": [4, 5, 6, 7, 10, 22, 23, 25, 28, 29, 50, 65, 66, 67, 68, 69, 71, 78, 90, 93, 98, 104, 105, 108, 109, 110, 111, 112, 113, 114, 117, 118, 123, 124, 129, 130, 132, 135, 146, 147, 148, 150, 151, 153, 154, 156, 174, 179, 181, 186, 187, 194, 195, 197, 207, 212, 217, 218, 219, 223, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 255, 257, 261, 262, 268, 270, 271, 275, 277, 278, 279, 281, 282, 283, 286, 291, 292, 299, 302, 307, 315, 319, 320, 327, 338, 340, 343, 350, 351, 364, 367, 370, 389, 390, 509, 511, 518, 519, 530, 610, 648, 649, 651, 653, 692, 777, 780, 798, 806, 807, 809, 857, 858, 859, 860, 921, 922, 927, 932, 934, 935, 940, 942, 947, 953, 962, 963, 967, 970, 979, 980], "timeseriessplit": [4, 230, 367, 979, 980, 985], "ts_cv": 4, "n_split": [4, 99, 110, 146, 147, 151, 223, 230, 235, 237, 240, 245, 291, 299, 307, 320, 367, 748, 749, 750, 751, 752, 754, 755, 756, 757, 760, 762, 763, 764, 765, 766, 767, 768, 772, 962, 979, 981], "5": [4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 22, 23, 24, 27, 28, 29, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 55, 56, 57, 59, 60, 61, 62, 64, 65, 67, 69, 72, 73, 74, 75, 77, 78, 81, 83, 85, 86, 87, 88, 89, 91, 92, 93, 95, 98, 99, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 123, 126, 128, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 159, 160, 161, 162, 165, 167, 169, 170, 171, 173, 174, 176, 177, 179, 180, 181, 182, 183, 185, 187, 190, 191, 192, 193, 194, 195, 197, 200, 201, 202, 204, 206, 209, 210, 211, 212, 213, 214, 217, 219, 221, 222, 223, 224, 225, 226, 227, 230, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 248, 249, 250, 252, 253, 255, 257, 258, 259, 260, 262, 263, 265, 266, 268, 269, 270, 271, 273, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 297, 298, 299, 300, 301, 303, 304, 306, 307, 308, 309, 311, 312, 316, 317, 318, 320, 333, 335, 336, 338, 340, 343, 344, 349, 350, 351, 354, 355, 356, 361, 363, 364, 367, 368, 370, 371, 372, 373, 374, 375, 389, 390, 391, 392, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 409, 413, 415, 417, 420, 423, 433, 434, 435, 436, 441, 444, 445, 455, 467, 468, 472, 474, 475, 477, 479, 482, 484, 485, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 503, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 533, 543, 544, 545, 548, 553, 561, 564, 565, 566, 567, 570, 571, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 589, 592, 594, 597, 598, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 623, 627, 628, 629, 631, 632, 635, 639, 640, 642, 643, 646, 647, 650, 654, 656, 660, 663, 664, 672, 673, 674, 676, 677, 678, 680, 685, 688, 689, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 719, 731, 732, 734, 735, 737, 738, 739, 742, 744, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 803, 806, 807, 808, 809, 814, 815, 816, 818, 819, 821, 822, 823, 824, 825, 826, 828, 829, 830, 837, 838, 843, 849, 850, 851, 852, 853, 854, 855, 857, 859, 875, 884, 885, 886, 888, 890, 891, 895, 896, 900, 903, 921, 922, 924, 927, 928, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 942, 944, 946, 947, 950, 954, 958, 962, 963, 965, 966, 967, 969, 971, 974, 975, 976, 978, 980, 981, 983, 987, 988, 989], "48": [4, 41, 92, 335, 344, 363, 461, 548, 696, 773, 784, 921, 934, 942], "max_train_s": [4, 367, 768, 980], "10000": [4, 11, 27, 39, 58, 66, 67, 112, 123, 165, 172, 187, 195, 212, 248, 283, 296, 320, 326, 370, 371, 512, 513, 595, 630, 826, 855, 944, 963, 967], "test_siz": [4, 5, 6, 10, 22, 23, 25, 28, 29, 65, 98, 104, 109, 110, 112, 113, 117, 150, 156, 174, 179, 186, 187, 194, 195, 232, 233, 237, 242, 244, 248, 252, 261, 262, 268, 270, 271, 275, 277, 278, 283, 299, 307, 320, 343, 367, 649, 749, 764, 767, 768, 775, 777, 798, 922, 934, 935, 962, 963, 973, 974, 979, 980, 985], "manual": [4, 42, 151, 152, 154, 163, 180, 190, 237, 253, 291, 297, 311, 313, 324, 325, 333, 338, 342, 343, 350, 354, 363, 367, 368, 369, 389, 400, 518, 799, 822, 828, 921, 926, 928, 931, 932, 935, 942, 953, 958, 959, 967, 981, 983], "inspect": [4, 28, 51, 56, 101, 105, 112, 114, 115, 119, 130, 135, 140, 141, 151, 152, 153, 154, 162, 171, 188, 216, 235, 238, 247, 256, 261, 264, 278, 281, 282, 283, 284, 286, 295, 296, 297, 300, 301, 311, 316, 325, 327, 340, 351, 363, 364, 370, 371, 415, 504, 505, 508, 509, 510, 511, 515, 516, 517, 778, 809, 810, 857, 858, 859, 860, 920, 932, 933, 936, 939, 940, 947, 952, 967, 969, 976], "variou": [4, 12, 32, 33, 53, 55, 56, 74, 77, 88, 148, 151, 157, 189, 198, 199, 200, 210, 277, 282, 311, 313, 319, 320, 324, 332, 333, 334, 335, 338, 340, 343, 350, 352, 361, 362, 363, 365, 389, 393, 423, 453, 465, 466, 476, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 520, 521, 545, 553, 598, 602, 604, 606, 609, 612, 614, 616, 617, 619, 624, 626, 627, 642, 643, 650, 747, 750, 751, 753, 761, 769, 770, 771, 772, 773, 774, 775, 776, 809, 849, 850, 921, 922, 929, 932, 935, 939, 942, 946, 948, 952, 956, 966, 967, 973, 976, 977], "check": [4, 5, 8, 16, 42, 49, 51, 89, 118, 135, 148, 150, 152, 153, 165, 167, 168, 179, 200, 228, 244, 284, 290, 307, 319, 324, 325, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 349, 351, 354, 357, 364, 395, 402, 403, 416, 453, 459, 460, 482, 487, 488, 499, 512, 513, 597, 598, 603, 604, 611, 612, 613, 614, 627, 629, 632, 638, 640, 643, 644, 753, 764, 773, 787, 805, 813, 854, 857, 858, 859, 860, 869, 870, 871, 880, 881, 892, 893, 894, 916, 917, 918, 920, 927, 928, 929, 932, 947, 953, 956, 973, 974, 976, 980, 984, 985, 986, 987, 988], "all_split": 4, "list": [4, 8, 9, 10, 12, 13, 15, 16, 18, 23, 29, 36, 40, 45, 57, 64, 95, 96, 103, 110, 118, 124, 154, 216, 230, 233, 235, 236, 238, 239, 244, 248, 262, 275, 279, 281, 282, 283, 284, 285, 286, 292, 302, 312, 313, 326, 332, 333, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 354, 361, 362, 363, 364, 367, 369, 370, 371, 384, 386, 389, 401, 407, 408, 415, 416, 417, 423, 429, 433, 434, 435, 439, 440, 441, 442, 443, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 474, 483, 501, 502, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 539, 540, 542, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 583, 585, 586, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 621, 623, 624, 629, 630, 632, 635, 643, 647, 648, 650, 661, 663, 664, 667, 669, 675, 683, 696, 704, 728, 731, 733, 738, 742, 745, 746, 747, 750, 751, 753, 758, 759, 761, 770, 771, 772, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 813, 817, 820, 822, 823, 828, 830, 846, 850, 852, 855, 857, 858, 859, 860, 861, 862, 863, 865, 869, 870, 871, 875, 877, 878, 879, 881, 889, 890, 892, 903, 906, 916, 921, 922, 928, 932, 934, 935, 936, 939, 940, 943, 948, 950, 952, 953, 956, 958, 962, 964, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "train_0": 4, "test_0": 4, "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 324, 325, 332, 333, 335, 336, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 354, 355, 356, 357, 359, 360, 361, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 709, 710, 711, 713, 714, 716, 717, 718, 719, 721, 723, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 867, 869, 870, 875, 880, 881, 883, 885, 886, 888, 889, 890, 891, 893, 894, 895, 897, 898, 900, 901, 902, 903, 906, 907, 913, 921, 922, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 950, 953, 954, 958, 962, 963, 964, 965, 966, 967, 969, 970, 971], "iloc": [4, 118, 151, 152, 197, 235], "last": [4, 40, 53, 80, 109, 111, 151, 158, 179, 180, 187, 192, 206, 227, 238, 246, 247, 278, 283, 285, 291, 315, 324, 333, 336, 340, 342, 343, 346, 351, 354, 363, 364, 371, 375, 390, 394, 398, 410, 415, 419, 466, 484, 510, 511, 512, 513, 534, 535, 538, 544, 545, 548, 561, 633, 634, 636, 637, 648, 649, 651, 652, 653, 658, 732, 745, 746, 750, 751, 766, 789, 790, 794, 809, 810, 814, 822, 828, 864, 889, 907, 921, 927, 928, 929, 931, 932, 933, 936, 946, 953, 958, 965, 973, 980, 981, 982, 987], "train_4": 4, "test_4": 4, "readi": [4, 7, 140, 180, 333, 342, 346], "tree": [4, 7, 24, 25, 28, 37, 40, 57, 97, 98, 101, 102, 103, 108, 109, 110, 111, 112, 114, 118, 119, 143, 146, 152, 154, 200, 214, 216, 239, 253, 258, 266, 273, 274, 278, 283, 320, 324, 327, 333, 335, 344, 350, 351, 353, 361, 363, 369, 374, 389, 393, 394, 395, 396, 397, 399, 401, 408, 414, 446, 451, 455, 465, 466, 470, 495, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 582, 583, 584, 585, 609, 639, 643, 654, 738, 753, 773, 775, 784, 789, 790, 791, 792, 793, 794, 795, 797, 799, 800, 801, 810, 813, 822, 881, 922, 929, 932, 933, 938, 939, 952, 953, 954, 969, 973, 974, 975, 976, 977, 978, 979, 980], "often": [4, 18, 22, 23, 30, 64, 68, 116, 139, 146, 151, 152, 180, 197, 200, 223, 237, 240, 273, 278, 299, 309, 311, 312, 313, 324, 325, 332, 333, 335, 338, 340, 343, 346, 349, 350, 351, 353, 357, 361, 363, 364, 365, 367, 368, 370, 371, 373, 375, 419, 472, 475, 484, 487, 583, 597, 598, 603, 604, 611, 612, 613, 614, 623, 625, 638, 678, 819, 827, 835, 847, 921, 922, 924, 927, 928, 929, 930, 931, 932, 934, 935, 937, 938, 939, 942, 945, 946, 948, 958, 960, 965, 966, 967, 974, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "flexibl": [4, 23, 108, 146, 179, 274, 296, 313, 340, 345, 367, 373, 625, 849, 850, 921, 926, 928, 932, 936, 942, 953, 956, 982, 986], "effici": [4, 5, 12, 13, 38, 42, 49, 85, 116, 156, 168, 172, 181, 187, 258, 311, 324, 330, 332, 338, 340, 341, 343, 344, 349, 351, 357, 360, 362, 363, 368, 369, 370, 373, 375, 394, 395, 398, 400, 401, 403, 405, 408, 410, 412, 413, 447, 484, 485, 486, 489, 491, 492, 495, 514, 517, 525, 539, 542, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 583, 584, 585, 589, 591, 606, 609, 610, 615, 617, 619, 624, 626, 627, 628, 629, 630, 636, 637, 639, 650, 676, 706, 713, 729, 730, 745, 746, 747, 761, 778, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 814, 826, 838, 842, 849, 858, 860, 886, 900, 921, 924, 926, 928, 929, 931, 932, 933, 935, 936, 937, 938, 940, 942, 943, 944, 945, 946, 947, 952, 956, 958, 962, 965, 966, 967, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "heteorogen": 4, "tabular": [4, 152, 340, 940], "mix": [4, 57, 63, 86, 87, 148, 179, 273, 332, 340, 349, 351, 364, 368, 375, 415, 417, 418, 447, 484, 489, 491, 498, 551, 555, 581, 597, 598, 603, 609, 610, 611, 612, 613, 614, 619, 627, 629, 632, 747, 761, 775, 809, 822, 823, 829, 830, 896, 903, 906, 928, 937, 966, 985, 987, 988], "long": [4, 11, 12, 40, 57, 99, 111, 140, 147, 151, 153, 179, 213, 238, 266, 273, 282, 311, 312, 320, 325, 338, 346, 349, 351, 352, 357, 362, 363, 373, 404, 449, 489, 627, 628, 629, 750, 751, 784, 785, 786, 787, 788, 806, 807, 817, 932, 938, 942, 943, 945, 946, 951, 955, 975, 979, 985, 987], "sampl": [4, 5, 8, 13, 22, 23, 24, 25, 29, 30, 31, 33, 35, 37, 38, 39, 42, 44, 45, 49, 51, 52, 53, 54, 55, 60, 73, 74, 75, 78, 81, 83, 85, 89, 90, 94, 95, 99, 100, 101, 102, 103, 104, 107, 108, 110, 111, 112, 114, 119, 120, 121, 130, 132, 135, 140, 141, 142, 144, 146, 148, 151, 152, 156, 157, 165, 167, 168, 179, 181, 183, 187, 193, 195, 196, 197, 199, 206, 210, 211, 213, 215, 221, 222, 224, 225, 226, 227, 228, 230, 235, 237, 238, 239, 241, 243, 247, 249, 252, 253, 256, 257, 258, 259, 260, 262, 263, 264, 273, 275, 276, 277, 278, 281, 283, 284, 286, 288, 290, 291, 292, 293, 294, 295, 297, 299, 301, 307, 311, 312, 316, 319, 324, 327, 331, 333, 334, 337, 338, 340, 341, 349, 350, 360, 361, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 380, 382, 384, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 405, 407, 408, 409, 412, 413, 414, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 562, 578, 579, 580, 581, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 638, 639, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 713, 714, 718, 719, 720, 721, 723, 724, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 869, 870, 874, 875, 886, 890, 901, 903, 906, 907, 910, 913, 921, 922, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 952, 953, 955, 958, 964, 965, 966, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "larg": [4, 12, 13, 20, 24, 33, 35, 39, 43, 45, 46, 48, 49, 67, 69, 85, 89, 102, 104, 111, 114, 116, 129, 140, 141, 153, 158, 159, 168, 170, 179, 181, 184, 185, 197, 211, 232, 238, 241, 244, 255, 262, 270, 273, 275, 284, 285, 299, 304, 312, 313, 324, 333, 338, 344, 347, 349, 350, 351, 354, 357, 362, 365, 367, 368, 369, 370, 372, 373, 374, 376, 394, 396, 398, 401, 402, 403, 404, 409, 413, 424, 426, 450, 465, 485, 487, 489, 491, 495, 498, 500, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 533, 539, 540, 542, 585, 592, 594, 601, 605, 608, 609, 610, 615, 622, 623, 625, 628, 630, 636, 638, 640, 642, 643, 644, 646, 696, 729, 730, 747, 755, 757, 761, 765, 774, 784, 785, 786, 787, 788, 789, 790, 795, 806, 807, 814, 818, 819, 827, 829, 841, 842, 849, 850, 854, 855, 857, 858, 859, 860, 885, 886, 921, 924, 926, 928, 929, 931, 934, 935, 936, 940, 942, 945, 946, 947, 948, 952, 953, 956, 963, 965, 966, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "here": [4, 8, 9, 12, 13, 16, 22, 52, 53, 61, 71, 75, 80, 81, 83, 87, 88, 90, 92, 93, 94, 96, 99, 102, 108, 112, 118, 130, 133, 135, 143, 144, 151, 152, 153, 156, 158, 168, 172, 179, 185, 194, 195, 197, 199, 201, 206, 211, 216, 222, 223, 224, 229, 232, 233, 235, 237, 238, 240, 244, 245, 247, 253, 255, 262, 269, 270, 271, 275, 278, 283, 285, 288, 290, 299, 307, 309, 313, 315, 320, 324, 325, 326, 332, 333, 336, 337, 338, 339, 340, 342, 343, 344, 346, 349, 350, 357, 359, 360, 363, 364, 366, 367, 368, 369, 370, 371, 374, 376, 389, 392, 393, 394, 395, 396, 397, 398, 400, 403, 415, 423, 426, 487, 489, 490, 494, 495, 518, 519, 520, 521, 532, 533, 535, 539, 542, 545, 553, 579, 581, 598, 602, 604, 606, 612, 614, 616, 624, 626, 640, 642, 646, 650, 663, 676, 696, 706, 742, 747, 750, 751, 753, 761, 769, 770, 771, 772, 773, 774, 776, 785, 789, 790, 813, 821, 824, 827, 841, 842, 852, 898, 921, 924, 928, 929, 930, 931, 932, 935, 938, 942, 944, 945, 946, 947, 952, 953, 955, 956, 958, 959, 965, 973, 981, 986], "ordin": [4, 49, 65, 118, 276, 279, 283, 286, 332, 351, 370, 447, 518, 660, 814, 817, 822, 823, 830, 928, 929, 942, 953, 981, 987], "encod": [4, 8, 11, 44, 65, 85, 104, 118, 148, 151, 152, 153, 178, 179, 244, 272, 274, 275, 276, 283, 285, 286, 299, 311, 313, 330, 332, 334, 340, 343, 349, 351, 364, 367, 368, 370, 371, 373, 415, 438, 447, 454, 477, 482, 488, 490, 491, 493, 495, 496, 497, 499, 502, 512, 513, 517, 518, 520, 532, 539, 540, 542, 581, 599, 609, 610, 620, 631, 685, 749, 754, 756, 772, 810, 812, 814, 816, 817, 820, 822, 823, 830, 833, 921, 922, 928, 929, 932, 934, 935, 937, 946, 952, 953, 969, 974, 975, 981, 985, 987, 988, 989], "know": [4, 49, 61, 108, 130, 133, 135, 144, 151, 197, 213, 235, 252, 285, 288, 307, 324, 338, 349, 357, 363, 366, 367, 368, 371, 451, 455, 461, 597, 603, 609, 610, 676, 706, 747, 761, 834, 835, 837, 838, 839, 840, 857, 858, 859, 860, 921, 931, 932, 933, 935, 944, 979, 980, 983, 985], "treat": [4, 6, 65, 108, 118, 146, 151, 179, 244, 279, 283, 291, 320, 338, 349, 351, 360, 370, 371, 394, 512, 513, 539, 540, 542, 558, 559, 583, 589, 596, 622, 625, 704, 738, 818, 819, 825, 826, 829, 830, 834, 837, 838, 840, 922, 924, 928, 932, 933, 939, 942, 946, 948, 963, 977, 985, 989], "dedic": [4, 233, 309, 336, 342, 344, 349, 352, 354, 359, 363, 535, 623, 625, 638, 921, 952, 958, 981], "rule": [4, 156, 316, 319, 320, 324, 335, 338, 339, 340, 349, 351, 352, 358, 361, 362, 363, 367, 368, 370, 372, 487, 500, 501, 502, 503, 504, 512, 513, 520, 521, 553, 585, 596, 609, 610, 617, 619, 627, 628, 629, 657, 658, 747, 750, 751, 753, 761, 772, 774, 798, 849, 862, 921, 926, 934, 935, 946, 948, 953, 958, 965, 969, 975, 978, 985], "pass": [4, 7, 8, 19, 20, 34, 108, 115, 130, 160, 180, 207, 209, 210, 216, 218, 226, 233, 236, 281, 284, 304, 313, 320, 324, 325, 326, 333, 338, 339, 340, 343, 344, 345, 346, 347, 349, 351, 357, 363, 364, 367, 368, 370, 371, 373, 374, 375, 389, 390, 392, 395, 396, 398, 400, 401, 403, 405, 408, 410, 411, 413, 415, 416, 418, 420, 423, 425, 439, 442, 443, 446, 448, 454, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 523, 532, 533, 539, 540, 542, 544, 545, 548, 558, 559, 561, 562, 568, 571, 577, 582, 583, 585, 590, 591, 592, 593, 594, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 621, 622, 623, 627, 628, 629, 630, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 682, 683, 692, 713, 724, 728, 729, 730, 731, 738, 740, 741, 745, 746, 747, 749, 750, 751, 752, 753, 759, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 813, 814, 816, 820, 822, 823, 824, 826, 829, 830, 838, 839, 840, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 869, 870, 876, 880, 881, 885, 886, 888, 890, 892, 893, 900, 902, 903, 906, 921, 922, 928, 930, 932, 933, 934, 935, 936, 939, 942, 945, 946, 947, 953, 956, 958, 962, 970, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "explicitli": [4, 42, 105, 135, 142, 146, 147, 180, 209, 313, 320, 325, 332, 334, 338, 339, 340, 342, 349, 351, 359, 367, 371, 373, 500, 501, 530, 531, 548, 578, 599, 609, 610, 620, 631, 660, 677, 732, 738, 739, 750, 751, 780, 783, 789, 790, 815, 839, 840, 900, 921, 922, 924, 926, 928, 929, 932, 934, 935, 942, 956, 967, 973, 976, 977, 978, 979, 980, 981, 982, 985, 986, 987], "logic": [4, 325, 339, 340, 345, 359, 370, 948, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "integ": [4, 16, 44, 49, 65, 151, 179, 197, 282, 283, 320, 324, 332, 333, 335, 340, 343, 347, 350, 351, 363, 364, 367, 368, 370, 371, 386, 389, 413, 415, 418, 423, 438, 447, 449, 452, 453, 454, 456, 459, 460, 463, 465, 466, 470, 473, 501, 510, 511, 512, 513, 514, 518, 519, 523, 533, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 578, 579, 580, 581, 583, 584, 595, 602, 606, 610, 616, 624, 626, 627, 650, 665, 685, 747, 749, 750, 751, 752, 754, 756, 761, 762, 763, 764, 766, 767, 769, 772, 780, 783, 785, 788, 789, 790, 814, 822, 823, 828, 829, 830, 833, 843, 845, 857, 858, 859, 860, 865, 895, 896, 897, 901, 922, 928, 933, 935, 942, 945, 947, 948, 958, 965, 967, 973, 975, 976, 979, 980, 981, 982, 983, 984, 986, 987, 988], "lexicograph": [4, 351, 518, 738, 742, 791, 799], "ad": [4, 13, 69, 93, 95, 98, 109, 129, 135, 141, 142, 158, 181, 203, 212, 235, 236, 237, 273, 282, 283, 284, 285, 286, 312, 337, 338, 342, 344, 349, 351, 352, 368, 370, 371, 372, 373, 393, 394, 395, 397, 398, 400, 403, 410, 413, 415, 465, 473, 483, 486, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 533, 540, 541, 542, 544, 553, 558, 559, 562, 564, 578, 580, 592, 593, 599, 601, 605, 609, 610, 620, 627, 629, 631, 646, 664, 665, 679, 680, 725, 727, 733, 734, 737, 745, 746, 747, 761, 770, 777, 787, 806, 807, 808, 822, 828, 831, 846, 857, 858, 859, 860, 876, 921, 925, 927, 928, 929, 933, 935, 936, 938, 953, 956, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "benefit": [4, 51, 68, 69, 151, 193, 203, 209, 211, 255, 285, 324, 338, 347, 351, 361, 363, 399, 412, 419, 459, 518, 519, 609, 610, 617, 619, 627, 628, 629, 847, 849, 921, 927, 935, 940, 942, 953, 956, 973, 976, 977, 978, 985, 986, 987, 988], "prevent": [4, 99, 111, 130, 150, 180, 273, 279, 299, 315, 320, 338, 340, 342, 349, 350, 363, 368, 371, 394, 400, 439, 440, 541, 542, 562, 678, 735, 806, 807, 834, 835, 837, 838, 839, 840, 932, 934, 937, 938, 942, 948, 965, 975, 976, 978, 980, 982, 983, 984, 985, 986, 987, 988], "ani": [4, 8, 9, 13, 18, 27, 40, 42, 52, 62, 115, 128, 133, 140, 141, 142, 150, 151, 152, 153, 168, 179, 197, 206, 209, 210, 222, 226, 227, 235, 236, 238, 241, 244, 266, 273, 274, 277, 281, 283, 284, 286, 299, 313, 320, 324, 325, 326, 332, 333, 335, 336, 338, 340, 342, 343, 344, 346, 350, 351, 352, 354, 359, 360, 361, 362, 363, 364, 367, 368, 369, 370, 371, 372, 386, 392, 399, 400, 401, 403, 405, 407, 408, 412, 415, 418, 439, 440, 459, 460, 474, 485, 488, 490, 497, 502, 508, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 530, 531, 533, 539, 540, 542, 544, 554, 561, 562, 571, 578, 583, 584, 599, 609, 610, 617, 619, 620, 627, 628, 629, 630, 631, 643, 647, 650, 651, 655, 667, 668, 670, 674, 686, 687, 702, 705, 707, 724, 728, 729, 730, 731, 740, 741, 743, 747, 750, 751, 759, 760, 778, 781, 789, 790, 795, 799, 808, 809, 813, 814, 818, 820, 822, 823, 830, 839, 840, 843, 846, 849, 857, 858, 859, 860, 861, 863, 865, 869, 870, 902, 916, 921, 922, 924, 927, 928, 929, 932, 933, 934, 935, 938, 939, 940, 942, 944, 945, 946, 947, 948, 952, 958, 960, 964, 965, 967, 974, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "unknown": [4, 15, 51, 151, 235, 288, 290, 326, 333, 351, 357, 360, 371, 816, 822, 823, 895, 931, 942, 958, 977, 981, 985, 986], "sake": [4, 111, 147, 151, 179, 278, 311, 313, 346, 349, 621, 650], "simplic": [4, 13, 28, 311, 313, 351, 369, 935, 936, 937, 947], "try": [4, 6, 11, 14, 15, 23, 35, 49, 88, 107, 135, 147, 150, 152, 156, 158, 168, 222, 223, 235, 253, 266, 301, 311, 312, 333, 336, 337, 338, 340, 343, 344, 346, 349, 351, 357, 363, 366, 367, 371, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 454, 518, 528, 540, 609, 624, 626, 640, 644, 747, 750, 751, 759, 761, 770, 771, 772, 774, 827, 829, 849, 921, 928, 929, 938, 947, 948, 953, 955, 956, 958, 960, 963, 965, 966, 967, 975, 976, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988], "default": [4, 14, 23, 25, 27, 38, 41, 42, 44, 54, 85, 129, 135, 146, 152, 158, 159, 168, 179, 180, 197, 208, 210, 217, 219, 224, 230, 238, 244, 252, 253, 260, 273, 277, 281, 282, 286, 308, 311, 312, 313, 315, 320, 324, 325, 332, 333, 336, 340, 341, 342, 343, 344, 345, 347, 349, 350, 351, 354, 357, 361, 363, 364, 367, 368, 370, 371, 372, 374, 375, 376, 377, 379, 380, 383, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 658, 659, 660, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 684, 685, 686, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 873, 875, 876, 878, 880, 885, 886, 887, 888, 889, 890, 891, 895, 897, 900, 901, 902, 903, 905, 906, 907, 913, 916, 918, 919, 921, 922, 924, 926, 928, 931, 932, 933, 935, 936, 938, 939, 942, 944, 946, 947, 958, 962, 965, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "hyper": [4, 65, 229, 235, 240, 271, 299, 320, 340, 349, 350, 351, 358, 367, 370, 372, 595, 596, 751, 759, 761, 805, 927, 928, 932, 935, 946, 947, 958, 969, 973, 987], "paramet": [4, 5, 9, 10, 11, 13, 14, 15, 40, 50, 53, 55, 56, 57, 65, 66, 67, 72, 74, 75, 83, 85, 103, 107, 112, 113, 123, 124, 130, 133, 135, 140, 142, 144, 146, 147, 148, 151, 152, 158, 159, 160, 161, 164, 166, 167, 168, 170, 179, 181, 183, 184, 187, 196, 197, 203, 204, 206, 208, 211, 212, 215, 221, 223, 224, 226, 227, 229, 234, 235, 236, 239, 240, 243, 246, 247, 248, 250, 253, 255, 259, 260, 266, 268, 269, 271, 273, 274, 275, 281, 282, 284, 285, 286, 292, 294, 296, 301, 304, 308, 309, 311, 312, 313, 315, 316, 317, 318, 320, 324, 325, 326, 327, 330, 331, 333, 341, 343, 344, 345, 346, 347, 349, 358, 361, 363, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 929, 931, 934, 935, 936, 937, 938, 939, 940, 942, 944, 945, 946, 948, 952, 953, 959, 961, 963, 964, 965, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "pipelin": [4, 28, 50, 53, 65, 68, 78, 104, 108, 127, 129, 146, 147, 152, 153, 156, 158, 167, 168, 179, 180, 185, 193, 197, 200, 205, 206, 207, 211, 216, 219, 228, 232, 234, 242, 249, 253, 255, 261, 262, 268, 271, 275, 278, 281, 282, 283, 284, 285, 286, 292, 311, 312, 320, 324, 327, 330, 332, 333, 338, 341, 351, 367, 371, 373, 377, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 439, 453, 466, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 558, 561, 562, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 648, 649, 651, 652, 653, 664, 745, 746, 747, 750, 751, 761, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 921, 922, 928, 935, 936, 941, 942, 946, 947, 952, 953, 954, 956, 959, 961, 969, 973, 974, 976, 977, 978, 979, 980], "make_pipelin": [4, 28, 53, 78, 104, 108, 118, 129, 130, 146, 147, 151, 152, 156, 158, 167, 168, 179, 180, 185, 193, 197, 200, 206, 207, 208, 216, 217, 219, 232, 242, 253, 262, 268, 275, 278, 279, 281, 282, 283, 284, 285, 286, 312, 320, 350, 364, 367, 518, 627, 629, 801, 809, 834, 835, 837, 838, 839, 840, 849, 850, 851, 852, 854, 855, 922, 935, 942, 946, 947, 976, 983, 986], "ordinalencod": [4, 108, 118, 152, 153, 179, 279, 286, 332, 351, 370, 532, 785, 817, 822, 830, 934, 942, 981, 982, 985, 986, 987, 988, 989], "compos": [4, 5, 23, 63, 64, 65, 69, 78, 101, 108, 118, 148, 151, 152, 153, 179, 181, 197, 208, 217, 219, 279, 282, 284, 285, 286, 327, 350, 352, 363, 364, 367, 373, 466, 563, 931, 973], "columntransform": [4, 64, 65, 152, 153, 179, 197, 217, 219, 279, 284, 285, 286, 330, 332, 349, 350, 417, 418, 580, 814, 921, 922, 953, 969, 981, 982, 983, 984, 985, 986, 987, 988], "ensembl": [4, 7, 10, 24, 25, 28, 51, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 146, 147, 152, 153, 154, 179, 200, 206, 214, 215, 217, 218, 232, 247, 252, 275, 279, 281, 282, 283, 284, 286, 311, 320, 324, 327, 342, 343, 350, 351, 361, 363, 367, 372, 389, 455, 466, 583, 584, 586, 609, 750, 751, 775, 779, 810, 813, 822, 853, 857, 859, 860, 921, 932, 933, 938, 939, 948, 952, 953, 954, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980], "histgradientboostingregressor": [4, 7, 108, 111, 112, 115, 118, 146, 152, 179, 279, 281, 282, 283, 284, 286, 342, 370, 511, 583, 584, 586, 922, 939, 982, 983, 984, 985, 986, 987, 988, 989], "cross_valid": [4, 108, 118, 151, 181, 231, 238, 279, 338, 350, 526, 770, 771, 932, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 988, 989], "categorical_column": [4, 108, 151, 153, 418], "holidai": 4, "workingdai": 4, "clear": [4, 15, 55, 66, 151, 278, 333, 337, 338, 340, 349, 350, 351, 361, 364, 369, 863, 864, 921, 926, 984, 985, 986], "misti": 4, "spring": [4, 152], "fall": [4, 111, 142, 234, 235, 338, 340, 362, 363, 371, 386, 398, 459, 460, 677, 678, 742, 826, 838, 931, 932, 942, 958, 966, 982], "winter": 4, "fals": [4, 5, 7, 8, 10, 11, 13, 14, 15, 19, 20, 22, 24, 25, 29, 30, 35, 38, 40, 42, 43, 59, 62, 64, 65, 66, 67, 72, 74, 83, 89, 91, 94, 95, 98, 105, 108, 111, 112, 121, 123, 135, 140, 141, 142, 143, 151, 152, 153, 154, 158, 159, 165, 179, 180, 184, 185, 187, 195, 197, 199, 202, 213, 215, 219, 221, 232, 235, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 253, 257, 263, 266, 269, 270, 273, 274, 279, 281, 283, 284, 285, 286, 290, 299, 301, 307, 308, 311, 312, 332, 338, 339, 340, 343, 351, 361, 363, 364, 365, 367, 368, 370, 371, 372, 373, 375, 376, 386, 387, 388, 389, 392, 393, 394, 395, 397, 398, 399, 400, 402, 403, 404, 405, 410, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 459, 460, 461, 463, 466, 474, 475, 477, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 588, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 645, 646, 648, 649, 650, 651, 652, 653, 654, 659, 660, 662, 663, 664, 665, 666, 669, 676, 677, 678, 679, 680, 681, 688, 692, 693, 700, 701, 704, 706, 711, 713, 717, 718, 719, 724, 728, 732, 733, 734, 735, 737, 739, 742, 744, 745, 746, 747, 750, 751, 752, 753, 758, 761, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 849, 850, 851, 852, 853, 854, 855, 861, 862, 863, 867, 868, 869, 870, 880, 887, 893, 894, 897, 898, 902, 903, 906, 913, 918, 919, 921, 922, 928, 932, 935, 942, 946, 947, 966, 967, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "ordinal_encod": [4, 108], "gbrt_pipelin": 4, "transform": [4, 5, 6, 8, 10, 13, 23, 40, 42, 43, 44, 47, 50, 52, 57, 63, 68, 78, 80, 87, 88, 90, 92, 94, 95, 97, 108, 130, 141, 147, 148, 151, 152, 156, 171, 179, 180, 187, 193, 195, 197, 200, 203, 206, 211, 213, 219, 223, 232, 233, 236, 244, 253, 255, 261, 262, 263, 273, 274, 275, 276, 277, 278, 279, 281, 286, 299, 302, 311, 313, 320, 327, 332, 333, 334, 335, 338, 340, 343, 347, 351, 359, 361, 362, 363, 365, 368, 370, 371, 372, 373, 379, 383, 385, 389, 393, 394, 395, 397, 398, 400, 403, 415, 416, 417, 418, 419, 433, 434, 435, 436, 439, 440, 447, 454, 459, 460, 465, 466, 475, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 508, 510, 512, 515, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 587, 589, 590, 591, 592, 593, 604, 609, 614, 624, 627, 635, 639, 640, 641, 642, 643, 645, 664, 703, 704, 735, 747, 750, 751, 761, 775, 778, 784, 793, 798, 801, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 847, 849, 851, 854, 855, 878, 880, 921, 922, 924, 926, 928, 929, 932, 933, 936, 946, 947, 949, 952, 953, 954, 958, 963, 964, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "remaind": [4, 108, 151, 168, 179, 181, 197, 286, 307, 315, 364, 415, 418, 973, 980, 981, 982, 985, 986], "passthrough": [4, 66, 108, 151, 152, 179, 197, 279, 286, 364, 415, 418, 518, 519, 808, 809, 942, 982, 984, 987, 988], "short": [4, 5, 108, 114, 170, 233, 270, 338, 346, 367, 371, 375, 928, 929, 935, 978, 983, 984, 985, 986, 987, 988], "name": [4, 6, 7, 10, 11, 12, 16, 18, 23, 25, 27, 28, 33, 40, 41, 53, 57, 65, 67, 69, 75, 86, 92, 102, 103, 104, 108, 109, 111, 118, 151, 153, 168, 177, 179, 181, 185, 186, 194, 196, 197, 199, 200, 206, 212, 214, 215, 219, 223, 230, 232, 236, 238, 239, 242, 244, 245, 253, 261, 262, 268, 269, 275, 277, 279, 285, 292, 304, 311, 312, 313, 325, 326, 332, 333, 336, 338, 340, 342, 343, 345, 346, 351, 354, 357, 360, 363, 364, 367, 370, 371, 373, 377, 379, 383, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 527, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 638, 639, 640, 641, 642, 643, 648, 649, 650, 651, 653, 659, 660, 664, 682, 683, 729, 730, 745, 746, 747, 750, 751, 753, 759, 761, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 868, 869, 870, 873, 877, 878, 879, 881, 895, 902, 916, 920, 921, 926, 928, 932, 933, 939, 940, 942, 948, 953, 962, 963, 965, 967, 973, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "easier": [4, 40, 57, 61, 75, 108, 158, 164, 208, 232, 233, 273, 299, 311, 320, 333, 338, 340, 343, 346, 349, 354, 365, 367, 419, 466, 847, 880, 927, 932, 939, 948, 953, 956, 967, 982, 987], "specifi": [4, 85, 108, 109, 136, 142, 168, 180, 187, 221, 243, 324, 325, 332, 336, 338, 340, 347, 350, 351, 357, 363, 364, 367, 368, 370, 372, 373, 375, 377, 389, 393, 397, 401, 403, 414, 415, 418, 420, 421, 423, 424, 425, 426, 427, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 454, 466, 482, 484, 488, 489, 491, 492, 497, 498, 503, 508, 510, 511, 512, 513, 515, 518, 519, 534, 535, 544, 545, 548, 553, 561, 562, 571, 582, 583, 584, 589, 594, 597, 598, 599, 602, 603, 604, 606, 607, 609, 610, 611, 612, 613, 614, 616, 619, 620, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 638, 642, 649, 650, 651, 653, 660, 662, 679, 680, 688, 704, 721, 729, 730, 733, 734, 737, 747, 749, 750, 751, 753, 754, 756, 760, 761, 764, 769, 770, 771, 772, 773, 774, 776, 780, 783, 784, 785, 787, 788, 789, 790, 794, 822, 823, 824, 827, 828, 845, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 881, 888, 916, 922, 928, 929, 931, 932, 935, 939, 940, 942, 945, 946, 947, 962, 966, 973, 979, 980, 981, 982, 984, 985, 987, 988, 989], "next": [4, 7, 23, 55, 73, 107, 108, 112, 121, 142, 150, 154, 172, 176, 179, 207, 214, 218, 219, 223, 230, 241, 252, 278, 279, 283, 289, 311, 315, 319, 320, 327, 336, 338, 340, 342, 360, 363, 364, 367, 370, 459, 460, 561, 585, 643, 649, 651, 653, 731, 745, 746, 775, 898, 921, 925, 931, 932, 942, 956, 970, 973, 986, 987], "verbose_feature_names_out": [4, 108, 151, 152, 153, 219, 279, 284, 285, 286, 364, 415, 418, 986], "categorical_featur": [4, 65, 108, 152, 279, 283, 284, 285, 286, 343, 370, 512, 513, 583, 584, 939, 981, 985, 988], "random_st": [4, 5, 6, 7, 10, 12, 14, 18, 19, 20, 22, 23, 24, 25, 27, 28, 34, 38, 39, 40, 42, 44, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 64, 65, 69, 75, 78, 83, 85, 87, 90, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 120, 121, 123, 129, 130, 132, 135, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 160, 161, 165, 171, 178, 179, 182, 183, 185, 186, 187, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 211, 213, 214, 215, 216, 218, 219, 221, 223, 224, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 252, 253, 257, 261, 262, 263, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 291, 297, 299, 300, 301, 307, 308, 311, 312, 315, 319, 320, 340, 343, 347, 350, 351, 359, 363, 364, 367, 368, 370, 371, 375, 386, 389, 390, 392, 395, 398, 400, 402, 403, 404, 405, 409, 410, 411, 413, 420, 425, 439, 442, 443, 446, 448, 454, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 534, 535, 544, 545, 558, 559, 561, 562, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 583, 584, 585, 586, 589, 590, 591, 592, 593, 597, 598, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 625, 627, 628, 629, 630, 638, 640, 641, 642, 643, 644, 645, 646, 648, 649, 651, 652, 653, 685, 738, 741, 745, 746, 749, 750, 751, 752, 753, 759, 761, 762, 763, 764, 765, 766, 767, 773, 774, 775, 777, 779, 780, 781, 782, 783, 794, 798, 805, 806, 807, 809, 814, 826, 830, 838, 841, 842, 849, 850, 851, 854, 857, 858, 859, 860, 862, 863, 885, 886, 901, 903, 906, 921, 922, 924, 927, 932, 933, 934, 935, 936, 939, 940, 942, 947, 948, 958, 962, 963, 967, 970, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986], "42": [4, 5, 6, 22, 23, 24, 25, 28, 42, 51, 71, 87, 93, 105, 106, 108, 111, 112, 114, 118, 129, 130, 147, 151, 153, 154, 156, 158, 163, 168, 171, 173, 174, 181, 185, 186, 187, 193, 194, 196, 200, 206, 212, 215, 218, 234, 236, 239, 253, 259, 260, 261, 268, 274, 275, 276, 278, 281, 283, 285, 291, 297, 299, 311, 312, 320, 325, 340, 343, 344, 351, 363, 367, 370, 371, 374, 389, 396, 439, 443, 475, 482, 488, 495, 508, 509, 516, 517, 518, 519, 521, 628, 745, 749, 773, 775, 789, 790, 794, 798, 801, 841, 842, 844, 845, 846, 859, 860, 935, 942, 963, 967, 970, 973], "set_output": [4, 108, 148, 152, 205, 278, 279, 341, 385, 394, 395, 397, 398, 400, 415, 419, 433, 434, 435, 436, 447, 455, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 517, 518, 519, 520, 521, 532, 533, 534, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 609, 639, 640, 643, 775, 793, 798, 801, 805, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 847, 988], "across": [4, 56, 62, 77, 123, 151, 168, 173, 200, 230, 232, 235, 253, 273, 278, 339, 340, 347, 351, 357, 362, 363, 367, 371, 375, 389, 392, 401, 403, 405, 408, 411, 413, 420, 423, 425, 439, 442, 443, 446, 448, 454, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 502, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 518, 519, 539, 542, 545, 553, 558, 559, 561, 562, 583, 584, 585, 590, 591, 592, 593, 597, 598, 601, 603, 604, 605, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 627, 629, 630, 636, 637, 640, 641, 642, 643, 644, 645, 646, 655, 656, 668, 681, 707, 738, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 759, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 794, 798, 805, 806, 807, 814, 818, 819, 826, 827, 829, 830, 838, 841, 842, 844, 845, 849, 850, 851, 854, 857, 858, 885, 886, 903, 906, 921, 928, 930, 932, 942, 946, 948, 953, 956, 967, 973, 976, 979, 980, 981, 982, 983], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 18, 23, 25, 30, 31, 33, 36, 37, 44, 48, 51, 53, 56, 64, 69, 83, 85, 87, 88, 91, 93, 95, 102, 104, 108, 109, 110, 111, 118, 138, 141, 143, 144, 147, 159, 167, 168, 171, 176, 179, 180, 187, 188, 189, 197, 199, 200, 213, 215, 221, 222, 223, 224, 226, 227, 230, 233, 234, 235, 236, 238, 243, 246, 249, 253, 258, 263, 266, 269, 271, 273, 275, 278, 279, 281, 292, 295, 299, 309, 311, 312, 313, 324, 333, 338, 340, 344, 345, 349, 364, 367, 371, 375, 459, 484, 548, 561, 562, 731, 822, 876, 881, 893, 932, 939, 947, 963], "cv_result": [4, 65, 233, 234, 236, 238, 761, 772, 932], "score": [4, 8, 11, 15, 19, 20, 22, 23, 24, 28, 30, 33, 53, 55, 65, 66, 67, 69, 71, 75, 78, 93, 98, 101, 107, 108, 110, 111, 114, 117, 118, 124, 125, 129, 133, 146, 148, 150, 151, 152, 153, 154, 156, 170, 171, 174, 179, 181, 185, 187, 195, 197, 206, 211, 212, 215, 219, 225, 228, 233, 235, 236, 237, 238, 239, 240, 243, 244, 246, 247, 248, 249, 250, 252, 260, 261, 262, 268, 269, 270, 275, 278, 279, 281, 282, 283, 284, 291, 292, 299, 307, 311, 312, 315, 320, 333, 338, 340, 343, 350, 351, 357, 358, 360, 361, 362, 364, 366, 368, 370, 372, 380, 382, 384, 389, 395, 398, 400, 403, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 453, 455, 483, 487, 492, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 560, 561, 562, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 686, 687, 688, 689, 690, 692, 705, 706, 707, 732, 733, 734, 735, 736, 737, 738, 739, 742, 743, 744, 745, 746, 747, 750, 751, 753, 761, 766, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 794, 795, 796, 798, 799, 800, 805, 806, 807, 809, 829, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 888, 921, 924, 928, 930, 935, 938, 940, 942, 946, 953, 961, 963, 965, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "neg_mean_absolute_error": [4, 118, 181, 932], "neg_root_mean_squared_error": [4, 279, 932], "mae": [4, 118, 179, 181, 509, 516, 695, 858, 860, 932, 948, 980, 981, 985, 986], "test_neg_mean_absolute_error": [4, 181], "rmse": [4, 74, 279, 700, 984], "test_neg_root_mean_squared_error": 4, "print": [4, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 24, 27, 29, 34, 38, 39, 42, 43, 44, 45, 46, 48, 49, 53, 55, 56, 58, 62, 64, 65, 67, 68, 69, 73, 77, 78, 83, 85, 88, 93, 94, 96, 102, 105, 106, 107, 108, 110, 112, 123, 125, 129, 130, 132, 133, 135, 136, 138, 140, 144, 150, 152, 153, 154, 156, 163, 164, 165, 166, 170, 171, 174, 175, 179, 181, 182, 186, 187, 194, 195, 197, 200, 201, 204, 208, 210, 212, 215, 219, 224, 229, 233, 234, 235, 236, 238, 240, 243, 244, 248, 253, 257, 264, 266, 269, 270, 271, 275, 278, 281, 282, 283, 285, 288, 289, 292, 299, 311, 312, 313, 315, 319, 320, 324, 332, 333, 336, 339, 340, 346, 351, 357, 364, 367, 370, 371, 373, 415, 418, 419, 423, 429, 453, 463, 492, 495, 500, 501, 510, 511, 512, 513, 515, 516, 520, 521, 528, 534, 535, 539, 540, 542, 563, 568, 581, 597, 598, 600, 601, 603, 604, 605, 607, 611, 612, 613, 614, 617, 618, 627, 628, 635, 664, 668, 687, 743, 745, 746, 748, 749, 752, 754, 755, 756, 757, 760, 762, 763, 764, 765, 766, 767, 768, 771, 772, 773, 778, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 806, 807, 808, 809, 810, 811, 819, 825, 829, 837, 847, 848, 849, 850, 851, 854, 862, 873, 893, 900, 922, 932, 933, 934, 935, 940, 948, 958, 962, 963, 965, 966, 967, 973, 975, 981, 982, 984, 988], "3f": [4, 6, 8, 11, 14, 16, 20, 22, 24, 34, 36, 43, 44, 45, 53, 65, 67, 69, 78, 105, 106, 129, 133, 135, 136, 137, 139, 144, 150, 152, 153, 159, 163, 165, 171, 179, 181, 185, 194, 195, 197, 200, 210, 212, 233, 235, 236, 238, 241, 243, 246, 253, 268, 292, 311, 312, 313, 940, 963], "std": [4, 11, 12, 33, 42, 46, 50, 56, 61, 72, 74, 75, 86, 87, 88, 105, 107, 108, 118, 124, 144, 146, 147, 151, 159, 164, 188, 210, 233, 234, 235, 237, 238, 240, 243, 245, 249, 250, 279, 291, 302, 312, 320, 351, 363, 367, 370, 466, 557, 560, 829, 840, 942, 966, 981, 985], "n": [4, 5, 7, 8, 10, 11, 14, 16, 18, 29, 30, 31, 33, 35, 36, 53, 64, 69, 73, 77, 83, 85, 88, 90, 93, 95, 96, 101, 102, 105, 109, 120, 128, 135, 139, 144, 152, 159, 175, 179, 180, 194, 196, 197, 199, 209, 210, 211, 213, 221, 223, 224, 233, 235, 238, 240, 241, 242, 244, 245, 253, 258, 271, 275, 277, 278, 283, 286, 289, 307, 319, 324, 332, 335, 336, 338, 342, 344, 347, 351, 354, 360, 361, 363, 366, 367, 368, 369, 370, 371, 373, 374, 396, 397, 398, 399, 401, 420, 422, 425, 429, 440, 466, 467, 468, 469, 474, 479, 489, 491, 492, 498, 508, 509, 510, 511, 514, 515, 516, 517, 539, 540, 541, 542, 558, 559, 565, 578, 600, 622, 630, 643, 647, 650, 657, 658, 705, 752, 755, 757, 762, 763, 766, 785, 789, 790, 794, 814, 841, 843, 857, 858, 859, 860, 884, 889, 890, 907, 911, 912, 921, 924, 926, 928, 929, 932, 933, 934, 935, 936, 938, 939, 942, 944, 946, 947, 948, 958, 965, 967, 973, 975, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987], "quit": [4, 49, 52, 78, 102, 123, 133, 151, 152, 177, 197, 243, 284, 311, 324, 343, 350, 363, 371, 927, 929, 934, 956, 981], "good": [4, 9, 23, 25, 36, 40, 42, 45, 48, 49, 53, 68, 74, 78, 95, 107, 110, 111, 136, 140, 146, 151, 168, 179, 180, 185, 194, 204, 206, 210, 215, 222, 224, 229, 235, 241, 250, 271, 278, 279, 283, 288, 293, 299, 312, 320, 324, 325, 326, 337, 339, 340, 341, 344, 349, 351, 357, 360, 361, 363, 365, 367, 368, 370, 371, 372, 373, 389, 391, 396, 485, 510, 512, 513, 541, 581, 591, 598, 599, 607, 609, 610, 612, 620, 631, 641, 645, 673, 681, 692, 714, 774, 843, 886, 921, 927, 928, 929, 932, 933, 935, 936, 937, 939, 940, 942, 946, 947, 948, 953, 956, 958, 962, 965, 967, 979], "trial": [4, 240, 398, 400, 411, 622, 745, 746, 928, 979], "without": [4, 5, 13, 22, 32, 38, 51, 62, 69, 90, 110, 113, 115, 118, 129, 133, 142, 148, 150, 151, 152, 168, 187, 206, 210, 213, 216, 218, 229, 236, 240, 242, 254, 273, 274, 278, 281, 307, 312, 326, 333, 334, 336, 338, 339, 340, 342, 343, 344, 347, 349, 350, 351, 357, 363, 364, 368, 370, 371, 372, 373, 386, 391, 393, 409, 420, 425, 447, 455, 466, 483, 485, 506, 507, 514, 530, 531, 562, 578, 585, 590, 610, 643, 651, 731, 750, 751, 752, 759, 761, 774, 775, 791, 798, 802, 808, 809, 812, 815, 818, 819, 821, 825, 826, 827, 829, 834, 849, 865, 900, 901, 921, 922, 926, 928, 929, 932, 935, 938, 942, 946, 947, 948, 952, 953, 958, 959, 967, 970, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 988], "tune": [4, 40, 65, 90, 132, 135, 146, 152, 168, 184, 196, 203, 229, 240, 255, 274, 299, 311, 320, 324, 325, 326, 350, 351, 358, 362, 363, 367, 370, 372, 373, 403, 413, 510, 511, 545, 564, 565, 566, 568, 570, 571, 573, 574, 576, 594, 610, 641, 645, 805, 926, 927, 928, 929, 931, 932, 935, 936, 938, 946, 959, 969, 973, 987], "just": [4, 28, 78, 85, 108, 133, 169, 176, 200, 211, 235, 242, 246, 253, 268, 299, 320, 333, 337, 338, 339, 340, 342, 343, 346, 349, 350, 351, 360, 363, 364, 367, 370, 372, 373, 375, 419, 484, 493, 497, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 530, 535, 561, 562, 597, 603, 608, 609, 611, 613, 617, 618, 619, 627, 628, 629, 798, 806, 807, 921, 928, 931, 932, 933, 936, 940, 942, 946, 953, 965, 973, 977, 979, 981, 985], "had": [4, 9, 43, 111, 140, 273, 279, 284, 320, 338, 339, 371, 374, 396, 922, 932, 956, 958, 973, 974, 980, 981, 982, 983, 984, 988], "explicit": [4, 148, 152, 156, 205, 324, 325, 326, 337, 339, 349, 351, 352, 364, 371, 377, 423, 450, 452, 453, 492, 502, 503, 589, 590, 592, 627, 747, 748, 755, 793, 801, 809, 849, 854, 896, 900, 924, 926, 928, 932, 942, 948, 952, 973, 977, 982, 983, 986], "them": [4, 5, 8, 29, 35, 36, 45, 49, 51, 55, 60, 61, 64, 65, 78, 85, 87, 90, 98, 99, 100, 114, 128, 133, 135, 146, 147, 151, 152, 153, 156, 158, 174, 180, 181, 197, 210, 216, 233, 235, 236, 238, 244, 255, 273, 278, 284, 292, 299, 313, 319, 324, 326, 333, 336, 338, 339, 340, 341, 342, 346, 349, 351, 352, 353, 357, 361, 362, 363, 364, 367, 368, 370, 371, 373, 396, 398, 400, 401, 408, 415, 418, 444, 445, 459, 497, 518, 519, 520, 521, 558, 559, 567, 571, 572, 575, 583, 590, 615, 643, 718, 721, 724, 728, 729, 730, 731, 739, 747, 761, 768, 774, 813, 823, 827, 829, 830, 839, 840, 846, 857, 858, 898, 921, 922, 928, 931, 932, 933, 935, 936, 937, 942, 947, 948, 951, 952, 955, 956, 958, 965, 966, 967, 973, 974, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989], "But": [4, 9, 49, 150, 180, 181, 235, 253, 273, 338, 349, 363, 366, 369, 370, 413, 696, 857, 858, 921, 932, 947, 953], "much": [4, 6, 7, 9, 18, 23, 35, 36, 73, 75, 83, 88, 95, 104, 111, 112, 118, 119, 120, 135, 146, 147, 151, 152, 153, 154, 156, 176, 177, 181, 210, 235, 237, 238, 241, 246, 270, 274, 278, 279, 283, 284, 286, 299, 304, 311, 312, 320, 324, 326, 333, 338, 339, 340, 343, 346, 349, 350, 354, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 398, 399, 447, 485, 486, 487, 489, 510, 511, 512, 513, 609, 610, 617, 619, 627, 628, 629, 643, 729, 730, 750, 751, 765, 824, 842, 849, 921, 924, 927, 928, 929, 931, 932, 933, 935, 936, 938, 940, 944, 945, 947, 948, 953, 956, 962, 963, 965, 966, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989], "monoton": [4, 23, 97, 148, 152, 197, 209, 282, 361, 512, 513, 586, 587, 645, 657, 825, 837, 851, 854, 929, 933, 942, 947, 980, 984, 988], "relationship": [4, 100, 141, 150, 151, 158, 179, 181, 182, 242, 274, 351, 363, 365, 367, 373, 413, 587, 665, 929, 932, 934, 935, 939, 940, 965, 978], "case": [4, 7, 8, 23, 25, 33, 45, 48, 52, 56, 61, 65, 66, 74, 78, 90, 93, 102, 104, 111, 112, 118, 130, 132, 133, 135, 142, 151, 152, 165, 168, 170, 179, 180, 181, 184, 187, 193, 195, 196, 197, 206, 210, 211, 212, 216, 226, 229, 232, 234, 235, 236, 238, 241, 242, 244, 253, 260, 270, 273, 275, 278, 281, 284, 311, 312, 313, 319, 320, 324, 325, 326, 332, 333, 336, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 389, 392, 395, 396, 398, 402, 404, 414, 415, 418, 425, 447, 459, 460, 466, 490, 492, 493, 494, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 532, 533, 539, 542, 544, 545, 548, 553, 557, 560, 561, 562, 576, 578, 579, 581, 583, 598, 599, 604, 607, 608, 609, 610, 612, 614, 617, 619, 620, 623, 625, 626, 627, 631, 633, 634, 635, 636, 637, 638, 650, 654, 659, 660, 663, 669, 671, 672, 673, 676, 678, 679, 684, 685, 688, 692, 693, 695, 696, 698, 700, 703, 704, 706, 713, 728, 731, 733, 735, 738, 742, 744, 746, 747, 750, 751, 753, 761, 765, 769, 770, 771, 772, 773, 774, 776, 778, 786, 789, 790, 791, 792, 793, 795, 797, 798, 799, 800, 801, 809, 816, 818, 819, 822, 823, 824, 827, 828, 829, 830, 833, 839, 840, 841, 842, 849, 851, 854, 857, 858, 864, 865, 875, 886, 887, 900, 921, 922, 924, 926, 927, 929, 930, 931, 933, 934, 935, 936, 938, 939, 942, 946, 947, 948, 952, 953, 955, 956, 958, 967, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "usual": [4, 36, 71, 72, 74, 110, 111, 113, 118, 150, 152, 165, 179, 180, 229, 232, 235, 244, 245, 274, 284, 299, 320, 324, 325, 336, 338, 340, 346, 349, 350, 351, 360, 363, 364, 367, 368, 370, 371, 372, 401, 407, 489, 491, 493, 498, 510, 511, 558, 559, 581, 591, 609, 610, 617, 619, 627, 628, 629, 643, 676, 708, 753, 773, 777, 849, 886, 921, 922, 924, 927, 928, 929, 931, 932, 933, 936, 937, 938, 939, 942, 946, 947, 948, 958, 964, 965, 988], "hot": [4, 65, 104, 106, 118, 151, 179, 244, 274, 275, 279, 283, 299, 351, 370, 371, 502, 517, 532, 599, 609, 610, 620, 631, 812, 814, 816, 817, 820, 822, 823, 830, 928, 942, 981, 987, 988], "For": [4, 8, 9, 12, 13, 18, 25, 29, 33, 36, 40, 42, 44, 45, 49, 52, 53, 55, 62, 67, 73, 78, 82, 86, 102, 104, 106, 111, 112, 114, 116, 129, 130, 133, 135, 137, 142, 146, 147, 151, 152, 167, 168, 179, 180, 183, 184, 187, 196, 197, 199, 201, 204, 206, 207, 209, 210, 211, 219, 226, 232, 235, 236, 242, 250, 252, 253, 263, 268, 270, 271, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 291, 293, 299, 301, 307, 311, 312, 313, 315, 316, 319, 320, 324, 326, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 357, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 372, 373, 374, 379, 384, 389, 392, 394, 395, 396, 397, 398, 400, 401, 402, 405, 407, 408, 409, 411, 412, 413, 415, 416, 417, 419, 423, 425, 433, 434, 435, 436, 440, 447, 449, 454, 465, 466, 474, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 532, 534, 535, 536, 537, 539, 540, 542, 543, 544, 545, 548, 553, 558, 559, 560, 561, 562, 565, 570, 573, 574, 578, 579, 580, 581, 582, 583, 584, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 638, 639, 640, 643, 644, 646, 650, 652, 655, 657, 658, 679, 680, 688, 691, 692, 713, 719, 728, 733, 734, 737, 738, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 761, 769, 770, 771, 772, 773, 774, 776, 778, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 815, 818, 819, 821, 822, 824, 825, 826, 827, 828, 829, 830, 834, 835, 836, 837, 838, 839, 840, 841, 842, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 869, 875, 895, 916, 921, 922, 924, 925, 926, 927, 928, 929, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 946, 947, 948, 951, 955, 956, 958, 965, 966, 967, 973, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "consist": [4, 7, 24, 29, 33, 51, 52, 64, 73, 81, 83, 85, 108, 114, 121, 133, 138, 140, 143, 147, 179, 197, 212, 241, 244, 270, 278, 281, 284, 307, 312, 320, 324, 331, 333, 335, 338, 340, 344, 345, 346, 347, 350, 351, 352, 361, 363, 365, 369, 370, 371, 373, 381, 382, 384, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 441, 448, 482, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 505, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 542, 562, 578, 579, 580, 581, 586, 589, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 623, 624, 625, 628, 629, 630, 638, 639, 640, 641, 642, 650, 651, 685, 745, 746, 754, 777, 778, 779, 781, 782, 783, 784, 792, 793, 795, 797, 800, 801, 807, 812, 813, 814, 816, 820, 821, 824, 825, 827, 828, 830, 841, 842, 845, 849, 850, 852, 853, 855, 858, 860, 869, 871, 892, 903, 906, 921, 924, 925, 926, 928, 929, 931, 932, 933, 935, 936, 942, 945, 947, 948, 951, 952, 953, 956, 958, 965, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989], "scale": [4, 5, 12, 23, 25, 33, 36, 39, 42, 43, 51, 53, 56, 65, 66, 72, 75, 78, 87, 90, 91, 115, 133, 135, 136, 137, 140, 141, 142, 148, 152, 156, 159, 160, 167, 179, 181, 193, 194, 195, 197, 198, 201, 206, 212, 226, 232, 235, 236, 237, 242, 269, 270, 271, 272, 273, 282, 285, 293, 294, 296, 299, 320, 323, 324, 330, 331, 332, 335, 338, 343, 347, 349, 350, 351, 362, 363, 364, 368, 370, 372, 373, 398, 401, 402, 408, 415, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 452, 461, 465, 466, 475, 485, 489, 491, 492, 498, 500, 501, 512, 513, 533, 541, 542, 548, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 583, 592, 595, 596, 597, 598, 600, 603, 609, 610, 611, 612, 613, 623, 625, 627, 628, 629, 632, 638, 639, 640, 641, 643, 645, 650, 654, 667, 691, 697, 707, 709, 719, 725, 727, 753, 761, 764, 775, 776, 777, 789, 790, 791, 806, 807, 810, 813, 818, 819, 821, 824, 826, 827, 829, 834, 835, 836, 838, 839, 841, 842, 849, 850, 851, 852, 853, 854, 855, 908, 909, 910, 921, 924, 925, 928, 932, 933, 934, 935, 936, 940, 946, 947, 953, 956, 958, 965, 966, 968, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988], "same": [4, 7, 8, 15, 24, 31, 33, 36, 40, 49, 52, 53, 59, 65, 66, 83, 85, 87, 90, 93, 95, 100, 102, 105, 108, 109, 111, 112, 116, 133, 135, 151, 152, 154, 165, 167, 168, 173, 179, 180, 181, 187, 197, 215, 216, 226, 230, 231, 232, 233, 235, 236, 238, 240, 241, 243, 248, 253, 258, 270, 273, 274, 276, 278, 279, 281, 283, 291, 299, 307, 311, 312, 313, 319, 320, 324, 325, 326, 332, 333, 335, 337, 338, 340, 342, 344, 347, 349, 350, 351, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 383, 386, 390, 391, 401, 407, 416, 420, 421, 422, 423, 424, 425, 426, 427, 429, 444, 446, 447, 449, 455, 459, 460, 482, 483, 487, 488, 489, 490, 491, 494, 498, 500, 502, 503, 504, 505, 508, 510, 511, 512, 513, 515, 516, 518, 519, 540, 541, 553, 554, 557, 561, 562, 564, 573, 578, 579, 580, 583, 584, 597, 600, 603, 604, 606, 609, 610, 614, 617, 618, 619, 623, 624, 625, 626, 627, 628, 629, 635, 638, 650, 655, 656, 663, 664, 666, 668, 676, 681, 682, 686, 705, 706, 707, 728, 729, 730, 736, 738, 740, 742, 743, 745, 746, 747, 748, 750, 751, 753, 755, 756, 761, 765, 766, 770, 771, 772, 773, 774, 775, 776, 791, 792, 793, 797, 799, 800, 801, 812, 813, 814, 818, 819, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 838, 849, 850, 857, 859, 871, 875, 886, 898, 903, 906, 907, 917, 921, 922, 924, 926, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 942, 946, 947, 948, 953, 962, 967, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "minmaxscal": [4, 5, 66, 129, 156, 200, 269, 283, 326, 364, 415, 835, 922, 942, 975, 978, 981, 983, 984, 985, 989], "although": [4, 9, 23, 105, 118, 150, 176, 197, 206, 223, 252, 320, 326, 340, 351, 363, 364, 368, 371, 447, 764, 767, 820, 931, 933, 934, 935, 938, 948, 958, 965, 966, 967, 973, 981, 988], "doe": [4, 7, 8, 9, 12, 22, 23, 25, 28, 36, 42, 49, 52, 64, 66, 67, 78, 96, 104, 107, 113, 118, 133, 141, 151, 152, 176, 179, 185, 197, 199, 200, 201, 204, 206, 209, 210, 211, 213, 223, 224, 230, 235, 237, 238, 242, 244, 245, 252, 253, 266, 273, 275, 277, 279, 284, 285, 291, 292, 297, 299, 307, 309, 311, 312, 313, 324, 332, 336, 338, 339, 340, 342, 346, 350, 351, 357, 361, 362, 363, 364, 367, 368, 370, 371, 372, 373, 386, 392, 394, 398, 400, 401, 405, 407, 418, 424, 430, 438, 450, 454, 459, 478, 486, 488, 489, 490, 492, 495, 497, 500, 501, 508, 509, 510, 511, 512, 513, 515, 516, 532, 533, 534, 539, 540, 542, 544, 545, 548, 553, 557, 561, 583, 589, 600, 601, 602, 605, 606, 607, 610, 622, 633, 634, 649, 651, 653, 658, 678, 679, 680, 684, 686, 688, 693, 696, 728, 733, 734, 737, 738, 742, 747, 750, 751, 761, 806, 810, 811, 812, 814, 816, 818, 821, 822, 823, 826, 829, 830, 838, 841, 842, 846, 849, 850, 857, 858, 859, 860, 864, 869, 873, 886, 889, 890, 898, 900, 916, 921, 922, 924, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 938, 940, 942, 946, 947, 948, 967, 973, 974, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989], "result": [4, 5, 6, 9, 13, 18, 22, 23, 24, 25, 27, 29, 33, 36, 38, 39, 40, 41, 42, 44, 49, 50, 55, 57, 61, 65, 67, 69, 74, 78, 85, 88, 90, 92, 96, 102, 103, 104, 105, 108, 111, 112, 114, 116, 117, 126, 132, 133, 135, 137, 139, 143, 146, 151, 152, 153, 154, 159, 164, 165, 168, 169, 174, 180, 181, 183, 187, 193, 194, 197, 199, 200, 203, 206, 209, 211, 216, 221, 226, 227, 229, 230, 233, 235, 236, 238, 241, 242, 243, 244, 246, 247, 250, 253, 255, 259, 268, 269, 270, 273, 274, 275, 278, 281, 283, 285, 286, 288, 291, 293, 299, 303, 304, 307, 311, 313, 317, 318, 324, 325, 326, 332, 333, 335, 338, 340, 342, 343, 344, 346, 349, 350, 351, 352, 357, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 386, 392, 393, 395, 397, 398, 401, 402, 403, 404, 405, 406, 408, 410, 413, 415, 418, 420, 421, 422, 423, 424, 425, 426, 427, 430, 440, 459, 460, 462, 464, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 530, 531, 532, 533, 535, 539, 540, 542, 558, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 581, 582, 583, 585, 587, 591, 594, 603, 604, 609, 615, 616, 617, 618, 627, 628, 629, 637, 640, 641, 642, 643, 644, 645, 646, 659, 661, 663, 668, 675, 676, 678, 679, 680, 681, 682, 686, 687, 688, 704, 706, 707, 714, 721, 724, 728, 729, 730, 731, 733, 734, 735, 737, 741, 742, 745, 746, 747, 749, 750, 751, 752, 757, 761, 762, 763, 764, 766, 767, 770, 776, 777, 778, 780, 781, 782, 783, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 811, 813, 814, 822, 823, 826, 827, 830, 838, 842, 846, 849, 851, 854, 857, 858, 859, 860, 861, 862, 869, 870, 885, 886, 888, 892, 897, 903, 906, 922, 924, 926, 928, 929, 931, 932, 933, 935, 936, 937, 938, 939, 940, 942, 944, 946, 947, 948, 952, 953, 955, 958, 962, 963, 965, 966, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "becaus": [4, 5, 18, 23, 25, 36, 43, 46, 65, 75, 78, 104, 106, 111, 133, 136, 139, 142, 151, 152, 154, 159, 165, 172, 179, 185, 187, 197, 212, 222, 232, 235, 236, 241, 252, 253, 269, 270, 271, 273, 277, 278, 279, 290, 299, 307, 311, 312, 313, 315, 320, 324, 325, 333, 340, 343, 346, 349, 350, 351, 357, 360, 361, 363, 367, 368, 369, 370, 371, 373, 376, 384, 398, 399, 412, 416, 426, 433, 434, 435, 485, 487, 503, 505, 507, 509, 511, 513, 516, 519, 521, 539, 542, 558, 559, 562, 583, 584, 586, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 623, 624, 627, 628, 629, 630, 631, 640, 650, 660, 663, 664, 672, 673, 674, 696, 713, 735, 738, 742, 747, 761, 773, 777, 782, 783, 792, 795, 797, 799, 800, 801, 807, 818, 819, 827, 829, 830, 834, 835, 837, 838, 839, 840, 850, 852, 855, 858, 860, 896, 922, 924, 925, 926, 927, 928, 929, 930, 932, 933, 935, 937, 939, 942, 947, 948, 956, 966, 979, 980, 982, 983, 984, 985, 987], "compar": [4, 5, 18, 22, 23, 25, 32, 33, 39, 45, 50, 52, 53, 59, 66, 74, 76, 78, 88, 93, 95, 97, 99, 100, 102, 107, 108, 111, 116, 118, 133, 139, 146, 147, 148, 151, 153, 154, 157, 161, 163, 167, 168, 174, 176, 179, 182, 185, 187, 189, 196, 197, 199, 200, 203, 205, 208, 211, 216, 218, 223, 224, 228, 230, 232, 240, 242, 244, 246, 254, 258, 262, 263, 267, 272, 274, 278, 283, 311, 312, 313, 319, 320, 326, 333, 335, 338, 340, 360, 361, 363, 365, 366, 367, 368, 370, 372, 373, 392, 393, 394, 396, 397, 399, 400, 401, 403, 409, 414, 415, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 441, 447, 453, 455, 463, 465, 473, 475, 479, 482, 488, 502, 503, 512, 513, 514, 516, 522, 590, 595, 596, 604, 606, 608, 609, 614, 617, 619, 627, 628, 635, 646, 656, 663, 666, 681, 688, 693, 736, 746, 747, 761, 772, 775, 782, 791, 795, 798, 802, 806, 809, 810, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 835, 838, 851, 853, 854, 921, 924, 925, 926, 928, 929, 931, 932, 933, 934, 935, 936, 938, 942, 943, 946, 947, 948, 951, 952, 965, 966, 973, 975, 980, 981, 986], "onehotencod": [4, 65, 104, 108, 118, 151, 152, 179, 197, 208, 217, 219, 279, 282, 284, 332, 351, 364, 370, 417, 418, 517, 532, 533, 812, 816, 817, 820, 823, 830, 942, 974, 977, 981, 982, 984, 985, 986, 987, 988, 989], "linear_model": [4, 7, 8, 10, 13, 23, 25, 27, 50, 65, 67, 69, 78, 104, 118, 120, 121, 123, 125, 132, 133, 135, 146, 148, 150, 151, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 206, 207, 208, 209, 214, 217, 219, 231, 238, 243, 244, 248, 249, 252, 271, 274, 275, 278, 281, 282, 283, 284, 285, 292, 311, 320, 324, 326, 327, 337, 338, 340, 344, 346, 347, 350, 351, 364, 370, 390, 416, 488, 490, 493, 494, 496, 497, 499, 518, 519, 520, 521, 548, 582, 583, 585, 586, 589, 591, 592, 593, 594, 651, 652, 738, 761, 770, 771, 772, 780, 781, 782, 783, 807, 824, 828, 849, 850, 853, 856, 881, 924, 927, 928, 932, 933, 938, 940, 942, 946, 962, 963, 965, 967, 973, 974, 975, 976, 977, 978, 979, 980], "ridgecv": [4, 69, 118, 133, 151, 214, 351, 370, 519, 594, 623, 626, 928, 973, 975, 979, 980, 981, 982, 983, 984, 985, 986, 987], "numpi": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 77, 78, 81, 83, 85, 86, 87, 88, 89, 91, 92, 93, 95, 96, 98, 100, 101, 102, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 124, 126, 128, 129, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 204, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 317, 318, 319, 320, 324, 331, 332, 333, 336, 338, 339, 340, 341, 342, 344, 346, 347, 349, 350, 351, 354, 356, 357, 359, 360, 363, 364, 367, 368, 369, 370, 371, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 411, 413, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 436, 441, 444, 445, 447, 454, 457, 459, 460, 482, 485, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 503, 520, 521, 532, 533, 539, 540, 542, 578, 579, 580, 581, 582, 583, 584, 594, 597, 598, 600, 603, 604, 608, 609, 610, 611, 612, 613, 614, 617, 619, 621, 623, 627, 628, 629, 635, 639, 642, 643, 644, 646, 650, 653, 654, 657, 658, 660, 663, 665, 676, 677, 679, 680, 684, 685, 688, 689, 704, 706, 723, 729, 731, 732, 733, 734, 737, 738, 739, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 775, 777, 778, 781, 782, 784, 785, 786, 787, 788, 789, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 812, 813, 816, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 849, 851, 852, 854, 855, 857, 872, 884, 886, 890, 891, 892, 894, 895, 901, 903, 906, 919, 921, 922, 927, 928, 930, 932, 933, 935, 938, 942, 944, 947, 951, 953, 955, 958, 961, 962, 963, 965, 966, 967, 973, 976, 977, 979, 980, 981, 983, 985, 986, 987, 988, 989], "np": [4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 77, 78, 83, 86, 87, 88, 89, 91, 92, 93, 95, 96, 98, 100, 101, 102, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 124, 126, 128, 129, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 204, 206, 209, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 224, 225, 226, 227, 229, 230, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 317, 318, 319, 320, 324, 332, 333, 338, 340, 343, 344, 347, 349, 351, 360, 363, 364, 367, 368, 369, 370, 371, 373, 376, 378, 381, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 411, 413, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 436, 447, 448, 459, 460, 471, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 503, 508, 509, 510, 511, 512, 514, 515, 516, 517, 520, 521, 532, 533, 536, 537, 539, 540, 544, 545, 548, 557, 560, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 617, 619, 621, 622, 623, 625, 626, 627, 628, 629, 632, 633, 634, 635, 642, 643, 646, 653, 654, 657, 658, 660, 663, 664, 665, 666, 676, 677, 679, 680, 684, 685, 688, 689, 691, 704, 706, 713, 719, 723, 728, 731, 732, 733, 734, 737, 738, 739, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 772, 773, 775, 776, 777, 778, 781, 782, 784, 785, 786, 787, 788, 789, 790, 794, 795, 796, 797, 799, 800, 801, 805, 806, 813, 814, 816, 822, 823, 824, 825, 826, 828, 829, 830, 837, 838, 841, 842, 844, 845, 846, 849, 851, 852, 854, 855, 857, 858, 859, 860, 867, 869, 870, 872, 874, 875, 884, 886, 891, 894, 895, 897, 901, 903, 906, 908, 909, 910, 921, 922, 927, 928, 930, 932, 933, 935, 936, 938, 942, 943, 944, 946, 947, 948, 958, 962, 963, 965, 966, 967, 974, 976, 979, 981, 982, 984, 985, 986, 987, 988, 989], "one_hot_encod": [4, 108], "handle_unknown": [4, 65, 104, 108, 118, 152, 153, 208, 217, 219, 279, 282, 285, 822, 823, 942, 977, 981, 985, 986], "ignor": [4, 6, 8, 16, 40, 45, 57, 65, 104, 108, 115, 118, 152, 167, 179, 194, 208, 217, 219, 227, 269, 270, 278, 279, 282, 285, 312, 338, 340, 342, 344, 351, 354, 363, 364, 370, 371, 381, 382, 386, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 411, 412, 415, 418, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 439, 454, 459, 460, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 502, 508, 509, 510, 511, 514, 515, 516, 517, 530, 532, 533, 534, 539, 540, 541, 542, 553, 554, 578, 579, 580, 581, 583, 584, 586, 590, 594, 600, 601, 602, 605, 606, 607, 609, 615, 616, 627, 628, 629, 639, 640, 641, 642, 643, 658, 664, 665, 676, 679, 680, 688, 705, 706, 713, 719, 724, 728, 733, 734, 737, 738, 745, 746, 748, 749, 750, 752, 754, 755, 756, 757, 760, 762, 763, 764, 765, 766, 767, 768, 793, 794, 795, 797, 798, 801, 808, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 841, 842, 849, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 883, 907, 928, 929, 932, 934, 938, 942, 947, 963, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988], "sparse_output": [4, 108, 219, 279, 285, 517, 816, 820, 822, 833, 942, 988], "alpha": [4, 5, 7, 8, 10, 12, 13, 15, 16, 22, 24, 28, 33, 36, 38, 41, 48, 51, 55, 60, 69, 75, 78, 85, 87, 88, 90, 91, 92, 94, 95, 99, 101, 102, 107, 111, 114, 115, 117, 118, 119, 133, 135, 138, 140, 141, 142, 143, 144, 146, 147, 151, 158, 159, 160, 161, 163, 164, 165, 167, 168, 173, 174, 176, 177, 179, 180, 181, 183, 184, 188, 191, 192, 197, 199, 200, 203, 211, 212, 218, 221, 235, 236, 237, 238, 239, 242, 243, 245, 247, 248, 250, 252, 253, 256, 258, 261, 263, 268, 270, 273, 274, 275, 276, 278, 282, 284, 285, 290, 292, 296, 297, 300, 301, 304, 308, 309, 311, 324, 333, 340, 344, 349, 365, 366, 368, 370, 372, 373, 375, 422, 423, 429, 478, 482, 484, 486, 487, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 511, 546, 547, 549, 562, 564, 566, 567, 574, 582, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 613, 614, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 638, 673, 698, 784, 785, 786, 788, 806, 807, 845, 857, 858, 859, 860, 921, 927, 928, 932, 934, 936, 940, 945, 946, 947, 948, 962, 965, 967, 970, 973, 975, 976, 977, 978, 980, 981, 985, 986, 987, 988], "logspac": [4, 12, 67, 71, 93, 123, 124, 133, 136, 141, 151, 172, 183, 184, 210, 212, 225, 236, 248, 250, 257, 268, 275, 278, 299, 307, 927, 928, 962, 963, 965], "6": [4, 9, 10, 11, 12, 15, 24, 28, 36, 40, 42, 45, 46, 48, 51, 52, 55, 56, 57, 58, 59, 60, 62, 67, 69, 71, 72, 73, 75, 81, 85, 87, 95, 100, 112, 115, 117, 123, 128, 133, 138, 142, 143, 146, 147, 151, 152, 156, 158, 159, 172, 177, 179, 180, 181, 183, 193, 197, 199, 200, 203, 206, 209, 210, 213, 216, 217, 221, 222, 223, 224, 226, 227, 230, 234, 235, 236, 237, 238, 244, 245, 246, 247, 250, 252, 255, 258, 266, 268, 273, 275, 277, 278, 281, 284, 285, 293, 299, 300, 302, 304, 307, 309, 312, 313, 318, 320, 332, 333, 335, 336, 343, 344, 350, 354, 355, 356, 361, 363, 364, 367, 368, 370, 371, 372, 399, 400, 401, 402, 403, 404, 413, 433, 434, 435, 436, 456, 475, 481, 489, 491, 492, 498, 514, 520, 521, 544, 545, 562, 565, 566, 576, 578, 579, 581, 595, 596, 621, 640, 644, 672, 678, 688, 695, 696, 700, 701, 703, 719, 735, 738, 745, 746, 748, 749, 754, 756, 757, 759, 764, 765, 768, 773, 775, 784, 785, 786, 788, 789, 790, 797, 799, 800, 801, 816, 817, 819, 822, 824, 827, 828, 833, 864, 886, 889, 891, 895, 921, 922, 926, 928, 929, 932, 942, 943, 946, 947, 950, 958, 962, 963, 965, 971, 974, 975, 976, 981, 986], "25": [4, 5, 6, 7, 9, 10, 11, 22, 24, 38, 41, 73, 77, 82, 91, 93, 95, 99, 103, 111, 129, 136, 146, 159, 169, 206, 223, 235, 266, 268, 273, 275, 288, 289, 311, 318, 320, 324, 344, 367, 370, 371, 396, 428, 452, 455, 521, 548, 629, 684, 744, 764, 775, 801, 819, 824, 826, 827, 830, 838, 839, 841, 842, 927, 928, 932, 933, 935, 942, 963, 973, 975, 981, 984], "naive_linear_pipelin": 4, "14": [4, 11, 34, 45, 55, 57, 58, 61, 74, 90, 128, 152, 168, 201, 206, 211, 234, 240, 241, 249, 252, 253, 276, 277, 286, 306, 309, 325, 333, 335, 350, 363, 367, 449, 461, 504, 505, 536, 537, 586, 594, 643, 761, 765, 815, 925, 928, 932, 942, 947, 950, 958, 971, 973, 974, 976, 977, 981, 986], "three": [4, 7, 24, 36, 37, 42, 53, 71, 81, 82, 99, 104, 105, 108, 110, 119, 120, 121, 130, 143, 151, 171, 176, 179, 181, 188, 190, 212, 221, 224, 279, 282, 303, 325, 331, 335, 342, 354, 360, 363, 367, 368, 369, 371, 402, 413, 449, 660, 888, 925, 927, 928, 929, 932, 935, 942, 946, 947, 951, 958, 966, 973], "higher": [4, 52, 73, 88, 93, 102, 104, 111, 114, 135, 137, 142, 143, 151, 152, 153, 156, 179, 180, 197, 203, 204, 227, 229, 233, 235, 238, 249, 258, 278, 299, 312, 313, 320, 324, 333, 336, 340, 360, 363, 365, 370, 372, 373, 374, 396, 399, 400, 422, 429, 460, 483, 490, 494, 499, 504, 505, 508, 509, 510, 511, 512, 513, 515, 516, 517, 524, 539, 542, 558, 559, 570, 578, 582, 586, 588, 597, 598, 603, 604, 611, 612, 613, 614, 627, 629, 630, 655, 674, 678, 702, 735, 745, 747, 750, 751, 753, 761, 768, 773, 776, 795, 798, 824, 841, 842, 843, 851, 852, 853, 854, 855, 862, 924, 928, 929, 931, 932, 935, 939, 942, 946, 947, 965, 967, 974, 979, 981, 988], "suspect": 4, "origin": [4, 5, 13, 15, 19, 20, 27, 42, 43, 44, 47, 51, 53, 68, 69, 85, 87, 88, 95, 116, 129, 130, 135, 137, 139, 140, 146, 147, 152, 156, 167, 168, 199, 200, 201, 203, 204, 210, 211, 212, 227, 232, 238, 261, 271, 274, 278, 289, 305, 311, 313, 320, 333, 335, 337, 338, 340, 342, 343, 349, 351, 357, 360, 364, 367, 368, 370, 371, 373, 374, 375, 376, 386, 393, 395, 396, 397, 398, 401, 410, 414, 415, 416, 426, 433, 434, 435, 444, 445, 446, 452, 470, 482, 485, 486, 488, 489, 490, 491, 492, 494, 495, 504, 505, 506, 507, 510, 512, 513, 514, 516, 518, 519, 520, 521, 524, 527, 532, 535, 545, 558, 559, 565, 581, 583, 589, 592, 593, 594, 600, 622, 643, 647, 652, 678, 713, 719, 774, 795, 809, 813, 814, 817, 818, 822, 823, 825, 826, 827, 829, 838, 841, 842, 843, 846, 851, 854, 867, 869, 870, 874, 875, 903, 906, 925, 926, 928, 929, 931, 932, 935, 938, 943, 944, 945, 946, 949, 952, 956, 958, 967, 976, 977, 979, 981, 983, 985, 987], "mere": [4, 235, 351, 776, 946], "min": [4, 9, 10, 11, 12, 13, 23, 25, 28, 48, 53, 69, 81, 85, 88, 101, 107, 110, 111, 116, 126, 137, 139, 140, 141, 147, 161, 167, 168, 174, 181, 182, 185, 193, 200, 210, 211, 213, 252, 259, 260, 266, 268, 270, 273, 275, 276, 278, 293, 298, 305, 308, 347, 363, 366, 368, 433, 434, 435, 436, 463, 485, 486, 489, 491, 492, 500, 501, 514, 578, 582, 583, 605, 606, 607, 608, 633, 634, 655, 691, 707, 730, 750, 751, 798, 806, 807, 819, 828, 835, 886, 897, 928, 932, 935, 942, 979, 982, 984, 985, 988], "properli": [4, 23, 115, 140, 230, 281, 326, 336, 338, 342, 346, 354, 369, 849, 850, 851, 852, 853, 854, 855, 921, 976, 978, 980, 981, 983, 984, 985, 986, 987, 988, 989], "automat": [4, 8, 12, 42, 58, 60, 65, 93, 123, 132, 158, 182, 221, 222, 233, 236, 273, 282, 286, 292, 301, 325, 327, 333, 336, 338, 340, 342, 346, 351, 354, 359, 363, 364, 365, 368, 370, 371, 372, 385, 401, 403, 407, 413, 415, 416, 418, 447, 450, 466, 492, 500, 502, 508, 512, 515, 534, 539, 542, 545, 553, 594, 596, 597, 598, 603, 604, 609, 610, 611, 612, 613, 614, 617, 618, 619, 623, 625, 626, 627, 629, 632, 635, 638, 639, 642, 646, 749, 764, 767, 775, 785, 806, 807, 810, 811, 813, 822, 823, 830, 841, 842, 849, 851, 854, 857, 859, 863, 875, 903, 906, 921, 923, 926, 931, 936, 942, 946, 948, 952, 953, 962, 973, 976, 977, 978, 984, 987, 988], "term": [4, 13, 14, 23, 29, 53, 90, 102, 108, 111, 140, 150, 167, 168, 179, 181, 183, 193, 196, 197, 233, 237, 253, 268, 284, 307, 311, 313, 326, 327, 338, 340, 342, 349, 357, 361, 362, 363, 365, 367, 368, 370, 373, 395, 398, 400, 403, 410, 413, 475, 486, 489, 491, 495, 498, 500, 539, 540, 541, 542, 555, 558, 559, 583, 584, 591, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 623, 624, 625, 626, 627, 629, 631, 638, 646, 806, 807, 824, 828, 831, 849, 850, 851, 852, 853, 854, 855, 921, 923, 926, 927, 928, 929, 932, 933, 934, 936, 937, 942, 946, 947, 958, 967, 981, 987, 988], "raw": [4, 12, 14, 33, 74, 87, 118, 140, 151, 156, 271, 290, 313, 324, 333, 346, 351, 361, 362, 363, 365, 368, 371, 420, 425, 452, 453, 454, 510, 511, 512, 514, 533, 539, 540, 541, 542, 585, 628, 641, 645, 656, 736, 795, 853, 929, 932, 936, 938, 939, 942, 945, 964, 966, 974, 978, 981, 984], "recogn": [4, 26, 78, 106, 148, 180, 284, 344, 363, 371, 453, 648, 664, 775, 854, 932, 958], "increas": [4, 7, 14, 24, 33, 39, 52, 53, 56, 69, 88, 100, 102, 107, 115, 129, 135, 140, 151, 152, 156, 159, 161, 170, 179, 180, 181, 183, 197, 204, 210, 223, 235, 236, 237, 242, 248, 268, 274, 275, 278, 283, 289, 299, 307, 312, 313, 315, 324, 325, 326, 337, 346, 347, 361, 363, 365, 368, 370, 371, 374, 392, 396, 403, 414, 429, 483, 487, 504, 505, 510, 511, 512, 513, 518, 519, 539, 542, 578, 586, 587, 588, 596, 601, 602, 605, 606, 607, 609, 610, 617, 619, 627, 628, 629, 633, 634, 636, 637, 643, 657, 658, 663, 732, 739, 750, 751, 778, 797, 799, 800, 801, 804, 806, 807, 823, 849, 850, 886, 921, 923, 927, 928, 929, 931, 932, 935, 942, 946, 947, 948, 956, 973, 975, 978, 982, 984, 985, 988], "8": [4, 5, 6, 7, 8, 9, 12, 13, 23, 24, 25, 28, 29, 31, 33, 39, 40, 41, 44, 46, 49, 55, 57, 59, 60, 64, 66, 69, 74, 77, 81, 82, 83, 85, 86, 89, 90, 94, 96, 102, 104, 108, 110, 111, 113, 116, 119, 120, 123, 132, 133, 136, 138, 141, 143, 144, 147, 150, 152, 154, 156, 158, 159, 164, 170, 173, 179, 180, 187, 189, 195, 197, 199, 200, 201, 203, 204, 207, 211, 212, 213, 215, 217, 218, 221, 222, 223, 225, 226, 227, 230, 231, 233, 234, 235, 236, 238, 239, 240, 242, 245, 246, 252, 255, 257, 261, 265, 268, 270, 271, 273, 275, 276, 277, 278, 279, 281, 290, 292, 293, 296, 299, 303, 304, 306, 308, 311, 312, 313, 318, 320, 325, 332, 333, 335, 336, 338, 343, 344, 354, 355, 356, 361, 363, 367, 368, 370, 371, 372, 373, 391, 395, 396, 398, 400, 401, 403, 413, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 438, 441, 453, 454, 465, 482, 485, 489, 491, 494, 496, 498, 500, 501, 506, 507, 516, 521, 533, 539, 540, 541, 542, 579, 580, 599, 609, 621, 627, 640, 643, 644, 645, 646, 650, 653, 657, 658, 660, 666, 672, 677, 678, 679, 691, 695, 696, 700, 701, 703, 732, 733, 735, 738, 739, 743, 745, 748, 749, 754, 757, 764, 765, 768, 775, 778, 787, 789, 790, 796, 806, 807, 808, 814, 821, 830, 851, 854, 884, 886, 890, 921, 922, 928, 929, 930, 932, 935, 940, 942, 946, 950, 956, 958, 962, 963, 964, 965, 966, 970, 971, 974, 975, 976, 980, 981, 986, 987, 989], "strong": [4, 148, 150, 151, 157, 172, 176, 183, 185, 212, 362, 368, 370, 373, 475, 600, 623, 925, 926, 928, 929, 931, 939, 947, 965], "similar": [4, 5, 7, 12, 16, 23, 24, 33, 45, 47, 52, 55, 69, 78, 85, 89, 111, 132, 135, 142, 150, 151, 152, 153, 179, 181, 193, 199, 201, 202, 203, 206, 212, 227, 232, 235, 238, 241, 242, 243, 252, 253, 273, 284, 298, 307, 312, 313, 320, 324, 330, 332, 334, 336, 337, 338, 340, 343, 344, 347, 349, 351, 357, 360, 361, 363, 366, 367, 368, 370, 371, 372, 373, 374, 392, 393, 395, 396, 397, 401, 403, 405, 406, 454, 459, 460, 487, 533, 540, 541, 542, 561, 628, 643, 646, 654, 656, 666, 670, 675, 678, 679, 681, 684, 688, 690, 705, 710, 711, 736, 740, 741, 744, 745, 746, 771, 776, 821, 842, 845, 849, 850, 851, 852, 870, 921, 924, 925, 927, 928, 929, 931, 933, 935, 936, 938, 939, 942, 944, 945, 946, 947, 948, 952, 953, 958, 966, 969, 973, 977, 978, 979, 981, 985, 986], "magnitud": [4, 95, 101, 136, 147, 151, 196, 240, 273, 278, 284, 324, 333, 344, 363, 370, 373, 564, 603, 655, 829, 928, 932, 936, 942, 946, 948, 975, 982], "18": [4, 8, 36, 40, 55, 57, 99, 144, 190, 206, 211, 235, 277, 311, 312, 313, 338, 344, 364, 367, 368, 371, 398, 410, 443, 451, 452, 453, 455, 456, 461, 486, 487, 489, 491, 492, 508, 509, 510, 511, 514, 515, 516, 517, 520, 522, 523, 524, 525, 526, 528, 529, 540, 545, 550, 551, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 597, 600, 609, 610, 622, 665, 669, 681, 684, 685, 691, 693, 745, 746, 768, 782, 805, 806, 807, 813, 819, 827, 828, 839, 849, 850, 857, 858, 859, 860, 861, 885, 886, 921, 930, 932, 942, 950, 971, 973, 974, 977, 978, 980, 981, 983, 984], "20": [4, 7, 8, 14, 15, 23, 24, 25, 30, 31, 35, 36, 39, 42, 43, 46, 50, 56, 62, 71, 75, 83, 85, 91, 95, 99, 101, 107, 111, 114, 118, 119, 121, 126, 128, 129, 130, 141, 150, 152, 153, 161, 168, 169, 171, 175, 176, 178, 179, 180, 183, 188, 191, 192, 193, 196, 202, 210, 215, 223, 225, 235, 236, 238, 239, 241, 246, 247, 249, 253, 257, 258, 259, 260, 261, 264, 277, 278, 279, 282, 283, 284, 285, 288, 289, 292, 296, 298, 302, 304, 309, 312, 313, 317, 318, 331, 335, 338, 340, 342, 343, 344, 354, 363, 370, 371, 393, 398, 400, 415, 416, 420, 422, 423, 429, 439, 440, 441, 442, 443, 445, 447, 448, 451, 453, 455, 456, 463, 466, 467, 474, 482, 487, 488, 493, 496, 497, 499, 503, 506, 507, 510, 511, 512, 513, 514, 520, 521, 533, 540, 543, 545, 548, 550, 580, 581, 596, 600, 609, 617, 618, 619, 627, 629, 647, 655, 659, 664, 667, 675, 676, 689, 706, 707, 717, 740, 741, 745, 746, 747, 761, 771, 772, 773, 776, 778, 781, 782, 783, 786, 787, 794, 795, 806, 807, 808, 809, 811, 813, 814, 822, 823, 824, 825, 830, 844, 845, 847, 848, 853, 861, 867, 869, 870, 921, 928, 932, 935, 938, 939, 942, 945, 950, 955, 956, 959, 965, 969, 971, 973, 979, 982, 985, 987, 988], "discret": [4, 42, 95, 97, 134, 148, 152, 179, 197, 272, 276, 326, 330, 333, 334, 342, 350, 351, 363, 368, 370, 371, 373, 390, 391, 399, 403, 411, 412, 413, 443, 465, 466, 471, 473, 504, 510, 522, 539, 540, 543, 546, 547, 550, 551, 558, 559, 561, 562, 563, 567, 568, 569, 608, 609, 692, 744, 747, 758, 775, 784, 785, 788, 810, 814, 822, 823, 826, 829, 838, 849, 854, 857, 858, 895, 921, 928, 929, 930, 932, 933, 935, 948, 952, 958, 969, 975, 978, 986, 987, 988], "manner": [4, 69, 85, 130, 152, 156, 223, 285, 286, 325, 338, 344, 363, 368, 370, 371, 660, 789, 790, 921, 932, 948, 976, 983], "uniqu": [4, 15, 22, 27, 38, 43, 44, 52, 53, 58, 62, 105, 106, 112, 113, 153, 194, 197, 223, 244, 262, 279, 291, 311, 312, 313, 332, 340, 347, 351, 363, 364, 367, 370, 371, 392, 401, 405, 407, 415, 418, 447, 500, 501, 502, 504, 505, 508, 509, 510, 511, 512, 513, 515, 516, 517, 561, 584, 585, 586, 617, 619, 627, 648, 660, 704, 732, 747, 749, 761, 772, 777, 778, 781, 787, 796, 801, 806, 820, 822, 823, 830, 833, 849, 851, 857, 858, 859, 860, 874, 886, 895, 896, 928, 933, 942, 956, 965, 981, 984, 985, 987, 988, 989], "decid": [4, 11, 52, 55, 65, 227, 232, 235, 242, 333, 338, 352, 371, 373, 401, 408, 510, 511, 586, 597, 598, 601, 602, 603, 604, 605, 606, 607, 611, 612, 613, 614, 622, 632, 635, 745, 791, 792, 793, 795, 797, 799, 800, 801, 812, 931, 938, 956, 986], "therebi": [4, 151, 367, 370, 924, 983], "assumpt": [4, 9, 23, 25, 32, 71, 72, 88, 140, 148, 150, 179, 206, 273, 344, 349, 350, 353, 361, 362, 363, 365, 367, 368, 371, 373, 398, 402, 404, 439, 454, 463, 483, 485, 492, 601, 605, 746, 747, 750, 751, 761, 786, 841, 842, 926, 928, 932, 933, 934, 935, 937, 938, 939, 942, 945, 948, 980, 986], "impli": [4, 135, 312, 313, 368, 370, 373, 425, 524, 533, 561, 562, 573, 685, 873, 928, 929, 967, 984], "give": [4, 12, 13, 22, 23, 35, 40, 45, 55, 57, 59, 65, 69, 87, 110, 135, 140, 144, 146, 151, 152, 168, 170, 176, 179, 180, 181, 206, 227, 232, 237, 244, 255, 259, 262, 271, 284, 285, 292, 324, 326, 333, 335, 337, 338, 340, 344, 346, 349, 350, 351, 352, 357, 360, 361, 362, 363, 364, 365, 368, 370, 371, 375, 386, 398, 400, 402, 410, 423, 447, 450, 454, 484, 489, 500, 501, 502, 503, 508, 509, 515, 516, 517, 544, 545, 548, 558, 559, 589, 598, 612, 616, 627, 671, 686, 689, 742, 747, 750, 751, 761, 770, 771, 772, 774, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 826, 827, 829, 830, 838, 928, 932, 935, 936, 937, 939, 940, 942, 946, 947, 948, 952, 956, 958, 960, 965, 966, 967, 973, 977, 980, 981, 983, 984, 985, 987, 989], "lot": [4, 75, 151, 333, 338, 339, 340, 346, 368, 370, 750, 751, 841, 842, 921, 944, 946, 947, 952, 953, 956, 966, 967, 973, 978, 980, 981, 982, 983, 985], "addit": [4, 5, 7, 12, 13, 14, 61, 65, 75, 85, 88, 99, 103, 105, 108, 109, 132, 140, 141, 142, 147, 151, 152, 158, 163, 168, 180, 181, 203, 216, 237, 244, 249, 252, 273, 282, 283, 290, 313, 317, 320, 324, 325, 330, 331, 332, 333, 334, 336, 337, 338, 340, 343, 344, 346, 349, 350, 352, 354, 357, 362, 363, 365, 367, 368, 371, 372, 373, 374, 385, 393, 394, 396, 397, 401, 408, 420, 425, 447, 454, 483, 485, 487, 488, 490, 492, 493, 494, 500, 504, 505, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 533, 534, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 562, 563, 570, 579, 581, 582, 586, 589, 590, 591, 592, 593, 594, 595, 596, 621, 638, 639, 643, 649, 650, 653, 692, 708, 709, 738, 740, 745, 746, 753, 778, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 805, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 826, 827, 828, 829, 831, 841, 842, 849, 850, 880, 886, 900, 921, 926, 928, 932, 933, 935, 936, 939, 942, 944, 945, 946, 947, 948, 952, 958, 969, 973, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "level": [4, 9, 11, 12, 15, 25, 37, 49, 85, 104, 107, 126, 134, 139, 140, 142, 148, 151, 152, 190, 191, 192, 193, 194, 197, 206, 210, 211, 225, 235, 238, 244, 245, 259, 266, 297, 298, 300, 301, 303, 305, 312, 319, 324, 333, 335, 336, 338, 344, 351, 353, 354, 361, 368, 371, 377, 405, 444, 445, 454, 472, 482, 487, 488, 498, 512, 513, 518, 519, 562, 573, 576, 617, 618, 619, 627, 628, 629, 638, 641, 643, 645, 667, 673, 678, 735, 770, 771, 772, 774, 777, 778, 805, 806, 807, 862, 921, 928, 932, 933, 935, 940, 946, 948, 952, 953, 967, 976, 984, 987, 988], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "rate": [4, 98, 103, 108, 128, 152, 179, 186, 197, 210, 215, 232, 235, 242, 244, 245, 269, 270, 271, 326, 338, 363, 364, 368, 372, 417, 487, 504, 505, 510, 511, 512, 513, 543, 546, 547, 549, 550, 551, 557, 595, 596, 619, 627, 628, 629, 643, 649, 653, 677, 732, 739, 805, 806, 807, 843, 921, 928, 929, 932, 935, 936, 946, 948, 956, 977, 981, 982], "10": [4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 19, 23, 24, 25, 27, 28, 29, 31, 33, 35, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 66, 68, 71, 72, 73, 74, 75, 77, 78, 83, 87, 88, 89, 90, 91, 95, 96, 98, 99, 101, 102, 104, 105, 107, 109, 111, 112, 115, 116, 119, 121, 124, 126, 133, 136, 137, 139, 141, 142, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 163, 169, 173, 177, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 195, 196, 197, 200, 201, 206, 209, 210, 211, 212, 214, 215, 216, 218, 224, 225, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 243, 246, 249, 252, 258, 260, 268, 269, 270, 271, 273, 274, 276, 277, 278, 281, 282, 283, 284, 285, 288, 289, 290, 292, 297, 299, 301, 302, 303, 304, 306, 307, 309, 311, 312, 320, 324, 332, 333, 334, 335, 336, 338, 340, 343, 344, 349, 350, 351, 354, 355, 356, 360, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 376, 390, 395, 398, 400, 402, 403, 404, 410, 411, 413, 426, 443, 444, 451, 452, 453, 455, 461, 462, 463, 464, 467, 471, 472, 475, 479, 482, 486, 487, 488, 489, 490, 492, 493, 495, 497, 499, 503, 506, 507, 508, 509, 512, 513, 515, 516, 517, 518, 519, 521, 533, 534, 544, 545, 550, 551, 562, 568, 570, 578, 581, 583, 585, 586, 591, 593, 594, 595, 600, 610, 615, 616, 617, 618, 620, 621, 623, 624, 626, 627, 628, 629, 636, 637, 642, 643, 656, 666, 676, 692, 706, 719, 745, 746, 747, 748, 749, 750, 751, 758, 761, 762, 763, 764, 765, 767, 768, 773, 775, 777, 778, 784, 785, 786, 788, 789, 790, 796, 805, 806, 807, 815, 819, 822, 823, 826, 838, 846, 852, 855, 857, 858, 862, 886, 890, 896, 900, 902, 918, 921, 922, 928, 929, 930, 932, 933, 935, 936, 938, 939, 942, 946, 947, 950, 958, 962, 963, 965, 966, 967, 970, 971, 974, 975, 976, 981, 983, 984, 985, 987, 988], "better": [4, 5, 9, 18, 22, 28, 46, 68, 69, 71, 72, 73, 74, 78, 81, 85, 88, 102, 110, 111, 118, 128, 139, 140, 146, 153, 159, 165, 168, 179, 180, 181, 187, 194, 196, 197, 203, 211, 212, 226, 229, 235, 237, 238, 241, 244, 245, 271, 277, 278, 285, 286, 299, 311, 312, 313, 315, 320, 324, 333, 337, 338, 339, 340, 342, 343, 344, 346, 351, 353, 357, 361, 363, 365, 367, 368, 369, 370, 371, 373, 400, 401, 489, 491, 498, 510, 511, 512, 513, 558, 559, 581, 622, 628, 643, 660, 675, 684, 689, 692, 713, 746, 774, 784, 785, 786, 787, 788, 789, 790, 795, 806, 807, 826, 827, 830, 838, 841, 842, 849, 850, 900, 921, 922, 924, 925, 926, 928, 929, 931, 932, 934, 935, 936, 940, 942, 945, 946, 948, 953, 955, 956, 960, 962, 967, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "confirm": [4, 78, 102, 108, 111, 153, 179, 181, 238, 241, 244, 278, 313, 342, 921, 942, 981], "progress": [4, 7, 8, 85, 121, 147, 172, 258, 285, 335, 338, 342, 343, 352, 354, 359, 363, 510, 511, 643, 778, 780, 783, 798, 806, 807, 956, 965, 967, 973, 975, 982, 987], "veri": [4, 23, 25, 35, 36, 38, 40, 46, 48, 55, 57, 73, 74, 75, 77, 83, 88, 91, 111, 116, 123, 140, 146, 151, 152, 153, 168, 179, 180, 181, 184, 187, 197, 203, 206, 212, 221, 237, 238, 241, 242, 244, 245, 250, 253, 270, 273, 284, 288, 291, 299, 309, 313, 320, 324, 333, 337, 338, 340, 343, 344, 346, 349, 350, 351, 357, 361, 363, 365, 367, 368, 369, 370, 371, 372, 373, 394, 398, 403, 413, 422, 423, 429, 451, 455, 461, 508, 509, 512, 513, 515, 516, 518, 519, 540, 541, 573, 601, 602, 605, 606, 607, 615, 633, 634, 636, 642, 643, 646, 656, 693, 696, 740, 745, 747, 755, 757, 761, 764, 767, 789, 790, 814, 818, 819, 820, 829, 841, 842, 851, 854, 857, 858, 859, 860, 886, 921, 924, 925, 927, 928, 929, 930, 931, 932, 935, 936, 938, 939, 940, 942, 944, 945, 946, 947, 948, 949, 951, 952, 953, 955, 956, 965, 966, 973, 978, 979, 981, 984, 986, 988], "new": [4, 7, 8, 10, 46, 51, 53, 55, 64, 65, 93, 98, 101, 103, 104, 111, 117, 118, 130, 133, 135, 141, 147, 153, 154, 179, 185, 193, 206, 234, 237, 242, 257, 259, 282, 285, 289, 298, 320, 325, 326, 332, 333, 335, 336, 337, 340, 341, 342, 344, 346, 347, 350, 351, 352, 354, 361, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 451, 452, 453, 455, 456, 459, 460, 461, 463, 474, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 525, 532, 533, 534, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 655, 659, 664, 665, 669, 672, 673, 674, 675, 677, 678, 679, 680, 681, 684, 689, 690, 691, 693, 696, 703, 704, 707, 711, 716, 717, 719, 728, 732, 733, 734, 735, 737, 738, 739, 745, 746, 747, 750, 751, 753, 760, 761, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 812, 813, 814, 815, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 835, 837, 838, 839, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 867, 869, 870, 872, 880, 881, 885, 886, 895, 898, 900, 902, 907, 913, 919, 921, 922, 924, 928, 932, 933, 935, 936, 937, 938, 942, 944, 945, 946, 947, 953, 956, 958, 959, 962, 965, 967, 971, 975, 981, 982, 983, 984, 985, 986, 987, 988, 989], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 333, 338, 929, 951], "1440": 4, "caus": [4, 23, 25, 111, 136, 151, 177, 179, 184, 197, 313, 320, 336, 343, 361, 363, 368, 369, 371, 373, 395, 398, 400, 410, 460, 483, 533, 540, 561, 562, 784, 785, 786, 788, 813, 822, 824, 827, 828, 869, 870, 921, 922, 928, 932, 940, 942, 945, 953, 958, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986], "signific": [4, 111, 129, 148, 197, 228, 235, 252, 253, 320, 332, 333, 349, 363, 366, 367, 370, 455, 483, 485, 500, 501, 578, 609, 610, 617, 619, 627, 628, 629, 766, 774, 849, 851, 852, 853, 854, 855, 931, 932, 935, 973, 975, 976, 977, 981], "overfit": [4, 104, 111, 148, 152, 153, 158, 206, 223, 228, 230, 236, 240, 250, 268, 274, 275, 277, 278, 279, 299, 315, 317, 318, 333, 351, 361, 367, 370, 389, 439, 440, 518, 519, 608, 747, 750, 751, 761, 771, 772, 806, 807, 809, 824, 828, 927, 936, 938, 940, 942, 948, 956, 965, 976], "avoid": [4, 7, 12, 40, 52, 57, 66, 104, 151, 152, 181, 188, 197, 202, 219, 230, 236, 240, 256, 261, 263, 264, 277, 278, 295, 296, 312, 325, 336, 338, 339, 340, 342, 343, 344, 351, 352, 354, 357, 361, 363, 365, 367, 370, 371, 374, 392, 394, 396, 403, 413, 419, 444, 445, 446, 450, 459, 460, 485, 490, 494, 497, 536, 537, 585, 597, 598, 603, 604, 611, 612, 613, 614, 632, 635, 640, 642, 644, 646, 663, 740, 747, 748, 752, 758, 761, 770, 771, 772, 809, 812, 818, 819, 821, 826, 827, 828, 829, 832, 834, 835, 836, 838, 839, 840, 842, 847, 886, 926, 929, 931, 932, 935, 936, 938, 940, 942, 947, 948, 953, 967, 969, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "kbinsdiscret": [4, 49, 148, 179, 197, 272, 275, 286, 463, 608, 812, 828, 858, 942, 981, 985, 986, 987, 989], "re": [4, 8, 13, 24, 51, 65, 108, 138, 150, 197, 222, 226, 238, 240, 244, 282, 313, 325, 338, 339, 342, 346, 350, 352, 361, 367, 371, 420, 421, 422, 423, 424, 425, 426, 427, 506, 507, 512, 513, 514, 597, 603, 611, 613, 749, 764, 767, 857, 858, 859, 860, 928, 933, 935, 942, 947, 953, 956, 967, 973, 977, 978, 980, 982], "fine": [4, 33, 107, 195, 227, 233, 317, 318, 335, 342, 351, 371, 886, 935, 938, 953, 983], "grain": [4, 28, 33, 211, 227, 275, 344, 371, 953], "still": [4, 29, 40, 49, 52, 57, 75, 89, 106, 108, 111, 118, 135, 141, 150, 151, 153, 158, 179, 181, 197, 211, 238, 244, 273, 283, 284, 312, 320, 326, 332, 337, 338, 340, 342, 343, 344, 346, 349, 351, 363, 367, 370, 371, 374, 392, 396, 405, 425, 447, 578, 583, 586, 588, 668, 706, 728, 731, 740, 741, 750, 751, 764, 767, 827, 829, 849, 867, 921, 922, 926, 928, 931, 935, 938, 940, 947, 948, 951, 953, 956, 973, 975, 978, 979, 981, 982, 983, 986, 987, 988], "express": [4, 7, 12, 135, 140, 151, 235, 236, 279, 283, 296, 313, 332, 333, 338, 339, 344, 363, 368, 371, 401, 407, 408, 539, 540, 542, 667, 747, 753, 761, 770, 771, 772, 773, 776, 796, 928, 932, 936, 942, 943, 948, 981], "advantag": [4, 5, 35, 52, 85, 90, 179, 180, 206, 222, 236, 285, 320, 351, 361, 367, 368, 371, 373, 393, 397, 411, 485, 540, 600, 625, 626, 713, 777, 778, 779, 809, 810, 849, 850, 851, 852, 853, 854, 855, 921, 924, 927, 928, 929, 932, 933, 935, 936, 942, 946, 947, 948, 976], "final": [4, 24, 36, 38, 64, 65, 73, 75, 78, 82, 90, 98, 100, 102, 104, 108, 109, 112, 118, 121, 130, 140, 147, 150, 152, 156, 158, 167, 168, 176, 179, 181, 196, 197, 200, 206, 219, 225, 233, 241, 253, 279, 281, 282, 299, 324, 326, 336, 338, 339, 342, 350, 351, 360, 361, 363, 364, 367, 370, 371, 389, 394, 398, 399, 403, 410, 413, 415, 487, 506, 507, 518, 519, 521, 578, 598, 604, 610, 630, 641, 645, 670, 747, 777, 778, 809, 810, 846, 849, 921, 922, 928, 929, 932, 935, 938, 939, 942, 945, 956, 965, 978, 981, 982, 983, 984, 986], "observ": [4, 5, 7, 9, 11, 13, 15, 22, 25, 33, 36, 39, 49, 57, 65, 71, 73, 74, 75, 86, 87, 90, 93, 98, 102, 103, 105, 111, 114, 117, 125, 126, 133, 135, 138, 140, 141, 142, 144, 151, 152, 153, 158, 159, 174, 175, 177, 179, 180, 181, 183, 193, 197, 203, 204, 209, 210, 231, 235, 237, 238, 242, 253, 259, 266, 278, 291, 298, 299, 304, 307, 311, 312, 313, 317, 318, 333, 335, 351, 361, 363, 364, 365, 366, 367, 368, 369, 372, 373, 393, 395, 397, 398, 400, 410, 411, 420, 421, 422, 423, 424, 425, 426, 427, 475, 483, 502, 503, 514, 561, 562, 597, 603, 608, 652, 667, 669, 708, 768, 787, 795, 828, 830, 928, 931, 932, 936, 937, 938, 939, 942, 945, 946, 947, 948, 955, 959, 961, 962, 964, 974, 986, 987, 988], "complet": [4, 33, 34, 35, 40, 45, 48, 53, 57, 78, 116, 128, 130, 133, 148, 153, 154, 185, 205, 206, 233, 278, 281, 312, 320, 333, 338, 342, 343, 346, 349, 364, 367, 368, 370, 371, 393, 397, 400, 403, 413, 414, 415, 418, 446, 487, 488, 489, 490, 495, 497, 509, 520, 521, 532, 538, 539, 540, 542, 578, 579, 580, 581, 600, 608, 622, 624, 655, 656, 666, 667, 668, 681, 686, 687, 707, 736, 743, 777, 780, 783, 792, 808, 809, 810, 811, 872, 917, 921, 926, 928, 932, 933, 935, 942, 947, 948, 958, 967, 973, 976, 980, 981, 982, 983, 984, 985, 986], "induct": [4, 32, 111, 148, 351, 363, 370, 377, 393, 463, 515, 578, 844, 845, 893, 916, 928, 945, 975], "bia": [4, 25, 71, 97, 105, 106, 111, 148, 151, 153, 158, 159, 161, 183, 240, 268, 307, 320, 333, 340, 351, 361, 365, 369, 370, 373, 475, 507, 510, 511, 558, 559, 565, 593, 599, 600, 609, 610, 620, 621, 631, 806, 807, 822, 824, 828, 834, 835, 837, 838, 839, 840, 858, 927, 928, 931, 932, 936, 937, 940, 946, 965], "preserv": [4, 44, 90, 203, 210, 230, 340, 341, 362, 367, 368, 371, 532, 539, 540, 542, 597, 603, 647, 650, 724, 728, 765, 766, 767, 833, 869, 870, 922, 928, 929, 942, 944, 962, 973, 976, 977, 981, 982, 983, 984, 986, 987, 988, 989], "smooth": [4, 42, 43, 50, 140, 172, 180, 195, 279, 299, 335, 352, 363, 369, 373, 399, 400, 488, 489, 490, 497, 508, 509, 510, 511, 515, 516, 517, 541, 542, 570, 573, 627, 784, 785, 786, 788, 826, 830, 838, 857, 858, 859, 860, 928, 934, 942, 946, 947, 948, 967], "local": [4, 35, 52, 56, 85, 88, 115, 140, 141, 148, 152, 180, 198, 201, 203, 206, 215, 254, 317, 318, 325, 335, 336, 338, 342, 344, 346, 354, 363, 368, 370, 371, 373, 398, 403, 413, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 453, 489, 491, 495, 498, 500, 510, 511, 514, 517, 561, 562, 639, 640, 641, 642, 643, 644, 646, 647, 708, 709, 792, 795, 798, 800, 810, 819, 842, 845, 853, 898, 930, 931, 935, 936, 948, 966, 968, 969, 977, 981, 985, 988], "attempt": [4, 50, 152, 175, 185, 230, 311, 324, 337, 351, 363, 375, 401, 408, 419, 582, 639, 640, 644, 765, 791, 792, 793, 795, 797, 799, 800, 801, 827, 829, 847, 869, 870, 928, 929, 935, 948, 958, 980, 985], "each": [4, 7, 8, 10, 11, 12, 14, 16, 23, 24, 25, 29, 31, 33, 37, 39, 40, 43, 45, 49, 53, 55, 56, 64, 65, 67, 69, 77, 78, 80, 82, 83, 85, 86, 90, 93, 94, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 114, 116, 117, 118, 119, 120, 121, 129, 131, 133, 137, 139, 144, 146, 147, 150, 151, 152, 154, 156, 158, 165, 166, 168, 173, 177, 179, 180, 181, 183, 184, 187, 194, 197, 200, 206, 207, 210, 211, 212, 213, 216, 217, 219, 221, 224, 226, 229, 230, 231, 233, 235, 238, 240, 241, 244, 245, 252, 253, 256, 258, 262, 264, 266, 268, 269, 271, 273, 274, 275, 276, 278, 279, 281, 283, 284, 285, 288, 289, 290, 293, 299, 305, 307, 312, 313, 315, 316, 319, 320, 324, 325, 326, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 346, 347, 349, 350, 351, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 380, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 410, 411, 412, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 470, 473, 474, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 658, 659, 661, 664, 670, 675, 678, 679, 680, 688, 689, 695, 696, 698, 700, 701, 703, 704, 708, 709, 712, 713, 714, 715, 716, 718, 719, 720, 721, 723, 724, 726, 728, 729, 730, 731, 733, 734, 735, 737, 738, 740, 741, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 875, 880, 881, 886, 888, 889, 900, 908, 909, 910, 913, 922, 924, 926, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 956, 958, 962, 964, 965, 966, 967, 973, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "sine": [4, 135, 140, 141, 148, 173, 185, 220, 317, 334, 566, 745, 746, 931, 948], "cosin": [4, 36, 249, 253, 258, 330, 333, 351, 363, 368, 369, 393, 397, 401, 408, 486, 541, 542, 571, 647, 710, 711, 712, 715, 720, 721, 724, 728, 729, 730, 789, 790, 794, 821, 935, 948, 969, 983], "match": [4, 33, 41, 85, 88, 92, 148, 156, 157, 179, 201, 209, 313, 333, 336, 340, 342, 363, 368, 370, 371, 383, 400, 415, 417, 459, 460, 466, 477, 482, 488, 493, 499, 502, 518, 519, 523, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 578, 579, 580, 581, 609, 615, 616, 636, 637, 650, 654, 655, 656, 664, 666, 670, 684, 736, 789, 790, 794, 798, 812, 813, 814, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 849, 856, 862, 873, 900, 929, 931, 932, 934, 935, 954, 958, 967, 969, 973, 979, 980, 981, 983, 985, 986], "togeth": [4, 12, 47, 55, 65, 107, 118, 135, 141, 151, 160, 200, 203, 231, 279, 285, 302, 316, 320, 340, 342, 349, 350, 351, 357, 363, 370, 371, 378, 402, 404, 518, 519, 640, 666, 747, 761, 809, 810, 823, 928, 929, 933, 939, 942, 948, 949, 956, 959, 961, 979], "equival": [4, 14, 52, 108, 114, 132, 135, 140, 151, 197, 226, 244, 253, 278, 313, 320, 324, 336, 344, 347, 350, 351, 363, 364, 365, 366, 367, 368, 370, 372, 373, 393, 395, 396, 397, 398, 400, 401, 408, 420, 425, 460, 485, 492, 509, 512, 513, 514, 516, 539, 542, 564, 567, 570, 572, 575, 597, 598, 599, 603, 605, 609, 610, 617, 618, 619, 620, 623, 627, 628, 631, 634, 638, 639, 644, 659, 660, 673, 684, 691, 697, 698, 699, 711, 720, 729, 730, 745, 746, 750, 751, 755, 757, 780, 783, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 806, 812, 818, 819, 821, 824, 825, 826, 827, 829, 837, 839, 840, 873, 884, 918, 921, 926, 928, 929, 930, 932, 938, 942, 946, 947, 948, 981, 982, 983, 984, 986, 987], "importantli": [4, 13, 86, 152, 156, 273, 363], "jump": [4, 180, 273, 335, 338, 371, 828], "functiontransform": [4, 64, 104, 179, 197, 292, 416, 942, 978, 979, 981, 986, 987, 988], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 15, 16, 18, 22, 23, 25, 30, 31, 33, 36, 44, 49, 51, 56, 64, 69, 83, 91, 93, 95, 102, 104, 110, 111, 114, 118, 138, 141, 143, 147, 158, 159, 167, 168, 171, 179, 180, 187, 188, 189, 197, 215, 218, 219, 224, 226, 230, 231, 232, 233, 234, 235, 236, 238, 239, 242, 249, 253, 258, 263, 266, 271, 273, 275, 278, 281, 295, 299, 311, 313, 315, 319, 324, 331, 332, 333, 338, 339, 340, 344, 345, 347, 349, 351, 361, 362, 363, 364, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 892, 893, 894, 895, 896, 898, 899, 901, 902, 903, 904, 905, 906, 907, 913, 916, 917, 918, 919, 920, 922, 932, 935, 939, 940, 947, 948, 953, 958, 963, 965, 967, 970, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "lambda": [4, 7, 8, 10, 18, 51, 67, 110, 124, 159, 197, 235, 236, 277, 292, 359, 363, 368, 370, 371, 595, 596, 597, 598, 813, 825, 928, 942, 962, 981, 987], "sin": [4, 13, 35, 86, 100, 110, 111, 115, 117, 128, 135, 141, 142, 144, 158, 159, 173, 180, 185, 201, 212, 227, 265, 274, 282, 306, 317, 318, 373, 467, 566, 650, 714, 966], "pi": [4, 13, 31, 35, 36, 86, 95, 115, 117, 128, 135, 159, 167, 173, 180, 201, 221, 222, 223, 226, 227, 249, 266, 282, 318, 354, 369, 373, 467, 468, 469, 566, 593, 926, 927, 928, 934, 966], "cos_transform": 4, "co": [4, 12, 13, 17, 35, 36, 115, 117, 140, 148, 151, 180, 201, 235, 249, 285, 318, 342, 369, 371, 400, 402, 404, 439, 462, 542, 650, 670, 714, 743, 927, 942, 956, 968, 969], "effect": [4, 6, 25, 33, 35, 36, 41, 42, 49, 52, 57, 63, 78, 88, 90, 111, 113, 115, 132, 135, 136, 140, 142, 148, 149, 151, 152, 154, 179, 180, 181, 184, 185, 198, 203, 219, 222, 226, 235, 236, 237, 240, 243, 244, 271, 272, 274, 282, 287, 299, 304, 307, 308, 309, 311, 312, 313, 320, 325, 336, 338, 340, 343, 349, 351, 361, 363, 364, 368, 369, 370, 371, 373, 374, 401, 416, 441, 447, 451, 465, 475, 476, 508, 509, 510, 511, 515, 516, 517, 539, 540, 541, 542, 557, 560, 600, 608, 609, 610, 624, 638, 642, 643, 654, 703, 735, 745, 752, 758, 766, 775, 795, 806, 807, 813, 818, 819, 821, 825, 826, 827, 829, 830, 835, 838, 846, 849, 850, 854, 857, 858, 859, 860, 869, 870, 886, 898, 906, 921, 926, 928, 929, 931, 932, 933, 939, 942, 945, 947, 948, 963, 965, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "expans": [4, 146, 283, 401, 824, 982], "synthet": [4, 13, 23, 25, 28, 33, 38, 45, 105, 111, 116, 135, 140, 142, 152, 169, 181, 196, 268, 275, 307, 320, 324, 331, 341, 352, 363, 365, 372, 609, 610, 849, 850, 856, 926, 965, 979], "beyond": [4, 25, 180, 181, 324, 326, 337, 338, 349, 361, 370, 854, 929, 933, 942, 947, 953, 981], "23": [4, 24, 31, 46, 88, 148, 271, 277, 280, 283, 284, 335, 344, 354, 370, 376, 384, 392, 398, 403, 405, 413, 416, 418, 419, 426, 433, 434, 435, 441, 443, 451, 452, 453, 455, 456, 461, 463, 465, 473, 475, 489, 490, 491, 494, 498, 505, 507, 509, 511, 512, 513, 516, 519, 520, 521, 558, 559, 562, 578, 581, 583, 586, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 620, 621, 623, 624, 626, 629, 630, 631, 668, 680, 728, 775, 781, 782, 783, 792, 800, 807, 810, 822, 829, 837, 838, 847, 850, 852, 855, 858, 860, 867, 869, 870, 880, 881, 886, 932, 950, 971, 973, 974, 980, 981, 982, 985], "pd": [4, 12, 23, 65, 66, 67, 105, 111, 115, 140, 146, 150, 151, 152, 153, 158, 168, 179, 187, 197, 215, 216, 219, 226, 233, 235, 236, 238, 246, 247, 278, 279, 284, 285, 307, 311, 312, 343, 351, 364, 415, 417, 578, 579, 580, 581, 583, 728, 867, 869, 870, 921, 922, 939, 942, 984, 986, 987, 988], "hour_df": 4, "datafram": [4, 23, 64, 65, 66, 67, 108, 111, 115, 140, 146, 150, 151, 153, 158, 168, 187, 197, 216, 219, 226, 233, 235, 236, 238, 246, 247, 278, 279, 284, 285, 286, 307, 311, 312, 332, 333, 338, 340, 343, 351, 364, 385, 394, 395, 397, 398, 400, 415, 417, 418, 419, 433, 434, 435, 436, 440, 441, 442, 443, 447, 451, 452, 453, 455, 456, 461, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 517, 518, 519, 520, 521, 532, 533, 534, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 639, 640, 643, 747, 750, 751, 761, 775, 793, 798, 801, 805, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 847, 865, 892, 903, 906, 921, 922, 953, 967, 976, 977, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989], "arang": [4, 11, 13, 15, 36, 53, 55, 60, 67, 72, 73, 93, 96, 98, 107, 108, 109, 110, 112, 113, 116, 120, 129, 135, 137, 142, 143, 146, 147, 154, 163, 179, 182, 184, 188, 202, 209, 211, 230, 235, 238, 243, 246, 252, 253, 266, 268, 275, 284, 288, 289, 291, 293, 299, 306, 311, 313, 317, 318, 319, 320, 349, 360, 367, 371, 416, 495, 775, 824, 828, 927, 928, 936, 942, 946, 963], "26": [4, 42, 50, 73, 87, 214, 248, 344, 521, 599, 679, 733, 825, 837, 886, 932, 942, 973, 976, 977, 985], "reshap": [4, 5, 6, 9, 13, 15, 22, 27, 29, 31, 42, 43, 44, 46, 47, 49, 50, 53, 66, 73, 77, 85, 88, 95, 102, 106, 107, 116, 126, 131, 135, 137, 138, 139, 140, 141, 142, 144, 158, 170, 176, 192, 193, 195, 196, 200, 202, 204, 206, 211, 214, 225, 233, 257, 259, 266, 268, 270, 271, 274, 275, 276, 281, 284, 285, 293, 298, 299, 303, 304, 305, 308, 309, 349, 360, 368, 370, 371, 397, 416, 535, 582, 775, 824, 828, 928, 942, 963, 966, 978], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 14, 18, 40, 45, 48, 49, 53, 57, 81, 86, 89, 96, 116, 156, 170, 195, 197, 199, 200, 201, 202, 203, 204, 209, 210, 213, 215, 219, 253, 257, 269, 273, 274, 278, 279, 281, 284, 286, 299, 311, 312, 313, 320, 330, 333, 340, 343, 344, 351, 359, 364, 368, 371, 372, 379, 385, 394, 395, 397, 398, 400, 415, 417, 419, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 639, 640, 641, 642, 643, 793, 798, 801, 805, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 847, 922, 924, 928, 933, 935, 942, 943, 944, 958, 963, 966, 967, 977, 978, 979, 981, 982, 983, 985, 987, 989], "hour_co": 4, "2d": [4, 32, 40, 43, 44, 45, 49, 56, 57, 84, 116, 148, 173, 180, 185, 199, 201, 204, 206, 209, 210, 296, 299, 332, 334, 338, 340, 347, 351, 363, 364, 368, 371, 373, 393, 403, 413, 415, 418, 439, 441, 442, 443, 444, 445, 451, 452, 453, 455, 461, 465, 484, 492, 500, 535, 537, 586, 594, 608, 623, 642, 688, 729, 770, 774, 778, 816, 865, 869, 870, 885, 895, 918, 919, 926, 928, 929, 932, 939, 943, 948, 958, 964, 973, 977, 980, 981, 982, 985, 987], "scatter": [4, 9, 11, 12, 15, 22, 27, 28, 31, 34, 35, 38, 39, 40, 41, 45, 48, 51, 52, 53, 54, 55, 57, 62, 73, 78, 81, 82, 83, 87, 89, 90, 91, 92, 94, 100, 101, 107, 114, 116, 117, 119, 126, 128, 135, 136, 137, 139, 141, 142, 143, 144, 150, 151, 156, 159, 162, 169, 171, 175, 176, 177, 180, 181, 182, 188, 191, 192, 193, 196, 199, 200, 201, 202, 203, 204, 206, 211, 212, 213, 221, 222, 223, 224, 225, 226, 227, 230, 236, 238, 249, 253, 259, 260, 261, 262, 263, 264, 265, 268, 273, 275, 276, 278, 285, 290, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 311, 316, 317, 318, 365, 582, 652, 926, 928, 965], "color": [4, 7, 8, 9, 10, 11, 12, 15, 22, 23, 24, 25, 28, 30, 31, 32, 34, 36, 38, 40, 41, 42, 43, 45, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 71, 72, 73, 74, 75, 78, 82, 83, 85, 86, 87, 89, 92, 93, 94, 95, 98, 100, 107, 108, 109, 110, 113, 114, 115, 116, 118, 120, 123, 126, 135, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 151, 153, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 171, 173, 175, 177, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 193, 196, 197, 200, 201, 202, 204, 206, 210, 211, 212, 213, 216, 221, 222, 223, 224, 225, 226, 227, 230, 234, 236, 238, 239, 240, 241, 242, 244, 245, 246, 248, 250, 252, 255, 256, 258, 259, 260, 261, 264, 265, 266, 268, 273, 274, 275, 277, 278, 279, 282, 290, 291, 293, 297, 298, 299, 300, 301, 303, 305, 306, 308, 316, 317, 332, 333, 335, 346, 363, 370, 371, 398, 444, 445, 457, 534, 535, 729, 906, 946, 948, 978, 983, 985], "map": [4, 5, 10, 11, 16, 18, 24, 49, 90, 103, 110, 113, 116, 124, 135, 148, 156, 179, 199, 201, 205, 236, 239, 244, 256, 261, 264, 266, 272, 273, 292, 299, 305, 312, 313, 332, 339, 349, 351, 361, 362, 363, 364, 367, 368, 370, 371, 377, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 447, 449, 453, 460, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 712, 715, 745, 746, 747, 750, 751, 758, 759, 761, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 837, 838, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 891, 921, 924, 929, 932, 934, 944, 947, 981, 982, 983, 985, 986, 987, 988], "space": [4, 8, 10, 18, 28, 42, 44, 49, 52, 53, 55, 56, 58, 60, 64, 65, 68, 78, 85, 87, 94, 96, 104, 107, 111, 116, 130, 135, 141, 156, 180, 199, 200, 201, 203, 210, 211, 212, 215, 216, 222, 227, 243, 246, 247, 253, 262, 263, 275, 283, 311, 312, 313, 319, 320, 324, 330, 333, 334, 335, 338, 345, 349, 350, 351, 360, 362, 363, 366, 368, 369, 370, 371, 373, 395, 398, 399, 400, 403, 413, 415, 416, 417, 418, 433, 434, 435, 449, 483, 485, 486, 489, 490, 491, 492, 494, 495, 500, 524, 533, 539, 540, 542, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 583, 584, 589, 591, 592, 593, 594, 639, 640, 641, 643, 644, 645, 647, 650, 747, 750, 751, 761, 779, 789, 790, 797, 798, 799, 800, 809, 814, 815, 821, 826, 841, 842, 843, 862, 890, 924, 925, 926, 927, 928, 930, 932, 933, 935, 936, 937, 938, 942, 943, 944, 945, 946, 947, 948, 952, 953, 958, 965, 967, 968, 969, 973, 974, 976, 981, 982, 983, 987, 988], "akin": [4, 180, 351], "sort": [4, 8, 10, 12, 18, 19, 22, 55, 102, 108, 111, 117, 133, 158, 179, 180, 197, 214, 235, 236, 239, 249, 265, 306, 311, 317, 318, 338, 342, 346, 347, 351, 367, 370, 371, 373, 485, 492, 506, 517, 532, 561, 568, 648, 663, 669, 679, 680, 688, 704, 733, 734, 737, 739, 747, 772, 784, 785, 786, 787, 788, 789, 790, 797, 799, 800, 801, 804, 814, 820, 822, 823, 826, 828, 830, 838, 851, 854, 886, 891, 928, 935, 938, 942, 956, 967, 973, 977, 983, 984, 985, 987, 988], "analog": [4, 113, 344, 370, 932, 933, 947, 982], "clock": 4, "25th": [4, 827], "back": [4, 90, 217, 325, 338, 340, 352, 357, 364, 371, 386, 395, 398, 410, 433, 434, 435, 459, 460, 484, 485, 486, 489, 491, 492, 495, 532, 581, 609, 610, 617, 619, 627, 628, 629, 678, 814, 816, 817, 818, 822, 823, 824, 826, 827, 829, 841, 842, 849, 928, 932, 936, 953, 958, 967, 976, 981, 983, 984, 987], "natur": [4, 28, 111, 142, 151, 152, 156, 179, 180, 196, 197, 203, 221, 227, 244, 338, 340, 351, 368, 370, 371, 374, 396, 401, 408, 502, 541, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 643, 655, 691, 705, 707, 791, 792, 793, 795, 797, 799, 800, 801, 828, 884, 928, 929, 931, 932, 935, 937, 942, 946, 952, 955, 973, 981], "sp": [4, 151, 922, 966], "c": [4, 6, 7, 8, 11, 12, 15, 18, 22, 23, 25, 27, 28, 31, 35, 36, 38, 39, 41, 48, 51, 52, 54, 55, 56, 60, 65, 66, 68, 78, 81, 82, 83, 90, 91, 92, 99, 101, 102, 107, 108, 114, 116, 117, 119, 120, 124, 126, 131, 136, 137, 138, 139, 143, 156, 162, 164, 169, 170, 171, 172, 174, 176, 177, 183, 186, 188, 190, 191, 192, 193, 195, 196, 199, 200, 201, 203, 204, 211, 212, 213, 217, 222, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 238, 240, 244, 246, 253, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 271, 273, 274, 275, 278, 281, 282, 283, 284, 285, 286, 290, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 316, 317, 318, 324, 325, 332, 333, 335, 336, 338, 339, 340, 341, 343, 346, 347, 349, 354, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 376, 389, 394, 395, 398, 400, 410, 419, 426, 474, 479, 485, 489, 491, 492, 498, 500, 501, 541, 558, 559, 561, 582, 590, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 623, 624, 630, 636, 637, 639, 640, 643, 644, 659, 665, 666, 669, 681, 685, 691, 692, 708, 709, 747, 761, 774, 784, 785, 786, 787, 788, 789, 790, 796, 798, 805, 820, 822, 823, 824, 828, 844, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 864, 869, 870, 895, 921, 924, 925, 928, 929, 930, 932, 934, 935, 937, 939, 942, 944, 946, 947, 948, 952, 956, 958, 962, 963, 965, 966, 973, 974, 976, 978, 979, 980, 981, 982, 984, 985, 986], "colorbar": [4, 11, 27, 36, 85, 96, 106, 114, 131, 136, 138, 139, 141, 152, 199, 210, 225, 246, 273, 299, 648, 985], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "simpl": [4, 15, 25, 65, 69, 71, 77, 78, 85, 109, 142, 148, 152, 180, 196, 218, 236, 254, 285, 295, 311, 313, 316, 320, 336, 338, 340, 341, 342, 343, 345, 349, 350, 351, 352, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 377, 383, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 413, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 465, 473, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 736, 738, 745, 746, 747, 750, 751, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 924, 926, 927, 928, 929, 931, 932, 935, 942, 944, 946, 948, 953, 956, 958, 967, 970, 973], "wors": [4, 78, 136, 152, 185, 235, 243, 278, 320, 361, 363, 373, 384, 416, 433, 434, 435, 503, 505, 507, 509, 511, 513, 516, 519, 521, 561, 562, 586, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 620, 621, 623, 624, 629, 630, 631, 656, 672, 673, 674, 678, 735, 782, 783, 792, 800, 807, 850, 852, 855, 858, 860, 932, 942, 982], "further": [4, 23, 38, 65, 71, 78, 85, 102, 107, 109, 132, 135, 140, 151, 153, 158, 199, 204, 232, 235, 236, 242, 286, 299, 312, 319, 324, 338, 349, 351, 362, 363, 365, 368, 370, 371, 373, 403, 413, 466, 483, 486, 533, 565, 573, 579, 609, 610, 617, 619, 627, 628, 629, 642, 646, 687, 724, 728, 731, 740, 741, 785, 791, 792, 799, 800, 827, 829, 849, 851, 854, 886, 931, 932, 934, 935, 936, 938, 942, 946, 947, 965, 967, 982, 986], "analyz": [4, 7, 16, 237, 244, 286, 311, 313, 343, 344, 363, 371, 454, 539, 540, 542, 738, 929, 932, 939, 940, 948, 967, 973, 982], "reason": [4, 8, 12, 38, 49, 111, 133, 151, 152, 156, 179, 180, 187, 197, 206, 210, 211, 215, 232, 235, 236, 241, 253, 274, 278, 312, 313, 320, 324, 325, 326, 333, 337, 338, 340, 342, 346, 349, 350, 351, 352, 363, 364, 365, 368, 370, 371, 373, 459, 483, 525, 589, 597, 603, 605, 623, 638, 643, 713, 747, 761, 793, 798, 805, 824, 846, 921, 922, 927, 928, 929, 932, 934, 935, 936, 938, 942, 946, 947, 956, 967, 982, 983, 984, 985, 986, 987, 988, 989], "disappoint": 4, "outcom": [4, 151, 351, 520, 609, 660, 692, 742, 777, 844, 845, 846, 851, 854, 928, 932, 948, 955, 967, 977, 981, 983], "altern": [4, 24, 65, 78, 105, 106, 112, 118, 153, 163, 179, 197, 207, 224, 227, 244, 281, 312, 313, 320, 333, 341, 342, 344, 349, 351, 352, 354, 358, 360, 361, 363, 364, 365, 367, 368, 370, 371, 373, 393, 394, 397, 398, 403, 409, 414, 450, 489, 491, 492, 498, 504, 505, 508, 509, 510, 511, 515, 516, 517, 533, 539, 540, 542, 568, 571, 594, 643, 657, 659, 721, 724, 728, 731, 749, 778, 813, 819, 822, 835, 842, 844, 857, 858, 859, 860, 899, 900, 926, 928, 929, 931, 932, 935, 936, 940, 942, 944, 945, 947, 948, 953, 962, 967, 969, 978, 980, 986, 987], "larger": [4, 7, 25, 33, 35, 38, 43, 73, 75, 83, 95, 102, 112, 136, 141, 142, 147, 151, 152, 156, 159, 194, 195, 196, 204, 210, 212, 221, 227, 236, 238, 244, 245, 253, 255, 268, 269, 271, 273, 299, 312, 313, 331, 333, 338, 344, 349, 351, 360, 361, 363, 364, 365, 367, 368, 370, 371, 373, 392, 395, 400, 401, 403, 405, 407, 466, 478, 492, 495, 512, 513, 514, 518, 519, 533, 540, 594, 603, 623, 624, 625, 626, 630, 638, 643, 655, 670, 686, 745, 794, 795, 826, 828, 829, 830, 838, 843, 885, 886, 903, 906, 924, 925, 928, 929, 931, 932, 935, 936, 940, 942, 946, 947, 965, 967, 977, 978, 981, 982, 983, 986, 987], "periodic_spline_transform": 4, "n_spline": [4, 828], "none": [4, 8, 9, 10, 15, 16, 24, 30, 35, 37, 38, 40, 48, 51, 57, 87, 90, 95, 103, 107, 108, 110, 113, 126, 136, 142, 143, 154, 158, 179, 180, 187, 190, 197, 199, 212, 213, 229, 235, 236, 247, 258, 260, 264, 277, 283, 284, 289, 292, 297, 299, 300, 303, 304, 306, 311, 312, 333, 335, 338, 340, 345, 347, 351, 363, 367, 370, 373, 374, 375, 379, 380, 381, 382, 383, 384, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 651, 652, 653, 654, 658, 659, 660, 662, 663, 664, 665, 667, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 682, 684, 685, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 838, 841, 842, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 872, 873, 874, 875, 878, 880, 885, 886, 889, 890, 891, 892, 895, 898, 900, 901, 903, 906, 907, 913, 916, 917, 919, 921, 928, 932, 942, 945, 948, 958, 962, 967, 969, 973, 974, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "degre": [4, 15, 31, 87, 101, 140, 146, 150, 152, 156, 158, 167, 168, 180, 212, 217, 221, 222, 223, 226, 227, 235, 249, 271, 283, 284, 296, 306, 368, 372, 403, 449, 486, 492, 590, 591, 594, 607, 725, 745, 747, 795, 824, 828, 851, 852, 853, 854, 855, 924, 925, 927, 928, 929, 930, 932, 933, 935, 938, 939, 942, 945, 947, 965, 976, 982, 986, 987], "n_knot": [4, 180, 284, 828, 942, 986], "include_bia": [4, 158, 249, 824, 828, 987], "knot": [4, 180, 284, 828, 942, 986], "linspac": [4, 8, 9, 10, 11, 13, 22, 24, 27, 31, 33, 34, 36, 38, 45, 73, 74, 86, 95, 100, 109, 111, 135, 136, 138, 139, 140, 141, 142, 144, 152, 158, 159, 161, 169, 173, 179, 180, 181, 185, 189, 190, 191, 192, 193, 197, 204, 206, 209, 210, 212, 213, 225, 235, 237, 238, 242, 243, 244, 245, 249, 258, 259, 265, 266, 274, 276, 285, 286, 298, 299, 302, 304, 305, 307, 308, 309, 582, 583, 753, 773, 789, 790, 966], "again": [4, 62, 66, 111, 151, 203, 236, 320, 342, 347, 351, 352, 363, 364, 365, 370, 371, 423, 518, 519, 585, 598, 602, 604, 606, 612, 614, 616, 643, 921, 928, 932, 946, 970, 973, 981], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 15, 16, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 37, 42, 43, 44, 47, 48, 49, 50, 53, 55, 56, 61, 64, 68, 69, 73, 85, 86, 88, 91, 100, 105, 106, 107, 108, 111, 112, 113, 116, 117, 126, 129, 131, 136, 137, 139, 141, 142, 146, 147, 148, 152, 153, 163, 167, 168, 179, 181, 186, 188, 191, 192, 193, 194, 195, 198, 200, 202, 206, 209, 210, 211, 212, 214, 215, 221, 223, 225, 226, 227, 233, 235, 237, 238, 241, 242, 244, 245, 253, 258, 259, 263, 266, 268, 270, 275, 276, 281, 283, 286, 290, 291, 293, 296, 298, 299, 302, 303, 304, 305, 308, 309, 311, 312, 319, 324, 331, 332, 333, 338, 340, 351, 360, 361, 363, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 380, 381, 382, 384, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 871, 874, 875, 880, 884, 886, 888, 891, 894, 896, 901, 903, 907, 908, 909, 910, 911, 912, 913, 922, 927, 928, 932, 933, 934, 935, 936, 938, 942, 943, 944, 945, 946, 947, 948, 963, 964, 966, 967, 973, 975, 976, 978, 979, 980, 981, 982, 983, 987], "concat": [4, 146, 150, 168, 197, 822], "cmap": [4, 5, 6, 11, 12, 13, 15, 19, 20, 28, 29, 31, 35, 36, 42, 43, 46, 47, 49, 50, 53, 73, 75, 80, 81, 85, 88, 92, 96, 101, 106, 107, 126, 131, 138, 139, 152, 158, 162, 170, 171, 188, 191, 192, 193, 195, 200, 201, 202, 210, 211, 214, 229, 230, 253, 256, 257, 259, 261, 262, 264, 266, 268, 270, 271, 273, 275, 288, 289, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 308, 309, 316, 648, 963, 964], "cm": [4, 6, 11, 12, 13, 15, 19, 20, 22, 28, 29, 31, 34, 35, 42, 43, 45, 46, 47, 48, 49, 50, 53, 55, 56, 62, 73, 75, 80, 81, 85, 88, 92, 101, 106, 107, 126, 131, 138, 139, 152, 162, 171, 188, 191, 192, 193, 195, 200, 201, 202, 207, 210, 211, 214, 229, 230, 253, 257, 259, 263, 266, 268, 270, 271, 273, 275, 286, 288, 289, 293, 295, 296, 297, 298, 299, 300, 301, 303, 305, 308, 309, 316, 335, 364, 648, 862, 932, 942, 948, 963, 964], "tab20b": 4, "stai": [4, 24, 33, 95, 151, 312, 337, 338, 342, 351, 352, 937, 979], "midnight": 4, "fewer": [4, 13, 24, 99, 107, 109, 179, 324, 339, 372, 373, 399, 412, 504, 545, 647, 779, 890, 928, 933, 935, 978, 979, 980], "most": [4, 6, 8, 12, 13, 18, 22, 25, 48, 49, 57, 71, 77, 78, 94, 105, 112, 118, 128, 129, 130, 132, 133, 140, 147, 150, 151, 152, 153, 154, 156, 179, 180, 197, 216, 221, 227, 232, 233, 238, 242, 243, 245, 262, 273, 279, 281, 284, 289, 299, 311, 312, 313, 320, 324, 325, 326, 333, 334, 336, 338, 340, 342, 343, 344, 346, 349, 351, 352, 354, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 395, 396, 401, 407, 408, 411, 419, 447, 454, 472, 475, 483, 485, 490, 494, 500, 502, 512, 513, 517, 518, 539, 540, 542, 544, 555, 562, 578, 581, 600, 609, 623, 625, 627, 629, 638, 639, 643, 646, 675, 678, 696, 708, 709, 713, 735, 742, 745, 746, 750, 751, 766, 777, 778, 791, 792, 793, 795, 797, 798, 799, 800, 801, 824, 826, 834, 835, 837, 838, 839, 840, 847, 885, 886, 888, 895, 900, 921, 922, 926, 927, 928, 929, 930, 931, 932, 933, 935, 938, 939, 940, 945, 946, 947, 948, 951, 952, 953, 956, 963, 965, 967, 975, 976, 979, 980, 981, 982, 983, 984, 986, 988], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "successfulli": [4, 13, 277, 337, 342, 371, 946], "reduc": [4, 7, 38, 41, 42, 43, 44, 49, 65, 66, 71, 102, 109, 111, 113, 116, 130, 151, 158, 159, 177, 184, 187, 208, 210, 215, 236, 242, 262, 275, 278, 279, 286, 312, 313, 320, 330, 332, 335, 338, 344, 349, 351, 361, 362, 363, 365, 367, 368, 370, 371, 372, 374, 396, 397, 401, 408, 411, 444, 485, 495, 500, 506, 507, 508, 509, 514, 515, 516, 524, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 561, 578, 594, 603, 623, 624, 625, 626, 638, 643, 646, 731, 747, 750, 751, 753, 761, 770, 771, 772, 773, 776, 826, 838, 841, 842, 857, 858, 859, 860, 921, 924, 926, 927, 928, 929, 932, 935, 944, 945, 949, 958, 966, 973, 975, 976, 977, 978, 979, 982, 983, 984, 985, 987, 989], "choic": [4, 7, 36, 42, 60, 64, 71, 93, 135, 136, 142, 146, 168, 180, 215, 229, 233, 235, 238, 258, 283, 311, 312, 320, 324, 336, 340, 343, 349, 354, 363, 365, 367, 369, 370, 372, 373, 403, 413, 422, 423, 424, 425, 426, 427, 429, 489, 491, 492, 498, 510, 589, 598, 599, 607, 609, 610, 612, 620, 631, 643, 656, 778, 791, 792, 797, 799, 800, 826, 829, 838, 840, 849, 850, 873, 921, 926, 928, 929, 930, 932, 933, 938, 940, 945, 946, 947, 948, 980, 983, 984, 988], "arbitrari": [4, 78, 85, 86, 87, 104, 142, 158, 179, 196, 197, 233, 273, 277, 279, 283, 319, 325, 338, 349, 351, 364, 367, 368, 370, 371, 375, 401, 406, 408, 416, 483, 484, 510, 511, 532, 590, 599, 620, 631, 639, 748, 749, 754, 756, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 813, 815, 828, 921, 923, 924, 928, 929, 932, 935, 942, 953, 967, 973, 974, 977, 979, 980, 981, 983, 987], "held": [4, 8, 65, 93, 112, 153, 187, 223, 238, 243, 252, 370, 510, 511, 512, 513, 652, 747, 750, 751, 761, 806, 807, 819, 921, 922, 931, 940, 967], "point": [4, 9, 11, 13, 15, 24, 28, 33, 34, 36, 37, 44, 45, 48, 53, 55, 59, 62, 73, 74, 77, 81, 82, 83, 84, 88, 90, 91, 101, 107, 108, 116, 137, 142, 143, 148, 151, 152, 153, 158, 162, 168, 171, 173, 175, 177, 179, 180, 181, 185, 188, 191, 192, 196, 197, 199, 200, 201, 202, 203, 206, 209, 211, 215, 223, 227, 229, 232, 236, 237, 242, 244, 245, 252, 253, 256, 257, 258, 259, 260, 261, 262, 264, 266, 268, 274, 275, 277, 279, 288, 289, 293, 295, 298, 299, 300, 301, 303, 304, 308, 309, 312, 313, 316, 320, 324, 325, 326, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 346, 349, 351, 352, 362, 363, 368, 369, 370, 371, 374, 375, 392, 393, 394, 395, 396, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 411, 412, 420, 423, 425, 449, 455, 463, 465, 466, 470, 473, 476, 481, 484, 486, 492, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 561, 562, 579, 582, 583, 584, 588, 589, 590, 595, 596, 602, 606, 608, 621, 622, 624, 626, 627, 629, 630, 633, 634, 639, 640, 641, 642, 643, 644, 645, 650, 652, 657, 658, 661, 664, 668, 673, 675, 681, 686, 687, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 714, 729, 730, 745, 746, 747, 761, 770, 779, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 806, 807, 814, 828, 843, 844, 845, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 867, 924, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 942, 944, 945, 947, 948, 952, 953, 962, 965, 966, 967, 973, 974, 975, 977, 979, 980, 981, 984, 985, 986, 987, 988], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 104, 273], "96": [4, 44, 57, 142, 206, 335, 367, 921, 927, 932, 942, 973], "insight": [4, 7, 151, 152, 180, 181, 197, 270, 273, 311, 319, 361, 747, 750, 751, 761, 772, 939, 948, 956], "last_hour": 4, "slice": [4, 16, 107, 188, 201, 204, 211, 256, 261, 264, 284, 285, 295, 333, 339, 340, 347, 364, 415, 418, 444, 445, 459, 497, 590, 724, 728, 731, 865, 889, 890, 903, 985, 987], "suptitl": [4, 5, 14, 29, 30, 31, 35, 36, 46, 49, 52, 55, 62, 69, 85, 88, 96, 107, 108, 115, 118, 144, 151, 152, 173, 178, 194, 195, 199, 200, 201, 214, 224, 231, 271, 273, 275, 281, 283, 288, 289, 293, 306, 307, 316], "label": [4, 6, 7, 11, 12, 13, 15, 19, 22, 23, 24, 25, 29, 30, 34, 36, 38, 39, 41, 42, 43, 44, 45, 47, 48, 51, 53, 55, 58, 59, 60, 61, 62, 67, 69, 71, 72, 73, 74, 77, 78, 82, 83, 87, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 117, 118, 121, 124, 129, 135, 136, 140, 141, 142, 143, 144, 146, 148, 151, 154, 156, 158, 159, 161, 162, 163, 167, 168, 169, 173, 179, 180, 181, 182, 185, 186, 187, 188, 189, 194, 196, 197, 200, 201, 202, 206, 211, 212, 213, 215, 216, 223, 229, 230, 233, 234, 236, 237, 238, 239, 241, 244, 245, 246, 247, 248, 249, 250, 252, 258, 260, 262, 265, 269, 271, 273, 274, 278, 281, 282, 285, 287, 291, 293, 306, 307, 311, 312, 315, 316, 317, 318, 326, 330, 331, 332, 337, 338, 340, 343, 347, 351, 352, 360, 361, 362, 373, 374, 380, 381, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 412, 413, 416, 420, 438, 439, 440, 444, 445, 446, 447, 453, 454, 459, 460, 463, 465, 466, 470, 473, 474, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 518, 520, 521, 543, 544, 545, 546, 547, 549, 550, 551, 555, 556, 557, 560, 561, 582, 609, 610, 617, 618, 619, 624, 625, 626, 627, 628, 629, 648, 649, 651, 653, 654, 655, 656, 658, 660, 661, 663, 664, 665, 666, 667, 668, 669, 671, 675, 676, 677, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 704, 705, 706, 707, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 795, 796, 798, 799, 806, 807, 809, 813, 816, 817, 820, 822, 823, 833, 844, 845, 846, 849, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 869, 874, 875, 895, 896, 903, 921, 928, 929, 933, 934, 935, 936, 938, 939, 942, 946, 947, 948, 952, 954, 958, 963, 965, 966, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "actual": [4, 25, 42, 55, 69, 78, 99, 156, 168, 179, 187, 223, 231, 238, 313, 320, 324, 326, 335, 336, 338, 340, 343, 344, 349, 350, 351, 361, 363, 368, 371, 372, 386, 460, 466, 467, 478, 489, 491, 498, 513, 514, 596, 599, 609, 610, 617, 618, 619, 620, 621, 623, 625, 627, 628, 629, 631, 638, 642, 646, 652, 655, 660, 666, 672, 673, 674, 735, 745, 750, 751, 766, 767, 795, 826, 849, 855, 877, 878, 879, 907, 924, 931, 932, 935, 939, 940, 980, 981, 987, 988, 989], "black": [4, 9, 10, 11, 24, 31, 40, 45, 51, 73, 74, 83, 85, 99, 107, 128, 135, 136, 140, 141, 144, 147, 151, 152, 158, 167, 168, 169, 171, 175, 179, 180, 181, 185, 188, 191, 192, 197, 206, 221, 224, 256, 258, 268, 269, 271, 293, 309, 316, 317, 318, 338, 354, 356, 363, 370, 373, 506, 507, 582, 938, 939, 948, 952, 958], "One": [4, 9, 12, 22, 27, 45, 82, 90, 93, 106, 108, 111, 114, 148, 151, 154, 157, 194, 206, 216, 226, 235, 242, 245, 262, 274, 294, 296, 312, 324, 335, 338, 350, 351, 363, 366, 368, 369, 370, 371, 374, 396, 400, 423, 425, 429, 463, 517, 590, 609, 617, 619, 624, 626, 627, 628, 738, 754, 755, 777, 778, 779, 810, 811, 822, 853, 895, 922, 924, 928, 929, 930, 931, 932, 933, 935, 936, 939, 940, 942, 947, 954, 969, 977, 979, 986, 988], "legend": [4, 7, 8, 9, 11, 22, 24, 30, 33, 36, 56, 66, 67, 69, 71, 72, 73, 74, 77, 78, 87, 89, 93, 94, 95, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 129, 135, 136, 140, 141, 142, 143, 144, 151, 152, 156, 158, 159, 161, 163, 164, 167, 168, 169, 173, 179, 180, 181, 182, 185, 186, 187, 188, 189, 192, 193, 194, 196, 197, 202, 209, 210, 211, 212, 213, 216, 223, 230, 232, 234, 235, 237, 238, 239, 240, 242, 244, 245, 247, 248, 249, 250, 258, 259, 260, 265, 269, 274, 278, 282, 285, 290, 298, 301, 306, 311, 315, 316, 317, 318, 651], "draw": [4, 7, 15, 55, 144, 151, 175, 216, 237, 242, 299, 345, 366, 368, 369, 370, 506, 507, 508, 509, 514, 515, 516, 517, 562, 585, 652, 753, 861, 863, 931, 952, 961, 986, 987], "conclus": [4, 90, 151, 153, 179, 181, 235, 237, 320, 370, 961], "abov": [4, 23, 24, 33, 40, 61, 64, 101, 104, 109, 111, 121, 132, 133, 151, 152, 154, 165, 179, 181, 185, 190, 210, 213, 235, 241, 258, 275, 278, 279, 282, 284, 312, 313, 319, 320, 324, 325, 326, 332, 333, 335, 336, 337, 338, 340, 342, 344, 349, 351, 352, 363, 364, 365, 367, 368, 369, 371, 373, 393, 397, 415, 418, 440, 446, 447, 448, 474, 541, 585, 655, 705, 747, 759, 761, 770, 812, 813, 826, 832, 838, 846, 895, 921, 922, 924, 926, 928, 929, 932, 935, 937, 939, 942, 946, 947, 948, 953, 958, 959, 965, 966, 967, 979], "problemat": [4, 231, 364, 922, 981], "captur": [4, 9, 12, 33, 35, 78, 111, 115, 128, 140, 151, 158, 179, 227, 282, 299, 346, 370, 371, 372, 522, 539, 540, 542, 795, 899, 932, 937, 945, 949, 965, 985], "big": [4, 40, 55, 57, 183, 184, 200, 227, 325, 338, 344, 352, 365, 371, 375, 489, 512, 513, 753, 773, 784, 785, 786, 787, 788, 953, 956, 982, 983, 984, 985, 986, 987, 988, 989], "goe": [4, 33, 104, 319, 338, 370, 422, 423, 429, 508, 509, 515, 516, 517, 857, 858, 859, 860, 942, 946], "artifact": [4, 13, 42, 43, 273, 326, 342], "discontinu": [4, 349], "fail": [4, 50, 61, 86, 93, 143, 158, 235, 281, 325, 336, 338, 340, 341, 346, 352, 354, 366, 367, 392, 423, 425, 627, 628, 629, 806, 807, 880, 921, 929, 973, 974, 977, 978, 980, 981, 982, 983, 984, 985, 987, 988], "intra": [4, 539, 542, 740, 741], "variat": [4, 12, 33, 115, 140, 141, 148, 151, 184, 220, 222, 227, 232, 252, 282, 299, 335, 367, 368, 373, 395, 398, 410, 487, 594, 623, 625, 626, 745, 746, 765, 766, 768, 921, 932, 942, 945, 948, 952, 963, 965, 968, 969, 976, 978, 979], "harmon": [4, 33, 242, 312, 363, 486, 492, 679, 680, 686, 733, 743, 932], "phase": [4, 173, 324, 578, 924, 929, 935, 956, 981, 983], "potenti": [4, 71, 147, 150, 152, 158, 259, 260, 268, 313, 324, 325, 351, 354, 363, 367, 370, 371, 419, 433, 434, 435, 436, 447, 475, 500, 508, 509, 512, 513, 515, 516, 524, 557, 562, 585, 713, 839, 840, 847, 857, 858, 859, 860, 900, 938, 946, 952, 967, 976, 983, 984, 987], "fix": [4, 8, 23, 31, 42, 65, 95, 104, 107, 135, 136, 140, 143, 151, 181, 197, 227, 238, 268, 281, 282, 283, 284, 285, 286, 312, 324, 325, 332, 334, 336, 337, 338, 340, 341, 346, 349, 351, 352, 364, 367, 368, 370, 371, 373, 403, 413, 423, 455, 463, 482, 488, 491, 493, 499, 500, 510, 511, 515, 516, 539, 542, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 581, 604, 614, 621, 635, 638, 642, 646, 658, 735, 745, 761, 768, 791, 792, 794, 797, 799, 800, 816, 833, 857, 858, 886, 899, 921, 928, 931, 932, 935, 942, 953, 955, 967, 971, 972, 974, 975, 981, 982, 983, 984, 985, 987, 988, 989], "two": [4, 7, 9, 11, 14, 22, 24, 27, 33, 35, 36, 39, 55, 59, 64, 65, 69, 73, 77, 78, 81, 82, 83, 85, 87, 88, 90, 94, 97, 100, 106, 107, 108, 111, 114, 115, 116, 119, 130, 133, 135, 136, 137, 138, 141, 142, 146, 147, 148, 151, 152, 153, 158, 162, 167, 168, 169, 170, 175, 179, 180, 181, 187, 188, 191, 196, 197, 201, 203, 204, 206, 211, 213, 215, 221, 222, 223, 225, 226, 227, 230, 232, 236, 242, 256, 258, 261, 262, 264, 266, 273, 275, 278, 281, 282, 284, 285, 290, 295, 296, 299, 300, 301, 308, 311, 312, 313, 316, 320, 331, 332, 333, 334, 335, 336, 338, 340, 342, 344, 345, 346, 349, 351, 352, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 393, 394, 395, 396, 397, 398, 401, 402, 403, 404, 408, 410, 415, 420, 421, 422, 423, 424, 425, 426, 427, 439, 441, 442, 443, 444, 445, 447, 449, 451, 452, 453, 454, 455, 456, 458, 461, 465, 470, 473, 487, 489, 491, 495, 498, 500, 501, 504, 511, 521, 532, 535, 541, 542, 543, 546, 547, 549, 550, 551, 553, 554, 557, 558, 559, 561, 562, 571, 572, 575, 579, 583, 590, 594, 596, 621, 622, 624, 643, 650, 654, 655, 656, 663, 666, 667, 670, 672, 673, 674, 681, 682, 685, 686, 688, 691, 693, 704, 705, 707, 713, 714, 721, 724, 727, 728, 729, 730, 731, 735, 736, 742, 743, 744, 745, 778, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 806, 807, 813, 814, 821, 822, 823, 824, 843, 844, 845, 849, 857, 859, 860, 895, 911, 912, 918, 921, 922, 924, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 944, 945, 946, 947, 948, 949, 958, 962, 965, 966, 967, 970, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "onc": [4, 8, 46, 130, 133, 135, 200, 233, 236, 253, 281, 285, 311, 313, 319, 320, 324, 326, 332, 333, 338, 342, 343, 344, 345, 346, 350, 351, 352, 363, 364, 366, 367, 368, 370, 371, 372, 373, 400, 402, 404, 423, 459, 460, 489, 495, 502, 510, 511, 541, 542, 548, 570, 578, 598, 602, 604, 606, 612, 614, 616, 617, 618, 619, 627, 628, 629, 648, 663, 667, 669, 686, 731, 748, 752, 755, 765, 784, 785, 786, 787, 788, 861, 928, 929, 935, 942, 946, 947, 948, 958, 967, 970, 973, 981, 983, 984, 985, 986], "specif": [4, 11, 12, 25, 40, 57, 60, 64, 66, 118, 140, 143, 151, 152, 156, 197, 230, 235, 273, 281, 282, 286, 311, 312, 313, 320, 324, 325, 333, 338, 341, 343, 344, 346, 349, 351, 354, 359, 362, 363, 364, 367, 368, 370, 371, 372, 373, 447, 454, 485, 502, 508, 515, 518, 519, 520, 521, 525, 539, 542, 544, 548, 563, 564, 565, 566, 568, 569, 570, 571, 573, 574, 576, 591, 594, 597, 598, 603, 609, 623, 638, 648, 663, 664, 696, 747, 748, 749, 754, 755, 756, 761, 772, 785, 878, 880, 881, 895, 908, 909, 910, 926, 928, 929, 931, 932, 934, 935, 937, 939, 942, 946, 948, 949, 950, 951, 967, 969, 973, 977, 981, 982, 983, 984, 987, 988], "furthermor": [4, 33, 141, 152, 153, 216, 218, 253, 311, 312, 324, 326, 345, 363, 368, 370, 371, 513, 541, 557, 570, 655, 686, 696, 705, 707, 743, 849, 928, 940, 976, 980], "enforc": [4, 12, 49, 85, 140, 173, 262, 324, 338, 365, 368, 370, 373, 459, 478, 482, 488, 490, 493, 494, 496, 497, 499, 512, 513, 828, 869, 870, 922, 929, 975, 981, 983, 985, 989], "behav": [4, 12, 44, 48, 52, 230, 273, 283, 299, 320, 338, 344, 349, 350, 363, 367, 829, 928, 942, 947, 949, 953, 967, 973, 980, 982, 986, 987], "similarli": [4, 12, 33, 83, 114, 152, 168, 179, 207, 235, 268, 273, 299, 320, 325, 334, 336, 340, 343, 351, 352, 360, 366, 367, 371, 927, 929, 930, 932, 939, 946, 947, 949, 958, 962, 981, 987], "spiki": 4, "instanc": [4, 8, 10, 22, 24, 25, 49, 51, 53, 102, 130, 147, 152, 153, 162, 208, 231, 233, 244, 246, 247, 256, 264, 281, 293, 295, 296, 302, 311, 312, 313, 323, 324, 325, 332, 333, 335, 336, 337, 338, 340, 342, 343, 344, 346, 347, 349, 351, 354, 360, 361, 363, 364, 367, 368, 370, 371, 372, 373, 374, 375, 377, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 411, 413, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 439, 442, 443, 446, 447, 448, 454, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 528, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 561, 562, 571, 578, 579, 580, 581, 583, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 651, 652, 653, 658, 671, 679, 680, 688, 721, 724, 728, 729, 730, 731, 733, 734, 737, 738, 739, 740, 741, 745, 746, 747, 749, 750, 751, 752, 753, 754, 756, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 838, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 869, 870, 872, 880, 881, 885, 886, 900, 901, 902, 903, 906, 916, 917, 921, 922, 928, 929, 932, 934, 935, 938, 940, 942, 946, 947, 948, 953, 955, 958, 965, 966, 967, 969, 973, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "shorter": [4, 141, 224, 349, 363, 368, 373, 401, 408, 514, 648, 934, 938, 967, 984], "necessarili": [4, 28, 66, 88, 151, 179, 187, 197, 211, 212, 222, 275, 312, 332, 342, 361, 363, 370, 578, 797, 799, 800, 801, 926, 929, 931, 932], "creat": [4, 5, 8, 11, 15, 20, 24, 25, 27, 29, 33, 35, 37, 39, 40, 42, 45, 48, 53, 55, 57, 65, 66, 73, 78, 87, 90, 101, 104, 107, 108, 111, 114, 117, 131, 132, 135, 137, 140, 141, 142, 144, 147, 150, 152, 158, 160, 162, 165, 175, 180, 181, 191, 192, 201, 211, 216, 218, 226, 230, 231, 233, 235, 245, 252, 256, 261, 263, 264, 275, 277, 278, 281, 284, 285, 293, 295, 296, 300, 301, 304, 307, 308, 309, 313, 315, 317, 318, 320, 325, 333, 334, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 350, 351, 354, 361, 363, 364, 367, 369, 370, 371, 373, 390, 402, 404, 416, 417, 450, 466, 467, 468, 469, 497, 504, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 539, 540, 542, 548, 579, 581, 582, 583, 584, 648, 649, 651, 652, 653, 732, 739, 747, 749, 753, 757, 761, 765, 770, 771, 772, 779, 810, 822, 851, 854, 857, 858, 859, 860, 864, 867, 889, 890, 905, 917, 922, 928, 931, 932, 933, 935, 939, 942, 943, 944, 946, 947, 948, 952, 953, 956, 963, 965, 966, 970, 973, 974, 976, 979, 983, 986, 987, 988, 989], "turn": [4, 29, 71, 146, 147, 151, 194, 195, 211, 235, 257, 313, 324, 326, 333, 349, 351, 352, 362, 363, 364, 366, 368, 371, 372, 373, 532, 533, 540, 558, 559, 778, 782, 851, 854, 872, 922, 926, 934, 937, 942, 956, 967, 978, 980, 981, 986], "downstream": [4, 73, 313, 371, 482, 485, 488, 492, 493, 557, 822, 942, 983], "freedom": [4, 87, 140, 167, 168, 170, 235, 492, 607, 745, 928, 976], "underfit": [4, 111, 135, 148, 153, 228, 250, 268, 279, 608, 747, 750, 751, 761, 771, 772, 809, 824, 927, 928], "approxim": [4, 5, 25, 30, 42, 49, 73, 89, 90, 95, 103, 110, 111, 136, 151, 159, 175, 179, 180, 193, 197, 205, 206, 209, 212, 227, 235, 240, 249, 254, 262, 273, 275, 276, 278, 281, 284, 311, 313, 317, 318, 320, 327, 330, 335, 347, 349, 351, 360, 361, 364, 366, 367, 368, 370, 373, 375, 376, 377, 385, 400, 420, 421, 424, 425, 426, 427, 433, 434, 435, 442, 447, 453, 472, 475, 484, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 497, 498, 510, 511, 533, 540, 561, 562, 570, 589, 590, 591, 592, 593, 608, 609, 610, 623, 625, 627, 628, 630, 638, 643, 708, 709, 714, 745, 748, 765, 770, 774, 775, 789, 790, 793, 797, 799, 800, 801, 805, 809, 810, 815, 819, 821, 822, 826, 838, 849, 854, 855, 885, 886, 906, 925, 926, 927, 928, 929, 931, 935, 936, 937, 938, 939, 940, 944, 946, 947, 948, 952, 953, 967, 969, 973, 974, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987], "especi": [4, 8, 51, 108, 111, 151, 179, 286, 303, 312, 320, 325, 332, 338, 346, 349, 351, 361, 363, 371, 395, 400, 452, 489, 508, 509, 510, 511, 515, 516, 517, 597, 598, 599, 601, 603, 604, 605, 609, 610, 611, 612, 613, 614, 620, 631, 646, 656, 696, 784, 785, 786, 787, 788, 857, 858, 859, 860, 928, 934, 935, 940, 942, 956, 976, 981, 985, 986, 987], "sharp": [4, 152, 939, 942], "rush": [4, 338], "flatter": [4, 23], "accur": [4, 9, 20, 23, 24, 73, 85, 113, 135, 142, 151, 152, 194, 197, 235, 242, 246, 285, 311, 312, 320, 337, 361, 363, 365, 368, 370, 371, 372, 389, 395, 398, 402, 404, 410, 482, 489, 491, 493, 494, 496, 497, 498, 558, 559, 585, 750, 751, 789, 790, 885, 886, 924, 929, 932, 948, 987], "tend": [4, 12, 25, 33, 35, 39, 48, 52, 151, 152, 168, 179, 183, 184, 197, 221, 224, 232, 236, 252, 271, 313, 324, 326, 338, 340, 351, 361, 363, 365, 368, 370, 372, 389, 399, 604, 795, 826, 838, 886, 928, 929, 935, 948, 967], "under": [4, 7, 11, 22, 23, 25, 37, 62, 71, 72, 93, 108, 111, 152, 179, 206, 215, 235, 242, 244, 245, 274, 307, 332, 338, 340, 342, 344, 346, 351, 354, 357, 361, 363, 365, 367, 368, 371, 372, 402, 404, 421, 422, 423, 424, 425, 426, 427, 483, 490, 492, 494, 605, 606, 607, 653, 657, 658, 659, 666, 692, 704, 738, 739, 745, 746, 794, 928, 929, 930, 932, 935, 942, 946, 947, 948, 952, 953, 967, 973, 975, 976, 978, 981, 985], "These": [4, 5, 7, 25, 47, 85, 87, 91, 104, 107, 148, 152, 168, 179, 180, 181, 183, 207, 242, 252, 253, 257, 271, 273, 280, 285, 289, 291, 320, 324, 325, 331, 334, 335, 338, 340, 342, 345, 347, 349, 351, 354, 357, 360, 361, 362, 363, 366, 368, 370, 371, 372, 373, 394, 399, 449, 459, 460, 466, 489, 518, 519, 553, 554, 619, 627, 628, 657, 683, 706, 728, 742, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 794, 795, 814, 921, 923, 926, 928, 929, 932, 933, 943, 945, 947, 952, 958, 962, 967, 973, 979, 981, 982, 983, 986], "systemat": [4, 235, 340, 663, 678, 932, 988], "reveal": [4, 151, 153, 311, 344, 360, 929], "form": [4, 9, 18, 29, 38, 55, 62, 85, 121, 142, 143, 151, 212, 227, 235, 288, 320, 332, 335, 338, 340, 342, 351, 352, 360, 362, 363, 366, 367, 368, 369, 370, 371, 373, 375, 377, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 410, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 636, 638, 639, 640, 641, 642, 643, 644, 650, 745, 746, 747, 750, 751, 752, 755, 757, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 875, 921, 923, 925, 926, 928, 929, 932, 933, 936, 937, 938, 942, 947, 952, 958, 965, 979, 983, 985], "explain": [4, 5, 12, 51, 67, 77, 78, 94, 111, 135, 140, 141, 152, 153, 179, 197, 206, 227, 245, 248, 279, 311, 312, 325, 336, 338, 342, 357, 359, 366, 368, 373, 444, 472, 475, 485, 492, 495, 500, 576, 599, 607, 620, 631, 672, 673, 674, 678, 735, 928, 935, 948, 951, 952, 963, 965, 966, 984, 986, 987], "lack": [4, 338, 340, 349, 367, 774, 864, 947, 987], "deriv": [4, 18, 95, 96, 110, 140, 143, 153, 167, 168, 172, 180, 325, 333, 340, 365, 367, 369, 370, 371, 373, 375, 393, 397, 416, 484, 557, 568, 573, 599, 620, 627, 631, 806, 807, 822, 828, 849, 850, 926, 928, 929, 932, 936, 938, 947, 973, 974, 975, 980, 981, 982, 988], "address": [4, 44, 311, 333, 338, 363, 371, 608, 928, 929, 934, 935, 936, 937, 938, 942, 956, 965, 981], "section": [4, 33, 85, 90, 102, 118, 123, 124, 125, 126, 140, 144, 150, 151, 152, 158, 167, 168, 181, 203, 207, 217, 233, 235, 238, 244, 278, 279, 283, 311, 312, 313, 320, 331, 333, 336, 338, 339, 340, 342, 343, 344, 345, 346, 352, 357, 361, 362, 364, 366, 367, 368, 370, 371, 372, 373, 391, 395, 410, 485, 565, 570, 573, 588, 596, 738, 746, 851, 854, 921, 926, 928, 932, 933, 935, 936, 938, 939, 946, 947, 949, 951, 965, 967, 973, 975, 976, 977, 980], "margin": [4, 12, 23, 25, 136, 137, 139, 140, 141, 148, 151, 152, 157, 235, 273, 279, 294, 297, 299, 301, 335, 361, 362, 368, 370, 373, 463, 561, 562, 596, 627, 685, 778, 826, 838, 851, 854, 928, 932, 934, 938, 939, 942, 946, 947, 965, 980, 982], "construct": [4, 11, 64, 66, 99, 101, 103, 106, 118, 197, 207, 217, 219, 252, 266, 274, 276, 282, 285, 332, 335, 340, 347, 351, 363, 367, 368, 370, 371, 374, 386, 393, 394, 396, 397, 401, 403, 408, 414, 416, 418, 470, 486, 492, 495, 506, 507, 532, 538, 590, 639, 641, 642, 761, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 808, 809, 810, 811, 813, 854, 868, 870, 885, 886, 895, 921, 922, 924, 928, 929, 932, 933, 935, 942, 945, 947, 948, 953, 958, 962, 978, 980, 981, 984, 987], "polynomialfeatur": [4, 158, 179, 180, 185, 217, 249, 283, 828, 928, 942, 977, 981, 982, 983, 986, 987], "coars": [4, 107, 344, 399, 412], "too": [4, 7, 12, 16, 40, 46, 52, 57, 68, 75, 89, 111, 146, 153, 180, 200, 210, 222, 229, 233, 242, 250, 270, 279, 299, 311, 317, 318, 324, 335, 338, 344, 346, 349, 351, 363, 365, 367, 370, 371, 372, 375, 389, 400, 489, 539, 542, 630, 643, 658, 784, 785, 786, 787, 788, 814, 827, 829, 927, 929, 931, 932, 934, 935, 939, 965, 974, 977, 980, 981, 982, 983, 985], "mani": [4, 7, 10, 18, 51, 68, 71, 75, 105, 106, 107, 109, 112, 129, 133, 153, 179, 199, 210, 222, 229, 235, 242, 243, 247, 253, 273, 278, 279, 281, 282, 283, 284, 285, 311, 320, 324, 326, 333, 335, 337, 338, 350, 351, 352, 360, 361, 363, 364, 365, 368, 370, 371, 372, 373, 375, 454, 504, 505, 508, 509, 510, 511, 515, 516, 517, 539, 542, 557, 560, 578, 590, 601, 605, 609, 610, 617, 619, 627, 628, 629, 643, 646, 650, 724, 728, 747, 751, 761, 806, 807, 822, 827, 829, 849, 857, 858, 859, 860, 921, 922, 924, 928, 929, 931, 932, 933, 934, 935, 938, 939, 940, 942, 945, 947, 949, 951, 952, 953, 956, 965, 967, 973, 975, 976, 978, 979, 980, 981, 982, 983, 987, 988], "featureunion": [4, 68, 330, 351, 362, 415, 580, 811, 922, 953, 956, 969, 974, 977, 978, 979, 981, 982, 983, 984, 985, 987, 988, 989], "hour_workday_interact": 4, "interaction_onli": [4, 824, 928, 942], "combin": [4, 12, 23, 25, 56, 64, 65, 67, 68, 85, 94, 95, 97, 109, 113, 135, 141, 147, 148, 151, 179, 196, 197, 203, 206, 211, 235, 236, 244, 246, 247, 262, 269, 279, 283, 284, 286, 302, 313, 316, 324, 330, 334, 335, 338, 343, 350, 351, 360, 361, 363, 364, 367, 368, 369, 370, 371, 372, 373, 375, 376, 397, 415, 417, 418, 424, 426, 427, 430, 431, 432, 440, 447, 459, 460, 466, 472, 475, 477, 482, 488, 489, 491, 493, 498, 500, 511, 513, 516, 518, 519, 561, 565, 567, 572, 575, 581, 585, 594, 597, 598, 603, 604, 609, 610, 611, 612, 613, 614, 617, 619, 623, 624, 625, 626, 627, 629, 630, 632, 635, 680, 738, 747, 750, 751, 758, 759, 770, 772, 776, 808, 810, 814, 822, 823, 824, 829, 849, 906, 921, 924, 925, 928, 932, 933, 935, 938, 942, 945, 946, 949, 956, 963, 965, 967, 973, 978, 981, 984, 985, 986, 988, 989], "ones": [4, 11, 31, 39, 65, 74, 114, 135, 156, 184, 206, 209, 235, 243, 246, 260, 277, 289, 309, 324, 325, 338, 346, 351, 363, 365, 367, 370, 401, 483, 517, 532, 561, 562, 595, 596, 609, 610, 621, 627, 654, 744, 749, 754, 765, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 824, 828, 891, 928, 932, 937, 938, 942, 947, 965, 973, 981, 982, 983], "previou": [4, 39, 49, 65, 85, 102, 108, 111, 118, 135, 140, 141, 150, 151, 152, 165, 180, 210, 212, 235, 238, 242, 273, 278, 285, 311, 312, 313, 320, 324, 333, 338, 340, 343, 344, 346, 349, 351, 352, 354, 363, 370, 371, 419, 497, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 581, 597, 599, 603, 604, 609, 611, 613, 617, 618, 619, 620, 627, 628, 629, 631, 658, 766, 780, 783, 798, 806, 807, 846, 863, 928, 932, 936, 942, 953, 958, 967, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "nice": [4, 62, 180, 273, 324, 368, 967], "improvemnt": 4, "cyclic_spline_interactions_pipelin": 4, "highlight": [4, 73, 83, 135, 136, 141, 197, 277, 311, 313, 327, 338, 342, 343, 346, 349, 373, 395, 398, 415, 418, 441, 442, 447, 452, 455, 463, 466, 475, 489, 512, 513, 515, 516, 518, 550, 553, 579, 581, 585, 591, 597, 599, 603, 609, 620, 631, 639, 668, 698, 738, 747, 750, 751, 761, 775, 791, 793, 810, 814, 819, 822, 823, 824, 828, 829, 846, 847, 849, 854, 858, 881, 929, 932, 940, 942, 947, 983, 984, 985, 986, 987, 988], "anoth": [4, 33, 85, 90, 113, 133, 135, 143, 147, 151, 168, 187, 204, 206, 216, 222, 235, 237, 238, 241, 245, 263, 313, 315, 320, 324, 326, 332, 333, 336, 338, 340, 344, 349, 351, 357, 360, 363, 367, 368, 370, 371, 372, 374, 394, 396, 403, 406, 413, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 459, 489, 491, 498, 624, 627, 643, 660, 670, 753, 808, 809, 830, 921, 927, 928, 929, 932, 933, 935, 938, 942, 946, 947, 958, 965, 966, 967, 982, 983], "either": [4, 10, 27, 65, 107, 108, 151, 167, 169, 207, 230, 239, 244, 258, 319, 324, 325, 330, 333, 336, 338, 339, 340, 344, 351, 357, 361, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 375, 394, 398, 403, 438, 447, 463, 475, 484, 485, 487, 495, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 533, 534, 535, 539, 540, 541, 542, 544, 545, 548, 553, 558, 559, 561, 562, 573, 578, 581, 583, 584, 601, 605, 607, 615, 627, 629, 633, 634, 641, 648, 649, 653, 657, 658, 662, 663, 671, 674, 676, 677, 678, 685, 689, 690, 692, 702, 706, 719, 724, 728, 732, 735, 738, 739, 742, 747, 750, 751, 753, 761, 769, 770, 771, 772, 773, 774, 776, 779, 839, 840, 846, 849, 850, 857, 858, 859, 860, 864, 893, 921, 928, 932, 933, 934, 935, 936, 937, 940, 942, 946, 947, 958, 966, 967, 973, 976, 982, 983, 984, 987], "after": [4, 16, 19, 20, 24, 42, 49, 64, 65, 69, 74, 87, 99, 109, 116, 118, 121, 129, 140, 142, 144, 146, 151, 156, 172, 179, 215, 216, 219, 224, 235, 244, 253, 261, 263, 273, 274, 277, 278, 311, 312, 326, 333, 335, 336, 337, 338, 340, 342, 344, 345, 346, 349, 351, 352, 357, 359, 360, 361, 363, 364, 367, 368, 371, 372, 373, 375, 394, 398, 401, 402, 403, 404, 407, 413, 466, 483, 487, 504, 505, 510, 511, 512, 513, 548, 578, 581, 609, 610, 617, 618, 619, 624, 626, 627, 628, 629, 643, 663, 676, 706, 742, 745, 746, 750, 751, 798, 805, 809, 822, 828, 849, 854, 855, 921, 922, 926, 928, 932, 936, 937, 942, 944, 946, 947, 948, 953, 958, 965, 967, 973, 976, 980, 981, 984, 985, 988], "quadrat": [4, 26, 140, 144, 148, 193, 237, 284, 362, 392, 409, 412, 500, 501, 574, 599, 609, 610, 620, 627, 631, 667, 854, 855, 928, 929, 932, 935, 938, 942, 946, 947, 954, 969, 974], "tractabl": [4, 367, 585, 952, 986], "nystr\u00f6m": 4, "latter": [4, 14, 226, 235, 244, 245, 261, 278, 307, 326, 335, 338, 351, 367, 370, 371, 377, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 692, 745, 746, 747, 750, 751, 756, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 899, 935, 982], "kernel_approxim": [4, 146, 148, 155, 156, 193, 206, 211, 283, 327, 628, 708, 709, 815, 924, 958, 974, 980, 989], "nystroem": [4, 146, 193, 206, 211, 330, 591, 592, 593, 628, 815, 854, 855, 969, 974, 980, 983, 985, 986, 987], "cyclic_spline_poly_pipelin": 4, "poli": [4, 15, 126, 156, 235, 296, 303, 306, 403, 486, 571, 715, 724, 747, 824, 851, 852, 853, 854, 855, 928, 942, 965], "n_compon": [4, 5, 6, 12, 14, 40, 48, 52, 53, 54, 64, 67, 68, 77, 78, 81, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 116, 156, 178, 199, 200, 201, 202, 203, 204, 206, 210, 211, 213, 217, 221, 222, 223, 224, 225, 226, 227, 234, 257, 262, 271, 278, 283, 285, 312, 340, 343, 344, 351, 366, 368, 375, 402, 403, 413, 415, 433, 434, 435, 436, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 590, 591, 592, 593, 639, 640, 641, 642, 643, 644, 645, 646, 647, 745, 746, 798, 805, 808, 841, 842, 843, 886, 924, 926, 929, 931, 935, 963, 966, 974, 975, 979, 980, 981, 982, 983, 984, 985, 987], "300": [4, 19, 20, 31, 34, 53, 88, 99, 100, 101, 147, 169, 204, 206, 210, 225, 238, 263, 276, 283, 288, 305, 307, 340, 395, 398, 399, 410, 412, 590, 595, 596, 630, 641, 643, 645, 806, 928, 983], "almost": [4, 109, 110, 181, 187, 249, 278, 291, 320, 331, 333, 342, 344, 349, 350, 351, 363, 367, 368, 421, 422, 423, 424, 426, 427, 428, 745, 921, 927, 928, 931, 932, 947, 966, 967, 981, 986], "rival": [4, 846, 945], "intermedi": [4, 7, 48, 104, 111, 299, 371, 510, 511, 570, 809, 932, 985], "compound": [4, 197, 371, 561, 563, 631, 674, 702, 928, 967], "one_hot_poly_pipelin": 4, "competit": [4, 111, 311, 595, 935], "low": [4, 11, 12, 33, 46, 74, 78, 87, 89, 93, 102, 114, 153, 172, 174, 179, 181, 193, 199, 201, 206, 210, 215, 221, 222, 224, 227, 229, 235, 237, 241, 242, 250, 259, 260, 270, 277, 279, 291, 298, 299, 311, 319, 334, 335, 338, 343, 346, 351, 354, 360, 361, 362, 367, 368, 371, 394, 400, 472, 475, 486, 533, 540, 554, 630, 643, 647, 656, 676, 692, 739, 794, 823, 830, 886, 897, 900, 921, 924, 927, 928, 929, 931, 932, 935, 937, 938, 939, 940, 942, 944, 947, 948, 954, 969, 974, 977, 978, 979, 981, 982, 987, 988], "rank": [4, 16, 23, 73, 89, 93, 105, 131, 153, 154, 197, 233, 235, 243, 334, 358, 360, 361, 365, 366, 368, 370, 371, 459, 460, 472, 475, 500, 501, 544, 545, 557, 599, 608, 620, 631, 647, 650, 671, 676, 677, 689, 690, 706, 742, 750, 751, 886, 921, 923, 924, 929, 940, 942, 956, 969, 974, 979, 982, 983, 987, 988], "fact": [4, 11, 18, 23, 74, 78, 111, 153, 210, 219, 332, 345, 349, 351, 366, 368, 369, 370, 371, 600, 619, 621, 655, 926, 928, 935, 942, 946, 947, 953, 956, 987], "smoother": [4, 5, 111, 152, 270, 369], "allow": [4, 51, 53, 68, 69, 89, 90, 102, 103, 116, 135, 140, 142, 144, 173, 179, 197, 200, 207, 210, 216, 218, 219, 221, 235, 252, 281, 282, 283, 284, 286, 304, 311, 319, 320, 324, 332, 336, 338, 339, 340, 342, 345, 347, 351, 352, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 393, 396, 397, 415, 417, 418, 474, 475, 485, 504, 505, 510, 511, 512, 513, 518, 519, 533, 534, 540, 544, 545, 548, 554, 561, 562, 566, 578, 579, 581, 585, 589, 594, 597, 598, 603, 604, 609, 611, 612, 613, 614, 627, 629, 632, 633, 634, 635, 639, 643, 712, 715, 724, 728, 731, 740, 741, 745, 746, 747, 749, 750, 751, 754, 756, 758, 761, 768, 775, 795, 804, 811, 812, 815, 816, 821, 833, 842, 844, 845, 846, 849, 850, 857, 858, 859, 860, 867, 869, 870, 880, 881, 896, 921, 922, 924, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 942, 944, 945, 946, 947, 948, 952, 953, 956, 958, 970, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "find": [4, 5, 6, 12, 16, 36, 42, 43, 44, 45, 48, 49, 52, 60, 67, 73, 74, 85, 87, 89, 90, 96, 109, 118, 135, 152, 167, 168, 181, 187, 199, 201, 203, 204, 209, 226, 234, 235, 236, 246, 261, 262, 263, 278, 281, 301, 302, 307, 311, 312, 315, 325, 335, 336, 338, 339, 340, 343, 344, 347, 349, 350, 351, 352, 360, 363, 365, 366, 368, 370, 371, 372, 374, 393, 396, 397, 401, 402, 403, 404, 413, 482, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 509, 516, 533, 540, 561, 562, 598, 601, 604, 605, 606, 607, 609, 610, 622, 639, 658, 679, 680, 688, 732, 733, 734, 737, 738, 742, 747, 761, 791, 792, 793, 795, 797, 799, 800, 801, 822, 823, 828, 841, 842, 843, 857, 858, 860, 866, 885, 886, 888, 921, 922, 924, 927, 928, 929, 931, 932, 933, 936, 938, 942, 946, 947, 948, 951, 953, 956, 958, 960, 962, 963, 965, 966, 967, 973, 980, 981, 982, 983, 985, 987, 988], "function": [4, 5, 6, 7, 8, 14, 19, 20, 33, 42, 49, 50, 52, 54, 61, 64, 69, 85, 88, 90, 98, 108, 110, 111, 112, 113, 129, 135, 138, 139, 140, 141, 142, 143, 147, 148, 150, 151, 152, 157, 158, 161, 166, 177, 179, 180, 185, 187, 192, 193, 195, 197, 199, 207, 209, 212, 216, 218, 226, 233, 235, 236, 237, 238, 243, 244, 249, 253, 268, 273, 281, 282, 284, 285, 293, 296, 297, 298, 299, 300, 301, 305, 307, 309, 311, 312, 316, 320, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 349, 350, 351, 354, 357, 361, 363, 364, 365, 366, 368, 369, 371, 372, 374, 375, 389, 392, 395, 396, 397, 398, 399, 401, 403, 405, 408, 409, 410, 411, 412, 415, 416, 420, 422, 423, 425, 429, 439, 440, 442, 443, 446, 448, 454, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 523, 526, 532, 533, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 555, 558, 559, 560, 561, 562, 566, 568, 570, 571, 573, 574, 578, 579, 582, 583, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 649, 650, 651, 653, 654, 655, 657, 662, 663, 667, 670, 672, 673, 674, 678, 682, 684, 685, 688, 690, 691, 692, 700, 705, 707, 711, 712, 713, 715, 718, 721, 724, 728, 729, 730, 731, 732, 733, 735, 739, 740, 741, 742, 744, 745, 746, 747, 749, 750, 751, 752, 753, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 818, 819, 821, 825, 826, 827, 828, 829, 830, 833, 835, 838, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 867, 876, 878, 879, 880, 885, 886, 898, 899, 900, 902, 903, 906, 907, 916, 921, 922, 923, 925, 927, 929, 930, 933, 935, 936, 937, 938, 939, 940, 942, 945, 946, 948, 952, 953, 954, 958, 961, 962, 963, 967, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "abl": [4, 5, 9, 22, 43, 56, 75, 78, 89, 90, 115, 141, 151, 168, 179, 195, 197, 203, 241, 246, 299, 320, 324, 325, 326, 332, 336, 338, 340, 342, 343, 349, 365, 367, 371, 436, 454, 485, 774, 821, 921, 922, 928, 931, 932, 933, 938, 942, 945, 948, 949, 953, 958, 966, 967, 979, 980, 984], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 35, 156, 255, 307, 313, 324, 359, 365, 371, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 757, 789, 790, 857, 858, 859, 860, 921, 932, 935, 948, 956, 961, 965, 976, 977], "depth": [4, 98, 104, 108, 112, 114, 119, 315, 317, 318, 319, 324, 336, 338, 342, 350, 370, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 789, 790, 794, 857, 858, 859, 860, 861, 863, 891, 937, 938, 948, 975, 976, 984], "accuraci": [4, 7, 8, 15, 23, 27, 28, 30, 65, 66, 67, 99, 105, 109, 110, 116, 129, 132, 136, 154, 156, 179, 187, 194, 195, 223, 234, 235, 236, 237, 239, 241, 250, 255, 261, 262, 263, 271, 275, 278, 291, 299, 302, 320, 324, 340, 350, 351, 362, 363, 367, 370, 371, 372, 380, 389, 400, 420, 422, 423, 429, 483, 485, 492, 500, 501, 502, 504, 506, 508, 509, 510, 512, 515, 516, 518, 520, 561, 585, 609, 610, 617, 619, 622, 625, 626, 627, 643, 648, 654, 659, 664, 669, 684, 688, 693, 704, 713, 737, 742, 744, 773, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 791, 796, 798, 799, 806, 844, 845, 849, 851, 854, 857, 859, 885, 886, 921, 926, 927, 928, 929, 933, 935, 936, 940, 944, 946, 948, 962, 967, 981, 982], "On": [4, 16, 62, 77, 78, 90, 102, 111, 128, 139, 151, 152, 167, 168, 181, 210, 212, 221, 223, 230, 231, 232, 237, 238, 240, 273, 275, 277, 278, 282, 299, 324, 336, 339, 340, 342, 349, 351, 357, 361, 363, 367, 368, 370, 372, 373, 594, 607, 642, 685, 711, 830, 921, 925, 928, 931, 932, 934, 938, 945, 947, 962, 965], "contrari": [4, 13, 151, 200, 204, 221, 238, 273, 311, 332, 363, 447, 495, 557, 764, 830, 928, 934, 938], "significantli": [4, 22, 23, 33, 71, 72, 109, 133, 151, 152, 153, 179, 187, 195, 197, 235, 253, 282, 283, 312, 313, 320, 325, 342, 363, 368, 370, 371, 376, 420, 425, 430, 431, 489, 491, 498, 509, 516, 597, 598, 603, 604, 611, 612, 613, 614, 635, 643, 789, 790, 924, 928, 929, 935, 940, 947, 973, 975, 976, 980, 981, 986, 987, 988], "over": [4, 7, 8, 9, 15, 22, 24, 25, 28, 33, 46, 51, 66, 68, 85, 102, 114, 128, 132, 135, 143, 146, 150, 152, 161, 173, 179, 187, 197, 206, 235, 236, 238, 240, 242, 243, 244, 247, 258, 266, 268, 269, 275, 284, 285, 288, 311, 312, 324, 325, 326, 333, 334, 337, 338, 339, 340, 344, 350, 351, 359, 361, 362, 363, 364, 367, 368, 369, 370, 371, 373, 375, 400, 415, 423, 460, 484, 485, 487, 488, 489, 490, 497, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 532, 533, 539, 540, 542, 545, 553, 583, 584, 585, 595, 596, 597, 598, 603, 604, 609, 611, 612, 613, 614, 616, 617, 618, 619, 627, 628, 629, 636, 637, 648, 667, 669, 689, 713, 738, 741, 745, 747, 750, 751, 753, 758, 759, 761, 770, 771, 772, 773, 774, 776, 805, 806, 807, 808, 824, 828, 849, 866, 875, 900, 921, 928, 929, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 945, 946, 947, 948, 952, 953, 956, 963, 966, 973, 976, 977, 979, 980, 981, 982, 983, 984, 986], "compet": 4, "access": [4, 45, 71, 222, 227, 311, 319, 324, 325, 338, 339, 340, 346, 349, 351, 352, 363, 365, 366, 370, 371, 373, 401, 408, 415, 487, 518, 519, 520, 521, 568, 650, 807, 808, 809, 864, 928, 931, 932, 938, 939, 940, 946, 947, 953, 956, 958, 966, 967, 973, 975, 979, 980, 981, 982, 985, 987, 988, 989], "requir": [4, 7, 13, 23, 41, 42, 44, 49, 52, 53, 62, 64, 81, 89, 91, 92, 104, 108, 112, 114, 118, 133, 152, 168, 176, 179, 197, 199, 201, 207, 210, 219, 236, 244, 246, 253, 255, 273, 278, 283, 284, 311, 312, 313, 332, 335, 336, 338, 340, 342, 344, 346, 349, 351, 352, 354, 362, 363, 364, 365, 367, 368, 370, 371, 372, 373, 374, 380, 389, 390, 391, 396, 401, 403, 408, 413, 415, 418, 420, 433, 434, 435, 447, 459, 472, 475, 486, 492, 500, 501, 502, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 523, 530, 531, 532, 561, 562, 570, 578, 583, 584, 585, 594, 609, 610, 617, 619, 622, 625, 626, 627, 628, 629, 637, 640, 642, 643, 644, 646, 650, 674, 679, 680, 692, 697, 699, 702, 713, 734, 737, 747, 750, 751, 754, 756, 761, 772, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 799, 800, 801, 806, 809, 810, 811, 813, 823, 824, 825, 827, 829, 837, 841, 842, 844, 845, 849, 850, 851, 854, 857, 858, 859, 860, 898, 918, 921, 926, 927, 928, 929, 932, 933, 934, 935, 936, 938, 939, 942, 946, 947, 948, 953, 958, 965, 967, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "geograph": [4, 11, 266, 333, 449], "repartit": 4, "immobil": 4, "quant": 4, "predictionerrordisplai": [4, 69, 118, 151, 231, 286, 932, 988], "nrow": [4, 5, 29, 52, 61, 67, 85, 144, 152, 179, 181, 187, 197, 199, 200, 203, 237, 238, 253, 275, 277, 278, 286, 289, 306, 307, 963], "ncol": [4, 5, 29, 49, 52, 61, 85, 90, 96, 152, 179, 180, 181, 187, 197, 199, 200, 209, 231, 237, 238, 246, 253, 269, 274, 275, 277, 278, 286, 306, 307, 312], "13": [4, 10, 11, 40, 90, 95, 107, 109, 110, 112, 146, 156, 188, 236, 239, 241, 273, 277, 299, 333, 335, 338, 344, 350, 367, 375, 461, 464, 483, 484, 502, 503, 533, 586, 590, 684, 765, 793, 808, 815, 841, 842, 928, 932, 933, 938, 939, 942, 947, 950, 958, 971, 973, 975, 976, 979, 980, 981, 982, 985], "sharex": [4, 7, 14, 67, 83, 90, 119, 144, 152, 181, 237, 258, 291, 963], "sharei": [4, 69, 83, 90, 96, 119, 144, 152, 179, 181, 187, 237, 246, 258, 274, 279, 306, 307, 312], "row": [4, 18, 19, 20, 23, 25, 40, 55, 69, 81, 83, 107, 116, 119, 146, 180, 181, 207, 210, 215, 216, 275, 319, 324, 333, 340, 347, 350, 351, 360, 363, 366, 371, 378, 394, 395, 398, 400, 401, 402, 404, 407, 408, 410, 415, 419, 439, 441, 442, 443, 444, 445, 446, 451, 452, 453, 455, 456, 461, 462, 464, 485, 493, 499, 502, 541, 542, 571, 583, 594, 597, 598, 603, 604, 611, 612, 613, 614, 632, 635, 643, 647, 648, 661, 669, 670, 675, 708, 709, 713, 716, 718, 719, 720, 721, 723, 724, 726, 728, 729, 730, 731, 745, 746, 778, 784, 785, 786, 787, 788, 794, 797, 798, 799, 800, 801, 804, 815, 819, 821, 824, 836, 839, 840, 843, 847, 865, 869, 870, 886, 903, 906, 910, 912, 914, 915, 919, 921, 922, 926, 928, 930, 932, 933, 935, 942, 943, 946, 947, 953, 980, 981, 982, 983, 988], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 69, 118, 151, 231, 286, 652], "residual_vs_predict": [4, 69, 231, 286, 652], "axis_idx": 4, "kind": [4, 9, 12, 22, 23, 69, 94, 118, 128, 151, 152, 226, 229, 231, 244, 283, 286, 296, 299, 311, 325, 326, 331, 333, 338, 340, 344, 349, 350, 361, 363, 366, 367, 368, 370, 371, 372, 439, 440, 454, 459, 460, 472, 475, 539, 583, 584, 652, 878, 928, 934, 939, 948, 976, 985, 987, 988], "enumer": [4, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 25, 27, 28, 31, 33, 35, 36, 37, 38, 39, 40, 41, 46, 54, 55, 56, 57, 64, 72, 74, 75, 78, 86, 88, 95, 98, 102, 109, 110, 112, 113, 123, 137, 139, 144, 154, 159, 161, 170, 179, 200, 201, 204, 206, 211, 214, 215, 221, 222, 223, 224, 226, 227, 230, 237, 238, 244, 245, 258, 262, 263, 265, 271, 275, 276, 288, 289, 291, 293, 297, 299, 306, 307, 311, 316, 333, 510, 511, 515, 516, 731, 748, 749, 752, 754, 755, 756, 757, 760, 762, 763, 764, 765, 766, 767, 768], "pred": [4, 7, 11, 29, 308, 311, 333, 599, 620, 631, 648, 653, 657, 669, 679, 680, 688, 733, 734, 737, 738, 932], "zip": [4, 5, 8, 12, 22, 24, 28, 29, 33, 34, 36, 38, 41, 45, 58, 59, 60, 69, 78, 83, 85, 86, 89, 94, 95, 96, 99, 101, 103, 118, 119, 141, 146, 148, 151, 152, 153, 164, 170, 171, 179, 187, 188, 199, 210, 222, 226, 227, 233, 237, 238, 239, 242, 244, 253, 258, 261, 268, 269, 270, 275, 277, 278, 279, 292, 296, 307, 308, 316, 336, 370, 773, 942, 967], "disp": [4, 29, 101, 114, 115, 229, 238, 278, 282, 296, 301, 390, 582, 648, 651, 652, 798], "from_predict": [4, 29, 69, 118, 151, 215, 231, 242, 244, 284, 288, 311, 345, 390, 582, 648, 649, 651, 652, 653, 669, 677, 732, 734, 737, 738, 739, 932, 970, 986, 987, 988, 989], "y_true": [4, 18, 29, 54, 69, 118, 138, 179, 189, 197, 224, 291, 338, 384, 390, 391, 416, 433, 434, 435, 503, 505, 507, 508, 509, 511, 513, 515, 516, 519, 521, 562, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 623, 624, 629, 630, 648, 649, 651, 652, 653, 654, 658, 659, 660, 663, 664, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 732, 733, 734, 735, 737, 738, 739, 742, 744, 782, 783, 792, 800, 807, 850, 852, 855, 858, 860, 932, 974, 979, 980, 981, 982, 984, 985, 987, 988], "y_pred": [4, 6, 7, 23, 27, 29, 31, 40, 52, 57, 64, 69, 98, 111, 112, 118, 130, 151, 179, 181, 186, 189, 194, 196, 197, 206, 207, 215, 231, 233, 238, 260, 264, 271, 278, 291, 292, 320, 338, 345, 351, 370, 384, 391, 416, 433, 434, 435, 500, 503, 505, 507, 508, 509, 511, 513, 515, 516, 518, 519, 521, 562, 582, 586, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 623, 624, 625, 626, 627, 629, 630, 631, 648, 649, 651, 652, 653, 654, 659, 663, 664, 669, 672, 673, 674, 678, 679, 680, 684, 688, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 733, 734, 735, 737, 738, 744, 747, 750, 751, 761, 770, 780, 782, 783, 792, 800, 807, 809, 849, 850, 851, 852, 853, 854, 855, 858, 860, 932, 934, 963, 979, 980, 982, 984, 988, 989], "scatter_kwarg": [4, 69, 118, 151, 652], "set_xtick": [4, 8, 10, 15, 28, 31, 39, 55, 59, 96, 116, 120, 152, 154, 170, 195, 211, 221, 246, 247, 252, 268, 270, 275, 276, 296], "num": [4, 12, 65, 133, 135, 140, 141, 142, 152, 153, 181, 242, 243, 285, 583], "set_ytick": [4, 15, 28, 31, 39, 55, 59, 96, 116, 146, 147, 154, 170, 195, 221, 246, 268, 270, 275, 276, 296, 313], "loc": [4, 7, 8, 9, 22, 24, 30, 36, 66, 69, 72, 73, 74, 77, 87, 89, 93, 94, 95, 98, 101, 102, 103, 109, 110, 111, 112, 113, 115, 118, 120, 121, 124, 129, 135, 136, 142, 144, 151, 152, 161, 163, 164, 169, 173, 179, 180, 181, 182, 185, 186, 189, 192, 193, 196, 197, 202, 209, 210, 211, 212, 213, 223, 224, 230, 233, 234, 235, 238, 239, 242, 245, 248, 249, 250, 258, 259, 260, 269, 274, 277, 278, 282, 285, 290, 298, 301, 306, 311, 316, 318, 761, 826, 838], "upper": [4, 7, 9, 22, 66, 69, 72, 73, 74, 98, 101, 102, 103, 110, 111, 112, 113, 118, 120, 129, 144, 151, 173, 179, 185, 186, 189, 193, 196, 197, 210, 213, 214, 234, 235, 236, 258, 259, 260, 269, 278, 291, 298, 301, 306, 363, 369, 414, 539, 540, 542, 546, 564, 565, 566, 568, 570, 571, 573, 574, 576, 583, 584, 586, 588, 601, 605, 628, 685, 822, 823, 851, 852, 853, 873, 931, 932, 935, 942, 946, 947, 948, 981], "bbox_to_anchor": [4, 33, 144, 240, 306], "set_aspect": [4, 138, 190, 223, 308], "equal": [4, 11, 12, 24, 33, 35, 49, 55, 73, 78, 99, 111, 138, 151, 180, 181, 183, 190, 196, 216, 223, 226, 229, 233, 235, 244, 263, 275, 279, 299, 301, 308, 312, 333, 334, 338, 340, 351, 360, 361, 363, 367, 368, 370, 371, 376, 389, 392, 393, 394, 395, 397, 398, 400, 405, 410, 411, 414, 420, 425, 430, 431, 454, 463, 466, 470, 483, 484, 485, 490, 492, 494, 495, 500, 501, 502, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 539, 544, 545, 548, 550, 551, 558, 559, 576, 579, 580, 583, 584, 585, 586, 588, 592, 593, 596, 600, 609, 610, 622, 650, 654, 669, 671, 679, 718, 733, 737, 738, 742, 744, 747, 748, 750, 751, 760, 761, 765, 770, 777, 781, 782, 789, 790, 791, 792, 797, 798, 799, 800, 801, 806, 807, 812, 813, 814, 821, 824, 827, 828, 829, 830, 832, 839, 846, 849, 850, 856, 857, 858, 859, 860, 875, 886, 907, 913, 926, 928, 932, 933, 935, 936, 938, 942, 946, 947, 948, 966, 967, 974, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988], "adjust": [4, 9, 32, 34, 45, 53, 71, 111, 148, 206, 211, 218, 236, 281, 292, 307, 312, 345, 363, 368, 370, 371, 475, 504, 505, 508, 510, 512, 513, 515, 609, 610, 617, 619, 625, 626, 627, 655, 656, 659, 665, 666, 705, 707, 736, 743, 784, 785, 787, 788, 819, 841, 842, 849, 850, 851, 854, 857, 859, 875, 931, 932, 936, 942, 965, 970, 973, 979], "box": [4, 10, 27, 152, 153, 200, 273, 277, 345, 368, 370, 463, 506, 507, 825, 837, 861, 863, 932, 933, 939, 942, 948, 952, 958, 981], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 141, 143, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 315, 316, 317, 318, 319, 325, 326, 338, 344, 349, 350, 352, 354, 360, 361, 365, 367, 368, 369, 370, 372, 373, 390, 453, 510, 544, 545, 582, 583, 648, 649, 651, 652, 653, 664, 753, 861, 862, 863, 921, 926, 927, 929, 931, 932, 934, 935, 936, 938, 939, 942, 946, 947, 953, 962, 963, 967, 975, 977, 978, 980, 982, 983, 984, 985, 987], "seem": [4, 9, 42, 111, 152, 179, 203, 206, 236, 269, 277, 312, 337, 338, 343, 367, 452, 928, 932], "regim": [4, 351, 849, 850, 931], "overal": [4, 39, 44, 102, 118, 140, 197, 232, 253, 278, 279, 312, 324, 337, 338, 344, 360, 361, 370, 373, 398, 400, 415, 422, 423, 429, 500, 830, 929, 932, 948, 956, 983], "closer": [4, 25, 33, 88, 90, 117, 135, 152, 158, 313, 361, 363, 368, 400, 504, 579, 663, 791, 792, 797, 799, 800, 801, 947, 980], "diagon": [4, 23, 36, 75, 77, 197, 215, 223, 226, 227, 229, 299, 360, 363, 365, 373, 404, 429, 432, 462, 464, 478, 483, 501, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 601, 602, 605, 606, 607, 633, 634, 652, 666, 740, 745, 746, 793, 801, 926, 928, 931, 932, 935, 942, 979, 981, 982, 983], "obtain": [4, 7, 9, 12, 25, 44, 52, 53, 65, 68, 69, 90, 93, 108, 111, 112, 116, 123, 137, 139, 151, 152, 179, 181, 193, 203, 221, 222, 223, 231, 235, 236, 237, 241, 244, 278, 284, 297, 312, 313, 319, 320, 333, 335, 349, 351, 357, 361, 363, 365, 366, 368, 370, 371, 372, 373, 389, 394, 420, 447, 483, 484, 506, 507, 508, 509, 510, 511, 514, 515, 516, 544, 557, 565, 596, 610, 612, 617, 619, 623, 625, 627, 628, 638, 659, 663, 676, 689, 706, 741, 753, 774, 777, 778, 781, 795, 806, 826, 838, 851, 854, 857, 858, 886, 922, 924, 926, 928, 929, 931, 932, 933, 935, 936, 938, 939, 942, 946, 947, 979, 981, 984, 986, 987, 988], "slightli": [4, 23, 59, 75, 102, 108, 111, 114, 118, 133, 135, 136, 137, 153, 158, 179, 202, 204, 243, 253, 281, 296, 313, 337, 338, 349, 361, 363, 370, 371, 373, 375, 539, 540, 542, 589, 609, 750, 751, 849, 851, 854, 885, 886, 921, 928, 942, 946, 947, 982, 986, 987], "cost": [4, 35, 88, 135, 148, 156, 199, 211, 237, 244, 281, 299, 312, 313, 314, 338, 344, 346, 349, 363, 370, 429, 451, 488, 489, 490, 497, 508, 509, 510, 511, 515, 516, 553, 561, 570, 578, 597, 598, 603, 604, 611, 612, 613, 614, 619, 623, 625, 627, 629, 638, 639, 643, 775, 849, 850, 851, 854, 857, 858, 859, 860, 886, 924, 928, 929, 932, 935, 945, 946, 947, 954, 969, 979, 982, 983], "durat": [4, 8, 179, 197, 255, 313, 325, 898, 899, 928], "regressor": [4, 69, 78, 112, 117, 118, 121, 135, 140, 147, 148, 151, 157, 159, 161, 179, 182, 196, 197, 282, 283, 324, 338, 340, 349, 351, 361, 364, 373, 384, 388, 416, 433, 434, 435, 436, 475, 502, 503, 504, 505, 506, 507, 508, 509, 511, 513, 516, 517, 518, 519, 520, 521, 556, 557, 560, 562, 583, 584, 586, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 618, 620, 621, 623, 624, 629, 630, 652, 777, 778, 781, 782, 783, 792, 800, 805, 806, 807, 810, 816, 824, 829, 830, 850, 852, 855, 857, 858, 859, 860, 863, 878, 880, 921, 922, 928, 932, 933, 935, 940, 946, 954, 962, 969, 973, 974, 978, 979, 980, 982, 983, 986, 987, 988], "mlpregressor": [4, 152, 216, 326, 805, 806, 936, 981, 982, 983, 984, 985, 986, 987, 988, 989], "hidden": [4, 152, 270, 271, 346, 360, 368, 805, 806, 807, 936, 937, 952, 973, 984], "layer": [4, 148, 152, 195, 216, 267, 270, 271, 324, 346, 370, 465, 466, 473, 518, 775, 805, 806, 807, 810, 829, 937, 954, 969, 979], "cyclic": [4, 597, 598, 603, 604, 611, 612, 613, 614, 985], "within": [4, 55, 104, 105, 106, 117, 130, 132, 133, 175, 180, 181, 191, 197, 216, 233, 234, 238, 248, 273, 274, 283, 297, 300, 307, 313, 320, 324, 333, 338, 342, 347, 349, 351, 352, 360, 361, 363, 364, 367, 369, 370, 374, 396, 399, 412, 414, 415, 420, 425, 466, 500, 518, 519, 520, 521, 544, 545, 583, 643, 647, 650, 661, 675, 731, 745, 746, 752, 753, 765, 766, 773, 774, 789, 790, 791, 792, 797, 799, 800, 801, 808, 809, 810, 822, 830, 834, 835, 837, 838, 839, 840, 851, 852, 853, 854, 855, 857, 858, 859, 860, 921, 926, 928, 929, 935, 938, 942, 945, 947, 948, 953, 956, 958, 962, 965, 967, 975, 976, 980, 981, 986, 987], "finer": [4, 33, 255, 299, 325, 363, 367, 921, 935, 983], "resolut": [4, 11, 16, 95, 152, 265, 266, 299, 352, 361, 958, 983], "taken": [4, 7, 28, 38, 49, 113, 140, 151, 210, 211, 224, 241, 275, 333, 335, 337, 338, 342, 351, 357, 362, 363, 367, 371, 373, 375, 392, 484, 534, 535, 597, 598, 601, 603, 604, 605, 609, 610, 611, 612, 613, 614, 628, 630, 632, 635, 646, 822, 823, 843, 846, 852, 853, 932, 934, 942, 944, 979, 982, 985, 986], "everi": [4, 85, 146, 177, 180, 200, 212, 222, 227, 244, 284, 320, 333, 336, 338, 340, 342, 346, 351, 352, 363, 365, 367, 368, 371, 392, 405, 459, 482, 487, 490, 496, 508, 510, 511, 515, 541, 542, 554, 597, 598, 600, 603, 604, 610, 611, 612, 613, 614, 615, 616, 617, 619, 623, 624, 625, 626, 627, 636, 637, 638, 643, 647, 704, 721, 729, 730, 760, 798, 857, 859, 861, 863, 875, 925, 927, 932, 933, 934, 942, 948, 956, 962, 973, 977, 979, 982, 986], "offer": [4, 340, 346, 349, 350, 354, 367, 368, 370, 371, 921, 922, 933, 936, 948, 952, 953, 956, 979], "view": [4, 15, 27, 38, 42, 71, 87, 152, 176, 181, 217, 324, 326, 338, 363, 371, 487, 596, 608, 789, 790, 864, 928, 929], "gaussian": [4, 5, 9, 25, 27, 28, 31, 40, 42, 43, 52, 56, 71, 72, 73, 74, 75, 82, 86, 87, 88, 95, 100, 101, 111, 114, 147, 158, 169, 206, 210, 223, 224, 258, 266, 277, 296, 327, 330, 334, 340, 343, 351, 363, 365, 368, 369, 375, 403, 420, 421, 422, 423, 424, 425, 426, 427, 447, 455, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 481, 483, 495, 500, 501, 514, 561, 562, 564, 565, 566, 568, 569, 570, 573, 574, 576, 578, 594, 595, 623, 628, 631, 654, 674, 691, 702, 726, 745, 746, 747, 761, 784, 785, 786, 787, 788, 789, 790, 794, 825, 829, 837, 841, 842, 843, 926, 928, 929, 930, 938, 954, 956, 966, 968, 969, 973, 974, 976, 977, 979, 980, 981, 983, 985, 987], "random": [4, 5, 6, 7, 11, 12, 13, 19, 20, 22, 23, 24, 25, 28, 30, 31, 33, 35, 36, 40, 41, 44, 46, 48, 50, 52, 53, 55, 56, 57, 59, 60, 61, 65, 69, 71, 72, 73, 74, 75, 77, 78, 83, 86, 87, 88, 91, 92, 93, 97, 100, 102, 104, 105, 106, 107, 110, 111, 113, 114, 115, 118, 121, 126, 128, 129, 132, 135, 136, 139, 141, 142, 144, 146, 147, 148, 149, 150, 158, 159, 160, 161, 163, 168, 169, 173, 174, 177, 178, 179, 180, 181, 182, 185, 186, 188, 192, 193, 196, 197, 199, 200, 202, 203, 204, 205, 206, 211, 212, 214, 215, 221, 222, 224, 225, 226, 227, 228, 230, 232, 235, 236, 238, 240, 242, 244, 245, 246, 247, 249, 252, 253, 258, 259, 260, 265, 268, 274, 276, 277, 282, 283, 285, 288, 289, 292, 293, 298, 299, 301, 302, 304, 305, 306, 307, 309, 311, 312, 317, 318, 324, 325, 327, 330, 334, 341, 343, 349, 350, 351, 358, 361, 363, 371, 372, 386, 392, 395, 398, 400, 402, 403, 404, 405, 409, 410, 411, 413, 415, 420, 421, 422, 423, 424, 425, 426, 427, 439, 440, 442, 443, 446, 447, 448, 453, 454, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 486, 487, 489, 490, 491, 492, 495, 498, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 524, 533, 534, 535, 540, 558, 559, 561, 562, 578, 581, 583, 585, 590, 591, 592, 593, 594, 597, 598, 600, 601, 603, 604, 605, 609, 611, 612, 613, 614, 621, 622, 623, 627, 628, 629, 630, 640, 641, 642, 643, 644, 645, 646, 652, 655, 656, 659, 681, 693, 731, 741, 745, 746, 747, 749, 750, 751, 752, 759, 761, 762, 763, 764, 765, 766, 767, 768, 774, 775, 780, 782, 783, 784, 785, 786, 788, 789, 790, 794, 798, 805, 806, 807, 809, 812, 814, 823, 826, 830, 838, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 854, 855, 857, 858, 859, 860, 872, 885, 886, 903, 906, 922, 924, 927, 929, 931, 932, 936, 937, 938, 940, 942, 947, 948, 952, 953, 954, 958, 962, 963, 965, 966, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "constant": [4, 95, 102, 138, 142, 147, 151, 167, 180, 181, 183, 197, 208, 217, 238, 265, 269, 271, 274, 276, 282, 307, 309, 320, 330, 340, 347, 351, 360, 370, 373, 384, 416, 433, 434, 435, 462, 464, 485, 489, 491, 498, 500, 501, 502, 503, 505, 507, 509, 511, 513, 516, 519, 521, 541, 557, 560, 562, 564, 578, 581, 583, 584, 586, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 627, 628, 629, 630, 631, 638, 640, 644, 646, 672, 673, 674, 678, 725, 727, 735, 782, 783, 792, 800, 806, 807, 814, 825, 828, 837, 849, 850, 851, 852, 853, 854, 855, 856, 858, 860, 926, 928, 929, 932, 934, 935, 942, 946, 948, 969, 976, 981, 983, 985, 986, 987], "varianc": [4, 5, 25, 40, 52, 57, 67, 71, 73, 77, 78, 85, 86, 87, 90, 93, 94, 96, 97, 113, 142, 148, 151, 157, 159, 168, 179, 181, 184, 197, 226, 232, 235, 238, 244, 245, 248, 262, 268, 273, 278, 312, 320, 330, 334, 347, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 373, 375, 393, 397, 400, 414, 472, 475, 483, 484, 485, 492, 495, 500, 501, 506, 507, 509, 510, 511, 516, 554, 558, 559, 562, 576, 594, 595, 596, 603, 607, 608, 611, 613, 623, 624, 625, 626, 627, 638, 661, 678, 735, 745, 746, 787, 798, 813, 819, 825, 827, 829, 835, 837, 839, 840, 858, 860, 907, 908, 909, 913, 926, 927, 928, 930, 935, 936, 937, 944, 946, 947, 948, 949, 954, 963, 965, 966, 969, 973, 981, 983, 984, 985, 986, 987, 988], "poisson": [4, 148, 157, 213, 334, 370, 415, 416, 447, 474, 503, 509, 513, 516, 599, 620, 623, 631, 657, 674, 695, 699, 700, 702, 775, 809, 810, 813, 814, 822, 823, 824, 829, 858, 860, 890, 928, 948, 983, 984, 985, 986, 987], "gamma": [4, 5, 6, 7, 9, 11, 15, 28, 29, 90, 119, 126, 156, 193, 206, 211, 212, 233, 235, 237, 240, 246, 250, 283, 288, 289, 291, 293, 296, 298, 299, 302, 303, 305, 306, 309, 366, 368, 373, 403, 486, 513, 570, 571, 590, 591, 592, 594, 595, 596, 599, 631, 636, 642, 674, 697, 702, 709, 716, 725, 726, 727, 745, 758, 761, 844, 845, 846, 851, 852, 853, 854, 855, 921, 924, 927, 928, 930, 945, 947, 958, 962, 963, 965, 973, 974, 976, 977, 978, 980, 981, 983, 984, 987, 988, 989], "achiev": [4, 12, 16, 18, 25, 28, 88, 99, 107, 109, 116, 143, 156, 179, 187, 232, 235, 242, 278, 291, 299, 302, 307, 311, 320, 324, 326, 332, 333, 335, 340, 344, 349, 351, 360, 361, 363, 367, 368, 370, 371, 504, 509, 516, 591, 600, 627, 629, 658, 690, 713, 750, 751, 785, 829, 921, 922, 924, 928, 932, 942, 945, 947, 955, 967, 986], "gridsearchcv": [4, 50, 63, 65, 67, 68, 71, 93, 148, 212, 217, 226, 228, 233, 234, 235, 236, 240, 243, 246, 255, 257, 271, 275, 283, 299, 320, 325, 340, 349, 351, 364, 367, 453, 471, 491, 492, 526, 550, 558, 604, 654, 692, 758, 761, 809, 819, 849, 857, 921, 928, 932, 936, 946, 947, 952, 953, 962, 963, 967, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988], "tweedieregressor": [4, 282, 285, 599, 620, 928, 984, 987, 988], "power": [4, 7, 16, 109, 150, 180, 197, 227, 238, 243, 257, 273, 274, 277, 288, 296, 324, 325, 350, 361, 363, 366, 369, 370, 371, 374, 396, 433, 434, 435, 483, 486, 492, 495, 581, 631, 645, 650, 674, 697, 699, 702, 791, 792, 799, 800, 802, 803, 824, 825, 826, 837, 838, 885, 886, 928, 929, 932, 940, 942, 946, 947, 956, 976, 979, 981, 983, 984, 986], "param_grid": [4, 6, 65, 66, 67, 68, 111, 212, 217, 226, 234, 235, 239, 240, 243, 246, 255, 275, 299, 351, 364, 370, 692, 747, 750, 758, 759, 921, 932, 962, 963], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 317, 318, 319, 325, 332, 333, 335, 344, 351, 360, 363, 369, 371, 374, 384, 396, 416, 433, 434, 435, 439, 440, 441, 442, 443, 444, 445, 446, 448, 451, 452, 453, 455, 456, 461, 463, 465, 466, 470, 473, 474, 487, 488, 495, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 519, 521, 534, 535, 541, 545, 547, 562, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 627, 628, 629, 630, 648, 655, 656, 664, 679, 680, 681, 684, 688, 689, 707, 719, 733, 734, 737, 742, 743, 744, 747, 761, 770, 771, 772, 782, 783, 784, 785, 792, 794, 800, 807, 824, 828, 850, 852, 855, 857, 858, 859, 860, 886, 921, 928, 929, 932, 933, 934, 935, 942, 946, 947, 948, 963, 967, 974, 979, 981, 989], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 325, 338, 339, 340, 341, 342, 344, 349, 351, 354, 371, 953, 955, 967], "000": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 333, 344, 370, 371, 441, 512, 513, 595, 628, 946, 967, 984], "second": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 324, 333, 340, 342, 344, 351, 360, 363, 367, 368, 370, 371, 373, 415, 418, 439, 441, 442, 443, 445, 447, 451, 453, 455, 461, 504, 534, 539, 540, 541, 542, 572, 575, 582, 583, 650, 663, 667, 708, 709, 713, 714, 716, 717, 724, 725, 726, 727, 728, 731, 747, 750, 751, 761, 773, 779, 780, 783, 786, 797, 799, 800, 801, 806, 807, 921, 922, 926, 927, 928, 929, 932, 933, 934, 935, 936, 939, 942, 943, 948, 958, 964, 966, 988], "plot_cyclical_feature_engin": 4, "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 325, 336, 338, 339, 342, 344, 346, 351, 354, 371, 374, 392, 396, 405, 412, 416, 449, 481, 595, 597, 598, 603, 604, 611, 612, 613, 614, 632, 635, 818, 819, 821, 824, 825, 826, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 881, 932, 952, 965, 967, 973, 975, 979, 983, 987], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 339, 364, 419, 847, 948, 952, 953, 984, 987], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 333, 338, 340, 351, 354, 356, 963, 973, 977, 980], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 338, 342, 351, 354, 356, 967, 973, 980], "kernelpca": [5, 364, 368, 484, 485, 492, 495, 639, 641, 643, 815, 942, 974, 975, 979, 982, 983, 984, 985, 986, 987], "take": [5, 8, 27, 42, 49, 52, 61, 69, 73, 81, 83, 85, 99, 107, 135, 137, 140, 144, 151, 156, 162, 187, 188, 203, 223, 224, 230, 236, 240, 244, 245, 252, 253, 256, 259, 260, 261, 263, 264, 273, 285, 291, 295, 296, 299, 309, 312, 313, 316, 324, 325, 326, 332, 333, 336, 338, 340, 343, 344, 345, 346, 349, 351, 352, 361, 363, 364, 366, 367, 368, 370, 371, 372, 373, 375, 389, 395, 398, 400, 401, 403, 408, 409, 410, 412, 414, 420, 470, 484, 489, 490, 491, 497, 498, 532, 543, 546, 547, 549, 550, 551, 561, 562, 567, 571, 572, 575, 583, 594, 600, 622, 624, 625, 626, 627, 630, 642, 643, 650, 656, 658, 660, 670, 679, 680, 688, 692, 693, 706, 721, 724, 728, 729, 730, 731, 733, 734, 737, 738, 747, 748, 752, 753, 761, 765, 773, 791, 792, 793, 795, 797, 798, 799, 800, 801, 813, 823, 844, 845, 849, 850, 851, 852, 853, 854, 855, 873, 902, 921, 924, 928, 929, 931, 932, 933, 935, 937, 938, 939, 942, 947, 948, 956, 958, 962, 964, 970, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "exact": [5, 7, 75, 90, 140, 183, 211, 253, 320, 324, 325, 332, 338, 340, 347, 349, 350, 351, 363, 372, 373, 386, 433, 434, 435, 439, 447, 485, 486, 492, 512, 513, 589, 593, 597, 643, 747, 761, 770, 771, 772, 851, 854, 921, 924, 928, 929, 938, 942, 946, 947, 980, 981, 983], "usp": 5, "digit": [5, 26, 32, 47, 66, 79, 122, 131, 148, 170, 186, 195, 198, 203, 210, 211, 233, 234, 237, 257, 262, 267, 269, 270, 287, 331, 338, 344, 363, 369, 370, 372, 393, 397, 398, 453, 492, 495, 500, 517, 609, 639, 640, 641, 642, 643, 655, 656, 664, 668, 669, 687, 741, 743, 771, 775, 791, 798, 805, 809, 810, 819, 829, 835, 842, 845, 854, 861, 862, 863, 921, 927, 929, 932, 935, 937, 945, 958, 962, 965, 966, 969, 977], "reproduc": [5, 12, 55, 99, 151, 156, 167, 244, 271, 325, 327, 337, 338, 340, 341, 346, 349, 351, 357, 363, 367, 368, 371, 375, 392, 405, 411, 420, 425, 439, 442, 443, 446, 448, 454, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 502, 504, 505, 506, 507, 510, 511, 512, 513, 514, 558, 559, 561, 562, 585, 590, 591, 592, 593, 597, 598, 601, 603, 604, 605, 611, 612, 613, 614, 617, 618, 619, 622, 627, 629, 630, 640, 641, 643, 644, 645, 741, 745, 746, 749, 750, 751, 752, 753, 759, 761, 762, 763, 764, 765, 766, 767, 773, 774, 775, 779, 780, 783, 794, 798, 805, 806, 807, 814, 826, 830, 838, 841, 842, 849, 850, 851, 854, 885, 886, 903, 906, 924, 952, 955, 973, 981, 986, 987], "sect": 5, "bak\u0131r": [5, 368, 486], "g\u00f6khan": [5, 368, 486], "h": [5, 6, 44, 53, 85, 86, 98, 99, 100, 116, 137, 151, 223, 258, 261, 268, 275, 285, 293, 295, 313, 335, 344, 361, 363, 365, 368, 369, 370, 371, 374, 396, 470, 483, 486, 489, 491, 498, 504, 518, 519, 533, 541, 558, 559, 640, 644, 655, 659, 707, 784, 788, 789, 790, 795, 805, 820, 829, 924, 926, 928, 929, 930, 932, 934, 936, 937, 946, 948, 963, 979, 984, 988, 989], "jason": [5, 368, 486, 845, 979, 981, 985, 988], "weston": [5, 368, 486, 544, 545, 845], "bernhard": [5, 368, 486, 780, 815, 845, 933, 938, 947, 979], "sch\u00f6lkopf": [5, 368, 486, 815, 938, 942, 947], "pre": [5, 65, 108, 151, 168, 273, 313, 327, 336, 338, 351, 354, 365, 367, 368, 370, 371, 372, 374, 375, 395, 396, 398, 410, 484, 486, 641, 663, 713, 812, 854, 932, 937, 942, 947, 948, 952, 953, 969, 976, 981, 987], "advanc": [5, 148, 205, 207, 235, 326, 363, 368, 440, 452, 486, 583, 590, 733, 745, 798, 807, 810, 829, 858, 924, 935, 942, 956, 970, 975], "neural": [5, 6, 28, 235, 270, 327, 349, 351, 357, 367, 368, 370, 375, 484, 486, 489, 491, 498, 518, 519, 590, 596, 647, 691, 745, 798, 805, 806, 807, 815, 924, 928, 929, 930, 932, 935, 938, 942, 946, 948, 952, 954, 956, 963, 968, 969, 973, 985], "system": [5, 90, 235, 242, 320, 324, 325, 326, 333, 335, 338, 339, 340, 341, 346, 349, 354, 363, 368, 370, 374, 396, 429, 486, 490, 494, 501, 590, 596, 601, 602, 605, 606, 607, 633, 634, 676, 706, 719, 745, 798, 844, 845, 900, 928, 932, 935, 944, 952, 953, 956, 967, 973, 981, 982], "16": [5, 18, 25, 39, 46, 47, 50, 61, 73, 85, 88, 128, 152, 172, 178, 179, 180, 197, 199, 200, 211, 214, 237, 239, 257, 271, 273, 277, 281, 312, 317, 333, 335, 336, 344, 350, 354, 355, 356, 367, 368, 371, 394, 429, 448, 453, 485, 486, 521, 540, 546, 547, 558, 559, 590, 601, 602, 605, 606, 607, 608, 633, 634, 760, 765, 775, 824, 850, 858, 921, 928, 932, 942, 947, 950, 958, 967, 971, 973, 974, 978, 979, 981, 982], "2004": [5, 235, 333, 335, 363, 365, 368, 424, 486, 558, 559, 640, 644, 656, 693, 733, 845, 926, 928, 929, 934, 947, 965], "449": [5, 368, 486], "456": [5, 368, 486], "author": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 25, 27, 29, 33, 35, 36, 38, 42, 43, 44, 48, 49, 50, 51, 52, 56, 60, 61, 62, 64, 65, 66, 68, 69, 75, 85, 87, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 117, 118, 133, 135, 136, 138, 139, 140, 141, 142, 144, 147, 156, 158, 159, 161, 164, 166, 167, 168, 170, 171, 172, 173, 179, 180, 181, 183, 184, 186, 187, 194, 195, 196, 197, 199, 200, 201, 202, 204, 206, 209, 211, 212, 213, 215, 221, 223, 224, 234, 236, 238, 239, 241, 248, 252, 253, 255, 258, 265, 266, 268, 271, 273, 274, 276, 277, 278, 288, 289, 290, 291, 293, 307, 311, 312, 313, 332, 338, 342, 346, 349, 351, 352, 367, 402, 485, 816, 924, 950, 952, 976], "fr": [5, 7, 8, 9, 10, 22, 23, 27, 33, 38, 50, 52, 69, 75, 141, 158, 164, 166, 170, 172, 173, 184, 200, 201, 206, 209, 236, 238, 241, 248, 265, 278, 307, 311, 312, 313, 482, 488, 609, 615, 636, 637, 708, 709, 930, 932], "licenc": [5, 332], "bsd": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 25, 27, 28, 29, 33, 35, 36, 38, 41, 42, 43, 44, 47, 48, 49, 50, 52, 56, 60, 61, 62, 64, 65, 67, 68, 69, 75, 80, 81, 85, 87, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 117, 118, 133, 135, 136, 138, 139, 140, 141, 142, 144, 147, 156, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 184, 186, 187, 195, 196, 197, 200, 201, 202, 204, 206, 209, 211, 212, 213, 215, 221, 223, 236, 239, 241, 248, 252, 253, 255, 261, 262, 263, 265, 266, 268, 271, 273, 274, 275, 276, 277, 278, 288, 289, 290, 291, 293, 303, 304, 307, 308, 311, 312, 313, 344], "claus": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 23, 25, 27, 28, 29, 33, 35, 36, 38, 41, 42, 43, 44, 47, 48, 49, 50, 52, 56, 60, 61, 62, 64, 65, 67, 68, 69, 75, 80, 81, 85, 87, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 117, 118, 133, 135, 136, 138, 139, 140, 141, 142, 144, 147, 156, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 184, 186, 187, 195, 196, 197, 200, 201, 206, 211, 212, 213, 215, 221, 223, 236, 241, 248, 252, 253, 255, 261, 262, 263, 265, 266, 268, 273, 274, 275, 276, 277, 278, 303, 304, 307, 308, 311, 312, 313], "normal": [5, 12, 16, 18, 24, 26, 31, 33, 36, 40, 42, 52, 56, 57, 61, 67, 69, 71, 72, 73, 77, 78, 86, 91, 99, 100, 102, 110, 111, 114, 115, 128, 138, 141, 142, 147, 148, 150, 151, 157, 158, 159, 160, 161, 163, 169, 172, 174, 177, 181, 182, 183, 185, 193, 202, 215, 221, 226, 227, 229, 232, 235, 241, 258, 259, 272, 274, 278, 282, 285, 291, 299, 312, 313, 320, 327, 330, 333, 334, 335, 338, 343, 347, 350, 351, 360, 361, 363, 364, 366, 369, 370, 371, 375, 392, 400, 402, 403, 404, 413, 415, 416, 426, 433, 434, 435, 440, 447, 463, 466, 470, 477, 478, 484, 487, 492, 493, 495, 499, 500, 503, 504, 505, 508, 509, 510, 511, 513, 514, 515, 516, 517, 530, 531, 533, 539, 540, 541, 542, 562, 576, 578, 590, 601, 602, 605, 606, 607, 609, 610, 615, 616, 620, 623, 627, 631, 638, 642, 646, 648, 654, 655, 657, 669, 674, 676, 684, 686, 691, 695, 699, 700, 702, 705, 706, 707, 711, 720, 742, 743, 744, 750, 751, 775, 777, 786, 788, 794, 795, 798, 809, 810, 813, 814, 817, 818, 819, 822, 823, 824, 825, 826, 827, 829, 834, 835, 837, 838, 839, 840, 844, 845, 857, 858, 859, 860, 885, 886, 890, 908, 909, 914, 915, 921, 926, 928, 929, 930, 931, 934, 938, 943, 945, 947, 948, 963, 965, 966, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "pixel": [5, 6, 13, 29, 43, 44, 49, 85, 97, 131, 148, 156, 210, 233, 270, 271, 335, 363, 368, 370, 371, 372, 444, 445, 446, 515, 536, 537, 558, 559, 585, 935, 937, 948, 963, 966], "train_test_split": [5, 6, 7, 10, 22, 23, 25, 28, 29, 65, 69, 78, 90, 98, 104, 105, 109, 110, 111, 112, 113, 114, 117, 129, 130, 150, 151, 153, 154, 156, 174, 179, 186, 187, 194, 195, 197, 207, 218, 219, 229, 232, 233, 238, 242, 244, 248, 252, 261, 262, 268, 270, 271, 275, 277, 278, 281, 282, 283, 292, 315, 319, 320, 343, 350, 364, 367, 370, 389, 390, 509, 511, 518, 519, 648, 649, 651, 653, 747, 777, 780, 798, 806, 807, 809, 859, 860, 921, 922, 932, 934, 935, 940, 942, 947, 963, 970, 973, 974, 976, 977, 978, 979, 980, 982, 986], "data_id": [5, 108, 140, 151, 179, 197, 207, 279, 332, 447], "41082": 5, "return_x_i": [5, 7, 14, 53, 64, 65, 66, 67, 85, 108, 109, 121, 123, 124, 125, 129, 146, 147, 153, 156, 164, 166, 167, 168, 170, 175, 176, 186, 194, 195, 207, 214, 218, 219, 231, 234, 237, 242, 243, 250, 252, 255, 262, 269, 270, 271, 278, 281, 283, 285, 286, 291, 302, 313, 315, 331, 343, 344, 350, 357, 363, 364, 367, 370, 372, 439, 440, 441, 442, 443, 445, 446, 447, 448, 451, 452, 453, 455, 456, 461, 483, 484, 485, 486, 509, 512, 513, 518, 519, 543, 546, 547, 549, 550, 551, 553, 561, 570, 571, 573, 574, 589, 590, 609, 610, 619, 624, 625, 626, 639, 640, 641, 642, 652, 738, 750, 751, 753, 777, 782, 793, 798, 801, 858, 859, 860, 922, 927, 932, 933, 934, 935, 942, 958, 962, 963, 965, 966, 970, 979, 981, 983, 986], "idea": [5, 49, 73, 74, 133, 140, 151, 180, 199, 258, 299, 315, 324, 325, 338, 343, 344, 365, 366, 367, 368, 369, 370, 372, 558, 559, 928, 929, 932, 935, 938, 951, 956, 967], "noisi": [5, 30, 45, 57, 86, 129, 135, 141, 178, 181, 183, 202, 209, 227, 236, 242, 244, 245, 278, 317, 318, 320, 363, 371, 374, 396, 401, 472, 475, 886, 927, 929, 935, 947, 952], "100": [5, 7, 10, 12, 15, 16, 18, 23, 25, 27, 31, 33, 38, 46, 49, 52, 56, 61, 65, 66, 69, 72, 73, 85, 87, 88, 95, 100, 114, 117, 120, 136, 140, 143, 144, 151, 152, 154, 156, 158, 159, 161, 163, 165, 169, 170, 171, 173, 178, 179, 180, 181, 188, 189, 190, 192, 194, 195, 201, 202, 204, 209, 210, 211, 212, 216, 221, 223, 227, 230, 231, 233, 235, 238, 240, 245, 246, 249, 258, 259, 260, 271, 274, 275, 277, 279, 284, 292, 293, 297, 298, 300, 301, 302, 306, 307, 309, 311, 312, 315, 318, 319, 324, 326, 333, 335, 338, 340, 343, 344, 360, 363, 364, 367, 368, 369, 370, 371, 389, 393, 397, 400, 422, 423, 429, 441, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 479, 481, 482, 485, 487, 488, 490, 495, 496, 497, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 561, 582, 583, 584, 590, 591, 592, 593, 597, 598, 599, 600, 603, 604, 609, 610, 611, 612, 613, 614, 616, 618, 620, 622, 631, 632, 635, 639, 640, 641, 642, 644, 696, 745, 746, 749, 773, 774, 779, 784, 785, 786, 788, 789, 790, 794, 806, 807, 825, 827, 830, 839, 921, 922, 925, 929, 932, 933, 939, 942, 944, 958, 962, 966, 967, 981, 982, 983, 986, 987], "nois": [5, 10, 13, 19, 20, 25, 28, 30, 36, 40, 45, 48, 50, 56, 57, 62, 69, 78, 85, 86, 88, 90, 93, 100, 102, 111, 115, 116, 134, 135, 140, 148, 158, 160, 161, 163, 168, 169, 174, 177, 178, 181, 182, 184, 196, 202, 204, 206, 208, 209, 212, 235, 243, 248, 249, 265, 268, 269, 275, 282, 306, 317, 318, 320, 334, 340, 343, 361, 363, 368, 370, 372, 374, 396, 403, 462, 464, 465, 466, 467, 468, 469, 473, 475, 476, 481, 483, 485, 492, 558, 559, 562, 564, 565, 566, 567, 568, 572, 573, 575, 576, 595, 596, 600, 601, 602, 604, 605, 606, 607, 614, 615, 616, 622, 630, 643, 826, 838, 844, 925, 927, 928, 929, 932, 935, 945, 965, 966, 974, 979, 984, 986, 987], "approach": [5, 8, 53, 58, 61, 89, 133, 135, 146, 151, 154, 161, 167, 179, 181, 187, 197, 199, 279, 311, 312, 313, 326, 337, 338, 344, 347, 351, 354, 357, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 389, 395, 399, 403, 413, 471, 483, 533, 540, 586, 609, 610, 625, 626, 778, 794, 886, 921, 922, 928, 929, 932, 933, 935, 936, 942, 946, 947, 951, 952, 956, 960, 965, 966, 977], "copi": [5, 12, 16, 40, 57, 69, 88, 102, 146, 147, 151, 152, 153, 165, 172, 185, 195, 197, 200, 253, 288, 289, 291, 293, 312, 316, 325, 335, 338, 340, 342, 343, 344, 349, 351, 386, 389, 392, 394, 395, 396, 398, 400, 405, 410, 433, 434, 435, 436, 451, 453, 461, 483, 484, 485, 486, 492, 499, 504, 505, 510, 512, 513, 523, 541, 548, 558, 559, 561, 562, 579, 581, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 616, 622, 623, 625, 630, 632, 635, 636, 637, 682, 719, 740, 747, 761, 789, 790, 804, 812, 815, 818, 819, 820, 821, 825, 826, 827, 829, 832, 834, 835, 836, 837, 838, 839, 840, 844, 845, 849, 851, 852, 853, 854, 855, 864, 867, 869, 870, 903, 905, 906, 942, 947, 948, 953, 959, 962, 967, 973, 976, 979, 981, 982, 983, 985, 986, 987, 988], "add": [5, 12, 15, 16, 23, 24, 25, 29, 30, 36, 40, 50, 69, 73, 74, 78, 86, 107, 110, 129, 133, 135, 140, 141, 142, 146, 147, 161, 163, 168, 174, 180, 182, 194, 202, 206, 210, 212, 242, 244, 245, 253, 265, 275, 277, 281, 283, 284, 302, 306, 307, 312, 324, 336, 337, 338, 339, 340, 342, 344, 346, 351, 354, 361, 367, 370, 371, 372, 466, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 553, 578, 579, 581, 583, 609, 610, 645, 648, 768, 789, 790, 846, 876, 900, 921, 922, 931, 938, 942, 945, 946, 953, 965, 966, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "corrupt": [5, 93, 163, 185, 196, 349, 805, 928, 940], "uncorrupt": 5, "base": [5, 12, 14, 16, 23, 24, 25, 45, 51, 52, 53, 62, 64, 65, 69, 73, 85, 86, 98, 100, 110, 111, 112, 116, 118, 121, 127, 130, 135, 140, 141, 143, 152, 153, 154, 168, 179, 180, 187, 196, 197, 199, 206, 213, 232, 233, 238, 253, 266, 271, 273, 274, 276, 278, 283, 285, 293, 297, 312, 315, 324, 325, 327, 332, 333, 334, 335, 336, 339, 340, 341, 346, 351, 352, 353, 361, 364, 368, 369, 371, 373, 374, 375, 389, 396, 398, 399, 400, 401, 403, 407, 408, 412, 414, 415, 416, 417, 418, 438, 452, 459, 460, 483, 484, 486, 487, 488, 489, 490, 492, 497, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 529, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 557, 558, 559, 561, 562, 567, 568, 569, 572, 575, 583, 584, 586, 587, 596, 597, 599, 601, 602, 603, 605, 606, 607, 615, 620, 622, 623, 624, 625, 626, 631, 633, 634, 636, 637, 638, 641, 643, 655, 668, 676, 685, 686, 687, 689, 691, 705, 706, 707, 743, 747, 749, 750, 751, 753, 754, 756, 761, 765, 766, 767, 773, 779, 780, 783, 791, 792, 793, 795, 797, 799, 800, 801, 806, 807, 811, 814, 821, 822, 824, 828, 830, 838, 841, 842, 844, 845, 846, 851, 852, 853, 854, 855, 857, 858, 859, 860, 872, 880, 900, 901, 921, 923, 924, 926, 927, 929, 932, 933, 934, 935, 936, 937, 938, 939, 942, 944, 945, 946, 947, 948, 951, 952, 953, 954, 956, 962, 969, 973, 975, 976, 977, 978, 979, 980, 981, 984], "solv": [5, 6, 61, 135, 168, 211, 235, 337, 338, 339, 340, 343, 349, 363, 365, 367, 368, 373, 398, 404, 413, 429, 482, 488, 489, 490, 494, 496, 497, 498, 499, 586, 588, 597, 603, 605, 606, 615, 616, 621, 623, 625, 628, 636, 637, 638, 779, 849, 850, 853, 886, 923, 926, 928, 929, 932, 933, 946, 947, 948, 951, 952, 956, 960, 963, 967, 979, 983, 986], "x_train": [5, 6, 7, 8, 10, 22, 23, 24, 25, 28, 29, 64, 65, 69, 71, 77, 78, 90, 98, 99, 102, 105, 109, 110, 111, 112, 113, 114, 117, 125, 126, 129, 130, 141, 142, 143, 144, 150, 151, 152, 153, 154, 156, 159, 163, 174, 176, 177, 180, 186, 187, 193, 194, 195, 197, 207, 214, 218, 219, 223, 225, 229, 232, 233, 238, 242, 244, 248, 252, 259, 261, 262, 268, 270, 271, 275, 277, 278, 281, 282, 283, 291, 292, 298, 311, 315, 319, 320, 324, 332, 340, 343, 350, 364, 367, 370, 389, 390, 460, 509, 510, 511, 518, 519, 648, 649, 651, 653, 775, 777, 780, 798, 806, 807, 809, 823, 859, 860, 922, 932, 934, 935, 936, 938, 940, 942, 946, 947, 962, 963, 970], "x_test": [5, 6, 7, 8, 10, 22, 23, 24, 25, 28, 29, 64, 65, 69, 71, 77, 78, 90, 98, 99, 102, 104, 105, 109, 110, 111, 112, 113, 114, 117, 125, 126, 129, 130, 140, 143, 150, 151, 152, 153, 154, 156, 159, 163, 169, 174, 176, 177, 185, 186, 187, 193, 194, 195, 197, 207, 209, 214, 218, 219, 223, 229, 232, 233, 238, 242, 244, 248, 249, 252, 259, 261, 262, 268, 270, 271, 275, 277, 278, 281, 282, 283, 291, 292, 298, 311, 315, 317, 318, 319, 320, 324, 332, 340, 343, 350, 364, 367, 370, 390, 421, 422, 423, 424, 425, 426, 427, 460, 509, 510, 511, 518, 519, 648, 649, 651, 653, 775, 777, 780, 798, 806, 807, 809, 823, 859, 860, 922, 932, 934, 935, 936, 938, 942, 946, 947, 962, 963, 965, 970, 973], "y_train": [5, 6, 7, 8, 10, 22, 23, 24, 25, 28, 29, 64, 65, 69, 77, 78, 90, 98, 99, 102, 105, 109, 110, 111, 112, 113, 114, 117, 125, 126, 129, 130, 141, 142, 143, 144, 150, 151, 152, 153, 154, 156, 159, 163, 174, 176, 177, 180, 186, 187, 194, 195, 207, 214, 218, 219, 223, 229, 232, 233, 238, 242, 244, 248, 252, 261, 262, 268, 270, 271, 275, 278, 281, 282, 283, 288, 289, 291, 292, 293, 311, 315, 319, 320, 324, 332, 340, 343, 350, 364, 367, 370, 389, 390, 509, 510, 511, 518, 519, 648, 649, 651, 653, 775, 777, 780, 798, 806, 807, 809, 859, 860, 922, 932, 934, 935, 940, 942, 947, 962, 963, 970], "y_test": [5, 6, 7, 8, 10, 22, 23, 24, 25, 28, 29, 64, 65, 69, 77, 78, 90, 98, 99, 102, 104, 105, 109, 110, 111, 112, 113, 114, 117, 125, 126, 129, 130, 143, 150, 151, 152, 153, 154, 156, 163, 174, 176, 179, 185, 186, 187, 194, 195, 197, 207, 214, 218, 219, 223, 229, 232, 233, 238, 242, 244, 248, 252, 261, 262, 268, 270, 271, 275, 278, 281, 282, 283, 291, 292, 311, 315, 319, 320, 332, 343, 350, 364, 367, 370, 390, 509, 510, 511, 518, 519, 648, 649, 651, 653, 775, 777, 780, 798, 806, 807, 809, 859, 860, 932, 934, 935, 942, 947, 962, 963, 970, 973], "stratifi": [5, 90, 105, 114, 129, 153, 194, 207, 219, 230, 235, 238, 244, 261, 262, 281, 340, 351, 502, 510, 518, 519, 553, 610, 617, 619, 627, 747, 750, 751, 753, 761, 762, 763, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 780, 783, 798, 806, 903, 932, 935, 962, 978, 979, 980, 982, 983, 986], "train_siz": [5, 7, 10, 117, 136, 156, 195, 212, 237, 248, 283, 286, 307, 749, 753, 764, 767, 773, 775, 927, 962, 973, 974, 979, 980], "1_000": [5, 44, 66, 90, 135, 140, 142, 152, 210, 232, 652], "rng": [5, 19, 20, 28, 33, 46, 74, 78, 85, 87, 93, 100, 111, 114, 115, 117, 135, 136, 139, 141, 142, 144, 146, 147, 150, 153, 158, 159, 160, 161, 168, 173, 180, 181, 186, 193, 206, 212, 214, 215, 221, 230, 238, 241, 246, 247, 268, 277, 282, 283, 285, 288, 289, 293, 302, 307, 317, 318, 320, 325, 340, 343, 421, 425, 426, 427, 594, 600, 621, 623, 629, 759, 784, 785, 786, 788, 789, 790, 794, 797, 799, 800, 801, 826, 838, 841, 842, 844, 845, 846, 855, 958], "randomst": [5, 13, 19, 20, 22, 28, 33, 46, 56, 74, 75, 78, 85, 87, 93, 100, 110, 111, 114, 115, 117, 129, 135, 136, 139, 141, 142, 144, 146, 147, 150, 153, 158, 159, 160, 161, 168, 173, 180, 181, 186, 193, 202, 206, 212, 215, 221, 224, 230, 238, 241, 242, 244, 245, 246, 247, 268, 274, 276, 277, 282, 283, 285, 288, 289, 293, 302, 307, 317, 318, 340, 343, 347, 351, 368, 375, 392, 395, 398, 400, 402, 403, 404, 405, 409, 410, 411, 413, 420, 421, 425, 426, 427, 439, 442, 443, 446, 448, 454, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 534, 535, 558, 559, 561, 562, 578, 583, 585, 590, 591, 592, 593, 594, 597, 598, 600, 601, 603, 604, 605, 609, 610, 611, 612, 613, 614, 617, 618, 619, 621, 622, 623, 625, 627, 628, 629, 630, 638, 640, 641, 642, 643, 644, 645, 646, 652, 731, 741, 745, 746, 749, 750, 751, 752, 753, 759, 761, 762, 763, 764, 765, 766, 767, 773, 774, 775, 779, 780, 783, 784, 785, 786, 788, 789, 790, 794, 798, 805, 806, 807, 814, 826, 830, 838, 841, 842, 844, 845, 846, 849, 850, 851, 854, 855, 857, 858, 859, 860, 872, 885, 886, 901, 903, 906, 942, 958, 969], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 88, 197, 246, 331, 340, 341, 350, 351, 367, 526, 962, 963, 973, 980, 981, 982, 986], "qualit": [5, 6, 49, 56, 111, 179, 286, 333, 363, 391, 652, 963, 988], "assess": [5, 33, 55, 109, 111, 151, 179, 197, 215, 231, 232, 234, 238, 361, 370, 652, 693, 931, 932, 938, 953, 988], "plot_digit": 5, "small": [5, 11, 20, 25, 35, 44, 45, 49, 71, 75, 78, 82, 90, 100, 102, 108, 110, 111, 140, 142, 151, 152, 159, 165, 169, 170, 180, 185, 194, 196, 197, 223, 235, 242, 247, 255, 266, 269, 271, 273, 275, 277, 283, 288, 293, 299, 304, 312, 326, 331, 333, 335, 338, 341, 347, 351, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 393, 395, 397, 398, 400, 409, 410, 414, 426, 447, 449, 489, 491, 498, 506, 507, 508, 512, 513, 515, 533, 540, 541, 553, 558, 559, 601, 605, 606, 607, 609, 610, 630, 633, 634, 696, 750, 751, 765, 774, 777, 806, 807, 814, 842, 851, 854, 886, 921, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 939, 940, 942, 944, 945, 948, 953, 956, 965, 966, 973, 974, 976, 978, 979, 980, 981, 982, 984, 985, 987, 988, 989], "img": [5, 46, 61, 457, 537], "ravel": [5, 9, 13, 15, 16, 18, 24, 27, 31, 38, 49, 50, 53, 73, 95, 100, 102, 107, 111, 116, 117, 118, 126, 135, 137, 139, 140, 141, 142, 151, 158, 169, 170, 172, 179, 192, 193, 200, 204, 206, 210, 212, 219, 223, 225, 238, 242, 244, 253, 258, 259, 265, 266, 268, 269, 270, 271, 275, 276, 285, 293, 298, 299, 303, 304, 305, 306, 308, 309, 311, 317, 318, 416, 444, 445, 446, 582, 669, 919, 932], "imshow": [5, 6, 13, 27, 29, 36, 42, 43, 44, 46, 47, 49, 50, 53, 75, 80, 85, 88, 96, 137, 138, 139, 143, 154, 170, 195, 200, 214, 246, 257, 271, 288, 289, 299, 305, 308, 332, 583, 648, 963, 964, 987], "grei": [5, 31, 245, 273, 333], "off": [5, 12, 13, 33, 35, 36, 43, 44, 48, 49, 71, 75, 77, 85, 200, 211, 214, 229, 234, 236, 237, 273, 289, 293, 299, 309, 311, 333, 338, 340, 363, 365, 370, 372, 394, 504, 505, 510, 511, 539, 542, 585, 607, 643, 666, 745, 746, 747, 750, 751, 761, 772, 890, 931, 937, 947, 953, 973, 977, 978, 980], "fontsiz": [5, 8, 10, 14, 31, 46, 55, 82, 88, 107, 128, 138, 139, 141, 144, 152, 159, 169, 178, 190, 200, 201, 224, 230, 239, 240, 241, 246, 247, 271, 277, 306, 863], "mse": [5, 7, 71, 72, 111, 112, 146, 147, 179, 181, 185, 249, 598, 604, 700, 932, 948, 984, 986], "quantit": [5, 6, 23, 56, 111, 121, 231, 249, 335, 963], "nmse": [5, 249], "2f": [5, 8, 11, 18, 28, 35, 38, 40, 42, 46, 48, 57, 59, 62, 77, 83, 88, 95, 111, 117, 118, 128, 151, 152, 154, 156, 159, 168, 170, 175, 179, 194, 195, 196, 197, 206, 210, 234, 238, 239, 241, 243, 244, 245, 261, 262, 268, 275, 278, 285, 299, 311, 312, 320, 364, 367, 370, 773], "linear": [5, 10, 13, 15, 25, 26, 27, 28, 33, 52, 68, 69, 78, 85, 90, 94, 98, 102, 104, 116, 118, 121, 123, 124, 126, 128, 131, 133, 139, 141, 146, 147, 149, 150, 152, 156, 161, 165, 167, 168, 169, 174, 176, 177, 180, 181, 187, 191, 193, 195, 196, 197, 198, 201, 203, 209, 212, 213, 214, 217, 229, 231, 232, 233, 235, 238, 240, 241, 242, 243, 244, 245, 249, 258, 261, 262, 271, 273, 274, 275, 283, 284, 294, 296, 299, 300, 301, 303, 304, 307, 308, 311, 317, 318, 325, 327, 330, 334, 335, 336, 340, 341, 343, 351, 353, 363, 366, 367, 368, 369, 370, 371, 372, 373, 375, 394, 406, 416, 418, 426, 433, 434, 435, 447, 452, 453, 463, 466, 472, 475, 483, 484, 485, 486, 487, 490, 492, 494, 495, 499, 500, 501, 505, 517, 533, 540, 544, 545, 557, 560, 565, 571, 586, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 638, 639, 640, 641, 642, 643, 644, 658, 667, 700, 703, 715, 717, 724, 735, 747, 758, 762, 772, 775, 789, 790, 794, 798, 805, 806, 807, 810, 815, 816, 819, 822, 824, 826, 827, 828, 829, 838, 842, 849, 850, 851, 852, 853, 854, 855, 921, 923, 924, 925, 927, 932, 935, 936, 937, 938, 939, 940, 946, 947, 952, 954, 956, 958, 961, 962, 967, 968, 969, 973, 974, 976, 977, 978, 979, 980, 981, 984, 985, 986, 987], "radial": [5, 90, 135, 140, 142, 299, 330, 403, 573, 642, 930, 947, 969], "rbf": [5, 6, 10, 11, 15, 27, 28, 90, 119, 126, 135, 136, 137, 139, 140, 141, 142, 144, 148, 193, 205, 206, 212, 233, 235, 237, 240, 293, 294, 296, 303, 305, 306, 330, 364, 368, 370, 403, 453, 455, 486, 492, 561, 562, 563, 564, 567, 570, 571, 572, 574, 575, 590, 591, 592, 593, 594, 627, 642, 715, 724, 726, 747, 758, 761, 767, 809, 829, 844, 845, 849, 851, 852, 853, 854, 855, 921, 924, 925, 929, 932, 938, 942, 945, 958, 963, 969, 979, 984], "decomposit": [5, 6, 14, 16, 53, 64, 66, 67, 68, 78, 81, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 116, 199, 200, 202, 211, 213, 217, 234, 257, 262, 278, 285, 312, 326, 327, 331, 344, 347, 351, 360, 361, 364, 370, 400, 402, 403, 404, 413, 433, 434, 435, 446, 500, 507, 562, 601, 602, 603, 604, 605, 606, 607, 614, 615, 616, 623, 624, 625, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 745, 746, 798, 805, 808, 811, 827, 858, 885, 886, 928, 929, 932, 949, 952, 954, 961, 963, 968, 969, 973, 974, 975, 976, 977, 978, 979, 980], "32": [5, 47, 150, 153, 214, 285, 332, 336, 343, 351, 360, 370, 371, 397, 515, 516, 533, 540, 585, 627, 828, 830, 869, 870, 897, 940, 942, 966, 973, 976, 979, 981, 982, 985, 986, 987], "kernel_pca": [5, 90, 364], "400": [5, 24, 85, 98, 113, 117, 135, 147, 185, 204, 247, 269, 312, 333, 368, 446, 967], "1e": [5, 6, 7, 10, 16, 24, 42, 85, 135, 138, 140, 141, 142, 143, 144, 146, 151, 159, 172, 179, 180, 186, 193, 197, 202, 206, 212, 216, 221, 224, 227, 233, 243, 246, 270, 284, 292, 297, 299, 307, 311, 344, 375, 395, 398, 403, 410, 413, 422, 423, 429, 433, 434, 435, 482, 483, 484, 487, 488, 489, 490, 491, 493, 494, 496, 497, 498, 510, 511, 512, 513, 543, 548, 562, 564, 565, 566, 570, 571, 573, 574, 576, 578, 589, 591, 592, 593, 595, 596, 597, 598, 599, 600, 603, 604, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 638, 640, 641, 642, 643, 644, 645, 646, 678, 691, 735, 745, 746, 761, 784, 785, 786, 787, 788, 789, 790, 798, 806, 807, 814, 844, 845, 849, 850, 851, 852, 853, 854, 855, 918, 921, 932, 936, 940, 942, 946, 963, 967, 981, 986, 987, 988], "fit_inverse_transform": [5, 90, 486, 982], "5e": [5, 85, 164, 546, 547, 549], "inde": [5, 7, 23, 35, 36, 49, 53, 75, 78, 90, 102, 132, 133, 135, 151, 153, 158, 167, 168, 179, 181, 237, 238, 242, 244, 253, 273, 278, 312, 320, 324, 337, 343, 350, 351, 352, 365, 370, 518, 519, 928, 942, 946, 987], "least": [5, 14, 73, 74, 76, 88, 109, 112, 143, 148, 157, 158, 172, 179, 181, 184, 187, 196, 197, 210, 235, 252, 278, 283, 284, 299, 312, 313, 324, 331, 333, 335, 337, 338, 342, 344, 346, 349, 351, 352, 362, 363, 365, 366, 367, 368, 370, 371, 372, 373, 374, 396, 399, 401, 407, 408, 409, 412, 425, 433, 434, 435, 436, 445, 467, 482, 488, 490, 492, 493, 494, 496, 497, 498, 499, 500, 508, 509, 510, 511, 513, 515, 516, 517, 544, 553, 586, 594, 597, 599, 601, 602, 603, 604, 605, 606, 607, 608, 614, 615, 616, 617, 618, 619, 620, 622, 623, 625, 627, 629, 630, 631, 633, 634, 635, 636, 637, 638, 643, 648, 663, 667, 669, 735, 748, 752, 753, 759, 761, 762, 763, 765, 766, 768, 770, 773, 774, 775, 806, 807, 810, 821, 829, 854, 857, 858, 859, 860, 878, 895, 922, 925, 929, 932, 935, 944, 946, 947, 948, 953, 954, 956, 965, 969, 973, 975, 976, 979, 980, 984], "hope": [5, 197, 351, 362, 982], "remov": [5, 14, 15, 16, 50, 64, 69, 133, 146, 147, 151, 154, 236, 273, 281, 282, 283, 311, 312, 315, 320, 330, 333, 337, 338, 339, 342, 343, 347, 351, 363, 364, 367, 370, 371, 373, 374, 389, 394, 396, 398, 400, 401, 408, 410, 439, 440, 477, 485, 486, 488, 490, 492, 497, 504, 505, 506, 507, 518, 519, 520, 521, 530, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 562, 581, 583, 584, 589, 595, 601, 602, 605, 606, 607, 609, 615, 616, 622, 643, 650, 691, 718, 728, 729, 730, 773, 796, 808, 809, 813, 814, 822, 826, 827, 829, 838, 852, 853, 855, 864, 880, 881, 883, 922, 929, 935, 948, 954, 959, 969, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "think": [5, 33, 152, 338, 369, 931, 953, 955, 956, 958], "happen": [5, 104, 167, 273, 279, 312, 320, 324, 325, 337, 338, 342, 343, 344, 349, 351, 352, 354, 363, 365, 367, 370, 389, 466, 523, 609, 735, 827, 829, 849, 928, 932, 933, 947, 953, 967, 981, 985, 986, 988, 989], "ridg": [5, 10, 13, 50, 69, 118, 133, 134, 146, 148, 151, 152, 157, 158, 179, 180, 205, 214, 311, 324, 327, 349, 368, 370, 475, 486, 490, 494, 562, 566, 573, 576, 594, 595, 596, 598, 600, 608, 612, 624, 625, 626, 629, 638, 652, 700, 747, 761, 782, 855, 927, 932, 940, 942, 946, 947, 954, 965, 969, 973, 974, 975, 976, 977, 978, 980, 982, 983, 986, 987, 988], "x_reconstructed_kernel_pca": [5, 90], "inverse_transform": [5, 47, 50, 90, 130, 257, 312, 368, 371, 397, 416, 433, 434, 435, 484, 485, 486, 489, 490, 491, 492, 494, 495, 532, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 581, 747, 750, 751, 761, 809, 813, 814, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 829, 841, 842, 942, 943, 944, 975, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988], "x_reconstructed_pca": [5, 90], "lower": [5, 15, 24, 27, 28, 30, 53, 72, 78, 85, 87, 93, 98, 99, 102, 107, 111, 114, 135, 137, 139, 141, 152, 153, 164, 165, 169, 179, 180, 181, 182, 192, 199, 203, 209, 210, 214, 223, 227, 234, 235, 237, 238, 242, 243, 245, 248, 257, 259, 260, 275, 278, 285, 291, 299, 305, 311, 312, 313, 316, 333, 338, 361, 362, 363, 366, 367, 368, 369, 370, 371, 374, 396, 399, 415, 418, 449, 460, 483, 485, 492, 495, 504, 510, 511, 512, 513, 514, 539, 540, 542, 554, 562, 564, 565, 566, 568, 570, 571, 573, 574, 576, 583, 584, 586, 588, 628, 630, 663, 667, 675, 678, 684, 689, 745, 746, 795, 797, 799, 800, 801, 803, 830, 851, 852, 853, 856, 873, 927, 928, 929, 931, 932, 933, 935, 936, 937, 938, 939, 940, 944, 946, 947, 948, 965, 975, 976, 981, 988], "analysi": [5, 7, 9, 23, 26, 32, 52, 58, 84, 86, 87, 89, 90, 92, 94, 108, 148, 151, 152, 168, 200, 220, 232, 235, 236, 240, 254, 273, 278, 312, 327, 330, 333, 335, 338, 340, 352, 360, 363, 365, 370, 371, 375, 391, 398, 399, 424, 426, 427, 433, 434, 436, 453, 455, 463, 466, 482, 483, 484, 485, 486, 488, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 506, 507, 589, 639, 641, 642, 643, 644, 661, 670, 675, 676, 706, 738, 739, 740, 741, 745, 747, 771, 775, 791, 798, 809, 810, 815, 825, 829, 837, 885, 886, 922, 928, 929, 931, 932, 942, 951, 952, 954, 956, 959, 968, 969, 973, 974, 975, 977, 982], "favor": [5, 75, 221, 227, 349, 365, 370, 584, 680, 755, 757, 808, 880, 921, 940, 975, 977, 979, 980, 982, 985, 986, 987, 988, 989], "background": [5, 11, 43, 61, 114, 271, 275, 333, 338, 346, 363, 444, 445, 929, 937, 946, 983], "plot_digits_denois": 5, "dataset": [6, 7, 9, 10, 11, 13, 14, 15, 18, 19, 20, 24, 27, 28, 30, 32, 33, 34, 37, 38, 39, 41, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 62, 65, 66, 67, 68, 69, 73, 74, 75, 78, 84, 88, 89, 90, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 129, 130, 131, 132, 133, 134, 143, 146, 147, 153, 154, 156, 157, 160, 162, 164, 165, 166, 167, 169, 170, 171, 172, 175, 176, 178, 182, 183, 186, 187, 191, 192, 193, 194, 195, 196, 201, 203, 204, 205, 207, 210, 212, 213, 214, 215, 218, 219, 221, 223, 224, 225, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 250, 252, 253, 255, 256, 257, 261, 262, 263, 264, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 297, 299, 300, 301, 302, 303, 307, 308, 309, 312, 313, 314, 315, 317, 318, 319, 320, 325, 326, 327, 340, 341, 342, 344, 350, 351, 353, 354, 357, 359, 360, 361, 363, 364, 367, 368, 369, 370, 371, 372, 378, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 409, 410, 420, 421, 424, 425, 426, 427, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 497, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 534, 535, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 561, 562, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 579, 582, 583, 584, 585, 586, 589, 590, 591, 594, 597, 598, 600, 602, 603, 604, 606, 608, 609, 610, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 639, 640, 641, 642, 643, 648, 649, 651, 652, 653, 654, 655, 659, 679, 705, 707, 737, 738, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 791, 792, 793, 795, 797, 798, 799, 800, 801, 802, 805, 806, 807, 809, 810, 813, 814, 822, 823, 827, 829, 831, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 869, 870, 874, 875, 921, 922, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 944, 945, 946, 947, 948, 952, 953, 955, 956, 959, 961, 962, 963, 966, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980], "excerpt": [6, 944, 963], "wild": [6, 331, 444, 445, 459, 460, 963, 969, 973], "aka": [6, 268, 311, 349, 371, 403, 487, 489, 491, 495, 498, 532, 533, 566, 573, 602, 603, 605, 606, 607, 609, 610, 613, 617, 618, 619, 621, 627, 628, 629, 691, 816, 820, 822, 928, 936, 946, 958, 963, 975, 987], "lfw": [6, 333, 444, 445, 963, 973], "vi": [6, 8, 333, 650, 963, 981, 984], "www": [6, 65, 156, 179, 195, 197, 207, 252, 270, 332, 333, 338, 346, 354, 363, 367, 394, 400, 438, 459, 460, 482, 485, 488, 492, 595, 609, 615, 622, 636, 637, 798, 805, 857, 858, 928, 945, 963], "umass": [6, 333, 963], "edu": [6, 8, 11, 16, 42, 109, 142, 156, 161, 199, 224, 234, 258, 266, 277, 332, 333, 335, 363, 400, 438, 453, 459, 460, 461, 485, 592, 595, 600, 609, 617, 618, 627, 630, 633, 634, 784, 786, 787, 788, 798, 805, 842, 844, 857, 858, 928, 930, 963], "funnel": [6, 444, 445, 963], "tgz": [6, 963], "233mb": [6, 963], "randomizedsearchcv": [6, 65, 135, 236, 243, 283, 320, 350, 526, 921, 932, 946, 952, 963, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988], "fetch_lfw_peopl": [6, 333, 963, 988], "classification_report": [6, 29, 64, 130, 233, 271, 288, 289, 932, 963, 967, 975, 977, 981, 982, 983, 985, 989], "confusionmatrixdisplai": [6, 29, 229, 284, 288, 311, 582, 669, 932, 963, 983, 984, 986, 987, 988], "standardscal": [6, 10, 28, 40, 45, 53, 57, 65, 67, 78, 96, 118, 151, 158, 167, 168, 170, 179, 195, 197, 207, 208, 216, 217, 219, 232, 242, 261, 262, 268, 275, 278, 281, 282, 284, 285, 286, 299, 302, 320, 326, 338, 340, 343, 347, 350, 364, 367, 383, 417, 418, 518, 601, 602, 605, 606, 607, 615, 616, 627, 629, 809, 810, 813, 826, 840, 849, 850, 851, 852, 854, 855, 922, 929, 936, 942, 946, 947, 949, 963, 975, 977, 978, 981, 982, 983, 984, 985, 986, 989], "svc": [6, 15, 23, 25, 27, 28, 29, 64, 68, 119, 124, 126, 131, 148, 156, 211, 213, 217, 229, 233, 235, 237, 240, 241, 242, 245, 246, 250, 275, 281, 283, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 308, 309, 311, 324, 340, 344, 351, 357, 361, 364, 367, 370, 419, 466, 506, 648, 649, 651, 653, 747, 764, 776, 778, 809, 846, 847, 849, 851, 920, 921, 927, 930, 932, 933, 942, 958, 962, 963, 965, 970, 973, 974, 975, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987], "stat": [6, 8, 10, 64, 73, 91, 135, 154, 232, 235, 243, 247, 258, 283, 288, 289, 335, 347, 350, 365, 425, 543, 546, 547, 549, 550, 551, 555, 556, 557, 560, 633, 634, 751, 759, 761, 857, 858, 888, 921, 928, 942, 963, 980, 982, 986], "loguniform": [6, 135, 243, 921, 963, 983], "disk": [6, 13, 333, 336, 338, 343, 351, 357, 963], "arrai": [6, 7, 8, 10, 11, 12, 13, 15, 18, 29, 30, 31, 36, 40, 42, 44, 49, 56, 57, 59, 64, 66, 74, 77, 83, 86, 87, 99, 110, 112, 114, 117, 120, 124, 133, 136, 137, 138, 143, 158, 172, 173, 176, 179, 180, 186, 196, 200, 201, 206, 210, 216, 219, 221, 222, 223, 225, 226, 230, 231, 233, 235, 239, 240, 252, 266, 276, 281, 285, 289, 295, 302, 311, 318, 319, 320, 324, 325, 331, 332, 333, 338, 339, 340, 341, 343, 344, 346, 348, 349, 350, 351, 357, 360, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 447, 448, 449, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 466, 475, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 532, 533, 534, 535, 537, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 866, 867, 869, 870, 871, 874, 875, 883, 884, 885, 886, 887, 888, 890, 891, 892, 894, 895, 896, 903, 904, 905, 906, 907, 908, 909, 910, 918, 919, 922, 927, 928, 930, 932, 933, 935, 936, 938, 939, 942, 943, 944, 946, 947, 948, 951, 956, 962, 963, 964, 965, 966, 967, 969, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "lfw_peopl": [6, 333, 963], "min_faces_per_person": [6, 333, 445, 963], "70": [6, 11, 61, 65, 67, 152, 221, 235, 289, 333, 335, 367, 444, 445, 664, 676, 706, 747, 761, 921, 942, 963], "resiz": [6, 42, 43, 216, 333, 444, 445, 963], "n_sampl": [6, 7, 10, 14, 22, 23, 24, 25, 29, 30, 33, 34, 35, 37, 38, 39, 40, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 64, 69, 71, 72, 73, 74, 75, 78, 83, 85, 86, 90, 93, 98, 99, 101, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 125, 126, 132, 144, 146, 147, 150, 158, 160, 161, 163, 165, 167, 169, 171, 173, 174, 178, 179, 180, 182, 183, 187, 191, 194, 196, 197, 199, 200, 201, 202, 203, 204, 206, 210, 211, 222, 224, 225, 226, 227, 232, 233, 235, 238, 239, 242, 244, 245, 246, 247, 248, 249, 253, 263, 275, 276, 277, 282, 283, 285, 290, 297, 300, 301, 307, 311, 312, 320, 331, 335, 338, 340, 343, 347, 349, 350, 351, 363, 365, 366, 367, 368, 370, 374, 375, 376, 378, 380, 381, 382, 384, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 445, 452, 455, 459, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 572, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 720, 721, 722, 723, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 874, 875, 886, 888, 890, 894, 901, 903, 906, 907, 908, 909, 910, 911, 912, 913, 921, 924, 928, 932, 933, 935, 936, 942, 943, 944, 946, 947, 948, 958, 963, 964, 965, 966, 967, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "w": [6, 12, 13, 15, 27, 31, 36, 38, 41, 44, 53, 59, 92, 95, 146, 163, 178, 183, 196, 213, 221, 222, 223, 226, 227, 246, 271, 284, 285, 304, 307, 313, 320, 333, 335, 344, 357, 363, 364, 368, 370, 371, 375, 380, 384, 389, 416, 420, 423, 425, 433, 434, 435, 474, 489, 491, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 520, 521, 539, 540, 542, 561, 562, 586, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 644, 650, 675, 676, 706, 747, 761, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 791, 792, 795, 796, 799, 800, 806, 807, 842, 844, 845, 849, 850, 851, 852, 854, 855, 857, 858, 859, 860, 883, 888, 928, 932, 936, 937, 942, 944, 946, 947, 963, 967, 983, 987, 988, 989], "info": [6, 38, 65, 85, 151, 152, 233, 335, 337, 342, 351, 371, 963], "n_featur": [6, 8, 14, 23, 24, 25, 27, 28, 29, 30, 36, 48, 53, 55, 56, 71, 72, 73, 74, 75, 82, 83, 85, 93, 99, 101, 103, 105, 130, 132, 133, 146, 147, 156, 158, 161, 163, 165, 173, 174, 178, 182, 183, 194, 196, 200, 206, 210, 211, 221, 226, 232, 238, 242, 244, 245, 247, 248, 263, 268, 275, 281, 282, 283, 285, 307, 311, 312, 313, 320, 324, 331, 332, 338, 340, 343, 349, 350, 351, 363, 365, 366, 368, 370, 371, 374, 375, 376, 378, 380, 381, 382, 384, 385, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 409, 410, 411, 412, 414, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 441, 442, 443, 445, 452, 455, 459, 460, 463, 466, 467, 470, 472, 474, 475, 477, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 661, 675, 708, 709, 710, 711, 713, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 740, 741, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 886, 907, 908, 909, 910, 911, 912, 913, 924, 928, 933, 935, 936, 942, 946, 947, 948, 958, 963, 964, 966, 967, 973, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988], "id": [6, 197, 266, 319, 332, 333, 338, 346, 365, 367, 371, 445, 446, 447, 861, 863, 881, 963, 967, 981, 982, 985], "person": [6, 238, 333, 337, 367, 371, 444, 445, 446, 942, 963, 981], "target_nam": [6, 18, 48, 89, 94, 150, 188, 200, 223, 229, 236, 244, 245, 256, 279, 292, 311, 316, 331, 333, 439, 440, 442, 443, 444, 445, 447, 448, 451, 453, 454, 455, 456, 461, 664, 932, 948, 958, 963, 967, 983], "n_class": [6, 27, 33, 82, 83, 99, 101, 105, 107, 130, 132, 194, 200, 211, 213, 223, 242, 243, 244, 262, 263, 281, 316, 320, 338, 340, 351, 370, 389, 439, 440, 453, 466, 470, 474, 500, 501, 502, 504, 506, 508, 510, 512, 515, 518, 520, 544, 545, 555, 561, 585, 590, 609, 610, 617, 618, 619, 625, 626, 627, 628, 648, 658, 667, 669, 685, 688, 691, 704, 738, 742, 747, 750, 751, 761, 770, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 791, 796, 798, 799, 806, 809, 816, 817, 820, 823, 833, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 859, 874, 875, 928, 932, 933, 936, 943, 946, 947, 955, 963, 978, 979, 980, 982, 983, 984], "scaler": [6, 65, 67, 148, 195, 211, 217, 219, 261, 272, 278, 286, 299, 302, 320, 343, 364, 367, 441, 609, 610, 623, 625, 638, 809, 818, 819, 821, 825, 826, 827, 829, 834, 835, 836, 837, 838, 839, 840, 936, 942, 946, 963, 973, 978, 981, 986], "unlabel": [6, 213, 283, 288, 289, 290, 292, 293, 351, 362, 363, 844, 845, 846, 931, 958, 961, 963, 965, 985], "unsupervis": [6, 12, 33, 45, 66, 67, 78, 85, 104, 116, 206, 213, 259, 260, 298, 311, 312, 320, 327, 330, 333, 340, 350, 351, 362, 363, 368, 369, 370, 371, 385, 394, 397, 483, 485, 487, 488, 490, 493, 494, 500, 514, 517, 518, 520, 521, 533, 534, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 579, 581, 585, 586, 589, 590, 591, 592, 593, 628, 692, 747, 750, 751, 753, 761, 773, 776, 791, 792, 795, 797, 798, 799, 800, 805, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 826, 827, 828, 829, 830, 841, 842, 846, 853, 929, 932, 938, 945, 954, 958, 959, 961, 963, 969, 973, 976, 986], "dimension": [6, 9, 10, 18, 28, 36, 40, 50, 52, 53, 57, 63, 65, 67, 68, 77, 78, 83, 85, 93, 99, 104, 116, 125, 126, 135, 137, 138, 142, 148, 175, 180, 196, 198, 200, 201, 203, 206, 210, 211, 213, 222, 223, 254, 257, 275, 296, 311, 320, 324, 330, 333, 334, 335, 338, 347, 351, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 397, 398, 400, 416, 420, 424, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 448, 451, 452, 453, 455, 456, 461, 466, 470, 483, 485, 486, 489, 490, 491, 492, 495, 498, 500, 514, 517, 524, 550, 558, 582, 591, 592, 593, 603, 639, 640, 641, 642, 643, 644, 645, 647, 650, 661, 675, 745, 746, 747, 775, 789, 790, 791, 794, 797, 798, 805, 809, 810, 813, 819, 824, 829, 841, 842, 843, 849, 853, 886, 918, 923, 924, 927, 928, 933, 934, 938, 944, 945, 946, 947, 948, 954, 956, 958, 959, 961, 963, 964, 966, 967, 968, 969, 973, 974, 975, 976, 978, 979, 980, 982, 985, 988], "reduct": [6, 18, 50, 52, 63, 67, 78, 85, 102, 116, 148, 198, 200, 201, 210, 213, 254, 285, 296, 320, 324, 330, 362, 363, 364, 366, 368, 370, 372, 419, 433, 434, 435, 436, 453, 481, 483, 485, 486, 489, 490, 491, 492, 495, 498, 500, 504, 505, 508, 509, 510, 511, 515, 516, 517, 550, 558, 609, 610, 639, 640, 641, 642, 643, 644, 731, 747, 775, 791, 798, 805, 809, 810, 819, 829, 847, 849, 857, 858, 859, 860, 924, 929, 944, 948, 953, 954, 956, 963, 969, 974, 975, 976, 979, 987, 988, 989], "150": [6, 81, 83, 103, 123, 200, 204, 206, 248, 335, 367, 372, 455, 553, 770, 771, 772, 932, 962, 963, 964], "top": [6, 12, 13, 14, 15, 16, 27, 31, 33, 35, 37, 38, 39, 40, 41, 47, 57, 59, 65, 82, 87, 104, 107, 118, 121, 151, 179, 181, 190, 194, 206, 215, 216, 221, 223, 224, 227, 232, 236, 244, 245, 258, 273, 275, 282, 288, 289, 299, 311, 320, 336, 338, 344, 349, 360, 361, 363, 368, 369, 370, 438, 538, 539, 542, 550, 676, 706, 742, 861, 863, 921, 924, 928, 930, 940, 956, 963, 966, 967, 987], "t0": [6, 8, 11, 14, 16, 35, 38, 40, 42, 44, 46, 48, 53, 57, 59, 88, 165, 194, 195, 196, 201, 204, 206, 210, 212, 236, 311, 312, 313, 627, 628, 629, 963], "svd_solver": [6, 85, 93, 368, 486, 492, 963, 979], "whiten": [6, 85, 86, 87, 257, 368, 375, 484, 485, 492, 827, 829, 963, 977, 979, 987, 988], "done": [6, 8, 9, 11, 14, 16, 18, 44, 46, 48, 49, 88, 130, 133, 140, 151, 152, 156, 158, 165, 196, 212, 226, 233, 236, 239, 244, 253, 276, 283, 311, 312, 313, 320, 325, 332, 336, 338, 340, 342, 345, 346, 347, 349, 351, 363, 365, 367, 368, 370, 393, 394, 397, 401, 403, 423, 433, 434, 435, 436, 440, 486, 512, 513, 533, 557, 579, 581, 583, 585, 594, 595, 596, 610, 691, 745, 746, 747, 761, 766, 767, 813, 827, 917, 921, 922, 925, 928, 929, 932, 934, 935, 936, 942, 945, 946, 947, 948, 953, 958, 962, 963, 965, 967, 973, 975, 980, 983, 985], "components_": [6, 14, 53, 78, 85, 87, 88, 91, 96, 210, 211, 271, 278, 285, 351, 364, 368, 396, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 494, 495, 590, 798, 805, 841, 842, 944, 963, 977, 979, 985, 988], "project": [6, 8, 11, 13, 16, 41, 53, 62, 81, 84, 85, 87, 89, 91, 92, 148, 152, 176, 199, 200, 201, 203, 205, 211, 213, 257, 262, 266, 296, 312, 324, 327, 330, 332, 336, 337, 343, 344, 347, 351, 352, 354, 360, 366, 368, 369, 375, 392, 402, 403, 413, 425, 433, 434, 435, 436, 440, 453, 455, 482, 484, 485, 486, 488, 490, 492, 493, 494, 495, 499, 500, 524, 533, 540, 592, 593, 600, 623, 625, 639, 642, 646, 647, 779, 798, 826, 841, 842, 843, 885, 886, 926, 928, 929, 930, 933, 935, 936, 938, 945, 948, 950, 955, 956, 958, 963, 966, 969, 973, 974, 976, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "orthonorm": [6, 347, 885, 963], "x_train_pca": [6, 963], "x_test_pca": [6, 90, 963], "classifi": [6, 7, 8, 9, 21, 24, 26, 27, 29, 51, 64, 65, 66, 67, 90, 98, 100, 101, 103, 105, 106, 107, 110, 116, 119, 120, 129, 130, 132, 148, 153, 156, 157, 169, 170, 171, 177, 186, 188, 191, 194, 206, 211, 218, 229, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 250, 251, 255, 256, 261, 262, 264, 268, 271, 275, 283, 284, 287, 288, 289, 291, 292, 294, 295, 298, 300, 301, 302, 307, 308, 309, 313, 333, 335, 338, 340, 343, 349, 351, 363, 364, 367, 371, 372, 373, 380, 387, 389, 390, 391, 439, 440, 447, 455, 463, 465, 466, 473, 482, 487, 488, 493, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 544, 545, 553, 557, 561, 573, 580, 582, 583, 584, 600, 609, 610, 617, 619, 622, 623, 624, 625, 626, 627, 648, 649, 651, 653, 654, 658, 659, 660, 663, 664, 669, 671, 676, 677, 679, 680, 684, 685, 688, 689, 690, 691, 692, 693, 704, 706, 732, 733, 734, 737, 738, 739, 742, 744, 747, 750, 751, 753, 761, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 796, 797, 799, 800, 805, 806, 807, 809, 810, 816, 829, 830, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 878, 880, 921, 922, 924, 927, 928, 929, 932, 933, 934, 937, 940, 942, 945, 946, 947, 948, 952, 953, 954, 956, 958, 959, 961, 962, 963, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988], "1e3": [6, 7, 10, 135, 141, 146, 212, 246, 921, 963], "1e5": [6, 140, 160, 162, 169, 246, 564, 565, 566, 570, 571, 573, 574, 576, 838, 843, 944, 963, 965], "clf": [6, 9, 10, 11, 12, 15, 22, 23, 24, 25, 28, 29, 34, 44, 47, 50, 53, 58, 65, 81, 91, 92, 103, 110, 113, 114, 119, 123, 126, 129, 130, 132, 137, 139, 154, 169, 171, 172, 176, 177, 183, 186, 188, 191, 192, 193, 195, 202, 207, 208, 211, 213, 215, 219, 225, 232, 236, 240, 241, 243, 246, 247, 256, 259, 260, 261, 264, 268, 275, 278, 281, 282, 283, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 315, 316, 319, 324, 333, 350, 351, 357, 364, 367, 370, 372, 390, 500, 501, 504, 506, 508, 510, 512, 514, 515, 518, 544, 545, 548, 583, 585, 589, 590, 591, 592, 593, 595, 596, 599, 603, 609, 610, 611, 612, 613, 617, 619, 620, 623, 624, 625, 626, 627, 628, 631, 648, 649, 651, 653, 738, 747, 750, 751, 761, 777, 778, 779, 781, 784, 785, 786, 787, 788, 795, 796, 806, 849, 851, 853, 854, 857, 861, 863, 922, 924, 928, 932, 933, 935, 936, 938, 939, 946, 947, 948, 958, 962, 963, 967], "class_weight": [6, 301, 351, 508, 512, 515, 609, 610, 617, 619, 625, 626, 627, 628, 849, 851, 852, 853, 854, 855, 856, 857, 859, 921, 946, 947, 963, 973, 974, 976, 977, 978, 979, 981, 987, 988], "n_iter": [6, 16, 65, 135, 158, 187, 199, 200, 204, 236, 243, 253, 271, 301, 340, 344, 350, 375, 405, 429, 483, 484, 488, 490, 495, 496, 497, 498, 595, 596, 597, 598, 603, 604, 611, 612, 613, 614, 632, 633, 634, 635, 636, 637, 638, 643, 645, 750, 751, 759, 761, 805, 807, 885, 886, 921, 946, 963, 974, 979, 980, 981, 985, 987, 988], "found": [6, 18, 19, 20, 96, 105, 132, 135, 141, 183, 213, 233, 236, 237, 238, 278, 281, 284, 286, 299, 313, 324, 326, 332, 335, 337, 338, 340, 349, 351, 352, 360, 363, 366, 367, 368, 370, 371, 373, 386, 393, 396, 397, 410, 423, 508, 509, 510, 511, 515, 516, 539, 541, 561, 562, 579, 587, 598, 602, 604, 606, 612, 614, 616, 622, 623, 625, 627, 629, 638, 639, 663, 670, 747, 750, 751, 761, 786, 791, 792, 798, 820, 822, 823, 857, 858, 859, 860, 864, 916, 920, 921, 924, 928, 929, 931, 933, 934, 935, 936, 942, 946, 947, 953, 955, 958, 963, 967, 973, 976, 977, 980, 981, 983, 987], "grid": [6, 8, 10, 11, 23, 24, 25, 38, 50, 56, 65, 66, 68, 71, 75, 107, 109, 116, 139, 148, 150, 151, 152, 168, 197, 204, 211, 212, 216, 221, 226, 228, 232, 234, 236, 239, 240, 252, 255, 257, 258, 266, 271, 275, 276, 278, 296, 299, 305, 311, 340, 345, 349, 351, 358, 364, 367, 369, 370, 371, 373, 399, 412, 415, 423, 449, 453, 466, 473, 582, 583, 584, 598, 601, 604, 605, 607, 610, 612, 614, 627, 664, 678, 692, 735, 738, 747, 750, 751, 758, 761, 763, 775, 776, 854, 925, 927, 932, 935, 939, 953, 958, 959, 961, 963, 965, 969, 973, 976, 977, 978, 980, 981, 987], "search": [6, 42, 50, 65, 66, 67, 68, 111, 130, 135, 148, 197, 212, 226, 228, 236, 239, 240, 247, 253, 255, 257, 271, 275, 286, 299, 311, 320, 327, 335, 336, 338, 340, 349, 351, 358, 363, 364, 367, 370, 371, 372, 373, 374, 395, 399, 401, 403, 408, 409, 412, 415, 422, 423, 429, 453, 466, 473, 508, 509, 510, 511, 515, 516, 517, 530, 550, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 579, 604, 627, 639, 640, 643, 644, 664, 678, 735, 738, 747, 750, 751, 758, 759, 761, 763, 775, 776, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 854, 857, 858, 859, 860, 891, 920, 925, 927, 929, 932, 935, 936, 946, 948, 952, 953, 958, 959, 961, 963, 969, 973, 975, 976, 977, 978, 979, 980, 981, 985, 987, 988], "best_estimator_": [6, 50, 67, 68, 71, 93, 212, 226, 236, 239, 257, 747, 750, 751, 761, 921, 962, 963, 980], "from_estim": [6, 23, 25, 28, 51, 101, 104, 114, 115, 119, 152, 162, 171, 188, 212, 216, 218, 229, 232, 237, 238, 242, 245, 256, 261, 264, 278, 281, 282, 283, 284, 286, 295, 296, 297, 300, 301, 316, 345, 361, 390, 582, 583, 584, 648, 649, 651, 652, 653, 669, 677, 732, 734, 737, 738, 739, 753, 927, 932, 939, 963, 970, 986, 987, 988, 989], "display_label": [6, 229, 648, 963, 985], "xticks_rot": [6, 648, 963], "vertic": [6, 16, 55, 110, 154, 168, 210, 211, 239, 252, 273, 276, 304, 306, 351, 360, 363, 368, 466, 648, 731, 963], "tight_layout": [6, 8, 23, 25, 28, 31, 36, 48, 60, 67, 69, 78, 85, 86, 96, 101, 105, 107, 112, 116, 118, 120, 137, 139, 144, 146, 150, 151, 153, 154, 158, 159, 169, 177, 179, 187, 190, 194, 197, 199, 211, 215, 230, 231, 247, 252, 253, 255, 265, 274, 275, 276, 277, 278, 281, 285, 297, 312, 315, 316, 963], "plot_galleri": [6, 85, 963], "n_row": [6, 18, 85, 360, 378, 402, 404, 462, 464, 963], "n_col": [6, 18, 85, 214, 378, 402, 404, 462, 464, 583, 963], "portrait": [6, 368, 963], "figur": [6, 7, 8, 9, 10, 12, 13, 15, 22, 23, 24, 25, 27, 28, 31, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 71, 75, 77, 80, 81, 82, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 98, 99, 100, 101, 102, 109, 110, 111, 112, 113, 116, 117, 121, 123, 124, 126, 128, 129, 132, 136, 137, 138, 139, 142, 143, 147, 151, 152, 153, 158, 164, 169, 172, 173, 176, 178, 180, 181, 183, 185, 190, 193, 194, 195, 196, 201, 202, 203, 206, 210, 211, 212, 213, 214, 216, 221, 223, 224, 227, 229, 234, 239, 240, 249, 258, 262, 263, 266, 268, 271, 273, 275, 276, 281, 283, 288, 289, 290, 297, 299, 303, 304, 316, 317, 318, 338, 363, 369, 370, 371, 373, 390, 582, 583, 648, 649, 651, 652, 653, 753, 863, 921, 925, 928, 931, 932, 935, 936, 939, 946, 947, 948, 963, 965, 966, 986], "subplots_adjust": [6, 7, 13, 14, 27, 31, 35, 38, 40, 41, 46, 47, 50, 57, 59, 73, 75, 82, 83, 87, 88, 95, 99, 101, 102, 118, 151, 178, 179, 194, 197, 206, 213, 221, 223, 224, 227, 230, 246, 248, 258, 266, 268, 271, 275, 283, 289, 296, 299, 963], "bottom": [6, 8, 12, 13, 14, 27, 33, 35, 38, 40, 41, 47, 49, 57, 59, 82, 83, 109, 116, 121, 179, 190, 206, 221, 223, 224, 227, 232, 235, 246, 258, 273, 289, 291, 299, 338, 361, 363, 369, 538, 861, 926, 928, 932, 953, 963, 966], "left": [6, 7, 12, 13, 14, 15, 22, 30, 35, 38, 40, 41, 47, 57, 59, 66, 69, 74, 75, 82, 83, 87, 88, 99, 102, 104, 105, 108, 111, 118, 120, 138, 144, 147, 151, 164, 172, 179, 180, 181, 183, 190, 192, 193, 196, 197, 206, 210, 213, 215, 216, 221, 223, 224, 227, 231, 232, 233, 234, 236, 244, 245, 247, 258, 259, 260, 266, 268, 271, 273, 285, 289, 298, 299, 319, 338, 340, 342, 360, 363, 366, 367, 369, 370, 371, 373, 423, 433, 434, 435, 436, 444, 449, 500, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 538, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 586, 590, 594, 602, 606, 745, 746, 747, 750, 751, 754, 761, 822, 829, 857, 858, 859, 860, 861, 873, 886, 903, 906, 921, 924, 926, 928, 930, 932, 934, 939, 944, 946, 948, 962, 963, 965, 966, 980, 982, 987], "01": [6, 8, 10, 13, 15, 36, 40, 47, 57, 85, 87, 102, 109, 110, 112, 115, 116, 133, 144, 152, 160, 163, 170, 186, 191, 192, 199, 200, 206, 210, 211, 212, 223, 227, 229, 234, 235, 240, 242, 258, 269, 273, 282, 301, 317, 318, 333, 335, 343, 363, 372, 400, 422, 466, 483, 490, 494, 546, 547, 549, 593, 597, 605, 609, 629, 647, 666, 747, 761, 843, 901, 928, 932, 936, 942, 944, 946, 963, 967], "right": [6, 7, 11, 12, 13, 14, 15, 28, 35, 38, 39, 40, 41, 47, 49, 55, 57, 59, 72, 73, 75, 82, 83, 87, 88, 90, 93, 95, 98, 99, 101, 102, 103, 111, 112, 113, 120, 129, 135, 138, 147, 169, 180, 181, 182, 183, 185, 186, 189, 190, 206, 209, 210, 221, 223, 224, 226, 227, 230, 231, 235, 238, 242, 245, 246, 248, 258, 266, 268, 271, 273, 275, 278, 289, 299, 301, 307, 309, 311, 316, 319, 320, 327, 338, 349, 352, 360, 363, 366, 368, 369, 370, 373, 415, 433, 434, 435, 436, 485, 492, 495, 508, 509, 510, 511, 512, 513, 515, 516, 517, 538, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 578, 586, 627, 629, 814, 857, 858, 859, 860, 861, 873, 886, 921, 924, 926, 928, 930, 932, 934, 935, 939, 944, 946, 947, 948, 952, 953, 956, 959, 963, 965, 966, 975, 981, 987, 989], "99": [6, 23, 40, 47, 57, 85, 197, 206, 210, 221, 223, 236, 273, 325, 331, 335, 342, 367, 370, 371, 443, 598, 612, 622, 738, 796, 901, 927, 932, 942, 946, 963, 969, 975], "90": [6, 10, 14, 95, 96, 110, 111, 112, 140, 154, 159, 176, 178, 181, 186, 221, 244, 246, 275, 320, 324, 338, 344, 367, 514, 731, 747, 773, 778, 830, 927, 932, 963, 967, 988], "hspace": [6, 13, 14, 40, 41, 57, 85, 197, 206, 221, 223, 224, 227, 258, 283, 289, 296, 963], "35": [6, 7, 9, 11, 101, 120, 152, 158, 167, 206, 495, 599, 600, 607, 653, 657, 658, 677, 691, 706, 732, 739, 782, 921, 928, 932, 938, 939, 942, 963, 967, 973, 975], "grai": [6, 13, 42, 43, 46, 47, 49, 85, 88, 113, 177, 179, 197, 210, 213, 214, 242, 270, 335, 368, 444, 445, 453, 472, 963, 966, 984], "ytick": [6, 11, 27, 36, 40, 42, 46, 47, 48, 53, 54, 57, 75, 77, 81, 88, 109, 112, 124, 129, 137, 138, 139, 143, 162, 169, 175, 192, 206, 213, 222, 223, 224, 227, 230, 249, 257, 266, 271, 288, 299, 303, 304, 305, 311, 963], "portion": [6, 8, 74, 244, 324, 333, 335, 338, 344, 351, 738, 770, 787, 921, 931, 935, 963, 967], "pred_nam": [6, 963], "rsplit": [6, 16, 236, 963], "true_nam": [6, 963], "ntrue": [6, 288, 289, 963], "prediction_titl": [6, 963], "signif": [6, 963], "eigenface_titl": [6, 963], "convolut": [6, 143, 963], "network": [6, 270, 324, 325, 326, 327, 332, 333, 349, 351, 352, 357, 363, 368, 370, 375, 447, 484, 486, 518, 519, 647, 691, 806, 807, 900, 928, 930, 932, 946, 948, 952, 954, 963, 968, 969, 973, 987], "famili": [6, 324, 326, 351, 363, 366, 368, 370, 371, 372, 543, 546, 547, 549, 550, 551, 557, 806, 807, 825, 837, 928, 942, 946, 963, 965, 977, 987], "outsid": [6, 9, 18, 107, 180, 181, 209, 219, 349, 371, 586, 828, 938, 963, 981], "scope": [6, 324, 326, 338, 349, 371, 952, 953, 963], "scikit": [6, 8, 10, 12, 15, 16, 28, 29, 46, 64, 104, 118, 130, 133, 147, 148, 151, 167, 168, 197, 205, 218, 219, 228, 232, 253, 258, 260, 280, 311, 312, 315, 316, 320, 325, 326, 327, 330, 332, 333, 334, 335, 337, 338, 341, 344, 345, 346, 347, 350, 351, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 377, 378, 380, 381, 382, 384, 385, 390, 395, 398, 401, 408, 410, 415, 416, 418, 419, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 463, 466, 475, 489, 512, 513, 515, 516, 518, 527, 532, 533, 534, 536, 537, 540, 550, 553, 562, 577, 579, 581, 585, 589, 591, 597, 599, 603, 609, 620, 631, 639, 651, 652, 668, 698, 728, 729, 730, 738, 747, 748, 749, 750, 751, 752, 753, 761, 764, 765, 766, 767, 768, 775, 777, 778, 791, 793, 810, 812, 814, 816, 819, 821, 822, 823, 824, 828, 829, 833, 846, 847, 849, 854, 858, 880, 881, 898, 899, 921, 922, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 942, 945, 946, 947, 948, 951, 955, 961, 962, 963, 965, 966, 969, 970, 971, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "librari": [6, 235, 284, 286, 317, 320, 330, 332, 333, 336, 337, 338, 339, 344, 349, 350, 351, 354, 359, 609, 849, 850, 851, 852, 854, 855, 900, 928, 932, 947, 948, 952, 953, 956, 963, 967, 971, 976, 980, 981, 982, 983, 984, 986], "reader": [6, 38, 284, 326, 338, 963], "pytorch": [6, 349, 952, 953, 963], "tensorflow": [6, 349, 952, 963], "implement": [6, 7, 13, 15, 16, 42, 51, 74, 85, 147, 156, 164, 168, 193, 197, 199, 206, 212, 233, 235, 244, 253, 255, 258, 276, 281, 282, 283, 284, 285, 311, 313, 324, 325, 326, 332, 333, 335, 336, 338, 339, 340, 343, 344, 346, 347, 351, 354, 357, 359, 360, 362, 365, 367, 368, 369, 370, 372, 373, 374, 375, 376, 389, 394, 395, 396, 398, 399, 400, 401, 426, 444, 447, 459, 483, 484, 485, 486, 487, 489, 492, 493, 494, 504, 505, 506, 508, 509, 512, 513, 514, 518, 523, 533, 539, 540, 542, 544, 548, 552, 561, 562, 583, 584, 591, 592, 596, 597, 604, 608, 609, 610, 614, 615, 619, 622, 623, 625, 626, 627, 628, 629, 635, 636, 637, 638, 639, 642, 643, 646, 658, 662, 671, 685, 688, 728, 732, 738, 739, 745, 747, 750, 751, 753, 761, 765, 766, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 782, 784, 785, 786, 787, 788, 791, 792, 794, 797, 799, 800, 805, 806, 807, 809, 831, 839, 840, 846, 849, 850, 851, 852, 853, 854, 855, 885, 886, 897, 900, 901, 903, 921, 922, 924, 926, 928, 929, 930, 931, 933, 934, 936, 937, 938, 942, 944, 945, 948, 949, 950, 952, 953, 954, 956, 958, 963, 964, 965, 966, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "plot_face_recognit": 6, "demonstr": [7, 18, 19, 20, 23, 32, 36, 56, 64, 66, 103, 112, 130, 143, 148, 180, 218, 219, 223, 227, 228, 238, 241, 244, 249, 255, 258, 265, 272, 275, 277, 283, 287, 289, 290, 293, 297, 307, 311, 313, 320, 326, 333, 334, 338, 343, 349, 359, 363, 367, 370, 398, 453, 463, 471, 654, 664, 692, 746, 747, 814, 845, 857, 921, 922, 926, 932, 933, 934, 935, 942, 945, 948, 951], "diabet": [7, 112, 121, 122, 133, 147, 148, 166, 167, 168, 175, 176, 231, 331, 370, 452, 603, 604, 747, 752, 770, 771, 772, 940, 958, 962, 969], "regress": [7, 10, 13, 23, 25, 27, 50, 63, 65, 73, 74, 76, 88, 97, 102, 104, 109, 117, 134, 146, 147, 148, 150, 151, 152, 157, 161, 163, 165, 169, 173, 174, 176, 180, 182, 183, 184, 195, 205, 207, 214, 219, 231, 248, 249, 252, 254, 271, 274, 278, 283, 284, 285, 286, 294, 311, 314, 325, 326, 327, 330, 331, 333, 335, 338, 340, 343, 346, 347, 349, 350, 351, 358, 361, 365, 366, 367, 368, 372, 384, 389, 415, 416, 425, 435, 440, 441, 443, 447, 452, 453, 455, 456, 463, 467, 468, 469, 475, 479, 482, 486, 488, 490, 492, 493, 494, 496, 497, 499, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 515, 516, 517, 518, 521, 522, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 556, 557, 560, 561, 562, 565, 566, 573, 574, 576, 583, 584, 585, 586, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 645, 652, 657, 672, 673, 674, 678, 691, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 735, 747, 750, 751, 753, 761, 772, 773, 775, 776, 780, 782, 783, 791, 792, 797, 799, 800, 806, 807, 809, 810, 813, 814, 816, 822, 823, 824, 826, 829, 830, 833, 838, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 863, 869, 872, 874, 890, 921, 922, 924, 927, 929, 939, 940, 942, 943, 952, 953, 954, 955, 956, 958, 961, 964, 969, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988], "patient": [7, 121, 133, 147, 335, 346, 367, 928, 965], "diseas": [7, 121, 147, 238, 335, 663, 932, 965], "newsgroup": [7, 14, 18, 210, 236, 292, 312, 313, 331, 360, 371, 439, 440, 959, 969], "post": [7, 14, 18, 64, 148, 285, 311, 312, 313, 314, 324, 333, 337, 338, 342, 343, 350, 363, 399, 439, 440, 451, 663, 775, 857, 932, 948, 956, 967, 984], "written": [7, 26, 80, 148, 186, 284, 325, 335, 338, 339, 340, 344, 346, 349, 351, 364, 369, 438, 453, 459, 664, 775, 854, 861, 926, 928, 932, 936, 937, 946, 951, 958, 959, 964, 967, 982], "about": [7, 11, 26, 40, 49, 52, 57, 64, 78, 80, 107, 130, 144, 148, 150, 151, 154, 196, 206, 232, 233, 235, 237, 242, 258, 278, 281, 283, 284, 285, 286, 289, 313, 319, 320, 324, 325, 327, 331, 333, 337, 338, 342, 343, 344, 350, 351, 352, 357, 367, 368, 371, 373, 390, 443, 445, 446, 447, 448, 451, 452, 453, 455, 456, 461, 466, 512, 513, 544, 545, 558, 559, 565, 584, 591, 627, 629, 693, 747, 761, 778, 870, 922, 928, 929, 931, 933, 935, 938, 939, 942, 943, 945, 947, 948, 950, 952, 956, 958, 959, 965, 967, 978, 979, 989], "sgdclassifi": [7, 8, 186, 187, 188, 189, 190, 191, 192, 211, 243, 292, 301, 311, 320, 324, 326, 344, 351, 361, 362, 371, 589, 591, 592, 593, 597, 609, 617, 619, 849, 854, 924, 928, 933, 946, 947, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 986, 987, 988, 989], "stochast": [7, 53, 110, 113, 148, 156, 157, 201, 203, 206, 211, 261, 262, 267, 284, 363, 368, 370, 413, 439, 447, 453, 454, 455, 465, 473, 487, 495, 510, 511, 522, 555, 578, 590, 609, 610, 619, 623, 625, 627, 628, 629, 630, 638, 639, 640, 641, 643, 775, 798, 805, 806, 807, 810, 819, 853, 885, 886, 906, 921, 935, 936, 938, 954, 968, 969, 973, 974, 977, 978, 980, 982, 984], "gradient": [7, 42, 61, 97, 104, 115, 118, 121, 140, 141, 148, 157, 206, 211, 273, 279, 351, 363, 373, 403, 413, 417, 418, 439, 447, 452, 454, 455, 466, 471, 504, 505, 510, 511, 512, 513, 522, 537, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 585, 586, 590, 599, 600, 609, 610, 619, 620, 623, 625, 627, 628, 629, 631, 638, 643, 645, 646, 691, 692, 698, 700, 750, 751, 752, 772, 775, 805, 806, 807, 810, 822, 823, 853, 906, 929, 932, 935, 936, 937, 938, 952, 954, 969, 973, 974, 976, 977, 978, 979, 980, 982, 983, 986, 988], "descent": [7, 13, 148, 157, 164, 206, 211, 284, 368, 370, 422, 423, 429, 439, 447, 454, 482, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 522, 590, 597, 598, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 619, 623, 625, 627, 628, 629, 632, 633, 634, 635, 638, 645, 775, 806, 807, 810, 849, 853, 906, 929, 936, 938, 947, 954, 965, 969, 973, 976, 977, 978, 980, 982, 984, 986, 987, 988], "nusvr": [7, 324, 855, 947, 975, 981, 983, 984, 985, 987, 988], "nu": [7, 9, 11, 144, 193, 206, 298, 324, 370, 373, 570, 628, 851, 852, 853, 938, 946, 947, 984, 988], "support": [7, 8, 9, 10, 15, 22, 25, 27, 29, 42, 66, 97, 103, 109, 117, 129, 152, 180, 189, 190, 191, 197, 211, 212, 218, 229, 240, 242, 253, 273, 277, 285, 292, 293, 295, 296, 299, 300, 302, 304, 307, 324, 325, 326, 327, 332, 336, 338, 340, 342, 343, 344, 345, 347, 348, 350, 351, 352, 363, 367, 368, 371, 373, 389, 392, 401, 403, 404, 415, 417, 418, 420, 425, 438, 447, 463, 489, 491, 492, 495, 498, 500, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 561, 562, 564, 565, 566, 568, 570, 571, 573, 574, 576, 578, 583, 584, 594, 596, 608, 609, 610, 621, 622, 623, 625, 626, 627, 628, 629, 638, 641, 645, 658, 664, 679, 680, 688, 693, 718, 728, 729, 730, 733, 734, 737, 738, 747, 750, 751, 753, 761, 772, 773, 781, 782, 787, 789, 790, 793, 795, 796, 801, 809, 810, 814, 820, 822, 823, 825, 829, 837, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 875, 880, 881, 920, 921, 922, 924, 925, 926, 928, 931, 932, 933, 934, 935, 936, 938, 939, 942, 943, 946, 948, 950, 952, 953, 954, 956, 958, 961, 963, 967, 969, 970, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "vector": [7, 8, 9, 10, 12, 14, 15, 18, 19, 24, 25, 27, 29, 32, 36, 44, 66, 80, 85, 87, 129, 135, 143, 160, 166, 183, 184, 191, 195, 211, 212, 215, 218, 233, 235, 236, 240, 259, 271, 273, 293, 295, 296, 298, 299, 300, 302, 303, 304, 307, 309, 312, 324, 326, 327, 343, 344, 347, 349, 351, 360, 361, 363, 365, 366, 367, 368, 370, 373, 374, 375, 389, 395, 396, 397, 398, 400, 401, 402, 404, 415, 416, 418, 419, 433, 434, 435, 436, 438, 440, 448, 460, 463, 472, 475, 482, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 500, 501, 502, 503, 518, 519, 520, 521, 532, 533, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 568, 569, 570, 571, 573, 574, 576, 589, 591, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 623, 624, 625, 626, 627, 628, 629, 637, 638, 639, 640, 642, 643, 644, 646, 650, 670, 685, 713, 718, 719, 720, 721, 723, 724, 725, 727, 728, 747, 750, 751, 761, 773, 776, 777, 778, 784, 785, 786, 787, 788, 791, 792, 793, 795, 796, 797, 799, 800, 801, 806, 807, 814, 816, 821, 829, 833, 836, 847, 849, 850, 851, 852, 853, 854, 855, 856, 869, 883, 885, 886, 895, 901, 921, 924, 925, 926, 928, 929, 930, 932, 933, 934, 936, 937, 938, 942, 946, 948, 954, 958, 961, 964, 967, 969, 970, 973, 974, 975, 976, 977, 979, 981, 982, 984, 986], "gradientboostingregressor": [7, 111, 112, 118, 121, 324, 343, 349, 370, 505, 513, 583, 584, 928, 932, 933, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987], "forward": [7, 133, 283, 324, 338, 372, 459, 460, 490, 494, 504, 510, 511, 536, 537, 553, 636, 637, 813, 928, 953, 985], "wise": [7, 24, 44, 143, 180, 206, 245, 273, 312, 324, 351, 361, 363, 367, 368, 372, 409, 482, 485, 488, 492, 496, 497, 500, 501, 504, 506, 507, 510, 511, 543, 546, 547, 549, 550, 551, 557, 591, 603, 651, 704, 777, 826, 839, 840, 843, 905, 907, 908, 909, 910, 913, 924, 926, 932, 933, 946, 953, 973, 978, 981, 982, 983], "fashion": [7, 104, 109, 187, 244, 325, 351, 360, 361, 368, 370, 504, 508, 509, 510, 511, 515, 516, 517, 553, 578, 775, 798, 813, 816, 822, 833, 857, 858, 859, 860, 903, 922, 928, 942, 982], "notic": [7, 23, 24, 49, 52, 73, 102, 104, 111, 132, 158, 206, 218, 232, 233, 235, 236, 238, 244, 245, 253, 278, 311, 312, 313, 320, 343, 367, 447, 492, 514, 921, 931, 932, 938, 967, 970, 986], "faster": [7, 18, 35, 59, 67, 85, 99, 104, 108, 111, 133, 152, 156, 165, 179, 181, 194, 195, 197, 212, 253, 255, 270, 282, 284, 285, 311, 312, 313, 324, 332, 338, 346, 347, 351, 362, 363, 368, 372, 373, 375, 395, 398, 400, 402, 403, 404, 413, 459, 482, 483, 484, 487, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 504, 510, 511, 512, 513, 594, 597, 598, 603, 604, 609, 610, 611, 612, 613, 614, 623, 625, 635, 638, 642, 646, 650, 676, 706, 728, 729, 730, 789, 790, 794, 806, 807, 824, 826, 828, 838, 842, 886, 901, 921, 925, 928, 933, 935, 936, 939, 944, 946, 947, 948, 952, 955, 963, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "10_000": [7, 23, 69, 104, 111, 150, 156, 210, 238, 253, 510, 511, 826], "vari": [7, 31, 40, 42, 57, 69, 105, 107, 132, 148, 151, 152, 168, 170, 173, 177, 204, 211, 226, 231, 235, 238, 267, 273, 278, 287, 299, 302, 320, 324, 326, 333, 351, 393, 397, 451, 459, 465, 466, 473, 510, 511, 515, 516, 597, 598, 601, 602, 603, 604, 605, 606, 611, 612, 613, 614, 632, 635, 654, 713, 766, 773, 775, 776, 806, 810, 814, 829, 846, 854, 857, 858, 906, 924, 927, 928, 932, 935, 936, 945, 948, 956, 980, 981], "relev": [7, 9, 18, 70, 131, 148, 158, 173, 235, 236, 242, 320, 324, 326, 333, 335, 337, 338, 340, 342, 343, 344, 351, 365, 366, 372, 373, 421, 425, 485, 492, 596, 606, 676, 690, 706, 750, 751, 778, 827, 829, 861, 862, 863, 932, 933, 938, 949, 953, 976, 981, 985, 987], "select": [7, 9, 32, 40, 52, 57, 63, 65, 68, 75, 83, 84, 101, 106, 108, 111, 118, 124, 130, 140, 142, 151, 152, 154, 156, 157, 159, 187, 194, 197, 200, 206, 210, 212, 220, 221, 233, 234, 235, 236, 240, 257, 273, 278, 283, 288, 289, 292, 294, 299, 307, 311, 312, 313, 320, 324, 325, 327, 333, 335, 336, 338, 340, 346, 350, 351, 360, 363, 364, 365, 368, 370, 371, 373, 395, 397, 398, 400, 402, 404, 409, 410, 411, 415, 417, 418, 423, 424, 427, 439, 440, 443, 444, 447, 448, 452, 453, 455, 463, 466, 483, 485, 486, 491, 492, 495, 500, 502, 509, 510, 511, 514, 516, 532, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 578, 582, 583, 596, 597, 598, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 622, 624, 627, 629, 633, 634, 642, 643, 648, 663, 667, 669, 704, 740, 741, 745, 746, 747, 750, 751, 752, 753, 761, 771, 772, 773, 775, 777, 791, 792, 793, 795, 797, 799, 800, 801, 809, 810, 814, 819, 825, 829, 846, 849, 850, 854, 857, 858, 859, 860, 865, 901, 902, 926, 927, 929, 932, 933, 935, 936, 938, 942, 945, 946, 947, 948, 949, 952, 953, 954, 956, 958, 959, 961, 965, 966, 967, 969, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 987, 988, 989], "ham": [7, 401, 408, 532, 650, 654, 660, 684, 691, 728, 729, 730, 744, 935], "loss": [7, 22, 23, 24, 25, 109, 110, 111, 112, 113, 135, 136, 148, 157, 161, 169, 172, 181, 184, 186, 187, 191, 197, 212, 243, 269, 278, 284, 292, 296, 297, 301, 307, 311, 349, 351, 361, 362, 368, 373, 415, 416, 447, 459, 460, 483, 489, 490, 491, 494, 498, 503, 504, 505, 509, 510, 511, 512, 513, 516, 594, 597, 600, 609, 610, 617, 618, 619, 620, 621, 622, 623, 627, 628, 629, 630, 654, 657, 660, 673, 684, 685, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 744, 747, 750, 751, 761, 771, 772, 775, 806, 807, 809, 810, 813, 814, 822, 823, 824, 829, 849, 850, 855, 856, 858, 860, 886, 890, 925, 928, 936, 940, 945, 946, 947, 948, 967, 973, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989], "eustach": [7, 8, 10, 956, 975, 976], "diemert": [7, 8, 10, 956, 975, 976], "maria": [7, 112, 118, 133, 147, 363, 984, 985, 986, 987, 988], "telenczuk": [7, 112, 118, 133, 147, 982, 985, 986, 988], "github": [7, 8, 112, 118, 147, 253, 332, 336, 337, 341, 342, 343, 344, 346, 349, 351, 352, 354, 357, 359, 403, 413, 459, 487, 642, 643, 646, 935, 951, 952, 955, 956, 967, 978, 983], "com": [7, 8, 11, 12, 14, 15, 19, 20, 22, 38, 44, 52, 60, 64, 65, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 117, 118, 135, 138, 140, 142, 144, 147, 159, 179, 181, 186, 196, 197, 200, 202, 204, 209, 221, 223, 224, 236, 239, 253, 273, 274, 277, 278, 311, 312, 332, 333, 336, 338, 342, 343, 344, 346, 349, 354, 363, 394, 403, 413, 459, 485, 487, 492, 622, 642, 646, 656, 935, 950, 955, 978, 980, 983], "maikia": [7, 112, 118, 147, 981, 982, 984, 985], "lemaitre58": [7, 118, 135, 140, 142, 144, 200, 273], "gmail": [7, 11, 14, 15, 22, 38, 44, 52, 60, 64, 65, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 117, 118, 135, 138, 140, 142, 144, 159, 179, 181, 196, 197, 200, 202, 209, 221, 223, 224, 236, 239, 273, 278, 311, 312], "licens": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 25, 27, 28, 29, 33, 35, 36, 38, 41, 42, 43, 44, 47, 48, 49, 50, 52, 56, 60, 61, 62, 64, 65, 67, 68, 69, 75, 80, 81, 85, 87, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 117, 118, 133, 135, 136, 138, 139, 140, 141, 142, 144, 147, 156, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 184, 186, 187, 195, 196, 197, 200, 201, 202, 204, 206, 209, 211, 212, 213, 215, 221, 223, 236, 239, 241, 248, 252, 253, 255, 261, 262, 263, 265, 266, 268, 271, 273, 274, 275, 276, 277, 278, 288, 289, 290, 291, 293, 303, 304, 307, 308, 311, 312, 313, 332, 351, 357, 948, 956], "mean_squared_error": [7, 111, 112, 175, 179, 181, 183, 185, 197, 320, 370, 692, 702, 932, 974, 976, 983, 984], "hamming_loss": [7, 654, 744, 932, 975, 979, 982], "seed": [7, 11, 24, 31, 35, 36, 40, 41, 48, 50, 52, 54, 55, 57, 59, 60, 65, 71, 72, 73, 83, 86, 91, 92, 102, 107, 126, 128, 153, 163, 169, 174, 177, 182, 185, 188, 192, 196, 202, 222, 224, 225, 226, 227, 238, 241, 249, 258, 259, 260, 265, 304, 305, 309, 312, 320, 325, 340, 347, 349, 351, 363, 367, 368, 395, 398, 399, 401, 403, 408, 410, 411, 412, 413, 422, 423, 424, 487, 495, 504, 505, 506, 507, 510, 511, 578, 597, 598, 603, 604, 611, 612, 613, 614, 628, 640, 642, 644, 646, 745, 746, 751, 780, 783, 798, 852, 872, 885, 886, 897, 901, 921, 922, 927, 929, 965, 977, 978, 982, 983, 989], "fetch_20newsgroups_vector": [7, 194, 210, 333, 973, 983, 985], "spars": [7, 12, 13, 16, 35, 36, 52, 70, 84, 104, 116, 148, 157, 174, 178, 195, 210, 212, 236, 253, 282, 286, 307, 310, 313, 319, 324, 330, 332, 333, 334, 338, 340, 341, 342, 343, 349, 350, 351, 362, 363, 364, 370, 371, 373, 374, 378, 390, 392, 394, 395, 396, 398, 400, 401, 402, 403, 404, 408, 410, 411, 413, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 438, 439, 440, 447, 448, 454, 459, 474, 475, 477, 478, 479, 480, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 532, 533, 536, 537, 539, 540, 541, 542, 544, 545, 554, 555, 556, 557, 558, 559, 560, 580, 581, 582, 589, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 663, 664, 665, 679, 680, 681, 684, 688, 689, 690, 704, 705, 710, 711, 713, 717, 718, 728, 729, 730, 731, 733, 734, 735, 737, 740, 744, 747, 750, 751, 761, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 791, 792, 793, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 812, 813, 814, 816, 818, 819, 820, 821, 822, 824, 826, 827, 829, 831, 832, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 867, 868, 869, 870, 875, 883, 886, 887, 890, 891, 892, 895, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 918, 922, 925, 928, 929, 930, 932, 933, 935, 945, 947, 948, 953, 954, 965, 966, 967, 968, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "generate_data": [7, 30], "load_diabet": [7, 112, 121, 123, 133, 147, 164, 166, 167, 168, 175, 176, 216, 231, 286, 370, 509, 513, 519, 624, 652, 770, 771, 772, 858, 860, 940, 962, 965, 979, 984, 987], "elif": [7, 8, 15, 31, 159, 181, 213, 215, 223, 258, 825], "subset": [7, 18, 24, 25, 29, 64, 65, 73, 74, 105, 107, 108, 123, 130, 152, 168, 180, 194, 195, 196, 197, 209, 211, 214, 215, 233, 236, 238, 244, 245, 247, 278, 279, 283, 288, 292, 311, 312, 313, 320, 333, 338, 346, 349, 351, 360, 361, 363, 364, 367, 370, 371, 373, 380, 389, 400, 415, 417, 418, 420, 439, 440, 443, 444, 448, 459, 500, 501, 502, 504, 506, 507, 508, 510, 512, 513, 514, 515, 518, 520, 553, 561, 580, 590, 591, 592, 593, 602, 606, 609, 617, 619, 622, 625, 626, 627, 628, 629, 630, 648, 654, 655, 664, 667, 669, 681, 684, 705, 707, 741, 744, 749, 773, 775, 777, 778, 779, 780, 784, 785, 786, 787, 788, 791, 796, 799, 806, 815, 844, 845, 849, 851, 854, 857, 859, 865, 901, 921, 928, 932, 933, 943, 945, 947, 948, 967, 976, 981, 982, 984, 986], "regression_data": 7, "classification_data": 7, "calcul": [7, 30, 42, 54, 73, 97, 103, 119, 147, 148, 154, 175, 184, 196, 211, 234, 235, 241, 245, 249, 252, 297, 304, 320, 324, 345, 351, 360, 361, 363, 367, 368, 370, 374, 390, 393, 395, 396, 397, 399, 401, 402, 404, 406, 407, 422, 423, 429, 432, 487, 498, 504, 515, 520, 548, 562, 571, 583, 584, 585, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 623, 624, 625, 626, 630, 632, 635, 639, 641, 643, 645, 658, 667, 679, 680, 685, 686, 688, 694, 704, 714, 719, 721, 722, 723, 724, 728, 731, 733, 734, 737, 738, 739, 740, 741, 743, 754, 756, 770, 774, 787, 789, 790, 827, 828, 829, 835, 839, 849, 850, 875, 888, 924, 926, 928, 929, 930, 932, 934, 935, 936, 940, 942, 945, 947, 962, 965, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "given": [7, 10, 11, 25, 33, 45, 53, 55, 71, 77, 86, 90, 114, 116, 118, 135, 142, 151, 152, 179, 180, 197, 200, 206, 210, 211, 214, 216, 231, 235, 236, 237, 238, 244, 259, 260, 261, 275, 279, 284, 307, 312, 313, 318, 324, 326, 333, 337, 338, 340, 342, 344, 346, 347, 349, 351, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 380, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 407, 409, 410, 411, 412, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 435, 438, 447, 452, 454, 456, 474, 487, 489, 490, 491, 494, 498, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 518, 519, 520, 521, 539, 540, 541, 542, 544, 552, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 582, 583, 595, 597, 600, 602, 603, 604, 606, 609, 610, 612, 614, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 638, 639, 642, 648, 649, 650, 651, 652, 653, 655, 656, 657, 663, 665, 668, 669, 671, 674, 676, 677, 684, 686, 687, 690, 702, 705, 706, 708, 709, 714, 724, 728, 731, 732, 734, 737, 738, 739, 742, 743, 745, 746, 747, 750, 751, 753, 759, 761, 765, 771, 772, 773, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 816, 819, 820, 822, 823, 824, 825, 826, 828, 829, 835, 836, 838, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 859, 864, 873, 874, 875, 916, 920, 921, 924, 926, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 942, 945, 946, 947, 948, 956, 958, 962, 963, 965, 966, 967, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987], "round": [7, 9, 23, 77, 146, 147, 186, 197, 235, 241, 275, 277, 401, 407, 408, 515, 516, 544, 545, 548, 578, 643, 664, 749, 759, 814, 846, 861, 863, 922, 936, 948, 975, 977, 979, 981, 982, 984, 986, 987, 989], "changing_param": 7, "collect": [7, 9, 10, 12, 15, 18, 23, 73, 103, 114, 121, 133, 140, 147, 154, 167, 172, 193, 202, 209, 238, 259, 298, 301, 312, 313, 324, 333, 335, 342, 354, 367, 368, 370, 371, 373, 415, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 520, 521, 532, 534, 535, 539, 540, 541, 542, 583, 749, 753, 754, 756, 903, 906, 921, 927, 928, 932, 938, 943, 953, 956, 962, 967, 975, 985], "chang": [7, 15, 23, 24, 85, 89, 90, 102, 112, 136, 146, 150, 151, 154, 180, 181, 183, 184, 216, 217, 230, 235, 242, 245, 277, 281, 282, 283, 284, 285, 286, 289, 299, 313, 320, 324, 325, 326, 333, 336, 340, 341, 342, 343, 346, 349, 351, 363, 367, 370, 371, 373, 386, 389, 392, 398, 400, 403, 405, 410, 413, 419, 422, 423, 429, 444, 445, 447, 455, 459, 460, 463, 464, 465, 473, 477, 482, 486, 487, 488, 489, 490, 491, 497, 498, 500, 501, 502, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 539, 540, 542, 544, 545, 548, 553, 561, 562, 564, 565, 566, 568, 570, 571, 573, 574, 576, 578, 586, 598, 600, 601, 602, 604, 605, 606, 607, 609, 610, 612, 614, 615, 616, 621, 623, 625, 630, 638, 643, 651, 655, 658, 663, 667, 668, 679, 680, 686, 687, 691, 705, 706, 707, 728, 734, 735, 737, 743, 745, 746, 747, 748, 749, 750, 751, 752, 761, 765, 766, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 781, 782, 784, 785, 786, 788, 789, 790, 795, 796, 808, 811, 813, 822, 837, 838, 843, 844, 847, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 867, 869, 870, 881, 886, 898, 899, 900, 902, 921, 922, 923, 931, 932, 933, 935, 942, 945, 946, 947, 948, 950, 953, 958, 965, 967, 971, 972], "affect": [7, 23, 73, 142, 150, 151, 183, 203, 216, 238, 245, 278, 320, 324, 325, 326, 334, 351, 353, 361, 363, 366, 367, 369, 371, 374, 376, 396, 401, 408, 424, 426, 430, 500, 501, 520, 663, 738, 747, 750, 751, 752, 761, 765, 766, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 829, 830, 840, 854, 931, 935, 947, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 25, 342, 361, 367, 784, 934, 987], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 12, 15, 16, 23, 30, 33, 36, 40, 46, 56, 65, 93, 99, 102, 103, 109, 111, 124, 147, 154, 172, 183, 184, 186, 187, 194, 197, 211, 212, 235, 238, 244, 245, 248, 252, 268, 269, 279, 291, 299, 302, 311, 312, 313, 315, 319, 344, 351, 364, 371, 609, 610, 849, 850, 856, 876, 942, 962], "start_tim": [7, 10, 18, 105, 106, 118, 135, 168, 200], "elapsed_tim": [7, 35, 62, 105, 106, 118, 196], "float": [7, 10, 12, 15, 18, 37, 41, 42, 43, 44, 49, 55, 56, 60, 61, 62, 65, 88, 92, 126, 143, 151, 165, 169, 202, 234, 235, 239, 243, 307, 313, 324, 332, 333, 338, 347, 351, 363, 364, 371, 372, 374, 375, 376, 380, 382, 384, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 412, 413, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 443, 444, 445, 447, 449, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 475, 476, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 534, 535, 539, 542, 543, 544, 545, 546, 547, 548, 549, 553, 554, 561, 562, 564, 565, 566, 567, 568, 570, 571, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 709, 716, 719, 725, 726, 727, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 753, 761, 764, 767, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 805, 806, 807, 809, 812, 815, 816, 822, 823, 825, 827, 829, 830, 831, 832, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 867, 869, 870, 873, 883, 884, 895, 907, 913, 918, 922, 932, 933, 935, 936, 942, 947, 948, 973, 974, 975, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 18, 102, 110, 112, 194, 195, 197, 278], "prediction_performance_label": 7, "dictionari": [7, 8, 32, 84, 115, 148, 178, 312, 313, 331, 332, 333, 340, 349, 351, 363, 371, 400, 415, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 461, 477, 482, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 518, 519, 520, 521, 532, 533, 535, 538, 539, 540, 583, 584, 585, 615, 636, 637, 652, 664, 747, 750, 751, 758, 759, 761, 772, 808, 813, 822, 857, 858, 859, 860, 864, 874, 921, 928, 932, 947, 958, 967, 968, 969, 973, 981, 984, 985, 986, 987, 988], "necessari": [7, 13, 103, 179, 184, 221, 235, 236, 242, 255, 317, 324, 333, 336, 337, 338, 339, 340, 341, 342, 346, 349, 363, 365, 370, 403, 413, 439, 440, 442, 443, 444, 445, 446, 448, 485, 595, 596, 597, 603, 607, 608, 611, 612, 613, 614, 615, 616, 622, 624, 626, 627, 642, 646, 743, 812, 821, 832, 836, 842, 921, 924, 928, 931, 934, 942, 948, 967, 973, 981], "defin": [7, 9, 12, 49, 52, 61, 64, 65, 67, 78, 85, 90, 98, 99, 100, 118, 133, 135, 142, 143, 144, 152, 153, 158, 180, 183, 187, 196, 197, 206, 210, 216, 218, 221, 226, 235, 236, 238, 242, 244, 245, 246, 247, 253, 273, 282, 299, 307, 311, 312, 324, 334, 337, 338, 339, 340, 344, 345, 347, 349, 350, 351, 357, 358, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 379, 383, 384, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 410, 414, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 440, 470, 471, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 573, 574, 578, 579, 580, 581, 583, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 647, 648, 650, 659, 661, 667, 672, 673, 674, 675, 678, 681, 688, 691, 695, 696, 698, 700, 701, 703, 704, 707, 710, 716, 731, 735, 740, 741, 745, 746, 747, 750, 751, 753, 761, 772, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 836, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 873, 875, 878, 884, 916, 921, 922, 928, 929, 930, 931, 933, 934, 935, 937, 938, 939, 940, 942, 944, 946, 947, 948, 953, 963, 966, 969, 970, 975, 979, 980, 981, 983, 984, 985, 987, 988, 989], "complexity_label": [7, 10], "type": [7, 15, 49, 63, 64, 74, 81, 95, 107, 110, 140, 148, 150, 151, 152, 156, 179, 181, 219, 220, 223, 226, 230, 241, 242, 244, 245, 303, 307, 311, 313, 319, 320, 325, 327, 331, 332, 333, 335, 336, 338, 339, 341, 342, 343, 344, 349, 350, 354, 357, 359, 360, 364, 371, 415, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 447, 459, 460, 466, 518, 523, 532, 533, 536, 537, 539, 540, 542, 551, 555, 568, 578, 580, 581, 589, 607, 609, 623, 625, 630, 638, 640, 643, 644, 652, 658, 665, 667, 679, 680, 688, 691, 733, 734, 737, 738, 745, 746, 747, 753, 761, 773, 775, 776, 791, 792, 793, 795, 796, 797, 799, 800, 801, 802, 803, 809, 810, 811, 814, 816, 822, 823, 829, 830, 851, 852, 853, 854, 855, 865, 867, 869, 870, 873, 877, 878, 895, 896, 903, 906, 919, 922, 924, 929, 931, 932, 933, 934, 935, 936, 942, 944, 948, 955, 956, 960, 965, 966, 967, 973, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 13, 50, 77, 129, 130, 133, 150, 151, 158, 161, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 178, 182, 183, 184, 188, 194, 195, 213, 219, 248, 285, 297, 304, 308, 311, 320, 333, 340, 351, 366, 372, 416, 433, 434, 435, 500, 544, 545, 548, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 849, 850, 851, 852, 853, 854, 855, 916, 926, 928, 946, 947, 965, 973, 975, 978, 980, 985, 987], "toarrai": [7, 292, 319, 364, 371, 517, 533, 539, 541, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 822, 839, 840, 903, 906, 922, 935, 942], "count_nonzero": [7, 10, 324], "configur": [7, 10, 65, 66, 152, 217, 219, 311, 323, 336, 338, 340, 344, 346, 349, 351, 354, 359, 364, 371, 372, 385, 394, 395, 397, 398, 400, 403, 413, 415, 419, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 517, 518, 519, 520, 521, 532, 533, 534, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 577, 578, 579, 580, 581, 583, 586, 589, 590, 591, 592, 593, 639, 640, 641, 642, 643, 645, 646, 738, 793, 798, 801, 805, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 847, 898, 899, 929, 932, 942, 947, 952, 967, 969, 977, 980, 981, 982, 983, 985, 987, 988], "penalti": [7, 10, 27, 75, 148, 157, 158, 168, 172, 179, 194, 195, 208, 243, 268, 284, 292, 304, 311, 324, 346, 349, 362, 365, 368, 372, 422, 423, 424, 425, 426, 427, 429, 453, 482, 488, 489, 490, 491, 493, 494, 498, 499, 548, 594, 597, 598, 599, 600, 603, 604, 605, 608, 609, 610, 611, 612, 613, 619, 620, 621, 623, 627, 629, 631, 632, 638, 761, 829, 849, 850, 852, 854, 855, 856, 921, 928, 931, 936, 942, 946, 947, 965, 967, 975, 978, 980, 982, 983, 985, 986, 988], "elasticnet": [7, 10, 160, 170, 243, 248, 324, 344, 349, 368, 598, 603, 608, 609, 610, 611, 612, 613, 614, 619, 627, 629, 632, 928, 946, 973, 974, 977, 978, 979, 981, 982, 984, 985, 986, 987], "001": [7, 13, 29, 40, 57, 188, 206, 221, 235, 237, 291, 335, 344, 367, 487, 488, 490, 497, 578, 595, 596, 597, 598, 603, 604, 611, 612, 613, 614, 617, 618, 619, 627, 628, 629, 630, 632, 635, 640, 641, 644, 645, 745, 746, 806, 807, 844, 845, 851, 852, 853, 854, 855, 921, 958, 967], "modified_hub": [7, 627, 946], "fit_intercept": [7, 158, 159, 165, 184, 193, 206, 243, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 638, 849, 850, 856, 928, 946, 977, 981, 982, 983, 985, 986, 987], "tol": [7, 10, 16, 67, 85, 109, 146, 159, 170, 172, 186, 187, 193, 195, 206, 216, 224, 271, 284, 307, 311, 340, 344, 370, 375, 395, 398, 400, 403, 410, 413, 422, 423, 429, 433, 434, 435, 482, 483, 484, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 510, 511, 512, 513, 553, 578, 589, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 623, 625, 627, 628, 629, 630, 631, 633, 634, 636, 637, 638, 639, 640, 642, 644, 646, 745, 746, 761, 798, 806, 807, 844, 845, 849, 850, 851, 852, 853, 854, 855, 918, 928, 946, 947, 963, 967, 977, 978, 980, 981, 982, 983, 984, 986, 987, 988], "n_iter_no_chang": [7, 109, 187, 284, 311, 343, 351, 370, 510, 511, 512, 513, 617, 618, 619, 627, 628, 629, 806, 807, 946, 981, 984], "l1_ratio": [7, 10, 14, 163, 164, 170, 243, 248, 324, 349, 368, 489, 491, 498, 597, 598, 603, 609, 610, 611, 612, 613, 614, 619, 627, 629, 632, 928, 946, 974, 976, 978, 985, 987], "75": [7, 10, 30, 40, 75, 102, 142, 143, 147, 158, 161, 186, 219, 223, 224, 235, 248, 258, 273, 309, 311, 320, 400, 502, 609, 657, 663, 684, 689, 695, 703, 706, 742, 747, 827, 839, 846, 862, 932, 934, 942, 948, 951, 963, 975], "9": [7, 9, 22, 24, 25, 27, 28, 29, 38, 40, 46, 53, 57, 59, 75, 82, 98, 107, 108, 109, 110, 111, 116, 118, 125, 126, 138, 142, 147, 150, 151, 152, 161, 170, 192, 193, 196, 197, 199, 202, 210, 211, 215, 221, 222, 223, 224, 238, 242, 244, 252, 255, 257, 258, 261, 262, 263, 268, 269, 273, 275, 276, 277, 279, 289, 291, 293, 299, 303, 309, 320, 335, 336, 344, 350, 354, 355, 356, 361, 364, 365, 367, 370, 371, 391, 395, 401, 408, 433, 434, 435, 436, 441, 471, 478, 485, 489, 490, 491, 498, 511, 518, 521, 534, 542, 558, 559, 578, 581, 585, 590, 598, 609, 612, 643, 660, 673, 676, 691, 698, 719, 728, 729, 730, 745, 748, 750, 751, 765, 768, 773, 775, 778, 786, 787, 791, 792, 797, 800, 806, 807, 815, 821, 824, 886, 890, 921, 928, 932, 936, 942, 946, 947, 950, 958, 962, 967, 971, 974, 975, 976, 978, 987], "non_zero": [7, 12], "coeffici": [7, 10, 34, 45, 53, 55, 71, 72, 75, 85, 88, 130, 148, 149, 150, 157, 163, 164, 165, 166, 170, 172, 173, 174, 175, 176, 177, 181, 182, 194, 197, 219, 270, 283, 284, 285, 311, 312, 313, 324, 334, 338, 340, 351, 353, 362, 365, 366, 368, 372, 373, 376, 384, 403, 416, 418, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 447, 475, 477, 478, 482, 486, 488, 490, 493, 494, 499, 503, 505, 507, 509, 511, 513, 516, 519, 521, 533, 540, 544, 548, 560, 562, 565, 578, 586, 587, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 642, 654, 667, 670, 679, 684, 688, 693, 700, 703, 725, 727, 735, 736, 740, 741, 744, 762, 772, 775, 782, 783, 792, 800, 807, 810, 822, 829, 849, 850, 851, 852, 853, 854, 855, 858, 860, 923, 926, 928, 946, 947, 965, 973, 977, 978, 980, 981, 982, 984, 985, 986, 987], "misclassif": [7, 744, 946, 947, 948, 974], "ratio": [7, 49, 61, 67, 94, 148, 210, 212, 224, 228, 324, 338, 363, 365, 367, 370, 401, 407, 444, 445, 466, 492, 500, 501, 502, 609, 661, 663, 667, 675, 686, 689, 732, 733, 734, 737, 743, 772, 775, 795, 842, 901, 926, 938, 948, 963, 988], "sparsifi": [7, 163, 324, 609, 610, 617, 619, 627, 628, 629, 849, 916, 975], "15": [7, 12, 13, 14, 27, 28, 31, 36, 40, 50, 56, 57, 61, 67, 73, 75, 83, 95, 99, 103, 107, 108, 128, 132, 135, 139, 146, 150, 152, 176, 181, 193, 197, 201, 204, 206, 223, 224, 230, 238, 240, 243, 246, 247, 249, 256, 257, 261, 264, 268, 269, 273, 275, 277, 289, 297, 299, 302, 306, 309, 316, 332, 333, 338, 350, 367, 370, 371, 392, 405, 441, 448, 482, 488, 506, 507, 549, 595, 603, 612, 614, 619, 627, 629, 643, 691, 765, 778, 801, 830, 921, 927, 928, 929, 932, 935, 936, 942, 947, 950, 958, 963, 971, 975, 985, 987, 988], "05": [7, 8, 14, 22, 24, 27, 33, 40, 55, 57, 59, 60, 62, 69, 82, 90, 102, 109, 111, 116, 129, 144, 159, 178, 181, 193, 203, 204, 206, 221, 223, 224, 227, 235, 242, 245, 246, 258, 261, 266, 273, 275, 281, 285, 289, 291, 304, 335, 372, 401, 407, 543, 546, 547, 549, 564, 565, 566, 570, 571, 573, 574, 576, 583, 584, 600, 641, 645, 706, 747, 798, 849, 850, 928, 936, 942], "n_support_vector": 7, "len": [7, 8, 10, 11, 15, 16, 18, 27, 28, 29, 33, 34, 37, 39, 40, 45, 46, 47, 55, 56, 57, 58, 59, 60, 64, 66, 88, 91, 95, 96, 99, 102, 107, 108, 109, 125, 126, 131, 132, 135, 143, 147, 152, 154, 178, 179, 197, 202, 206, 209, 210, 211, 214, 215, 221, 223, 224, 230, 233, 235, 236, 243, 244, 246, 249, 252, 253, 260, 262, 263, 268, 274, 275, 276, 279, 288, 289, 292, 299, 306, 309, 311, 312, 313, 319, 349, 351, 373, 389, 397, 401, 407, 415, 458, 466, 501, 520, 521, 533, 548, 583, 584, 732, 747, 761, 771, 775, 777, 780, 844, 845, 965, 966, 967, 982, 985], "support_vectors_": [7, 10, 15, 300, 303, 304, 851, 852, 853, 854, 855, 947], "squared_error": [7, 95, 111, 112, 284, 370, 509, 510, 511, 513, 516, 622, 627, 629, 644, 858, 860, 946, 986], "learning_r": [7, 98, 99, 110, 111, 112, 113, 204, 253, 269, 271, 282, 284, 370, 504, 505, 510, 511, 512, 513, 619, 627, 628, 629, 643, 805, 806, 807, 929, 939, 946, 974, 982, 986], "max_depth": [7, 28, 98, 99, 100, 101, 104, 107, 110, 111, 112, 113, 116, 117, 119, 146, 200, 232, 247, 283, 284, 315, 317, 318, 319, 350, 351, 370, 504, 505, 508, 509, 510, 511, 512, 513, 515, 516, 517, 750, 751, 773, 857, 858, 859, 860, 861, 862, 863, 921, 939, 948, 982, 984], "n_estim": [7, 10, 24, 28, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 116, 117, 120, 146, 154, 200, 214, 218, 223, 232, 247, 275, 281, 283, 324, 350, 351, 370, 372, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 583, 750, 751, 921, 938, 939, 970, 981], "n_tree": 7, "loop": [7, 8, 102, 111, 151, 230, 240, 319, 324, 338, 339, 344, 363, 367, 372, 597, 598, 603, 604, 610, 611, 612, 613, 614, 921, 945, 946, 962, 976, 977, 980, 985, 986], "previous": [7, 49, 52, 65, 141, 151, 233, 242, 285, 333, 346, 349, 354, 363, 368, 371, 392, 395, 405, 475, 485, 492, 600, 609, 610, 617, 619, 627, 628, 629, 849, 900, 928, 942, 952, 970, 973, 974, 975, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "subsequ": [7, 29, 53, 69, 88, 130, 167, 181, 237, 240, 253, 255, 299, 320, 338, 340, 344, 351, 363, 364, 370, 373, 389, 447, 459, 504, 505, 510, 512, 513, 617, 619, 627, 750, 751, 777, 778, 781, 784, 785, 786, 787, 788, 806, 824, 828, 922, 931, 933, 982, 983, 987], "relax": [7, 363, 371, 404, 945, 980], "sgd": [7, 8, 148, 157, 186, 193, 206, 243, 269, 270, 284, 311, 320, 326, 455, 463, 600, 617, 618, 619, 622, 627, 628, 629, 630, 806, 807, 921, 936, 954, 969, 973, 976, 977, 978, 980, 984, 986], "svr": [7, 10, 148, 205, 281, 294, 324, 507, 518, 519, 544, 545, 594, 629, 747, 850, 852, 854, 925, 965, 973, 975, 977, 978, 981, 983, 984, 985, 986, 987, 988], "optim": [7, 13, 25, 49, 50, 52, 55, 66, 71, 72, 85, 98, 110, 112, 132, 135, 136, 140, 141, 142, 167, 168, 172, 187, 195, 212, 233, 240, 243, 248, 252, 257, 271, 273, 278, 285, 291, 301, 307, 311, 312, 313, 320, 324, 327, 332, 335, 338, 340, 341, 349, 351, 354, 358, 360, 363, 365, 367, 368, 370, 372, 373, 374, 396, 399, 400, 401, 403, 408, 412, 413, 423, 424, 430, 482, 485, 486, 488, 490, 494, 508, 509, 510, 511, 525, 561, 562, 570, 571, 586, 589, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 619, 620, 621, 623, 624, 625, 627, 628, 629, 631, 632, 633, 634, 635, 638, 641, 643, 645, 646, 652, 673, 680, 747, 761, 791, 792, 793, 795, 797, 798, 799, 800, 801, 806, 807, 825, 837, 841, 842, 849, 850, 851, 852, 853, 854, 855, 924, 925, 926, 927, 928, 932, 933, 934, 935, 936, 937, 946, 947, 948, 952, 956, 962, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 987, 988], "few": [7, 14, 18, 35, 42, 48, 89, 108, 138, 141, 142, 168, 177, 179, 197, 212, 221, 237, 238, 242, 270, 273, 277, 281, 282, 283, 284, 285, 286, 288, 307, 313, 324, 333, 334, 335, 338, 340, 350, 352, 357, 360, 361, 363, 367, 368, 372, 373, 389, 400, 512, 513, 539, 542, 606, 643, 646, 842, 886, 900, 928, 929, 931, 932, 935, 936, 945, 947, 948, 956, 958, 965, 966, 967, 979], "drawn": [7, 48, 73, 102, 132, 135, 144, 150, 216, 242, 257, 334, 363, 369, 370, 373, 375, 420, 421, 422, 423, 424, 425, 426, 427, 466, 474, 484, 506, 507, 514, 562, 578, 583, 592, 785, 841, 842, 859, 860, 928, 942, 944, 976], "boost": [7, 97, 98, 99, 100, 104, 115, 118, 121, 148, 279, 344, 351, 372, 399, 417, 418, 447, 452, 455, 466, 471, 504, 505, 510, 511, 512, 513, 583, 584, 585, 586, 691, 692, 698, 700, 750, 751, 752, 772, 775, 810, 822, 823, 928, 932, 952, 954, 969, 973, 974, 976, 978, 979, 980, 982, 986], "detriment": [7, 132, 325, 372, 928], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 52, 55, 60, 62, 67, 69, 73, 83, 108, 147, 154, 179, 207, 209, 216, 221, 238, 246, 274, 278, 279, 291, 311, 312, 963], "add_subplot": [7, 15, 23, 25, 38, 41, 59, 62, 81, 91, 92, 98, 152, 176, 194, 201, 203, 288, 289, 345], "111": [7, 8, 15, 62, 81, 91, 92, 98, 176, 194, 203, 253, 801, 976], "line1": [7, 12, 202], "tab": [7, 49, 115, 118, 135, 140, 142, 167, 168, 282, 364, 980], "blue": [7, 19, 20, 24, 31, 83, 85, 102, 105, 113, 115, 118, 120, 131, 140, 142, 156, 159, 167, 168, 175, 177, 202, 210, 229, 230, 235, 269, 278, 282, 290, 335, 363, 368], "set_xlabel": [7, 10, 41, 49, 55, 66, 67, 69, 81, 83, 90, 98, 144, 146, 147, 150, 152, 153, 156, 168, 174, 176, 177, 179, 181, 194, 195, 211, 215, 235, 237, 241, 246, 247, 258, 273, 274, 278, 291, 312, 313, 315], "y1_label": 7, "set_ylabel": [7, 8, 10, 41, 49, 55, 60, 66, 67, 69, 73, 81, 83, 90, 96, 98, 105, 144, 152, 156, 168, 170, 174, 176, 177, 179, 181, 194, 211, 215, 221, 235, 237, 241, 246, 247, 252, 258, 273, 274, 278, 281, 291, 307, 312, 315, 963], "spine": [7, 14, 190, 273], "set_color": [7, 190], "get_color": 7, "yaxi": [7, 10, 41, 55, 81, 91, 92, 176, 199, 201, 204, 221, 253, 258, 311], "tick_param": [7, 14, 121, 221, 235, 277, 291], "ax2": [7, 52, 55, 60, 62, 73, 83, 108, 147, 154, 179, 207, 216, 221, 238, 246, 263, 274, 278, 279, 291, 311], "frameon": [7, 185], "line2": [7, 12, 202, 308], "orang": [7, 49, 83, 86, 87, 93, 113, 115, 142, 147, 167, 168, 189, 213, 224, 256, 264, 282, 318, 933], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 15, 23, 56, 146, 179, 181, 219, 230, 237, 275, 292, 311, 312, 313, 345, 349, 822], "prediction_perform": 7, "deduc": 7, "guarante": [7, 8, 73, 74, 151, 187, 210, 252, 253, 273, 312, 320, 326, 332, 346, 347, 363, 367, 368, 371, 487, 596, 609, 610, 619, 623, 625, 627, 629, 638, 645, 764, 767, 789, 790, 827, 829, 842, 843, 856, 924, 928, 929, 931, 935, 940, 944, 948, 966, 983], "aspect": [7, 53, 78, 85, 139, 152, 199, 206, 262, 305, 324, 325, 326, 338, 351, 363, 609, 610, 948, 956], "plot_model_complexity_influ": 7, "doesn": [8, 179, 222, 270, 299, 346, 351, 363, 371, 372, 376, 386, 426, 583, 584, 617, 619, 627, 667, 781, 791, 792, 806, 931, 932, 948, 977], "t": [8, 11, 12, 15, 16, 24, 27, 31, 35, 36, 38, 39, 40, 48, 50, 53, 66, 71, 72, 73, 75, 77, 83, 86, 87, 91, 93, 95, 96, 98, 99, 102, 103, 109, 110, 111, 112, 113, 117, 118, 133, 136, 138, 139, 140, 143, 144, 148, 151, 152, 153, 154, 158, 160, 166, 173, 176, 177, 178, 179, 180, 197, 198, 200, 201, 202, 203, 213, 222, 225, 227, 234, 235, 253, 265, 266, 270, 281, 284, 285, 288, 289, 291, 295, 296, 299, 300, 303, 304, 307, 312, 313, 318, 319, 320, 324, 325, 332, 333, 335, 338, 340, 342, 344, 346, 349, 350, 351, 354, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 376, 380, 384, 386, 389, 398, 399, 401, 407, 414, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 446, 447, 464, 465, 466, 470, 471, 476, 481, 483, 485, 492, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 520, 521, 541, 542, 545, 558, 559, 561, 562, 578, 579, 581, 582, 583, 584, 586, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 643, 647, 655, 661, 667, 668, 676, 686, 687, 705, 706, 707, 717, 738, 739, 742, 743, 747, 750, 751, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 795, 796, 799, 800, 805, 806, 807, 815, 820, 822, 823, 829, 830, 842, 844, 845, 849, 850, 851, 852, 854, 855, 857, 858, 859, 860, 886, 896, 921, 926, 928, 931, 932, 933, 934, 935, 936, 937, 938, 939, 942, 946, 947, 948, 955, 958, 965, 966, 967, 968, 969, 974, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989], "memori": [8, 50, 66, 89, 109, 255, 281, 283, 285, 286, 312, 313, 325, 326, 332, 338, 341, 347, 351, 364, 367, 368, 371, 374, 375, 393, 394, 395, 396, 397, 398, 400, 401, 405, 408, 410, 419, 424, 430, 447, 454, 459, 484, 485, 486, 489, 506, 507, 508, 509, 514, 515, 516, 532, 533, 539, 540, 542, 597, 598, 599, 603, 604, 609, 610, 611, 612, 613, 614, 617, 619, 620, 627, 628, 629, 630, 631, 632, 635, 728, 729, 730, 731, 747, 753, 761, 770, 771, 772, 773, 776, 777, 778, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 809, 810, 827, 829, 839, 840, 842, 847, 849, 850, 857, 858, 859, 860, 870, 901, 917, 928, 934, 935, 942, 944, 945, 947, 948, 952, 953, 956, 958, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "onlin": [8, 14, 32, 85, 88, 148, 157, 193, 326, 333, 337, 343, 351, 363, 368, 371, 373, 394, 398, 400, 446, 453, 482, 487, 488, 489, 490, 496, 497, 533, 535, 609, 617, 618, 619, 627, 629, 775, 784, 785, 786, 787, 788, 791, 792, 797, 799, 800, 818, 819, 829, 849, 850, 924, 928, 936, 938, 951, 954, 956, 965, 969, 973, 977, 978, 980, 988], "partial_fit": [8, 46, 85, 285, 326, 340, 351, 363, 368, 394, 400, 485, 487, 488, 489, 540, 548, 609, 610, 617, 618, 619, 627, 628, 629, 777, 778, 781, 782, 784, 785, 786, 787, 788, 805, 806, 807, 818, 819, 829, 849, 928, 934, 936, 973, 975, 976, 977, 978, 979, 980, 981, 984, 986, 987, 988], "fed": [8, 118, 320, 333, 371, 921, 937, 942, 984], "batch": [8, 11, 59, 85, 89, 266, 285, 326, 347, 351, 371, 392, 394, 398, 400, 402, 404, 482, 484, 485, 487, 488, 489, 490, 491, 493, 494, 496, 497, 615, 636, 637, 752, 765, 766, 784, 785, 786, 787, 788, 806, 807, 818, 819, 829, 830, 842, 889, 898, 936, 937, 946, 973, 977, 978, 981, 982, 983, 984, 986, 988, 989], "remain": [8, 23, 25, 65, 105, 110, 112, 132, 151, 179, 195, 221, 233, 237, 241, 244, 360, 364, 365, 367, 371, 415, 418, 466, 467, 472, 479, 485, 521, 561, 562, 650, 713, 719, 749, 750, 751, 752, 755, 757, 784, 785, 786, 788, 890, 921, 922, 931, 932, 936, 942, 948, 953, 975, 981, 987], "hashingvector": [8, 313, 326, 440, 539, 541, 974, 980, 981, 982, 983, 986], "where": [8, 11, 12, 13, 15, 16, 18, 22, 23, 24, 29, 49, 52, 73, 78, 83, 85, 88, 91, 95, 96, 98, 101, 103, 108, 109, 111, 115, 130, 133, 135, 141, 144, 147, 151, 158, 163, 171, 180, 188, 189, 190, 192, 196, 197, 199, 201, 202, 206, 207, 210, 213, 217, 227, 231, 232, 235, 237, 241, 242, 244, 246, 247, 271, 273, 275, 276, 277, 278, 279, 281, 283, 284, 289, 290, 297, 307, 308, 309, 315, 316, 320, 324, 325, 326, 332, 334, 335, 337, 338, 340, 342, 344, 345, 346, 349, 350, 351, 354, 357, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 384, 389, 396, 398, 399, 403, 412, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 447, 482, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 533, 534, 535, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 560, 561, 562, 564, 566, 570, 573, 574, 576, 578, 579, 580, 581, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 639, 642, 643, 644, 647, 650, 658, 663, 667, 675, 679, 680, 681, 689, 692, 705, 713, 718, 719, 720, 723, 731, 732, 733, 734, 737, 740, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 762, 763, 764, 765, 766, 767, 768, 770, 772, 773, 774, 776, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 792, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 812, 819, 822, 824, 825, 828, 829, 835, 837, 843, 844, 845, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 877, 878, 879, 880, 886, 917, 921, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 946, 947, 948, 953, 955, 958, 959, 973, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "word": [8, 14, 18, 64, 135, 210, 213, 299, 312, 313, 324, 333, 334, 338, 340, 343, 351, 360, 363, 365, 366, 367, 368, 404, 462, 474, 485, 487, 492, 539, 540, 542, 647, 778, 788, 846, 926, 930, 934, 937, 942, 945, 946, 956, 965, 966, 973, 981], "federicov": 8, "itertool": [8, 38, 40, 57, 119, 152, 164, 222, 227, 235, 242, 244, 370], "pathlib": [8, 988], "path": [8, 15, 16, 148, 157, 164, 168, 315, 332, 336, 338, 342, 346, 347, 351, 393, 397, 401, 437, 438, 439, 450, 451, 452, 454, 455, 456, 459, 460, 499, 508, 509, 514, 515, 516, 517, 544, 545, 548, 597, 598, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 632, 633, 634, 635, 636, 637, 639, 809, 810, 856, 857, 858, 859, 860, 891, 921, 928, 929, 938, 952, 953, 973, 974, 977, 979, 980, 982, 983, 985, 986, 988, 989], "hashlib": 8, "sha256": [8, 988], "tarfil": 8, "sy": [8, 12, 15, 18, 187, 210, 253, 292, 313, 333, 349, 568], "rcparam": [8, 206, 211], "htmlparser": 8, "urllib": [8, 16], "request": [8, 16, 42, 179, 197, 284, 325, 332, 336, 337, 341, 351, 352, 357, 368, 371, 372, 400, 523, 562, 583, 650, 935, 967, 979, 980, 981], "urlretriev": 8, "get_data_hom": 8, "feature_extract": [8, 14, 18, 42, 43, 46, 47, 50, 61, 64, 88, 148, 236, 292, 310, 311, 312, 313, 326, 327, 333, 363, 364, 371, 415, 454, 495, 822, 930, 966, 967, 973, 974, 975, 976, 979, 980], "passiveaggressiveclassifi": [8, 186, 324, 326, 928, 933, 974, 977, 978, 980, 981, 984, 986], "perceptron": [8, 148, 152, 186, 189, 195, 216, 267, 326, 349, 371, 465, 466, 473, 617, 627, 775, 805, 806, 807, 810, 829, 930, 933, 937, 946, 954, 969, 977, 979, 980, 981, 985], "naive_bay": [8, 22, 23, 25, 28, 116, 120, 236, 237, 311, 320, 326, 327, 333, 364, 370, 389, 520, 810, 926, 933, 934, 967, 974, 975, 977, 978, 979, 980], "multinomialnb": [8, 326, 333, 364, 371, 784, 785, 786, 787, 934, 967, 975, 977, 980, 981, 985, 986, 988], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 15, 65, 114, 138, 141, 143, 151, 152, 179, 197, 200, 207, 233, 273, 319, 320, 325, 333, 336, 337, 338, 340, 342, 343, 344, 351, 363, 364, 365, 367, 368, 370, 372, 375, 392, 394, 402, 404, 405, 410, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 438, 439, 442, 443, 447, 448, 454, 459, 460, 465, 473, 478, 482, 483, 488, 489, 490, 491, 493, 496, 497, 499, 503, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 532, 539, 540, 541, 542, 548, 553, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 580, 582, 583, 584, 586, 587, 588, 589, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 641, 645, 646, 648, 649, 651, 653, 655, 663, 692, 711, 717, 724, 728, 732, 739, 747, 750, 751, 752, 753, 761, 765, 766, 769, 772, 773, 775, 778, 780, 783, 784, 785, 786, 788, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 806, 807, 813, 830, 836, 849, 850, 851, 852, 853, 854, 855, 861, 863, 867, 869, 870, 871, 873, 885, 886, 905, 916, 920, 921, 922, 927, 928, 932, 937, 938, 944, 946, 947, 956, 980, 981, 982], "builder": [8, 10, 342], "__file__": [8, 10, 986], "global": [8, 10, 38, 52, 85, 179, 199, 200, 219, 244, 270, 282, 320, 324, 325, 344, 349, 351, 363, 373, 394, 403, 413, 419, 541, 577, 583, 639, 642, 643, 646, 658, 679, 680, 688, 733, 734, 737, 738, 765, 830, 845, 847, 900, 902, 921, 929, 932, 938, 942, 948, 956, 981, 988], "21578": [8, 986], "uci": [8, 278, 332, 335, 451, 453, 455, 461], "ml": [8, 332, 335, 343, 451, 453, 461, 928, 930, 952, 953, 956], "uncompress": [8, 459, 460, 967], "reuterspars": 8, "util": [8, 10, 11, 44, 51, 56, 80, 118, 179, 181, 187, 195, 201, 209, 214, 224, 241, 243, 253, 275, 281, 291, 299, 311, 325, 327, 332, 333, 336, 338, 339, 340, 341, 349, 350, 351, 359, 363, 364, 367, 368, 371, 404, 419, 522, 523, 524, 528, 621, 650, 747, 769, 775, 776, 816, 921, 927, 930, 932, 933, 942, 943, 952, 956, 959, 969, 973, 974, 976, 977, 979, 980], "pars": [8, 16, 324, 332, 333, 339, 459], "sgml": [8, 324], "file": [8, 12, 15, 29, 44, 324, 326, 332, 333, 335, 336, 338, 342, 343, 344, 346, 349, 357, 364, 368, 438, 444, 445, 447, 454, 459, 460, 485, 530, 531, 539, 540, 542, 861, 935, 948, 952, 955, 959, 973, 974, 976, 979, 980, 981, 982, 985, 986, 987, 988], "yield": [8, 9, 23, 41, 71, 72, 73, 74, 109, 111, 174, 179, 194, 197, 240, 252, 268, 273, 296, 301, 311, 312, 320, 324, 326, 332, 343, 351, 360, 363, 365, 367, 368, 370, 371, 372, 373, 389, 400, 419, 423, 459, 460, 488, 489, 490, 492, 497, 504, 505, 510, 511, 512, 513, 518, 519, 545, 553, 598, 602, 603, 604, 606, 612, 614, 616, 624, 626, 637, 650, 676, 731, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 773, 774, 776, 780, 783, 841, 842, 880, 887, 889, 890, 924, 926, 928, 929, 932, 947, 948, 962, 978, 979, 981, 984, 986], "__init__": [8, 15, 51, 143, 253, 299, 338, 340, 342, 343, 344, 345, 351, 371, 377, 893, 974, 979, 981, 986, 987, 988, 989], "self": [8, 15, 18, 23, 25, 51, 143, 148, 253, 287, 293, 299, 332, 338, 339, 340, 343, 344, 345, 346, 363, 371, 373, 377, 380, 384, 385, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 451, 459, 460, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 654, 745, 746, 747, 750, 751, 761, 766, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 893, 898, 906, 935, 953, 954, 956, 969, 975, 980, 987], "latin": [8, 371], "_reset": 8, "handle_starttag": 8, "tag": [8, 45, 65, 206, 290, 332, 337, 341, 342, 346, 349, 351, 371, 447, 777, 953, 955, 978, 982, 983, 984, 987, 988, 989], "attr": [8, 51], "start_": 8, "getattr": [8, 273, 340, 351], "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 64, 216, 286, 335], "topic_d": 8, "fd": 8, "chunk": [8, 46, 324, 325, 363, 368, 374, 396, 400, 419, 489, 728, 731, 777, 778, 784, 785, 786, 787, 788, 847, 934, 980, 981, 982, 983, 984], "feed": [8, 78, 180, 313, 333, 343, 349, 363, 371, 822, 933], "decod": [8, 266, 333, 351, 454, 520, 539, 540, 542, 973, 974], "close": [8, 12, 16, 22, 23, 25, 34, 35, 42, 50, 55, 61, 71, 72, 75, 90, 102, 108, 111, 114, 118, 135, 136, 140, 142, 151, 153, 185, 200, 206, 212, 215, 221, 227, 235, 236, 259, 260, 273, 281, 299, 304, 312, 320, 333, 338, 340, 346, 349, 351, 352, 361, 362, 363, 366, 367, 370, 373, 401, 406, 423, 459, 460, 483, 514, 579, 594, 598, 612, 623, 625, 638, 656, 696, 745, 765, 766, 784, 785, 786, 788, 795, 870, 921, 925, 926, 928, 929, 931, 932, 933, 935, 938, 939, 942, 947, 956, 965, 976, 980, 981, 982], "handle_data": 8, "start_reut": 8, "attribut": [8, 23, 29, 45, 65, 94, 105, 106, 109, 129, 133, 179, 187, 215, 226, 233, 234, 239, 247, 262, 266, 284, 313, 319, 326, 327, 331, 332, 333, 335, 338, 341, 345, 349, 359, 360, 361, 363, 364, 365, 366, 368, 370, 371, 372, 373, 378, 379, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 461, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 648, 649, 651, 652, 653, 686, 743, 745, 746, 747, 750, 751, 753, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 893, 916, 926, 928, 933, 935, 936, 938, 942, 945, 946, 947, 948, 956, 958, 964, 967, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "end_reut": 8, "sub": [8, 33, 44, 49, 52, 55, 64, 95, 214, 221, 283, 288, 289, 296, 299, 308, 333, 338, 340, 344, 364, 370, 371, 487, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 622, 928, 932, 946, 967, 983, 987], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 14, 16, 28, 42, 66, 75, 85, 88, 99, 102, 107, 109, 110, 112, 113, 133, 146, 148, 158, 159, 187, 194, 223, 224, 228, 230, 246, 268, 275, 283, 289, 291, 299, 338, 340, 344, 346, 347, 350, 351, 358, 363, 366, 368, 370, 372, 375, 389, 392, 393, 395, 397, 398, 399, 400, 403, 405, 410, 412, 413, 414, 422, 423, 429, 433, 434, 435, 466, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 504, 505, 510, 511, 512, 513, 515, 518, 519, 532, 533, 539, 540, 542, 544, 545, 553, 561, 578, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 780, 783, 798, 805, 806, 807, 808, 809, 813, 820, 822, 824, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 864, 885, 886, 892, 898, 922, 928, 929, 931, 932, 935, 936, 937, 945, 946, 947, 948, 953, 956, 962, 966, 967, 969, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989], "archiv": [8, 332, 333, 335, 336, 357, 363, 394, 453, 461, 708, 709, 930, 947, 967], "exist": [8, 9, 16, 18, 49, 197, 235, 270, 273, 332, 337, 340, 341, 344, 349, 351, 352, 354, 357, 363, 367, 368, 370, 371, 373, 378, 386, 389, 402, 404, 419, 450, 500, 506, 507, 508, 509, 515, 516, 536, 540, 548, 554, 583, 584, 596, 627, 628, 629, 631, 649, 651, 653, 712, 715, 719, 748, 749, 752, 754, 755, 756, 757, 760, 762, 763, 764, 765, 766, 767, 768, 794, 809, 814, 822, 823, 916, 924, 929, 931, 932, 936, 938, 939, 942, 952, 956, 966, 973, 980, 982, 983, 984, 985, 986, 987, 988, 989], "str": [8, 10, 15, 53, 55, 94, 96, 107, 197, 215, 235, 247, 253, 263, 297, 311, 332, 333, 347, 371, 374, 375, 379, 383, 390, 391, 393, 394, 395, 396, 397, 398, 400, 401, 403, 408, 415, 416, 417, 418, 419, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 502, 512, 513, 517, 518, 519, 520, 521, 527, 532, 533, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 568, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 610, 617, 618, 622, 624, 626, 627, 629, 639, 640, 643, 647, 648, 649, 650, 651, 653, 658, 660, 662, 664, 677, 679, 680, 682, 683, 688, 707, 721, 724, 728, 729, 730, 731, 732, 733, 734, 737, 739, 740, 741, 747, 750, 751, 753, 758, 759, 761, 770, 771, 772, 773, 774, 776, 781, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 847, 861, 862, 863, 865, 868, 869, 870, 873, 876, 878, 882, 895, 916, 917, 920, 988], "kei": [8, 9, 10, 16, 18, 38, 108, 118, 146, 150, 197, 218, 236, 238, 239, 282, 283, 284, 285, 286, 326, 331, 340, 343, 344, 345, 349, 351, 354, 363, 364, 367, 373, 415, 423, 512, 513, 518, 519, 520, 521, 539, 542, 545, 568, 577, 583, 584, 585, 610, 747, 750, 751, 759, 761, 772, 808, 809, 864, 874, 897, 953, 967, 970, 979, 985, 986, 988, 989], "download_url": 8, "ic": [8, 152, 283, 332, 335, 353, 453, 461, 583, 584, 969, 985, 986], "databas": [8, 278, 324, 326, 333, 335, 363, 368, 370, 371, 374, 394, 396, 461, 506, 507, 842, 944], "reuters21578": 8, "mld": 8, "tar": [8, 342], "gz": [8, 342, 354, 459, 460], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "els": [8, 11, 12, 15, 18, 37, 40, 45, 51, 57, 75, 89, 102, 107, 111, 143, 151, 152, 168, 181, 197, 200, 206, 210, 212, 213, 214, 235, 236, 239, 246, 253, 258, 266, 268, 269, 275, 311, 312, 319, 338, 342, 344, 370, 371, 373, 375, 389, 400, 459, 471, 484, 520, 576, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 621, 623, 624, 625, 627, 630, 632, 633, 634, 635, 654, 660, 718, 738, 742, 744, 750, 751, 775, 813, 822, 825, 836, 849, 850, 864, 894, 896, 898, 919, 948], "mkdir": [8, 344, 346], "parent": [8, 150, 338, 342, 351, 363, 394, 414, 973], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 210, 311, 313, 333, 344, 851, 852, 853, 854, 855, 947], "1e6": [8, 10, 172, 210, 311, 313, 324, 487, 843, 932, 944], "current_sz_mb": 8, "stdout": [8, 85, 187, 778, 798, 806, 807], "write": [8, 16, 147, 324, 325, 332, 336, 337, 341, 342, 343, 344, 346, 347, 349, 351, 354, 364, 368, 371, 943, 953, 967, 974, 986], "rdownload": 8, "archive_path": 8, "filenam": [8, 16, 292, 333, 344, 357, 439, 451, 454, 455, 458, 539, 540, 542, 967, 973, 978, 981, 982], "reporthook": 8, "tamper": 8, "assert": [8, 16, 44, 86, 210, 235, 244, 325, 341, 953], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 16, 201, 332, 333, 337, 338, 342, 344, 349, 350, 352, 354, 357, 364, 371, 438, 447, 459, 460, 922, 956, 961, 976, 980, 981, 983], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 371, 454, 539, 540, 542, 975], "alternate_sign": [8, 371, 533, 540, 980], "data_stream": 8, "binari": [8, 13, 23, 25, 98, 103, 114, 116, 130, 143, 151, 156, 170, 172, 179, 187, 200, 207, 218, 232, 233, 238, 244, 250, 252, 257, 299, 305, 319, 320, 332, 333, 334, 340, 342, 343, 351, 354, 357, 360, 361, 362, 363, 370, 371, 373, 389, 390, 391, 403, 438, 451, 459, 460, 471, 474, 500, 501, 504, 506, 510, 512, 513, 517, 518, 519, 532, 539, 540, 542, 544, 545, 553, 561, 578, 579, 580, 581, 583, 584, 609, 610, 617, 619, 624, 625, 626, 627, 651, 654, 658, 659, 660, 663, 664, 666, 669, 671, 677, 679, 680, 684, 685, 688, 689, 690, 691, 692, 693, 732, 733, 734, 737, 738, 739, 742, 744, 747, 748, 750, 751, 752, 753, 761, 765, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 784, 795, 805, 816, 820, 822, 830, 833, 849, 851, 854, 895, 922, 933, 934, 935, 936, 937, 939, 940, 942, 943, 944, 946, 947, 948, 955, 958, 970, 974, 976, 977, 978, 980, 981, 982, 983, 987, 988], "acq": 8, "chosen": [8, 42, 67, 118, 136, 151, 152, 168, 180, 183, 196, 213, 229, 230, 232, 238, 312, 320, 324, 349, 363, 365, 366, 370, 373, 392, 400, 402, 404, 405, 411, 447, 474, 486, 508, 509, 510, 511, 515, 516, 598, 604, 607, 609, 610, 612, 614, 622, 627, 628, 629, 630, 631, 641, 645, 742, 745, 746, 747, 750, 751, 761, 779, 798, 849, 857, 858, 859, 860, 886, 921, 924, 926, 928, 929, 931, 933, 938, 939, 946, 962, 963, 965, 966, 981], "evenli": [8, 35, 48, 111, 230, 371, 890, 967], "care": [8, 112, 324, 326, 342, 344, 349, 351, 352, 363, 365, 371, 389, 411, 420, 591, 609, 610, 617, 619, 627, 628, 629, 646, 849, 929, 947, 956], "all_class": 8, "positive_class": [8, 663], "partial_fit_classifi": 8, "max_it": [8, 14, 16, 23, 27, 28, 66, 67, 85, 88, 104, 120, 123, 125, 146, 147, 151, 152, 165, 171, 172, 186, 187, 188, 191, 192, 194, 199, 200, 201, 202, 216, 217, 221, 223, 224, 227, 248, 263, 268, 269, 270, 279, 283, 284, 285, 288, 289, 296, 311, 312, 344, 351, 370, 375, 392, 395, 398, 399, 400, 405, 410, 412, 422, 423, 429, 433, 434, 435, 482, 483, 484, 486, 487, 488, 489, 490, 491, 494, 496, 497, 498, 499, 512, 513, 578, 589, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 623, 625, 627, 628, 629, 630, 631, 633, 634, 638, 639, 640, 641, 644, 645, 745, 746, 761, 798, 806, 807, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 922, 924, 928, 935, 936, 945, 946, 963, 967, 974, 977, 980, 981, 982, 983, 985, 987, 988], "nb": [8, 93, 116, 320, 786, 934], "multinomi": [8, 27, 148, 157, 194, 213, 230, 244, 333, 334, 338, 368, 370, 447, 463, 474, 502, 504, 510, 512, 520, 609, 610, 691, 775, 783, 784, 785, 786, 787, 788, 829, 872, 932, 933, 948, 954, 967, 969, 973, 977, 979, 980, 981, 986, 987], "passiv": [8, 186, 617, 618, 954, 969, 974], "aggress": [8, 186, 617, 618, 750, 751, 954, 969, 974], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 40, 363, 368, 400, 485, 627, 805, 806, 807, 952, 973], "tupl": [8, 44, 45, 95, 152, 197, 331, 332, 333, 340, 351, 367, 375, 386, 402, 404, 415, 418, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 455, 456, 459, 461, 462, 463, 464, 465, 473, 484, 497, 512, 513, 518, 519, 520, 521, 533, 534, 535, 538, 539, 540, 542, 578, 583, 584, 585, 663, 670, 731, 733, 745, 747, 761, 772, 789, 790, 808, 809, 819, 820, 824, 827, 835, 839, 851, 852, 853, 854, 855, 864, 870, 871, 873, 877, 878, 879, 880, 899, 916, 939, 979, 980, 984, 985, 986], "x_text": 8, "befor": [8, 12, 23, 38, 64, 66, 69, 78, 118, 129, 142, 144, 145, 148, 151, 152, 154, 160, 167, 168, 172, 235, 242, 255, 274, 277, 278, 284, 302, 320, 324, 325, 333, 336, 338, 340, 341, 343, 344, 346, 347, 349, 351, 352, 353, 357, 361, 363, 364, 365, 367, 368, 372, 375, 376, 395, 398, 399, 400, 410, 412, 416, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 441, 452, 485, 488, 489, 490, 491, 492, 495, 497, 498, 512, 513, 516, 518, 520, 521, 528, 539, 540, 542, 562, 578, 579, 581, 601, 602, 605, 606, 607, 615, 616, 617, 618, 619, 622, 627, 629, 638, 643, 645, 650, 745, 746, 752, 753, 765, 766, 768, 771, 773, 775, 789, 790, 797, 798, 799, 800, 801, 804, 809, 810, 813, 816, 823, 827, 828, 829, 830, 834, 835, 837, 838, 839, 840, 846, 857, 858, 886, 916, 922, 928, 929, 932, 938, 942, 946, 947, 948, 953, 967, 973, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "exclud": [8, 18, 150, 273, 338, 342, 351, 415, 417, 679, 680, 688, 733, 734, 737, 760, 768, 824, 907, 932, 935, 982, 989], "invalid": [8, 179, 351, 529, 622, 663, 724, 928, 932, 979, 981, 983, 984, 986, 987], "assign": [8, 16, 33, 42, 45, 52, 53, 55, 104, 114, 116, 129, 137, 192, 197, 206, 211, 213, 268, 275, 293, 307, 312, 333, 338, 340, 351, 360, 367, 368, 370, 371, 372, 373, 392, 393, 394, 395, 397, 398, 399, 400, 403, 405, 407, 410, 411, 412, 413, 466, 487, 512, 513, 544, 545, 558, 559, 561, 609, 610, 617, 618, 619, 627, 628, 629, 655, 656, 666, 667, 668, 671, 681, 689, 693, 705, 707, 736, 741, 742, 743, 747, 750, 751, 753, 756, 761, 770, 771, 772, 773, 776, 793, 799, 801, 802, 803, 816, 844, 845, 849, 850, 851, 852, 853, 854, 855, 926, 931, 932, 933, 934, 935, 936, 937, 942, 945, 956, 958, 967, 973, 978, 980, 981], "format": [8, 11, 12, 18, 19, 20, 44, 53, 56, 64, 73, 85, 95, 102, 107, 110, 112, 123, 128, 129, 154, 156, 159, 165, 170, 179, 197, 230, 240, 242, 243, 246, 249, 257, 258, 261, 262, 277, 281, 306, 315, 319, 324, 331, 337, 338, 340, 341, 346, 347, 350, 351, 364, 367, 370, 371, 385, 394, 395, 397, 398, 400, 401, 403, 410, 415, 419, 433, 434, 435, 436, 438, 440, 447, 448, 449, 459, 460, 461, 474, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 502, 508, 509, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 535, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 597, 603, 609, 610, 611, 613, 617, 619, 627, 628, 629, 639, 640, 643, 648, 664, 671, 689, 690, 701, 718, 740, 778, 791, 792, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 836, 841, 842, 847, 849, 861, 869, 870, 891, 894, 898, 903, 906, 908, 909, 910, 911, 912, 913, 922, 932, 935, 940, 942, 943, 946, 948, 952, 958, 959, 969, 973, 974, 975, 976, 978, 979, 980, 981, 982, 984, 986, 988], "islic": [8, 40, 57], "asarrai": [8, 16, 179, 197, 271, 290, 311, 312, 340, 351, 359, 536, 537, 676, 706, 797, 799, 800, 801, 942, 947], "dtype": [8, 10, 11, 16, 44, 45, 49, 60, 64, 65, 110, 112, 113, 114, 136, 137, 138, 147, 181, 197, 215, 221, 239, 243, 260, 266, 285, 289, 319, 332, 333, 338, 340, 349, 351, 364, 367, 378, 381, 394, 395, 398, 399, 400, 401, 402, 404, 415, 417, 418, 420, 423, 425, 439, 440, 441, 442, 447, 448, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 465, 473, 493, 508, 509, 510, 511, 514, 515, 516, 517, 532, 533, 536, 537, 539, 540, 542, 544, 545, 553, 557, 578, 579, 580, 581, 583, 584, 591, 592, 595, 596, 597, 603, 607, 608, 611, 612, 613, 614, 615, 616, 622, 624, 626, 648, 665, 666, 688, 691, 705, 736, 753, 770, 772, 773, 785, 789, 790, 792, 800, 814, 820, 822, 823, 829, 830, 843, 851, 852, 853, 854, 855, 857, 858, 859, 860, 866, 867, 869, 870, 897, 907, 908, 909, 910, 913, 919, 922, 942, 945, 947, 958, 974, 976, 977, 981, 982, 983, 984, 985, 986, 987, 988, 989], "int": [8, 10, 13, 15, 16, 18, 33, 40, 57, 74, 102, 110, 114, 125, 126, 136, 137, 138, 144, 147, 150, 160, 170, 172, 179, 197, 204, 206, 212, 215, 221, 230, 233, 234, 235, 253, 258, 260, 266, 289, 313, 333, 338, 340, 349, 351, 361, 364, 367, 371, 374, 375, 378, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 439, 442, 443, 445, 446, 447, 448, 453, 454, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 558, 559, 561, 562, 568, 578, 579, 580, 581, 582, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 652, 653, 654, 655, 656, 658, 660, 664, 668, 676, 677, 679, 680, 681, 684, 686, 687, 688, 706, 707, 719, 724, 725, 728, 729, 730, 731, 732, 733, 734, 737, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 869, 870, 872, 873, 885, 886, 888, 889, 890, 891, 897, 901, 903, 906, 911, 912, 928, 939, 973, 979, 983, 984], "iter_minibatch": 8, "minibatch_s": [8, 326], "statist": [8, 74, 98, 102, 103, 113, 123, 124, 125, 126, 128, 132, 148, 150, 151, 152, 153, 167, 228, 232, 234, 237, 244, 273, 279, 283, 320, 327, 331, 333, 335, 338, 344, 351, 361, 363, 364, 365, 367, 368, 370, 372, 386, 420, 425, 444, 445, 467, 468, 469, 471, 473, 492, 497, 510, 511, 513, 555, 556, 557, 560, 578, 581, 585, 586, 595, 600, 607, 641, 645, 647, 661, 667, 672, 673, 674, 681, 693, 738, 747, 763, 779, 806, 807, 825, 826, 827, 829, 834, 837, 838, 840, 854, 857, 858, 907, 921, 922, 926, 928, 929, 931, 932, 933, 934, 939, 942, 946, 947, 948, 949, 950, 951, 959, 965, 966, 978, 981, 984, 985, 987, 988], "test_stat": 8, "n_test": [8, 10, 30, 102, 235, 973, 976], "n_test_po": 8, "hold": [8, 15, 24, 25, 179, 236, 319, 331, 338, 339, 340, 361, 363, 367, 370, 371, 373, 454, 512, 513, 540, 583, 584, 585, 686, 747, 750, 751, 761, 785, 816, 817, 822, 823, 830, 833, 922, 926, 932, 936, 946, 947, 948, 955, 958, 967, 981, 985], "n_test_docu": 8, "tick": [8, 39, 55, 138, 216, 246, 583, 773], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 16, 18, 24, 56, 74, 83, 88, 95, 110, 111, 129, 143, 151, 160, 166, 175, 179, 194, 197, 200, 202, 244, 253, 260, 263, 285, 292, 304, 307, 311, 312, 313, 319, 335, 344, 351, 360, 361, 362, 363, 365, 366, 368, 369, 370, 371, 373, 384, 394, 395, 398, 400, 410, 415, 416, 433, 434, 435, 466, 471, 474, 482, 485, 487, 488, 492, 495, 496, 497, 500, 501, 503, 505, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 519, 520, 521, 541, 542, 562, 564, 574, 576, 586, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 621, 623, 624, 627, 628, 629, 630, 632, 635, 641, 645, 647, 650, 660, 661, 670, 676, 691, 706, 708, 709, 713, 738, 777, 778, 782, 783, 792, 796, 800, 807, 808, 828, 829, 849, 850, 852, 855, 857, 858, 859, 860, 888, 907, 913, 918, 928, 932, 933, 934, 935, 947, 948, 965, 976, 977, 979, 981, 982, 984], "cls_name": [8, 10], "string": [8, 65, 107, 143, 197, 208, 239, 284, 313, 324, 332, 333, 338, 339, 340, 344, 351, 357, 364, 367, 370, 371, 372, 374, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 438, 440, 441, 447, 456, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 532, 533, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 568, 571, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 650, 660, 662, 670, 682, 712, 715, 721, 724, 728, 729, 730, 731, 740, 741, 745, 746, 747, 750, 751, 753, 761, 772, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 867, 869, 870, 877, 878, 879, 896, 900, 916, 917, 921, 922, 932, 945, 947, 958, 965, 973, 974, 975, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "n_train": [8, 10, 30, 102, 235, 973, 976], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 160, 238, 324, 360, 365, 372, 459, 460, 500, 548, 578, 581, 595, 822, 826, 838, 922, 928, 981, 985], "mini": [8, 59, 85, 285, 326, 351, 371, 392, 394, 398, 400, 402, 404, 482, 484, 487, 488, 489, 490, 491, 493, 494, 496, 497, 936, 937, 973, 984, 986], "smaller": [8, 22, 36, 42, 75, 140, 141, 146, 164, 168, 170, 183, 210, 259, 260, 268, 273, 299, 307, 312, 338, 360, 362, 363, 365, 367, 368, 370, 372, 373, 391, 392, 401, 405, 407, 465, 485, 486, 508, 509, 510, 511, 515, 516, 544, 561, 570, 584, 597, 598, 600, 601, 603, 604, 605, 607, 609, 610, 611, 612, 613, 614, 623, 625, 633, 634, 643, 660, 745, 750, 751, 795, 798, 822, 823, 841, 842, 849, 857, 858, 859, 860, 886, 926, 928, 929, 931, 932, 933, 935, 936, 938, 942, 944, 946, 947, 948, 953, 967, 981, 986], "bigger": [8, 36, 55, 192, 235, 271, 309, 312, 323, 325, 371, 390, 391, 459, 489, 795, 962, 969], "overhead": [8, 253, 325, 326, 338, 344, 347, 349, 351, 370, 393, 397, 400, 485, 650, 781, 782, 784, 785, 786, 787, 788, 789, 790, 900, 934, 935, 976, 981, 982, 985], "partial": [8, 12, 46, 76, 115, 148, 149, 197, 205, 283, 286, 335, 351, 353, 365, 366, 368, 370, 373, 415, 433, 434, 435, 436, 447, 452, 485, 487, 492, 513, 540, 583, 584, 608, 738, 775, 777, 778, 805, 806, 807, 810, 822, 823, 826, 829, 858, 929, 936, 946, 967, 969, 970, 974, 981, 982, 986], "stream": [8, 363, 368, 371, 413, 540, 818, 819, 829, 924, 952, 981, 984], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 16, 18, 27, 39, 69, 103, 108, 111, 118, 151, 177, 181, 187, 200, 212, 214, 223, 232, 238, 285, 289, 312, 331, 338, 339, 340, 347, 364, 415, 477, 512, 513, 539, 540, 542, 583, 759, 822, 844, 845, 864, 865, 891, 924, 945, 953, 958], "updat": [8, 15, 40, 57, 99, 113, 211, 281, 313, 336, 337, 338, 342, 346, 351, 363, 368, 370, 377, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 414, 416, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 745, 746, 747, 750, 751, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 864, 907, 928, 935, 936, 937, 946, 955, 956, 974, 980, 981, 982, 984, 986, 988, 989], "accumul": [8, 46, 105, 106, 168, 342, 344, 363, 371, 932, 974, 981], "acc_histori": 8, "run_histori": 8, "curv": [8, 11, 21, 33, 69, 71, 102, 104, 110, 148, 157, 158, 169, 179, 197, 199, 201, 204, 205, 207, 215, 216, 220, 228, 235, 245, 269, 281, 317, 345, 358, 362, 367, 369, 389, 390, 391, 453, 461, 466, 472, 476, 515, 583, 596, 609, 649, 651, 653, 657, 658, 659, 660, 677, 679, 691, 692, 732, 734, 737, 738, 739, 745, 746, 753, 764, 773, 775, 776, 787, 810, 829, 849, 854, 928, 929, 931, 932, 938, 948, 954, 956, 969, 970, 975, 976, 979, 983, 985, 986, 987, 988, 989], "evolut": [8, 10, 247, 324, 326, 497], "cours": [8, 9, 156, 324, 338, 340, 368, 371, 372, 922, 927, 928, 956], "valid": [8, 13, 24, 50, 51, 65, 68, 71, 75, 93, 103, 107, 108, 109, 110, 111, 122, 127, 131, 133, 143, 148, 151, 153, 157, 167, 179, 181, 187, 197, 214, 223, 226, 228, 232, 235, 236, 237, 239, 241, 243, 244, 249, 257, 271, 274, 279, 281, 283, 291, 299, 307, 315, 325, 333, 338, 341, 349, 350, 351, 357, 358, 361, 363, 364, 365, 368, 369, 370, 371, 372, 373, 379, 389, 394, 395, 397, 398, 400, 401, 408, 414, 415, 419, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 444, 452, 453, 455, 466, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 523, 526, 528, 533, 534, 540, 544, 545, 548, 553, 583, 585, 589, 590, 591, 592, 593, 594, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 639, 640, 643, 650, 652, 657, 664, 678, 712, 715, 724, 728, 729, 730, 735, 740, 741, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 780, 783, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 813, 815, 821, 829, 830, 841, 842, 844, 845, 847, 849, 851, 854, 856, 857, 858, 859, 860, 869, 870, 873, 880, 892, 922, 931, 932, 933, 936, 940, 942, 944, 946, 947, 948, 952, 953, 956, 958, 961, 969, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "consumpt": [8, 324, 485, 508, 509, 515, 516, 747, 761, 770, 771, 772, 857, 858, 859, 860, 898, 958, 973, 975, 979, 981, 982, 987], "queue": [8, 935, 976], "up": [8, 11, 33, 40, 42, 43, 44, 48, 52, 57, 64, 73, 74, 80, 83, 104, 147, 152, 158, 172, 180, 195, 196, 215, 223, 237, 240, 253, 266, 271, 274, 279, 285, 289, 296, 313, 326, 332, 333, 338, 342, 344, 345, 346, 347, 349, 351, 352, 361, 363, 368, 370, 371, 395, 398, 399, 400, 401, 403, 407, 410, 411, 412, 459, 460, 487, 500, 501, 508, 509, 510, 511, 512, 513, 515, 516, 517, 561, 578, 583, 584, 590, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 613, 614, 615, 632, 633, 634, 635, 643, 656, 719, 745, 746, 749, 750, 751, 753, 773, 823, 824, 827, 839, 857, 858, 859, 860, 863, 886, 889, 890, 921, 928, 929, 932, 935, 942, 946, 947, 953, 955, 956, 966, 967, 973, 974, 976, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989], "amount": [8, 12, 41, 49, 61, 71, 74, 85, 89, 100, 102, 141, 151, 197, 211, 283, 288, 291, 293, 299, 307, 313, 324, 325, 326, 349, 362, 363, 365, 368, 370, 371, 372, 395, 405, 420, 489, 490, 492, 494, 514, 547, 597, 598, 601, 602, 603, 604, 605, 606, 607, 611, 612, 613, 614, 616, 632, 635, 643, 750, 751, 789, 790, 795, 830, 845, 846, 859, 860, 927, 928, 931, 934, 936, 942, 944, 945, 946, 947, 965, 966, 986], "learner": [8, 98, 100, 109, 118, 326, 508, 509, 510, 511, 515, 516, 517, 533, 540, 581, 791, 792, 797, 799, 800, 934, 937, 948, 952, 953, 967], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 40, 57, 78, 138, 183, 184, 188, 190, 206, 218, 239, 261, 263, 274, 295, 297, 300, 301, 939, 970], "set_ylim": [8, 10, 15, 28, 38, 55, 66, 83, 98, 104, 115, 116, 144, 152, 154, 159, 177, 179, 180, 211, 221, 239, 242, 252, 258, 268, 273, 275, 276, 278, 282, 291, 308], "runtim": [8, 10, 53, 165, 194, 196, 211, 271, 275, 325, 340, 341, 349, 351, 362, 363, 370, 401, 514, 630, 761, 849, 850, 851, 852, 853, 854, 855, 946, 947, 976, 980, 981, 987, 988], "gcf": [8, 939], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 14, 66, 105, 108, 109, 112, 120, 129, 133, 143, 146, 152, 158, 221, 226, 234, 236, 240, 252, 278, 279, 285, 286, 312, 340, 366, 532, 583, 599, 620, 631, 932, 939, 946, 948, 979, 980, 981, 982], "width": [8, 10, 15, 41, 49, 73, 81, 87, 88, 94, 95, 96, 102, 107, 108, 111, 120, 129, 137, 143, 162, 221, 234, 273, 275, 276, 279, 286, 296, 335, 364, 390, 391, 403, 415, 444, 445, 457, 472, 537, 814, 862, 942, 946, 948, 964, 965, 981], "set_xticklabel": [8, 10, 73, 96, 120, 138, 152, 154, 246, 247, 252], "ymax": [8, 10, 11, 71, 166, 168, 171, 172, 180, 188, 235, 266], "set_titl": [8, 10, 14, 23, 25, 28, 29, 38, 39, 41, 49, 52, 55, 59, 60, 66, 69, 73, 81, 83, 90, 96, 104, 105, 114, 116, 118, 119, 144, 146, 147, 150, 151, 152, 153, 158, 159, 168, 170, 177, 179, 180, 181, 187, 199, 200, 203, 204, 209, 211, 212, 215, 216, 221, 229, 230, 231, 232, 235, 237, 238, 242, 246, 247, 252, 253, 257, 258, 263, 268, 269, 273, 274, 275, 276, 277, 278, 281, 285, 288, 289, 296, 307, 308, 309, 311, 315], "autolabel": [8, 109], "attach": [8, 109, 386, 794, 974, 984], "rect": [8, 48, 109, 158], "height": [8, 14, 49, 88, 108, 133, 154, 273, 279, 311, 369, 444, 445, 457, 537], "get_height": [8, 109], "get_x": [8, 109], "get_width": [8, 109], "va": [8, 109, 246, 261, 263, 306], "setp": [8, 10, 163, 246, 249], "rotat": [8, 36, 84, 87, 90, 110, 120, 148, 154, 202, 246, 247, 252, 299, 306, 366, 368, 373, 375, 455, 483, 492, 501, 565, 648, 829, 861, 928, 984, 985], "read": [8, 16, 85, 199, 242, 281, 282, 283, 285, 324, 332, 336, 339, 340, 341, 342, 343, 345, 346, 349, 350, 351, 363, 374, 375, 376, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 410, 412, 413, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 567, 570, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 882, 921, 928, 932, 933, 952, 956, 967, 974, 978, 979, 980, 981, 982, 983, 984, 986], "feat": [8, 10, 342, 371], "extr": 8, "hash": [8, 97, 148, 312, 313, 324, 326, 330, 338, 341, 349, 370, 465, 495, 508, 517, 532, 533, 540, 591, 784, 897, 924, 967, 969, 974, 977, 980], "vect": [8, 64, 236, 292, 371, 967], "plot_out_of_core_classif": 8, "illustr": [9, 21, 22, 24, 28, 30, 48, 51, 52, 64, 65, 68, 69, 71, 73, 78, 83, 87, 91, 98, 99, 102, 106, 109, 113, 115, 117, 118, 128, 133, 134, 135, 136, 137, 140, 141, 142, 143, 148, 150, 152, 153, 156, 168, 175, 176, 179, 181, 183, 187, 193, 196, 197, 199, 200, 202, 204, 206, 208, 209, 211, 212, 214, 235, 242, 247, 248, 254, 278, 280, 281, 283, 291, 299, 300, 304, 305, 307, 308, 312, 313, 318, 320, 324, 335, 338, 343, 346, 350, 366, 368, 370, 371, 466, 561, 562, 564, 565, 566, 570, 573, 574, 798, 921, 928, 932, 935, 938, 944, 945, 946, 947, 956, 958], "robust": [9, 56, 58, 70, 111, 147, 148, 151, 152, 157, 181, 196, 206, 273, 326, 335, 340, 346, 363, 370, 371, 399, 420, 421, 424, 425, 426, 427, 475, 485, 510, 511, 600, 608, 621, 622, 629, 630, 700, 779, 810, 824, 826, 827, 838, 844, 884, 932, 936, 938, 942, 945, 946, 952, 954, 956, 968, 969, 973, 974, 976, 977, 978, 979, 980], "covari": [9, 12, 26, 30, 72, 77, 93, 96, 114, 135, 142, 206, 220, 222, 225, 226, 227, 327, 347, 351, 363, 366, 368, 373, 433, 434, 435, 436, 455, 466, 470, 478, 483, 485, 492, 497, 499, 500, 501, 514, 561, 562, 564, 573, 574, 595, 596, 601, 605, 607, 633, 634, 637, 640, 644, 745, 746, 747, 766, 931, 938, 942, 954, 968, 969, 973, 975, 976, 977, 978, 980, 982], "wine": [9, 218, 278, 279, 331, 461, 969], "tool": [9, 11, 151, 233, 238, 320, 331, 332, 333, 336, 338, 340, 341, 342, 343, 344, 345, 346, 350, 351, 353, 354, 357, 362, 363, 364, 365, 438, 643, 652, 921, 927, 928, 932, 938, 942, 947, 949, 952, 953, 956, 958, 967, 980, 983, 986, 987, 988], "purpos": [9, 12, 15, 33, 78, 146, 193, 194, 195, 199, 201, 213, 224, 226, 231, 232, 299, 300, 311, 312, 320, 333, 338, 340, 350, 351, 352, 354, 356, 360, 363, 364, 368, 370, 371, 372, 373, 497, 589, 771, 772, 809, 929, 932, 933, 935, 938, 950, 952, 958, 985, 987], "awar": [9, 14, 98, 130, 144, 296, 311, 336, 340, 349, 352, 367, 371, 518, 519, 599, 605, 606, 607, 609, 610, 620, 631, 795, 824, 938, 942, 948, 970, 973, 974, 987], "thing": [9, 200, 230, 325, 326, 333, 337, 338, 340, 349, 363, 365, 371, 510, 511, 928, 942, 956, 979], "trivial": [9, 181, 315, 338, 363, 765, 851, 854, 929, 953, 973], "dimens": [9, 12, 14, 33, 36, 49, 75, 77, 81, 85, 137, 152, 162, 177, 183, 201, 203, 206, 210, 211, 216, 222, 223, 257, 258, 262, 276, 311, 312, 313, 333, 335, 339, 351, 362, 363, 368, 369, 373, 375, 394, 395, 397, 398, 399, 400, 403, 415, 416, 433, 434, 435, 444, 445, 466, 475, 476, 480, 481, 484, 492, 500, 533, 534, 535, 536, 538, 540, 548, 570, 573, 592, 595, 610, 641, 642, 643, 645, 646, 650, 714, 770, 789, 790, 794, 808, 841, 842, 843, 851, 852, 853, 854, 855, 869, 870, 871, 895, 903, 906, 922, 924, 926, 928, 929, 930, 933, 935, 936, 938, 944, 947, 958, 965, 966, 980, 982, 983, 985], "below": [9, 23, 24, 25, 29, 55, 64, 69, 73, 80, 81, 85, 103, 105, 106, 111, 128, 150, 152, 162, 175, 176, 179, 181, 195, 196, 200, 204, 208, 217, 230, 233, 238, 240, 241, 242, 273, 277, 281, 282, 283, 284, 285, 286, 303, 304, 311, 319, 320, 325, 331, 332, 336, 338, 340, 342, 343, 347, 351, 354, 363, 365, 366, 367, 368, 370, 371, 372, 373, 399, 422, 423, 429, 442, 443, 445, 446, 447, 448, 449, 451, 452, 453, 455, 456, 461, 482, 488, 493, 499, 533, 546, 547, 548, 549, 550, 551, 584, 597, 603, 609, 610, 618, 624, 626, 643, 650, 656, 693, 713, 745, 746, 747, 758, 761, 778, 809, 812, 822, 823, 826, 832, 838, 921, 922, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 938, 939, 940, 942, 946, 947, 948, 949, 952, 960, 967, 978, 979, 980, 981, 982, 983, 984, 985, 986], "main": [9, 15, 29, 57, 78, 89, 108, 148, 206, 244, 280, 307, 311, 324, 325, 326, 331, 336, 338, 340, 342, 344, 346, 349, 350, 351, 353, 361, 362, 363, 368, 370, 371, 373, 454, 476, 481, 500, 501, 576, 664, 779, 921, 929, 931, 932, 939, 944, 953, 955, 964, 967, 973, 976, 981, 983, 984, 985, 986, 987, 988], "empir": [9, 22, 23, 32, 70, 73, 75, 148, 197, 241, 273, 361, 367, 370, 373, 398, 400, 411, 420, 421, 425, 428, 429, 483, 485, 490, 492, 494, 500, 502, 516, 541, 554, 590, 600, 618, 622, 629, 630, 667, 672, 673, 674, 774, 784, 785, 786, 788, 807, 830, 872, 906, 924, 926, 932, 934, 936, 942, 944, 946, 968, 969], "heterogen": [9, 22, 63, 65, 148, 152, 179, 219, 278, 281, 330, 332, 349, 415, 439, 495, 532, 542, 664, 809, 813, 849, 929, 939, 942, 952, 969, 977, 981, 983, 984], "mode": [9, 10, 42, 43, 73, 179, 206, 253, 255, 271, 281, 338, 341, 346, 347, 349, 360, 366, 370, 374, 395, 396, 398, 400, 403, 410, 413, 422, 423, 429, 433, 438, 459, 460, 508, 512, 515, 543, 546, 547, 549, 550, 551, 561, 578, 595, 596, 609, 610, 617, 619, 624, 625, 626, 627, 630, 633, 634, 640, 644, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 805, 849, 851, 854, 857, 859, 875, 885, 886, 888, 935, 938, 952, 958, 959, 966, 974, 982, 987], "stick": [9, 745, 931], "bias": [9, 25, 75, 88, 111, 117, 150, 151, 153, 183, 240, 333, 353, 361, 370, 475, 500, 805, 829, 840, 927, 931, 940, 946, 948], "yet": [9, 52, 197, 226, 236, 313, 326, 333, 337, 342, 349, 353, 354, 367, 368, 370, 371, 373, 399, 403, 412, 413, 528, 728, 916, 921, 928, 932, 938, 946, 953, 982], "extent": [9, 27, 53, 137, 138, 139, 210, 305, 308, 392, 486, 647, 745, 932], "assum": [9, 52, 142, 147, 150, 151, 168, 179, 197, 206, 209, 215, 227, 235, 244, 273, 313, 325, 337, 338, 340, 342, 344, 349, 350, 351, 353, 357, 360, 361, 363, 365, 367, 368, 370, 371, 373, 374, 379, 383, 389, 391, 396, 401, 408, 414, 420, 421, 422, 423, 424, 425, 426, 427, 454, 459, 460, 483, 493, 499, 500, 512, 513, 518, 519, 538, 539, 540, 542, 571, 583, 594, 595, 597, 598, 603, 609, 610, 611, 612, 613, 617, 618, 619, 622, 623, 627, 628, 629, 632, 636, 638, 639, 643, 660, 676, 685, 691, 706, 714, 719, 724, 728, 731, 747, 750, 751, 761, 785, 791, 792, 795, 796, 797, 799, 800, 805, 816, 829, 908, 909, 910, 922, 926, 928, 930, 931, 932, 934, 935, 937, 938, 939, 942, 946, 947, 948, 979, 985], "parametr": [9, 22, 23, 75, 209, 257, 277, 284, 361, 364, 369, 370, 389, 502, 504, 586, 636, 647, 825, 837, 880, 881, 928, 931, 934, 935, 942, 945, 948, 981, 983, 986], "therefor": [9, 13, 22, 33, 48, 49, 65, 66, 69, 73, 78, 90, 95, 99, 102, 104, 111, 116, 118, 132, 150, 153, 179, 195, 196, 221, 226, 227, 236, 238, 270, 273, 278, 288, 299, 308, 311, 312, 319, 324, 332, 336, 343, 349, 363, 364, 365, 367, 368, 370, 371, 389, 447, 486, 500, 502, 504, 505, 510, 511, 515, 516, 555, 557, 609, 610, 616, 619, 622, 627, 629, 630, 652, 663, 685, 707, 745, 809, 810, 822, 826, 830, 838, 849, 850, 922, 926, 928, 929, 932, 934, 935, 936, 937, 940, 942, 947, 948, 953, 958, 965, 966, 967, 982, 983, 986, 987, 988, 989], "minimum": [9, 52, 73, 111, 112, 132, 168, 189, 210, 245, 259, 260, 340, 347, 354, 356, 360, 363, 370, 371, 393, 397, 401, 405, 407, 420, 421, 424, 425, 426, 427, 462, 464, 492, 503, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 545, 578, 582, 583, 586, 588, 619, 622, 627, 629, 630, 633, 634, 643, 656, 675, 729, 730, 750, 751, 770, 785, 806, 807, 818, 819, 822, 823, 824, 828, 842, 843, 856, 857, 858, 859, 860, 866, 869, 870, 873, 889, 929, 932, 936, 938, 942, 944, 948, 973, 976, 980, 981, 985, 986], "determin": [9, 11, 13, 18, 42, 73, 101, 140, 151, 158, 159, 175, 182, 235, 273, 278, 313, 319, 320, 337, 338, 340, 347, 350, 351, 360, 361, 363, 367, 368, 370, 371, 372, 373, 384, 389, 393, 394, 395, 397, 398, 400, 401, 407, 410, 411, 412, 416, 420, 421, 423, 424, 425, 426, 427, 433, 434, 435, 439, 442, 443, 446, 448, 454, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 490, 493, 494, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 516, 518, 519, 521, 533, 534, 535, 539, 542, 545, 553, 558, 559, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 578, 586, 587, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 619, 620, 621, 623, 624, 625, 626, 627, 629, 630, 631, 638, 640, 641, 643, 644, 645, 658, 662, 673, 679, 680, 688, 733, 734, 735, 737, 738, 741, 747, 749, 750, 751, 753, 761, 769, 770, 771, 772, 773, 774, 776, 780, 782, 783, 785, 792, 794, 795, 800, 805, 806, 807, 813, 814, 822, 823, 824, 826, 830, 838, 849, 850, 852, 855, 858, 860, 863, 884, 895, 901, 903, 906, 921, 924, 926, 931, 935, 937, 938, 942, 945, 946, 948, 958, 973, 978, 981, 982, 984, 985, 986], "concentr": [9, 90, 99, 116, 140, 148, 204, 220, 227, 275, 290, 334, 338, 370, 373, 395, 470, 745, 931, 938], "cluster": [9, 17, 19, 22, 38, 39, 42, 44, 46, 47, 49, 50, 52, 54, 56, 57, 73, 82, 92, 101, 107, 114, 154, 204, 221, 222, 223, 224, 236, 259, 260, 262, 276, 282, 286, 301, 310, 311, 313, 326, 327, 331, 333, 335, 338, 340, 343, 349, 351, 358, 369, 371, 377, 378, 381, 439, 453, 454, 455, 462, 463, 464, 465, 466, 473, 481, 492, 495, 515, 517, 540, 541, 542, 642, 643, 646, 655, 656, 661, 668, 670, 675, 681, 686, 687, 705, 707, 728, 729, 736, 740, 741, 743, 745, 746, 801, 802, 810, 814, 821, 829, 878, 880, 893, 900, 916, 922, 929, 931, 935, 938, 940, 942, 945, 949, 952, 953, 956, 958, 961, 964, 967, 968, 969, 973, 974, 975, 976, 977, 978, 979, 980], "outli": [9, 73, 351, 420, 425, 928, 938], "skew": [9, 111, 182, 210, 273, 330, 367, 590, 591, 592, 593, 825, 837, 928, 942, 969, 976, 980, 989], "Of": [9, 23, 25, 146, 324, 340, 363, 371, 922], "screen": [9, 986], "presenc": [9, 55, 57, 73, 74, 150, 273, 336, 339, 351, 365, 368, 663, 676, 706, 719, 778, 812, 820, 822, 916, 922, 928, 932, 933, 946, 976, 977, 979, 983, 985, 987], "mixtur": [9, 40, 52, 223, 224, 327, 333, 334, 351, 363, 368, 369, 373, 574, 747, 952, 953, 968, 969, 973, 977, 978, 979, 980], "univari": [9, 32, 66, 68, 127, 128, 148, 194, 294, 330, 362, 363, 364, 371, 397, 455, 476, 481, 543, 546, 547, 549, 550, 551, 553, 556, 557, 558, 559, 560, 578, 579, 580, 581, 596, 747, 752, 771, 775, 809, 810, 819, 824, 828, 829, 849, 854, 928, 947, 949, 954, 966, 969, 973, 979], "appli": [9, 14, 18, 23, 25, 29, 36, 40, 42, 43, 51, 53, 57, 65, 67, 69, 78, 85, 86, 92, 94, 96, 104, 111, 129, 135, 151, 153, 168, 184, 193, 199, 200, 201, 206, 211, 235, 236, 238, 247, 252, 262, 273, 277, 278, 282, 299, 313, 319, 320, 324, 330, 338, 340, 346, 349, 350, 351, 360, 361, 362, 363, 364, 365, 367, 368, 370, 371, 372, 373, 375, 392, 403, 413, 415, 416, 418, 420, 425, 433, 434, 435, 436, 459, 460, 467, 468, 469, 475, 482, 483, 484, 485, 486, 488, 490, 492, 493, 494, 499, 500, 501, 504, 505, 508, 509, 510, 511, 515, 516, 517, 539, 540, 541, 542, 578, 583, 584, 589, 590, 592, 593, 609, 610, 619, 627, 628, 629, 642, 650, 652, 658, 676, 706, 708, 709, 731, 738, 740, 741, 747, 761, 775, 778, 784, 785, 786, 787, 788, 798, 808, 809, 818, 825, 826, 829, 834, 835, 837, 838, 839, 840, 845, 856, 857, 858, 859, 860, 869, 875, 878, 885, 886, 904, 922, 924, 928, 929, 930, 931, 932, 934, 936, 938, 942, 946, 947, 948, 949, 951, 956, 974, 977, 978, 979, 980, 981, 984, 985, 987], "ellipticenvelop": [9, 206, 421, 424, 425, 426, 427, 514, 938, 973, 976, 980, 981, 986], "oneclasssvm": [9, 11, 15, 193, 206, 284, 298, 514, 628, 795, 938, 946, 947, 975, 980, 981, 983, 984, 985, 986, 987, 988], "font_manag": [9, 74, 259, 298], "load_win": [9, 218, 278, 793, 801, 970, 984], "support_fract": [9, 420, 425], "contamin": [9, 73, 74, 206, 215, 259, 260, 420, 514, 795, 938, 981, 989], "ocsvm": [9, 193], "legend1": 9, "legend2": 9, "x1": [9, 12, 15, 31, 77, 82, 101, 110, 138, 191, 202, 215, 273, 296, 340, 351, 383, 415, 460, 518, 519, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 578, 579, 580, 581, 650, 714, 812, 813, 814, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 966], "frontier": [9, 193, 259, 298, 938, 965], "xx1": [9, 101, 582], "yy1": 9, "meshgrid": [9, 11, 15, 24, 27, 31, 38, 53, 73, 107, 116, 136, 137, 138, 139, 141, 152, 190, 191, 192, 193, 204, 206, 225, 259, 266, 268, 275, 276, 293, 298, 299, 304, 305, 308, 309, 582], "500": [9, 10, 40, 46, 52, 55, 56, 58, 77, 78, 93, 95, 103, 112, 132, 135, 156, 192, 193, 200, 216, 217, 221, 222, 226, 238, 248, 253, 259, 265, 277, 282, 298, 305, 309, 324, 370, 420, 421, 425, 426, 427, 433, 434, 435, 562, 564, 565, 567, 572, 575, 576, 601, 602, 605, 606, 607, 631, 633, 634, 807, 921, 947], "clf_name": [9, 10, 311], "z1": 9, "decision_funct": [9, 11, 15, 23, 25, 51, 101, 114, 126, 191, 192, 193, 207, 215, 242, 259, 260, 268, 275, 297, 298, 299, 303, 304, 305, 309, 340, 351, 361, 370, 389, 420, 500, 501, 504, 506, 510, 512, 514, 518, 544, 545, 582, 583, 584, 609, 610, 617, 619, 625, 626, 627, 628, 649, 651, 653, 658, 671, 676, 677, 685, 689, 690, 692, 706, 732, 738, 739, 742, 747, 750, 751, 761, 770, 777, 778, 779, 780, 795, 809, 816, 846, 849, 851, 853, 854, 928, 932, 938, 939, 946, 947, 965, 973, 975, 977, 978, 979, 980, 981, 982, 983, 985, 986], "c_": [9, 11, 15, 23, 24, 25, 27, 31, 53, 73, 86, 91, 107, 110, 115, 116, 124, 126, 137, 177, 192, 193, 195, 206, 215, 259, 276, 278, 293, 298, 299, 303, 305, 308, 309, 363, 610, 665, 666, 669, 932, 962, 965, 966], "contour": [9, 11, 15, 31, 42, 43, 73, 107, 126, 138, 139, 141, 190, 191, 192, 193, 206, 211, 225, 259, 266, 297, 298, 300, 301, 303, 304, 305, 335, 582, 583, 938, 946], "linewidth": [9, 22, 30, 31, 33, 36, 53, 67, 71, 78, 83, 100, 111, 115, 135, 139, 143, 168, 169, 173, 174, 175, 177, 180, 182, 185, 193, 196, 206, 213, 215, 244, 248, 259, 263, 274, 282, 297, 298, 300, 305, 317, 963], "legend1_values_list": 9, "legend1_keys_list": 9, "cloud": [9, 39, 77, 84, 91, 148, 346, 368, 484, 492, 643, 932, 951, 952, 966], "bbox_arg": 9, "dict": [9, 10, 11, 12, 16, 24, 35, 41, 64, 67, 68, 92, 111, 113, 177, 185, 206, 214, 223, 233, 234, 236, 239, 242, 244, 253, 257, 275, 279, 285, 292, 299, 312, 313, 326, 330, 332, 340, 349, 351, 364, 367, 374, 375, 377, 385, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 447, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 648, 649, 651, 652, 653, 664, 712, 715, 721, 729, 730, 745, 746, 747, 750, 751, 753, 758, 759, 761, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 864, 874, 875, 891, 921, 932, 942, 962, 967, 969, 973, 979, 980], "boxstyl": [9, 275], "fc": [9, 258, 333], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 24, 45, 242, 266, 304, 354, 597, 598, 601, 603, 604, 605, 611, 612, 613, 614, 615, 632, 633, 634, 635, 637], "xycoord": [9, 24], "textcoord": [9, 156], "xytext": [9, 24, 156], "bbox": [9, 12, 31, 41, 92, 221, 222, 223, 226, 227, 275], "arrowprop": [9, 24], "xlim": [9, 12, 24, 31, 40, 53, 57, 67, 71, 72, 73, 81, 87, 99, 101, 102, 103, 117, 123, 136, 137, 151, 158, 169, 171, 178, 185, 188, 193, 206, 213, 222, 227, 230, 245, 249, 259, 260, 298, 303, 304, 308, 318], "ylim": [9, 12, 22, 24, 30, 31, 33, 40, 53, 57, 71, 72, 73, 81, 87, 99, 101, 102, 108, 109, 111, 117, 120, 124, 136, 137, 151, 166, 168, 169, 171, 172, 173, 185, 188, 189, 193, 206, 213, 222, 227, 230, 234, 238, 245, 248, 249, 250, 259, 260, 298, 303, 304, 308, 311, 318], "prop": [9, 67, 74, 185, 223, 259, 298, 319], "fontproperti": [9, 74, 259, 298], "11": [9, 18, 74, 87, 138, 180, 181, 184, 232, 240, 241, 247, 257, 259, 277, 283, 298, 302, 332, 335, 336, 344, 350, 363, 366, 367, 370, 401, 408, 433, 434, 435, 436, 452, 468, 469, 563, 601, 607, 621, 666, 672, 673, 674, 728, 729, 730, 748, 751, 765, 768, 774, 801, 858, 896, 928, 930, 942, 946, 947, 950, 958, 965, 967, 971, 975, 979, 981, 982, 984, 987, 988], "ash": [9, 335, 976, 979], "malic_acid": 9, "abil": [9, 56, 73, 111, 141, 146, 150, 151, 153, 179, 197, 206, 311, 326, 354, 370, 371, 732, 733, 734, 737, 929, 932, 935, 938, 948, 953, 973, 975, 980, 982, 986, 987], "locat": [9, 23, 49, 50, 66, 73, 74, 173, 266, 283, 299, 331, 336, 338, 342, 343, 346, 347, 354, 363, 365, 369, 399, 411, 412, 420, 421, 422, 423, 424, 425, 426, 427, 439, 451, 452, 455, 456, 463, 466, 917, 922, 928, 933, 938, 942, 948, 981], "hard": [9, 179, 206, 210, 235, 237, 326, 337, 349, 351, 363, 368, 371, 485, 492, 520, 627, 851, 852, 853, 854, 855, 928, 945, 947, 948, 953, 965, 966, 967, 982, 983], "due": [9, 24, 25, 49, 55, 69, 102, 135, 151, 152, 158, 170, 177, 179, 181, 196, 197, 210, 222, 243, 244, 253, 278, 279, 311, 312, 313, 338, 344, 351, 354, 361, 363, 367, 368, 370, 373, 395, 398, 410, 486, 490, 494, 495, 525, 622, 747, 750, 751, 755, 757, 761, 770, 771, 772, 774, 777, 781, 782, 814, 818, 819, 829, 922, 928, 929, 931, 932, 933, 935, 939, 946, 953, 966, 973, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "banana": [9, 932], "anywai": [9, 340, 616, 636, 637], "rid": [9, 946], "difficulti": [9, 25, 197, 273, 326, 338, 361, 806, 807, 931, 935], "bandwidth": [9, 40, 58, 212, 257, 258, 266, 349, 351, 363, 369, 399, 409, 412, 789, 790, 794, 925, 938, 952, 984, 988], "compromis": [9, 152, 324, 338, 598, 630, 935, 976], "risk": [9, 179, 197, 274, 307, 320, 337, 338, 351, 362, 367, 370, 518, 519, 834, 835, 837, 838, 839, 840, 928, 932, 956, 980], "x2": [9, 15, 77, 82, 101, 110, 138, 191, 215, 340, 364, 539, 580, 650, 714, 966], "xx2": 9, "yy2": 9, "19": [9, 277, 335, 342, 351, 363, 364, 371, 374, 396, 443, 467, 468, 469, 487, 491, 492, 498, 500, 501, 508, 509, 510, 511, 515, 516, 517, 533, 540, 599, 609, 610, 617, 618, 619, 622, 623, 625, 627, 629, 638, 658, 731, 735, 747, 761, 772, 777, 778, 780, 781, 795, 796, 815, 826, 847, 851, 854, 857, 858, 859, 860, 921, 932, 942, 950, 971, 973, 974, 975, 976, 978, 981], "z2": 9, "legend2_values_list": 9, "legend2_keys_list": 9, "color_intens": 9, "flavanoid": [9, 335], "plot_outlier_detection_win": 9, "goal": [10, 16, 48, 52, 78, 146, 152, 156, 179, 194, 197, 214, 215, 232, 233, 311, 325, 326, 333, 340, 343, 344, 351, 352, 353, 368, 370, 372, 493, 499, 541, 544, 689, 932, 935, 937, 938, 946, 947, 948, 950, 956, 958, 961, 965, 967, 981], "boxplot": [10, 73, 112, 151, 154, 281], "defaultdict": [10, 18, 23, 154, 238, 312, 313], "gc": 10, "make_regress": [10, 69, 158, 160, 161, 165, 182, 183, 248, 282, 320, 334, 340, 341, 350, 505, 507, 511, 516, 586, 597, 598, 600, 602, 604, 606, 614, 615, 616, 618, 622, 630, 807, 850, 932, 933, 935], "randomforestregressor": [10, 117, 118, 121, 146, 147, 283, 350, 370, 508, 509, 511, 513, 517, 519, 521, 583, 584, 859, 978, 979, 981, 982, 983, 984, 986, 987, 988, 989], "sgdregressor": [10, 190, 324, 326, 349, 362, 597, 600, 618, 622, 627, 630, 807, 850, 855, 928, 946, 975, 977, 979, 980, 981, 984, 986, 987, 988, 989], "shuffl": [10, 14, 19, 20, 22, 25, 29, 44, 55, 56, 85, 98, 105, 107, 118, 147, 187, 188, 193, 206, 236, 240, 241, 248, 253, 288, 289, 290, 291, 301, 311, 312, 320, 333, 347, 351, 358, 420, 425, 439, 440, 442, 443, 446, 448, 454, 462, 463, 464, 465, 466, 470, 473, 475, 482, 488, 490, 491, 497, 498, 504, 505, 506, 507, 515, 516, 518, 519, 553, 609, 610, 617, 618, 619, 623, 625, 627, 628, 629, 638, 747, 749, 750, 751, 752, 753, 761, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 779, 806, 807, 830, 849, 850, 851, 854, 885, 886, 901, 903, 927, 928, 933, 940, 946, 947, 962, 967, 969, 973, 976, 977, 978, 980, 981, 982, 983, 984], "atomic_benchmark_estim": 10, "verbos": [10, 38, 46, 50, 59, 64, 66, 68, 118, 166, 236, 270, 271, 273, 284, 292, 311, 336, 342, 351, 357, 392, 395, 398, 400, 403, 405, 410, 413, 415, 418, 422, 423, 429, 482, 487, 488, 489, 490, 491, 494, 496, 497, 498, 499, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 544, 545, 578, 581, 583, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 641, 643, 645, 715, 728, 745, 746, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 778, 780, 783, 798, 805, 806, 807, 808, 809, 810, 811, 846, 849, 850, 851, 852, 853, 854, 855, 898, 953, 975, 976, 978, 980, 981, 982, 984, 985, 987, 988], "n_instanc": [10, 584], "zero": [10, 11, 13, 25, 31, 33, 36, 37, 48, 50, 72, 74, 75, 85, 88, 90, 98, 101, 102, 110, 112, 113, 117, 130, 147, 158, 165, 170, 172, 173, 178, 179, 180, 183, 184, 185, 189, 194, 197, 210, 213, 221, 225, 227, 232, 235, 240, 244, 245, 258, 273, 282, 283, 307, 312, 313, 315, 319, 324, 325, 333, 340, 344, 351, 361, 362, 363, 365, 368, 370, 371, 372, 373, 376, 403, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 438, 448, 459, 460, 474, 477, 478, 482, 483, 486, 488, 489, 490, 491, 493, 494, 498, 499, 503, 508, 509, 510, 511, 512, 513, 515, 516, 517, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 562, 587, 590, 594, 595, 596, 601, 609, 610, 615, 616, 617, 619, 622, 627, 628, 629, 636, 637, 654, 660, 663, 664, 666, 667, 675, 679, 680, 684, 688, 690, 696, 733, 734, 735, 737, 744, 745, 762, 763, 766, 767, 778, 789, 790, 791, 792, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 812, 819, 821, 822, 824, 825, 826, 828, 829, 835, 836, 837, 838, 842, 849, 857, 858, 859, 860, 884, 918, 922, 928, 930, 931, 934, 935, 936, 942, 943, 944, 946, 947, 948, 958, 965, 967, 973, 975, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "atomic_benchmark": 10, "percentil": [10, 65, 111, 219, 273, 324, 543, 546, 547, 549, 550, 551, 554, 557, 583, 584, 698, 942, 978, 986], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 46, 68, 109, 121, 147, 180, 215, 232, 239, 299, 315, 324, 336, 338, 349, 350, 364, 366, 370, 373, 400, 434, 489, 506, 507, 508, 509, 514, 515, 516, 517, 521, 636, 637, 747, 750, 751, 761, 773, 784, 785, 786, 787, 788, 921, 932, 942, 967, 981, 983], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 30, 61, 72, 74, 110, 133, 135, 141, 142, 152, 156, 181, 230, 235, 236, 247, 289, 307, 312, 313, 340, 347, 351, 360, 361, 362, 363, 368, 371, 372, 373, 539, 544, 558, 559, 566, 578, 585, 610, 752, 762, 763, 766, 875, 922, 931, 969, 981, 983], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 33, 40, 53, 59, 90, 101, 103, 107, 111, 126, 139, 143, 159, 162, 171, 188, 191, 197, 210, 230, 235, 242, 244, 293, 295, 297, 299, 300, 301, 303, 305, 312, 316, 333, 349, 351, 360, 361, 364, 367, 371, 373, 389, 392, 393, 397, 401, 408, 414, 429, 444, 459, 460, 533, 543, 546, 547, 549, 550, 551, 561, 564, 565, 566, 568, 570, 571, 573, 574, 576, 578, 583, 584, 594, 643, 651, 656, 657, 658, 666, 681, 690, 708, 709, 713, 716, 719, 720, 721, 722, 723, 724, 726, 728, 729, 730, 731, 732, 736, 777, 789, 790, 864, 932, 933, 934, 935, 942, 948, 973, 985, 986, 988, 989], "contain": [10, 18, 22, 25, 30, 36, 45, 51, 53, 64, 65, 101, 103, 106, 114, 141, 151, 152, 154, 156, 170, 197, 206, 215, 216, 219, 226, 233, 235, 241, 244, 245, 252, 259, 260, 262, 273, 284, 289, 292, 311, 312, 331, 332, 333, 335, 338, 340, 342, 343, 344, 345, 346, 347, 350, 351, 357, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 375, 377, 385, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 451, 453, 454, 455, 459, 460, 461, 465, 466, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 636, 637, 639, 640, 641, 642, 643, 647, 648, 649, 651, 652, 653, 660, 663, 685, 686, 687, 718, 722, 729, 730, 738, 742, 745, 746, 747, 750, 751, 753, 761, 765, 766, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 862, 863, 864, 865, 868, 869, 870, 889, 890, 892, 895, 899, 901, 921, 922, 924, 930, 933, 936, 938, 942, 943, 945, 948, 958, 967, 973, 975, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "generate_dataset": 10, "coef": [10, 50, 95, 150, 151, 158, 163, 166, 170, 171, 173, 178, 182, 183, 184, 188, 195, 219, 248, 270, 308, 475, 597, 598, 600, 603, 604, 610, 611, 612, 613, 614, 620, 623, 625, 631, 632, 633, 634, 635, 636, 637, 638, 936], "random_se": [10, 83, 107], "x_scaler": 10, "y_scaler": 10, "ok": [10, 338, 938], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 266, 292, 324, 658, 664, 679, 680, 688, 733, 734, 737, 738, 932, 973, 981, 982, 988], "bp": [10, 112, 335, 940], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "red": [10, 11, 24, 30, 31, 55, 73, 83, 85, 86, 87, 102, 118, 121, 144, 156, 158, 159, 169, 177, 204, 216, 230, 241, 266, 269, 274, 278, 290, 299, 318, 336, 351, 363, 368, 933], "marker": [10, 11, 16, 25, 27, 31, 33, 34, 38, 48, 53, 54, 55, 58, 59, 77, 82, 83, 87, 91, 117, 142, 143, 156, 167, 172, 174, 176, 177, 179, 181, 182, 194, 196, 200, 221, 223, 224, 230, 235, 237, 238, 239, 273, 278, 290, 315, 338, 342, 371, 981, 983, 984], "linestyl": [10, 11, 15, 30, 55, 67, 73, 93, 95, 99, 110, 120, 123, 126, 135, 138, 140, 142, 144, 153, 164, 166, 167, 168, 179, 180, 181, 185, 189, 191, 192, 197, 213, 215, 232, 234, 238, 239, 244, 258, 266, 269, 274, 297, 300, 301, 303, 304, 305, 963], "major": [10, 14, 242, 273, 277, 281, 282, 283, 284, 285, 286, 313, 324, 333, 337, 338, 341, 344, 349, 352, 363, 367, 369, 371, 373, 502, 520, 521, 645, 679, 680, 688, 733, 734, 737, 861, 863, 932, 935, 946, 953, 956, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 983, 984, 985, 986, 987, 988, 989], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 23], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 187, 345, 390, 527, 649, 651, 653, 868], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 615, 636, 637, 928, 932], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 187, 201, 204, 253], "1e2": [10, 135, 142, 212, 227, 299, 696], "randomforest": [10, 107, 324, 370, 857, 858, 978], "250": [10, 60, 111, 156, 199, 444, 643, 921, 944, 980], "plot_prediction_lat": 10, "conserv": [11, 533, 540, 841, 842, 931, 944], "biologi": 11, "south": [11, 151, 266, 369], "american": [11, 12, 74, 333, 363, 365, 369, 370, 371, 420, 425, 681, 829], "mammal": 11, "past": [11, 342, 343, 346, 349, 352, 367, 368, 370, 489, 506, 507, 629, 956, 959], "environment": [11, 197], "unsuccess": 11, "cast": [11, 49, 179, 200, 332, 351, 352, 371, 447, 595, 596, 597, 603, 607, 608, 611, 612, 613, 614, 615, 616, 624, 626, 897, 980, 981, 982, 983, 986, 988], "densiti": [11, 45, 55, 60, 69, 91, 95, 148, 165, 179, 194, 197, 203, 206, 210, 220, 227, 235, 241, 254, 259, 260, 273, 299, 311, 335, 347, 351, 363, 370, 374, 382, 396, 399, 401, 403, 415, 418, 449, 453, 487, 492, 500, 501, 745, 746, 747, 789, 790, 794, 795, 842, 926, 928, 931, 935, 937, 938, 944, 952, 954, 958, 968, 969, 975, 977, 981, 982, 988], "phillip": [11, 266, 449], "2006": [11, 266, 370, 373, 413, 449, 508, 509, 516, 517, 561, 562, 565, 570, 573, 600, 617, 618, 691, 738, 739, 745, 784, 842, 859, 860, 928, 932, 934, 937, 944, 945], "basemap": [11, 266], "coast": [11, 266], "line": [11, 16, 36, 39, 55, 64, 85, 90, 110, 134, 146, 147, 148, 151, 152, 167, 168, 169, 171, 174, 175, 177, 180, 181, 182, 187, 188, 190, 191, 206, 210, 211, 213, 215, 232, 239, 241, 242, 263, 266, 274, 283, 298, 303, 304, 308, 309, 332, 333, 336, 338, 339, 340, 342, 343, 344, 345, 346, 349, 368, 369, 370, 390, 438, 439, 440, 459, 460, 493, 504, 505, 506, 507, 561, 564, 565, 583, 621, 637, 652, 753, 900, 926, 932, 936, 939, 946, 952, 955, 965, 967, 975, 984, 986], "nation": [11, 73, 266, 333, 796], "boundari": [11, 13, 23, 24, 25, 28, 31, 53, 55, 97, 101, 107, 116, 136, 139, 148, 152, 162, 180, 206, 211, 213, 238, 256, 261, 263, 264, 266, 268, 273, 275, 278, 287, 296, 297, 299, 301, 308, 309, 316, 334, 361, 370, 371, 373, 401, 407, 455, 487, 500, 501, 520, 539, 540, 542, 582, 778, 791, 797, 799, 800, 801, 828, 845, 846, 853, 854, 857, 873, 926, 935, 938, 942, 945, 946, 947, 973, 975, 977, 986, 987, 988], "america": [11, 12, 73, 266, 796, 942], "bradypu": [11, 266, 449], "variegatu": [11, 266, 449], "brown": [11, 83, 266, 449, 579, 922, 978, 980, 981, 982, 985], "throat": [11, 266, 449], "sloth": [11, 266, 449], "microryzomi": [11, 266, 449], "minutu": [11, 266, 449], "known": [11, 16, 23, 25, 35, 45, 52, 53, 74, 94, 95, 118, 140, 142, 147, 179, 180, 197, 206, 235, 237, 244, 262, 266, 274, 284, 288, 296, 312, 326, 335, 336, 338, 341, 346, 349, 351, 354, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 371, 373, 390, 414, 433, 435, 449, 459, 460, 495, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 539, 540, 542, 545, 560, 573, 584, 609, 610, 623, 633, 634, 645, 655, 661, 664, 669, 679, 693, 705, 707, 743, 778, 784, 785, 786, 787, 788, 791, 796, 799, 805, 833, 857, 858, 859, 860, 922, 924, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 942, 947, 948, 958, 963, 965, 966], "forest": [11, 25, 28, 97, 104, 107, 113, 114, 116, 118, 121, 146, 148, 149, 156, 206, 215, 232, 266, 283, 311, 320, 331, 350, 351, 361, 372, 414, 415, 442, 446, 447, 449, 466, 506, 507, 508, 509, 511, 514, 515, 516, 517, 581, 585, 775, 782, 809, 823, 853, 857, 858, 859, 921, 922, 933, 940, 952, 953, 954, 969, 970, 973, 974, 976, 977, 978, 979, 980, 982], "rice": [11, 266, 449, 986], "rat": [11, 266, 449], "rodent": [11, 266, 449], "live": [11, 151, 266, 338, 363, 449, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576], "peru": [11, 266, 449], "colombia": [11, 266, 449], "ecuador": [11, 266, 449], "venezuela": [11, 266, 449], "entropi": [11, 217, 247, 266, 283, 288, 289, 320, 363, 370, 375, 449, 484, 508, 515, 558, 559, 609, 668, 686, 687, 691, 743, 857, 859, 928, 929, 932, 936, 948, 975, 977, 981, 982, 987], "anderson": [11, 266, 449, 979, 985], "schapir": [11, 266, 370, 449, 504, 505], "ecolog": [11, 266, 449], "190": [11, 110, 244, 266, 344, 449], "231": [11, 266, 363, 374, 396, 449, 535], "259": [11, 201, 266, 370, 449, 518, 519], "astro": [11, 142, 199, 224], "washington": [11, 142, 199, 224, 258, 266], "bunch": [11, 331, 332, 333, 415, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 461, 518, 519, 520, 521, 583, 584, 585, 808, 809, 857, 858, 859, 860, 956, 967, 978, 980, 983, 985, 989], "fetch_species_distribut": [11, 266, 982], "ll": [11, 106, 230, 266, 338, 349, 483, 492, 935, 948, 958], "otherwis": [11, 51, 57, 101, 144, 147, 160, 181, 187, 266, 320, 326, 340, 342, 344, 351, 363, 365, 367, 371, 373, 386, 387, 388, 390, 392, 393, 394, 397, 402, 404, 405, 415, 418, 433, 434, 435, 436, 447, 477, 486, 487, 489, 491, 492, 498, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 539, 541, 542, 548, 553, 561, 562, 565, 582, 583, 584, 595, 596, 597, 603, 609, 610, 611, 613, 616, 617, 618, 619, 624, 626, 627, 628, 629, 636, 637, 641, 643, 647, 648, 649, 651, 653, 654, 658, 660, 664, 665, 674, 676, 677, 678, 679, 680, 688, 691, 702, 704, 705, 706, 724, 728, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 749, 750, 751, 752, 753, 761, 765, 766, 773, 778, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 804, 806, 807, 813, 814, 816, 820, 829, 830, 831, 834, 835, 836, 838, 839, 840, 849, 851, 852, 853, 854, 855, 864, 870, 872, 885, 886, 893, 916, 918, 927, 928, 929, 932, 935, 936, 938, 939, 942, 944, 946, 947, 952, 956, 958, 975, 981, 982, 983, 986], "improvis": [11, 266], "mpl_toolkit": [11, 41, 62, 81, 91, 92, 152, 176, 199, 201, 266], "except": [11, 15, 40, 49, 88, 187, 194, 206, 243, 253, 266, 269, 270, 273, 275, 286, 327, 331, 338, 340, 341, 342, 343, 349, 351, 357, 360, 364, 367, 368, 370, 371, 373, 384, 411, 416, 433, 434, 435, 460, 505, 507, 508, 509, 511, 513, 515, 516, 519, 521, 562, 578, 581, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 623, 624, 629, 630, 638, 662, 728, 754, 782, 783, 789, 790, 792, 795, 800, 806, 807, 813, 827, 829, 850, 852, 855, 858, 860, 890, 918, 928, 932, 947, 958, 966, 967, 974, 978, 979, 980, 981, 982, 983, 984, 986], "importerror": [11, 15, 49, 88, 253, 266, 346, 447], "construct_grid": [11, 266], "object": [11, 13, 14, 24, 40, 46, 57, 61, 64, 65, 88, 118, 123, 131, 132, 140, 148, 175, 195, 197, 205, 216, 218, 233, 266, 285, 312, 313, 320, 331, 332, 333, 338, 339, 341, 343, 344, 345, 347, 350, 351, 352, 357, 363, 364, 365, 368, 371, 372, 373, 377, 379, 383, 384, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 638, 639, 640, 641, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 662, 669, 682, 683, 692, 708, 709, 731, 732, 739, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 864, 869, 870, 871, 872, 873, 876, 880, 882, 892, 893, 895, 897, 898, 900, 917, 918, 920, 928, 929, 930, 931, 935, 938, 939, 942, 945, 946, 947, 952, 953, 958, 959, 961, 962, 965, 967, 969, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989], "func": [11, 69, 151, 159, 197, 266, 338, 364, 416, 650, 813, 942, 977, 979, 981, 982], "xgrid": [11, 266], "ygrid": [11, 266], "correspond": [11, 13, 15, 24, 29, 37, 49, 60, 71, 75, 87, 102, 105, 107, 114, 129, 132, 133, 136, 141, 144, 151, 168, 171, 179, 180, 188, 197, 207, 212, 219, 226, 234, 236, 238, 239, 244, 245, 266, 278, 283, 284, 285, 312, 315, 316, 320, 325, 332, 333, 334, 337, 338, 340, 342, 345, 346, 350, 351, 360, 361, 363, 365, 366, 367, 368, 370, 371, 372, 373, 378, 383, 389, 391, 393, 397, 399, 402, 404, 410, 412, 414, 415, 423, 433, 434, 435, 441, 442, 443, 444, 445, 446, 447, 485, 492, 495, 496, 497, 500, 501, 503, 506, 508, 510, 511, 512, 515, 533, 535, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 561, 562, 568, 581, 583, 584, 586, 594, 597, 598, 599, 603, 609, 610, 611, 612, 613, 619, 620, 622, 623, 624, 625, 626, 627, 629, 631, 632, 633, 634, 638, 641, 642, 643, 645, 654, 661, 664, 674, 675, 684, 688, 702, 704, 724, 728, 732, 738, 739, 742, 744, 745, 746, 747, 750, 751, 753, 761, 770, 778, 781, 784, 785, 786, 787, 788, 789, 790, 794, 795, 796, 798, 806, 807, 816, 820, 822, 823, 826, 830, 838, 851, 854, 857, 858, 859, 860, 874, 880, 907, 921, 922, 924, 925, 926, 928, 929, 931, 932, 933, 935, 936, 937, 938, 939, 942, 943, 946, 947, 951, 958, 964, 967, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "coverag": [11, 111, 179, 197, 266, 341, 359, 449, 578, 671], "coordin": [11, 12, 13, 90, 117, 139, 164, 199, 236, 266, 324, 368, 373, 395, 398, 399, 400, 412, 422, 423, 429, 482, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 501, 565, 597, 598, 602, 603, 604, 605, 606, 607, 609, 611, 612, 613, 614, 632, 633, 634, 635, 639, 640, 641, 644, 645, 657, 714, 719, 849, 928, 929, 947, 965, 973, 976, 977, 978, 982, 984, 986, 987, 988], "corner": [11, 13, 24, 49, 150, 232, 236, 244, 245, 266, 338, 449, 861, 863, 932, 987], "cell": [11, 29, 266, 335, 343, 643, 932, 933, 979, 987], "xmin": [11, 71, 169, 171, 188, 189, 266], "x_left_lower_corn": [11, 266, 449], "grid_siz": [11, 56, 266, 449], "xmax": [11, 71, 169, 171, 188, 189, 266], "nx": [11, 31, 266, 449], "ymin": [11, 71, 166, 168, 171, 172, 180, 188, 235, 266], "y_left_lower_corn": [11, 266, 449], "ny": [11, 31, 234, 266, 335, 449, 922, 944], "create_species_bunch": 11, "species_nam": [11, 266], "record": [11, 86, 103, 153, 279, 313, 324, 338, 363, 365, 401, 408, 449, 571, 594, 643, 721, 724, 728, 729, 730, 731, 772, 795, 986, 987], "join": [11, 12, 18, 146, 197, 235, 275, 333, 352, 414, 967, 973, 981], "ascii": [11, 266, 371, 438, 539, 540, 542], "pt": [11, 333, 372, 825, 942], "desir": [11, 22, 101, 133, 147, 179, 181, 273, 277, 331, 338, 340, 342, 346, 357, 360, 363, 366, 367, 368, 372, 454, 489, 491, 495, 498, 518, 544, 553, 554, 615, 621, 636, 637, 659, 686, 789, 790, 794, 814, 816, 819, 820, 822, 823, 825, 826, 830, 833, 835, 837, 838, 873, 901, 924, 926, 929, 935, 942, 946, 947, 948, 958, 973, 981, 982, 983, 986], "pts_": 11, "ix": [11, 244, 306], "searchsort": 11, "dd": [11, 12, 116, 266, 449], "ii": [11, 86, 152, 186, 230, 335, 371, 533, 534, 540, 589, 617, 618, 812, 821, 928, 942, 951], "lat": [11, 266, 449], "cov_": [11, 75], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "randint": [11, 33, 74, 83, 110, 147, 153, 202, 209, 214, 247, 283, 340, 343, 350, 751, 768, 784, 785, 786, 788, 921, 922], "land": [11, 266, 352, 370], "water": 11, "land_refer": [11, 266], "80": [11, 15, 25, 62, 74, 91, 118, 126, 152, 158, 213, 279, 302, 303, 304, 311, 317, 320, 333, 335, 338, 361, 367, 372, 396, 461, 492, 664, 747, 761, 830, 843, 862, 921, 927, 928, 932, 939, 945, 948, 967], "standard": [11, 12, 24, 29, 31, 56, 64, 65, 67, 73, 74, 78, 86, 99, 102, 104, 105, 106, 107, 114, 118, 133, 135, 140, 142, 144, 151, 158, 164, 168, 177, 179, 188, 199, 200, 201, 211, 226, 230, 233, 234, 235, 236, 238, 273, 278, 297, 311, 324, 325, 330, 331, 332, 334, 335, 336, 338, 340, 341, 343, 344, 347, 349, 351, 354, 357, 359, 363, 365, 366, 367, 371, 373, 419, 423, 439, 447, 452, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 473, 475, 476, 481, 483, 486, 492, 503, 541, 545, 562, 585, 595, 596, 601, 602, 605, 606, 607, 615, 616, 623, 624, 625, 626, 627, 629, 638, 640, 644, 738, 753, 768, 786, 789, 790, 791, 792, 793, 795, 797, 798, 799, 800, 801, 802, 803, 813, 818, 819, 822, 825, 826, 827, 829, 837, 838, 839, 840, 847, 849, 850, 869, 921, 924, 928, 929, 932, 934, 935, 936, 938, 946, 947, 953, 956, 958, 963, 965, 966, 967, 969, 979, 980, 981, 982, 984, 985, 986], "cov_train": 11, "train_cover_std": 11, "coastlin": [11, 266, 335], "cyl": [11, 266], "llcrnrlat": [11, 266], "urcrnrlat": [11, 266], "llcrnrlon": [11, 266], "urcrnrlon": [11, 266], "drawcoastlin": [11, 266], "drawcountri": [11, 266], "9998": [11, 266], "k": [11, 12, 15, 16, 22, 24, 27, 28, 32, 33, 34, 38, 45, 49, 51, 55, 58, 60, 68, 69, 73, 81, 82, 83, 85, 92, 93, 98, 101, 107, 111, 114, 116, 117, 119, 120, 123, 126, 129, 130, 136, 138, 139, 143, 147, 148, 151, 152, 153, 161, 162, 164, 173, 176, 183, 191, 193, 210, 212, 213, 214, 221, 224, 235, 238, 239, 244, 245, 248, 253, 255, 256, 258, 259, 260, 261, 262, 264, 265, 266, 274, 275, 276, 277, 281, 285, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 310, 311, 313, 320, 325, 332, 333, 335, 338, 346, 347, 351, 360, 361, 362, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 392, 395, 398, 399, 400, 401, 402, 403, 404, 410, 411, 413, 420, 423, 439, 453, 455, 457, 463, 474, 482, 488, 492, 495, 496, 497, 500, 501, 504, 506, 508, 509, 510, 532, 540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 582, 590, 591, 599, 601, 602, 604, 605, 606, 607, 609, 610, 614, 615, 616, 617, 618, 620, 630, 631, 633, 634, 635, 636, 637, 639, 642, 646, 647, 655, 656, 659, 668, 676, 687, 693, 706, 708, 709, 711, 716, 719, 724, 725, 726, 727, 729, 741, 742, 743, 745, 746, 748, 752, 754, 755, 756, 759, 762, 763, 765, 766, 768, 773, 784, 789, 790, 791, 792, 793, 794, 795, 797, 799, 800, 801, 802, 803, 810, 814, 815, 816, 820, 821, 822, 824, 825, 829, 837, 842, 856, 864, 872, 881, 886, 906, 921, 922, 924, 925, 926, 928, 929, 930, 931, 934, 936, 937, 938, 940, 945, 946, 947, 948, 952, 955, 962, 968, 969, 973, 974, 975, 976, 979, 981, 982, 983, 985, 986, 987, 988], "solid": [11, 15, 28, 30, 110, 138, 191, 192, 206, 266, 275, 956], "z": [11, 15, 31, 53, 91, 107, 126, 137, 139, 152, 189, 191, 192, 193, 199, 201, 206, 211, 225, 259, 266, 268, 275, 278, 293, 298, 299, 303, 304, 305, 309, 335, 360, 368, 370, 504, 505, 536, 590, 615, 622, 636, 637, 640, 644, 650, 674, 735, 829, 928, 929, 936, 937, 988], "float64": [11, 13, 44, 110, 112, 113, 246, 285, 286, 325, 332, 338, 340, 351, 371, 429, 447, 448, 459, 460, 493, 532, 533, 540, 542, 592, 609, 624, 626, 688, 814, 822, 823, 851, 852, 854, 855, 858, 860, 867, 869, 903, 906, 908, 909, 910, 947, 958, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "idx": [11, 15, 18, 27, 41, 95, 101, 107, 119, 144, 152, 154, 163, 171, 178, 179, 188, 200, 215, 316, 364, 367], "9999": [11, 197, 266, 291, 449, 578, 981], "coverages_land": 11, "contourf": [11, 15, 107, 193, 211, 259, 266, 268, 275, 276, 293, 298, 304, 309, 582, 583], "pts_train": 11, "pts_test": 11, "auc": [11, 23, 179, 197, 215, 232, 235, 239, 242, 244, 245, 361, 653, 659, 738, 932, 978, 981, 985], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 31, 91, 95, 192, 193, 222, 242, 259, 260, 298, 304, 309, 363, 658, 932, 948], "fpr": [11, 207, 215, 232, 244, 245, 345, 543, 547, 649, 653, 657, 677, 739, 932, 970, 973], "tpr": [11, 207, 215, 232, 244, 245, 345, 653, 657, 739, 932, 970, 973], "threshold": [11, 23, 38, 60, 88, 95, 133, 148, 152, 154, 174, 207, 209, 232, 233, 234, 242, 252, 287, 316, 319, 351, 363, 368, 370, 372, 393, 394, 397, 420, 451, 459, 460, 482, 488, 493, 499, 500, 501, 514, 539, 542, 544, 548, 553, 554, 595, 618, 622, 627, 629, 643, 649, 651, 653, 654, 657, 658, 671, 676, 677, 689, 690, 706, 732, 738, 739, 742, 745, 746, 766, 784, 795, 796, 812, 814, 816, 832, 844, 845, 846, 854, 861, 863, 906, 928, 932, 935, 936, 938, 942, 945, 947, 948, 953, 973, 977, 978, 980, 981, 982, 983, 985, 986, 987, 989], "roc_curv": [11, 207, 232, 244, 653, 657, 677, 732, 738, 932, 973, 974, 975, 978, 979, 981, 986], "roc_auc": [11, 235, 239, 244, 245, 345, 585, 653, 932, 970], "area": [11, 31, 114, 179, 197, 215, 232, 235, 242, 244, 245, 299, 304, 308, 335, 338, 342, 349, 363, 370, 371, 653, 657, 658, 659, 692, 738, 739, 929, 932, 935, 951, 975], "roc": [11, 23, 104, 148, 205, 207, 215, 216, 228, 345, 361, 367, 455, 461, 515, 609, 653, 657, 658, 659, 677, 692, 732, 738, 739, 766, 775, 778, 816, 854, 938, 970, 975, 976, 978, 979, 983, 985], "ntime": [11, 246], "elaps": [11, 43, 62, 105, 106, 324, 415, 418, 520, 521, 808, 809, 810, 811], "plot_species_distribution_model": [11, 449], "emploi": [12, 135, 212, 365, 371, 373, 401, 429, 533, 540, 940, 956, 966, 979], "techniqu": [12, 64, 66, 87, 96, 100, 109, 125, 132, 147, 150, 187, 201, 203, 240, 257, 284, 289, 315, 326, 335, 349, 351, 361, 362, 363, 367, 368, 369, 370, 371, 372, 398, 399, 400, 401, 485, 505, 628, 640, 644, 645, 676, 706, 924, 928, 929, 931, 932, 935, 938, 940, 944, 946, 948, 953, 956, 961, 966, 967, 986], "histor": [12, 179, 953], "quot": [12, 14, 64, 236, 311, 312, 325, 332, 333, 336, 342, 362, 439, 440, 447, 932, 944, 947, 967, 988], "quantiti": [12, 108, 235, 242, 283, 324, 351, 363, 370, 672, 673, 674, 735, 805, 921, 923, 926, 928, 978], "daili": [12, 956], "price": [12, 69, 108, 118, 279, 922, 928, 956, 963], "link": [12, 16, 151, 152, 158, 179, 197, 221, 238, 263, 315, 325, 336, 337, 338, 339, 342, 346, 351, 361, 363, 365, 368, 373, 512, 513, 561, 599, 620, 631, 639, 656, 868, 870, 928, 935, 948, 949, 952, 955, 961, 965, 967, 971, 973, 976, 977, 980, 981, 984], "fluctuat": [12, 55, 179, 242, 981], "normalesup": [12, 29, 42, 61, 211], "2003": [12, 360, 363, 368, 371, 402, 403, 413, 464, 466, 640, 644, 784, 786, 928, 929, 934, 944, 981], "2008": [12, 365, 367, 368, 429, 485, 514, 541, 596, 615, 636, 637, 643, 667, 676, 706, 779, 784, 788, 805, 926, 929, 930, 932, 933, 934, 937, 938, 947], "calm": 12, "ago": [12, 953], "tech": [12, 335, 787], "firm": [12, 363], "crash": [12, 338, 419, 839, 840, 847, 942, 977, 981], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 346, 805, 937, 965], "msft": 12, "ibm": [12, 18, 292, 313, 333], "twx": 12, "warner": [12, 988], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 967], "amzn": 12, "amazon": 12, "tm": [12, 935], "toyota": 12, "caj": 12, "canon": [12, 351, 361, 370, 433, 434, 436, 718, 953, 954, 969], "sne": [12, 148, 198, 199, 200, 201, 203, 465, 476, 643, 968, 969], "soni": [12, 983, 985], "ford": 12, "hmc": 12, "honda": 12, "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 806, 807, 936], "boe": 12, "ko": [12, 24, 136], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 73, 74, 365, 420, 425], "mcdonald": 12, "pep": [12, 346, 973], "pepsi": 12, "kellogg": 12, "un": [12, 338, 361, 371, 375, 484, 540, 743, 812, 821, 832, 836, 982], "unilev": 12, "mar": [12, 950], "marriott": 12, "pg": [12, 344, 600, 928, 978], "procter": 12, "gambl": 12, "colgat": [12, 16], "palmol": 12, "ge": [12, 923, 934, 985], "electr": [12, 335, 363], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 956], "chase": [12, 973], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 956], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 324, 336, 349, 933, 950], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": 12, "instrument": [12, 86, 150], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 983], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 121], "dynam": [12, 152, 506, 507, 514, 530, 531, 627, 628, 629, 948, 952, 956, 979, 985], "rtn": 12, "raytheon": 12, "cat": [12, 65, 152, 153, 284, 285, 286, 333, 371, 533, 663, 669, 704, 733, 830, 932, 942, 982, 983, 985], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 313, 325, 340, 344, 365, 371, 450, 533, 539, 540, 542, 861, 863, 952], "fetch": [12, 16, 118, 151, 197, 331, 332, 333, 338, 342, 343, 346, 362, 368, 447, 506, 507, 514, 539, 540, 542, 981], "histori": [12, 327, 497, 510, 511, 950, 973], "stderr": [12, 778], "url": [12, 16, 332, 335, 342], "githubusercont": 12, "master": [12, 15, 253, 338, 342, 956, 978], "financi": [12, 363, 370, 928], "csv": [12, 332, 335, 343, 955, 981, 986], "read_csv": [12, 343, 988], "close_pric": 12, "vstack": [12, 24, 52, 60, 138, 139, 161, 221, 225, 253, 266, 304, 582, 933, 981], "q": [12, 65, 77, 111, 179, 284, 360, 363, 368, 885, 928, 947], "open_pric": 12, "carri": [12, 28, 147, 235, 238, 243, 269, 275, 313, 352, 357, 371, 508, 509, 510, 511, 515, 516, 517, 857, 858, 859, 860, 956, 966], "invers": [12, 50, 70, 148, 226, 244, 299, 312, 313, 330, 351, 362, 364, 366, 367, 368, 371, 375, 397, 416, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 478, 484, 485, 486, 490, 492, 494, 508, 512, 515, 540, 541, 542, 579, 595, 596, 609, 610, 617, 619, 625, 626, 627, 628, 629, 631, 674, 693, 702, 745, 746, 791, 792, 799, 800, 806, 807, 809, 813, 816, 822, 823, 825, 841, 842, 849, 850, 851, 854, 855, 857, 859, 875, 926, 928, 932, 935, 936, 942, 946, 947, 965, 967, 968, 969, 973, 976, 981, 984, 985, 987], "correl": [12, 25, 75, 77, 78, 96, 115, 129, 132, 140, 148, 149, 150, 152, 153, 168, 174, 197, 235, 252, 279, 282, 283, 307, 331, 334, 335, 343, 351, 353, 360, 365, 367, 372, 373, 401, 408, 433, 434, 436, 444, 445, 451, 475, 515, 557, 560, 578, 585, 586, 587, 633, 634, 693, 707, 728, 729, 730, 775, 789, 790, 826, 827, 829, 838, 923, 928, 933, 939, 942, 946, 948, 953, 954, 969, 973, 974, 975, 986, 987], "condition": [12, 25, 179, 361, 365, 708, 926], "connect": [12, 35, 40, 43, 47, 50, 57, 61, 62, 336, 338, 347, 351, 365, 393, 397, 403, 413, 414, 536, 537, 646, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 930, 935, 937, 945, 977, 986], "edge_model": 12, "graphicallassocv": [12, 75, 365, 422, 424, 425, 426, 427, 429, 981, 985, 987], "seri": [12, 75, 105, 150, 153, 161, 179, 199, 215, 219, 240, 285, 288, 330, 333, 343, 351, 363, 440, 441, 442, 443, 447, 451, 452, 453, 455, 456, 461, 492, 641, 645, 768, 865, 923, 928, 929, 933, 935, 946, 952, 976, 979, 980, 981, 985, 988], "rather": [12, 49, 75, 102, 146, 151, 179, 180, 193, 277, 278, 311, 312, 320, 325, 334, 338, 340, 343, 344, 346, 349, 350, 351, 352, 363, 367, 368, 370, 371, 373, 399, 412, 414, 516, 532, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 580, 597, 598, 603, 604, 611, 612, 613, 614, 731, 761, 780, 782, 783, 812, 849, 850, 861, 886, 926, 928, 929, 932, 934, 935, 939, 953, 962, 965, 973, 974, 975, 976, 980, 981, 982, 983, 988], "former": [12, 313, 370, 371, 516, 749, 756, 765, 934, 973, 979, 982], "recoveri": [12, 75, 178, 365], "group": [12, 33, 36, 53, 55, 120, 152, 154, 179, 200, 227, 230, 279, 290, 312, 319, 333, 343, 351, 352, 363, 369, 370, 371, 386, 446, 539, 540, 542, 545, 669, 738, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 776, 822, 823, 859, 860, 928, 929, 931, 932, 933, 942, 948, 949, 950, 952, 958, 961, 962, 979, 980, 981, 982, 985, 986, 987, 989], "amongst": [12, 948], "indic": [12, 18, 23, 24, 25, 44, 54, 55, 61, 69, 78, 85, 104, 140, 143, 147, 150, 152, 176, 201, 210, 229, 237, 238, 241, 242, 253, 266, 288, 289, 292, 311, 312, 313, 319, 325, 333, 338, 339, 340, 342, 346, 347, 349, 351, 360, 361, 363, 365, 367, 368, 370, 371, 373, 374, 378, 389, 392, 396, 401, 402, 403, 404, 406, 407, 408, 411, 415, 418, 423, 438, 459, 460, 462, 463, 464, 474, 483, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 532, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 571, 578, 579, 580, 581, 583, 584, 590, 598, 601, 602, 604, 605, 606, 612, 614, 616, 624, 626, 633, 634, 641, 643, 645, 647, 654, 658, 663, 664, 669, 670, 671, 675, 678, 679, 680, 681, 684, 688, 689, 690, 691, 704, 721, 728, 729, 730, 731, 733, 734, 735, 737, 738, 740, 741, 742, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 780, 782, 783, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 813, 816, 820, 822, 830, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 865, 869, 870, 875, 890, 895, 896, 922, 927, 928, 929, 932, 933, 934, 935, 936, 939, 940, 942, 943, 946, 947, 953, 958, 962, 965, 967, 973, 974, 975, 976, 977, 978, 981, 983, 984, 986, 988, 989], "reflect": [12, 36, 42, 43, 73, 83, 86, 108, 152, 153, 179, 197, 244, 257, 312, 334, 337, 342, 351, 353, 360, 401, 407, 929, 932, 938, 940, 966, 974, 982], "properti": [12, 23, 142, 143, 181, 196, 222, 255, 278, 319, 324, 327, 331, 338, 340, 354, 360, 361, 363, 365, 368, 370, 372, 373, 378, 394, 397, 402, 403, 404, 415, 416, 433, 434, 435, 493, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 541, 542, 544, 545, 548, 561, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 583, 597, 603, 606, 611, 613, 625, 626, 650, 655, 656, 659, 747, 750, 751, 761, 777, 778, 808, 809, 822, 823, 824, 830, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 921, 924, 927, 928, 929, 932, 933, 935, 938, 942, 945, 947, 948, 949, 953, 958, 978, 982, 983, 987], "impact": [12, 23, 32, 33, 69, 129, 148, 150, 151, 152, 181, 197, 219, 229, 278, 286, 312, 320, 324, 325, 331, 349, 352, 361, 363, 368, 398, 400, 487, 491, 498, 541, 617, 618, 619, 623, 625, 627, 628, 629, 643, 742, 747, 750, 751, 761, 772, 789, 790, 826, 838, 872, 886, 903, 906, 921, 931, 939, 947, 980, 983, 986], "affinity_propag": [12, 40], "covariance_": [12, 31, 73, 75, 420, 421, 422, 423, 424, 425, 426, 427, 500, 501, 926, 980], "n_label": [12, 83, 213, 351, 438, 474, 664, 671, 676, 689, 690, 704, 706, 740, 741, 767, 932, 979, 981], "lai": [12, 278, 938], "canva": [12, 15], "manifold": [12, 35, 48, 62, 202, 203, 204, 253, 281, 285, 286, 290, 327, 331, 351, 363, 368, 370, 453, 476, 481, 495, 500, 517, 798, 810, 819, 842, 872, 935, 968, 969, 973, 974, 976, 977, 978, 979, 980, 989], "dens": [12, 148, 157, 285, 286, 292, 324, 347, 351, 363, 368, 370, 372, 395, 398, 400, 415, 418, 447, 474, 475, 485, 486, 495, 517, 536, 537, 558, 559, 580, 603, 608, 609, 610, 617, 619, 623, 624, 627, 628, 629, 638, 639, 640, 643, 644, 710, 711, 717, 729, 740, 806, 807, 814, 821, 822, 824, 826, 827, 829, 838, 839, 840, 841, 842, 849, 850, 851, 852, 854, 855, 887, 903, 906, 922, 925, 928, 929, 932, 933, 935, 938, 942, 944, 945, 946, 947, 948, 973, 975, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989], "eigen_solv": [12, 40, 42, 61, 199, 200, 368, 403, 413, 486, 639, 640, 642, 644, 646, 929, 974, 983, 986, 987, 988], "arpack": [12, 18, 40, 42, 61, 200, 368, 402, 403, 404, 413, 486, 492, 495, 639, 640, 642, 644, 646, 929, 979, 980, 985], "don": [12, 50, 109, 151, 200, 213, 235, 253, 291, 296, 300, 307, 324, 332, 338, 340, 342, 344, 346, 349, 350, 364, 371, 597, 603, 777, 857, 858, 859, 860, 896, 921, 928, 931, 933, 936, 938, 946, 955, 967, 977, 982, 989], "control": [12, 15, 56, 89, 90, 123, 140, 142, 180, 187, 209, 210, 236, 238, 255, 282, 284, 315, 317, 318, 324, 325, 331, 334, 338, 340, 343, 346, 349, 351, 354, 357, 362, 363, 366, 367, 368, 369, 372, 373, 386, 392, 400, 405, 422, 423, 429, 482, 487, 488, 489, 490, 491, 494, 496, 497, 498, 499, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 544, 545, 547, 565, 570, 576, 578, 581, 583, 585, 590, 592, 593, 597, 598, 600, 601, 602, 603, 605, 606, 607, 623, 625, 627, 628, 633, 634, 638, 643, 652, 660, 745, 746, 747, 749, 750, 751, 752, 753, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 775, 776, 779, 780, 783, 806, 807, 828, 830, 841, 842, 849, 850, 851, 852, 854, 855, 857, 858, 859, 860, 863, 898, 919, 921, 928, 929, 931, 932, 933, 935, 938, 939, 942, 944, 946, 947, 948, 952, 953, 954, 965, 969, 973, 975, 977, 978, 981, 982, 983, 984, 985, 986, 987], "neighbor": [12, 28, 35, 40, 43, 55, 116, 119, 125, 146, 147, 200, 201, 203, 206, 214, 215, 257, 258, 259, 260, 262, 263, 264, 266, 283, 285, 286, 311, 327, 330, 335, 347, 351, 363, 369, 370, 371, 374, 377, 385, 393, 396, 397, 399, 401, 403, 408, 409, 412, 414, 447, 453, 455, 514, 521, 553, 558, 559, 578, 579, 639, 640, 641, 642, 643, 644, 647, 731, 747, 775, 809, 810, 829, 845, 853, 906, 933, 938, 953, 954, 961, 966, 968, 969, 973, 975, 976, 977, 978, 979, 980], "node": [12, 37, 108, 112, 281, 315, 319, 346, 347, 363, 365, 368, 370, 393, 394, 397, 414, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 601, 605, 607, 633, 634, 643, 789, 790, 857, 858, 859, 860, 861, 863, 891, 900, 935, 937, 938, 939, 948, 976, 977, 978, 979, 980, 982, 985, 986, 987, 988], "plane": [12, 191, 211, 259, 298, 301, 303, 304, 309, 335, 403, 413, 926, 928, 947, 965], "node_position_model": 12, "locallylinearembed": [12, 199, 200, 201, 285, 639, 641, 643, 929, 935, 978, 979, 987, 988, 989], "n_neighbor": [12, 40, 57, 62, 119, 146, 199, 200, 201, 203, 206, 215, 253, 255, 256, 259, 260, 261, 262, 264, 265, 278, 281, 283, 311, 370, 403, 553, 558, 559, 579, 639, 640, 642, 644, 647, 791, 792, 793, 795, 797, 798, 802, 844, 845, 922, 929, 935, 938, 945, 980, 987, 989], "output": [12, 14, 15, 23, 25, 33, 49, 54, 88, 97, 102, 107, 108, 118, 125, 126, 135, 143, 146, 147, 148, 151, 175, 205, 219, 224, 229, 233, 235, 238, 242, 244, 245, 253, 274, 277, 279, 281, 284, 285, 312, 313, 314, 319, 331, 332, 333, 335, 338, 340, 344, 346, 349, 350, 351, 361, 362, 363, 364, 366, 367, 370, 371, 372, 379, 383, 385, 389, 393, 394, 395, 397, 398, 400, 401, 403, 410, 411, 413, 414, 415, 416, 417, 418, 419, 433, 434, 435, 436, 439, 442, 443, 444, 445, 446, 447, 448, 454, 456, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 578, 579, 580, 581, 582, 583, 584, 586, 589, 590, 591, 592, 593, 597, 598, 601, 603, 604, 605, 608, 609, 611, 612, 613, 614, 617, 618, 619, 622, 624, 625, 627, 629, 630, 632, 633, 634, 635, 639, 640, 641, 643, 645, 647, 650, 651, 664, 665, 672, 673, 674, 676, 678, 685, 692, 695, 696, 698, 700, 701, 702, 703, 704, 706, 711, 717, 722, 735, 738, 745, 746, 749, 750, 751, 752, 753, 759, 761, 762, 763, 764, 765, 766, 767, 770, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 792, 793, 794, 798, 799, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 837, 838, 841, 842, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 870, 872, 875, 886, 887, 899, 919, 921, 922, 924, 926, 928, 929, 932, 933, 934, 935, 936, 939, 942, 947, 954, 958, 959, 961, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "edg": [12, 24, 42, 61, 88, 108, 202, 242, 346, 351, 360, 363, 365, 404, 512, 513, 536, 537, 539, 540, 542, 745, 786, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 814, 862, 942, 945, 956, 979, 981, 984, 987], "displai": [12, 23, 25, 31, 33, 42, 44, 55, 65, 74, 75, 77, 78, 80, 85, 109, 114, 115, 118, 148, 151, 152, 164, 166, 183, 197, 205, 206, 215, 225, 232, 236, 237, 242, 249, 263, 279, 282, 283, 303, 316, 324, 338, 341, 345, 347, 354, 364, 368, 371, 372, 390, 415, 418, 419, 447, 492, 515, 581, 582, 583, 609, 638, 648, 649, 651, 652, 653, 664, 669, 732, 739, 747, 753, 761, 775, 809, 810, 822, 824, 829, 847, 854, 861, 862, 863, 877, 898, 919, 932, 936, 952, 969, 982, 984, 985, 987, 988, 989], "strength": [12, 118, 142, 179, 183, 236, 281, 324, 366, 370, 518, 519, 594, 599, 600, 603, 609, 610, 620, 623, 624, 625, 626, 627, 629, 631, 638, 733, 806, 807, 849, 850, 854, 855, 921, 928, 935, 938, 946, 947], "plan": [12, 332, 336, 338, 339, 352, 942, 976], "fair": [12, 370, 641, 645, 778, 933, 956], "crucial": [12, 150, 230, 324, 337, 338, 352, 363, 373, 947], "challeng": [12, 118, 135, 152, 158, 197, 206, 326, 333, 334, 363, 365, 413, 423, 932, 938, 956, 958], "overlap": [12, 33, 99, 112, 132, 202, 223, 312, 336, 360, 363, 367, 370, 371, 538, 740, 741, 748, 752, 754, 755, 756, 757, 765, 929, 942, 979], "heurist": [12, 14, 110, 311, 325, 363, 372, 400, 403, 412, 413, 459, 460, 488, 490, 497, 627, 628, 629, 642, 646, 750, 751, 851, 852, 853, 854, 855, 874, 929, 930, 935, 946, 948, 956, 965, 973, 974, 978, 982, 985, 986], "direct": [12, 77, 78, 81, 85, 87, 91, 94, 133, 185, 221, 227, 232, 262, 271, 278, 299, 304, 336, 338, 339, 342, 346, 352, 363, 366, 368, 371, 372, 403, 413, 422, 423, 429, 485, 492, 500, 539, 540, 542, 553, 592, 639, 798, 926, 928, 933, 935, 937, 953, 966, 973, 976], "nearest": [12, 13, 28, 29, 35, 36, 46, 47, 50, 53, 56, 75, 80, 85, 88, 139, 147, 170, 191, 195, 214, 257, 259, 262, 263, 271, 298, 299, 303, 304, 305, 309, 327, 330, 335, 347, 351, 363, 369, 370, 374, 377, 385, 396, 399, 401, 403, 408, 412, 413, 447, 453, 455, 558, 559, 578, 579, 581, 586, 639, 640, 642, 643, 647, 740, 741, 747, 775, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 809, 810, 814, 829, 906, 929, 938, 947, 953, 954, 961, 969, 973, 975, 976, 977, 978, 980, 981, 982, 983, 985], "along": [12, 13, 51, 54, 61, 78, 105, 111, 166, 179, 211, 239, 281, 312, 313, 320, 342, 344, 346, 347, 351, 354, 357, 360, 368, 370, 371, 372, 373, 375, 484, 501, 538, 562, 563, 581, 597, 598, 601, 602, 603, 604, 605, 606, 607, 611, 612, 613, 614, 627, 629, 632, 633, 634, 635, 636, 637, 729, 730, 740, 747, 761, 818, 819, 822, 823, 826, 827, 828, 829, 834, 835, 836, 838, 839, 840, 865, 888, 907, 913, 921, 928, 935, 942, 945, 956, 973, 978, 979, 981, 985, 986], "linecollect": [12, 202, 209, 583], "facecolor": [12, 15, 24, 31, 41, 55, 85, 92, 101, 126, 143, 199, 213, 235, 260, 275, 297, 300, 303, 304, 306], "partial_correl": 12, "precision_": [12, 75, 420, 421, 422, 423, 424, 425, 426, 427], "sqrt": [12, 73, 74, 75, 88, 91, 95, 103, 123, 158, 160, 202, 204, 217, 221, 222, 223, 226, 227, 235, 304, 363, 370, 371, 373, 414, 420, 421, 422, 423, 424, 425, 426, 427, 489, 491, 498, 508, 509, 510, 511, 515, 516, 570, 597, 598, 603, 604, 611, 612, 613, 614, 632, 635, 650, 681, 713, 714, 719, 829, 842, 857, 858, 859, 860, 924, 928, 929, 932, 934, 944, 987], "diag": [12, 75, 143, 223, 226, 368, 373, 483, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 745, 746, 928, 988], "newaxi": [12, 13, 18, 22, 38, 75, 95, 100, 136, 160, 169, 175, 180, 181, 182, 184, 185, 196, 209, 211, 249, 258, 265, 307, 317, 318, 360, 487, 928], "ab": [12, 16, 36, 69, 89, 96, 101, 108, 118, 129, 133, 154, 166, 170, 190, 192, 195, 197, 202, 235, 273, 297, 309, 363, 489, 491, 498, 578, 696, 789, 790, 824, 932], "triu": 12, "02": [12, 40, 46, 53, 57, 59, 75, 85, 88, 101, 107, 137, 150, 206, 213, 230, 242, 258, 268, 271, 273, 275, 293, 295, 316, 332, 335, 343, 367, 393, 397, 548, 609, 627, 747, 761, 828, 844, 858, 928], "nipy_spectr": [12, 35, 42, 43, 47, 48, 55, 56, 92], "start_idx": [12, 202], "end_idx": [12, 202], "sequenc": [12, 107, 167, 202, 340, 351, 364, 367, 368, 370, 371, 454, 463, 512, 513, 520, 521, 532, 533, 539, 540, 542, 597, 747, 750, 758, 775, 833, 889, 890, 895, 903, 906, 952, 973, 976, 978, 979], "line0": [12, 202], "linen": [12, 202], "x0": [12, 31, 171, 188, 202, 273, 296, 351, 383, 415, 518, 519, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 578, 579, 580, 581, 812, 813, 814, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830], "y0": [12, 202], "y1": [12, 82, 101, 202, 460, 667, 714, 933, 934], "xm": [12, 202], "ym": [12, 202], "segment": [12, 32, 43, 148, 202, 209, 333, 346, 363, 371, 403, 413, 459, 460, 642, 805, 932, 952, 956, 981, 983, 985], "stop": [12, 16, 40, 57, 97, 140, 142, 148, 152, 157, 181, 282, 338, 340, 346, 347, 351, 363, 368, 370, 372, 392, 393, 395, 397, 398, 400, 403, 405, 413, 414, 422, 423, 429, 433, 434, 435, 447, 455, 459, 460, 466, 471, 483, 487, 488, 489, 490, 491, 494, 496, 497, 498, 504, 505, 508, 509, 510, 511, 512, 513, 515, 516, 522, 539, 540, 542, 553, 568, 578, 595, 596, 597, 599, 600, 603, 607, 609, 610, 617, 618, 619, 620, 622, 627, 628, 629, 631, 642, 643, 646, 665, 745, 746, 775, 806, 807, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 891, 906, 921, 928, 936, 937, 947, 948, 953, 954, 956, 969, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 988], "lc": [12, 202, 209], "zorder": [12, 31, 53, 87, 115, 126, 136, 144, 169, 177, 200, 202, 209, 212, 221, 282, 303, 304], "hot_r": [12, 273], "norm": [12, 13, 14, 16, 31, 36, 50, 88, 91, 138, 141, 158, 165, 170, 202, 221, 222, 223, 225, 227, 232, 236, 258, 273, 299, 312, 344, 347, 351, 363, 371, 372, 394, 395, 398, 410, 411, 415, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 440, 482, 485, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 540, 541, 542, 548, 594, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 623, 625, 627, 629, 632, 635, 636, 637, 641, 643, 644, 645, 720, 786, 821, 836, 849, 851, 854, 914, 915, 925, 928, 930, 932, 942, 946, 976, 978, 980, 984], "set_arrai": [12, 202, 209], "set_linewidth": [12, 202, 209], "add_collect": [12, 202, 209], "index": [12, 14, 16, 27, 33, 34, 35, 36, 37, 45, 46, 53, 66, 104, 105, 109, 130, 140, 146, 150, 151, 153, 179, 197, 216, 219, 222, 223, 227, 230, 233, 234, 235, 236, 238, 246, 247, 253, 273, 278, 279, 285, 288, 289, 312, 313, 333, 335, 336, 338, 340, 342, 347, 349, 351, 360, 364, 367, 368, 370, 371, 378, 395, 398, 399, 400, 401, 402, 404, 405, 408, 410, 411, 415, 418, 454, 460, 508, 509, 510, 511, 515, 516, 517, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 568, 583, 584, 591, 648, 655, 656, 663, 667, 669, 681, 688, 707, 729, 730, 736, 738, 742, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 775, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 822, 857, 858, 859, 860, 890, 903, 906, 911, 912, 932, 934, 935, 936, 946, 948, 952, 965, 967, 973, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "dx": [12, 13, 477, 650], "dy": [12, 650], "this_dx": 12, "argmin": [12, 110, 234, 340, 365, 482, 488, 496, 497, 636, 729, 730, 948], "this_di": 12, "horizontalalign": [12, 24, 28, 36, 40, 41, 57, 92, 206, 221, 268, 275], "002": [12, 335], "verticalalign": [12, 24, 35, 36], "edgecolor": [12, 15, 22, 27, 28, 31, 38, 41, 51, 55, 62, 81, 82, 83, 92, 101, 107, 114, 116, 117, 119, 120, 126, 128, 136, 137, 139, 143, 152, 162, 171, 181, 188, 191, 192, 193, 210, 211, 212, 213, 221, 224, 235, 238, 249, 256, 259, 260, 261, 264, 268, 275, 276, 278, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 309, 316, 317, 318, 582], "ptp": 12, "03": [12, 48, 85, 221, 227, 289, 335, 371, 698, 747, 928, 932], "plot_stock_market": 12, "parallel": [13, 97, 103, 107, 148, 152, 181, 236, 282, 283, 285, 304, 319, 323, 330, 338, 339, 341, 342, 349, 351, 364, 372, 374, 375, 389, 396, 399, 400, 401, 403, 408, 409, 412, 415, 418, 423, 446, 482, 484, 485, 486, 488, 490, 492, 493, 494, 496, 497, 499, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 540, 545, 553, 561, 583, 585, 590, 609, 639, 640, 641, 642, 643, 644, 645, 724, 728, 731, 747, 750, 751, 753, 758, 761, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 782, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 808, 811, 844, 845, 900, 902, 953, 962, 967, 969, 973, 976, 977, 978, 979, 981, 982, 983, 984, 985, 988], "acquir": [13, 106, 237, 985], "angl": [13, 31, 88, 221, 222, 223, 226, 227, 335, 368, 482, 488, 490, 493, 494, 496, 497, 499, 601, 602, 603, 604, 605, 606, 607, 614, 615, 616, 629, 633, 634, 635, 636, 637, 643, 929, 930, 954, 969, 973], "Such": [13, 114, 135, 140, 150, 158, 168, 180, 238, 311, 351, 352, 367, 368, 370, 506, 507, 607, 922, 932, 935, 942, 948, 965, 983, 988], "ct": [13, 143, 219, 364, 415, 417, 418], "cellular": 13, "materi": [13, 352, 532, 839, 840, 951], "haar": 13, "wavelet": [13, 95, 368], "sparsiti": [13, 75, 148, 157, 172, 194, 195, 212, 312, 324, 351, 365, 368, 370, 372, 452, 453, 478, 482, 488, 489, 490, 491, 494, 496, 497, 498, 597, 603, 608, 609, 627, 629, 672, 673, 674, 818, 824, 829, 834, 925, 928, 935, 942, 961, 966, 975], "oper": [13, 18, 143, 148, 212, 228, 232, 242, 313, 324, 325, 335, 336, 338, 341, 344, 349, 351, 352, 354, 357, 359, 367, 368, 370, 371, 372, 376, 399, 412, 419, 426, 433, 434, 435, 436, 455, 484, 485, 492, 502, 503, 517, 523, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 567, 572, 575, 581, 586, 594, 609, 640, 644, 653, 657, 658, 659, 677, 724, 731, 732, 738, 739, 766, 775, 778, 789, 790, 812, 816, 821, 832, 833, 847, 854, 857, 888, 900, 905, 928, 935, 942, 947, 952, 956, 965, 977, 979, 980, 981, 983, 984, 989], "fidel": 13, "penal": [13, 27, 75, 118, 168, 172, 179, 195, 197, 278, 307, 363, 365, 368, 372, 420, 421, 422, 423, 424, 425, 426, 427, 429, 598, 603, 604, 612, 614, 627, 656, 666, 684, 736, 743, 822, 849, 856, 928, 932, 934, 936, 946, 947, 965], "account": [13, 87, 94, 140, 146, 151, 197, 235, 262, 307, 309, 312, 324, 334, 338, 351, 352, 357, 363, 366, 367, 368, 370, 371, 414, 518, 519, 578, 579, 581, 583, 584, 600, 624, 630, 655, 658, 678, 679, 680, 688, 693, 706, 733, 734, 737, 738, 748, 752, 765, 823, 924, 926, 930, 932, 933, 934, 935, 942, 946, 948, 978, 980, 981, 982, 985, 986, 988], "call": [13, 16, 42, 44, 46, 65, 83, 104, 110, 130, 135, 150, 152, 167, 179, 180, 197, 216, 218, 219, 235, 236, 244, 249, 250, 253, 255, 278, 283, 284, 312, 313, 319, 324, 325, 326, 333, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 354, 361, 363, 364, 365, 366, 367, 368, 370, 371, 373, 375, 384, 392, 395, 398, 400, 401, 402, 403, 404, 405, 408, 411, 413, 415, 416, 419, 420, 425, 433, 434, 435, 439, 442, 443, 446, 448, 454, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 528, 533, 534, 536, 537, 539, 540, 542, 548, 553, 558, 559, 561, 562, 565, 568, 571, 578, 579, 580, 581, 582, 583, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 640, 641, 642, 643, 644, 645, 646, 648, 650, 652, 655, 682, 692, 705, 721, 724, 728, 729, 730, 731, 741, 745, 746, 747, 749, 750, 751, 752, 753, 759, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 794, 795, 798, 800, 805, 806, 807, 808, 809, 812, 813, 814, 816, 818, 819, 821, 826, 829, 830, 833, 838, 839, 840, 841, 842, 846, 849, 850, 851, 852, 854, 855, 858, 860, 876, 880, 885, 886, 898, 899, 900, 903, 906, 916, 921, 922, 924, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 940, 942, 944, 945, 947, 948, 952, 956, 958, 962, 965, 966, 967, 969, 970, 973, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "algorithm": [13, 16, 17, 26, 32, 33, 38, 39, 41, 42, 51, 52, 56, 57, 61, 72, 77, 85, 87, 98, 99, 100, 101, 148, 156, 166, 168, 182, 195, 201, 203, 205, 209, 215, 222, 223, 224, 227, 232, 235, 244, 253, 259, 260, 262, 266, 273, 275, 278, 281, 282, 283, 286, 298, 311, 312, 320, 324, 326, 331, 332, 333, 334, 335, 338, 339, 340, 341, 346, 347, 350, 351, 353, 359, 360, 362, 363, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 420, 425, 426, 429, 433, 434, 435, 439, 454, 462, 463, 464, 465, 466, 473, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 495, 496, 497, 498, 499, 504, 505, 506, 507, 510, 511, 514, 542, 554, 555, 561, 562, 586, 588, 590, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 655, 656, 659, 668, 670, 685, 687, 693, 724, 728, 729, 741, 743, 745, 746, 777, 786, 787, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 805, 810, 814, 816, 829, 833, 845, 849, 850, 851, 852, 853, 854, 855, 857, 858, 869, 885, 886, 888, 897, 901, 907, 922, 924, 927, 929, 930, 932, 934, 937, 938, 942, 945, 946, 947, 951, 952, 953, 954, 956, 958, 961, 962, 964, 966, 967, 969, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "computation": [13, 71, 85, 110, 118, 135, 253, 311, 323, 339, 362, 363, 364, 367, 368, 370, 373, 489, 583, 584, 622, 713, 747, 749, 750, 751, 761, 772, 928, 929, 931, 939, 940, 944, 966, 969, 977], "comparison": [13, 18, 21, 26, 32, 38, 44, 72, 84, 86, 87, 111, 116, 121, 127, 134, 148, 153, 161, 165, 167, 170, 177, 194, 198, 201, 205, 209, 223, 228, 230, 232, 252, 268, 275, 277, 278, 281, 283, 293, 296, 310, 312, 320, 333, 335, 351, 361, 365, 366, 368, 372, 389, 395, 398, 400, 439, 455, 463, 465, 466, 473, 476, 492, 500, 501, 504, 515, 532, 533, 539, 540, 541, 542, 557, 559, 561, 562, 566, 573, 576, 590, 594, 609, 623, 639, 640, 641, 642, 643, 655, 688, 693, 729, 738, 747, 750, 761, 763, 775, 784, 787, 791, 806, 810, 818, 819, 821, 825, 826, 827, 829, 834, 835, 836, 837, 838, 839, 840, 849, 851, 852, 854, 855, 857, 921, 926, 929, 932, 934, 935, 938, 947, 970], "l2": [13, 27, 36, 75, 77, 148, 157, 164, 170, 179, 190, 194, 195, 197, 236, 253, 273, 292, 311, 312, 340, 347, 349, 363, 365, 368, 371, 393, 397, 401, 408, 475, 489, 491, 498, 509, 512, 513, 516, 540, 541, 542, 594, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 623, 627, 629, 631, 632, 637, 638, 639, 685, 700, 711, 712, 728, 729, 730, 761, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 806, 807, 821, 829, 836, 849, 850, 854, 855, 856, 858, 860, 915, 921, 925, 928, 930, 935, 936, 942, 946, 948, 965, 967, 975, 977, 978, 980, 982], "produc": [13, 23, 24, 40, 52, 64, 88, 111, 112, 113, 114, 241, 271, 291, 320, 333, 334, 338, 340, 343, 351, 352, 363, 364, 367, 368, 370, 392, 395, 403, 470, 487, 510, 514, 532, 539, 544, 545, 583, 584, 749, 750, 751, 759, 764, 767, 770, 814, 824, 851, 854, 923, 924, 928, 930, 931, 932, 935, 938, 939, 943, 945, 946, 947, 958, 975, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "circular": 13, "separ": [13, 22, 23, 27, 28, 36, 55, 57, 61, 67, 73, 84, 85, 90, 99, 101, 104, 106, 116, 147, 148, 152, 153, 156, 157, 180, 200, 213, 223, 235, 238, 244, 245, 273, 275, 278, 283, 291, 294, 299, 303, 304, 311, 320, 324, 334, 335, 340, 343, 346, 349, 351, 361, 363, 364, 365, 368, 370, 371, 373, 415, 463, 470, 484, 489, 491, 492, 498, 500, 532, 539, 540, 542, 561, 589, 597, 598, 624, 627, 628, 641, 645, 675, 682, 695, 696, 698, 703, 740, 766, 781, 782, 808, 809, 851, 853, 854, 859, 860, 921, 922, 924, 926, 928, 929, 931, 938, 939, 942, 946, 947, 963, 965, 966, 973, 976, 978, 979, 983, 985, 986], "central": [13, 181, 363, 938, 952], "emmanuel": [13, 61, 973, 980, 981, 982], "gouillart": [13, 61, 973], "nsup": 13, "ndimag": [13, 42, 43, 50, 271, 966], "_weight": [13, 197], "orig": 13, "floor_x": 13, "floor": 13, "astyp": [13, 33, 37, 40, 41, 49, 55, 57, 61, 74, 92, 108, 110, 126, 150, 169, 170, 197, 202, 212, 215, 246, 253, 371, 922, 928, 980], "int64": [13, 319, 351, 371, 381, 394, 399, 401, 539, 591, 665, 666, 785, 981, 984, 986, 988], "hstack": [13, 30, 31, 38, 120, 129, 204, 214, 230, 302, 367, 808], "_generate_center_coordin": 13, "l_x": 13, "mgrid": [13, 126, 303], "build_projection_oper": 13, "n_dir": 13, "endpoint": [13, 274, 302, 586], "data_ind": 13, "weight": [13, 14, 18, 22, 50, 64, 96, 99, 111, 119, 120, 129, 147, 148, 151, 157, 168, 170, 179, 183, 184, 193, 194, 195, 197, 217, 221, 238, 242, 244, 256, 265, 267, 268, 271, 278, 281, 284, 294, 301, 311, 312, 313, 320, 334, 335, 347, 349, 351, 363, 365, 366, 368, 369, 372, 374, 380, 384, 389, 392, 395, 396, 398, 400, 404, 410, 411, 414, 415, 416, 418, 420, 425, 433, 434, 435, 447, 466, 475, 489, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 537, 540, 541, 542, 544, 548, 553, 554, 561, 562, 579, 585, 586, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 638, 640, 644, 648, 649, 650, 651, 653, 654, 658, 659, 660, 663, 664, 667, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 684, 685, 686, 688, 689, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 719, 732, 733, 734, 735, 737, 738, 739, 742, 743, 744, 745, 746, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 805, 806, 807, 808, 811, 814, 828, 829, 830, 844, 845, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 874, 875, 888, 907, 913, 922, 923, 928, 929, 931, 932, 934, 935, 936, 937, 939, 942, 945, 946, 947, 948, 953, 958, 965, 967, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "camera_ind": 13, "data_unravel_indic": 13, "xrot": 13, "ind": [13, 38, 110, 120, 312, 789, 790], "mask": [13, 38, 61, 106, 179, 187, 233, 234, 292, 347, 351, 364, 370, 420, 425, 512, 513, 532, 536, 537, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 580, 581, 583, 584, 600, 622, 747, 750, 751, 761, 904, 922, 939, 973, 976, 978, 979, 981, 983], "logical_and": [13, 111], "proj_oper": 13, "coo_matrix": [13, 165, 403, 536, 537, 903, 906], "generate_synthetic_data": 13, "n_pt": 13, "36": [13, 87, 141, 302, 335, 344, 370, 371, 506, 507, 521, 685, 932, 967, 973], "ogrid": 13, "mask_out": 13, "rand": [13, 22, 33, 34, 35, 36, 40, 45, 53, 57, 93, 102, 115, 117, 128, 158, 201, 202, 206, 212, 249, 265, 282, 283, 292, 293, 306, 307, 312, 317, 318, 347, 495, 655, 656, 666, 707, 731, 736, 841, 842, 844, 845, 846, 944, 958, 973, 984, 985], "gaussian_filt": [13, 42, 43, 50, 966], "sigma": [13, 42, 43, 50, 73, 93, 111, 233, 235, 360, 365, 368, 370, 565, 600, 926, 928, 930, 934, 937, 966], "logical_xor": [13, 139, 305], "binary_eros": 13, "128": [13, 14, 179, 324, 487], "proj": [13, 600], "randn": [13, 30, 31, 35, 50, 60, 61, 73, 74, 88, 93, 114, 128, 135, 139, 150, 153, 163, 168, 173, 174, 178, 192, 193, 196, 222, 225, 226, 230, 242, 244, 245, 249, 259, 260, 282, 283, 298, 304, 305, 307, 309, 340, 343, 594, 621, 623, 629, 768, 852, 855], "rgr_ridg": 13, "rec_l2": 13, "cross": [13, 50, 53, 65, 68, 71, 75, 93, 107, 108, 110, 111, 122, 127, 131, 133, 151, 152, 157, 167, 179, 181, 197, 223, 224, 226, 228, 232, 235, 236, 237, 239, 241, 244, 249, 250, 257, 271, 274, 279, 281, 283, 291, 299, 307, 327, 333, 340, 341, 347, 349, 350, 351, 357, 358, 361, 364, 365, 368, 370, 371, 372, 373, 389, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 444, 452, 453, 455, 466, 492, 518, 519, 526, 544, 545, 548, 553, 557, 560, 593, 594, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 623, 624, 625, 626, 627, 629, 630, 632, 633, 634, 635, 636, 637, 652, 657, 664, 678, 691, 735, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 780, 783, 809, 810, 829, 830, 849, 851, 854, 892, 931, 932, 935, 936, 940, 942, 947, 948, 952, 953, 954, 956, 958, 961, 969, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "lassocv": [13, 118, 123, 151, 168, 370, 372, 602, 603, 605, 606, 607, 614, 635, 928, 962, 973, 976, 980, 983, 984, 986, 987], "rgr_lasso": 13, "rec_l1": 13, "131": [13, 51, 99, 344, 932, 974], "interpol": [13, 29, 36, 46, 47, 50, 53, 75, 80, 85, 88, 139, 142, 148, 157, 170, 195, 209, 214, 244, 257, 265, 271, 289, 299, 305, 373, 586, 596, 604, 614, 623, 635, 651, 658, 792, 800, 810, 824, 828, 923, 928, 932, 942, 980, 985], "132": [13, 51, 99, 370], "133": [13, 51, 99], "wspace": [13, 14, 35, 40, 41, 57, 73, 85, 99, 101, 179, 197, 206, 221, 223, 224, 227, 258, 266, 289, 296], "plot_tomography_l1_reconstruct": 13, "nmf": [14, 66, 344, 362, 371, 486, 489, 495, 498, 968, 969, 973, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989], "latentdirichletalloc": [14, 326, 343, 368, 952, 978, 980, 987, 988], "corpu": [14, 312, 313, 333, 368, 539, 540, 541, 542, 967, 974], "frobeniu": [14, 88, 395, 398, 410, 420, 421, 422, 423, 424, 425, 426, 427, 482, 488, 489, 491, 496, 497, 498, 928, 980], "kullback": [14, 199, 368, 489, 491, 498, 643, 929, 980], "leibler": [14, 199, 368, 489, 491, 498, 643, 929, 980], "diverg": [14, 110, 199, 204, 258, 489, 491, 498, 643, 805, 929, 931, 932, 937, 939, 980, 981, 986], "probabilist": [14, 25, 27, 75, 84, 134, 135, 138, 142, 148, 311, 351, 361, 369, 370, 389, 424, 427, 483, 485, 486, 492, 510, 539, 540, 561, 573, 594, 596, 627, 654, 691, 747, 771, 816, 851, 852, 854, 855, 925, 926, 928, 931, 932, 937, 942, 947, 948, 952, 956, 973, 976, 980], "semant": [14, 311, 312, 351, 495, 967, 968, 969, 975], "runnabl": [14, 342, 343], "coupl": [14, 48, 49, 200, 332, 333, 360, 361, 363, 372, 540, 855, 921, 947], "ten": [14, 18, 99, 200, 227, 333, 335, 370, 471, 854, 982], "polynomi": [14, 146, 148, 155, 157, 179, 185, 217, 235, 249, 283, 284, 296, 303, 306, 330, 334, 403, 442, 571, 590, 591, 592, 594, 623, 715, 724, 725, 775, 810, 819, 821, 824, 828, 849, 851, 852, 853, 854, 855, 927, 947, 954, 969, 985, 986], "lda": [14, 30, 31, 84, 148, 262, 320, 335, 359, 455, 487, 492, 500, 501, 798, 952, 954, 968, 969, 978], "proport": [14, 24, 36, 132, 165, 179, 186, 192, 206, 238, 260, 263, 309, 324, 333, 361, 363, 365, 367, 368, 370, 371, 390, 391, 420, 425, 466, 500, 501, 506, 508, 510, 511, 512, 513, 514, 515, 534, 535, 539, 542, 578, 583, 609, 610, 617, 618, 619, 625, 626, 627, 629, 647, 652, 663, 748, 749, 750, 751, 764, 767, 775, 795, 806, 807, 823, 849, 850, 851, 854, 855, 857, 859, 861, 863, 875, 921, 931, 932, 935, 938, 946, 947, 948, 978], "ensta": [14, 16, 33, 44, 56, 179, 197, 200, 236, 238, 311, 312, 313], "chyi": [14, 976, 977, 978, 979, 980], "kwei": [14, 976, 977, 978, 979, 980], "yau": [14, 976, 977, 978, 979, 980], "chyikwei": 14, "tfidfvector": [14, 18, 64, 236, 311, 333, 368, 371, 440, 539, 540, 541, 973, 975, 981, 982, 983, 986, 987], "countvector": [14, 292, 313, 333, 343, 364, 368, 371, 440, 487, 533, 540, 541, 542, 967, 973, 975, 978, 981, 982, 983, 984, 985, 986], "minibatchnmf": [14, 326, 368, 987, 989], "fetch_20newsgroup": [14, 18, 64, 236, 292, 311, 312, 313, 333, 440, 967, 978, 983], "2000": [14, 24, 36, 69, 86, 93, 109, 156, 224, 227, 235, 268, 285, 312, 333, 335, 363, 364, 370, 375, 403, 413, 484, 485, 510, 640, 642, 644, 693, 738, 745, 795, 825, 837, 929, 932, 938, 944, 958, 966], "n_top_word": 14, "batch_siz": [14, 18, 38, 59, 85, 88, 89, 312, 368, 400, 485, 487, 488, 489, 490, 497, 805, 806, 807, 889, 890, 898, 974, 981, 984, 986, 987], "init": [14, 38, 41, 53, 54, 56, 59, 152, 159, 199, 200, 202, 203, 204, 224, 253, 312, 341, 346, 363, 368, 370, 395, 398, 400, 402, 404, 410, 411, 489, 491, 498, 499, 510, 511, 583, 584, 641, 643, 645, 798, 929, 973, 982, 985, 987, 988], "nndsvda": [14, 368, 489, 491, 498, 982, 985], "plot_top_word": 14, "feature_nam": [14, 18, 96, 105, 112, 115, 133, 151, 153, 154, 188, 216, 256, 273, 281, 282, 283, 296, 311, 316, 331, 333, 343, 364, 441, 442, 443, 447, 451, 452, 453, 455, 456, 461, 533, 582, 583, 584, 861, 862, 863, 940, 948], "flatten": [14, 29, 202, 211, 233, 277, 296, 308, 344, 453, 520, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 798], "topic_idx": 14, "top_features_ind": 14, "argsort": [14, 16, 18, 19, 20, 110, 112, 153, 154, 179, 197, 281, 288, 289, 311, 312, 333, 940], "top_featur": 14, "barh": [14, 112, 146, 147, 150, 151, 153, 154, 219, 311, 312, 313], "fontdict": [14, 35], "invert_yaxi": [14, 147, 313], "labels": [14, 277], "set_vis": [14, 257, 263, 273], "40": [14, 50, 61, 71, 81, 85, 91, 114, 120, 135, 170, 171, 173, 196, 201, 203, 213, 225, 236, 259, 265, 270, 288, 289, 297, 298, 300, 302, 304, 306, 325, 333, 367, 446, 468, 469, 789, 790, 794, 806, 807, 921, 933, 942, 973, 974], "filter": [14, 42, 43, 185, 197, 233, 235, 255, 311, 340, 344, 347, 362, 363, 371, 399, 439, 440, 454, 539, 542, 546, 547, 548, 549, 724, 784, 878, 897, 934, 935, 964, 967, 983], "useless": [14, 107, 238, 344, 372, 466, 479, 609, 663, 928, 942, 982], "earli": [14, 40, 57, 97, 99, 107, 148, 157, 282, 351, 370, 393, 397, 400, 414, 447, 455, 466, 471, 487, 488, 489, 490, 497, 504, 505, 510, 511, 512, 513, 522, 578, 607, 617, 618, 619, 627, 629, 643, 775, 806, 807, 906, 929, 935, 942, 951, 953, 956, 973, 976, 977, 979, 980, 981, 982, 983, 984, 987, 988], "strip": [14, 197, 312, 324, 332, 333, 447], "header": [14, 64, 236, 311, 312, 333, 336, 371, 439, 440, 747, 750, 751, 761], "footer": [14, 64, 236, 311, 312, 333, 439, 440], "repli": [14, 337, 338, 341], "common": [14, 16, 18, 88, 130, 133, 148, 149, 230, 242, 283, 311, 313, 319, 324, 327, 332, 338, 340, 346, 349, 350, 353, 354, 360, 361, 362, 363, 364, 367, 369, 372, 373, 416, 418, 447, 541, 583, 604, 623, 624, 696, 703, 719, 762, 772, 775, 810, 812, 820, 821, 822, 827, 829, 834, 835, 837, 838, 839, 840, 888, 921, 922, 928, 935, 938, 942, 947, 948, 952, 953, 956, 958, 969, 973, 981, 983, 984, 988], "english": [14, 18, 311, 312, 313, 343, 371, 539, 540, 542, 952, 953, 967, 986], "occur": [14, 64, 179, 197, 320, 338, 340, 346, 352, 360, 363, 365, 367, 371, 459, 460, 523, 532, 539, 541, 542, 578, 622, 746, 747, 750, 751, 753, 761, 771, 772, 773, 776, 874, 932, 934, 942, 967, 973, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "95": [14, 27, 40, 48, 52, 62, 82, 91, 92, 107, 111, 142, 158, 181, 186, 223, 224, 227, 235, 236, 258, 266, 275, 285, 299, 320, 370, 478, 583, 584, 587, 598, 612, 698, 846, 928, 932, 933, 945, 967, 976], "data_sampl": 14, "tf": [14, 18, 210, 311, 312, 313, 333, 368, 472, 495, 539, 540, 541, 542, 788, 796, 821, 921, 930, 934, 942, 952, 967], "idf": [14, 18, 210, 311, 312, 313, 333, 368, 472, 495, 539, 540, 541, 542, 788, 796, 821, 921, 930, 934, 942, 967, 973], "tfidf_vector": 14, "max_df": [14, 236, 292, 311, 312, 539, 542, 984], "min_df": [14, 18, 64, 236, 292, 311, 312, 371, 539, 542, 973, 975, 984], "max_featur": [14, 28, 103, 113, 214, 232, 247, 283, 370, 372, 506, 507, 508, 509, 510, 511, 514, 515, 516, 539, 542, 548, 857, 858, 859, 860, 921, 928, 973, 975, 976, 980, 981, 984, 987], "stop_word": [14, 18, 311, 312, 371, 539, 540, 542], "tfidf": [14, 64, 292, 371, 542, 967], "tf_vector": 14, "beta_loss": [14, 489, 491, 498, 980], "alpha_w": [14, 368, 489, 491, 498, 986], "00005": 14, "alpha_h": [14, 368, 489, 491, 498, 986], "tfidf_feature_nam": 14, "get_feature_names_out": [14, 18, 151, 153, 284, 311, 312, 313, 333, 340, 351, 364, 371, 379, 383, 385, 394, 395, 397, 398, 400, 415, 418, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 517, 518, 519, 520, 521, 532, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 639, 640, 643, 793, 798, 801, 805, 808, 809, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 942, 986, 987, 988, 989], "solver": [14, 27, 30, 31, 42, 61, 148, 157, 168, 170, 171, 172, 179, 181, 194, 195, 197, 268, 269, 270, 271, 311, 344, 349, 351, 354, 359, 363, 375, 403, 413, 422, 423, 429, 453, 484, 486, 491, 492, 495, 498, 500, 597, 598, 599, 603, 604, 609, 610, 611, 612, 613, 614, 617, 619, 620, 621, 623, 625, 627, 631, 632, 635, 638, 639, 640, 642, 644, 646, 738, 761, 775, 780, 783, 806, 807, 851, 852, 853, 854, 855, 926, 929, 932, 936, 946, 947, 952, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "mu": [14, 73, 74, 235, 368, 376, 424, 426, 427, 430, 431, 432, 491, 498, 926, 928, 980, 983], "mbnmf": 14, "learning_method": [14, 343, 487], "learning_offset": [14, 487], "tf_feature_nam": 14, "plot_topics_extraction_with_nmf_lda": 14, "graphic": [15, 18, 74, 152, 292, 311, 312, 313, 333, 344, 362, 363, 365, 368, 740, 741, 745, 779, 861, 932, 933, 939, 952, 967], "frontend": [15, 344], "mainli": [15, 25, 49, 102, 135, 244, 324, 340, 361, 562, 934, 939], "intend": [15, 52, 53, 89, 180, 311, 338, 339, 340, 345, 349, 367, 419, 533, 624, 650, 818, 819, 829, 847, 927, 928, 932, 936, 943], "didact": [15, 338, 953], "click": [15, 208, 217, 236, 282, 338, 346, 956, 958, 960], "region": [15, 23, 32, 43, 45, 49, 51, 61, 119, 142, 148, 151, 179, 197, 206, 210, 211, 227, 276, 299, 335, 345, 351, 363, 370, 373, 399, 401, 407, 413, 538, 929, 932, 935, 938, 942, 946, 948, 966], "induc": [15, 24, 51, 151, 170, 172, 177, 180, 194, 212, 313, 360, 362, 368, 370, 373, 400, 490, 494, 504, 508, 509, 510, 511, 515, 516, 517, 594, 676, 706, 822, 857, 858, 859, 860, 925, 932, 946, 965], "mous": [15, 332], "button": [15, 338, 346, 965], "prettenho": 15, "tkagg": 15, "backend": [15, 325, 351, 419, 847, 898, 900, 902, 932, 976, 981, 982, 983, 984], "backend_tkagg": 15, "figurecanvastkagg": 15, "navigationtoolbar2tk": 15, "navigationtoolbar2tkagg": 15, "deprec": [15, 284, 327, 341, 342, 347, 351, 375, 389, 393, 397, 398, 400, 401, 408, 410, 477, 484, 487, 488, 490, 497, 504, 505, 506, 507, 520, 521, 530, 531, 533, 553, 578, 581, 583, 584, 589, 601, 602, 605, 606, 607, 609, 615, 616, 622, 643, 650, 691, 706, 718, 728, 729, 730, 750, 751, 784, 785, 786, 788, 796, 808, 814, 822, 851, 852, 853, 854, 855, 865, 880, 881, 883, 921, 922, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989], "contourset": 15, "tkinter": 15, "tk": 15, "dump_svmlight_fil": [15, 973, 974, 978, 988], "y_min": [15, 28, 31, 53, 81, 101, 107, 116, 126, 137, 211, 268, 275, 293, 303, 304, 586, 588], "y_max": [15, 28, 31, 53, 81, 101, 107, 116, 126, 137, 197, 211, 268, 275, 293, 303, 304, 586, 588], "x_min": [15, 28, 31, 48, 53, 81, 101, 107, 111, 116, 126, 137, 168, 211, 268, 275, 293, 303, 304], "x_max": [15, 28, 31, 48, 53, 81, 101, 107, 116, 126, 137, 211, 268, 275, 293, 303, 304], "notifi": [15, 523, 524, 525, 955, 971, 983], "regist": [15, 311, 344, 900, 902], "surfac": [15, 97, 148, 171, 188, 295, 296, 314, 370, 455, 504, 508, 515, 714, 857, 863, 926, 931, 946, 947, 948], "surface_typ": 15, "add_observ": 15, "set_surfac": 15, "intvar": 15, "coef0": [15, 156, 306, 403, 486, 590, 591, 594, 725, 727, 851, 852, 853, 854, 855, 930, 947], "kernel_map": 15, "hasattr": [15, 40, 51, 57, 75, 107, 197, 210, 268, 275, 311, 351, 893, 983], "decision_surfac": 15, "delta": [15, 366, 403], "clear_data": 15, "add_exampl": 15, "example_ad": 15, "refit": [15, 105, 123, 148, 228, 234, 236, 239, 351, 367, 373, 453, 518, 578, 610, 616, 664, 747, 750, 751, 761, 775, 854, 921, 928, 932, 980, 981, 982], "docstr": [15, 338, 340, 344, 351, 399, 412, 423, 650, 652, 876, 921, 932, 935, 936, 946, 973, 980, 981, 986, 987], "set_xlim": [15, 28, 38, 55, 69, 73, 83, 104, 116, 147, 152, 177, 179, 184, 211, 221, 239, 241, 242, 258, 268, 273, 275, 276, 277, 278, 282, 308], "attributeerror": [15, 364, 510, 528, 893, 966, 982, 983, 985], "get_tk_widget": 15, "pack": [15, 347, 981], "fill": [15, 31, 107, 123, 153, 230, 258, 316, 351, 364, 368, 466, 478, 489, 491, 498, 538, 581, 861, 863, 922, 935, 948], "_tkcanva": 15, "mpl_connect": 15, "button_press_ev": 15, "onclick": 15, "toolbar": 15, "controllbar": 15, "c_label": 15, "plot_kernel": 15, "60": [15, 54, 67, 75, 191, 199, 200, 224, 248, 302, 311, 332, 363, 367, 401, 408, 664, 747, 932, 942, 963, 973, 976], "exp": [15, 42, 50, 61, 91, 95, 102, 111, 136, 163, 189, 258, 263, 266, 282, 283, 361, 363, 364, 369, 375, 403, 416, 472, 484, 487, 566, 567, 573, 592, 709, 716, 726, 806, 807, 825, 926, 928, 930, 934, 935, 936, 945, 946, 947, 965], "xdata": 15, "ydata": 15, "update_exampl": 15, "scalex": 15, "scalei": 15, "examples_load": 15, "remove_surfac": 15, "plot_support_vector": 15, "plot_decision_surfac": 15, "old": [15, 197, 338, 344, 363, 487, 597, 603, 929, 953, 955, 973, 978, 979, 981, 986, 987, 988], "isinst": [15, 107, 197, 351], "lineset": 15, "support_vector": [15, 297], "place": [15, 55, 207, 216, 257, 324, 336, 338, 339, 340, 343, 345, 352, 361, 371, 373, 393, 397, 433, 434, 435, 466, 532, 541, 579, 581, 582, 718, 731, 745, 911, 912, 952, 973, 980, 983, 984, 986], "circl": [15, 55, 90, 116, 117, 126, 204, 213, 260, 263, 269, 273, 275, 290, 318, 334, 342, 346, 363, 403, 413, 465, 473, 714, 947], "dash": [15, 30, 73, 99, 110, 120, 135, 138, 140, 151, 166, 171, 174, 180, 181, 188, 191, 192, 215, 235, 245, 301, 305, 946], "bone": [15, 192, 309], "85": [15, 16, 46, 88, 194, 246, 271, 289, 320, 370, 391, 451, 506, 507, 548, 603, 609, 695, 703, 738, 747, 773, 932, 933, 963, 973], "rais": [15, 180, 213, 238, 277, 284, 338, 340, 342, 343, 344, 347, 349, 351, 357, 364, 367, 375, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 484, 501, 510, 518, 524, 527, 528, 539, 540, 542, 554, 568, 580, 581, 583, 586, 587, 622, 647, 649, 650, 653, 660, 662, 663, 664, 665, 677, 679, 680, 688, 706, 728, 732, 733, 734, 737, 738, 739, 745, 746, 747, 750, 751, 753, 761, 771, 772, 773, 776, 781, 796, 798, 799, 804, 808, 813, 814, 822, 823, 827, 828, 829, 836, 852, 853, 854, 855, 864, 867, 869, 870, 872, 873, 890, 893, 916, 917, 918, 919, 932, 942, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "valueerror": [15, 213, 340, 344, 375, 419, 484, 528, 554, 568, 586, 622, 665, 781, 799, 808, 814, 828, 868, 872, 873, 917, 918, 919, 932, 942, 975, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987], "fm": 15, "kernel_group": 15, "radiobutton": 15, "command": [15, 210, 324, 325, 336, 338, 342, 344, 346, 354, 371, 459, 952, 967, 975], "anchor": [15, 246], "valbox": 15, "stringvar": 15, "textvari": 15, "cmap_group": 15, "hyperplan": [15, 148, 157, 171, 188, 213, 238, 294, 296, 299, 304, 463, 609, 610, 617, 619, 625, 626, 627, 628, 849, 851, 853, 854, 946, 947], "train_button": 15, "get_pars": 15, "optpars": 15, "optionpars": 15, "op": [15, 342, 609, 610, 617, 619, 627, 628, 629, 806, 807, 849, 942], "add_opt": 15, "action": [15, 284, 337, 341, 342, 354, 942, 983], "store": [15, 29, 49, 64, 66, 74, 81, 130, 143, 156, 165, 168, 200, 207, 216, 226, 240, 244, 288, 313, 319, 324, 332, 333, 338, 340, 345, 346, 347, 349, 351, 364, 366, 368, 370, 371, 373, 374, 390, 392, 396, 401, 408, 420, 421, 424, 425, 426, 427, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 454, 459, 485, 486, 492, 500, 501, 506, 507, 514, 520, 521, 540, 561, 562, 578, 582, 583, 586, 589, 600, 601, 605, 611, 612, 613, 614, 617, 618, 624, 626, 627, 628, 629, 639, 640, 641, 643, 648, 649, 651, 652, 653, 731, 745, 746, 747, 753, 761, 789, 790, 791, 792, 793, 795, 797, 798, 799, 800, 801, 804, 820, 827, 829, 830, 844, 845, 846, 869, 870, 903, 906, 922, 924, 928, 935, 944, 947, 948, 952, 958, 967, 970, 973, 974, 975, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989], "dest": 15, "dump": [15, 16, 357, 438, 789, 790], "argv": [15, 210], "opt": [15, 336, 340], "arg": [15, 269, 339, 351, 368, 370, 377, 522, 523, 524, 525, 526, 527, 528, 529, 568, 650, 813, 928, 934, 935], "parse_arg": 15, "wm_titl": 15, "mainloop": 15, "__main__": [15, 292, 349], "svm_gui": [15, 965], "classic": [16, 174, 203, 215, 221, 227, 335, 342, 365, 367, 368, 395, 398, 400, 410, 443, 451, 455, 461, 583, 584, 859, 860, 926, 928, 934, 942, 961, 973, 974, 978, 987], "graph": [16, 23, 35, 40, 42, 61, 62, 143, 199, 232, 253, 255, 291, 324, 338, 341, 351, 360, 365, 374, 393, 396, 397, 403, 404, 408, 413, 414, 422, 423, 429, 462, 536, 537, 639, 642, 643, 646, 732, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 804, 845, 929, 932, 935, 937, 945, 948, 952, 956, 963, 966, 973, 980, 981, 983, 986, 988], "vertex": [16, 24, 404, 986], "en": [16, 22, 346, 482, 488, 546, 587, 615, 619, 622, 636, 637, 646, 656, 791, 792, 797, 798, 799, 800, 827, 843, 857, 858, 928, 932, 947, 948], "wiki": [16, 22, 344, 346, 546, 587, 619, 622, 646, 656, 791, 792, 797, 798, 799, 800, 827, 843, 857, 858, 928, 948], "eigenvector_centr": 16, "webpag": [16, 156, 338], "pagerank": 16, "insid": [16, 18, 24, 152, 181, 235, 290, 299, 326, 332, 333, 340, 344, 363, 371, 539, 540, 542, 828, 900, 939, 956], "accord": [16, 22, 24, 33, 45, 71, 110, 133, 136, 162, 179, 197, 210, 281, 312, 320, 338, 340, 349, 350, 351, 352, 360, 363, 365, 367, 368, 370, 371, 373, 389, 401, 403, 407, 411, 413, 416, 420, 455, 467, 468, 469, 476, 481, 483, 486, 487, 489, 491, 501, 504, 505, 512, 513, 514, 517, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 592, 593, 595, 596, 600, 609, 610, 621, 631, 642, 646, 685, 729, 730, 747, 748, 749, 750, 751, 754, 755, 756, 761, 770, 784, 785, 786, 787, 788, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 812, 819, 827, 839, 841, 842, 849, 850, 851, 852, 854, 855, 926, 928, 932, 934, 935, 942, 945, 946, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989], "tradit": [16, 179, 194, 312, 326, 361, 370, 371, 583, 645, 928, 931, 942, 956], "power_iter": 16, "martinsson": [16, 486, 492, 886], "dbpedia": 16, "content": [16, 278, 311, 313, 333, 342, 344, 357, 362, 371, 437, 454, 459, 460, 539, 540, 542, 622, 863, 941, 956, 967, 974, 983], "bz2": [16, 459, 460], "bz2file": 16, "pprint": [16, 111, 236, 333, 881], "randomized_svd": [16, 347, 402, 404, 483, 492, 495, 497, 973, 974, 979, 986, 987, 988], "urlopen": 16, "redirects_url": 16, "redirects_en": 16, "nt": 16, "redirects_filenam": 16, "page_links_url": 16, "page_links_en": 16, "page_links_filenam": 16, "resourc": [16, 38, 111, 146, 179, 270, 283, 323, 327, 341, 350, 750, 751, 933, 950, 953, 956, 959, 969, 981, 986, 987], "wait": [16, 338, 342, 351, 617, 618, 619, 627, 629, 985], "wb": 16, "index_map": 16, "setdefault": [16, 864], "dbpedia_resource_prefix_len": 16, "shortname_slic": 16, "short_nam": 16, "nt_uri": 16, "uri": 16, "prefix": [16, 64, 236, 255, 281, 338, 342, 344, 346, 373, 379, 394, 395, 397, 398, 400, 415, 418, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 590, 591, 592, 593, 639, 640, 643, 753, 773, 793, 798, 801, 805, 809, 815, 841, 842, 979, 980, 986, 988], "get_redirect": 16, "transit": [16, 342, 984], "malform": [16, 977], "1000000": [16, 487], "08d": 16, "isoformat": 16, "closur": 16, "transitive_target": 16, "seen": [16, 23, 36, 61, 75, 88, 95, 105, 111, 151, 152, 175, 203, 209, 269, 273, 299, 311, 333, 340, 342, 350, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 379, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 472, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 574, 578, 579, 580, 581, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 745, 746, 747, 750, 751, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 907, 913, 921, 927, 935, 936, 942, 948, 956, 962, 963, 965, 966, 985, 986, 987, 988, 989], "break": [16, 35, 42, 64, 74, 148, 168, 185, 223, 284, 289, 294, 311, 313, 338, 340, 342, 344, 350, 363, 420, 463, 590, 724, 728, 731, 745, 822, 829, 834, 851, 854, 928, 931, 940, 942, 947, 953, 973, 974, 980, 981, 983, 985, 989], "get_adjacency_matrix": 16, "resolv": [16, 337, 338, 342, 346, 352, 371, 403, 413, 642, 646, 886, 922, 932, 980, 982, 983, 986], "lil_matrix": 16, "float32": [16, 110, 202, 271, 286, 325, 333, 338, 340, 508, 509, 510, 511, 514, 515, 516, 517, 544, 545, 591, 592, 609, 713, 814, 857, 858, 859, 860, 867, 908, 909, 910, 948, 958, 967, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "del": [16, 344, 985, 986], "convert": [16, 31, 42, 44, 61, 65, 88, 140, 154, 179, 199, 218, 222, 223, 226, 227, 266, 324, 332, 347, 349, 351, 357, 371, 392, 395, 396, 398, 400, 401, 402, 403, 410, 415, 416, 447, 485, 492, 504, 505, 508, 509, 510, 511, 514, 515, 516, 517, 523, 532, 533, 539, 540, 541, 542, 544, 545, 557, 578, 579, 580, 581, 597, 603, 609, 610, 611, 613, 617, 619, 621, 625, 627, 628, 629, 643, 650, 728, 804, 813, 814, 816, 820, 822, 823, 824, 826, 849, 857, 858, 859, 860, 867, 869, 870, 892, 917, 918, 921, 928, 929, 930, 932, 942, 943, 947, 948, 967, 973, 975, 976, 977, 978, 979, 981, 983, 984, 985, 988, 989], "csr": [16, 313, 324, 332, 333, 347, 349, 351, 371, 374, 395, 398, 400, 401, 410, 448, 459, 474, 504, 505, 508, 509, 515, 516, 517, 581, 609, 643, 650, 665, 718, 740, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 804, 812, 816, 818, 820, 821, 824, 827, 829, 832, 833, 834, 836, 839, 842, 857, 858, 859, 860, 865, 869, 870, 892, 895, 907, 908, 909, 910, 911, 912, 913, 935, 942, 946, 973, 974, 979, 981, 982, 988, 989], "tocsr": 16, "convers": [16, 111, 170, 311, 320, 326, 332, 338, 340, 346, 349, 357, 371, 523, 804, 813, 821, 869, 870, 918, 929, 953, 956, 981, 982, 983, 986], "5m": 16, "ram": [16, 49, 326, 370, 841, 842, 934, 947, 967, 979, 985, 988], "5000000": 16, "strongest": [16, 172], "highest": [16, 18, 24, 75, 129, 133, 233, 235, 246, 283, 311, 338, 349, 361, 367, 370, 372, 389, 506, 508, 515, 543, 546, 547, 549, 550, 551, 554, 555, 557, 586, 588, 676, 706, 742, 745, 747, 750, 751, 761, 846, 857, 888, 921, 928, 932, 933, 936, 946, 948, 985], "centrality_scor": 16, "networkx": [16, 347], "copyright": [16, 75], "aric": 16, "hagberg": 16, "lanl": 16, "gov": [16, 335], "dan": [16, 973, 977, 978, 979, 981, 982], "schult": 16, "dschult": 16, "pieter": [16, 979, 980, 987], "swart": 16, "incoming_count": 16, "nonzero": [16, 18, 95, 178, 210, 239, 313, 360, 374, 396, 474, 475, 482, 488, 493, 499, 539, 542, 636, 637, 650, 791, 792, 795, 797, 799, 800, 928, 932], "indptr": [16, 253, 319, 981], "dangl": 16, "isclos": 16, "guess": [16, 107, 367, 370, 371, 429, 483, 489, 491, 492, 498, 932, 946], "prev_scor": 16, "dot": [16, 29, 30, 31, 40, 45, 50, 52, 57, 71, 72, 73, 75, 77, 78, 86, 87, 88, 93, 95, 102, 135, 136, 142, 143, 151, 160, 163, 171, 173, 174, 186, 211, 222, 223, 225, 226, 239, 295, 297, 324, 340, 344, 347, 351, 360, 368, 371, 484, 489, 491, 498, 541, 542, 565, 597, 598, 601, 603, 604, 605, 608, 611, 612, 613, 614, 632, 633, 634, 635, 638, 711, 713, 821, 861, 887, 930, 934, 942, 946, 947, 966, 982], "converg": [16, 52, 56, 71, 72, 99, 109, 111, 135, 141, 172, 181, 183, 187, 195, 224, 269, 270, 273, 278, 289, 326, 347, 351, 360, 363, 368, 371, 373, 375, 392, 395, 398, 399, 400, 403, 405, 410, 411, 412, 413, 422, 423, 429, 433, 434, 435, 484, 486, 487, 488, 489, 490, 497, 504, 522, 561, 595, 596, 597, 598, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 619, 623, 625, 627, 629, 633, 634, 638, 639, 641, 642, 645, 646, 745, 746, 798, 806, 807, 844, 845, 851, 922, 927, 928, 929, 931, 936, 946, 973, 976, 977, 978, 980, 981, 984, 986, 987, 988], "l_inf": 16, "scores_max": 16, "err": [16, 77, 89], "6f": [16, 89, 240, 687, 743], "wikipedia_principal_eigenvector": 16, "concern": [17, 32, 70, 76, 79, 84, 97, 127, 134, 145, 148, 155, 157, 198, 220, 226, 251, 254, 267, 272, 287, 294, 310, 314, 324, 340, 362, 929, 944], "modul": [17, 32, 33, 45, 49, 70, 76, 79, 84, 85, 97, 127, 134, 145, 148, 149, 155, 157, 194, 198, 199, 220, 228, 251, 254, 267, 269, 270, 272, 287, 294, 310, 314, 317, 332, 333, 336, 337, 338, 339, 340, 342, 343, 344, 346, 347, 349, 351, 353, 354, 357, 360, 361, 362, 363, 366, 370, 371, 372, 374, 396, 454, 486, 530, 531, 610, 844, 878, 921, 926, 928, 930, 932, 933, 936, 938, 939, 942, 944, 946, 948, 949, 956, 961, 962, 967, 974, 975, 976, 978, 979, 983, 985, 987], "demo": [17, 32, 114, 148, 185, 226, 236, 244, 278, 311, 312, 340, 360, 363, 371, 392, 393, 396, 398, 399, 401, 402, 404, 406, 409, 453, 462, 463, 464, 492, 655, 656, 668, 670, 687, 741, 743, 810, 829], "spectral": [17, 32, 40, 42, 45, 148, 200, 201, 338, 371, 400, 402, 403, 404, 413, 420, 421, 422, 423, 424, 425, 426, 427, 439, 462, 464, 542, 639, 640, 641, 642, 643, 646, 670, 743, 935, 945, 968, 969, 973, 974], "twenti": [18, 210, 335, 360, 363, 967], "comp": [18, 77, 78, 88, 96, 271, 292, 311, 312, 313, 333, 967], "window": [18, 292, 333, 338, 340, 341, 371, 952, 973, 976, 980, 984, 986, 987], "misc": [18, 49, 88, 236, 292, 311, 312, 313, 333, 966], "categori": [18, 40, 57, 64, 65, 108, 118, 151, 152, 179, 187, 194, 215, 236, 269, 270, 275, 279, 283, 286, 292, 311, 312, 313, 332, 333, 347, 362, 363, 364, 370, 371, 373, 439, 447, 448, 454, 512, 513, 599, 609, 610, 620, 631, 693, 708, 709, 785, 822, 823, 830, 922, 928, 929, 930, 934, 940, 958, 967, 979, 981, 982, 984, 985, 986, 987, 988, 989], "noth": [18, 312, 343, 493, 539, 540, 542, 665, 812, 821, 870, 942], "frequenc": [18, 25, 135, 152, 173, 179, 210, 282, 283, 311, 312, 313, 333, 349, 361, 367, 368, 370, 371, 372, 502, 508, 510, 511, 512, 515, 539, 540, 541, 542, 555, 609, 610, 615, 617, 619, 625, 626, 627, 636, 637, 778, 813, 822, 823, 849, 851, 854, 857, 859, 875, 928, 929, 934, 942, 946, 948, 975, 977, 978, 984], "dhillon": [18, 360, 402, 404, 462], "cut": [18, 39, 42, 60, 61, 201, 342, 349, 360, 363, 403, 404, 413, 539, 542, 642, 646, 942], "minibatchkmean": [18, 32, 40, 46, 56, 148, 312, 326, 363, 368, 392, 394, 398, 463, 729, 974, 979, 980, 981, 984, 985, 986, 987, 988, 989], "spectralcoclust": [18, 20, 360, 402, 975, 980, 984], "v_measure_scor": [18, 33, 34, 45, 53, 312, 363, 668, 686, 687, 707, 932, 982], "number_norm": 18, "token": [18, 313, 324, 333, 342, 371, 487, 539, 540, 541, 542, 973, 981, 985], "placehold": [18, 342, 578, 579, 580, 581, 762, 763, 766, 767, 922], "begin": [18, 135, 230, 237, 252, 284, 320, 338, 343, 344, 351, 360, 363, 370, 504, 505, 510, 512, 513, 617, 618, 627, 628, 629, 921, 928, 932, 942, 944, 946, 981, 987, 988], "By": [18, 41, 85, 114, 115, 158, 244, 273, 281, 311, 325, 338, 344, 345, 351, 363, 364, 366, 367, 368, 369, 370, 372, 390, 393, 397, 401, 415, 418, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 475, 477, 500, 501, 508, 509, 510, 511, 515, 516, 536, 537, 539, 540, 542, 557, 560, 583, 584, 622, 624, 626, 628, 641, 643, 645, 648, 651, 653, 654, 669, 679, 680, 684, 688, 733, 734, 737, 742, 744, 750, 751, 795, 809, 810, 822, 823, 825, 827, 837, 839, 852, 853, 857, 858, 859, 860, 869, 870, 900, 921, 922, 924, 928, 932, 939, 942, 944, 948, 958, 962, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 985, 987], "isdigit": [18, 371], "numbernormalizingvector": 18, "build_token": [18, 371, 539, 540, 542], "super": [18, 23, 25, 340, 371, 981], "alt": [18, 236, 292, 311, 312, 313, 333, 346, 967], "atheism": [18, 236, 292, 311, 312, 313, 333, 967], "pc": [18, 292, 313, 333], "hardwar": [18, 292, 313, 324, 325, 333, 336, 950, 952, 987, 988], "mac": [18, 292, 333, 338, 659, 932], "forsal": [18, 313, 333], "rec": [18, 313, 333, 592], "auto": [18, 30, 40, 41, 44, 52, 53, 55, 83, 85, 139, 162, 199, 200, 201, 202, 204, 215, 217, 253, 256, 261, 282, 283, 284, 285, 286, 295, 296, 302, 305, 306, 313, 332, 333, 338, 340, 370, 373, 374, 393, 396, 397, 398, 400, 401, 403, 408, 410, 413, 447, 459, 460, 486, 492, 495, 500, 508, 509, 512, 513, 514, 515, 516, 518, 544, 545, 548, 553, 558, 559, 580, 582, 583, 584, 586, 597, 598, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 623, 624, 625, 631, 632, 633, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 651, 653, 691, 750, 751, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 806, 807, 822, 823, 830, 841, 842, 846, 851, 852, 853, 854, 855, 857, 858, 859, 860, 885, 886, 898, 901, 923, 926, 928, 929, 935, 942, 952, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "motorcycl": [18, 333], "sport": [18, 333], "basebal": [18, 333], "hockei": [18, 333], "sci": [18, 64, 311, 312, 313, 333, 349, 640, 644, 820, 929, 942, 967], "crypt": [18, 333], "electron": [18, 333, 335, 489, 491, 498, 578], "med": [18, 64, 244, 333, 942, 967], "soc": [18, 333, 967], "religion": [18, 236, 311, 312, 313, 333, 933, 967], "talk": [18, 236, 311, 312, 313, 327, 333, 351, 357, 956, 959, 967], "polit": [18, 333, 337, 928, 933], "gun": [18, 333], "mideast": [18, 333], "coclust": [18, 360, 402, 464], "n_cluster": [18, 19, 20, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 85, 285, 312, 338, 351, 363, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 410, 411, 412, 413, 414, 462, 464, 966, 973, 977, 979, 981, 982, 984, 987], "svd_method": [18, 402, 404, 483, 976], "kmean": [18, 32, 39, 41, 42, 44, 46, 49, 52, 53, 56, 148, 224, 227, 276, 285, 312, 347, 363, 392, 395, 399, 400, 403, 413, 463, 740, 741, 745, 746, 814, 935, 942, 953, 966, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "20000": [18, 87], "n_init": [18, 38, 39, 40, 41, 44, 46, 52, 53, 55, 56, 59, 85, 199, 200, 201, 202, 282, 285, 312, 363, 395, 398, 400, 402, 403, 404, 410, 413, 641, 645, 745, 746, 966, 973, 981, 987, 988], "y_coclust": 18, "row_labels_": [18, 19, 20, 360, 402, 404], "y_kmean": 18, "fit_predict": [18, 51, 52, 55, 206, 260, 340, 351, 363, 381, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 420, 514, 628, 745, 746, 795, 801, 809, 853, 938, 978, 981, 982, 986, 988], "document_nam": 18, "bicluster_ncut": 18, "col": [18, 23, 25, 34, 38, 45, 54, 58, 59, 64, 119, 199, 215, 308, 462, 464], "get_indic": [18, 378, 402, 404], "float_info": 18, "row_compl": 18, "logical_not": [18, 59, 95, 182], "rows_": [18, 360, 378, 402, 404], "col_compl": 18, "columns_": [18, 360, 378, 402, 404], "ident": [18, 59, 110, 174, 179, 197, 206, 210, 293, 311, 333, 340, 351, 360, 363, 364, 365, 367, 373, 376, 390, 391, 403, 415, 416, 424, 426, 427, 430, 431, 432, 439, 454, 502, 510, 511, 515, 516, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 594, 630, 631, 650, 655, 656, 686, 735, 743, 749, 752, 762, 763, 764, 766, 767, 791, 792, 798, 806, 807, 813, 814, 826, 838, 857, 858, 925, 926, 929, 932, 935, 936, 947, 977, 981, 982, 983, 987], "most_common": 18, "counter": [18, 363, 627, 628, 629, 986], "itemgett": 18, "revers": [18, 69, 133, 184, 235, 485, 492, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 562, 739, 809, 932, 973, 974, 983, 985, 989], "best_idx": [18, 234], "get_shap": [18, 378, 402, 404], "cluster_doc": 18, "cluster_word": 18, "cat_str": 18, "0f": [18, 53], "out_of_cluster_doc": 18, "word_col": 18, "word_scor": 18, "important_word": 18, "plot_bicluster_newsgroup": 18, "checkerboard": [19, 360, 402, 404, 462, 464], "make_checkerboard": [19, 462, 975], "rearrang": [19, 20, 360], "outer": [19, 90, 240, 290, 402, 465, 591, 601, 602, 605, 924, 974], "product": [19, 65, 85, 119, 135, 140, 152, 320, 324, 340, 341, 344, 347, 357, 360, 368, 370, 402, 489, 491, 498, 533, 540, 541, 542, 564, 565, 584, 591, 615, 616, 636, 637, 711, 713, 725, 727, 821, 824, 841, 842, 887, 921, 924, 928, 930, 942, 944, 946, 947, 952, 956, 981], "kemaleren": [19, 20], "spectralbiclust": [19, 360, 404, 975, 979, 980, 984], "consensus_scor": [19, 20, 360, 975], "matshow": [19, 20, 61, 106, 131, 270, 453], "row_idx": [19, 20, 179], "permut": [19, 20, 33, 74, 106, 112, 126, 148, 149, 195, 228, 353, 358, 363, 370, 415, 447, 451, 455, 510, 511, 515, 516, 578, 581, 585, 630, 655, 656, 668, 686, 687, 705, 707, 743, 764, 766, 774, 775, 809, 823, 854, 857, 858, 886, 901, 903, 906, 932, 946, 962, 965, 969, 973, 979, 986, 988], "col_idx": [19, 20], "biclusters_": [19, 20, 378, 402, 404], "consensu": [19, 20, 33, 337, 338, 352, 360, 363, 600, 622, 629, 630, 670, 932], "1f": [19, 27, 46, 49, 88, 159, 179, 210, 221, 223, 242, 281, 312, 313], "fit_data": [19, 20], "column_labels_": [19, 20, 360, 402, 404], "plot_spectral_biclust": 19, "biclust": [20, 327, 371, 378, 400, 402, 404, 439, 462, 464, 542, 670, 743, 932, 968, 969, 975, 979, 980], "make_biclust": [20, 464, 975], "implant": 20, "plot_spectral_coclust": 20, "probabl": [21, 25, 26, 69, 83, 97, 98, 99, 119, 128, 134, 135, 136, 137, 148, 151, 199, 203, 207, 210, 235, 238, 241, 242, 245, 273, 277, 281, 283, 291, 293, 324, 327, 333, 334, 340, 344, 349, 351, 363, 367, 368, 371, 372, 373, 387, 388, 389, 390, 391, 398, 400, 455, 463, 466, 474, 478, 500, 501, 502, 504, 506, 508, 510, 512, 513, 515, 518, 520, 521, 544, 545, 561, 564, 565, 573, 578, 583, 584, 609, 610, 622, 627, 643, 649, 651, 653, 654, 657, 658, 660, 663, 667, 671, 676, 677, 679, 689, 690, 691, 692, 706, 732, 734, 737, 738, 739, 742, 745, 746, 747, 750, 751, 761, 774, 775, 778, 780, 781, 784, 785, 786, 787, 788, 791, 794, 799, 805, 806, 842, 843, 844, 845, 846, 849, 851, 854, 857, 859, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 942, 944, 945, 946, 948, 953, 954, 955, 967, 969, 973, 975, 977, 979, 981, 982, 983, 984, 985, 987], "confid": [22, 23, 24, 25, 140, 142, 222, 235, 238, 291, 352, 361, 373, 587, 609, 610, 617, 619, 622, 625, 626, 627, 649, 653, 658, 671, 676, 677, 689, 690, 706, 739, 777, 816, 849, 851, 854, 928, 931, 932, 933, 938, 945, 946, 947, 956, 967, 983], "being": [22, 25, 41, 48, 75, 78, 81, 90, 103, 115, 135, 140, 151, 153, 156, 173, 229, 235, 277, 278, 299, 313, 336, 337, 338, 340, 342, 343, 349, 351, 352, 357, 363, 365, 367, 370, 371, 372, 373, 374, 376, 393, 394, 396, 397, 401, 407, 420, 426, 444, 474, 520, 591, 600, 607, 623, 625, 638, 641, 645, 663, 669, 679, 684, 686, 733, 739, 745, 789, 790, 795, 797, 799, 800, 801, 824, 842, 887, 921, 922, 928, 931, 932, 935, 938, 939, 940, 942, 944, 946, 947, 948, 973, 974, 979, 980, 981, 982, 984, 985, 987, 988, 989], "postprocess": [22, 361, 486, 492], "brier": [22, 23, 361, 660], "brier_scor": 22, "sigmoid": [22, 23, 24, 25, 330, 370, 389, 403, 486, 512, 571, 590, 594, 715, 724, 727, 806, 807, 851, 852, 853, 854, 855, 937, 947, 965, 969, 986], "isoton": [22, 23, 148, 205, 327, 389, 608, 872, 954, 969, 974, 975, 976, 977, 979, 986, 989], "belong": [22, 25, 55, 215, 235, 281, 290, 332, 333, 360, 361, 363, 366, 367, 370, 378, 392, 395, 398, 399, 400, 402, 404, 474, 663, 681, 754, 760, 770, 796, 816, 830, 928, 931, 932, 934, 935, 936, 938, 947, 952, 958, 965], "mblondel": [22, 44, 170, 200, 236, 311, 332, 459], "telecom": [22, 23, 38, 206, 956], "balaz": [22, 977], "kegl": [22, 977], "jhm": [22, 23, 24, 25, 135, 136, 138, 139, 140, 141, 142, 144, 212], "informatik": [22, 23, 24, 25, 135, 136, 138, 139, 140, 141, 142, 144, 212, 932], "uni": [22, 23, 24, 25, 68, 103, 135, 136, 138, 139, 140, 141, 142, 144, 170, 211, 212, 290, 307], "bremen": [22, 23, 24, 25, 135, 136, 138, 139, 140, 141, 142, 144, 212], "style": [22, 24, 74, 111, 168, 187, 197, 239, 338, 345, 363, 371, 395, 398, 410, 651, 753, 869, 870, 973, 976, 987], "make_blob": [22, 24, 30, 34, 38, 39, 40, 45, 51, 52, 54, 55, 57, 58, 59, 82, 171, 191, 206, 224, 276, 282, 285, 297, 300, 301, 308, 334, 340, 341, 370, 466, 981, 984, 987], "50000": 22, "n_bin": [22, 23, 25, 49, 179, 197, 274, 276, 390, 391, 814, 942], "calibration_curv": [22, 361, 389, 390, 982, 987], "blob": [22, 30, 38, 40, 52, 57, 59, 82, 363, 399, 463, 978], "sample_weight": [22, 160, 179, 192, 197, 282, 309, 338, 351, 363, 370, 374, 380, 384, 389, 395, 396, 398, 400, 410, 411, 416, 420, 433, 434, 435, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 561, 562, 585, 586, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 638, 648, 649, 651, 653, 654, 658, 659, 660, 663, 664, 667, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 684, 685, 688, 689, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 732, 733, 734, 735, 737, 738, 739, 742, 744, 747, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 794, 796, 799, 800, 806, 807, 809, 814, 828, 829, 844, 845, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 920, 932, 946, 947, 948, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989], "sw_train": [22, 282], "sw_test": [22, 282], "calibratedclassifiercv": [22, 23, 24, 320, 351, 361, 627, 921, 947, 953, 977, 979, 982, 983, 985, 986, 987, 988, 989], "brier_score_loss": [22, 23, 361, 932, 981, 982, 983], "gaussiannb": [22, 23, 25, 28, 120, 237, 320, 361, 370, 389, 520, 784, 785, 786, 788, 810, 926, 933, 934, 977, 978, 979, 981, 986, 989], "With": [22, 31, 40, 62, 69, 90, 109, 129, 148, 152, 179, 181, 205, 207, 212, 213, 219, 235, 257, 324, 327, 333, 338, 340, 351, 363, 364, 367, 370, 372, 389, 391, 452, 533, 583, 584, 609, 718, 807, 810, 812, 823, 829, 830, 856, 858, 925, 928, 929, 932, 933, 935, 936, 939, 946, 948, 958, 959, 966, 970, 976, 980, 981, 983, 985, 987], "itself": [22, 45, 111, 114, 152, 177, 218, 244, 253, 299, 312, 324, 326, 337, 338, 340, 342, 351, 362, 363, 374, 392, 393, 396, 397, 420, 421, 422, 423, 424, 425, 426, 427, 478, 482, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 502, 517, 520, 534, 543, 546, 547, 549, 550, 551, 553, 554, 590, 591, 592, 593, 594, 596, 606, 640, 642, 740, 741, 784, 785, 786, 787, 788, 789, 790, 794, 802, 803, 814, 815, 816, 844, 845, 924, 928, 929, 931, 935, 936, 940, 952, 977, 988], "prob_pos_clf": 22, "predict_proba": [22, 23, 24, 25, 27, 31, 116, 120, 136, 137, 138, 139, 244, 268, 275, 278, 281, 283, 311, 340, 345, 351, 361, 362, 370, 389, 390, 500, 501, 502, 504, 506, 508, 510, 512, 515, 518, 520, 544, 545, 561, 570, 571, 573, 574, 582, 583, 584, 609, 610, 627, 649, 651, 653, 691, 692, 738, 745, 746, 747, 750, 751, 761, 770, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 791, 799, 806, 809, 816, 844, 845, 846, 851, 854, 857, 859, 928, 932, 934, 936, 939, 945, 946, 947, 948, 973, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989], "clf_isoton": 22, "prob_pos_isoton": 22, "clf_sigmoid": 22, "prob_pos_sigmoid": 22, "clf_score": 22, "No": [22, 113, 185, 187, 289, 307, 335, 346, 349, 354, 363, 425, 510, 511, 541, 542, 586, 596, 615, 627, 629, 636, 637, 745, 928], "clf_isotonic_scor": 22, "clf_sigmoid_scor": 22, "y_uniqu": 22, "rainbow": [22, 201], "this_i": [22, 185], "this_x": [22, 177, 185, 965], "this_sw": 22, "lexsort": 22, "51": [22, 253, 363, 364, 731, 927, 928], "uncalibr": [22, 23, 24, 389], "gnb": [22, 23, 25, 120, 370, 520, 934], "plot_calibr": 22, "reliabl": [23, 25, 361, 367, 390, 391, 597, 948, 956], "diagram": [23, 25, 65, 217, 282, 361, 363, 390, 391, 419, 847, 942, 984, 985], "redund": [23, 25, 96, 132, 222, 227, 320, 334, 337, 338, 343, 351, 361, 466, 585, 953, 967, 985], "uninform": [23, 25, 334, 343, 371, 921, 928, 981], "rest": [23, 27, 108, 112, 148, 157, 194, 224, 281, 292, 296, 344, 351, 362, 373, 463, 561, 595, 609, 610, 627, 704, 738, 777, 778, 779, 798, 849, 851, 854, 928, 932, 933, 936, 939, 947, 956, 977, 978, 987, 988], "make_classif": [23, 25, 28, 82, 103, 104, 105, 109, 130, 132, 232, 238, 246, 247, 263, 268, 275, 281, 283, 307, 320, 334, 341, 359, 389, 390, 463, 504, 506, 508, 515, 617, 648, 649, 651, 653, 773, 779, 806, 809, 849, 921, 932, 933, 942, 947, 979, 980, 981, 983], "100_000": [23, 25, 151], "n_inform": [23, 25, 28, 82, 103, 105, 130, 132, 158, 182, 232, 238, 248, 263, 268, 275, 281, 307, 340, 343, 466, 475, 504, 505, 506, 507, 515, 516, 616, 779, 933, 981], "n_redund": [23, 25, 28, 82, 105, 130, 132, 232, 238, 263, 268, 275, 343, 389, 466, 504, 506, 515, 779], "logisticregress": [23, 25, 27, 65, 67, 104, 120, 125, 132, 162, 169, 170, 171, 172, 186, 194, 195, 207, 208, 217, 219, 238, 244, 252, 271, 275, 281, 282, 283, 284, 285, 311, 324, 338, 340, 344, 346, 350, 361, 364, 370, 372, 390, 518, 520, 548, 582, 585, 594, 603, 610, 623, 624, 625, 626, 627, 638, 651, 738, 761, 780, 781, 783, 834, 835, 837, 838, 839, 840, 856, 881, 928, 932, 933, 942, 946, 947, 963, 965, 973, 974, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988], "baselin": [23, 108, 111, 121, 158, 197, 245, 252, 283, 312, 335, 363, 372, 502, 503, 585, 932, 935, 967], "regular": [23, 32, 65, 67, 72, 90, 97, 142, 146, 148, 157, 158, 159, 164, 166, 167, 168, 170, 179, 193, 197, 212, 222, 229, 236, 239, 248, 258, 259, 267, 270, 271, 278, 279, 294, 296, 298, 299, 300, 311, 313, 315, 324, 338, 349, 350, 361, 363, 365, 366, 368, 369, 370, 373, 389, 395, 398, 422, 427, 429, 430, 431, 432, 455, 463, 465, 466, 471, 473, 475, 479, 489, 490, 491, 494, 498, 499, 501, 510, 512, 513, 539, 540, 542, 589, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 640, 644, 685, 691, 700, 745, 746, 764, 775, 776, 806, 807, 810, 829, 849, 850, 851, 852, 854, 855, 856, 921, 922, 924, 925, 926, 929, 931, 937, 938, 942, 945, 946, 947, 954, 956, 962, 963, 965, 969, 973, 974, 975, 977, 978, 982, 983, 985, 986], "logist": [23, 25, 27, 63, 65, 104, 125, 148, 157, 207, 219, 252, 271, 278, 285, 311, 351, 352, 361, 364, 370, 372, 373, 389, 440, 447, 453, 455, 463, 492, 510, 512, 522, 561, 597, 608, 609, 610, 617, 619, 627, 691, 747, 761, 775, 805, 806, 807, 809, 829, 856, 872, 874, 932, 936, 937, 946, 947, 954, 956, 963, 969, 977, 980, 981, 983, 984], "guid": [23, 63, 85, 144, 148, 151, 152, 167, 199, 242, 259, 260, 263, 279, 281, 282, 283, 284, 285, 286, 327, 336, 337, 338, 343, 344, 345, 350, 351, 352, 362, 364, 370, 374, 375, 376, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 570, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 809, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 882, 933, 960, 967, 973, 974, 975, 976, 978, 980, 982, 983], "gridspec": [23, 25, 60, 221, 345], "calibrationdisplai": [23, 25, 361, 986, 987], "lr": [23, 25, 104, 120, 121, 182, 194, 208, 209, 231, 238, 350, 370, 519, 520, 521, 663], "gnb_isoton": 23, "gnb_sigmoid": 23, "clf_list": [23, 25], "get_cmap": [23, 25, 304], "dark2": [23, 25, 200], "ax_calibration_curv": [23, 25], "calibration_displai": [23, 25], "histogram": [23, 25, 49, 179, 210, 241, 258, 273, 283, 361, 510, 511, 512, 513, 593, 708, 709, 924, 930, 942, 954, 968, 969, 985, 988], "grid_posit": [23, 25], "y_prob": [23, 25, 138, 390, 391, 660, 780, 806, 932, 987], "poorli": [23, 57, 71, 78, 102, 113, 203, 325, 363, 370, 479, 581, 928, 929, 979], "violat": [23, 299, 346, 349, 351, 586, 873, 939, 946, 948], "independ": [23, 25, 33, 42, 86, 87, 89, 104, 107, 142, 152, 214, 235, 238, 240, 244, 252, 273, 281, 312, 320, 324, 325, 334, 340, 342, 350, 351, 354, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 375, 400, 415, 439, 454, 466, 467, 468, 469, 471, 483, 484, 486, 488, 490, 491, 497, 498, 502, 503, 555, 558, 559, 576, 591, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 623, 624, 625, 626, 655, 656, 668, 686, 687, 705, 707, 743, 749, 774, 778, 780, 782, 783, 821, 825, 826, 827, 829, 833, 834, 835, 836, 838, 839, 840, 843, 851, 852, 853, 854, 855, 880, 921, 924, 926, 928, 929, 932, 933, 934, 937, 939, 942, 947, 948, 968, 969, 973, 974, 979, 981, 983, 988], "overli": [23, 24, 168, 240, 320, 368, 932], "typic": [23, 25, 89, 99, 156, 179, 197, 212, 237, 238, 242, 244, 245, 259, 260, 283, 299, 312, 324, 331, 332, 333, 336, 340, 341, 347, 350, 351, 361, 362, 363, 364, 367, 368, 370, 371, 373, 395, 398, 400, 447, 502, 504, 506, 507, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 580, 589, 591, 594, 605, 606, 607, 622, 633, 634, 663, 816, 823, 827, 830, 885, 886, 917, 921, 925, 928, 929, 931, 932, 933, 934, 938, 940, 956, 967, 982, 986, 989], "transpos": [23, 235, 375, 477, 489, 491, 498, 611, 612, 613, 614, 738, 886, 918, 932, 944, 966, 973, 987], "nearli": [23, 238, 333, 351, 362, 714, 932, 935, 944, 967], "albeit": 23, "strongli": [23, 25, 75, 78, 88, 108, 112, 151, 161, 194, 241, 311, 338, 353, 354, 361, 370, 609, 686, 743, 928, 929, 969, 982], "plenti": 23, "greater": [23, 83, 101, 151, 196, 211, 224, 241, 252, 259, 260, 315, 324, 334, 343, 351, 361, 363, 366, 370, 393, 397, 400, 403, 414, 423, 487, 492, 508, 509, 510, 511, 512, 513, 515, 516, 517, 544, 545, 548, 561, 562, 579, 591, 593, 596, 615, 617, 618, 622, 627, 628, 629, 643, 660, 663, 671, 685, 686, 689, 692, 738, 743, 745, 746, 779, 791, 792, 799, 800, 806, 807, 812, 827, 839, 843, 846, 857, 858, 859, 860, 886, 901, 921, 927, 928, 929, 932, 933, 938, 942, 947, 948, 976, 981, 984, 986, 987, 988], "exploit": [23, 252, 933, 953, 976], "precis": [23, 69, 75, 85, 141, 142, 148, 156, 207, 228, 229, 233, 273, 338, 340, 351, 360, 361, 362, 363, 365, 368, 370, 395, 420, 421, 422, 423, 424, 425, 426, 427, 429, 455, 474, 483, 485, 492, 495, 595, 596, 597, 599, 601, 602, 603, 605, 606, 607, 620, 623, 625, 631, 633, 634, 638, 651, 657, 658, 659, 664, 677, 679, 680, 681, 689, 713, 732, 733, 734, 737, 738, 745, 746, 775, 778, 789, 790, 795, 810, 829, 833, 849, 854, 861, 863, 886, 926, 928, 935, 936, 947, 963, 967, 973, 976, 977, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989], "recal": [23, 90, 148, 207, 228, 233, 338, 351, 363, 455, 555, 651, 657, 658, 659, 663, 664, 677, 679, 680, 681, 732, 733, 734, 737, 738, 775, 778, 810, 829, 833, 849, 928, 948, 963, 967, 976, 977, 980, 982, 983, 985, 986, 987, 989], "f1": [23, 292, 367, 664, 679, 680, 688, 733, 932, 933, 963, 967, 977, 989], "precision_scor": [23, 242, 659, 737, 932, 973, 975, 976, 977, 978, 983, 989], "recall_scor": [23, 242, 367, 659, 734, 932, 973, 975, 976, 977, 978, 983, 989], "f1_score": [23, 242, 292, 333, 688, 932, 973, 975, 976, 977, 978, 982, 983, 989], "log_loss": [23, 24, 110, 113, 136, 278, 292, 311, 351, 361, 370, 508, 510, 512, 515, 597, 609, 627, 857, 859, 921, 928, 932, 946, 975, 977, 979, 987, 988, 989], "roc_auc_scor": [23, 235, 244, 281, 653, 657, 658, 659, 739, 932, 975, 976, 981, 983, 987, 988], "score_nam": [23, 33, 212, 237, 312, 753], "score_df": 23, "set_index": [23, 111, 140, 168, 197, 235, 279, 312], "decim": [23, 141, 422, 423, 862, 980, 981], "refin": [23, 75, 423, 660, 932, 967], "alter": [23, 147, 340, 351, 679, 680, 688, 733, 734, 737, 978, 982, 985], "uncertainti": [23, 135, 142, 158, 237, 361, 363, 518, 519, 594, 809, 922, 944], "linearsvc": [23, 25, 64, 66, 129, 130, 148, 156, 211, 232, 234, 242, 275, 281, 294, 296, 307, 311, 324, 340, 344, 361, 371, 372, 389, 463, 518, 528, 590, 594, 603, 623, 624, 625, 626, 627, 638, 685, 692, 772, 777, 850, 851, 854, 856, 928, 932, 933, 973, 974, 975, 979, 981, 984], "naivelycalibratedlinearsvc": [23, 25], "df_min_": [23, 25], "df_max_": [23, 25], "calibrated_df": [23, 25], "proba_pos_class": [23, 25], "clip": [23, 25, 197, 209, 273, 299, 586, 627, 691, 819, 942, 977, 984, 985], "proba_neg_class": [23, 25], "proba": [23, 25, 27, 120, 389, 857, 859], "svc_isoton": 23, "svc_sigmoid": 23, "opposit": [23, 25, 49, 62, 90, 151, 152, 168, 242, 351, 361, 365, 367, 372, 395, 398, 400, 420, 489, 491, 498, 514, 663, 795, 853, 973], "behavior": [23, 25, 33, 35, 48, 146, 148, 151, 152, 179, 197, 227, 228, 238, 270, 273, 275, 299, 320, 325, 332, 335, 338, 340, 342, 346, 347, 351, 361, 363, 367, 371, 487, 502, 517, 617, 618, 619, 627, 628, 629, 652, 679, 680, 733, 734, 737, 748, 749, 752, 764, 765, 766, 767, 768, 786, 822, 921, 928, 933, 938, 942, 956, 958, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "hing": [23, 186, 189, 191, 243, 296, 297, 301, 351, 617, 627, 685, 849, 856, 928, 946, 947, 967], "focus": [23, 71, 168, 333, 349, 370, 929, 942, 952], "far": [23, 55, 75, 108, 136, 142, 151, 179, 197, 299, 311, 313, 338, 347, 373, 671, 829, 907, 937, 938, 947, 956, 965], "awai": [23, 24, 25, 55, 71, 107, 135, 136, 140, 182, 304, 333, 361, 373, 579, 791, 792, 799, 800, 931, 932, 947, 965], "shown": [23, 44, 52, 80, 99, 101, 111, 144, 150, 152, 169, 177, 197, 204, 206, 211, 223, 235, 238, 241, 244, 258, 269, 270, 273, 274, 275, 288, 311, 312, 338, 343, 352, 361, 363, 364, 367, 368, 369, 371, 373, 390, 411, 583, 649, 651, 652, 653, 664, 747, 761, 861, 863, 927, 928, 929, 932, 935, 940, 942, 946, 947, 948, 967, 977, 982, 983, 984, 987], "varieti": [23, 146, 223, 279, 299, 346, 349, 362, 363, 365, 370, 371, 594, 935, 948, 952, 956, 975, 988], "niculescu": [23, 25, 361, 389, 391], "mizil": [23, 25, 361, 389, 391], "caruana": [23, 25, 361, 389, 391], "deal": [23, 52, 65, 146, 151, 203, 313, 338, 343, 362, 364, 371, 372, 373, 425, 447, 654, 659, 713, 737, 815, 886, 928, 956, 964, 976, 988], "situat": [23, 40, 52, 66, 150, 151, 185, 206, 238, 338, 346, 365, 367, 368, 370, 479, 485, 533, 822, 825, 837, 926, 928, 934, 935, 945, 948, 981], "supervis": [23, 25, 33, 45, 50, 53, 78, 94, 104, 125, 126, 200, 213, 223, 235, 262, 283, 291, 312, 324, 327, 333, 340, 350, 351, 361, 363, 366, 367, 368, 370, 371, 373, 389, 391, 415, 439, 454, 455, 504, 539, 541, 544, 545, 585, 627, 679, 748, 749, 752, 754, 755, 756, 757, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 774, 775, 798, 808, 809, 813, 823, 830, 844, 845, 846, 854, 926, 929, 932, 934, 935, 938, 942, 943, 947, 948, 949, 952, 953, 955, 958, 959, 961, 967, 969, 973, 979, 985], "icml": [23, 25, 361, 363, 371, 389, 391, 784, 786, 805, 932, 934, 946, 951], "2005": [23, 25, 74, 335, 361, 389, 391, 798, 928, 935, 945], "plot_calibration_curv": 23, "simplex": [24, 621, 745, 824], "arrow": [24, 987], "green": [24, 31, 74, 83, 102, 115, 120, 135, 156, 204, 269, 274, 278, 282, 351, 933, 981, 982, 984, 985], "600": [24, 117, 118, 333, 631], "x_train_valid": 24, "y_train_valid": 24, "cluster_std": [24, 34, 40, 45, 51, 52, 54, 55, 57, 58, 59, 191, 206, 224, 276, 301, 463], "x_valid": 24, "y_valid": 24, "randomforestclassifi": [24, 25, 28, 51, 103, 104, 105, 106, 107, 120, 153, 154, 217, 218, 232, 247, 281, 283, 311, 320, 350, 351, 361, 370, 372, 508, 509, 510, 512, 517, 518, 520, 750, 751, 779, 859, 921, 933, 956, 970, 977, 978, 981, 982, 983, 986, 987, 988, 989], "concaten": [24, 35, 46, 56, 63, 74, 101, 114, 143, 148, 158, 161, 200, 206, 215, 221, 225, 226, 231, 242, 244, 245, 258, 271, 277, 289, 311, 364, 415, 418, 455, 460, 482, 488, 492, 493, 550, 731, 747, 808, 809, 811, 814, 822, 854, 933, 962, 974], "cal_clf": 24, "prefit": [24, 351, 361, 372, 389, 518, 519, 548, 953, 985, 986, 987], "clf_prob": 24, "cal_clf_prob": 24, "head_width": 24, "perfect": [24, 33, 74, 88, 90, 175, 179, 311, 312, 338, 342, 363, 367, 504, 505, 641, 645, 655, 656, 659, 668, 676, 678, 681, 687, 693, 706, 707, 735, 736, 743, 928, 932, 935, 947, 956, 965, 987], "ro": 24, "bo": [24, 985], "unit": [24, 73, 151, 156, 179, 197, 258, 270, 273, 312, 333, 338, 339, 340, 344, 346, 347, 368, 371, 375, 415, 440, 441, 470, 475, 483, 484, 485, 492, 493, 540, 541, 542, 562, 609, 610, 627, 636, 650, 720, 796, 805, 806, 807, 813, 819, 821, 825, 827, 829, 835, 836, 837, 839, 840, 849, 850, 928, 930, 931, 937, 942, 948, 952, 965, 977, 981, 987, 988], "mid": [24, 299, 932, 934], "frac": [24, 73, 74, 235, 242, 244, 284, 360, 361, 363, 365, 368, 369, 370, 371, 373, 384, 414, 416, 433, 434, 435, 505, 507, 509, 511, 513, 516, 519, 521, 562, 566, 570, 573, 574, 586, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 620, 621, 623, 624, 629, 630, 631, 647, 705, 719, 782, 783, 792, 800, 807, 850, 852, 855, 858, 860, 924, 926, 927, 928, 929, 930, 932, 934, 935, 936, 937, 939, 940, 942, 944, 946, 947, 948, 965], "shrink": [24, 75, 85, 112, 152, 174, 177, 199, 225, 273, 368, 510, 511, 627, 629, 796, 806, 807, 830, 851, 852, 853, 854, 855, 935, 947, 965], "perfectli": [24, 33, 238, 249, 353, 363, 370, 390, 518, 557, 655, 656, 666, 668, 686, 687, 707, 736, 743, 822, 927, 929, 932, 947, 986, 987], "incur": [24, 570, 849, 947, 981], "correct": [24, 25, 52, 74, 143, 151, 168, 179, 197, 221, 229, 235, 242, 244, 299, 301, 320, 335, 338, 340, 342, 352, 361, 362, 363, 367, 368, 371, 401, 407, 420, 425, 439, 452, 454, 586, 618, 627, 629, 654, 655, 659, 663, 664, 669, 672, 673, 674, 678, 679, 680, 684, 688, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 733, 734, 735, 737, 742, 744, 777, 778, 779, 786, 794, 820, 917, 928, 932, 933, 947, 958, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "decreas": [24, 35, 42, 53, 61, 69, 115, 132, 151, 152, 163, 187, 209, 210, 237, 242, 248, 268, 275, 278, 281, 315, 324, 326, 338, 361, 363, 370, 393, 397, 414, 472, 485, 486, 492, 508, 509, 510, 511, 512, 513, 515, 516, 517, 553, 586, 587, 588, 627, 628, 629, 657, 663, 677, 732, 739, 806, 807, 857, 858, 859, 860, 921, 923, 928, 929, 932, 935, 936, 939, 940, 946, 947, 956, 965, 975, 980, 983, 986], "cal_scor": 24, "p1d": 24, "p0": 24, "p1": [24, 120], "p2": [24, 120, 197], "calibrated_classifi": 24, "calibrated_classifiers_": [24, 361, 389], "this_p": 24, "sure": [24, 51, 172, 185, 213, 320, 324, 325, 332, 336, 337, 338, 339, 340, 342, 343, 346, 349, 361, 364, 371, 444, 474, 600, 869, 870, 880, 918, 922, 929, 946, 952, 953, 980, 981, 983, 988], "renorm": 24, "step": [24, 30, 38, 50, 53, 62, 65, 67, 74, 78, 88, 93, 107, 108, 118, 130, 131, 132, 137, 140, 151, 153, 179, 187, 197, 211, 219, 227, 233, 242, 244, 253, 255, 261, 268, 271, 275, 278, 285, 293, 295, 299, 312, 313, 315, 320, 324, 327, 333, 336, 337, 338, 340, 342, 343, 346, 349, 351, 360, 361, 363, 365, 366, 368, 370, 371, 372, 394, 398, 400, 487, 488, 489, 490, 497, 514, 539, 540, 542, 544, 545, 548, 557, 578, 595, 599, 617, 618, 620, 627, 629, 630, 631, 645, 651, 745, 746, 747, 750, 751, 761, 781, 782, 783, 805, 806, 807, 809, 810, 812, 849, 850, 851, 852, 854, 855, 885, 886, 903, 907, 922, 928, 931, 936, 937, 942, 946, 948, 949, 952, 955, 963, 967, 973, 977, 978, 980, 981, 982, 984, 985, 986, 989], "multiclass": [24, 27, 148, 157, 213, 228, 242, 245, 252, 296, 308, 327, 333, 334, 340, 341, 343, 351, 363, 370, 389, 403, 413, 440, 455, 510, 512, 518, 519, 522, 545, 553, 561, 582, 583, 584, 609, 610, 617, 619, 624, 625, 626, 627, 657, 659, 679, 680, 684, 685, 688, 693, 704, 733, 734, 737, 738, 739, 742, 747, 748, 750, 751, 752, 753, 761, 765, 769, 770, 771, 772, 773, 774, 775, 776, 816, 830, 849, 851, 854, 926, 928, 943, 947, 948, 954, 955, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 988, 989], "argmax": [24, 93, 234, 248, 340, 370, 520, 777, 857, 947, 986], "plot_calibration_multiclass": 24, "gave": [25, 361, 747, 750, 751, 761, 816], "four": [25, 129, 143, 156, 161, 180, 223, 224, 289, 296, 334, 338, 351, 508, 515, 670, 857, 859, 875, 928, 930, 931, 932, 942, 951], "naiv": [25, 28, 116, 235, 237, 311, 313, 327, 333, 361, 370, 371, 389, 495, 784, 785, 786, 787, 788, 926, 927, 935, 954, 969, 973, 974, 975, 976, 981, 983, 986, 988], "bay": [25, 28, 102, 116, 135, 168, 226, 237, 311, 327, 333, 361, 368, 370, 371, 373, 487, 500, 501, 607, 784, 785, 786, 787, 788, 830, 926, 927, 928, 942, 954, 967, 969, 973, 974, 975, 976, 981, 983, 986, 988], "train_sampl": [25, 194, 195], "against": [25, 33, 78, 95, 102, 112, 128, 156, 170, 171, 188, 196, 244, 279, 281, 299, 333, 338, 352, 361, 363, 367, 371, 390, 460, 493, 499, 502, 627, 629, 705, 707, 738, 749, 754, 756, 774, 778, 898, 924, 928, 932, 933, 935, 947, 951, 958], "rfc": [25, 218, 281, 970], "contrast": [25, 94, 152, 181, 212, 235, 237, 262, 278, 312, 351, 361, 363, 364, 366, 370, 373, 400, 403, 413, 570, 594, 761, 805, 922, 925, 927, 928, 932, 935, 937, 940, 942, 945, 946, 948, 983], "push": [25, 338, 342, 361, 955], "equat": [25, 307, 338, 363, 368, 370, 508, 509, 510, 511, 515, 516, 517, 541, 578, 633, 634, 638, 713, 829, 857, 858, 859, 860, 922, 929, 932, 937, 981], "twice": [25, 247, 311, 313, 340, 373, 570, 682, 888, 982], "approx": [25, 85, 211, 368, 370, 371, 932, 939, 946], "rare": [25, 152, 279, 320, 342, 349, 351, 353, 361, 363, 367, 540, 599, 609, 610, 620, 631, 849, 874, 900, 928, 942, 956, 980, 981, 982, 986, 988], "explan": [25, 78, 324, 337, 338, 361, 371, 921, 931, 933, 948, 956, 976], "bag": [25, 64, 97, 103, 113, 148, 153, 312, 313, 334, 361, 467, 468, 469, 506, 507, 508, 509, 510, 511, 514, 515, 516, 691, 752, 775, 858, 930, 933, 954, 969, 973, 975, 976, 977, 978, 979, 986, 987, 989], "underli": [25, 51, 73, 117, 133, 180, 182, 240, 257, 258, 318, 325, 349, 351, 353, 359, 361, 365, 367, 368, 369, 370, 372, 373, 389, 402, 403, 404, 413, 415, 416, 422, 423, 429, 475, 518, 519, 520, 521, 544, 545, 548, 553, 609, 619, 631, 642, 646, 747, 750, 751, 761, 777, 778, 779, 780, 781, 782, 783, 794, 849, 857, 858, 859, 860, 897, 928, 929, 933, 938, 945, 947, 975, 977, 979, 980, 981, 982, 983, 985, 986, 989], "restrict": [25, 61, 62, 146, 148, 196, 267, 340, 344, 349, 361, 363, 370, 371, 416, 444, 453, 483, 532, 561, 604, 605, 606, 607, 609, 633, 634, 658, 664, 732, 738, 739, 775, 797, 799, 800, 801, 803, 805, 806, 807, 809, 835, 932, 948, 968, 969, 973, 975, 983, 985], "interv": [25, 97, 142, 148, 179, 180, 181, 197, 235, 333, 351, 361, 367, 370, 373, 390, 391, 467, 468, 469, 508, 509, 511, 513, 515, 516, 586, 587, 589, 628, 692, 698, 700, 751, 768, 775, 812, 814, 828, 851, 852, 853, 873, 924, 928, 932, 942, 948, 980, 984], "move": [25, 107, 236, 271, 299, 337, 338, 342, 344, 361, 363, 500, 501, 522, 523, 524, 526, 528, 529, 899, 966, 973, 974, 978, 981, 983, 986, 987], "characterist": [25, 40, 57, 140, 148, 206, 228, 232, 273, 320, 333, 335, 343, 361, 367, 373, 454, 455, 574, 589, 609, 653, 657, 659, 677, 732, 738, 739, 766, 775, 778, 816, 854, 928], "difficult": [25, 151, 187, 338, 346, 361, 368, 370, 504, 505, 510, 512, 513, 927, 929, 931, 935, 937, 939, 948, 956, 973, 987], "bayesian": [25, 50, 148, 157, 167, 220, 222, 226, 227, 368, 389, 475, 479, 483, 595, 596, 607, 608, 745, 746, 810, 812, 824, 829, 921, 952, 954, 968, 969, 979, 986], "domingo": [25, 738, 932], "pazzani": 25, "proc": [25, 72, 361, 371, 401, 640, 644, 784, 921, 929, 934, 938], "13th": 25, "intl": [25, 367], "1996": [25, 363, 370, 374, 396, 467, 468, 469, 506, 507, 942], "zadrozni": [25, 361, 389, 627], "bianca": 25, "charl": [25, 714, 973, 976, 979, 983, 985, 988], "elkan": [25, 282, 361, 389, 395, 398, 410, 627, 979, 983, 984, 986, 987], "vol": [25, 143, 241, 335, 363, 425, 510, 511, 579, 586, 596, 615, 636, 637, 745, 774, 786, 922, 934, 935], "2001": [25, 140, 153, 234, 360, 363, 370, 389, 402, 403, 404, 413, 462, 510, 511, 515, 516, 579, 585, 590, 596, 642, 647, 685, 738, 830, 842, 874, 922, 928, 932, 938, 940, 942, 944, 947], "plot_compare_calibr": 25, "discrimin": [26, 94, 128, 130, 148, 156, 194, 200, 213, 262, 327, 335, 361, 370, 426, 463, 500, 501, 517, 733, 798, 921, 929, 932, 935, 946, 948, 954, 965, 969, 976], "ellipsoid": [26, 148, 220, 221, 500, 501, 745, 746, 926, 931], "ledoit": [26, 70, 71, 75, 148, 424, 426, 430, 431, 463, 500, 926], "wolf": [26, 70, 71, 75, 148, 424, 426, 430, 431, 463, 500, 926, 980], "oa": [26, 70, 148, 365, 420, 421, 424, 425, 427, 428, 463, 500, 747, 926], "hand": [26, 78, 80, 87, 90, 111, 128, 140, 148, 151, 152, 172, 186, 203, 209, 210, 212, 232, 237, 244, 299, 324, 332, 333, 335, 338, 340, 344, 346, 350, 357, 368, 369, 370, 372, 453, 594, 664, 738, 775, 830, 854, 921, 925, 928, 932, 934, 936, 940, 945, 947, 956, 958, 961, 964, 965], "built": [27, 78, 100, 107, 109, 153, 187, 238, 266, 281, 316, 324, 336, 338, 339, 340, 342, 344, 346, 347, 349, 350, 351, 354, 357, 362, 363, 364, 367, 370, 372, 397, 454, 504, 505, 506, 507, 512, 513, 539, 540, 544, 548, 590, 591, 592, 593, 594, 597, 598, 603, 609, 611, 612, 613, 614, 623, 624, 625, 626, 632, 750, 751, 758, 780, 783, 789, 790, 859, 860, 916, 928, 932, 933, 945, 946, 948, 952, 956, 967, 973, 976, 977, 979, 985], "calibr": [27, 197, 327, 351, 463, 466, 515, 520, 609, 627, 660, 679, 691, 734, 737, 738, 775, 787, 846, 849, 921, 928, 932, 945, 947, 954, 969, 970, 977, 979], "enabl": [27, 46, 66, 109, 152, 187, 201, 275, 282, 284, 285, 308, 336, 338, 343, 346, 349, 351, 354, 359, 362, 363, 364, 368, 370, 371, 400, 485, 486, 492, 510, 511, 512, 513, 514, 530, 531, 541, 542, 553, 561, 745, 746, 747, 750, 809, 810, 822, 823, 846, 849, 850, 851, 852, 853, 854, 855, 864, 899, 922, 924, 929, 931, 932, 935, 942, 943, 946, 947, 953, 956, 973, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989], "troubl": [27, 371], "accuracy_scor": [27, 99, 136, 239, 278, 291, 311, 320, 350, 508, 515, 659, 679, 680, 684, 688, 692, 733, 734, 737, 742, 744, 921, 932, 974, 975, 976, 985], "gaussian_process": [27, 28, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 327, 351, 373, 594, 933, 976, 979, 980], "gaussianprocessclassifi": [27, 28, 136, 137, 138, 139, 143, 351, 373, 562, 570, 571, 573, 574, 933, 979, 981, 983, 987], "iri": [27, 37, 41, 68, 79, 84, 89, 96, 97, 109, 119, 126, 129, 134, 148, 157, 162, 172, 219, 223, 229, 240, 241, 244, 245, 256, 264, 269, 283, 287, 294, 295, 299, 302, 314, 319, 331, 332, 350, 363, 364, 367, 368, 370, 447, 455, 492, 500, 504, 508, 515, 561, 573, 582, 627, 747, 761, 844, 845, 846, 849, 854, 857, 861, 862, 863, 921, 922, 926, 931, 932, 935, 939, 942, 945, 946, 947, 948, 958, 965, 966, 969, 986], "load_iri": [27, 37, 41, 68, 81, 89, 92, 94, 96, 107, 109, 119, 126, 129, 137, 162, 172, 188, 219, 223, 229, 240, 241, 242, 244, 245, 256, 261, 264, 269, 281, 283, 286, 293, 295, 296, 299, 302, 316, 319, 350, 357, 363, 364, 367, 370, 372, 512, 518, 553, 561, 570, 571, 573, 574, 582, 609, 610, 738, 747, 750, 751, 753, 761, 777, 798, 844, 845, 846, 857, 859, 861, 862, 863, 922, 927, 932, 933, 934, 935, 939, 942, 948, 958, 964, 965, 966, 979, 981, 984], "gpc": [27, 134, 148, 455, 561, 562, 564, 565, 570, 571, 573, 574, 654, 691, 954, 969, 983], "saga": [27, 170, 194, 195, 609, 610, 623, 625, 638, 761, 928, 980, 982], "multi_class": [27, 171, 194, 244, 281, 520, 561, 609, 610, 738, 783, 849, 928, 933, 947, 973, 977, 981, 986, 988], "ovr": [27, 171, 194, 252, 281, 308, 609, 610, 738, 778, 849, 851, 854, 928, 932, 933, 947, 973, 978, 979, 981, 982, 983, 987, 988], "n_classifi": [27, 520, 521], "xx": [27, 31, 38, 53, 73, 107, 111, 116, 126, 137, 138, 139, 152, 166, 186, 189, 190, 191, 192, 193, 204, 206, 213, 225, 259, 268, 275, 276, 293, 298, 299, 303, 304, 305, 308, 309, 342], "yy": [27, 31, 38, 53, 73, 107, 116, 126, 137, 139, 152, 186, 190, 191, 192, 193, 204, 206, 213, 259, 268, 275, 276, 293, 298, 299, 303, 304, 305, 308, 309], "xfull": 27, "imshow_handl": 27, "04": [27, 36, 38, 50, 87, 95, 140, 178, 213, 221, 227, 235, 248, 266, 306, 335, 370, 372, 422, 423, 738, 747, 761, 928, 932, 936, 946], "cax": [27, 138, 246], "orient": [27, 85, 151, 199, 273, 351, 861, 929], "horizont": [27, 85, 199, 211, 273, 276, 343, 351, 415, 466, 648, 652], "plot_classification_prob": 27, "salt": [28, 211, 275, 987], "convei": [28, 204, 275, 965], "real": [28, 52, 68, 71, 73, 97, 138, 151, 203, 215, 229, 241, 249, 257, 274, 275, 313, 324, 327, 331, 332, 335, 342, 344, 347, 349, 350, 351, 360, 361, 363, 365, 367, 368, 370, 371, 420, 440, 441, 444, 445, 446, 447, 448, 451, 452, 455, 461, 471, 502, 503, 504, 506, 507, 508, 509, 510, 511, 515, 516, 543, 545, 546, 547, 548, 549, 550, 551, 650, 655, 674, 678, 702, 705, 707, 735, 743, 744, 774, 775, 806, 807, 851, 852, 853, 854, 855, 857, 858, 860, 922, 923, 924, 929, 932, 934, 936, 937, 938, 948, 951, 969, 973, 986], "particularli": [28, 64, 65, 68, 95, 116, 180, 208, 235, 275, 282, 309, 320, 324, 338, 347, 351, 363, 364, 366, 369, 371, 447, 753, 786, 886, 900, 901, 928, 929, 932, 934, 953, 956, 966, 973, 978, 980, 981, 987], "linearli": [28, 90, 101, 151, 158, 193, 200, 206, 244, 245, 275, 278, 303, 311, 324, 335, 349, 368, 370, 466, 593, 658, 932, 935, 938, 947, 965, 980], "semi": [28, 213, 275, 283, 327, 333, 351, 439, 455, 486, 539, 541, 627, 679, 775, 809, 813, 844, 845, 846, 854, 930, 935, 938, 954, 969, 973, 985, 988], "transpar": [28, 275, 917, 956], "ga\u00ebl": [28, 41, 47, 67, 80, 81, 92, 162, 176, 177, 275, 303, 304, 352, 956], "modifi": [28, 41, 47, 67, 69, 80, 81, 162, 176, 177, 189, 199, 200, 201, 223, 304, 309, 336, 338, 340, 342, 351, 370, 373, 395, 398, 405, 410, 419, 433, 434, 435, 436, 446, 461, 532, 561, 562, 564, 570, 627, 629, 640, 644, 679, 680, 718, 733, 734, 737, 867, 928, 945, 946, 953, 964, 968, 969, 973, 975, 976, 979, 980, 982, 983, 984, 985, 986, 988], "listedcolormap": [28, 107, 256, 261, 264, 268, 275], "make_moon": [28, 40, 57, 206, 235, 268, 269, 275, 334, 921, 980, 984], "make_circl": [28, 40, 57, 90, 116, 204, 268, 269, 275, 290, 334, 974, 981, 984], "neural_network": [28, 148, 152, 216, 267, 268, 269, 270, 271, 326, 327, 349, 933, 936, 975], "mlpclassifi": [28, 148, 267, 268, 270, 326, 453, 455, 465, 473, 522, 805, 807, 819, 933, 936, 981, 982, 983, 984, 985, 986, 987, 988, 989], "kneighborsclassifi": [28, 119, 125, 255, 256, 261, 262, 278, 283, 285, 311, 370, 553, 792, 796, 797, 798, 799, 800, 933, 935, 965, 973, 983, 985, 986, 987, 988, 989], "decisiontreeclassifi": [28, 98, 99, 101, 107, 119, 239, 315, 316, 319, 351, 370, 504, 506, 508, 510, 512, 515, 582, 753, 773, 858, 859, 861, 862, 863, 922, 933, 948, 974, 975, 977, 978, 982, 983, 984, 985, 986, 987, 988], "adaboostclassifi": [28, 98, 99, 101, 107, 370, 505, 510, 512, 975, 976, 979, 980, 982, 983, 986, 988], "discriminant_analysi": [28, 30, 31, 94, 200, 262, 320, 327, 359, 487, 798, 926, 933, 973, 976, 977, 978, 979, 980], "quadraticdiscriminantanalysi": [28, 31, 500, 926, 933, 935, 973, 978, 980, 988], "decisionboundarydisplai": [28, 51, 101, 114, 119, 162, 171, 188, 238, 256, 261, 264, 278, 295, 296, 297, 300, 301, 316, 987, 988], "net": [28, 148, 157, 170, 190, 248, 344, 362, 367, 422, 423, 429, 452, 475, 508, 509, 510, 511, 515, 516, 517, 597, 598, 603, 608, 609, 610, 611, 612, 613, 614, 619, 627, 629, 632, 635, 735, 805, 857, 858, 859, 860, 921, 932, 937, 946, 954, 956, 969, 973, 978, 982, 983, 985], "adaboost": [28, 97, 107, 148, 470, 471, 504, 505, 510, 654, 744, 775, 857, 858, 954, 969, 975], "qda": [28, 31, 335, 500, 501, 954, 969, 978], "025": [28, 232, 641, 645], "n_clusters_per_class": [28, 82, 103, 130, 132, 232, 263, 268, 275, 343, 466], "uniform": [28, 33, 49, 110, 111, 114, 129, 136, 141, 144, 158, 159, 193, 204, 206, 209, 243, 256, 259, 260, 265, 268, 274, 276, 277, 285, 298, 340, 343, 363, 390, 391, 502, 520, 521, 561, 562, 579, 590, 600, 601, 605, 619, 627, 628, 629, 650, 672, 673, 678, 695, 696, 698, 700, 701, 703, 735, 751, 759, 761, 784, 785, 788, 791, 792, 799, 800, 814, 826, 828, 838, 874, 888, 921, 922, 931, 932, 935, 979, 981, 983, 987], "linearly_separ": [28, 268], "27": [28, 43, 308, 335, 363, 371, 373, 475, 664, 738, 739, 830, 850, 932, 942, 966, 973, 975], "ds_cnt": [28, 275, 276], "rdbu": [28, 85, 195, 268, 299, 304], "cm_bright": [28, 268, 275], "ff0000": [28, 261, 268], "0000ff": [28, 261, 268], "ep": [28, 40, 42, 45, 60, 162, 164, 202, 210, 349, 363, 374, 396, 401, 406, 429, 582, 597, 598, 601, 602, 603, 604, 605, 606, 607, 611, 612, 613, 614, 632, 633, 634, 635, 641, 645, 665, 691, 801, 841, 842, 843, 944, 988, 989], "lstrip": [28, 40, 57, 206, 268, 275], "plot_classifier_comparison": [28, 275], "8x8": [29, 80, 170, 210, 262, 271, 335, 453, 964], "grayscal": 29, "imread": 29, "load_digit": [29, 47, 48, 53, 66, 67, 80, 124, 125, 131, 170, 186, 200, 210, 211, 233, 234, 237, 243, 250, 255, 257, 262, 269, 271, 288, 289, 344, 364, 397, 483, 484, 485, 486, 550, 551, 589, 590, 619, 639, 640, 641, 642, 958, 962, 963, 964, 965, 966, 979, 984], "set_axis_off": 29, "gray_r": [29, 80, 88, 138, 200, 271, 288, 289, 964], "64": [29, 44, 49, 53, 80, 85, 200, 210, 211, 214, 233, 244, 257, 262, 324, 325, 335, 336, 344, 368, 446, 453, 550, 551, 597, 609, 639, 640, 641, 642, 850, 935, 964, 973, 975, 981, 982, 985, 986, 987], "entir": [29, 146, 179, 187, 271, 273, 282, 319, 320, 332, 339, 340, 351, 357, 363, 367, 369, 371, 423, 443, 485, 539, 540, 541, 542, 598, 602, 604, 606, 609, 610, 612, 614, 616, 617, 619, 627, 633, 634, 684, 744, 777, 778, 781, 806, 808, 809, 822, 834, 835, 837, 838, 839, 840, 901, 921, 922, 932, 942, 946, 948, 965, 982, 983], "confus": [29, 148, 228, 244, 288, 289, 311, 351, 455, 582, 603, 648, 664, 666, 669, 679, 680, 688, 704, 734, 737, 775, 854, 967, 973, 974, 978, 982, 983, 985, 986, 987, 988], "figure_": [29, 152, 216, 281, 283, 345, 390, 582, 583, 648, 649, 651, 652, 653, 753], "confusion_matrix": [29, 207, 229, 289, 648, 664, 704, 772, 932, 967, 974, 979, 980, 983, 984, 986], "ground": [29, 36, 41, 45, 52, 53, 56, 71, 75, 78, 88, 114, 143, 163, 173, 179, 180, 227, 238, 312, 351, 362, 363, 654, 655, 656, 659, 663, 664, 665, 666, 668, 669, 672, 673, 674, 678, 679, 680, 684, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 733, 734, 735, 736, 737, 743, 744, 932, 945, 958, 966, 981], "truth": [29, 36, 41, 45, 52, 53, 56, 71, 75, 78, 88, 93, 114, 143, 163, 173, 179, 180, 227, 238, 312, 351, 362, 363, 654, 655, 656, 659, 663, 664, 665, 666, 668, 669, 672, 673, 674, 676, 678, 679, 680, 684, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 733, 734, 735, 736, 737, 743, 744, 932, 958, 966, 981, 987], "gt": [29, 336, 338, 342], "rebuilt": [29, 789, 790], "plot_digits_classif": 29, "oracl": [30, 179, 197, 376, 420, 421, 424, 425, 426, 427, 926, 973], "shrinkag": [30, 70, 72, 75, 93, 113, 148, 264, 376, 420, 421, 424, 425, 426, 427, 428, 430, 431, 432, 490, 494, 500, 512, 513, 747, 928, 942, 954, 969, 973, 977, 978, 980], "lineardiscriminantanalysi": [30, 31, 94, 200, 262, 320, 359, 487, 501, 798, 926, 933, 935, 973, 976, 977, 978, 979, 980, 982, 985, 987, 988], "200": [30, 31, 40, 50, 55, 69, 88, 101, 109, 111, 117, 139, 165, 174, 180, 183, 184, 185, 191, 196, 200, 217, 221, 242, 244, 245, 273, 276, 290, 298, 299, 318, 320, 333, 340, 349, 368, 370, 375, 392, 405, 419, 422, 423, 484, 485, 486, 489, 490, 491, 494, 498, 535, 600, 602, 622, 630, 643, 761, 806, 807, 847, 851, 852, 853, 854, 855, 947], "n_averag": 30, "n_features_max": 30, "ish": 30, "acc_clf1": 30, "acc_clf2": 30, "acc_clf3": 30, "n_features_rang": 30, "score_clf1": 30, "score_clf2": 30, "score_clf3": 30, "clf1": [30, 119, 120, 370, 520], "lsqr": [30, 500, 623, 625, 638, 926, 974, 980, 987], "clf2": [30, 119, 120, 340, 357, 370, 520], "store_precis": [30, 72, 420, 421, 424, 425, 426, 427], "assume_cent": [30, 72, 365, 376, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431], "clf3": [30, 119, 120, 340, 370, 520], "covariance_estim": [30, 500, 926, 985], "features_samples_ratio": 30, "gold": [30, 173, 180, 182, 185, 189, 193, 196, 222, 227, 242, 259, 298, 344], "navi": [30, 72, 89, 94, 95, 117, 158, 182, 190, 202, 222, 223, 224, 227, 242, 244, 250, 258, 265, 290, 318], "65": [30, 152, 363, 391, 453, 548, 691, 740, 741, 939, 963, 973, 974, 975], "plot_lda": 30, "doubl": [31, 247, 338, 351, 368, 489, 491, 498, 650, 789, 790, 800, 916, 922, 947, 948, 973, 983, 984], "deviat": [31, 56, 73, 102, 105, 106, 107, 135, 140, 142, 144, 151, 158, 185, 232, 233, 234, 235, 236, 238, 259, 260, 273, 278, 330, 334, 335, 343, 347, 351, 367, 370, 401, 423, 452, 462, 463, 464, 465, 467, 468, 469, 473, 475, 476, 481, 503, 545, 562, 585, 595, 596, 622, 674, 702, 753, 795, 818, 819, 829, 838, 839, 840, 928, 932, 938, 942, 965, 979, 980, 981, 984, 985, 986], "own": [31, 197, 226, 253, 255, 290, 312, 325, 332, 341, 342, 343, 346, 347, 354, 362, 363, 375, 379, 392, 405, 484, 508, 515, 597, 745, 746, 791, 792, 793, 795, 797, 799, 800, 801, 823, 857, 859, 875, 880, 900, 928, 934, 935, 938, 942, 947, 956, 966, 967, 980, 981, 983], "mpl": [31, 221, 222, 223, 227, 273], "linearsegmentedcolormap": 31, "red_blue_class": 31, "register_cmap": 31, "dataset_fixed_cov": 31, "dim": [31, 188, 210, 256, 261, 262, 264, 295, 296, 478, 650], "83": [31, 35, 335, 340, 373, 658, 736, 932, 963, 967, 976], "dataset_cov": 31, "matric": [31, 36, 73, 75, 85, 184, 222, 223, 225, 226, 227, 253, 266, 282, 292, 311, 312, 330, 332, 340, 341, 349, 350, 351, 362, 363, 364, 365, 366, 368, 371, 372, 378, 401, 402, 404, 415, 424, 433, 434, 435, 485, 486, 489, 491, 492, 495, 498, 500, 501, 506, 507, 514, 517, 532, 533, 540, 594, 609, 615, 623, 625, 638, 704, 710, 718, 724, 728, 729, 730, 731, 740, 745, 746, 775, 793, 796, 801, 812, 816, 818, 821, 824, 826, 827, 829, 832, 834, 836, 838, 839, 840, 841, 842, 851, 852, 854, 855, 865, 886, 892, 896, 903, 905, 906, 922, 926, 929, 930, 931, 933, 935, 936, 944, 946, 947, 952, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "linalg": [31, 50, 71, 72, 75, 91, 93, 95, 165, 221, 222, 223, 226, 227, 338, 344, 368, 402, 403, 404, 413, 483, 486, 492, 495, 608, 623, 625, 638, 642, 646, 884], "plot_data": 31, "fig_index": 31, "splot": [31, 222, 227], "tp": [31, 363, 663, 669, 681, 732, 733, 734, 737, 861, 932], "tp0": 31, "tp1": 31, "x0_tp": 31, "x0_fp": 31, "x1_tp": 31, "x1_fp": 31, "990000": 31, "dark": [31, 102, 151, 299, 333], "000099": 31, "pcolormesh": [31, 116, 126, 162, 256, 261, 295, 299, 303, 582], "white": [31, 53, 55, 85, 140, 193, 199, 259, 271, 275, 293, 298, 368, 371, 373, 576, 948, 973, 976, 979, 983, 987], "means_": [31, 221, 222, 223, 224, 226, 227, 500, 501, 745, 746], "yellow": [31, 83, 299, 933], "markers": [31, 45, 53, 56, 58, 59, 111, 138, 142, 209, 285], "markeredgecolor": [31, 45, 56, 58, 59], "plot_ellips": [31, 221], "cov": [31, 75, 78, 101, 226, 338, 351, 354, 356, 366, 376, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 432, 470, 483, 485, 492, 499], "eigh": [31, 221, 222, 223, 226, 227, 368, 375, 484, 486, 988], "arctan": [31, 222, 227, 334, 469], "180": [31, 221, 222, 223, 226, 227, 262, 266, 344, 373, 453], "ell": [31, 221, 222, 223, 227, 360], "patch": [31, 46, 221, 222, 223, 226, 227, 230, 333, 342, 349, 368, 370, 506, 507, 534, 535, 538, 973, 981], "ellips": [31, 206, 221, 222, 223, 226, 227, 938], "set_clip_box": [31, 221, 222, 223, 226, 227], "set_alpha": [31, 98, 221, 222, 223, 226, 227], "add_artist": [31, 200, 221, 222, 223, 226, 227], "plot_lda_cov": 31, "plot_qda_cov": 31, "98": [31, 38, 40, 50, 57, 59, 75, 88, 206, 233, 268, 335, 342, 367, 370, 610, 784, 927, 934, 962, 967], "svd": [31, 91, 93, 116, 200, 312, 347, 359, 366, 375, 402, 404, 433, 434, 436, 483, 484, 485, 486, 490, 491, 492, 495, 497, 500, 501, 615, 623, 624, 625, 636, 637, 638, 808, 886, 926, 967, 975, 979, 980, 986, 988], "store_covari": [31, 500, 501, 978, 980], "tight": [31, 36, 95, 101, 107, 126, 129, 164, 166, 171, 172, 173, 183, 184, 188, 191, 193, 196, 201, 204, 225, 253, 259, 260, 264, 265, 295, 298, 299, 302, 303, 304, 316, 533, 643, 985], "92": [31, 46, 88, 271, 299, 333, 335, 489, 491, 498, 513, 548, 747, 761, 927, 967], "plot_lda_qda": 31, "handwritten": [32, 148, 198, 203, 210, 233, 270, 271, 288, 289, 331, 363, 370, 398, 453, 492, 495, 500, 517, 639, 640, 641, 642, 643, 655, 656, 668, 687, 741, 743, 798, 810, 819, 829, 842, 929, 935, 958, 969], "hierarch": [32, 36, 50, 148, 154, 285, 351, 371, 393, 395, 397, 455, 463, 465, 473, 481, 498, 681, 802, 829, 949, 953, 968, 969, 973, 976, 977], "coin": [32, 148, 363, 371, 393, 413, 944, 966], "shift": [32, 40, 148, 158, 202, 226, 258, 271, 273, 365, 369, 392, 399, 409, 412, 420, 463, 466, 640, 644, 795, 818, 942, 968, 969, 973, 977, 981], "chanc": [32, 45, 148, 179, 187, 194, 197, 235, 241, 244, 245, 279, 312, 320, 337, 363, 367, 655, 656, 659, 667, 705, 707, 736, 743, 774, 932, 940, 948], "agglom": [32, 40, 43, 148, 363, 393, 397, 453, 642, 728, 802, 976], "bisect": [32, 148, 395, 398, 463, 987], "quantiz": [32, 148, 332, 333, 363, 395, 398, 400, 457, 729, 814, 906, 942], "birch": [32, 40, 148, 285, 326, 351, 400, 463, 968, 969, 977, 981, 982, 983, 984, 986, 987, 988, 989], "toi": [32, 45, 49, 52, 78, 89, 102, 114, 119, 120, 148, 161, 169, 193, 205, 221, 269, 296, 306, 331, 344, 349, 370, 371, 392, 393, 394, 396, 399, 400, 401, 403, 409, 420, 463, 465, 473, 514, 590, 628, 676, 706, 746, 795, 802, 810, 829, 853, 929, 931, 932, 938, 942, 969], "linkag": [32, 35, 36, 37, 40, 43, 48, 51, 62, 148, 154, 392, 393, 397, 414, 463, 465, 473, 829, 952, 966, 976, 981, 984], "dbscan": [32, 40, 60, 148, 349, 351, 401, 403, 406, 463, 655, 656, 668, 687, 741, 743, 801, 829, 935, 968, 969, 973, 975, 977, 978, 980, 981, 982], "optic": [32, 40, 148, 285, 331, 374, 396, 406, 407, 408, 453, 968, 969, 982, 986, 987, 988, 989], "affin": [32, 40, 148, 273, 330, 340, 351, 362, 368, 392, 393, 397, 403, 405, 413, 463, 486, 642, 646, 655, 656, 668, 687, 741, 743, 845, 926, 929, 932, 968, 969, 973, 974, 977, 983, 984, 986, 988], "propag": [32, 148, 287, 333, 362, 392, 405, 453, 463, 465, 655, 656, 664, 665, 668, 669, 687, 741, 743, 809, 823, 844, 845, 846, 898, 899, 936, 954, 968, 969, 973, 985, 988], "agglomer": [32, 148, 330, 363, 371, 397, 453, 551, 557, 596, 747, 752, 809, 969], "unstructur": [32, 148, 270, 363, 393, 397, 414, 454, 481, 802, 944, 956, 977], "dendrogram": [32, 148, 154, 363, 393, 397, 455, 985], "pictur": [32, 148, 210, 227, 333, 352, 363, 368, 371, 413, 444, 445, 472, 953], "greek": [32, 148, 363, 413], "silhouett": [32, 34, 45, 52, 53, 148, 312, 338, 398, 463, 740, 741, 973, 977], "embed": [32, 40, 42, 104, 135, 148, 198, 201, 203, 205, 253, 262, 344, 351, 362, 363, 393, 403, 413, 440, 453, 495, 500, 517, 533, 590, 639, 640, 641, 642, 643, 644, 645, 646, 647, 798, 810, 819, 841, 842, 843, 924, 935, 938, 944, 949, 968, 969, 973, 974, 984, 985, 987], "explor": [33, 102, 103, 203, 204, 236, 237, 243, 244, 283, 299, 312, 320, 332, 335, 337, 344, 357, 363, 370, 423, 747, 750, 758, 830, 921, 928, 929, 931, 937, 939, 940, 942, 956, 961, 967, 979], "uniformli": [33, 111, 128, 206, 221, 281, 340, 467, 468, 469, 502, 593, 751, 759, 761, 828, 921, 922, 932, 935, 942, 977, 982], "divid": [33, 39, 44, 82, 85, 130, 140, 179, 221, 320, 334, 335, 360, 363, 367, 368, 420, 421, 422, 423, 424, 425, 426, 427, 463, 470, 485, 492, 601, 602, 605, 606, 607, 615, 616, 627, 628, 629, 670, 676, 684, 688, 706, 742, 744, 806, 807, 851, 854, 886, 889, 890, 921, 929, 931, 932, 935, 942, 946, 967, 973, 980, 981, 984], "randomli": [33, 44, 46, 56, 65, 79, 102, 114, 146, 148, 152, 183, 196, 210, 213, 226, 230, 241, 252, 288, 320, 325, 347, 349, 350, 363, 367, 370, 373, 400, 409, 463, 466, 470, 474, 482, 488, 496, 497, 502, 510, 511, 514, 515, 516, 561, 562, 622, 630, 641, 645, 667, 745, 746, 805, 843, 857, 858, 859, 860, 931, 933, 935, 938, 940, 944, 948, 965, 967, 984, 988], "quiroz": [33, 52, 158, 236, 238, 278, 311, 312, 313], "fundament": [33, 45, 74, 312, 336, 350, 366, 447, 489, 491, 498, 659, 928, 932], "homogen": [33, 34, 35, 40, 42, 45, 53, 312, 333, 349, 351, 365, 370, 373, 565, 655, 668, 681, 686, 687, 707, 743, 929, 930, 932, 982], "frequent": [33, 147, 238, 244, 245, 312, 327, 335, 338, 371, 502, 541, 581, 799, 822, 823, 826, 838, 922, 924, 932, 946, 950, 953], "ari": [33, 53, 312, 363, 656, 978, 984], "mutual": [33, 34, 45, 53, 127, 148, 370, 372, 543, 546, 547, 550, 551, 557, 558, 559, 560, 655, 656, 666, 705, 707, 736, 743, 921, 928, 932, 933, 973, 979, 989], "mi": [33, 128, 363, 558, 559, 655, 705, 707, 922, 932, 946], "theoret": [33, 52, 135, 362, 363, 370, 504, 505, 590, 655, 676, 706, 849, 921, 929, 931, 932, 934, 944, 946, 947, 955, 956], "nmi": [33, 363, 668, 686, 687, 707], "ami": [33, 45, 53, 363, 655], "score_func": [33, 543, 546, 547, 549, 550, 551, 692, 973, 975], "rand_scor": [33, 363, 666, 932, 985], "adjusted_rand_scor": [33, 34, 45, 53, 312, 363, 655, 666, 692, 707, 736, 932, 986], "mutual_info_scor": [33, 363, 655, 932, 981, 984, 985], "normalized_mutual_info_scor": [33, 363, 686, 705, 743, 932, 981, 987], "adjusted_mutual_info_scor": [33, 34, 45, 53, 363, 656, 666, 705, 707, 736, 932, 973, 981, 985, 989], "random_label": 33, "labels_a": 33, "labels_b": 33, "fixed_classes_uniform_labelings_scor": 33, "n_clusters_rang": 33, "n_run": [33, 56, 156, 312], "clase": [33, 278], "seaborn": [33, 98, 100, 150, 151, 158, 226, 235, 256, 338, 354, 356, 952], "sn": [33, 98, 100, 150, 151, 158, 226, 235, 256], "color_palett": [33, 98, 100, 226], "colorblind": [33, 98, 100], "vx": 33, "errorbar": [33, 56, 72, 74, 132, 141, 142, 255, 291, 302, 753], "refer": [33, 34, 55, 58, 65, 112, 118, 133, 144, 197, 242, 263, 273, 281, 282, 283, 284, 285, 286, 312, 325, 327, 336, 338, 339, 340, 342, 343, 344, 345, 346, 349, 350, 351, 352, 354, 357, 364, 374, 375, 376, 389, 390, 391, 392, 394, 396, 398, 399, 401, 402, 403, 404, 405, 408, 413, 414, 415, 418, 420, 423, 424, 425, 426, 449, 454, 462, 464, 466, 467, 468, 469, 470, 471, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 495, 498, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 541, 544, 545, 546, 553, 558, 559, 561, 562, 565, 570, 573, 574, 578, 579, 582, 583, 585, 586, 587, 588, 589, 590, 593, 594, 595, 596, 598, 600, 602, 604, 606, 607, 609, 612, 614, 616, 617, 618, 619, 622, 624, 626, 627, 629, 630, 633, 634, 639, 640, 641, 642, 643, 644, 645, 646, 647, 652, 655, 656, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 684, 685, 686, 687, 688, 690, 691, 693, 706, 708, 709, 719, 733, 735, 736, 738, 739, 740, 741, 743, 745, 746, 747, 749, 750, 751, 753, 761, 769, 770, 771, 772, 773, 774, 776, 779, 780, 784, 785, 786, 788, 794, 795, 796, 798, 805, 806, 807, 815, 816, 825, 826, 830, 837, 842, 843, 844, 845, 846, 849, 851, 852, 854, 855, 857, 858, 859, 860, 874, 886, 898, 943, 953, 958, 962, 966, 967, 973, 977, 978, 980, 981, 983, 984, 985, 986, 987, 988], "satur": [33, 151, 273], "uniform_labelings_scor": 33, "nwith": [33, 52, 56, 132, 312], "constantli": [33, 179, 956], "unbound": [33, 931, 987], "cardin": [33, 105, 106, 112, 153, 279, 363, 370, 414, 504, 505, 508, 509, 510, 511, 515, 516, 517, 630, 822, 823, 830, 857, 858, 859, 860, 932, 933, 940, 942, 987, 988], "why": [33, 48, 85, 151, 153, 156, 168, 232, 235, 312, 338, 346, 351, 363, 365, 368, 374, 396, 398, 402, 932, 934, 947, 962, 965, 976], "chart": [33, 240, 933, 960, 976], "henc": [33, 55, 66, 151, 183, 210, 244, 299, 311, 312, 324, 333, 340, 342, 344, 351, 363, 367, 370, 371, 438, 459, 490, 492, 493, 494, 514, 541, 594, 597, 603, 611, 613, 623, 638, 655, 656, 660, 666, 681, 707, 736, 743, 766, 767, 784, 785, 786, 787, 788, 824, 929, 931, 932, 933, 938, 939, 942, 953, 980, 981, 984, 985, 987], "safe": [33, 151, 168, 312, 338, 340, 363, 364, 386, 459, 460, 539, 542, 724, 728, 843, 898, 904, 935, 979, 980, 981, 986, 987], "stabil": [33, 103, 151, 183, 200, 240, 273, 312, 351, 360, 601, 605, 621, 787, 806, 807, 825, 837, 885, 922, 928, 931, 942, 953, 958, 973, 977, 981, 982, 983, 984, 985, 986, 987, 988], "mislead": [33, 105, 106, 112, 151, 339, 353, 370, 504, 505, 508, 509, 510, 511, 515, 516, 517, 857, 858, 859, 860, 969, 986], "meaning": [33, 204, 262, 313, 360, 367, 371, 372, 373, 499, 679, 680, 688, 733, 734, 737, 798, 936, 946, 947, 973, 989], "plot_adjusted_for_chance_measur": 33, "brendan": [34, 392, 405], "frei": [34, 392, 405, 983], "delbert": [34, 392, 405], "dueck": [34, 392, 405], "messag": [34, 40, 57, 64, 85, 311, 312, 333, 336, 337, 338, 342, 343, 346, 347, 363, 392, 405, 490, 494, 499, 525, 578, 663, 747, 750, 751, 753, 761, 773, 776, 778, 798, 806, 807, 868, 869, 870, 873, 876, 895, 916, 932, 942, 973, 977, 981, 983, 984, 985, 986, 987, 988, 989], "feb": [34, 392, 405], "affinitypropag": [34, 40, 285, 363, 973, 976, 977, 981, 984, 986, 987, 988, 989], "labels_tru": [34, 45, 59, 363, 655, 656, 665, 666, 668, 681, 686, 687, 705, 707, 736, 743], "af": 34, "prefer": [34, 40, 227, 244, 273, 320, 324, 325, 326, 336, 338, 339, 340, 351, 363, 367, 368, 370, 371, 392, 405, 422, 423, 429, 438, 459, 460, 578, 583, 584, 605, 609, 610, 652, 676, 678, 707, 708, 798, 824, 849, 850, 891, 898, 921, 924, 926, 928, 932, 937, 947, 948, 952, 965, 974, 980, 982, 986, 987], "cluster_centers_indic": [34, 405], "cluster_centers_indices_": [34, 392], "labels_": [34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 47, 48, 53, 56, 57, 58, 60, 62, 285, 312, 338, 351, 363, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 406, 966, 978], "n_clusters_": [34, 45, 58, 393, 397], "homogeneity_scor": [34, 45, 53, 312, 363, 668, 686, 743, 932], "completeness_scor": [34, 45, 53, 282, 312, 363, 686, 687, 743, 932], "silhouette_scor": [34, 45, 53, 55, 312, 338, 363, 973, 977, 979, 981, 983, 987], "sqeuclidean": [34, 401, 408, 728, 729, 730], "cycler": 34, "viridi": [34, 253, 648], "class_memb": 34, "cluster_cent": [34, 56, 58, 59, 412], "plot_affinity_propag": [34, 392, 405], "impos": [35, 52, 115, 173, 279, 349, 363, 368, 370, 371, 478, 608, 928], "simpli": [35, 78, 116, 135, 143, 203, 213, 244, 266, 283, 284, 324, 333, 338, 340, 343, 349, 351, 365, 366, 367, 368, 370, 371, 436, 646, 712, 715, 816, 888, 924, 932, 933, 934, 935, 946, 959, 967, 980, 981, 982], "There": [35, 42, 135, 197, 203, 215, 227, 230, 232, 235, 331, 333, 335, 338, 339, 340, 343, 349, 351, 354, 360, 362, 363, 368, 370, 371, 372, 403, 413, 485, 504, 505, 510, 511, 539, 540, 542, 557, 596, 922, 928, 929, 930, 931, 932, 935, 939, 942, 946, 947, 948, 951, 955, 966, 973, 981], "singl": [35, 44, 48, 49, 53, 56, 57, 66, 97, 100, 107, 108, 109, 117, 133, 135, 141, 146, 148, 152, 154, 156, 179, 181, 216, 218, 226, 231, 244, 270, 285, 299, 311, 312, 313, 316, 318, 320, 324, 325, 332, 333, 338, 343, 345, 346, 347, 349, 350, 351, 361, 362, 364, 366, 367, 368, 370, 371, 372, 386, 389, 392, 393, 397, 398, 400, 405, 415, 417, 418, 444, 445, 447, 457, 460, 485, 504, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 533, 543, 550, 551, 553, 557, 578, 583, 585, 594, 617, 618, 624, 627, 628, 629, 641, 643, 645, 661, 672, 673, 674, 675, 686, 687, 688, 691, 724, 735, 745, 746, 747, 750, 751, 761, 768, 771, 772, 774, 775, 778, 786, 789, 790, 794, 806, 807, 808, 818, 819, 822, 823, 824, 829, 830, 844, 845, 857, 858, 859, 860, 865, 896, 900, 919, 921, 927, 928, 929, 932, 933, 935, 937, 939, 940, 942, 946, 947, 948, 952, 956, 958, 965, 967, 973, 974, 975, 977, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989], "unstabl": [35, 61, 151, 363, 365, 366, 640, 644, 885, 886, 948, 977, 978, 980, 985, 987], "quickli": [35, 216, 269, 281, 335, 338, 339, 367, 370, 643, 928, 935, 936, 956, 967, 984], "fight": [35, 956], "percol": 35, "distanc": [35, 36, 52, 55, 56, 60, 62, 70, 74, 90, 146, 148, 154, 165, 180, 199, 201, 204, 210, 253, 255, 256, 261, 263, 265, 266, 273, 278, 281, 285, 286, 311, 312, 324, 335, 347, 349, 351, 360, 363, 365, 368, 369, 373, 374, 392, 393, 394, 395, 396, 397, 398, 400, 401, 403, 406, 407, 408, 409, 410, 412, 413, 414, 419, 420, 421, 422, 423, 424, 425, 426, 427, 489, 491, 498, 558, 559, 566, 570, 571, 573, 574, 579, 609, 610, 617, 619, 625, 626, 627, 628, 629, 639, 640, 641, 643, 644, 645, 646, 647, 650, 654, 675, 684, 708, 710, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 728, 729, 730, 731, 740, 741, 744, 778, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 828, 843, 847, 849, 851, 853, 854, 855, 857, 858, 859, 860, 922, 926, 929, 930, 932, 938, 942, 944, 946, 947, 953, 965, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "merg": [35, 37, 42, 47, 284, 336, 338, 341, 346, 349, 352, 363, 392, 393, 394, 397, 414, 767, 966, 973, 980], "exagger": [35, 151, 643, 929], "behaviour": [35, 90, 180, 181, 197, 301, 338, 351, 363, 370, 510, 511, 515, 516, 553, 847, 857, 858, 905, 921, 922, 932, 942, 981, 984, 985, 988], "shortest": [35, 343, 347, 639, 891, 929, 986], "mechan": [35, 308, 325, 340, 363, 371, 415, 808, 930, 948, 956], "resembl": 35, "brittl": [35, 363], "pronounc": [35, 36, 48, 140], "kneighbors_graph": [35, 40, 57, 62, 253, 351, 363, 393, 397, 791, 792, 793, 795, 797, 799, 800, 801, 803, 935, 973, 977, 982], "geometri": [35, 363, 929, 935], "instabl": [35, 151, 263, 403, 486, 490, 494, 646, 980, 983, 986], "agglomerativeclust": [35, 36, 37, 40, 43, 48, 51, 57, 62, 351, 363, 392, 394, 397, 966, 976, 977, 978, 981, 982, 983, 984, 985, 986, 988], "1500": [35, 52, 57, 62, 83, 199, 203, 221], "knn_graph": 35, "include_self": [35, 40, 62, 802, 803, 977], "17": [35, 48, 73, 178, 268, 277, 333, 336, 343, 354, 355, 356, 363, 367, 373, 396, 412, 438, 448, 474, 482, 487, 491, 498, 500, 501, 506, 510, 511, 520, 521, 548, 579, 600, 608, 609, 610, 617, 620, 623, 625, 638, 643, 679, 680, 690, 711, 716, 734, 737, 739, 765, 787, 798, 813, 818, 819, 827, 829, 835, 851, 854, 857, 858, 859, 860, 921, 922, 933, 935, 942, 950, 971, 973, 974, 975, 976, 979, 982, 987], "plot_agglomerative_clust": 35, "waveform": 36, "euclidean": [36, 52, 53, 165, 210, 253, 261, 281, 286, 312, 360, 362, 363, 368, 369, 370, 371, 373, 392, 393, 396, 397, 401, 403, 408, 411, 414, 482, 488, 540, 566, 570, 573, 574, 627, 629, 641, 643, 646, 647, 650, 712, 713, 719, 720, 721, 722, 728, 729, 730, 731, 740, 741, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 843, 922, 926, 930, 933, 935, 944, 953, 977, 980, 981, 982, 983, 989], "cityblock": [36, 40, 363, 401, 408, 712, 728, 729, 730, 935], "invari": [36, 335, 351, 363, 373, 565, 640, 697, 765, 766, 928, 929, 932, 947, 953, 981, 984, 985, 986], "ie": [36, 61, 86, 392, 655, 718, 928, 942], "inter": [36, 105, 320, 370, 667, 892], "character": [36, 197, 315, 363, 367, 929], "ill": [36, 75, 184, 429, 601, 602, 605, 606, 607, 633, 634, 928, 931, 966, 983], "recov": [36, 60, 75, 86, 87, 93, 108, 135, 150, 178, 179, 199, 313, 365, 369, 372, 375, 411, 484, 510, 928, 929, 931, 953, 966, 979], "put": [36, 53, 126, 135, 137, 211, 217, 221, 268, 275, 285, 293, 303, 304, 309, 326, 340, 342, 343, 346, 373, 395, 398, 410, 466, 565, 598, 612, 745, 826, 830, 838, 851, 852, 853, 854, 855, 876, 922, 929, 931, 932, 933, 939, 942, 955, 959, 961, 967, 985], "cc": [36, 336], "patheffect": 36, "pairwise_dist": [36, 351, 363, 374, 393, 396, 397, 401, 408, 639, 647, 712, 721, 729, 730, 740, 741, 793, 795, 797, 801, 930, 973, 977, 979, 981, 982, 984, 985], "sqr": 36, "sign": [36, 72, 78, 86, 89, 101, 163, 226, 268, 307, 338, 363, 368, 371, 495, 533, 540, 557, 586, 587, 609, 610, 617, 619, 625, 626, 627, 628, 685, 692, 849, 853, 884, 886, 897, 928, 932, 937, 942, 946, 947, 966, 973, 977, 982, 986, 988], "phi": [36, 368, 693, 815, 924, 932, 942, 947], "phase_nois": 36, "amplitude_nois": 36, "additional_nois": 36, "997": 36, "f7bd01": 36, "377eb8": [36, 40, 57, 58, 206], "f781bf": [36, 40, 57, 58], "set_label": [36, 138, 210], "avg_dist": [36, 731], "set_path_effect": 36, "withstrok": 36, "foreground": [36, 61], "cividi": 36, "vmin": [36, 75, 85, 88, 96, 138, 141, 158, 170, 195, 211, 225, 230, 270, 299], "45": [36, 59, 67, 129, 140, 153, 242, 246, 247, 299, 320, 367, 370, 371, 515, 516, 578, 585, 738, 745, 853, 922, 932, 940, 951, 963, 973, 976], "interclass": 36, "plot_agglomerative_clustering_metr": 36, "hierarchi": [37, 154, 401, 407, 414, 937, 966], "plot_dendrogram": 37, "kwarg": [37, 88, 340, 345, 377, 390, 415, 486, 489, 491, 568, 582, 597, 598, 603, 604, 611, 612, 613, 614, 632, 635, 649, 650, 651, 653, 692, 789, 790, 808, 809, 813, 864, 883, 980, 984, 986], "children_": [37, 393, 397, 414], "current_count": 37, "child_idx": 37, "leaf": [37, 104, 114, 116, 315, 319, 363, 370, 374, 393, 394, 395, 396, 397, 401, 408, 414, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 789, 790, 791, 792, 793, 794, 795, 797, 799, 800, 801, 857, 858, 859, 860, 861, 862, 935, 948, 976, 978, 980, 984, 987], "linkage_matrix": 37, "column_stack": [37, 268, 275], "distances_": [37, 393, 397, 985], "distance_threshold": [37, 393, 397, 982, 985], "truncate_mod": 37, "parenthesi": [37, 338], "plot_agglomerative_dendrogram": 37, "scalabl": [38, 40, 57, 148, 155, 228, 286, 312, 338, 363, 370, 371, 399, 442, 453, 540, 591, 753, 764, 773, 775, 787, 810, 819, 821, 849, 851, 854, 855, 924, 927, 929, 932, 945, 947, 956, 973, 976, 977, 983, 984, 987, 988], "hundr": [38, 110, 200, 277, 333, 367, 370, 512, 513, 929, 984], "thousand": [38, 210, 212, 277, 312, 333, 363, 370, 806, 807, 854, 929, 967, 982, 984], "million": [38, 51, 140, 156, 371, 373, 643, 929, 947, 956, 987, 988], "chose": [38, 151, 962], "usag": [38, 49, 68, 77, 89, 109, 130, 207, 211, 229, 256, 262, 264, 270, 295, 313, 324, 337, 338, 340, 341, 345, 346, 348, 351, 352, 363, 367, 368, 373, 374, 396, 401, 440, 512, 513, 560, 599, 609, 610, 611, 617, 619, 620, 627, 628, 629, 630, 631, 728, 731, 740, 741, 849, 857, 858, 859, 860, 886, 921, 924, 931, 932, 933, 935, 947, 954, 958, 962, 969, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989], "enjoi": 38, "edit": [38, 335, 337, 338, 341, 342, 346, 349, 354, 481, 485, 779, 926, 928, 933, 939, 967], "rerun": [38, 346], "158": [38, 370, 620], "manojkumarsivaraj334": 38, "joblib": [38, 50, 66, 253, 282, 333, 336, 338, 341, 347, 349, 351, 354, 356, 357, 362, 364, 374, 389, 393, 396, 397, 399, 401, 403, 408, 409, 412, 415, 418, 423, 459, 482, 486, 487, 488, 490, 493, 494, 496, 497, 499, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 545, 553, 561, 583, 585, 590, 598, 602, 604, 606, 608, 609, 610, 612, 614, 616, 617, 619, 627, 630, 639, 640, 641, 642, 643, 644, 645, 724, 728, 731, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 782, 791, 792, 795, 797, 799, 800, 802, 803, 808, 809, 810, 811, 844, 845, 898, 899, 900, 902, 917, 932, 953, 973, 974, 976, 978, 980, 981, 982, 984, 985, 988], "cpu_count": [38, 253, 900], "22": [38, 148, 152, 196, 273, 277, 280, 313, 336, 338, 342, 343, 354, 355, 356, 360, 389, 399, 423, 439, 440, 446, 447, 455, 466, 475, 482, 488, 493, 496, 497, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 545, 578, 579, 583, 585, 596, 598, 602, 604, 606, 609, 610, 612, 614, 616, 620, 639, 643, 655, 664, 707, 719, 728, 733, 734, 738, 747, 748, 752, 761, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 793, 795, 797, 799, 800, 801, 806, 807, 808, 810, 813, 829, 849, 851, 852, 853, 854, 855, 857, 858, 859, 860, 880, 881, 932, 942, 950, 971, 973, 976, 981, 984, 986], "n_center": [38, 463], "25000": 38, "colors_": 38, "cname": 38, "birch_model": 38, "final_step": 38, "centroid": [38, 41, 52, 53, 148, 254, 276, 285, 312, 334, 363, 394, 395, 398, 399, 400, 403, 410, 411, 413, 455, 500, 796, 954, 969, 973, 977, 980, 985, 989], "subcluster_centers_": [38, 394], "this_centroid": 38, "set_autoscaley_on": 38, "mbk": [38, 59], "256": [38, 44, 49, 110, 279, 325, 333, 363, 370, 400, 419, 488, 497, 514, 805, 837, 847, 967, 987], "max_no_improv": [38, 56, 59, 400, 488, 489, 490, 497, 987, 988], "t_mini_batch": [38, 59], "mbk_means_labels_uniqu": 38, "cluster_centers_": [38, 39, 44, 46, 53, 55, 56, 58, 59, 85, 285, 312, 392, 395, 398, 399, 400, 966], "plot_birch_vs_minibatchkmean": 38, "bisectingkmean": [39, 363, 987, 988, 989], "__doc__": [39, 69, 140, 215, 224, 351], "n_clusters_list": 39, "clustering_algorithm": [39, 40, 57], "variant": [39, 85, 145, 148, 235, 284, 285, 312, 313, 344, 363, 366, 368, 371, 373, 400, 411, 441, 444, 445, 463, 466, 494, 510, 511, 516, 566, 570, 573, 574, 578, 581, 589, 590, 592, 596, 623, 655, 748, 752, 754, 755, 756, 765, 771, 792, 810, 846, 922, 928, 929, 930, 931, 932, 934, 935, 946, 953, 967, 973, 981], "algorithm_nam": 39, "algo": [39, 95], "hide": [39, 346, 784, 785, 786, 787, 788, 976, 981], "flat": [39, 85, 91, 152, 199, 200, 201, 233, 363, 371, 392, 399, 412, 460, 939, 966, 973, 974], "label_out": 39, "plot_bisect_kmean": 39, "null": [40, 153, 235, 241, 367, 599, 620, 631, 655, 681, 707, 743, 774, 928, 929, 932, 947, 983], "mismatch": [40, 931, 982], "warn": [40, 57, 66, 179, 194, 238, 253, 269, 270, 277, 324, 327, 338, 341, 342, 343, 351, 357, 371, 375, 398, 400, 410, 447, 484, 501, 504, 505, 508, 509, 510, 511, 515, 516, 517, 522, 523, 524, 525, 526, 527, 529, 553, 581, 587, 621, 641, 644, 645, 663, 664, 679, 680, 688, 733, 734, 737, 784, 785, 786, 788, 813, 814, 852, 853, 854, 855, 857, 858, 859, 860, 869, 870, 876, 886, 898, 900, 902, 918, 919, 921, 932, 942, 965, 973, 975, 976, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989], "noisy_circl": [40, 57], "noisy_moon": [40, 57], "no_structur": [40, 57], "anisotropicli": [40, 57], "170": [40, 52, 57, 344], "x_aniso": [40, 52, 57], "aniso": [40, 57], "plot_num": [40, 57, 206], "default_bas": [40, 57], "quantil": [40, 49, 58, 82, 99, 101, 148, 157, 273, 276, 277, 349, 370, 390, 391, 409, 470, 503, 511, 513, 608, 621, 673, 695, 698, 700, 772, 814, 826, 827, 828, 838, 839, 932, 942, 954, 969, 973, 977, 980, 982, 986, 987, 989], "damp": [40, 363, 392, 405], "min_sampl": [40, 45, 60, 349, 351, 363, 374, 396, 401, 407, 408, 622, 928, 982, 986], "xi": [40, 60, 335, 363, 366, 371, 401, 407, 460, 946, 984], "min_cluster_s": [40, 60, 401, 407, 982], "77": [40, 244, 332, 335, 485], "240": [40, 940, 973], "08": [40, 46, 88, 152, 271, 335, 482, 494, 496, 514, 592, 609, 747, 806, 807, 828, 938], "220": [40, 973], "i_dataset": [40, 57, 206], "algo_param": [40, 57], "param": [40, 56, 57, 65, 110, 112, 113, 199, 212, 233, 235, 243, 247, 257, 269, 338, 340, 351, 370, 373, 377, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 639, 640, 641, 642, 643, 745, 746, 747, 750, 751, 759, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 921, 979, 983, 984, 986, 987], "estimate_bandwidth": [40, 58, 363, 399, 412], "symmetr": [40, 111, 154, 181, 351, 361, 363, 403, 413, 414, 425, 470, 478, 480, 641, 645, 646, 655, 656, 666, 667, 668, 674, 678, 686, 687, 705, 707, 713, 735, 743, 745, 746, 918, 921, 928, 932, 935], "meanshift": [40, 285, 363, 392, 976, 977, 978, 981, 983, 984, 987, 988, 989], "bin_seed": [40, 58, 399, 412, 984], "two_mean": 40, "spectralclust": [40, 285, 363, 392, 935, 973, 974, 983, 985, 986, 987, 988, 989], "nearest_neighbor": [40, 403, 642], "average_linkag": 40, "gmm": [40, 148, 220, 222, 225, 226, 227, 455, 463, 746, 766, 931, 973, 974, 977, 978, 979], "gaussianmixtur": [40, 52, 222, 223, 224, 225, 226, 227, 369, 745, 979, 981, 982, 986, 987], "covariance_typ": [40, 222, 223, 225, 226, 227, 745, 746], "nkmean": 40, "npropag": 40, "ncluster": 40, "nmixtur": 40, "catch": [40, 57, 270, 346, 347], "catch_warn": [40, 57, 269, 270], "filterwarn": [40, 57, 194, 269, 270, 338, 942], "userwarn": [40, 57, 343, 663, 942, 979, 981, 986], "fulli": [40, 105, 111, 324, 332, 333, 351, 369, 370, 372, 395, 398, 508, 509, 515, 516, 857, 858, 859, 860, 861, 863, 921, 922, 928, 937, 945, 952, 986, 987], "t1": [40, 42, 57, 194, 201, 204, 206], "ff7f00": [40, 57, 206], "4daf4a": [40, 57], "a65628": [40, 57], "984ea3": [40, 57], "999999": [40, 57], "e41a1c": [40, 57], "dede00": [40, 57, 58], "000000": [40, 277, 687], "transax": [40, 57, 203, 206, 223, 261, 275], "plot_cluster_comparison": 40, "bad": [41, 55, 56, 136, 151, 311, 320, 338, 363, 373, 643, 696, 921, 928, 929, 934, 940, 966, 973], "eight": [41, 967], "deliv": [41, 324, 956], "though": [41, 133, 156, 158, 241, 258, 275, 277, 312, 313, 320, 324, 332, 335, 338, 340, 350, 351, 363, 368, 369, 370, 371, 372, 650, 754, 756, 849, 921, 922, 924, 929, 932, 935, 942, 946, 967, 981], "3d": [41, 44, 62, 81, 91, 92, 152, 176, 199, 201, 203, 371, 457, 537, 895, 980, 981, 983], "mplot3d": [41, 62, 81, 91, 92, 152, 176, 199, 201], "noqa": [41, 62, 81, 91, 92, 111, 146, 147, 152, 176, 199, 201, 246, 247, 283, 342, 530, 531, 578, 750, 751, 921, 982], "f401": [41, 62, 81, 91, 92, 152, 176, 199, 201], "k_means_iris_8": 41, "k_means_iris_3": 41, "k_means_iris_bad_init": 41, "est": [41, 118, 151, 214, 275, 283, 320, 357, 370, 513, 685, 814, 921, 932, 942, 946, 984, 985], "elev": [41, 62, 81, 91, 92, 152, 176, 199, 203], "azim": [41, 62, 81, 91, 92, 152, 176, 199, 203], "134": [41, 92, 110, 235, 976], "xaxi": [41, 81, 91, 92, 176, 199, 201, 204, 253, 258, 311], "set_ticklabel": [41, 81, 91, 92, 176, 311], "zaxi": [41, 81, 91, 92, 176, 199], "petal": [41, 81, 94, 96, 107, 286, 335, 364, 862, 948, 964, 965], "sepal": [41, 81, 94, 96, 107, 137, 162, 286, 296, 335, 942, 964, 965], "length": [41, 64, 80, 81, 83, 94, 96, 107, 135, 136, 137, 140, 141, 143, 156, 162, 213, 216, 286, 296, 313, 331, 335, 338, 346, 347, 351, 364, 368, 370, 371, 373, 397, 441, 459, 460, 463, 466, 474, 502, 514, 532, 533, 540, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 583, 597, 598, 601, 602, 603, 604, 605, 607, 608, 611, 612, 613, 614, 632, 635, 731, 747, 750, 751, 761, 775, 777, 780, 781, 783, 791, 792, 793, 795, 797, 836, 862, 869, 871, 875, 891, 892, 903, 906, 931, 938, 942, 958, 964, 965, 973, 976, 977, 979, 980, 981, 982, 984, 985, 989], "set_zlabel": [41, 81, 176], "setosa": [41, 81, 92, 94, 244, 245, 335, 455, 958, 965], "versicolour": [41, 81, 92, 94, 335, 965], "virginica": [41, 81, 92, 94, 244, 245, 335, 455, 932, 965], "text3d": [41, 92], "reorder": [41, 92, 351, 648, 669, 953, 981], "plot_cluster_iri": 41, "voxel": [42, 61, 536], "multipl": [42, 63, 83, 95, 106, 107, 148, 151, 173, 211, 235, 247, 255, 281, 324, 325, 326, 332, 334, 335, 338, 340, 341, 342, 343, 349, 351, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 375, 396, 411, 415, 417, 418, 420, 425, 439, 442, 443, 446, 447, 448, 454, 455, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 502, 504, 505, 506, 507, 510, 511, 512, 513, 514, 532, 550, 558, 559, 561, 562, 578, 583, 585, 590, 591, 592, 593, 597, 598, 601, 603, 604, 605, 608, 611, 612, 613, 614, 617, 618, 619, 622, 624, 627, 629, 630, 640, 641, 643, 644, 645, 672, 673, 678, 695, 696, 698, 700, 701, 703, 735, 738, 741, 745, 746, 747, 749, 750, 751, 752, 753, 759, 761, 762, 763, 764, 765, 766, 767, 771, 772, 773, 775, 779, 780, 781, 782, 783, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 811, 814, 826, 830, 838, 841, 842, 849, 850, 851, 854, 865, 880, 885, 886, 903, 906, 924, 927, 928, 929, 933, 934, 935, 939, 940, 942, 945, 946, 948, 952, 953, 958, 967, 973, 974, 976, 979, 980, 983, 984, 985, 986, 988, 989], "partli": [42, 719], "procedur": [42, 51, 111, 133, 159, 167, 226, 237, 276, 299, 311, 320, 338, 340, 349, 350, 351, 352, 361, 362, 365, 367, 368, 370, 372, 482, 488, 489, 491, 496, 497, 498, 504, 505, 506, 507, 510, 511, 544, 546, 553, 560, 595, 623, 625, 638, 678, 735, 806, 807, 826, 838, 903, 921, 928, 934, 940, 942, 945, 946, 947, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "solut": [42, 158, 168, 170, 183, 184, 193, 206, 212, 284, 299, 336, 340, 351, 360, 363, 365, 367, 368, 371, 372, 373, 400, 402, 404, 482, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 561, 597, 599, 601, 603, 605, 606, 607, 609, 611, 613, 615, 616, 617, 618, 619, 620, 623, 625, 627, 628, 629, 630, 631, 633, 634, 636, 637, 638, 745, 746, 761, 798, 806, 807, 925, 926, 928, 929, 931, 936, 938, 946, 947, 951, 956, 962, 965, 967, 973, 976, 986, 987, 988], "closest": [42, 59, 340, 363, 392, 394, 395, 398, 399, 400, 410, 604, 729, 730, 779, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 923, 926, 933, 935, 965], "partit": [42, 61, 64, 114, 116, 235, 270, 360, 361, 363, 367, 370, 400, 402, 404, 413, 462, 508, 509, 510, 511, 514, 515, 516, 655, 656, 666, 736, 797, 857, 858, 859, 860, 931, 935, 938, 942, 948, 967], "cluster_qr": [42, 363, 403, 413, 987], "qr": [42, 181, 485, 492, 495, 885, 886, 929, 979], "pivot": [42, 246, 247], "cheung": [42, 974], "andrew": [42, 363, 413, 642, 646, 668, 687, 743, 824, 936, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "knyazev": [42, 363, 403, 413, 646, 983, 986, 987], "ucdenv": 42, "skimag": [42, 43, 332, 966], "spectral_clust": [42, 61, 981, 983, 985, 986, 987, 988], "orig_coin": [42, 43], "speed": [42, 43, 52, 64, 88, 147, 152, 165, 168, 172, 215, 253, 283, 289, 311, 313, 326, 327, 338, 341, 347, 349, 351, 361, 363, 368, 371, 374, 395, 396, 398, 399, 400, 401, 403, 408, 410, 411, 412, 413, 482, 483, 561, 578, 583, 584, 585, 590, 597, 598, 601, 602, 603, 604, 605, 606, 607, 611, 612, 613, 614, 615, 632, 635, 643, 745, 746, 753, 773, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 824, 886, 921, 929, 931, 933, 946, 956, 966, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988], "down": [42, 43, 74, 194, 195, 201, 210, 211, 238, 271, 273, 320, 332, 341, 346, 365, 368, 395, 401, 407, 541, 544, 545, 590, 600, 724, 728, 731, 824, 827, 828, 839, 851, 854, 861, 928, 958, 966, 981], "alias": [42, 43, 336, 338, 341, 398, 410, 973, 977, 987], "smoothened_coin": [42, 43], "rescaled_coin": [42, 43, 966], "anti_alias": [42, 43, 966], "img_to_graph": [42, 61, 371, 976, 986], "exponenti": [42, 69, 135, 140, 258, 263, 369, 370, 373, 400, 487, 505, 510, 565, 570, 573, 590, 594, 708, 709, 789, 790, 794, 806, 807, 824, 924, 928, 932, 947, 965, 980, 986], "beta": [42, 77, 150, 344, 361, 363, 366, 487, 489, 491, 498, 595, 679, 680, 686, 692, 733, 743, 745, 932, 965, 975, 978, 980, 982, 983], "voronoi": [42, 61, 363], "n_region": 42, "extra": [42, 107, 214, 253, 313, 336, 337, 339, 342, 351, 370, 371, 390, 395, 398, 410, 415, 483, 508, 509, 517, 541, 542, 651, 652, 653, 770, 793, 859, 860, 876, 931, 935, 973, 976, 978, 979, 981, 986, 988], "benetif": 42, "n_regions_plu": 42, "lobpcg": [42, 403, 413, 639, 642, 646, 983, 986, 987, 988], "amg": [42, 61, 363, 403, 413, 642, 646, 983, 987, 988], "pyamg": [42, 354, 356, 363, 403, 413, 642, 646], "toler": [42, 67, 146, 170, 172, 195, 196, 313, 333, 340, 347, 363, 375, 395, 398, 403, 410, 413, 422, 423, 429, 433, 434, 435, 482, 483, 484, 486, 487, 491, 492, 493, 494, 495, 496, 498, 499, 510, 511, 512, 513, 578, 597, 598, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 627, 629, 630, 632, 633, 634, 635, 639, 640, 641, 642, 644, 645, 646, 789, 790, 794, 798, 806, 807, 844, 845, 849, 850, 851, 852, 853, 854, 855, 918, 928, 932, 946, 947, 963, 985, 986, 987, 988], "eigen_tol": [42, 403, 413, 642, 646, 974, 987, 988], "todo": [42, 210, 342, 346, 351, 363, 989], "21243": 42, "assign_label": [42, 363, 403, 413], "individu": [42, 55, 73, 97, 102, 118, 128, 144, 148, 149, 179, 197, 207, 238, 240, 281, 307, 325, 339, 342, 345, 347, 351, 353, 360, 364, 367, 370, 371, 389, 403, 413, 415, 447, 452, 454, 460, 506, 507, 510, 511, 513, 514, 516, 518, 519, 520, 521, 554, 560, 561, 583, 584, 594, 596, 608, 609, 610, 619, 622, 623, 624, 625, 626, 627, 628, 629, 638, 663, 670, 678, 684, 700, 701, 735, 747, 761, 777, 781, 782, 784, 785, 786, 787, 788, 807, 810, 818, 819, 821, 822, 823, 826, 828, 829, 834, 835, 836, 849, 850, 932, 933, 942, 947, 962, 967, 969, 974, 977, 979, 985, 987], "comment": [42, 336, 337, 338, 339, 341, 342, 346, 352, 438, 530, 932], "paus": 42, "21194": [42, 986], "plot_coin_segment": 42, "spatial": [43, 45, 154, 196, 270, 333, 351, 363, 374, 396, 401, 403, 408, 630, 643, 650, 710, 713, 728, 729, 730, 731, 740, 741, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 928, 935, 942, 975, 979, 986], "constrain": [43, 85, 108, 115, 152, 170, 268, 282, 297, 299, 331, 351, 362, 363, 368, 370, 460, 512, 513, 586, 609, 641, 645, 774, 928, 931, 977], "piec": [43, 180, 325, 931], "grid_to_graph": [43, 47, 50, 363, 371, 966, 986], "st": [43, 62, 235, 976, 979, 981], "plot_coin_ward_segment": 43, "vq": [44, 53], "palac": 44, "china": [44, 363, 457, 458, 535], "615": 44, "literatur": [44, 140, 235, 312, 335, 338, 344, 346, 349, 350, 363, 366, 368, 370, 395, 398, 400, 452, 487, 489, 491, 498, 506, 507, 539, 542, 659, 745, 921, 924, 928, 932, 983], "codebook": [44, 517, 779], "palett": [44, 151, 235, 256], "byte": [44, 49, 371, 438, 454, 459, 460, 533, 539, 540, 542, 897, 965, 967, 973, 980, 981, 988], "wherea": [44, 49, 62, 73, 98, 114, 183, 193, 236, 237, 238, 244, 278, 308, 326, 367, 370, 516, 609, 610, 749, 765, 777, 924, 931, 933, 935, 942, 948, 986], "rgb": [44, 333, 371, 444, 445, 534, 535, 538], "gif": 44, "pick": [44, 55, 154, 213, 243, 285, 288, 333, 338, 342, 363, 370, 395, 411, 474, 624, 859, 860, 921, 928, 929, 931, 946, 984], "robertlayton": 44, "pairwise_distances_argmin": [44, 59, 285, 730, 981, 987, 988, 989], "load_sample_imag": [44, 534, 535, 982], "n_color": 44, "photo": 44, "jpg": [44, 457, 535], "255": [44, 88, 253, 270, 279, 284, 333, 444, 445, 512, 513], "original_shap": 44, "image_arrai": 44, "image_array_sampl": 44, "codebook_random": 44, "labels_random": 44, "recreate_imag": 44, "recreat": [44, 216], "book": [44, 395, 398, 400, 779, 784, 788, 928, 929, 930, 933, 950, 985], "alongsid": [44, 338, 344, 351, 354, 372, 932, 939, 952, 953], "plot_color_quant": 44, "750": [45, 106], "math": [45, 215, 235, 236, 335, 338, 354, 714], "db": [45, 363], "n_noise_": 45, "come": [45, 62, 73, 78, 90, 91, 135, 211, 281, 307, 311, 312, 324, 326, 331, 335, 338, 339, 342, 346, 349, 351, 354, 363, 367, 370, 371, 391, 401, 407, 423, 501, 656, 743, 768, 851, 854, 921, 922, 926, 929, 931, 935, 938, 947, 958, 973, 984, 987, 989], "handi": [45, 65, 312, 313, 339, 989], "asign": [45, 312], "unique_label": [45, 312, 340, 347], "core_samples_mask": 45, "zeros_lik": [45, 181, 244], "bool": [45, 61, 74, 147, 197, 319, 338, 375, 376, 377, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 470, 473, 474, 475, 477, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 648, 651, 653, 654, 658, 659, 660, 662, 663, 664, 665, 676, 677, 678, 679, 680, 681, 688, 691, 692, 700, 701, 704, 706, 711, 713, 717, 718, 719, 724, 728, 732, 733, 734, 735, 737, 739, 742, 744, 745, 746, 747, 750, 751, 752, 753, 761, 765, 766, 769, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 867, 868, 869, 870, 880, 886, 887, 894, 897, 903, 905, 913, 918, 919, 920, 922, 982, 985, 986], "core_sample_indices_": [45, 396], "class_member_mask": 45, "markerfacecolor": [45, 56, 58, 59], "plot_dbscan": [45, 374, 396], "constitut": [46, 351, 367, 370, 401, 407, 539, 540, 542, 936], "standpoint": 46, "proce": [46, 130, 160, 336, 342, 366, 367, 370, 392, 928], "reassign": [46, 338, 398, 400, 974, 978], "success": [46, 148, 228, 242, 320, 358, 363, 367, 368, 370, 466, 515, 530, 747, 750, 751, 768, 854, 935, 956, 962, 966, 969, 985], "becom": [46, 52, 66, 73, 181, 237, 253, 274, 278, 299, 311, 320, 332, 338, 340, 342, 346, 351, 352, 363, 365, 370, 371, 373, 392, 401, 405, 406, 408, 532, 539, 540, 542, 553, 570, 578, 609, 610, 627, 629, 823, 849, 850, 856, 927, 928, 929, 931, 935, 942, 947, 965, 967, 974, 981, 982, 985, 986, 987, 988], "fetch_olivetti_fac": [46, 85, 106, 214, 333, 981, 982, 983], "extract_patches_2d": [46, 88, 371, 981], "81": [46, 363, 738, 747, 761, 932, 933, 935, 942], "patch_siz": [46, 88, 371, 534, 535], "buffer": [46, 986], "max_patch": [46, 371, 534, 535, 981], "4i": 46, "dt": [46, 88, 98, 119, 370, 371, 948], "ntrain": 46, "plot_dict_face_patch": 46, "agglo": [47, 397, 966], "featureagglomer": [47, 50, 392, 393, 949, 966, 976, 982, 983, 986, 987], "x_reduc": [47, 81, 116, 397, 966], "x_restor": 47, "images_restor": 47, "91": [47, 370, 927, 963, 967], "vmax": [47, 75, 85, 88, 96, 138, 141, 158, 170, 195, 211, 225, 230, 270, 299], "plot_digits_agglomer": 47, "rich": [48, 346, 349, 363, 391, 956, 984, 987], "richer": [48, 95, 363], "uneven": [48, 230, 363, 367], "patholog": [48, 931, 979], "clean": [48, 65, 178, 320, 330, 336, 369, 938, 942, 983], "fring": [48, 363], "sensibl": [48, 146, 312, 340, 928, 942], "resampl": [48, 111, 140, 151, 197, 257, 347, 349, 506, 507, 906, 953, 982, 986], "plot_clust": 48, "x_red": 48, "spectralembed": [48, 199, 200, 201, 639, 640, 641, 643, 929, 974, 979, 983, 987, 988], "plot_digits_linkag": 48, "raccoon": [49, 88, 368], "addition": [49, 66, 101, 151, 179, 197, 282, 284, 312, 338, 349, 361, 371, 561, 562, 597, 603, 622, 826, 921, 922, 932, 940, 952, 979], "adapt": [49, 98, 110, 111, 138, 221, 222, 275, 325, 336, 337, 338, 347, 370, 373, 466, 467, 468, 469, 627, 628, 629, 806, 807, 928, 934, 936, 942, 946, 952, 953, 981, 982], "pooch": [49, 338, 354, 356], "instal": [49, 219, 253, 281, 282, 283, 284, 285, 286, 324, 325, 327, 338, 339, 341, 342, 344, 346, 349, 350, 356, 363, 371, 403, 413, 447, 642, 646, 900, 948, 950, 967, 980, 981, 982, 986, 987], "raccoon_fac": [49, 88], "nbyte": [49, 210], "768": 49, "1024": [49, 95, 400, 419, 489, 847, 986], "unsign": [49, 89, 333, 533, 897], "786": 49, "kilobyt": 49, "shade": [49, 162, 256, 261, 295, 368], "render": [49, 174, 338, 342, 343, 344, 351, 502, 540, 582, 826, 838, 861, 863, 931, 948, 986], "behind": [49, 73, 340, 342, 346, 362, 365, 370, 931, 935, 944], "simplest": [49, 367, 929, 932, 965, 966], "certainli": [49, 312], "compressed_raccoon_uniform": 49, "spot": [49, 208, 363], "leav": [49, 104, 112, 152, 154, 197, 242, 278, 319, 320, 324, 335, 337, 343, 351, 363, 370, 373, 393, 394, 397, 414, 454, 508, 509, 510, 511, 512, 513, 515, 516, 517, 624, 626, 749, 754, 755, 756, 757, 765, 766, 789, 790, 838, 857, 858, 859, 860, 921, 929, 935, 939, 948, 962, 965, 973, 980, 982, 984, 985], "bin_edg": 49, "bin_edges_": [49, 274, 814], "bin_cent": [49, 179], "axvlin": [49, 55, 67, 75, 93, 110, 120, 151, 153, 168, 241, 963], "get_ybound": 49, "state": [49, 52, 64, 66, 73, 181, 210, 217, 222, 241, 283, 320, 325, 326, 338, 340, 344, 346, 349, 351, 352, 362, 371, 376, 392, 395, 398, 400, 405, 410, 426, 495, 540, 630, 750, 751, 759, 761, 763, 789, 790, 796, 844, 845, 872, 921, 922, 928, 934, 937, 944, 952, 953, 956, 975, 977, 979, 981, 983, 986], "compressed_raccoon_kmean": 49, "save": [49, 64, 66, 271, 337, 338, 342, 344, 345, 346, 351, 357, 367, 375, 419, 485, 486, 578, 789, 790, 847, 928, 932, 948, 956, 967, 973, 976, 980, 983], "verifi": [49, 55, 151, 179, 338, 343, 916, 935], "surpris": [49, 152, 928, 952, 975], "x8": 49, "ndarrai": [49, 53, 81, 179, 233, 234, 235, 338, 339, 340, 344, 345, 359, 371, 374, 375, 378, 379, 381, 383, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 448, 451, 452, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 648, 649, 650, 651, 652, 653, 666, 669, 672, 673, 674, 677, 678, 688, 695, 696, 698, 700, 701, 703, 704, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 739, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 867, 868, 869, 874, 875, 885, 886, 887, 888, 891, 892, 894, 896, 897, 901, 904, 905, 907, 908, 909, 910, 913, 918, 919, 932, 947, 953, 976, 980, 983, 984, 987, 988, 989], "practic": [49, 65, 73, 78, 88, 108, 135, 150, 151, 156, 181, 206, 212, 236, 243, 259, 260, 283, 299, 325, 327, 338, 340, 341, 344, 346, 350, 351, 363, 365, 367, 368, 369, 370, 371, 373, 398, 403, 413, 472, 475, 540, 583, 584, 621, 745, 788, 842, 849, 921, 922, 926, 931, 932, 933, 934, 935, 938, 939, 942, 952, 953, 954, 956, 958, 967, 968, 969, 975, 979, 981, 983, 985], "gain": [49, 201, 242, 253, 255, 289, 311, 312, 319, 337, 344, 346, 349, 370, 483, 508, 512, 513, 515, 676, 706, 745, 746, 778, 857, 859, 933, 937, 945, 948, 976, 980, 983], "plot_face_compress": 49, "anova": [50, 127, 148, 294, 364, 455, 466, 543, 546, 547, 549, 550, 551, 555, 556, 557, 560, 664, 771, 775, 809, 810, 829, 849, 854, 947], "bayesianridg": [50, 146, 158, 159, 283, 578, 595, 928, 980, 981, 982, 983, 986, 987], "shutil": [50, 66, 364], "tempfil": [50, 255, 281, 364, 935], "feature_select": [50, 65, 66, 68, 127, 128, 129, 130, 131, 132, 133, 148, 219, 283, 285, 302, 320, 327, 351, 364, 372, 532, 921, 973, 974, 976, 977, 978, 979, 980], "kfold": [50, 110, 123, 230, 240, 320, 367, 389, 423, 518, 519, 545, 553, 598, 602, 604, 606, 612, 614, 616, 624, 747, 750, 751, 753, 755, 757, 761, 766, 768, 769, 770, 771, 772, 773, 774, 776, 780, 783, 830, 962, 974, 975, 976, 978, 979, 981, 983], "roi_siz": 50, "snr": 50, "noise_coef": 50, "gridsearch": [50, 71, 246, 373, 952], "cachedir": [50, 66, 347, 364], "mkdtemp": [50, 364], "mem": [50, 344, 459], "n_x": [50, 536], "n_y": [50, 536, 934, 942], "parcel": [50, 62, 363], "ward__n_clust": 50, "n_job": [50, 66, 67, 105, 106, 111, 112, 118, 124, 132, 146, 151, 152, 153, 200, 202, 217, 234, 236, 237, 239, 250, 253, 281, 282, 283, 286, 325, 338, 351, 370, 374, 389, 396, 399, 401, 403, 408, 409, 412, 415, 418, 423, 482, 486, 487, 488, 490, 493, 494, 496, 497, 499, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 545, 553, 561, 583, 585, 590, 598, 602, 604, 606, 608, 609, 610, 612, 614, 616, 617, 619, 627, 630, 639, 640, 641, 642, 643, 644, 645, 724, 728, 731, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 782, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 808, 811, 844, 845, 898, 900, 921, 932, 933, 935, 962, 963, 967, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988], "coef_agglomeration_": 50, "f_regress": [50, 128, 372, 543, 546, 547, 549, 550, 551, 555, 556, 560, 976, 980, 987], "cach": [50, 148, 236, 253, 254, 324, 325, 333, 351, 393, 397, 401, 419, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 459, 747, 791, 793, 809, 810, 847, 851, 852, 853, 854, 855, 917, 935, 947, 976, 980, 981, 982, 983, 985, 986, 988], "selectpercentil": [50, 65, 219, 302, 372, 543, 546, 547, 549, 550, 554, 557, 974, 979, 989], "percentag": [50, 94, 108, 170, 197, 230, 238, 241, 367, 372, 485, 492, 495, 500, 544, 545, 599, 620, 631, 654, 684, 696, 765, 766, 767, 779, 861, 863, 933, 948, 975, 979, 985, 986], "anova__percentil": [50, 302], "coef_selection_": 50, "rdbu_r": [50, 75, 96, 299], "94": [50, 87, 107, 178, 213, 248, 370, 614, 738, 927, 932, 933, 942, 967, 973], "temporari": [50, 64, 66, 324, 419, 638, 731, 847, 935, 976, 977, 980, 986, 987], "worri": [50, 929, 959], "rmtree": [50, 66, 364], "ignore_error": 50, "plot_feature_agglomeration_vs_univariate_select": 50, "recomput": [51, 216, 218, 255, 281, 420, 425, 928, 944, 978], "intract": [51, 368, 929, 937], "unlik": [51, 151, 152, 199, 201, 226, 273, 297, 338, 340, 344, 349, 351, 365, 367, 368, 371, 401, 486, 601, 602, 605, 606, 607, 633, 634, 735, 768, 789, 790, 829, 840, 852, 928, 931, 932, 939, 947, 973, 979], "inferenti": 51, "capabl": [51, 78, 140, 203, 340, 351, 354, 933, 936, 947, 948, 956, 973, 982], "meta": [51, 64, 97, 121, 148, 179, 244, 320, 332, 336, 340, 342, 349, 351, 359, 361, 362, 372, 373, 416, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 516, 521, 526, 548, 554, 775, 782, 921, 933, 953, 954, 969, 973, 976, 977, 978, 979, 980, 981, 984, 985, 987, 988], "extend": [51, 62, 180, 225, 242, 299, 335, 336, 349, 351, 361, 362, 363, 368, 370, 582, 671, 778, 781, 782, 814, 816, 833, 864, 924, 932, 933, 947, 953, 954, 969, 978, 979, 980, 981, 983, 988], "chirag": 51, "nagpal": 51, "christo": [51, 982, 983, 985, 987], "arida": [51, 982, 983, 985, 987], "baseestim": [51, 253, 338, 350, 351, 385, 583, 584, 878, 973, 980, 983, 985, 987, 988], "clone": [51, 111, 143, 152, 271, 320, 336, 338, 341, 342, 344, 346, 351, 361, 364, 373, 389, 416, 520, 521, 548, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 753, 773, 776, 780, 783, 809, 810, 846, 953, 973, 979, 981, 985, 989], "metaestim": [51, 351, 846, 977, 986, 987], "available_if": [51, 351, 986, 987], "check_is_fit": [51, 340, 347, 351, 983, 986, 987], "5000": [51, 165, 194, 195, 283, 830], "_classifier_ha": 51, "deleg": [51, 344, 386, 862, 977, 979, 985], "unfit": [51, 364, 386, 415, 520, 521, 553, 562, 981, 983], "classifier_": 51, "inductivecluster": 51, "clusterer_": 51, "plot_scatt": 51, "cluster_label": [51, 55], "x_new": [51, 364, 368, 372, 385, 394, 395, 397, 398, 400, 482, 483, 484, 485, 486, 487, 488, 490, 492, 493, 494, 495, 500, 518, 520, 521, 533, 534, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 579, 581, 586, 589, 590, 591, 592, 593, 639, 640, 641, 642, 643, 798, 805, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 841, 842, 944, 958], "y_new": 51, "declar": [51, 200, 320, 338, 339, 340, 344, 351, 395, 398, 410, 422, 423, 429, 641, 645, 980, 984], "membership": [51, 352, 360, 362, 363, 462, 463, 464, 465, 466, 470, 473, 947], "inductive_learn": 51, "probable_clust": 51, "response_method": [51, 101, 114, 119, 162, 171, 188, 238, 256, 261, 264, 278, 295, 296, 316, 582, 583, 584, 649, 651, 653], "plot_inductive_clust": 51, "meant": [52, 133, 333, 340, 347, 425, 444, 628, 795, 898, 899, 922, 936, 938, 942, 974], "unintuit": 52, "possibli": [52, 78, 179, 194, 312, 335, 337, 346, 357, 363, 370, 371, 402, 404, 540, 784, 785, 786, 787, 788, 854, 855, 857, 858, 859, 860, 921, 924, 929, 935, 942, 988], "undesir": [52, 136, 373], "phil": [52, 978], "roth": [52, 978, 981, 988], "mr": [52, 974, 977, 987], "isotrop": [52, 56, 90, 137, 139, 199, 201, 363, 365, 373, 463, 470, 483, 566, 570, 571, 573, 574], "spheric": [52, 77, 114, 201, 223, 225, 226, 266, 334, 714, 745, 746, 928, 931, 935, 952], "anisotrop": [52, 137, 373, 568, 570, 573], "ellipt": [52, 928], "60834549": 52, "63667341": 52, "40887718": 52, "85253229": 52, "x_vari": 52, "y_vari": 52, "unequ": [52, 981], "x_filter": 52, "unevenli": [52, 179, 230], "y_filter": 52, "set_i": 52, "scenario": [52, 64, 135, 156, 238, 320, 345, 367, 370, 488, 494, 496, 497, 926, 932, 942, 983], "appropri": [52, 93, 140, 151, 244, 307, 315, 320, 336, 338, 340, 346, 351, 362, 363, 367, 369, 370, 374, 396, 401, 408, 440, 441, 442, 447, 451, 452, 453, 455, 456, 461, 528, 533, 542, 543, 546, 547, 549, 550, 551, 623, 625, 638, 660, 791, 792, 793, 795, 797, 799, 800, 801, 916, 928, 931, 932, 942, 977, 980, 986, 989], "criteria": [52, 148, 157, 168, 187, 226, 235, 346, 363, 372, 417, 433, 434, 435, 452, 508, 509, 510, 511, 515, 516, 597, 603, 607, 609, 610, 622, 643, 810, 829, 849, 850, 857, 858, 859, 860, 922, 931, 936, 946, 966, 976, 981, 984], "knowledg": [52, 106, 151, 196, 215, 235, 327, 333, 338, 341, 344, 350, 351, 363, 367, 370, 374, 396, 462, 506, 507, 514, 671, 686, 690, 733, 778, 932, 933, 944, 967], "consequ": [52, 93, 197, 235, 236, 273, 296, 320, 368, 370, 512, 513, 517, 606, 607, 922, 928, 932, 948, 982, 984, 989], "likelihood": [52, 70, 72, 73, 74, 93, 135, 136, 137, 139, 140, 141, 142, 144, 148, 167, 197, 225, 228, 235, 241, 273, 340, 351, 361, 365, 368, 370, 373, 389, 420, 421, 422, 423, 424, 425, 426, 427, 428, 466, 483, 487, 492, 500, 501, 502, 561, 562, 596, 609, 663, 691, 745, 746, 747, 772, 775, 794, 805, 825, 837, 851, 852, 854, 855, 928, 931, 934, 942, 947, 976, 977, 982, 988], "inertia": [52, 56, 312, 363, 395, 398, 400, 403, 410, 411, 413, 414, 984], "common_param": [52, 111, 152, 212, 237, 238], "unexpect": [52, 320, 338, 343, 346, 357, 486, 647, 932, 947, 975, 981, 982, 985, 987], "suffic": [52, 53, 340, 967], "detail": [52, 100, 102, 105, 107, 112, 118, 152, 167, 168, 204, 208, 211, 212, 217, 219, 227, 233, 242, 259, 260, 279, 281, 282, 283, 284, 285, 286, 315, 317, 318, 320, 324, 325, 326, 330, 331, 332, 333, 336, 338, 340, 342, 343, 344, 346, 349, 350, 351, 352, 354, 357, 362, 363, 366, 367, 368, 370, 372, 373, 374, 385, 386, 389, 395, 396, 398, 399, 401, 403, 408, 409, 410, 412, 413, 415, 417, 418, 419, 423, 447, 475, 482, 486, 487, 488, 490, 492, 493, 494, 495, 496, 497, 499, 500, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 545, 553, 561, 565, 570, 573, 582, 583, 584, 585, 590, 596, 598, 602, 604, 606, 607, 608, 609, 610, 612, 614, 616, 617, 619, 623, 625, 627, 629, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 652, 664, 724, 728, 729, 730, 731, 746, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 782, 787, 791, 792, 794, 795, 797, 799, 800, 802, 803, 808, 811, 813, 814, 826, 830, 838, 844, 845, 847, 851, 854, 857, 858, 859, 860, 880, 898, 921, 922, 926, 930, 931, 932, 933, 935, 936, 938, 945, 954, 955, 956, 958, 964, 967, 969, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "propos": [52, 71, 72, 253, 333, 338, 340, 349, 351, 363, 365, 370, 375, 376, 401, 426, 486, 558, 559, 627, 628, 629, 806, 807, 928, 931, 935, 946, 950, 980], "constraint": [52, 62, 85, 97, 148, 174, 230, 269, 270, 271, 282, 338, 349, 368, 371, 438, 459, 460, 512, 513, 586, 765, 766, 901, 921, 923, 928, 929, 946, 977, 980, 981, 984, 986, 988], "inflat": [52, 150, 151, 153, 363, 367, 932, 942], "allevi": [52, 158, 363, 934], "fastest": [52, 233, 313, 398, 621, 623, 625, 638, 885, 886, 931], "lost": [52, 75, 333, 339, 349, 929, 932], "restart": [52, 341, 346, 398, 482, 488, 489, 494, 496, 497, 561, 562, 929, 986], "plot_kmeans_assumpt": 52, "judg": [53, 185, 363, 962], "definit": [53, 74, 167, 179, 242, 253, 312, 338, 339, 340, 351, 353, 363, 365, 366, 368, 478, 480, 486, 562, 579, 643, 659, 669, 678, 708, 745, 746, 921, 924, 926, 928, 930, 932, 935, 946, 951, 969, 977, 981, 988], "shorthand": [53, 351, 364, 418, 512, 513, 810, 811, 976], "homo": 53, "compl": 53, "mea": 53, "context": [53, 215, 219, 253, 324, 325, 332, 337, 339, 350, 351, 363, 364, 369, 370, 371, 373, 374, 389, 396, 399, 401, 403, 408, 409, 412, 415, 418, 419, 423, 482, 486, 487, 488, 490, 493, 494, 495, 496, 497, 499, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 545, 553, 561, 577, 578, 581, 583, 585, 590, 598, 602, 604, 606, 608, 609, 610, 612, 614, 616, 617, 619, 627, 630, 639, 640, 641, 642, 643, 644, 645, 724, 728, 731, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 782, 791, 792, 795, 797, 799, 800, 802, 803, 808, 811, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 922, 928, 932, 938, 942, 946, 953, 956, 965, 973, 980, 981, 986], "n_digit": 53, "bench_k_mean": 53, "tabl": [53, 197, 235, 338, 339, 342, 347, 363, 371, 533, 609, 631, 747, 761, 786, 897, 928, 932, 933, 938, 952, 974], "fit_tim": [53, 108, 168, 187, 237, 367, 772, 773], "inertia_": [53, 56, 59, 395, 398, 400, 984], "clustering_metr": 53, "sample_s": [53, 211, 312, 741], "formatter_result": 53, "determinist": [53, 111, 325, 334, 340, 351, 363, 395, 398, 400, 402, 403, 404, 409, 410, 413, 502, 510, 511, 515, 516, 534, 535, 642, 646, 758, 759, 805, 857, 858, 924, 928, 974, 977, 979, 981, 982, 985, 988], "82": [53, 738, 747, 761, 932, 935, 963, 973], "ttime": 53, "tinertia": 53, "thomo": 53, "tcompl": 53, "tv": 53, "tari": 53, "tami": 53, "tsilhouett": 53, "reduced_data": 53, "mesh": [53, 107, 116, 137, 211, 261, 268, 275, 293, 295], "169": 53, "mark": [53, 83, 128, 147, 239, 246, 330, 338, 340, 342, 346, 347, 351, 363, 486, 558, 559, 562, 583, 609, 802, 803, 844, 845, 862, 876, 881, 886, 928, 956, 969, 973, 974, 979, 981, 982], "plot_kmeans_digit": 53, "kmeans_plusplu": [54, 363, 985], "4000": [54, 113, 224], "centers_init": 54, "4eacc5": [54, 59], "ff9c34": [54, 59], "4e9a06": [54, 59], "cluster_data": 54, "plot_kmeans_plusplu": 54, "wrong": [55, 179, 259, 320, 335, 338, 340, 371, 455, 676, 706, 741, 932, 938, 947, 976, 978, 980, 981, 982, 983, 986], "wide": [55, 56, 102, 210, 274, 349, 363, 368, 371, 921, 928, 952, 956, 967, 973, 975], "ambival": 55, "thick": [55, 263, 935], "ow": 55, "silhouette_sampl": [55, 741, 977, 979, 981, 989], "distinct": [55, 235, 290, 313, 333, 340, 343, 351, 367, 370, 371, 540, 748, 757, 765, 823, 824, 844, 845, 921, 928, 935, 938, 967, 981], "center_box": [55, 463], "range_n_clust": 55, "set_size_inch": [55, 123, 216], "lie": [55, 77, 132, 151, 211, 273, 290, 297, 299, 368, 370, 557, 797, 799, 800, 801, 926, 929, 932, 942, 947], "insert": [55, 151, 179, 349, 363, 438, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 864], "blank": [55, 343, 922, 948], "demarc": 55, "perspect": [55, 179, 324, 333, 349, 352, 481, 594, 849, 925], "silhouette_avg": 55, "sample_silhouette_valu": 55, "y_lower": [55, 111], "aggreg": [55, 103, 197, 238, 244, 285, 363, 370, 485, 506, 507, 672, 673, 678, 695, 696, 698, 700, 701, 703, 735, 933, 935, 942], "ith_cluster_silhouette_valu": 55, "size_cluster_i": 55, "y_upper": [55, 111], "fill_betweenx": 55, "2nd": [55, 81, 143, 278, 363, 374, 396, 481, 942, 988], "lw": [55, 71, 72, 74, 89, 94, 95, 173, 180, 182, 185, 189, 196, 202, 224, 230, 245, 250, 258, 273, 290, 306], "fontweight": [55, 174], "bold": [55, 111, 168, 174, 338], "plot_kmeans_silhouette_analysi": 55, "reach": [56, 133, 179, 181, 195, 197, 237, 285, 299, 319, 343, 352, 354, 363, 368, 372, 401, 408, 459, 460, 544, 545, 578, 596, 597, 598, 603, 604, 605, 606, 607, 611, 612, 613, 614, 617, 618, 619, 627, 628, 629, 630, 632, 633, 634, 635, 679, 680, 733, 745, 746, 806, 807, 846, 921, 932, 936, 946, 948, 956, 984, 988], "optimum": [56, 141, 151, 156, 248, 368, 423, 928, 931], "stuck": [56, 643, 929], "check_random_st": [56, 195, 201, 209, 214, 340, 347, 351], "trade": [56, 71, 153, 234, 236, 237, 299, 311, 362, 363, 365, 504, 505, 510, 511, 585, 607, 643, 747, 750, 751, 761, 772, 929, 936, 944, 946, 947, 953], "n_init_rang": 56, "n_samples_per_cent": 56, "make_data": 56, "n_clusters_tru": 56, "init_s": [56, 312, 400], "factori": [56, 235, 371, 692, 902, 932], "empti": [56, 64, 95, 191, 291, 324, 333, 340, 342, 363, 375, 434, 484, 512, 513, 581, 582, 758, 814, 856, 864, 869, 870, 876, 922, 947, 965, 975, 977, 981, 982, 984, 985, 987, 988, 989], "run_id": 56, "km": [56, 285, 312], "fmt": [56, 190], "my_memb": [56, 58, 59], "plot_kmeans_stability_low_dim_dens": 56, "fast": [57, 156, 168, 194, 195, 211, 212, 274, 313, 324, 333, 338, 347, 363, 365, 367, 368, 370, 371, 373, 375, 398, 420, 425, 459, 483, 484, 486, 489, 491, 495, 498, 517, 539, 540, 542, 583, 584, 591, 609, 610, 623, 625, 638, 650, 747, 761, 770, 771, 772, 781, 782, 789, 790, 794, 805, 886, 901, 924, 928, 931, 934, 935, 937, 938, 948, 952, 956, 967, 973, 974, 979, 980, 983, 984], "globular": [57, 363], "cleanli": [57, 973], "plot_linkage_comparison": 57, "dorin": [58, 399], "comaniciu": [58, 363, 399], "meer": [58, 363, 399], "ieee": [58, 72, 74, 335, 363, 365, 372, 376, 399, 426, 485, 514, 615, 636, 637, 675, 719, 928, 932, 938], "transact": [58, 335, 363, 365, 374, 376, 396, 399, 426, 485, 489, 491, 498, 514, 595, 615, 636, 637, 675, 676, 706, 719, 928, 932], "intellig": [58, 335, 363, 370, 399, 506, 507, 589, 647, 675, 779, 806, 807, 933, 944, 953, 956], "2002": [58, 361, 363, 370, 389, 399, 544, 545, 676, 706, 796, 844, 924, 932], "603": [58, 399], "619": [58, 399], "labels_uniqu": 58, "plot_mean_shift": [58, 412], "3000": [59, 99, 202, 841, 842], "k_mean": [59, 347, 351, 966, 981], "t_batch": 59, "pairwis": [59, 150, 151, 210, 244, 281, 285, 286, 311, 324, 330, 340, 351, 363, 368, 373, 409, 412, 413, 419, 438, 459, 460, 486, 512, 513, 571, 589, 590, 591, 592, 593, 594, 639, 641, 643, 645, 647, 650, 728, 731, 738, 740, 741, 777, 793, 795, 797, 801, 815, 847, 932, 935, 944, 947, 969, 973, 974, 978, 979, 980, 981, 982, 983, 984, 987, 988, 989], "k_means_cluster_cent": 59, "mbk_means_cluster_cent": 59, "k_means_label": 59, "mbk_means_label": 59, "ninertia": 59, "bbbbbb": 59, "plot_mini_batch_kmean": 59, "reachabl": [60, 363, 401, 406, 407, 408, 795, 891], "shane": [60, 982, 985, 988], "grigsbi": 60, "refug": 60, "rocktalu": 60, "cluster_optics_dbscan": [60, 363], "n_points_per_clust": 60, "c1": [60, 108, 143, 209, 279], "c2": [60, 108, 143, 209, 279], "c3": [60, 108, 279], "c4": [60, 279, 954, 969], "c5": [60, 954, 969], "c6": 60, "clust": [60, 401, 408], "labels_050": 60, "reachability_": [60, 363, 401, 406, 407, 408], "core_dist": [60, 406], "core_distances_": [60, 401, 406, 408], "ordering_": [60, 363, 401, 406, 407, 408], "labels_200": 60, "ax3": [60, 291], "ax4": 60, "klass": 60, "xk": [60, 501], "rk": 60, "full_lik": 60, "epsilon": [60, 161, 202, 212, 306, 368, 406, 594, 600, 618, 627, 629, 696, 806, 807, 850, 852, 855, 925, 928, 932, 936, 946, 947, 965, 973], "noptic": 60, "ndbscan": 60, "plot_opt": 60, "tri": [61, 94, 199, 262, 325, 340, 343, 349, 352, 361, 370, 400, 402, 404, 582, 583, 584, 621, 643, 649, 651, 653, 761, 900, 937, 955, 958, 975, 981, 985], "intens": [61, 88, 253, 335, 339, 368, 395, 398, 410, 558, 559, 583, 584, 749, 921, 939, 956, 981], "weakli": 61, "outlin": [61, 107, 338, 340, 351, 352, 353, 921, 969], "center1": 61, "28": [61, 195, 270, 335, 344, 363, 367, 401, 408, 942, 963, 973, 976, 979], "center2": 61, "center3": 61, "67": [61, 335, 467, 468, 469, 578, 618, 664, 761, 922, 932, 946, 973], "58": [61, 72, 335, 365, 376, 426, 714, 942, 963], "center4": 61, "radius1": 61, "radius2": 61, "radius3": 61, "radius4": 61, "circle1": 61, "circle2": 61, "circle3": 61, "circle4": 61, "label_im": 61, "cleaner": 61, "plot_segmentation_toi": 61, "swiss": [62, 148, 198, 363, 481, 643, 644, 987], "roll": [62, 148, 198, 341, 363, 481, 643, 644, 880, 956, 983, 988], "sole": [62, 349, 363], "respect": [62, 90, 103, 107, 115, 143, 156, 158, 168, 181, 193, 196, 199, 201, 207, 210, 212, 226, 244, 259, 260, 271, 278, 285, 296, 324, 325, 333, 334, 338, 361, 363, 366, 368, 370, 371, 373, 415, 418, 421, 422, 423, 424, 425, 426, 427, 485, 491, 492, 498, 504, 512, 513, 548, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 587, 594, 622, 641, 645, 663, 678, 732, 735, 745, 746, 785, 795, 806, 807, 861, 863, 921, 925, 926, 928, 929, 932, 935, 936, 937, 938, 942, 947, 952, 956, 976, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988], "oppos": [62, 338, 342, 359, 363, 845, 935, 947, 958, 973], "make_swiss_rol": [62, 203, 987], "thinner": 62, "fig1": 62, "set_posit": [62, 91, 92, 190, 273], "jet": 62, "fig2": 62, "121": [62, 101, 147, 183, 211, 620, 942], "plot_ward_structured_vs_unstructur": 62, "chain": [63, 148, 251, 253, 320, 327, 330, 349, 351, 362, 373, 447, 453, 492, 562, 578, 609, 688, 747, 775, 778, 780, 781, 782, 783, 809, 810, 829, 921, 922, 933, 937, 949, 952, 956, 967, 969], "raster": 64, "caption": 64, "serv": [64, 89, 141, 238, 364, 497, 502, 589, 924, 987], "matt": [64, 976, 977, 978, 983, 984, 988], "terri": [64, 977], "truncatedsvd": [64, 116, 200, 312, 368, 485, 486, 490, 491, 492, 643, 808, 811, 929, 975, 980, 984, 985, 987], "dictvector": [64, 148, 310, 312, 333, 371, 439, 533, 539, 540, 541, 542, 822, 973, 974, 977, 983, 985, 986, 989], "compris": [64, 111, 233, 311, 312, 313, 333, 349, 368, 370, 466, 754, 929], "subject": [64, 115, 227, 238, 333, 338, 340, 342, 349, 351, 352, 361, 362, 365, 367, 368, 446, 609, 610, 636, 812, 849, 850, 900, 902, 923, 928, 947, 951, 967, 982, 983, 986, 988], "stateless": [64, 312, 326, 340, 351, 371, 533, 534, 540, 589, 812, 813, 821, 942, 989], "subject_body_extractor": 64, "startswith": [64, 200, 266], "subject_body_transform": 64, "sentenc": [64, 313, 333, 352, 371], "text_stat": 64, "num_sent": 64, "text_stats_transform": 64, "subjectbodyextractor": 64, "subjectbodi": 64, "union": [64, 151, 364, 447, 688, 704, 808, 980], "body_bow": 64, "pull": [64, 284, 325, 336, 341, 351, 352, 983], "body_stat": 64, "transformer_weight": [64, 415, 418, 808, 978, 985], "dual": [64, 66, 307, 311, 371, 372, 422, 423, 429, 562, 597, 598, 603, 604, 609, 610, 611, 612, 613, 614, 632, 635, 789, 790, 849, 850, 851, 854, 947, 975, 984, 987], "plot_column_transform": 64, "imput": [65, 118, 153, 208, 217, 219, 282, 285, 327, 330, 342, 350, 351, 364, 370, 441, 452, 516, 531, 590, 596, 623, 771, 792, 810, 868, 870, 952, 953, 969, 975, 976], "miss": [65, 118, 153, 208, 217, 235, 253, 282, 320, 324, 327, 330, 333, 335, 337, 338, 340, 342, 343, 351, 362, 363, 364, 365, 423, 441, 447, 449, 452, 512, 513, 516, 517, 578, 579, 580, 581, 590, 596, 623, 641, 645, 677, 719, 771, 792, 810, 818, 819, 823, 825, 826, 829, 830, 834, 837, 838, 840, 928, 929, 932, 948, 952, 953, 956, 969, 975, 977, 981, 982, 983, 984, 985, 986, 987, 988, 989], "chi": [65, 73, 99, 277, 330, 372, 470, 543, 546, 547, 549, 550, 551, 555, 556, 557, 560, 589, 590, 591, 592, 593, 708, 709, 969, 973, 978, 979], "dispatch": [65, 327, 359, 419, 747, 761, 770, 771, 772, 847, 898, 899, 962, 969, 988], "processor": [65, 118, 151, 327, 374, 389, 396, 399, 401, 403, 408, 409, 412, 415, 418, 423, 482, 486, 487, 488, 490, 493, 494, 496, 497, 499, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 545, 553, 561, 583, 585, 590, 598, 602, 604, 606, 608, 609, 610, 612, 614, 616, 617, 619, 627, 630, 639, 640, 641, 642, 643, 644, 645, 724, 728, 731, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 777, 778, 779, 791, 792, 795, 797, 799, 800, 802, 803, 808, 811, 844, 845], "pedro": [65, 974, 976, 977, 981], "moral": [65, 311, 609, 981, 985, 986], "simpleimput": [65, 118, 146, 147, 153, 208, 217, 219, 282, 285, 320, 351, 578, 579, 580, 922, 942, 981, 982, 984, 985, 987, 988, 989], "chi2": [65, 371, 372, 403, 532, 543, 546, 547, 549, 550, 551, 556, 557, 560, 571, 589, 590, 591, 592, 593, 594, 709, 715, 724, 973, 980, 987], "40945": 65, "titan": [65, 153, 219, 281, 285, 286], "surviv": [65, 153, 921, 952], "ag": [65, 151, 153, 179, 197, 216, 217, 219, 273, 284, 285, 286, 333, 335, 956, 958, 965], "fare": [65, 153, 219, 285, 977, 978], "embark": [65, 153, 219, 281, 285, 286], "sex": [65, 151, 153, 219, 286, 335, 940, 965], "femal": [65, 343, 822, 823, 942], "male": [65, 343, 822, 823, 942], "pclass": [65, 153, 219, 281, 285, 286], "numeric_featur": [65, 285], "numeric_transform": [65, 285], "categorical_transform": 65, "selector": [65, 129, 130, 346, 371, 417, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 975, 983, 985, 989], "preprocessor": [65, 118, 151, 179, 208, 217, 279, 282, 284, 285, 286, 364, 371, 539, 540, 542, 952, 967, 973, 976, 981, 983], "make_column_selector": [65, 108, 118, 364, 415, 418, 983], "subset_featur": 65, "Then": [65, 98, 100, 104, 106, 118, 121, 130, 151, 156, 167, 179, 203, 207, 218, 237, 238, 332, 338, 342, 344, 346, 354, 360, 361, 363, 366, 368, 371, 372, 521, 544, 670, 706, 747, 761, 809, 922, 931, 932, 938, 947, 967, 982], "numerical_transform": 65, "yourself": [65, 337, 338, 339, 343, 346, 936], "dtype_exclud": [65, 417], "dtype_includ": [65, 108, 118, 364, 417], "exactli": [65, 150, 158, 172, 179, 227, 243, 274, 338, 340, 360, 363, 367, 368, 371, 376, 404, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 466, 477, 541, 542, 566, 627, 629, 654, 656, 713, 748, 765, 770, 924, 928, 929, 930, 932, 933, 948, 966, 967, 973, 979, 980, 986], "hyperparamet": [65, 98, 135, 136, 142, 143, 146, 148, 152, 158, 168, 193, 197, 206, 228, 233, 238, 240, 255, 271, 311, 340, 351, 367, 368, 370, 373, 453, 486, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 594, 604, 610, 616, 624, 627, 678, 735, 747, 761, 921, 926, 927, 928, 931, 932, 934, 936, 938, 946, 953, 967, 975, 979, 980, 981, 982, 983, 984, 985], "cartesian": [65, 360, 584, 935, 988], "preprocessor__num__imputer__strategi": 65, "preprocessor__cat__selector__percentil": 65, "classifier__c": 65, "search_cv": 65, "trigger": [65, 66, 342, 364, 806, 807, 809, 810, 869, 870, 886, 928, 967, 981, 987, 988], "best_params_": [65, 67, 111, 135, 212, 226, 233, 239, 283, 299, 350, 747, 750, 751, 761, 921, 963, 967], "best_score_": [65, 67, 212, 236, 239, 240, 299, 624, 626, 747, 750, 751, 761, 962, 963, 967, 984], "cv_results_": [65, 66, 67, 75, 123, 132, 226, 233, 234, 235, 236, 239, 243, 246, 247, 255, 299, 423, 545, 747, 750, 751, 761, 967, 979, 983, 985, 986], "sort_valu": [65, 153, 219, 226, 235, 246, 279], "mean_test_scor": [65, 66, 67, 75, 123, 132, 226, 234, 235, 236, 243, 246, 247, 255, 299, 423, 545, 747, 761, 921, 979, 986], "ascend": [65, 153, 279, 370, 401, 407, 578, 586, 861, 862, 863, 946, 983, 989], "std_test_scor": [65, 67, 123, 132, 234, 235, 236, 243, 255, 423, 545, 747, 761, 979, 986], "param_preprocessor__num__imputer__strategi": 65, "param_preprocessor__cat__selector__percentil": 65, "param_classifier__c": 65, "plot_column_transformer_mixed_typ": 65, "instanti": [66, 138, 284, 341, 370, 401, 518, 519, 553, 581, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 876, 938, 964, 973, 981, 985, 989], "argument": [66, 180, 207, 210, 325, 332, 333, 338, 339, 341, 343, 344, 346, 347, 349, 351, 363, 364, 367, 368, 370, 372, 374, 375, 377, 390, 392, 395, 396, 397, 398, 399, 400, 401, 403, 405, 408, 410, 412, 414, 444, 454, 459, 484, 486, 487, 489, 491, 502, 510, 511, 518, 519, 520, 521, 528, 532, 533, 539, 540, 542, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 582, 590, 594, 597, 598, 601, 602, 603, 604, 605, 606, 607, 611, 612, 613, 614, 617, 619, 627, 632, 635, 639, 643, 647, 649, 650, 651, 652, 653, 665, 670, 685, 692, 713, 729, 730, 753, 777, 778, 781, 791, 792, 793, 795, 797, 798, 799, 800, 801, 802, 803, 806, 809, 813, 863, 867, 876, 881, 883, 899, 900, 901, 902, 916, 921, 924, 928, 929, 930, 932, 935, 939, 940, 947, 948, 958, 962, 973, 976, 977, 979, 980, 981, 982, 983, 985, 987, 988, 989], "memoiz": [66, 333, 351], "costli": [66, 71, 105, 146, 236, 308, 325, 339, 344, 363, 395, 578, 755, 757, 841, 842, 886, 932, 935, 944, 953], "mcgibbon": [66, 975, 976, 979], "selectkbest": [66, 68, 129, 130, 285, 320, 338, 364, 372, 532, 543, 546, 547, 549, 551, 557, 921, 974, 979, 989], "mutual_info_classif": [66, 372, 543, 546, 547, 550, 551, 979, 985, 988], "pipe": [66, 67, 108, 217, 234, 279, 283, 284, 350, 364, 371, 541, 809, 834, 835, 837, 838, 839, 840, 921, 942, 963], "reduce_dim": [66, 217, 234, 364], "popul": [66, 71, 73, 151, 179, 238, 273, 333, 347, 351, 365, 392, 663, 669, 791, 792, 793, 795, 797, 799, 800, 801, 901, 932, 938, 942, 948], "n_features_opt": 66, "c_option": 66, "iterated_pow": [66, 483, 486, 492, 979], "reduce_dim__n_compon": [66, 234, 364], "classify__c": 66, "reduce_dim__k": 66, "reducer_label": 66, "kbest": [66, 543], "mean_scor": [66, 244, 247, 312, 986], "alphabet": [66, 351, 691], "eas": [66, 226, 278, 338, 341, 344, 928, 946, 952, 953, 956, 984, 985, 987], "sometim": [66, 118, 150, 235, 270, 312, 320, 325, 326, 338, 340, 342, 344, 350, 351, 354, 363, 365, 368, 370, 371, 400, 485, 486, 489, 491, 492, 814, 815, 816, 864, 927, 928, 929, 932, 937, 942, 943, 947, 958, 966, 970, 974, 979, 980, 981, 982, 983, 984, 985, 989], "worthwhil": [66, 351], "slower": [66, 88, 108, 146, 212, 244, 313, 370, 371, 372, 402, 404, 489, 491, 498, 506, 507, 509, 514, 516, 539, 540, 542, 582, 583, 584, 594, 610, 623, 625, 638, 643, 655, 777, 781, 782, 925, 929, 930, 931, 933, 935, 948, 967, 977, 984], "constructor": [66, 209, 325, 340, 351, 362, 364, 371, 415, 418, 500, 501, 506, 518, 519, 520, 521, 532, 533, 539, 540, 548, 619, 627, 628, 791, 792, 793, 795, 796, 797, 799, 800, 801, 808, 809, 810, 811, 900, 921, 933, 942, 947, 953, 958, 973, 974, 976, 977, 978, 980, 983, 984, 985, 986, 987, 988], "folder": [66, 333, 336, 338, 342, 346, 354, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 935, 967], "cached_pip": [66, 364], "delet": [66, 289, 291, 342, 343, 420, 425, 437], "exit": [66, 253, 342, 346, 419], "benefici": [66, 68, 71, 85, 116, 273, 274, 336, 929], "plot_compare_reduct": 66, "truncat": [67, 116, 200, 347, 485, 486, 490, 491, 492, 495, 627, 629, 676, 706, 745, 798, 862, 886, 921, 931, 932, 946, 963, 967, 968, 969, 979, 981], "x_digit": [67, 125, 269, 364, 962, 963, 965], "y_digit": [67, 125, 269, 364, 962, 963, 965], "__": [67, 236, 351, 364, 377, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 745, 746, 747, 750, 751, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 921, 963, 981, 982], "pca__n_compon": [67, 963], "logistic__c": [67, 963], "spectrum": [67, 475, 495, 646, 886, 956, 963, 981], "ax0": [67, 69, 179, 209, 312, 963], "n_components_": [67, 93, 351, 393, 397, 485, 489, 490, 491, 492, 493, 494, 841, 842, 963, 982, 984], "explained_variance_ratio_": [67, 94, 312, 368, 485, 492, 495, 500, 963, 976, 979], "named_step": [67, 78, 364, 544, 545, 548, 809, 810, 849, 850, 928, 963, 980, 982], "components_col": 67, "param_pca__n_compon": 67, "best_clf": 67, "nlargest": 67, "yerr": [67, 72, 74, 105, 108, 132, 255, 279, 291], "val": [67, 191, 235, 888], "plot_digits_pip": 67, "world": [68, 151, 203, 215, 324, 327, 331, 335, 363, 368, 371, 922, 932, 934, 951, 953, 956, 961, 969, 973], "amuel": [68, 103, 170, 211, 290, 307], "ai": [68, 103, 170, 211, 290, 307, 367], "bonn": [68, 103, 170, 211, 290, 307], "mayb": [68, 270, 351, 371, 947, 953], "combined_featur": 68, "univ_select": 68, "x_featur": [68, 591, 592, 593, 924], "features__pca__n_compon": 68, "features__univ_select__k": 68, "svm__c": 68, "grid_search": [68, 217, 226, 233, 243, 364, 975, 976, 977, 978, 979, 980], "plot_feature_union": 68, "overview": [69, 339, 341, 350, 351, 684, 693, 934, 946, 968, 969], "transformedtargetregressor": [69, 151, 179, 349, 364, 544, 545, 548, 981, 983, 986], "am": [69, 73, 118, 152, 343, 365, 425, 444, 980], "hous": [69, 118, 146, 147, 273, 283, 331, 441, 969], "translat": [69, 340, 373, 478, 565, 818, 819, 835, 929, 932, 950, 956], "lowest": [69, 78, 152, 226, 332, 363, 367, 586, 588, 750, 751, 754, 856, 857, 929, 932, 948, 988], "logarithm": [69, 118, 151, 210, 236, 299, 351, 372, 411, 541, 609, 610, 627, 655, 676, 691, 701, 705, 706, 707, 753, 789, 790, 884, 948, 962, 980], "log1p": [69, 209, 813, 932, 942], "expm1": 69, "y_tran": 69, "At": [69, 184, 247, 288, 291, 324, 325, 342, 352, 354, 359, 366, 370, 389, 392, 416, 539, 540, 542, 553, 777, 779, 816, 896, 921, 928, 931, 933, 937, 946, 956], "meda": [69, 151, 932], "median_absolute_error": [69, 151, 932, 977, 983, 985], "r2_score": [69, 150, 163, 174, 175, 370, 384, 416, 433, 434, 435, 505, 507, 509, 511, 513, 516, 519, 521, 562, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 623, 624, 629, 630, 674, 678, 782, 783, 792, 800, 807, 850, 852, 855, 858, 860, 921, 932, 974, 976, 982, 986, 987], "compute_scor": [69, 93, 158, 159, 595, 596, 982], "r2": [69, 100, 118, 150, 152, 174, 212, 340, 364, 370, 505, 521, 624, 772, 807, 932, 940, 982], "ridge_cv": 69, "y_pred_ridg": 69, "ridge_cv_with_trans_target": 69, "inverse_func": [69, 151, 364, 416, 813, 942, 981], "y_pred_ridge_with_trans_target": 69, "sell": 69, "quantile_transform": [69, 826, 837, 942, 980, 981, 982], "house_pric": [69, 118], "select_dtyp": [69, 108, 286, 417], "nan": [69, 108, 146, 147, 217, 230, 238, 281, 324, 330, 340, 347, 351, 370, 419, 447, 506, 507, 508, 512, 513, 515, 544, 545, 548, 554, 557, 560, 578, 579, 580, 581, 586, 663, 664, 665, 672, 673, 674, 678, 679, 680, 719, 728, 733, 734, 735, 737, 747, 750, 751, 753, 761, 771, 772, 773, 776, 818, 819, 823, 825, 826, 829, 830, 834, 837, 838, 840, 867, 868, 869, 870, 907, 921, 932, 942, 969, 976, 980, 981, 982, 983, 984, 985, 987, 988, 989], "inf": [69, 138, 263, 347, 363, 373, 401, 408, 412, 422, 423, 429, 504, 505, 510, 511, 544, 545, 548, 557, 558, 559, 570, 578, 586, 588, 599, 600, 601, 603, 620, 622, 623, 627, 631, 638, 678, 680, 696, 728, 735, 805, 814, 821, 867, 869, 870, 884, 932, 942, 980, 982, 983, 984, 985, 987, 988], "lotfrontag": 69, "garageyrblt": 69, "masvnrarea": [69, 118], "to_fram": 69, "n_quantil": [69, 152, 277, 826, 838, 982], "900": 69, "output_distribut": [69, 273, 277, 364, 825, 826, 837, 838, 942], "squeez": [69, 141, 142, 253, 273, 966], "quantiletransform": [69, 152, 277, 364, 416, 825, 838, 922, 942, 980, 981, 982, 983, 984, 989], "weaker": 69, "residu": [69, 175, 181, 231, 384, 416, 433, 434, 435, 503, 505, 507, 509, 511, 513, 516, 519, 521, 562, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 622, 623, 624, 625, 629, 630, 636, 637, 652, 694, 735, 782, 783, 792, 800, 807, 850, 852, 855, 858, 860, 928, 932, 965, 985, 986, 988], "smile": [69, 333, 987], "plot_transformed_target": [69, 416], "mahalanobi": [70, 148, 363, 365, 401, 408, 420, 421, 422, 423, 424, 425, 426, 427, 650, 728, 729, 730, 796, 926, 938, 981, 984, 985], "ledoitwolf": [70, 72, 93, 148, 365, 420, 421, 425, 426, 427, 428, 747, 977], "empiricalcovari": [71, 73, 74, 365, 420, 424, 425, 426, 427, 938], "unbias": [71, 361, 365, 368, 389, 501, 607, 623, 625, 638, 928, 962], "shrunk": [71, 93, 273, 376, 424, 426, 427, 430, 431, 432, 500, 926, 946, 968, 969], "base_x_train": 71, "base_x_test": 71, "coloring_matrix": [71, 72], "shrunkcovari": [71, 93, 365, 420, 421, 424, 425, 426], "empirical_covari": [71, 365], "log_likelihood": [71, 561, 562, 745, 746], "span": [71, 111, 211, 232, 333, 371, 500, 587, 747, 750, 932, 966], "negative_loglik": 71, "real_cov": [71, 72, 421, 424, 425, 426, 427], "emp_cov": [71, 73, 75, 429, 432], "loglik_r": 71, "inv": [71, 75, 269], "formula": [71, 72, 360, 363, 365, 376, 424, 426, 467, 468, 469, 541, 594, 597, 598, 601, 602, 603, 604, 605, 606, 607, 611, 612, 613, 614, 615, 627, 629, 655, 679, 705, 714, 921, 926, 928, 932, 937, 938, 942, 946, 978, 980, 982], "asymptot": [71, 72, 168, 324, 365, 425, 487, 928, 931, 983], "criterion": [71, 72, 154, 167, 187, 226, 247, 282, 340, 347, 351, 363, 368, 393, 397, 400, 403, 410, 413, 483, 488, 490, 497, 504, 505, 508, 509, 510, 511, 515, 516, 517, 557, 578, 596, 599, 607, 617, 618, 619, 620, 622, 623, 625, 627, 628, 629, 631, 642, 646, 661, 746, 846, 851, 852, 853, 854, 855, 857, 858, 859, 860, 928, 931, 932, 940, 945, 948, 954, 966, 969, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987], "chen": [71, 72, 365, 370, 376, 426, 676, 706, 924, 932, 976, 979, 980, 981, 983, 986, 987, 988], "Its": [71, 98, 233, 237, 334, 340, 351, 368, 373, 489, 927, 928, 937, 940, 946, 952, 956, 976], "tuned_paramet": [71, 123, 233], "loglik_lw": 71, "loglik_oa": 71, "unseen": [71, 109, 130, 168, 187, 248, 259, 326, 330, 340, 350, 351, 363, 367, 795, 826, 838, 923, 932, 938, 940, 942, 948, 958, 976, 981, 985], "loglog": [71, 210], "lik_max": 71, "amax": [71, 109], "lik_min": 71, "amin": 71, "vline": [71, 87, 166, 167, 168, 180, 235, 248, 274], "shrinkage_": [71, 72, 424, 426], "magenta": [71, 113], "purpl": [71, 83, 203], "cyan": [71, 102, 151, 256, 264], "realli": [71, 153, 168, 342, 343, 344, 932, 938, 956, 987], "interestingli": [71, 133, 942], "outperform": [71, 78, 118, 278, 349, 367, 370, 403, 413, 934, 942], "plot_covariance_estim": 71, "whose": [72, 73, 74, 133, 140, 179, 297, 333, 346, 347, 351, 361, 363, 365, 370, 372, 373, 376, 389, 390, 391, 399, 412, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 466, 485, 489, 491, 492, 495, 498, 500, 523, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 591, 622, 646, 669, 747, 754, 761, 774, 795, 814, 841, 842, 885, 911, 912, 926, 933, 937, 938, 939, 947, 976, 981, 982, 984, 987], "inspir": [72, 115, 152, 197, 338, 349, 370, 512, 513, 874, 922, 952, 982], "mmse": [72, 365, 376, 426], "tran": 72, "octob": [72, 333, 973, 980, 986, 987], "toeplitz": 72, "choleski": [72, 179, 197, 347, 429, 478, 562, 599, 601, 602, 605, 606, 607, 609, 610, 620, 623, 625, 631, 633, 634, 638, 745, 746, 928, 976, 980, 982, 985, 988], "simul": [72, 87, 151, 173, 213, 235, 956], "n_samples_rang": [72, 210], "31": [72, 258, 284, 360, 371, 451, 512, 513, 548, 600, 622, 630, 897, 933, 973], "lw_mse": 72, "oa_ms": 72, "lw_shrinkag": 72, "oa_shrinkag": 72, "error_norm": [72, 74, 420, 421, 422, 423, 424, 425, 426, 427], "darkorang": [72, 89, 94, 95, 180, 190, 202, 222, 223, 224, 227, 242, 244, 250, 256, 258, 264, 265, 290, 317], "plot_lw_vs_oa": 72, "x_i": [73, 103, 128, 151, 180, 284, 307, 363, 368, 369, 370, 373, 565, 566, 570, 573, 574, 576, 784, 785, 788, 923, 924, 928, 934, 935, 936, 942, 946, 947, 948], "d_": [73, 363, 368, 599, 620, 631, 728, 929, 934], "mle": [73, 93, 492, 981, 984], "resist": [73, 74, 338], "erron": [73, 74, 368, 928, 974, 981, 985], "breakdown": [73, 74, 196, 630, 928], "n_": [73, 74, 235, 284, 363, 368, 370, 597, 603, 636, 647, 924, 928, 932, 934, 935, 939, 942, 944, 947, 948], "smallest": [73, 74, 179, 253, 315, 333, 363, 365, 372, 478, 492, 581, 605, 606, 607, 633, 634, 641, 645, 646, 747, 750, 751, 761, 766, 948, 986], "pure": [73, 74, 78, 179, 351, 363, 424, 430, 447, 508, 509, 510, 511, 515, 516, 517, 656, 666, 736, 743, 857, 858, 859, 860, 942], "rousseuw": [73, 74], "rousseeuw": [73, 74, 363, 365, 420, 425, 740, 741, 938], "ass": [73, 74, 365, 425], "79": [73, 74, 88, 335, 343, 365, 425, 475, 548, 787, 973, 975], "871": [73, 74, 365, 425], "1984": [73, 74, 365, 425, 857, 858, 948], "wilson": [73, 335, 973, 976], "hilferti": 73, "1931": 73, "proceed": [73, 333, 335, 363, 374, 391, 396, 462, 647, 659, 676, 706, 796, 846, 932, 944, 945, 946], "academi": [73, 796], "684": 73, "688": 73, "125": [73, 485, 921, 932, 942], "n_outlier": [73, 74, 114, 182, 206, 260], "gen_cov": 73, "ey": [73, 74, 223, 227, 299, 333, 485, 492, 501], "outliers_cov": 73, "mincovdet": [73, 74, 365, 420, 421, 424, 426, 427, 938, 973, 980], "robust_cov": 73, "nmcd": 73, "nmle": 73, "inlier": [73, 114, 182, 206, 215, 273, 351, 365, 420, 514, 622, 628, 795, 826, 838, 852, 853, 855, 928, 938, 980, 981, 986], "inlier_plot": 73, "outlier_plot": 73, "get_xlim": [73, 174, 184, 273], "zz": 73, "mahal_emp_cov": 73, "emp_cov_contour": 73, "pubu_r": 73, "mahal_robust_cov": 73, "robust_contour": 73, "ylorbr_r": 73, "dist": [73, 200, 210, 342, 420, 421, 422, 423, 424, 425, 426, 427, 650, 713, 719, 789, 790], "borderaxespad": 73, "cubic": [73, 373], "suggest": [73, 88, 102, 105, 151, 154, 235, 299, 324, 337, 338, 345, 351, 367, 368, 370, 420, 425, 516, 596, 774, 926, 928, 929, 937, 947, 967, 977, 984, 987], "emp_mah": 73, "33": [73, 179, 333, 335, 336, 342, 343, 344, 354, 355, 356, 371, 483, 599, 663, 664, 679, 680, 688, 693, 733, 734, 737, 775, 777, 860, 928, 932, 942, 963, 973, 981], "markeredgewidth": [73, 239], "rm": [73, 138, 342, 346, 365], "mahal": 73, "robust_mah": 73, "location_": [73, 74, 420, 421, 422, 423, 424, 425, 426, 427], "plot_mahalanobis_dist": 73, "aim": [74, 147, 261, 290, 326, 333, 336, 338, 351, 357, 363, 365, 371, 399, 650, 928, 932, 935, 942, 947, 952, 958, 966, 987], "compens": [74, 150, 152, 156, 179, 197, 236, 365, 368], "soon": [74, 351, 965], "5n_": 74, "trust": [74, 342, 352, 357, 361, 962, 987], "johanna": 74, "hardin": 74, "rock": 74, "decemb": [74, 140, 333, 615, 636, 637, 973, 981, 983, 985, 988], "928": [74, 389], "946": 74, "zoubir": 74, "koivunen": 74, "chakhchoukh": 74, "muma": 74, "signal": [74, 85, 86, 87, 95, 111, 135, 140, 141, 148, 157, 178, 180, 227, 284, 362, 363, 365, 371, 372, 373, 376, 426, 454, 472, 477, 482, 485, 488, 492, 576, 597, 603, 604, 614, 615, 635, 636, 637, 735, 823, 928, 932, 949, 956, 961, 968, 969], "tutori": [74, 123, 124, 125, 126, 168, 181, 197, 235, 327, 338, 339, 344, 346, 350, 357, 363, 403, 413, 642, 947, 965, 976], "treatment": [74, 150, 332, 368, 420, 425], "concept": [74, 109, 244, 327, 338, 349, 362, 363, 369, 371, 924, 932, 935, 948, 956], "magazin": [74, 372], "29": [74, 136, 196, 335, 336, 354, 355, 356, 370, 510, 511, 641, 645, 731, 745, 801, 928, 929, 946], "61": [74, 332, 335, 344, 364, 492, 511, 664], "range_n_outli": 74, "err_loc_mcd": 74, "err_cov_mcd": 74, "err_loc_emp_ful": 74, "err_cov_emp_ful": 74, "err_loc_emp_pur": 74, "err_cov_emp_pur": 74, "outliers_index": 74, "outliers_offset": 74, "inliers_mask": 74, "pure_x": 74, "pure_loc": 74, "pure_emp_cov": 74, "font_prop": 74, "hat": [74, 95, 231, 235, 258, 284, 336, 361, 365, 369, 370, 923, 928, 929, 932, 934, 936], "_2": [74, 140, 368, 371, 482, 488, 496, 497, 597, 603, 928, 936, 946, 947], "x_size": 74, "plot_robust_vs_empirical_covari": 74, "graphicallasso": [75, 365, 420, 421, 423, 424, 425, 426, 427, 429, 981], "largest": [75, 87, 181, 335, 363, 365, 368, 395, 478, 492, 508, 509, 510, 511, 515, 516, 539, 660, 745, 746, 766, 787, 857, 858, 859, 860, 886, 929, 932, 942, 947, 948], "invert": [75, 90, 130, 200, 312, 313, 349, 365, 371, 581, 640, 644, 942, 982], "fairli": [75, 110, 201, 250, 269, 346, 363, 510, 511, 650, 933, 965], "tweak": [75, 367, 898, 931, 967, 984], "readabl": [75, 236, 284, 343, 344, 346, 357, 485, 982, 985, 986, 987, 988], "neighborhood": [75, 148, 199, 254, 335, 351, 363, 368, 374, 396, 401, 408, 453, 455, 466, 492, 500, 579, 647, 775, 791, 792, 795, 797, 798, 799, 800, 801, 803, 809, 810, 829, 929, 938, 954, 969, 982], "make_sparse_spd_matrix": [75, 480], "prng": 75, "prec": [75, 207, 478, 932], "smallest_coef": [75, 478], "largest_coef": [75, 478], "multivariate_norm": [75, 78, 221, 420, 421, 422, 423, 424, 425, 426, 427], "ledoit_wolf": [75, 365, 986], "prec_": 75, "lw_cov_": 75, "lw_prec_": 75, "this_cov": 75, "this_prec": 75, "ma": [75, 299, 928, 979, 984], "masked_equ": 75, "set_facecolor": [75, 221], "set_axis_bgcolor": 75, "alpha_": [75, 123, 151, 159, 167, 168, 423, 562, 595, 596, 598, 602, 604, 606, 607, 612, 614, 624, 626, 928, 948, 962, 973, 980], "plot_sparse_cov": 75, "cross_decomposit": [76, 77, 78, 148, 213, 327, 977, 978, 980, 981, 982], "plscanon": [77, 433, 435, 436, 954, 969, 977, 981, 983, 985, 987], "plsregress": [77, 78, 954, 969, 980, 983, 985, 987], "share": [77, 116, 151, 226, 311, 319, 320, 324, 325, 340, 346, 363, 368, 371, 500, 619, 655, 659, 745, 746, 750, 751, 926, 939, 973, 975, 981, 983, 985, 988], "appar": [77, 934, 956], "scatterplot": [77, 158, 235, 256], "maxim": [77, 78, 85, 96, 111, 158, 226, 227, 236, 240, 244, 245, 263, 278, 283, 299, 315, 319, 335, 351, 360, 363, 366, 368, 372, 373, 500, 561, 562, 595, 596, 599, 620, 630, 631, 671, 747, 750, 751, 761, 818, 824, 834, 926, 928, 932, 935, 937, 947, 962, 965, 976, 978, 983, 986, 988], "weak": [77, 98, 109, 112, 197, 241, 367, 508, 509, 510, 515, 516, 517, 581, 935, 956], "var": [77, 78, 91, 102, 159, 235, 335, 339, 372, 592, 596, 851, 852, 853, 854, 855, 932, 981], "corr": [77, 154, 235], "corrcoef": [77, 96], "plsca": [77, 434], "x_train_r": 77, "y_train_r": 77, "x_test_r": 77, "y_test_r": 77, "221": [77, 116, 976], "224": [77, 116, 363, 675], "222": [77, 116, 947], "223": [77, 116, 335], "yj": [77, 277], "noiz": 77, "xb": [77, 828], "exce": [77, 252, 282, 373, 394, 466, 553, 600, 609, 982, 985, 987], "plot_compare_cross_decomposit": 77, "pcr": [78, 366], "pl": [78, 183, 335, 366, 433, 434, 435, 436, 978], "greedili": [78, 133, 367, 372, 411], "despit": [78, 177, 179, 197, 212, 262, 351, 365, 578, 579, 581, 928, 935, 956, 981, 982], "suffer": [78, 106, 153, 253, 273, 312, 324, 363, 370, 373, 495, 713, 927, 928, 932, 935, 966, 982], "mention": [78, 197, 282, 320, 324, 338, 342, 343, 349, 351, 647, 841, 842, 921, 926, 928, 953, 956, 967, 980, 981, 982], "dive": [78, 338, 344], "explained_variance_": [78, 485, 492, 495, 966, 980], "onto": [78, 200, 201, 211, 273, 349, 368, 371, 375, 399, 412, 484, 490, 494, 578, 579, 581, 639, 926, 930, 935], "recommend": [78, 106, 146, 196, 207, 231, 244, 277, 283, 324, 325, 327, 332, 336, 338, 340, 344, 346, 349, 354, 366, 367, 368, 370, 372, 390, 398, 400, 402, 411, 447, 459, 486, 489, 495, 500, 512, 513, 520, 533, 534, 540, 557, 562, 582, 583, 589, 621, 627, 643, 648, 649, 651, 653, 753, 759, 761, 805, 812, 814, 821, 828, 829, 834, 835, 837, 838, 839, 840, 842, 851, 854, 886, 900, 921, 929, 932, 934, 936, 939, 942, 944, 946, 947, 948, 951, 956, 969, 975, 976, 982, 983, 984, 985, 987], "linearregress": [78, 121, 150, 158, 169, 174, 175, 176, 177, 182, 185, 196, 209, 214, 231, 249, 274, 320, 338, 349, 350, 364, 370, 416, 521, 583, 586, 597, 600, 603, 605, 622, 623, 638, 928, 932, 942, 965, 977, 978, 982, 985, 986, 987], "retriev": [78, 151, 183, 242, 312, 319, 342, 351, 364, 368, 371, 372, 419, 447, 541, 544, 545, 577, 604, 614, 635, 676, 680, 682, 683, 706, 731, 784, 788, 821, 847, 898, 928, 930, 932, 934, 952, 953, 966, 978, 983, 985, 987], "remark": [78, 133, 326, 338, 942], "predit": 78, "pca_2": 78, "plot_pcr_vs_pl": 78, "multilabel": [79, 148, 205, 242, 252, 333, 340, 341, 351, 358, 433, 438, 448, 459, 460, 466, 474, 492, 508, 515, 518, 625, 626, 654, 658, 664, 676, 679, 680, 684, 685, 688, 689, 704, 706, 733, 734, 737, 738, 742, 744, 778, 782, 806, 813, 816, 820, 822, 833, 854, 857, 859, 875, 894, 895, 896, 943, 954, 955, 967, 969, 975, 976, 977, 978, 980, 981, 982, 983, 986, 987, 988], "1797": [80, 288, 335, 397, 453, 483, 484, 485, 486, 550, 551, 639, 640, 641, 642, 935, 964], "plot_digits_last_imag": 80, "iris": [81, 241, 242, 964], "150x4": 81, "unus": [81, 91, 92, 152, 176, 199, 201, 414, 530, 713, 721, 921, 929, 973, 981, 983, 984, 986, 988], "plai": [81, 86, 112, 137, 162, 188, 229, 256, 264, 295, 296, 324, 349, 967], "set1": [81, 235, 262, 263], "getter": [81, 420, 421, 422, 423, 424, 425, 426, 427, 544, 545, 548], "110": [81, 158, 176, 186, 209, 389, 926, 927], "3rd": [81, 143, 784, 827, 934, 942], "plot_iris_dataset": 81, "easi": [82, 152, 187, 197, 224, 233, 235, 299, 311, 320, 333, 344, 346, 349, 350, 363, 370, 451, 455, 461, 816, 921, 927, 931, 939, 942, 952, 953, 956, 967, 983, 988], "make_gaussian_quantil": [82, 99, 101, 334, 421, 425, 426, 427, 471], "321": 82, "322": [82, 422, 423], "323": 82, "y2": [82, 101, 667, 714, 933], "324": [82, 333], "multi": [82, 97, 98, 148, 152, 157, 195, 198, 201, 205, 206, 213, 216, 228, 232, 244, 252, 267, 281, 286, 311, 314, 325, 333, 335, 340, 341, 347, 351, 354, 363, 370, 371, 373, 380, 389, 403, 413, 420, 425, 446, 447, 455, 456, 461, 465, 466, 470, 471, 473, 492, 500, 501, 502, 504, 506, 508, 509, 510, 512, 515, 516, 518, 520, 561, 584, 594, 597, 598, 603, 604, 608, 609, 611, 612, 613, 614, 617, 619, 623, 624, 625, 626, 627, 632, 635, 641, 654, 664, 671, 679, 684, 690, 692, 733, 747, 761, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 796, 797, 799, 805, 806, 807, 810, 816, 829, 833, 844, 845, 849, 851, 854, 857, 858, 859, 861, 862, 863, 869, 872, 875, 921, 933, 935, 939, 942, 946, 952, 953, 954, 958, 964, 968, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 987, 989], "325": [82, 753, 773], "326": 82, "plot_random_dataset": 82, "make_multilabel_classif": [83, 213, 334, 466, 487, 738, 780, 781, 932, 975, 976, 978, 984], "star": [83, 121, 338], "degener": [83, 375, 392, 405, 484, 671, 928, 932, 982, 986, 987], "vocabulari": [83, 194, 311, 312, 349, 371, 539, 540, 541, 542, 934, 958, 967, 973, 975, 978, 981, 984, 986], "make_ml_clf": 83, "ff3333": 83, "0198e1": 83, "bf5fff": 83, "fcd116": 83, "ff7216": 83, "4dbd33": 83, "87421f": 83, "plot_2d": [83, 199], "p_c": [83, 474], "p_w_c": [83, 474], "allow_unlabel": [83, 213, 474], "return_distribut": [83, 474], "w0": 83, "w1": [83, 370, 608], "sep": [83, 244], "p_w": 83, "plot_random_multilabel_dataset": 83, "blind": [84, 148, 368, 484, 492], "fastica": [84, 148, 368, 483, 486, 492, 966, 973, 975, 981, 987, 988], "increment": [84, 148, 238, 342, 344, 394, 398, 414, 455, 484, 485, 486, 487, 490, 492, 495, 553, 597, 609, 617, 753, 773, 781, 782, 784, 785, 786, 787, 788, 818, 819, 829, 849, 850, 907, 928, 934, 976, 977], "fa": [84, 96, 148, 344, 368, 424, 427, 483, 492, 747, 771], "precomput": [84, 148, 157, 202, 253, 255, 340, 347, 349, 351, 363, 371, 374, 384, 392, 393, 396, 397, 401, 403, 408, 416, 433, 434, 435, 475, 482, 486, 488, 491, 493, 499, 505, 507, 509, 511, 513, 516, 519, 521, 561, 562, 571, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 623, 624, 629, 630, 632, 633, 635, 636, 639, 641, 642, 643, 647, 724, 728, 731, 740, 741, 782, 783, 791, 792, 793, 795, 796, 797, 799, 800, 801, 802, 803, 807, 850, 851, 852, 853, 854, 855, 858, 860, 908, 909, 910, 924, 930, 935, 947, 953, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 986, 987, 988, 989], "olivetti": [85, 106, 331, 368, 446, 969, 973, 981], "chapter": [85, 320, 340, 363, 368, 370, 373, 481, 483, 485, 565, 570, 573, 594, 922, 925, 928, 947, 948], "decompos": [85, 89, 102, 275, 362, 485, 489, 660, 770, 886, 927, 928, 932, 949, 968, 969], "basicconfig": 85, "asctim": 85, "levelnam": 85, "faces_cent": 85, "image_shap": [85, 214], "constrained_layout": [85, 152, 199, 279, 286], "set_constrained_layout_pad": 85, "w_pad": [85, 107, 316], "h_pad": [85, 107, 316], "set_edgecolor": 85, "vec": [85, 371, 489, 491, 498], "im": [85, 96, 246, 257, 955], "pad": [85, 107, 146, 152, 199, 215, 311, 316, 371, 539, 540, 542], "initialis": [85, 489, 491, 498, 973, 981, 982], "mathbb": [85, 102, 138, 366, 932, 939, 947], "4096": [85, 333, 368, 446], "human": [85, 152, 357, 363, 368, 806, 807, 932, 939, 982], "friendli": [85, 325, 338, 346, 368, 842, 944, 945, 952, 953], "visualis": [85, 88, 96, 213, 495, 935, 953], "64x64": [85, 333, 368], "singular": [85, 347, 360, 363, 366, 402, 404, 433, 434, 435, 436, 472, 475, 485, 489, 491, 492, 495, 498, 500, 501, 608, 623, 624, 625, 638, 886, 928, 929, 931, 968, 969, 979, 980], "scalar": [85, 284, 344, 351, 364, 373, 375, 415, 418, 475, 484, 566, 567, 568, 573, 574, 578, 579, 688, 692, 865, 873, 924, 936, 938, 942, 946, 952, 983, 984, 987, 989], "noise_variance_": [85, 167, 483, 485, 492, 607, 980, 987], "pixelwis": 85, "pca_estim": 85, "nmf_estim": 85, "multivari": [85, 151, 330, 365, 368, 371, 424, 467, 468, 469, 578, 579, 580, 581, 600, 622, 629, 630, 784, 785, 786, 787, 788, 926, 928, 931, 934, 952, 958, 966, 969], "subcompon": [85, 368], "ica_estim": 85, "15e": 85, "sparsepca": [85, 482, 484, 485, 486, 488, 490, 491, 492, 493, 496, 497, 973, 980, 981, 983, 984, 986, 987, 988], "batch_pca_estim": 85, "minibatchdictionarylearn": [85, 88, 326, 368, 482, 489, 493, 496, 497, 974, 976, 983, 984, 986, 987, 988, 989], "batch_dict_estim": 85, "That": [85, 133, 168, 206, 235, 239, 312, 313, 325, 332, 346, 351, 367, 372, 373, 395, 398, 508, 515, 544, 765, 857, 858, 921, 929, 930, 932, 938, 948, 982, 983], "enhanc": [85, 337, 338, 342, 349, 351, 363, 932, 950, 971, 972, 973, 974, 975, 981, 982, 983, 984, 985, 986, 987, 988, 989], "consum": [85, 320, 332, 340, 351, 363, 367, 370, 400, 750, 751, 809, 810, 928, 956, 978], "kmeans_estim": 85, "heteroscedast": [85, 93, 111, 181, 368, 825, 837], "fa_estim": 85, "factoranalysi": [85, 93, 96, 368, 495, 974, 976, 985, 987], "wrap": [85, 104, 111, 253, 332, 340, 351, 385, 459, 536, 537, 608, 627, 692, 775, 833, 922, 932, 935, 947, 952, 973, 978, 981, 983, 984, 986, 988], "element": [85, 98, 102, 103, 113, 208, 229, 234, 242, 244, 282, 312, 315, 319, 327, 335, 337, 338, 340, 347, 352, 360, 362, 363, 367, 368, 370, 371, 374, 396, 403, 415, 438, 459, 463, 465, 471, 473, 477, 478, 482, 488, 489, 491, 501, 508, 509, 510, 511, 515, 516, 517, 518, 519, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 568, 583, 609, 610, 617, 619, 627, 628, 629, 658, 668, 677, 684, 686, 696, 713, 719, 728, 732, 738, 739, 779, 789, 790, 791, 792, 793, 795, 797, 799, 800, 804, 806, 807, 812, 828, 829, 832, 836, 849, 854, 857, 858, 859, 860, 888, 889, 890, 903, 905, 906, 926, 928, 932, 933, 936, 939, 942, 943, 944, 948, 956, 958, 978, 979, 981, 983, 984, 985, 987], "suit": [85, 116, 151, 179, 180, 206, 226, 284, 285, 311, 325, 338, 340, 343, 344, 346, 349, 354, 366, 368, 370, 373, 401, 403, 454, 628, 786, 830, 880, 921, 924, 929, 932, 934, 935, 946, 952, 953, 956, 960, 980, 987], "colormap": [85, 143, 299, 648, 986], "uv": [85, 368], "x_1": [85, 128, 138, 176, 180, 366, 368, 370, 373, 564, 576, 608, 822, 928, 934, 936, 942, 946], "x_n": [85, 368, 934, 936, 946], "dict_pos_dict_estim": 85, "positive_dict": [85, 482, 488, 496, 497], "dict_pos_code_estim": 85, "fit_algorithm": [85, 482, 488, 988, 989], "cd": [85, 335, 336, 338, 342, 344, 368, 422, 423, 429, 482, 488, 490, 491, 494, 496, 497, 498, 928, 967, 978, 988], "positive_cod": [85, 482, 488, 493, 496, 497], "dict_pos_estim": 85, "plot_faces_decomposit": 85, "imagin": [86, 135, 367, 368, 371, 928], "simultan": [86, 239, 243, 318, 330, 360, 921, 932, 933, 948, 956, 980], "microphon": 86, "s1": [86, 133, 143, 335, 966], "sinusoid": [86, 100, 111, 212, 373, 925, 966], "s2": [86, 143, 335, 501, 966], "s3": [86, 335, 966], "sawtooth": [86, 966], "saw": [86, 180, 966], "tooth": [86, 966], "s_": [86, 239, 929, 940, 966], "a_": [86, 360, 363, 489, 491, 498, 928, 966], "mixing_": [86, 87, 484, 966], "prove": [86, 956], "revert": [86, 581, 583, 584, 980, 985], "unmix": [86, 375, 484], "allclos": [86, 115, 944, 966], "mean_": [86, 239, 483, 484, 485, 490, 492, 494, 829, 942, 966, 981], "orthogon": [86, 87, 88, 148, 157, 362, 368, 477, 482, 488, 490, 493, 494, 499, 615, 616, 636, 637, 944, 954, 969, 973], "steelblu": [86, 87, 120], "sig": 86, "plot_ica_blind_source_separ": 86, "ica": [87, 362, 375, 948, 968, 969], "geometr": [87, 363, 639, 655, 681, 707, 929, 981], "identifi": [87, 94, 111, 112, 150, 151, 179, 182, 224, 226, 233, 238, 244, 262, 283, 311, 312, 332, 333, 337, 338, 342, 343, 351, 363, 364, 367, 370, 371, 401, 408, 438, 447, 459, 460, 506, 507, 514, 557, 594, 600, 650, 663, 724, 774, 795, 814, 844, 845, 921, 928, 932, 938, 945, 956, 965, 980, 982, 987, 988], "standard_t": 87, "s_pca_": 87, "s_ica_": 87, "plot_sampl": [87, 227], "axis_list": 87, "x_axi": [87, 187, 239], "y_axi": [87, 187], "quiver": 87, "hline": 87, "set_zord": 87, "09": [87, 95, 213, 248, 363, 685, 787, 932, 942, 946], "plot_ica_vs_pca": 87, "fragment": 88, "firstli": [88, 324, 349, 608, 967], "undistort": 88, "noiseless": [88, 930], "pursuit": [88, 148, 157, 368, 425, 477, 482, 488, 493, 499, 615, 616, 636, 637, 954, 969, 973], "omp": [88, 95, 178, 368, 482, 488, 493, 499, 615, 616, 636, 637, 954, 969, 973, 981], "promin": [88, 351], "reminisc": 88, "uint8": [88, 332, 448, 457, 458, 985], "downsampl": [88, 215], "075": 88, "show_with_diff": 88, "puor": 88, "dico": 88, "n_iter_": [88, 187, 224, 351, 392, 398, 399, 400, 422, 423, 433, 434, 435, 482, 483, 484, 487, 488, 489, 490, 491, 494, 512, 513, 578, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 625, 627, 628, 629, 630, 631, 641, 643, 745, 746, 798, 806, 807, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 977, 980, 981, 983, 986, 987, 989], "n_steps_": [88, 400, 488, 489, 986], "reconstruct_from_patches_2d": [88, 371, 534], "intercept": [88, 171, 188, 196, 308, 351, 433, 434, 435, 500, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 638, 824, 828, 831, 849, 850, 856, 928, 930, 932, 937, 946, 947, 976, 978, 982, 983], "transform_algorithm": [88, 95, 482, 488, 493, 989], "n1": 88, "atom": [88, 95, 368, 482, 488, 490, 493, 494, 496, 497, 604, 614, 635, 928, 973, 986], "transform_n_nonzero_coef": [88, 95, 482, 488, 493], "n2": 88, "n4": 88, "transform_alpha": [88, 95, 482, 488, 493, 986], "set_param": [88, 96, 103, 108, 111, 152, 153, 159, 167, 168, 172, 183, 187, 211, 248, 281, 302, 312, 341, 351, 363, 364, 370, 373, 377, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 745, 746, 747, 750, 751, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 922, 938, 958, 965, 973, 979, 980, 981, 986, 987], "plot_image_denois": 88, "ipca": [89, 484, 485], "flip": [89, 533, 692, 886, 934, 977, 986], "incrementalpca": [89, 326, 368, 484, 486, 490, 492, 495, 977, 980, 981, 983, 984, 987], "x_ipca": 89, "x_pca": 89, "turquois": [89, 94, 95, 113, 185, 196, 202, 223, 224, 242], "x_transform": [89, 116, 436, 482, 483, 484, 485, 486, 488, 490, 494, 517, 589, 590, 639, 640, 641, 642], "nmean": 89, "shadow": [89, 94, 95, 202, 290, 306, 313, 371], "scatterpoint": [89, 94, 202, 223, 290], "plot_incremental_pca": 89, "kernal": 90, "nest": [90, 99, 148, 168, 228, 325, 344, 351, 354, 363, 367, 373, 377, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 413, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 455, 470, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 745, 746, 747, 750, 751, 752, 761, 771, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 900, 921, 932, 935, 973, 974, 977, 979, 980, 981, 987], "train_ax": 90, "test_ax": 90, "straight": [90, 169, 175, 177, 232, 324], "inner": [90, 111, 236, 240, 290, 324, 371, 395, 465, 497, 533, 540, 599, 620, 631, 725, 727, 924, 932, 942, 947, 974, 977, 987], "x_test_kernel_pca": 90, "orig_data_ax": 90, "pca_proj_ax": 90, "kernel_pca_proj_ax": 90, "unfold": [90, 341, 929], "untangl": 90, "mind": [90, 150, 151, 152, 197, 277, 278, 312, 320, 338, 357, 365, 367, 370, 597, 598, 655, 928, 947, 952, 958, 965], "investig": [90, 96, 147, 307, 338, 928], "pca_back_proj_ax": 90, "kernel_pca_back_proj_ax": 90, "reli": [90, 108, 133, 154, 167, 168, 253, 282, 286, 311, 324, 325, 340, 343, 346, 347, 349, 351, 359, 360, 363, 368, 370, 371, 500, 536, 537, 544, 548, 558, 559, 814, 898, 921, 924, 926, 928, 932, 935, 942, 947, 956, 981, 982, 983, 987, 989], "analyt": [90, 368, 373, 483, 571, 659, 922, 926, 932, 951, 956], "kernelridg": [90, 135, 212, 623, 925, 977], "relianc": 90, "plot_kernel_pca": 90, "aid": [91, 232, 363, 740, 741, 929, 956, 973, 985], "kevin": [91, 594, 975, 977, 979, 980, 983, 984, 985, 987, 988], "hugh": [91, 824, 975, 986], "pdf": [91, 235, 258, 273, 335, 338, 363, 372, 394, 400, 482, 485, 488, 492, 592, 595, 600, 609, 615, 617, 618, 622, 627, 630, 633, 634, 636, 637, 643, 786, 787, 798, 805, 842, 844, 928, 945, 948, 955, 973], "30000": [91, 333], "pdf_z": 91, "plot_fig": [91, 176], "fig_num": [91, 176], "pca_scor": [91, 93], "vt": [91, 501], "full_matric": 91, "x_pca_axi": 91, "y_pca_axi": 91, "z_pca_axi": 91, "x_pca_plan": 91, "y_pca_plan": 91, "z_pca_plan": 91, "plot_surfac": [91, 152, 176], "plot_pca_3d": 91, "cla": 92, "plot_pca_iri": 92, "homoscedast": [93, 209, 277, 932, 981], "succe": 93, "subspac": [93, 366, 370, 403, 466, 506, 507, 642, 646, 886, 926, 935, 938, 944, 956, 966], "overestim": [93, 320, 367], "circumst": [93, 197, 935, 952], "nip": [93, 335, 466, 492, 517, 592, 932], "598": [93, 492], "604": [93, 492], "minka": [93, 492, 928], "deni": [93, 975, 976, 980, 981, 982, 988], "engemann": [93, 975, 976, 980], "x_homo": 93, "x_hetero": 93, "cross_val_scor": [93, 124, 146, 147, 148, 228, 231, 240, 249, 302, 320, 338, 340, 349, 367, 370, 471, 526, 654, 692, 747, 770, 772, 857, 858, 921, 932, 962, 973, 974, 975, 976, 977, 980, 981, 982, 985, 986], "fa_scor": 93, "shrunk_cov_scor": 93, "lw_score": 93, "n_components_pca": 93, "n_components_fa": 93, "n_components_pca_ml": 93, "axhlin": [93, 123, 169, 234, 238], "violet": 93, "plot_pca_vs_fa_model_select": 93, "flower": [94, 244, 457, 458, 932, 952], "x_r": [94, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554], "x_r2": 94, "plot_pca_vs_lda": 94, "ricker": 95, "sparsecod": [95, 368, 482, 488, 491, 499, 980, 981, 983, 985, 987], "mexican": 95, "piecewis": [95, 284, 360, 923, 928, 942, 948], "matter": [95, 227, 320, 363, 370, 518, 619, 627, 629, 928, 977], "motiv": [95, 338, 340, 351, 370, 924, 932, 942, 956, 986], "heavier": [95, 365, 928], "subsampl": [95, 110, 113, 152, 179, 196, 197, 231, 283, 409, 510, 511, 512, 513, 514, 583, 630, 652, 750, 751, 775, 814, 826, 838, 865, 875, 924, 928, 953, 955, 973, 983, 987], "ricker_funct": 95, "ricker_matrix": 95, "d_fix": 95, "d_multi": 95, "first_quart": 95, "transform_n_nozero_coef": 95, "lasso_lar": [95, 482, 488, 493, 499, 983], "n_nonzero": 95, "coder": [95, 493, 667], "flatnonzero": [95, 167, 234, 243, 244, 731], "soft": [95, 119, 120, 338, 351, 520, 521, 845, 853, 946, 956, 978], "debias": 95, "lstsq": [95, 338, 608, 621], "rcond": 95, "07": [95, 320, 333, 363, 482, 512, 513, 643, 932, 946], "97": [95, 154, 213, 227, 299, 335, 344, 350, 367, 609, 933, 942, 973], "plot_sparse_cod": 95, "uncov": [96, 646], "inher": [96, 174, 320, 363, 368, 922, 924, 926, 927, 929, 933], "varimax": [96, 368, 483, 985], "jona": [96, 985], "sassenhagen": [96, 985], "set_yticklabel": [96, 138, 146, 147, 154, 246, 313], "n_comp": [96, 156], "unrot": 96, "plot_varimax_fa": 96, "predictor": [97, 148, 179, 197, 340, 350, 351, 364, 366, 367, 370, 373, 417, 418, 433, 434, 435, 447, 467, 468, 469, 506, 507, 513, 516, 519, 553, 561, 581, 583, 584, 599, 604, 608, 620, 624, 631, 770, 772, 781, 782, 810, 822, 823, 829, 906, 928, 933, 974, 980, 983], "stack": [97, 148, 258, 319, 337, 346, 349, 351, 369, 415, 417, 418, 447, 466, 513, 516, 518, 519, 563, 578, 579, 581, 604, 624, 770, 772, 810, 814, 822, 823, 829, 906, 922, 952, 953, 954, 955, 969, 976, 980, 981, 982, 983, 984], "versu": [97, 118, 148, 151, 157, 188, 194, 212, 224, 228, 261, 287, 363, 367, 370, 373, 455, 471, 485, 504, 507, 561, 590, 609, 610, 617, 619, 625, 626, 627, 628, 733, 744, 747, 752, 771, 775, 781, 810, 845, 846, 853, 854, 857, 858, 921, 928, 932, 933, 938, 945, 946, 947, 965, 981], "isolationforest": [97, 148, 206, 215, 582, 775, 853, 938, 979, 980, 981, 982, 984, 986, 987, 988, 989], "oob": [97, 110, 148, 370, 466, 515, 953, 975, 986], "votingclassifi": [97, 148, 455, 515, 521, 609, 787, 791, 854, 857, 921, 978, 979, 980, 981, 982, 983, 984, 986, 987], "vote": [97, 119, 120, 148, 252, 351, 352, 452, 506, 507, 508, 511, 515, 516, 520, 521, 608, 777, 791, 792, 797, 799, 933, 935, 954, 965, 969, 976, 978, 983], "hasti": [98, 99, 102, 103, 109, 113, 167, 234, 335, 367, 370, 470, 471, 504, 510, 511, 579, 607, 672, 673, 674, 779, 796, 842, 857, 858, 922, 926, 928, 933, 939, 944, 946, 948], "2009": [98, 99, 102, 103, 113, 363, 367, 368, 370, 371, 470, 471, 479, 482, 488, 489, 491, 492, 495, 498, 504, 510, 511, 586, 622, 630, 647, 780, 857, 858, 885, 886, 928, 932, 933, 939, 948], "tibshirani": [98, 102, 103, 113, 167, 234, 335, 367, 370, 471, 510, 511, 579, 607, 672, 673, 674, 779, 796, 857, 858, 922, 926, 928, 933, 939, 948], "friedman": [98, 102, 103, 113, 234, 365, 367, 370, 429, 467, 468, 469, 471, 509, 510, 511, 516, 544, 545, 779, 857, 858, 860, 926, 928, 933, 939, 948], "ed": [98, 103, 113, 370, 471, 510, 511, 944, 973, 980], "springer": [98, 102, 103, 113, 234, 361, 367, 368, 370, 471, 486, 510, 511, 641, 645, 647, 656, 671, 676, 690, 691, 706, 745, 857, 858, 929, 932, 933, 939, 948], "zhu": [98, 99, 370, 470, 504, 609, 844], "zou": [98, 99, 167, 370, 470, 504, 607, 928, 946], "rosset": [98, 99, 370, 470, 504], "make_hastie_10_2": [98, 109, 113, 239, 334, 370, 510, 939], "12_000": 98, "Be": [98, 130, 144, 311, 338, 365, 518, 519, 599, 605, 606, 607, 609, 610, 620, 631, 655, 765, 766, 824, 942, 970, 974], "stump": [98, 101, 370, 510, 984], "2_000": 98, "dt_stump": 98, "min_samples_leaf": [98, 110, 111, 153, 281, 284, 315, 370, 508, 509, 510, 511, 512, 513, 515, 516, 517, 857, 858, 859, 860, 948, 979], "dt_stump_err": 98, "dt_err": 98, "ada_discret": 98, "ada_r": 98, "zero_one_loss": [98, 338, 654, 684, 932, 974, 975, 976], "ada_discrete_err": 98, "staged_predict": [98, 99, 112, 370, 504, 505, 510, 511, 512, 513, 973, 985], "ada_discrete_err_train": 98, "ada_real_err": 98, "ada_real_err_train": 98, "leg": 98, "fancybox": [98, 306], "get_fram": 98, "plot_adaboost_hastie_10_2": 98, "sphere": [99, 148, 198, 199, 312, 369, 470, 540, 639, 640, 641, 642, 643, 714, 872, 926, 930, 935], "roughli": [99, 111, 168, 227, 245, 253, 278, 324, 351, 368, 371, 470, 929, 973], "samm": [99, 101, 370, 504], "13000": 99, "bdt_real": 99, "bdt_discret": 99, "real_test_error": 99, "discrete_test_error": 99, "real_test_predict": 99, "discrete_test_predict": 99, "n_trees_discret": 99, "n_trees_real": 99, "termin": [99, 325, 343, 344, 346, 354, 363, 399, 412, 504, 505, 509, 510, 511, 514, 516, 617, 618, 619, 627, 629, 806, 807, 858, 860, 938, 948], "alwai": [99, 108, 111, 158, 179, 197, 204, 210, 238, 241, 245, 296, 312, 320, 324, 325, 332, 338, 339, 340, 344, 350, 351, 354, 361, 363, 364, 367, 370, 371, 372, 373, 384, 395, 400, 415, 416, 418, 420, 433, 434, 435, 439, 447, 459, 460, 495, 500, 502, 503, 505, 507, 509, 510, 511, 512, 513, 515, 516, 519, 521, 532, 539, 540, 542, 545, 562, 578, 579, 581, 583, 584, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 622, 623, 624, 627, 629, 630, 643, 646, 656, 660, 666, 672, 673, 674, 682, 684, 685, 689, 732, 735, 736, 745, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 782, 783, 792, 793, 800, 801, 807, 814, 822, 827, 829, 842, 850, 851, 852, 854, 855, 857, 858, 860, 887, 921, 922, 924, 926, 928, 931, 932, 935, 938, 940, 944, 945, 947, 948, 956, 958, 965, 973, 975, 977, 978, 979, 981, 982, 983, 984, 986, 987, 988], "crop": [99, 346, 988], "discrete_estimator_error": 99, "estimator_errors_": [99, 504, 505], "real_estimator_error": 99, "discrete_estimator_weight": 99, "estimator_weights_": [99, 504, 505], "62": [99, 320, 333, 363, 444, 445, 789, 790, 976], "plot_adaboost_multiclass": 99, "1d": [100, 102, 148, 152, 180, 210, 254, 306, 317, 338, 345, 347, 350, 351, 364, 369, 415, 418, 568, 584, 604, 608, 611, 614, 635, 654, 663, 664, 670, 679, 680, 684, 688, 692, 733, 734, 737, 744, 791, 792, 793, 794, 795, 797, 799, 800, 801, 814, 865, 869, 870, 895, 919, 933, 958, 965, 973, 978, 979, 980, 982, 986, 987], "299": [100, 631], "drucker": [100, 370, 505], "1997": [100, 333, 368, 370, 373, 486, 505, 641, 645, 928, 929, 932], "dummi": [100, 179, 197, 238, 327, 340, 343, 358, 822, 831, 942, 948, 969, 974, 976, 977, 978, 980], "decisiontreeregressor": [100, 102, 216, 274, 281, 317, 318, 343, 505, 507, 509, 510, 511, 513, 516, 583, 584, 857, 860, 862, 881, 948, 974, 975, 978, 979, 982, 983, 984, 985, 986, 987, 988], "adaboostregressor": [100, 370, 504, 513, 975, 976, 979, 982, 983, 986, 988], "regr_1": [100, 317, 318], "regr_2": [100, 317, 318], "y_1": [100, 317, 318, 366, 932, 936, 946], "y_2": [100, 317, 318, 936], "plot_adaboost_regress": 100, "puriti": [101, 861, 863], "bdt": 101, "plot_color": [101, 316], "br": 101, "plot_step": [101, 107, 316], "class_nam": [101, 229, 861, 862, 863, 948, 989], "xx0": [101, 582], "twoclass_output": 101, "plot_rang": 101, "plot_adaboost_twoclass": 101, "irreduc": [102, 932], "light": [102, 333], "beam": [102, 973], "pointwis": [102, 142, 374, 396], "offset": [102, 156, 349, 365, 368, 420, 459, 460, 514, 583, 584, 592, 593, 595, 596, 628, 678, 725, 727, 795, 853, 932, 946, 965, 981], "narrow": [102, 111, 273, 275, 343, 789, 790], "tradeoff": [102, 148, 211, 228, 242, 243, 311, 324, 346, 369, 466, 515, 677, 739, 775, 810, 829, 849, 929, 965, 982, 985], "bootstrap": [102, 103, 110, 146, 238, 247, 283, 367, 370, 505, 506, 507, 508, 509, 514, 515, 516, 875, 903, 928, 973, 974, 976, 978, 981, 983, 986], "stem": [102, 153, 163, 178, 227, 367, 371, 924, 934], "baggingregressor": [102, 370, 506, 860, 976, 979, 981, 984, 988, 989], "n_repeat": [102, 105, 112, 132, 151, 153, 154, 235, 281, 367, 466, 585, 762, 763, 940], "knn": [102, 119, 125, 146, 261, 262, 265, 278, 283, 290, 311, 370, 553, 798, 844, 845, 935, 945, 965, 979], "y_predict": [102, 340, 973], "y_error": [102, 185], "y_nois": 102, "y_bia": 102, "y_var": 102, "plot_bias_vari": 102, "z_i": [103, 936], "y_i": [103, 284, 307, 361, 370, 923, 924, 928, 932, 936, 946, 947, 948], "whilst": [103, 201], "practition": 103, "suitabl": [103, 111, 165, 269, 313, 332, 333, 344, 347, 363, 368, 371, 403, 413, 419, 438, 456, 459, 578, 586, 784, 785, 788, 823, 824, 847, 897, 901, 926, 928, 931, 942, 944, 946, 952, 955, 967, 987, 988], "p592": 103, "593": 103, "kian": [103, 978, 988], "ho": [103, 370, 506, 507, 932, 978, 981, 982, 987], "hui": [103, 167, 489, 491, 498, 607, 928], "ordereddict": 103, "123": [103, 120, 320, 370, 467, 468, 469, 506, 507, 782, 933, 940], "warm_start": [103, 139, 172, 284, 340, 344, 351, 370, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 561, 597, 599, 600, 603, 609, 611, 613, 617, 618, 619, 620, 627, 628, 629, 631, 745, 746, 798, 806, 807, 938, 954, 969, 973, 976, 977, 978, 981, 982, 983, 984, 987, 989], "disabl": [103, 311, 336, 338, 371, 400, 411, 488, 489, 490, 497, 510, 511, 512, 513, 808, 869, 870, 942, 979, 982, 986, 988], "track": [103, 110, 289, 338, 341, 342, 354, 359, 485, 901, 933, 952, 953, 980, 983], "trajectori": 103, "ensemble_clf": 103, "oob_scor": [103, 370, 506, 507, 508, 509, 515, 516, 978, 980], "log2": [103, 189, 217, 508, 509, 510, 511, 515, 516, 857, 858, 859, 860, 933], "error_r": 103, "min_estim": 103, "max_estim": 103, "oob_error": 103, "oob_score_": [103, 506, 507, 508, 509, 510, 511, 515, 516, 975, 989], "clf_err": 103, "plot_ensemble_oob": 103, "betatim": [104, 117, 988], "leak": [104, 240, 311, 320, 364, 367, 809, 834, 835, 837, 838, 839, 840, 942, 973, 980, 983], "80_000": 104, "x_full_train": 104, "y_full_train": 104, "x_train_ensembl": 104, "x_train_linear": 104, "y_train_ensembl": 104, "y_train_linear": 104, "gradientboostingclassifi": [104, 109, 110, 113, 275, 320, 349, 370, 504, 512, 583, 584, 933, 939, 973, 974, 975, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 989], "random_forest": 104, "gradient_boost": [104, 974, 975, 976, 982], "histgradientboostingclassifi": [104, 281, 282, 283, 284, 286, 325, 370, 510, 583, 584, 922, 982, 983, 984, 985, 986, 987, 988], "randomtreesembed": [104, 116, 200, 370, 859, 974, 981, 982, 986, 987, 988], "random_tree_embed": 104, "rt_model": 104, "rf_appli": 104, "rf_leaves_yield": 104, "kw_arg": [104, 813, 942, 979], "rf_model": 104, "gbdt_appli": 104, "gbdt_leaves_yield": 104, "gbdt_model": 104, "roccurvedisplai": [104, 215, 218, 232, 244, 245, 281, 345, 738, 739, 938, 970, 983], "rt": 104, "rf": [104, 117, 120, 121, 153, 281, 320, 370, 518, 520, 521], "gbdt": [104, 152, 281, 282, 343, 370], "model_displai": 104, "plot_feature_transform": 104, "artifici": [105, 108, 115, 147, 199, 212, 271, 311, 333, 334, 335, 343, 360, 362, 363, 367, 368, 373, 486, 647, 779, 806, 807, 925, 929, 931, 933, 939, 944, 948, 953, 956, 973], "feature_importances_": [105, 106, 112, 133, 153, 154, 351, 370, 372, 504, 505, 508, 509, 510, 511, 515, 516, 517, 544, 545, 548, 857, 858, 859, 860, 975, 978, 982], "estimators_": [105, 107, 213, 281, 351, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 777, 778, 779, 780, 781, 782, 783, 974, 980, 987], "forest_import": 105, "mdi": [105, 112, 148, 149, 154, 370, 415, 447, 515, 581, 585, 775, 809, 823, 940], "overcom": [105, 324, 371], "permutation_import": [105, 106, 112, 153, 154, 281, 370, 504, 505, 508, 509, 510, 511, 515, 516, 517, 857, 858, 859, 860, 940, 983, 985, 986], "importances_mean": [105, 112, 153, 154, 281, 585, 940], "importances_std": [105, 585, 940], "omit": [105, 150, 151, 293, 343, 376, 426, 485, 617, 619, 627, 754, 756, 777, 778, 781, 784, 785, 786, 787, 788, 806, 930, 937], "plot_forest_import": 105, "hotter": 106, "job": [106, 224, 338, 342, 346, 370, 374, 389, 396, 399, 401, 403, 408, 409, 412, 415, 418, 419, 423, 482, 486, 487, 488, 490, 493, 494, 496, 497, 499, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 553, 561, 585, 590, 608, 639, 640, 641, 642, 643, 644, 645, 724, 728, 731, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 782, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 808, 811, 844, 845, 847, 898, 956, 960], "five": [106, 222, 289, 292, 333, 482, 490, 496, 929, 935, 947, 956, 973], "drawback": [106, 196, 924, 927], "img_shap": 106, "imp_reshap": 106, "met": [106, 340, 372, 485, 492, 578, 622, 928, 932, 981], "plot_forest_importances_fac": 106, "third": [107, 112, 128, 133, 143, 197, 206, 227, 258, 275, 325, 333, 337, 349, 352, 371, 485, 539, 540, 541, 542, 749, 750, 751, 756, 791, 792, 793, 795, 797, 827, 839, 900, 921, 943, 950, 973, 984], "fourth": [107, 958], "descend": [107, 578, 983], "extratreesclassifi": [107, 116, 370, 372, 509, 515, 517, 859, 860, 933, 976, 977, 981, 982, 983, 986, 987, 988, 989], "decisiontre": [107, 978], "consol": [107, 336, 959], "perhap": [107, 335, 337, 346, 351, 369, 953], "worth": [107, 152, 179, 338, 346, 956], "extratre": [107, 116, 324, 976], "sequenti": [107, 127, 148, 173, 236, 283, 336, 368, 370, 371, 452, 485, 544, 548, 553, 554, 556, 557, 597, 598, 603, 604, 611, 612, 613, 614, 624, 809, 922, 940, 946, 952, 954, 969, 973, 982, 985], "rdylbu": [107, 316], "plot_step_coars": 107, "plot_idx": 107, "model_titl": 107, "model_detail": 107, "blend": [107, 118, 351, 367, 952], "estimator_alpha": 107, "coarser": [107, 111], "regularli": [107, 349, 934], "xx_coarser": 107, "yy_coars": 107, "z_points_coars": 107, "cs_point": 107, "plot_forest_iri": 107, "equidist": [108, 643], "lowa": 108, "sale": [108, 235, 932, 956], "42165": 108, "categorical_columns_subset": 108, "bldgtype": 108, "garagefinish": 108, "lotconfig": 108, "masvnrtyp": [108, 118], "housestyl": [108, 118], "fireplacequ": 108, "extercond": 108, "exterqu": [108, 118], "poolqc": 108, "numerical_columns_subset": 108, "3ssnporch": 108, "fireplac": 108, "bsmthalfbath": 108, "halfbath": 108, "garagecar": [108, 118], "totrmsabvgrd": 108, "bsmtfinsf1": [108, 118], "bsmtfinsf2": 108, "grlivarea": 108, "screenporch": 108, "n_categorical_featur": [108, 512, 513, 583, 584], "n_numerical_featur": 108, "make_column_transform": [108, 118, 151, 208, 282, 364, 415, 417, 981], "dropper": 108, "hist_drop": 108, "hist_one_hot": 108, "etc": [108, 179, 197, 230, 239, 240, 320, 324, 326, 338, 340, 342, 343, 349, 350, 351, 360, 364, 367, 371, 440, 454, 508, 509, 515, 516, 619, 627, 643, 669, 721, 747, 761, 780, 783, 813, 824, 857, 858, 859, 860, 861, 863, 869, 870, 880, 921, 922, 926, 932, 935, 952, 953, 956, 973, 980, 982, 983], "use_encoded_valu": [108, 118, 153, 279, 823, 942, 985], "unknown_valu": [108, 118, 153, 279, 823, 942, 985, 987, 988], "hist_ordin": 108, "n_unique_categori": [108, 279], "hist_n": 108, "mean_absolute_percentage_error": [108, 932, 985, 987], "neg_mean_absolute_percentage_error": [108, 932, 940], "n_cv_fold": [108, 279, 753, 773, 776], "dropped_result": 108, "one_hot_result": 108, "ordinal_result": 108, "native_result": 108, "plot_result": [108, 221, 222, 227], "figure_titl": 108, "plot_info": 108, "test_scor": [108, 110, 112, 187, 234, 237, 250, 279, 307, 315, 350, 367, 753, 772, 773, 776], "y_limit": 108, "mape_cv_mean": 108, "mape_cv_std": 108, "c0": [108, 209, 279], "slowest": [108, 885, 886], "theori": [108, 212, 226, 307, 335, 362, 363, 367, 370, 641, 645, 676, 706, 841, 842, 886, 921, 928, 929, 931, 932, 933, 947, 948], "poorer": [108, 320, 368], "slight": [108, 184, 283, 370, 400, 983], "acf": 108, "bde": 108, "isol": [108, 114, 206, 215, 312, 336, 338, 344, 354, 514, 795, 853, 982, 983], "bcde": 108, "histgradientboostingregressor__max_depth": 108, "histgradientboostingregressor__max_it": 108, "altogeth": [108, 344, 981], "plot_gradient_boosting_categor": 108, "suffici": [109, 118, 187, 249, 299, 324, 351, 363, 372, 483, 497, 608, 633, 634, 766, 767, 933, 935, 953, 982, 988], "validation_fract": [109, 187, 284, 370, 510, 511, 512, 513, 617, 618, 619, 627, 629, 806, 807, 946, 981, 987], "denot": [109, 347, 351, 354, 361, 367, 370, 539, 540, 542, 747, 753, 761, 822, 823, 917, 921, 924, 928, 930, 932, 933, 942, 945, 958], "kept": [109, 226, 253, 307, 332, 342, 357, 373, 447, 486, 489, 491, 492, 497, 498, 548, 561, 562, 570, 571, 595, 646, 745, 746, 870, 942, 981, 982], "asid": [109, 187, 357, 510, 511, 512, 513, 617, 618, 619, 627, 629, 806, 807], "until": [109, 133, 187, 247, 283, 285, 343, 351, 352, 360, 363, 367, 372, 373, 459, 460, 508, 509, 510, 511, 515, 516, 517, 544, 553, 597, 598, 603, 604, 609, 610, 611, 612, 613, 614, 617, 619, 622, 627, 628, 629, 645, 745, 746, 750, 751, 806, 807, 846, 849, 857, 858, 859, 860, 907, 921, 928, 929, 937, 945, 948, 967, 976, 980, 981, 987], "n_estimators_": [109, 510, 511], "vighnesh": [109, 978, 979, 981], "birodkar": [109, 978, 979, 981], "vighneshbirodkar": 109, "rvraghav93": [109, 239, 273], "data_list": 109, "800": [109, 284, 333, 535, 643], "n_gb": 109, "score_gb": 109, "time_gb": 109, "n_gbe": 109, "gbe": 109, "gb": [109, 121, 370, 504, 584], "bar_width": 109, "bar1": 109, "crimson": 109, "bar2": 109, "coral": 109, "n_est": 109, "max_i": [109, 213, 934], "plot_gradient_boosting_early_stop": 109, "fly": [110, 343, 346, 459, 460, 533, 973, 975, 982], "pessimist": [110, 370], "cumul": [110, 179, 197, 363, 676, 685, 706, 826, 838, 942, 946, 980, 982, 983], "demand": [110, 371, 747, 761, 770, 771, 772], "special": [110, 151, 169, 197, 263, 299, 332, 334, 340, 344, 349, 351, 363, 366, 368, 415, 418, 504, 506, 510, 770, 861, 921, 926, 928, 930, 931, 932, 933, 935, 948, 980, 983, 985, 987], "expit": [110, 169, 370, 512, 928, 980], "ridgewai": [110, 370], "gbm": [110, 370, 976], "x3": [110, 215, 364, 966], "binomi": [110, 113, 370, 504, 510, 512, 928, 987], "1200": [110, 273, 370], "acc": 110, "heldout_scor": 110, "devianc": [110, 113, 179, 197, 370, 504, 509, 510, 512, 513, 516, 599, 620, 631, 672, 673, 674, 697, 699, 702, 858, 860, 928, 948, 974, 983, 984, 986, 987, 989], "y_proba": [110, 113, 278, 351, 809], "staged_predict_proba": [110, 113, 504, 510, 512, 973], "cv_estim": 110, "cv_clf": 110, "val_scor": 110, "cv_score": 110, "cumsum": [110, 179, 197, 980], "oob_improvement_": [110, 370, 510, 511, 975], "oob_best_it": 110, "test_best_it": 110, "cv_best_it": 110, "brew": [110, 336, 354], "oob_color": 110, "174": [110, 344, 535], "212": [110, 240, 291, 335, 420, 451, 938, 965], "test_color": 110, "127": [110, 973], "201": [110, 335, 535], "cv_color": 110, "253": [110, 485], "192": [110, 344, 973], "oob_lin": 110, "test_lin": 110, "cv_line": 110, "dashdot": [110, 135, 138], "xticks_po": 110, "tolist": [110, 146, 154, 234, 283, 333], "xticks_label": 110, "plot_gradient_boosting_oob": 110, "atleast_2d": [111, 340], "expected_i": 111, "amplitud": [111, 140, 142, 173, 373, 928], "lognorm": [111, 141, 160, 225, 277, 942], "tail": [111, 147, 151, 179, 181, 235, 273, 472, 475, 928], "imposs": [111, 313, 953], "mean_pinball_loss": [111, 284, 928, 932, 986], "all_model": 111, "min_samples_split": [111, 112, 113, 239, 247, 274, 283, 370, 508, 509, 510, 511, 515, 516, 517, 750, 751, 857, 858, 859, 860, 921, 948, 979], "gbr": 111, "gbr_l": 111, "5th": [111, 143], "95th": [111, 698], "y_med": 111, "fill_between": [111, 123, 135, 140, 142, 144, 158, 159, 197, 235, 237, 238, 239, 245, 250, 753], "unfortun": [111, 150, 151, 197, 346, 349, 370, 459, 460], "sinoisoid": 111, "highlight_min": [111, 168], "font": [111, 168, 193, 211, 861, 863], "pbl": 111, "asymmetr": [111, 181, 351, 978], "signficiantli": 111, "nor": [111, 238, 311, 320, 324, 343, 349, 371, 389, 545, 873, 936, 948, 984], "underestim": [111, 152, 179, 197, 235, 338], "extrem": [111, 179, 181, 214, 273, 291, 312, 338, 341, 363, 368, 508, 509, 515, 516, 517, 583, 584, 630, 674, 702, 859, 860, 861, 863, 932, 934], "coverage_fract": 111, "y_low": 111, "y_high": 111, "hypothesi": [111, 235, 241, 307, 367, 641, 645, 774, 929], "pinbal": [111, 284, 513, 621, 673, 698, 928, 986, 987], "experiment": [111, 146, 147, 179, 246, 247, 283, 284, 327, 338, 340, 341, 348, 349, 351, 367, 447, 500, 578, 647, 750, 751, 900, 902, 921, 922, 928, 931, 932, 952, 953, 961, 969, 981, 982, 985, 986, 987, 988], "enable_halving_search_cv": [111, 246, 247, 283, 342, 750, 751, 921], "halvingrandomsearchcv": [111, 247, 283, 530, 750, 921, 985, 987, 988], "make_scor": [111, 239, 367, 747, 771, 772, 932, 982], "neg_mean_pinball_loss_05p_scor": 111, "greater_is_bett": [111, 692, 932], "search_05p": 111, "max_resourc": [111, 750, 751, 921], "min_resourc": [111, 750, 751], "redefin": [111, 151], "neg_mean_pinball_loss_95p_scor": 111, "search_95p": 111, "estimator__alpha": 111, "did": [111, 135, 151, 154, 179, 187, 197, 333, 578, 663, 766, 851, 966, 974, 975, 979, 980, 981, 982, 983, 984, 986, 988], "untun": 111, "joint": [111, 148, 152, 157, 199, 364, 562, 603, 613, 643, 784, 785, 786, 787, 788, 849, 928, 929, 933, 937, 939, 943, 973], "sadli": 111, "plot_gradient_boosting_quantil": 111, "tackl": [112, 235, 325, 338, 363, 786, 934, 956, 961], "katrina": [112, 984], "ni": [112, 979, 984], "nilichen": 112, "reg": [112, 151, 159, 274, 282, 304, 370, 509, 511, 519, 601, 602, 604, 605, 606, 607, 608, 614, 615, 616, 621, 622, 629, 630, 640, 644, 860, 928, 978], "train_score_": [112, 370, 510, 511, 512, 513], "impur": [112, 319, 353, 370, 372, 504, 505, 508, 509, 510, 511, 515, 516, 517, 857, 858, 859, 860, 861, 863, 948, 969, 978, 979, 980, 981], "feature_import": 112, "sorted_idx": [112, 281], "po": [112, 202, 371], "align": [112, 147, 199, 221, 246, 313, 351, 640, 644, 935, 946, 968, 969, 989], "vert": [112, 153, 154, 281, 946], "plot_gradient_boosting_regress": 112, "consider": [113, 136, 139, 230, 236, 242, 338, 373, 570, 747, 761, 921, 934, 938, 946, 956], "return_invers": [113, 340], "original_param": 113, "max_leaf_nod": [113, 179, 284, 319, 370, 508, 509, 510, 511, 512, 513, 515, 516, 517, 857, 858, 859, 860, 976, 982, 984], "test_devi": 113, "plot_gradient_boosting_regular": 113, "anomali": [114, 148, 205, 215, 259, 260, 333, 362, 420, 463, 473, 514, 590, 628, 795, 810, 853, 938, 979, 980], "recurs": [114, 127, 148, 315, 340, 362, 363, 367, 392, 393, 394, 397, 414, 453, 466, 514, 544, 545, 548, 553, 583, 584, 609, 766, 854, 932, 935, 938, 939, 948, 954, 966, 969, 973, 983, 984], "deform": [114, 226, 309], "notat": [114, 351, 364, 368, 371, 541, 663, 928, 932, 958, 982, 989], "120": [114, 200, 372, 541, 973], "cluster_1": 114, "cluster_2": 114, "legend_el": [114, 192, 238], "nuniformli": 114, "max_sampl": [114, 146, 370, 506, 507, 508, 509, 514, 515, 516, 585, 983, 986, 989], "ax_": [114, 229, 238, 242, 278, 281, 345, 390, 582, 648, 649, 651, 652, 653, 753], "nof": 114, "plot_isolation_forest": 114, "trend": [115, 140, 152, 209, 269, 373, 956, 980], "xgboost": [115, 370, 952], "partialdependencedisplai": [115, 152, 216, 282, 283, 284, 286, 345, 584, 939, 983, 984, 985, 986, 987, 988], "f_0": 115, "f_1": [115, 242, 932], "gbdt_no_cst": [115, 282], "gbdt_with_monotonic_cst": 115, "monotonic_cst": [115, 282, 284, 370, 512, 513, 988], "line_kw": [115, 216, 237, 282, 583, 753], "unconstrain": [115, 152, 282, 333, 946], "axes_": [115, 216, 282, 345, 583], "f_idx": 115, "oscil": [115, 152, 184, 363, 392], "specifii": 115, "x_df": 115, "gbdt_with_monotonic_cst_df": 115, "plot_monotonic_constraint": 115, "excel": [116, 332, 338, 641, 645, 928, 956], "bernoullinb": [116, 326, 785, 786, 787, 788, 933, 934, 974, 975, 977, 980, 985, 986, 988], "hasher": [116, 313, 371], "transformed_grid": 116, "y_grid_pr": 116, "plot_random_forest_embed": 116, "multioutput": [117, 244, 252, 327, 340, 351, 384, 416, 433, 434, 435, 502, 505, 507, 508, 509, 511, 513, 515, 516, 519, 521, 562, 583, 584, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 623, 624, 629, 630, 672, 673, 678, 695, 696, 698, 700, 701, 703, 735, 738, 770, 778, 792, 800, 807, 816, 850, 852, 855, 857, 858, 859, 860, 875, 895, 896, 932, 954, 969, 973, 974, 975, 979, 980, 986, 987], "multioutputregressor": [117, 384, 416, 433, 434, 435, 505, 507, 509, 511, 513, 516, 519, 521, 562, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 623, 624, 629, 630, 781, 783, 792, 800, 807, 850, 852, 855, 858, 860, 979, 980, 982, 984, 985], "nativ": [117, 146, 325, 333, 351, 370, 512, 513, 781, 782, 900, 928, 932, 952, 983, 985], "ever": [117, 347, 370, 956], "centr": 117, "regr_multirf": 117, "regr_rf": 117, "y_multirf": 117, "y_rf": 117, "cornflowerblu": [117, 173, 182, 189, 222, 224, 227, 242, 244, 256, 258, 264, 317, 318], "plot_random_forest_regression_multioutput": 117, "compil": [118, 253, 313, 324, 325, 338, 339, 340, 341, 346, 347, 349, 952, 973], "dean": [118, 981, 987], "cock": [118, 982], "becam": [118, 352, 981], "kaggl": [118, 350], "1460": 118, "residenti": 118, "iowa": 118, "won": [118, 270, 312, 342, 363, 419, 447, 578, 579, 581, 638, 655, 668, 686, 687, 705, 707, 743, 931, 942, 978, 979, 984], "ship": [118, 147, 316, 325, 336, 354, 371, 928, 973, 982], "load_ames_h": 118, "yrsold": 118, "heatingqc": 118, "street": [118, 335], "yearremodadd": 118, "heat": [118, 299, 363, 403, 413, 646], "bsmtunfsf": 118, "mssubclass": 118, "condition2": 118, "garagetyp": 118, "overallqu": 118, "totalbsmtsf": 118, "miscfeatur": 118, "mosold": 118, "cat_selector": 118, "num_selector": 118, "besid": [118, 209, 338, 343, 540, 921, 981], "cat_tree_processor": 118, "encoded_missing_valu": [118, 153, 823, 942, 987, 988], "num_tree_processor": 118, "add_ind": [118, 147, 578, 579, 581, 922, 982, 985], "tree_preprocessor": [118, 179], "cat_linear_processor": 118, "num_linear_processor": 118, "linear_preprocessor": 118, "tediou": 118, "wrote": [118, 333], "lasso_pipelin": 118, "rf_pipelin": 118, "gbdt_pipelin": 118, "stackingregressor": [118, 281, 370, 518, 983, 984, 985, 986, 987], "stacking_regressor": 118, "final_estim": [118, 281, 370, 518, 519], "cross_val_predict": [118, 231, 281, 361, 367, 370, 389, 518, 519, 771, 772, 977, 978, 979, 980, 982, 984, 986], "scorer": [118, 197, 239, 340, 351, 367, 370, 512, 513, 545, 553, 585, 610, 624, 626, 662, 682, 683, 692, 747, 750, 751, 753, 761, 771, 772, 773, 776, 921, 928, 932, 940, 953, 977, 980, 981, 982, 983, 985, 986, 987, 988], "test_": [118, 367], "line_kwarg": [118, 652], "nevalu": 118, "plot_stack_predictor": 118, "exemplari": 119, "eclf": [119, 120, 370], "axarr": [119, 273], "tt": [119, 230, 416], "plot_voting_decision_region": 119, "examplari": 120, "class1_1": 120, "class2_1": 120, "lightgreen": [120, 185, 196], "p3": 120, "p4": 120, "nweight": 120, "plot_voting_proba": 120, "votingregressor": [121, 370, 520, 982, 983, 984, 987], "cohort": 121, "reg1": [121, 370], "reg2": [121, 370], "reg3": [121, 370], "ereg": [121, 370], "xt": [121, 253, 351, 578, 580, 747, 750, 751, 761, 793, 801, 809, 814, 819, 826, 838, 867], "pred1": 121, "pred2": 121, "pred3": 121, "pred4": 121, "labelbottom": [121, 235], "plot_voting_regressor": 121, "n_fold": [123, 598, 602, 604, 606, 610, 612, 614, 974, 975, 979], "scores_std": [123, 124, 962], "semilogx": [123, 124, 168, 248, 250], "std_error": 123, "transluc": 123, "answer": [123, 150, 235, 338, 349, 676, 706, 932, 956], "extern": [123, 135, 326, 327, 331, 335, 338, 340, 343, 349, 351, 360, 363, 371, 372, 373, 544, 561, 562, 668, 687, 743, 928, 931, 932, 935, 948, 953, 959, 965, 969, 981, 985], "lasso_cv": 123, "k_fold": [123, 962], "maximis": [123, 222, 261, 926, 935], "5f": [123, 285], "Not": [123, 152, 324, 338, 349, 363, 381, 382, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 420, 421, 422, 423, 424, 425, 426, 427, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 514, 517, 520, 521, 532, 533, 534, 539, 540, 542, 578, 579, 580, 581, 628, 639, 640, 641, 642, 644, 718, 742, 745, 746, 747, 750, 751, 761, 786, 789, 790, 793, 794, 795, 797, 801, 813, 821, 824, 825, 827, 841, 842, 853, 932, 938, 952, 982], "moreov": [123, 141, 275, 285, 320, 342, 363, 367, 373, 842, 902, 932, 956, 981, 987, 988], "substanti": [123, 255, 259, 260, 274, 338, 795, 938, 977, 980], "plot_cv_diabet": 123, "this_scor": [124, 302], "plot_cv_digit": 124, "plot_digits_classification_exercis": 125, "200j": [126, 303], "plot_iris_exercis": 126, "elimin": [127, 148, 362, 363, 367, 399, 453, 466, 544, 545, 548, 553, 609, 750, 751, 766, 854, 918, 932, 954, 956, 969, 973], "x_2": [128, 138, 176, 368, 370, 371, 373, 564, 576, 928, 936, 942], "x_3": [128, 942], "irrelev": [128, 320, 344, 365, 370, 372, 555, 690, 932], "agre": [128, 346, 352, 362, 363, 736, 958], "percept": [128, 152, 939], "correctli": [128, 132, 179, 197, 242, 244, 249, 263, 290, 299, 338, 347, 368, 370, 380, 389, 420, 444, 500, 501, 502, 504, 506, 508, 510, 512, 515, 518, 520, 561, 609, 617, 619, 625, 626, 627, 654, 742, 744, 777, 778, 779, 780, 784, 785, 786, 787, 788, 791, 796, 799, 806, 829, 844, 845, 849, 851, 852, 853, 854, 855, 857, 859, 887, 929, 932, 935, 936, 942, 947, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "mutual_info_regress": [128, 285, 372, 543, 546, 547, 550, 551, 560, 979, 980, 985, 987, 988, 989], "f_test": 128, "x_": [128, 136, 227, 235, 281, 340, 366, 368, 578, 586, 844, 845, 928, 934, 939, 979], "plot_f_test_vs_mi": 128, "examin": [129, 344, 346, 363, 798], "f_classif": [129, 130, 302, 372, 543, 546, 547, 549, 550, 551, 555, 557, 560], "log10": [129, 141, 151, 164, 172, 236, 299], "pvalues_": [129, 543, 546, 547, 549, 550, 551, 973], "x_indic": 129, "p_": [129, 932, 935, 948], "svm_weight": 129, "clf_select": 129, "svm_weights_select": 129, "get_support": [129, 133, 283, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 975], "plot_feature_select": 129, "mistak": [130, 289, 320, 363, 367, 685, 820, 834, 835, 837, 838, 839, 840, 928, 933], "anova_filt": 130, "anova_svm": 130, "plot_feature_selection_pipelin": 130, "rfe": [131, 132, 372, 545, 548, 553, 973, 977, 983, 984, 985, 986, 987, 989], "n_features_to_select": [131, 133, 283, 372, 544, 553, 985, 987], "ranking_": [131, 544, 545], "plot_rfe_digit": 131, "introduct": [132, 197, 233, 327, 338, 367, 368, 371, 541, 738, 739, 784, 788, 928, 930, 932, 934, 951, 959, 965, 968, 969], "class_sep": [132, 263, 466], "rfecv": [132, 372, 544, 548, 553, 977, 979, 981, 983, 984, 985, 986, 989], "stratifiedkfold": [132, 223, 230, 241, 245, 291, 367, 389, 518, 519, 545, 553, 610, 624, 747, 748, 750, 751, 752, 753, 755, 757, 761, 765, 767, 769, 770, 771, 772, 773, 774, 776, 830, 962, 974, 975, 976, 979, 980, 981, 982, 983, 986], "min_features_to_select": [132, 545, 981], "n_features_": [132, 492, 544, 545, 986, 988], "n_score": 132, "plateau": [132, 233, 237], "plot_rfe_with_cross_valid": 132, "selectfrommodel": [133, 351, 544, 553, 554, 954, 969, 978, 979, 980, 981, 983, 985, 986, 987, 989], "sequentialfeatureselect": 133, "greedi": [133, 370, 372, 398, 400, 411, 510, 511, 553, 928, 948], "442": [133, 147, 335, 452, 965], "descript": [133, 151, 331, 332, 337, 338, 342, 343, 346, 351, 363, 371, 403, 413, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 458, 461, 495, 581, 627, 712, 715, 728, 932, 946, 947, 953, 955, 967, 983, 984, 985, 986, 987, 988], "descr": [133, 331, 332, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 458, 461, 964, 981], "pitfal": [133, 148, 149, 153, 283, 327, 350, 351, 353, 367, 416, 418, 447, 604, 623, 624, 703, 762, 772, 775, 810, 822, 829, 928, 969], "accept": [133, 135, 232, 281, 299, 311, 313, 320, 324, 325, 332, 338, 340, 347, 349, 350, 351, 352, 357, 359, 363, 368, 371, 389, 393, 396, 397, 399, 412, 415, 418, 459, 460, 506, 507, 512, 513, 520, 521, 532, 533, 544, 545, 548, 579, 586, 590, 594, 630, 677, 692, 728, 745, 746, 750, 751, 791, 792, 799, 800, 813, 867, 869, 870, 873, 928, 930, 932, 935, 940, 942, 947, 952, 953, 962, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "tic": [133, 152, 246, 934], "sfm": 133, "toc": 133, "sequentialfeatureselector": [133, 372, 544, 548, 554, 985, 986, 987, 988, 989], "sf": [133, 215, 235, 283, 333, 372, 443, 553], "backward": [133, 283, 341, 351, 372, 447, 528, 553, 565, 566, 569, 570, 571, 573, 574, 862, 865, 932, 936, 953, 973, 976, 981, 982, 983, 985, 987, 989], "tic_fwd": 133, "sfs_forward": 133, "toc_fwd": 133, "tic_bwd": 133, "sfs_backward": 133, "toc_bwd": 133, "isn": [133, 281, 313, 320, 325, 338, 346, 466, 512, 513, 545, 742, 750, 751, 822, 935, 947, 983], "bmi": [133, 216, 335, 940], "sound": [133, 320], "finish": [133, 224, 929], "expos": [133, 284, 286, 325, 331, 335, 351, 361, 370, 372, 373, 389, 415, 504, 505, 518, 519, 520, 521, 544, 545, 553, 562, 747, 750, 751, 761, 778, 779, 780, 781, 782, 783, 864, 900, 928, 932, 934, 962, 964, 966, 970, 973, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "plot_select_from_model_diabet": 133, "basic": [134, 147, 148, 177, 304, 324, 326, 327, 338, 340, 342, 349, 351, 363, 367, 368, 370, 562, 573, 845, 857, 858, 859, 860, 921, 922, 935, 946, 951, 952, 953, 956, 965], "introductori": [134, 148, 205, 562, 573, 956], "gpr": [134, 144, 148, 447, 561, 562, 564, 565, 566, 567, 572, 573, 574, 575, 576, 954, 969, 983], "mauna": [134, 148, 447, 562, 566, 573, 574, 576], "loa": [134, 148, 447, 562, 566, 573, 574, 576], "co2": [134, 148, 447, 562, 566, 573, 574, 576, 980], "xor": [134, 148, 305, 561, 565, 573, 928, 948, 980], "posterior": [134, 135, 136, 148, 158, 235, 368, 373, 500, 501, 503, 561, 562, 564, 565, 566, 570, 573, 574, 578, 595, 596, 659, 745, 926, 952, 979, 982], "iso": [134, 148, 201, 561, 564, 565], "trick": [135, 212, 263, 313, 323, 326, 327, 341, 349, 364, 373, 533, 540, 594, 623, 924, 925, 936, 946, 947, 965, 966, 969, 974, 982], "drastic": [135, 210, 243, 363, 367, 935, 945], "theorem": [135, 362, 373, 934], "period": [135, 140, 144, 342, 351, 352, 361, 373, 566, 768, 828, 981, 986, 988], "reus": [135, 172, 236, 281, 313, 340, 351, 363, 364, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 585, 597, 599, 600, 603, 609, 611, 613, 617, 618, 619, 620, 627, 628, 629, 631, 806, 807, 940, 944, 956, 980], "training_sample_indic": 135, "training_data": 135, "training_noisy_target": 135, "newer": [135, 337, 354, 368], "expsinesquar": [135, 140, 144, 373], "emb": [135, 200, 210, 262, 331, 332, 413, 646, 929], "kernel_ridg": [135, 212, 327, 977], "tell": [135, 151, 152, 235, 299, 304, 325, 333, 363, 371, 514, 530, 921, 926, 939, 967], "param_distribut": [135, 236, 243, 247, 283, 350, 751, 759, 761], "1e0": [135, 212, 227, 243, 921], "kernel__length_scal": 135, "kernel__period": 135, "1e1": [135, 141, 179, 212, 299], "kernel_ridge_tun": 135, "predictions_kr": 135, "gaussianprocessregressor": [135, 140, 141, 142, 143, 144, 373, 561, 564, 565, 566, 567, 568, 572, 575, 576, 594, 979, 980, 981, 983, 984, 985, 986, 987, 988], "whitekernel": [135, 140, 141, 373, 562, 563, 565, 984], "periodicity_bound": [135, 140, 144, 566], "kernel_": [135, 136, 137, 138, 139, 140, 141, 142, 144, 561, 562], "mean_predictions_gpr": 135, "std_predictions_gpr": 135, "return_std": [135, 140, 141, 142, 144, 158, 159, 351, 503, 518, 519, 562, 564, 565, 566, 567, 576, 578, 595, 596, 809, 980, 981, 985], "formul": [135, 144, 244, 338, 365, 368, 371, 373, 376, 426, 500, 501, 508, 515, 601, 602, 605, 606, 607, 609, 610, 616, 621, 713, 719, 746, 851, 854, 857, 859, 932, 933, 942, 954, 969], "forc": [135, 164, 253, 277, 332, 336, 342, 358, 367, 370, 401, 408, 447, 557, 560, 597, 598, 603, 604, 608, 611, 612, 613, 614, 623, 624, 625, 632, 635, 638, 704, 728, 731, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 851, 852, 853, 854, 855, 867, 869, 870, 942, 969, 978, 981, 982, 983, 985, 986, 987], "capac": [135, 153], "length_scal": [135, 136, 139, 140, 141, 142, 144, 373, 563, 566, 570, 572, 573, 574, 575], "length_scale_bound": [135, 141, 142, 144, 373, 562, 566, 570, 573, 574], "attenu": 135, "plot_compare_gpr_krr": 135, "arbitrarili": [136, 222, 227, 351, 373, 384, 416, 433, 434, 435, 503, 505, 507, 509, 511, 513, 516, 519, 521, 562, 586, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 620, 621, 623, 624, 629, 630, 631, 672, 673, 674, 696, 735, 739, 782, 783, 792, 800, 807, 830, 850, 852, 855, 858, 860, 932, 935, 942, 948], "lml": [136, 137, 141, 373], "exhibit": [136, 184, 353, 367, 368, 370, 373, 940], "steep": [136, 152, 244, 245, 363, 367, 373, 401, 407], "laplac": [136, 373, 561, 562, 784, 785, 786, 788, 934], "gp_fix": 136, "gp_opt": 136, "log_marginal_likelihood": [136, 137, 139, 141, 144, 373, 561, 562, 983], "theta": [136, 137, 139, 141, 143, 144, 213, 368, 373, 474, 487, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 643, 934, 948], "landscap": [136, 373], "theta0": 136, "theta1": 136, "pcolor": 136, "xscale": [136, 141, 212], "yscale": [136, 141, 179, 212, 311], "plot_gpc": 136, "gpc_rbf_isotrop": 137, "gpc_rbf_anisotrop": 137, "m_max": 137, "plot_gpc_iri": 137, "dotproduct": [138, 139, 144, 373, 562, 576], "constantkernel": [138, 144, 373, 562, 568, 572, 575], "lim": [138, 485], "experi": [138, 142, 150, 151, 152, 153, 156, 181, 278, 307, 312, 313, 325, 332, 338, 341, 362, 367, 466, 678, 735, 928, 933, 944, 950, 951, 952, 956, 965, 967], "61611719": 138, "00099547": 138, "10469096": 138, "32782448": 138, "00000000": 138, "50000000": 138, "17289014": 138, "6984743": 138, "3109306": 138, "93271427": 138, "03823144": 138, "10584743": 138, "87600388": 138, "74310541": 138, "21301203": 138, "26386883": 138, "sigma_0": [138, 139, 144, 373, 565], "gp": [138, 143, 373, 561, 562, 573, 979], "cb": [138, 210, 225], "widehat": 138, "mathbf": [138, 368, 928, 932, 936, 937, 946], "leq": [138, 368, 370, 928, 932, 935, 946, 947, 948], "clim": 138, "666": [138, 791, 922], "clabel": [138, 190], "334": 138, "plot_gpc_isoprob": 138, "stationari": [139, 373, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576], "coincid": [139, 181, 373], "puor_r": [139, 305], "plot_gpc_xor": 139, "rw2006": [140, 373, 561, 562], "ascent": [140, 373], "monthli": [140, 352, 373, 932], "atmospher": [140, 373], "ppm": 140, "observatori": [140, 373], "hawaii": [140, 373], "1958": [140, 368, 370, 373, 483], "air": [140, 714], "41187": 140, "co2_data": 140, "to_datetim": 140, "march": [140, 676, 706, 932, 973, 977, 981, 983, 988], "dropna": 140, "nfrom": 140, "upcom": [140, 336], "to_numpi": 140, "rise": [140, 373], "irregular": [140, 363, 373, 935], "long_term_trend_kernel": 140, "decai": [140, 373, 495, 806, 807, 886, 932, 946, 977], "seasonal_kernel": 140, "ration": [140, 574, 930], "diffus": [140, 373], "accommod": [140, 373, 981], "rationalquadrat": [140, 144, 373, 567], "irregularities_kernel": 140, "shall": [140, 373], "phenomena": [140, 373], "noise_kernel": 140, "noise_level": [140, 141, 373, 563, 576], "noise_level_bound": [140, 141, 576], "co2_kernel": 140, "subtract": [140, 151, 366, 368, 373, 395, 398, 410, 485, 595, 596, 601, 602, 605, 606, 607, 615, 616, 980], "normalize_i": [140, 373, 562, 987], "y_mean": [140, 141, 144, 562, 595, 596], "futur": [140, 180, 218, 284, 338, 340, 342, 349, 351, 352, 357, 367, 371, 447, 485, 581, 586, 900, 902, 932, 933, 947, 948, 956, 970, 981, 982, 983, 984, 985, 986, 987, 988, 989], "todai": [140, 349, 967], "current_month": 140, "mean_y_pr": 140, "std_y_pr": 140, "52": [140, 584, 745, 927, 973], "6ppm": 140, "plot_gpr_co2": 140, "target_gener": 141, "add_nois": 141, "minima": [141, 167, 368, 398, 643, 929, 966, 981], "y_std": [141, 144, 503, 562, 595, 596, 986], "noptimum": 141, "nlog": 141, "faith": [141, 304], "bound": [141, 148, 181, 197, 205, 234, 336, 345, 363, 368, 371, 373, 374, 396, 440, 453, 463, 474, 487, 546, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 583, 586, 588, 601, 605, 609, 628, 656, 685, 745, 746, 789, 790, 826, 838, 841, 842, 843, 851, 852, 853, 856, 873, 900, 928, 931, 932, 935, 944, 946, 947, 949, 981, 984, 985, 987], "length_scale_grid": 141, "noise_level_grid": 141, "newshap": 141, "plot_gpr_noisi": 141, "principl": [142, 258, 278, 313, 338, 349, 351, 352, 367, 370, 373, 886, 921, 931, 935, 946, 980], "tikhonov": [142, 373, 623], "training_indic": 142, "n_restarts_optim": [142, 373, 561, 562], "mean_predict": 142, "std_predict": 142, "whenev": [142, 150, 320, 332, 346, 351, 354, 361, 433, 434, 435, 447, 579, 581, 923, 931, 953, 983], "noise_std": 142, "y_train_noisi": 142, "plot_gpr_noisy_target": 142, "gene": [143, 332, 360, 402, 464, 544, 545, 796, 829], "letter": [143, 333, 335, 342, 371, 738, 739, 932], "among": [143, 152, 156, 179, 226, 252, 319, 326, 333, 340, 351, 352, 361, 362, 366, 398, 400, 463, 470, 742, 774, 792, 797, 799, 851, 854, 857, 858, 859, 860, 921, 924, 932, 933, 939, 942, 947, 973, 979, 980, 983], "brighter": 143, "4th": [143, 335], "6th": 143, "haussler": 143, "1999": [143, 333, 361, 363, 365, 368, 370, 389, 401, 408, 420, 425, 485, 492, 506, 507, 510, 511, 673, 843, 851, 852, 854, 855, 938, 944], "646": 143, "technic": [143, 180, 200, 285, 333, 335, 338, 351, 370, 603, 615, 636, 637, 844, 928, 929, 935], "depart": [143, 363], "california": [143, 146, 147, 273, 283, 331, 335, 441, 969], "santa": [143, 988], "cruz": 143, "generickernelmixin": [143, 983], "sequencekernel": 143, "baseline_similar": 143, "baseline_similarity_bound": 143, "hyperparameter_baseline_similar": 143, "_f": [143, 928], "_g": 143, "__call__": [143, 299, 351, 371, 373, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 980], "eval_gradi": [143, 373, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576], "is_stationari": [143, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576], "clone_with_theta": [143, 373, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576], "agct": 143, "agc": 143, "aact": 143, "taa": 143, "aaa": 143, "gaaca": 143, "training_idx": 143, "cga": 143, "taac": 143, "tcg": 143, "cttt": 143, "tgct": 143, "atag": 143, "ctc": 143, "plot_gpr_on_structured_data": 143, "plot_gpr_sampl": 144, "gpr_model": 144, "y_sampl": [144, 562], "sample_i": [144, 373, 562, 987], "single_prior": 144, "pm": [144, 152, 245, 370, 932], "dev": [144, 151, 197, 240, 245, 336, 338, 342, 344, 346, 932, 956, 980, 985, 988], "alpha_bound": [144, 574], "1e15": 144, "sigma_0_bound": [144, 565], "matern": [144, 373, 984, 988], "plot_gpr_prior_posterior": 144, "iterativeimput": [145, 147, 148, 441, 516, 531, 579, 580, 581, 590, 596, 623, 771, 792, 810, 982, 983, 984, 985, 987, 988, 989], "robin": [146, 147, 578, 922, 979, 982, 987, 988], "kneighborsregressor": [146, 214, 265, 285, 370, 521, 791, 797, 799, 800, 935, 973, 975, 977, 983, 985, 986, 987, 988, 989], "mimic": [146, 179, 765], "missforest": [146, 922], "popular": [146, 203, 333, 336, 343, 346, 349, 351, 362, 369, 370, 371, 373, 403, 413, 922, 924, 928, 930, 937, 946, 953, 962, 967], "enable_iterative_imput": [146, 147, 342, 578, 922, 982], "fetch_california_h": [146, 147, 273, 283, 333, 350, 364, 982, 984], "x_full": [146, 147, 273], "y_full": [146, 147, 273], "2k": 146, "br_estim": 146, "score_full_data": 146, "neg_mean_squared_error": [146, 147, 181, 212, 249, 772, 932, 940, 979], "x_miss": [146, 147], "y_miss": [146, 147], "missing_sampl": [146, 147], "missing_featur": [146, 147], "score_simple_imput": 146, "missing_valu": [146, 147, 217, 351, 578, 579, 580, 581, 719, 922, 981, 982], "execut": [146, 168, 212, 240, 325, 338, 344, 357, 363, 368, 374, 395, 412, 747, 753, 761, 770, 771, 772, 773, 776, 794, 898, 899, 942, 945, 959, 967, 975, 978, 981], "score_iterative_imput": 146, "stricter": 146, "impute_estim": 146, "__class__": [146, 179, 181, 237, 275, 311, 312, 313, 345], "xerr": [146, 147, 312], "plot_iterative_imputer_variants_comparison": 146, "ness": [147, 197], "auxiliari": [147, 336, 956], "district": [147, 333], "neither": [147, 151, 281, 311, 320, 349, 389, 545, 579, 873, 935, 948], "20640": [147, 333, 441], "feel": [147, 273, 337, 338, 346, 363, 948], "x_diabet": [147, 962], "y_diabet": [147, 962], "x_california": 147, "y_california": 147, "add_missing_valu": 147, "missing_r": 147, "n_missing_sampl": 147, "x_miss_california": 147, "y_miss_california": 147, "x_miss_diabet": 147, "y_miss_diabet": 147, "knnimput": [147, 281, 578, 581, 922, 983, 984, 987, 988, 989], "get_scores_for_imput": 147, "impute_scor": 147, "x_label": 147, "mses_california": 147, "stds_california": 147, "mses_diabet": 147, "stds_diabet": 147, "get_full_scor": 147, "full_scor": 147, "get_impute_zero_scor": 147, "fill_valu": [147, 208, 217, 282, 578, 581, 942, 981, 989], "zero_impute_scor": 147, "unweight": [147, 192, 414, 598, 604, 629, 658, 664, 679, 680, 688, 733, 734, 737, 738, 784, 785, 786, 787, 788, 922], "get_impute_knn_scor": 147, "knn_impute_scor": 147, "get_impute_mean": 147, "mean_impute_scor": 147, "obvious": [147, 324, 967], "get_impute_it": 147, "n_nearest_featur": [147, 578], "sample_posterior": [147, 578, 922], "iterative_impute_scor": 147, "n_bar": 147, "xval": 147, "domin": [147, 179, 184, 244, 278, 333, 344, 361, 829, 934, 942, 948], "plot_missing_valu": 147, "prune": [148, 314, 372, 451, 508, 509, 510, 511, 515, 516, 544, 595, 775, 857, 858, 859, 860, 935, 954, 969, 973, 976, 983, 984], "elast": [148, 157, 170, 190, 248, 362, 422, 423, 429, 452, 475, 597, 598, 603, 608, 609, 610, 611, 612, 613, 614, 619, 627, 629, 632, 635, 735, 921, 932, 946, 954, 969, 973, 978, 982, 983], "gram": [148, 157, 340, 368, 371, 440, 475, 499, 539, 540, 541, 542, 597, 598, 601, 602, 603, 604, 605, 606, 607, 611, 612, 613, 614, 615, 616, 632, 633, 634, 635, 636, 637, 717, 725, 727, 921, 942, 967, 973, 975, 976, 977, 978, 980, 981, 982, 984, 986, 987], "huberregressor": [148, 157, 185, 475, 621, 622, 623, 629, 630, 928, 979, 980, 981, 982], "aic": [148, 157, 167, 226, 452, 602, 604, 605, 606, 607, 746, 810, 829, 921, 928, 973, 980, 986, 987], "bic": [148, 157, 167, 372, 452, 602, 604, 605, 606, 607, 746, 810, 829, 921, 928, 931, 973, 980, 986, 987], "mnist": [148, 157, 187, 253, 267, 447, 522, 609, 775, 806, 829, 872, 928, 936], "20newgroup": [148, 157, 440, 522, 609, 775, 928], "ordinari": [148, 157, 158, 181, 182, 184, 196, 284, 586, 597, 603, 605, 606, 607, 608, 623, 629, 633, 634, 638, 946, 954, 969], "spline": [148, 157, 467, 468, 469, 623, 810, 824, 828, 952, 986], "ransac": [148, 157, 185, 196, 475, 600, 608, 622, 629, 630], "convex": [148, 157, 199, 308, 312, 363, 365, 368, 376, 403, 413, 424, 426, 427, 430, 431, 432, 609, 627, 643, 928, 929, 935, 936, 946, 986], "theil": [148, 157, 185, 600, 608, 622, 629, 630], "sen": [148, 157, 185, 600, 608, 622, 629, 630], "tweedi": [148, 157, 415, 447, 503, 599, 620, 631, 657, 674, 695, 697, 699, 700, 702, 775, 810, 813, 814, 822, 829, 928, 983, 984, 986], "insur": [148, 157, 179, 415, 447, 503, 599, 620, 631, 657, 695, 700, 702, 775, 810, 813, 814, 822, 829, 928], "claim": [148, 157, 338, 415, 447, 503, 599, 620, 631, 657, 695, 700, 702, 775, 810, 813, 814, 822, 829, 928], "failur": [148, 149, 151, 338, 346, 608, 735, 775, 869, 870, 955, 956, 986, 987], "infer": [148, 149, 151, 222, 226, 227, 235, 316, 332, 340, 349, 362, 367, 368, 447, 459, 460, 466, 485, 487, 500, 501, 504, 510, 511, 583, 586, 608, 660, 673, 691, 735, 745, 746, 775, 785, 823, 830, 844, 845, 857, 858, 859, 860, 895, 922, 928, 932, 937, 942, 945, 948, 952, 953, 961, 974, 978, 979, 984, 987], "causal": [148, 149, 608, 735, 775], "multicollinear": [148, 149, 366, 451, 515, 585, 606, 775, 928, 940], "isomap": [148, 198, 201, 281, 285, 370, 453, 495, 500, 517, 640, 641, 642, 643, 798, 810, 819, 842, 935, 968, 969, 981, 983, 986, 987, 988, 989], "And": [148, 198, 235, 346, 357, 363, 367, 371, 481, 539, 540, 542, 643, 644, 928, 932, 950, 980], "hole": [148, 198, 481, 643, 644, 987], "perplex": [148, 198, 199, 203, 253, 465, 476, 487, 643, 929, 978, 980, 987], "johnson": [148, 205, 273, 277, 330, 362, 440, 453, 825, 837, 841, 842, 843, 942, 949, 969, 981, 987], "lindenstrauss": [148, 205, 330, 362, 440, 453, 841, 842, 843, 949, 969], "halv": [148, 228, 358, 466, 515, 530, 747, 750, 751, 854, 969, 985], "custom": [148, 216, 228, 236, 255, 281, 294, 299, 311, 313, 330, 333, 336, 340, 345, 346, 347, 349, 350, 351, 362, 363, 364, 367, 373, 419, 440, 444, 445, 453, 455, 489, 491, 498, 500, 508, 509, 515, 516, 522, 524, 553, 641, 664, 747, 775, 813, 847, 854, 916, 921, 926, 932, 935, 952, 953, 956, 967, 969, 973, 977, 978, 980, 981, 983, 984, 985, 988, 989], "det": [148, 228, 365, 466, 515, 649, 677, 739, 775, 810, 829, 849, 884, 985], "tsne": [148, 199, 200, 201, 203, 204, 254, 285, 351, 377, 385, 447, 639, 640, 641, 793, 797, 810, 906, 929, 935, 976, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989], "novelti": [148, 206, 254, 260, 298, 795, 954, 968, 969, 973, 981], "lof": [148, 206, 215, 254, 514, 795, 853, 938], "boltzmann": [148, 267, 453, 609, 664, 775, 805, 806, 807, 809, 835, 968, 969, 975], "mlp": [148, 152, 216, 267, 269, 447, 522, 775, 806, 807, 936], "semi_supervis": [148, 283, 285, 287, 288, 289, 290, 291, 292, 293, 327, 933, 945, 974, 979, 980, 987, 988], "tie": [148, 294, 349, 370, 463, 777, 854, 933, 947, 974, 989], "unbalanc": [148, 238, 294, 367, 463, 854, 874, 875, 921, 946], "featurehash": [148, 310, 312, 326, 333, 371, 415, 439, 532, 539, 540, 541, 542, 822, 974, 979, 980, 981, 987, 988], "auto_examples_python": 148, "auto_examples_jupyt": 148, "great": [150, 151, 177, 320, 338, 349, 368, 714, 953, 956, 973, 980], "unless": [150, 222, 227, 338, 340, 341, 349, 351, 361, 363, 366, 374, 389, 396, 399, 401, 403, 408, 409, 412, 415, 418, 423, 440, 447, 459, 460, 482, 486, 487, 488, 490, 493, 494, 496, 497, 498, 499, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 545, 553, 561, 562, 583, 585, 590, 597, 598, 602, 603, 604, 606, 608, 609, 610, 612, 614, 616, 617, 619, 627, 630, 639, 640, 641, 642, 643, 644, 645, 660, 665, 724, 728, 731, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 782, 791, 792, 795, 797, 799, 800, 802, 803, 806, 807, 808, 811, 834, 835, 837, 838, 839, 840, 844, 845, 857, 858, 859, 860, 865, 869, 870, 886, 900, 928, 931, 933, 973, 975, 979, 981, 984, 985], "willing": [150, 232], "unabl": [150, 151, 179, 326, 829, 942, 982], "econom": [150, 151, 235], "educ": [150, 151, 338, 667, 933], "earn": [150, 151, 352], "polici": [150, 151, 179, 197, 351, 486, 492, 928, 988], "maker": [150, 151], "ovb": [150, 151], "parent_hourly_wag": 150, "college_degre": 150, "true_coef": [150, 174], "hourly_wag": 150, "stori": [150, 235, 333, 931], "pairplot": [150, 151], "diag_kind": [150, 151], "kde": [150, 151, 257, 258, 266, 369, 794], "features_nam": [150, 980], "regressor_with_": 150, "y_pred_with_": 150, "r2_with_abl": 150, "model_coef": 150, "intellectu": 150, "proxi": [150, 151, 368, 805, 962, 978], "inadvert": [150, 351], "iq": 150, "regressor_without_": 150, "y_pred_without_": 150, "r2_without_": 150, "incorrect": [150, 242, 291, 320, 338, 363, 558, 559, 583, 584, 684, 973, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986], "brought": [150, 504, 505, 508, 509, 510, 511, 515, 516, 517, 857, 858, 859, 860], "unobserv": [150, 151, 368], "confound": [150, 151], "conduct": [150, 235, 373, 952, 987], "prohibit": [150, 367, 370, 578, 937, 945, 980], "uneth": 150, "iv": [150, 932], "plot_causal_interpret": 150, "hint": [151, 324, 339, 343, 357, 399, 932, 965], "aris": [151, 238, 307, 325, 343, 363, 666, 928, 929, 985], "mathemat": [151, 167, 196, 238, 330, 335, 338, 351, 353, 362, 365, 368, 369, 500, 501, 508, 515, 586, 597, 607, 740, 741, 746, 807, 851, 854, 857, 859, 932, 942, 944, 954, 956, 965, 969, 987], "survei": [151, 366], "1985": [151, 363, 656, 666, 736], "534": 151, "thereaft": [151, 158], "dollar": [151, 333], "exploratori": [151, 956], "emul": [151, 346], "train_dataset": [151, 332], "normalis": [151, 562, 967], "race": [151, 333, 976], "occup": [151, 273], "sector": 151, "marr": 151, "numerical_column": [151, 153, 418], "if_binari": [151, 219, 822, 942, 984], "prepend": [151, 973], "exp10": 151, "mae_train": 151, "mae_test": 151, "learnt": [151, 320, 351, 367, 921], "obviou": [151, 320, 324, 360, 368], "regressor_": [151, 416, 544, 545, 548], "030867": 151, "054699": 151, "adimension": 151, "Their": [151, 333, 335, 352, 363, 595, 973], "visibl": [151, 152, 181, 309, 332, 338, 363, 805, 937, 978, 988], "gaug": 151, "decad": [151, 953], "x_train_preprocess": 151, "multipli": [151, 197, 235, 324, 347, 351, 368, 370, 371, 376, 415, 426, 466, 489, 491, 492, 498, 508, 512, 515, 597, 599, 603, 605, 609, 610, 611, 613, 619, 620, 621, 623, 627, 628, 629, 631, 637, 638, 640, 644, 714, 851, 852, 853, 854, 855, 857, 859, 875, 908, 909, 910, 921, 928, 932, 946, 984], "coef_i": 151, "std_i": 151, "emphas": [151, 309, 344, 368, 932], "perturb": [151, 196, 271, 368, 370, 931], "caution": [151, 342, 392, 405, 981], "repeatedkfold": [151, 367, 752, 763, 980], "cv_model": 151, "return_estim": [151, 367, 772, 981], "train_idx": [151, 351], "stripplot": 151, "whi": [151, 153], "collinear": [151, 154, 184, 197, 370, 518, 599, 620, 631, 822, 928, 973], "teas": 151, "apart": [151, 284, 299, 349, 351, 364, 366, 372, 675, 947, 956, 981], "vice": [151, 232, 311, 363, 373, 394, 558, 559, 778, 977], "versa": [151, 232, 311, 363, 373, 394, 558, 559, 778, 977], "column_to_drop": 151, "said": [151, 206, 236, 333, 338, 740, 930, 938, 958, 965], "unchang": [151, 197, 242, 370, 385, 394, 395, 397, 398, 400, 415, 419, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 517, 518, 519, 520, 521, 532, 533, 534, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 639, 640, 643, 713, 784, 785, 786, 788, 793, 798, 801, 805, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 838, 841, 842, 847, 935, 958, 981, 987], "neglig": [151, 935, 976], "littl": [151, 152, 153, 154, 206, 333, 371, 413, 595, 747, 761, 886, 922, 929, 931, 947, 948, 965, 974, 985], "21": [151, 180, 253, 275, 277, 335, 336, 340, 342, 354, 360, 370, 371, 393, 397, 425, 483, 512, 513, 514, 520, 521, 539, 540, 542, 578, 620, 638, 704, 747, 749, 761, 772, 815, 822, 824, 830, 847, 863, 928, 933, 942, 950, 971, 973, 974, 976, 980, 981, 983], "alon": [151, 241, 299, 351, 357, 361, 599, 620, 631, 692, 980, 982], "suppress": [151, 324, 346, 643, 935, 980], "themselv": [151, 273, 334, 346, 351, 360, 363, 370, 371, 373, 566, 740, 948, 967, 983], "bring": [151, 273, 368, 627, 629, 929, 956], "certain": [151, 184, 196, 235, 253, 277, 320, 333, 334, 342, 353, 363, 368, 372, 589, 600, 604, 609, 614, 635, 814, 849, 921, 924, 928, 929, 932, 933, 936, 942, 947, 952, 958, 962, 978, 982, 985, 988], "entic": 151, "pursu": 151, "tempt": 151, "conclud": [151, 159, 197, 235, 313, 320, 352], "deflat": [151, 366, 375, 484], "presum": [151, 252, 363, 371, 784], "must": [151, 152, 154, 160, 196, 197, 206, 216, 230, 259, 274, 279, 320, 333, 337, 338, 339, 340, 342, 344, 346, 351, 352, 359, 361, 363, 364, 367, 368, 370, 371, 372, 373, 374, 383, 390, 393, 396, 397, 398, 400, 401, 402, 406, 408, 410, 412, 413, 415, 417, 418, 420, 425, 438, 459, 460, 463, 474, 482, 488, 489, 490, 491, 492, 494, 495, 498, 504, 505, 510, 511, 512, 513, 518, 519, 532, 533, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 561, 562, 568, 571, 578, 579, 580, 581, 583, 584, 589, 593, 594, 599, 600, 603, 609, 610, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 633, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 650, 654, 657, 660, 685, 696, 714, 721, 724, 728, 731, 738, 740, 741, 742, 744, 745, 746, 747, 748, 750, 751, 752, 754, 756, 757, 759, 761, 762, 763, 765, 766, 768, 775, 784, 785, 786, 787, 788, 791, 792, 793, 795, 797, 798, 799, 800, 801, 804, 805, 806, 807, 809, 812, 813, 814, 816, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 849, 850, 851, 852, 853, 854, 855, 856, 862, 900, 907, 916, 918, 921, 922, 928, 929, 930, 932, 935, 936, 938, 939, 946, 947, 948, 958, 967, 973, 976, 980, 984, 986, 987], "respond": [151, 338, 363], "plot_linear_model_coefficient_interpret": 151, "complement": [152, 245, 311, 583, 584, 749, 764, 767, 775, 784, 785, 786, 787, 788, 939, 954, 969, 981], "molnar": [152, 939], "christoph": [152, 368, 373, 483, 561, 562, 565, 570, 573, 745, 928, 933, 974, 978, 981, 984, 985, 986, 987, 988], "goldstein": [152, 939], "kapeln": [152, 939], "bleich": [152, 939], "pitkin": [152, 939], "peek": [152, 338, 939], "44": [152, 257, 373, 731, 830, 850, 853, 932, 939, 973], "settingwithcopywarn": 152, "mask_train": [152, 197], "accordingli": [152, 338, 342, 343, 980, 981, 988], "nomin": [152, 332, 351, 352, 370, 371, 532, 533, 667, 942, 953], "numerical_featur": [152, 279], "temp": 152, "feel_temp": 152, "humid": [152, 939], "windspe": 152, "00": [152, 332, 335, 344, 363, 370, 371, 664, 666, 738, 747, 761, 773, 858, 928, 932, 942, 944, 946, 966], "xtick_start": 152, "xtick_period": 152, "average_bike_rent": 152, "numeric_onli": 152, "decor": [152, 281, 338, 339, 340, 347, 753, 876, 880, 881, 893, 899, 983, 986, 989], "strike": 152, "mlp_preprocessor": 152, "hgbdt_preprocessor": 152, "sparse_threshold": [152, 415, 418, 981], "pdp": [152, 583, 939, 987], "mlp_model": 152, "hidden_layer_s": [152, 216, 268, 270, 806, 807, 936], "learning_rate_init": [152, 269, 270, 806, 807], "early_stop": [152, 187, 268, 284, 311, 351, 370, 512, 513, 617, 618, 619, 627, 628, 629, 806, 807, 946, 981, 984, 987, 988], "forget": [152, 320, 325, 332, 342, 349, 368, 929, 955], "poor": [152, 156, 241, 250, 291, 361, 367, 368, 641, 645, 688, 786, 789, 790, 926, 927, 929, 934, 953, 958, 980, 981, 982, 984, 986], "grid_resolut": [152, 283, 297, 582, 583, 584], "features_info": 152, "hgbdt_model": 152, "cheaper": [152, 363, 373, 624, 924, 928], "temperatur": [152, 371, 939], "wind": [152, 933], "earlier": [152, 332, 338, 366, 780, 783, 942, 950, 971, 974, 986, 988], "meaningless": [152, 371, 851, 854, 976], "celsiu": [152, 939], "interaction_cst": [152, 286, 370, 512, 513, 988], "hgbdt_model_without_interact": 152, "histgradientboostingregressor__interaction_cst": 152, "heatmap": [152, 154, 158, 246, 286, 299, 583, 939], "slope": [152, 177, 181, 196, 363, 673, 698, 930, 932], "dry": 152, "wetter": 152, "spike": 152, "degrad": [152, 206, 273, 312, 369], "somehow": 152, "forbidden": [152, 370], "noisili": 152, "partial_depend": [152, 583, 939, 974, 982, 983, 984, 985, 988, 989], "grid_valu": [152, 584, 989], "add_ax": [152, 203, 246], "surf": 152, "rstride": 152, "cstride": 152, "bupu": 152, "nthe": [152, 233, 319], "pretti": [152, 203, 233, 324, 338, 349, 806, 807, 936, 982], "view_init": [152, 199, 201, 203], "clb": 152, "ndepend": 152, "plot_partial_depend": [152, 281, 282, 283, 978, 982, 983, 984, 985, 986, 987], "mitig": [153, 325, 326, 929, 948, 965, 966, 985], "breiman": [153, 367, 370, 467, 468, 469, 506, 507, 515, 516, 585, 857, 858, 940, 948], "random_num": 153, "random_cat": 153, "sibsp": 153, "parch": 153, "categorical_encod": 153, "numerical_pip": 153, "memor": 153, "mdi_import": 153, "sorted_importances_idx": 153, "retri": [153, 447, 981, 987], "classifier__min_samples_leaf": 153, "anymor": [153, 179, 237, 281, 282, 299, 320, 342, 364, 621, 979, 982, 985, 986, 987, 989], "train_result": 153, "test_result": 153, "train_import": 153, "test_import": 153, "plot_permutation_import": 153, "wisconsin": [154, 331, 451, 969, 978], "spearman": [154, 586, 587, 923], "spearmanr": 154, "squareform": 154, "load_breast_canc": [154, 291, 315, 343, 543, 546, 547, 549, 625, 626, 738, 932, 978, 979, 984], "012": [154, 156], "contradict": [154, 953], "perm_sorted_idx": 154, "tree_importance_sorted_idx": 154, "tree_indic": 154, "fill_diagon": [154, 202], "distance_matrix": 154, "dist_linkag": 154, "dendro": 154, "leaf_rot": 154, "dendro_idx": 154, "ivl": 154, "cluster_id": [154, 312], "fcluster": 154, "cluster_id_to_feature_id": 154, "selected_featur": 154, "x_train_sel": 154, "x_test_sel": 154, "clf_sel": 154, "plot_permutation_importance_multicollinear": 154, "polynomialcountsketch": [156, 590, 592, 924, 985, 987], "covtyp": 156, "tensor": [156, 330, 368, 489, 491, 498, 590, 591, 592, 969, 985], "sketch": [156, 326, 330, 347, 362, 590, 591, 592, 897, 969, 985], "daniel": [156, 324, 830, 942, 956, 973, 974, 975, 976, 978, 979, 980, 981, 983, 985, 987], "lopez": 156, "sanchez": [156, 981, 982], "lope": 156, "usal": 156, "581": 156, "54": [156, 333, 335, 363, 442, 974, 975], "cartograph": 156, "remot": [156, 289, 338, 341], "fetch_covtyp": [156, 215, 283, 333, 982, 985, 987], "5_000": 156, "mm": 156, "lsvm": 156, "lsvm_time": 156, "lsvm_score": 156, "thumb": [156, 324, 338, 339, 349, 363, 609, 610, 617, 619, 627, 628, 629, 849, 932], "condens": 156, "compact": [156, 273, 324, 335, 789, 790, 948, 975], "ps_lsvm_time": 156, "ps_lsvm_score": 156, "ksvm": 156, "ksvm_time": 156, "ksvm_score": 156, "pham": [156, 924, 980], "ninh": 156, "rasmu": [156, 980], "pagh": [156, 924], "kdd": [156, 333, 361, 389, 944], "doi": [156, 179, 197, 338, 363, 627], "1145": [156, 363, 627], "2487575": 156, "2487591": 156, "csie": [156, 332, 438, 459, 460, 609], "ntu": [156, 332, 438, 459, 460, 609], "tw": [156, 332, 438, 459, 460, 609, 947], "cjlin": [156, 332, 438, 459, 460, 609, 976], "libsvmtool": [156, 332, 438, 459, 460], "plot_scalable_poly_kernel": 156, "ard": [158, 595, 596], "ol": [158, 169, 174, 176, 177, 185, 196, 284, 607, 928], "true_weight": 158, "ardregress": [158, 596, 928, 980, 981, 982, 984, 985, 986, 987], "olr": 158, "brr": 158, "symlognorm": 158, "linthresh": 158, "10e": 158, "cbar_kw": 158, "seismic_r": 158, "stabilis": 158, "sparser": [158, 170, 368, 422, 429, 490, 494, 928, 935, 946], "retain": [158, 351, 363, 366, 367, 371, 445, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 646, 647, 765, 822, 921, 945, 973], "ard_scor": 158, "scores_": [158, 159, 543, 546, 547, 549, 550, 551, 595, 596, 610, 973, 983], "brr_score": 158, "cutoff": [158, 891, 942, 982], "full_data": 158, "input_featur": [158, 340, 351, 379, 383, 394, 395, 397, 398, 400, 415, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 517, 518, 519, 520, 521, 532, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 639, 640, 643, 793, 798, 801, 805, 808, 809, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 989], "x_plot": [158, 180, 185, 212, 238, 258, 278], "y_plot": [158, 180, 185, 238], "ard_poli": 158, "brr_poli": 158, "y_ard": 158, "y_ard_std": 158, "y_brr": 158, "y_brr_std": 158, "queri": [158, 266, 324, 342, 369, 374, 396, 401, 408, 503, 561, 562, 579, 595, 596, 676, 706, 789, 790, 791, 792, 793, 794, 795, 797, 799, 800, 801, 932, 935, 948, 952, 975, 977, 978, 981], "lambda_init": [158, 159, 596, 928, 983], "intrins": [158, 351, 368, 370, 935, 940, 946, 985], "plot_ard": [158, 595], "alpha_init": [159, 596, 928, 983], "yoshihiro": [159, 983], "uchida": [159, 983], "nimbus1after2a1sun7show": 159, "1234": [159, 224, 238, 338], "n_order": 159, "vander": 159, "ymean": 159, "ystd": 159, "pink": 159, "_init": 159, "lambda_": [159, 595, 596, 825, 928, 980], "plot_bayesian_ridge_curvefit": 159, "normalized_weight": 160, "x_offset": 160, "x_center": 160, "x_scale": [160, 819, 835, 942], "uncent": 160, "incorrectli": [160, 370, 371, 504, 510, 512, 684, 690, 932, 974, 979, 981, 982, 984], "lm": 160, "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": 160, "huber": [161, 189, 362, 370, 511, 600, 627, 629, 946, 973, 975, 976, 985], "mks542": 161, "x_outlier": [161, 193, 259, 260, 298], "y_outlier": 161, "epsilon_valu": 161, "intercept_": [161, 169, 171, 188, 213, 297, 304, 308, 340, 351, 433, 434, 435, 500, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 849, 850, 851, 852, 853, 854, 855, 926, 928, 946, 947, 973, 980, 985, 987], "coef_ridg": 161, "plot_huber_vs_ridg": 161, "logreg": [162, 783], "plot_method": [162, 256, 261, 295, 297, 300, 301, 582], "plot_iris_logist": 162, "y_pred_lasso": 163, "r2_score_lasso": 163, "enet": [163, 248], "y_pred_enet": 163, "r2_score_enet": 163, "markerfmt": 163, "2ca02c": 163, "ff7f0e": 163, "bx": 163, "plot_lasso_and_elasticnet": 163, "penalis": [164, 177, 194, 647], "lasso_path": [164, 602, 603, 604, 605, 606, 607, 614, 633, 634, 928, 973, 975, 977, 986], "enet_path": [164, 351, 598, 975, 977, 986], "alphas_lasso": 164, "coefs_lasso": 164, "alphas_positive_lasso": 164, "coefs_positive_lasso": 164, "alphas_enet": 164, "coefs_enet": 164, "alphas_positive_enet": 164, "coefs_positive_enet": 164, "neg_log_alphas_lasso": 164, "neg_log_alphas_enet": 164, "coef_l": 164, "neg_log_alphas_positive_lasso": 164, "coef_pl": 164, "neg_log_alphas_positive_enet": 164, "coef_p": 164, "plot_lasso_coordinate_descent_path": [164, 597, 598, 603, 604, 611, 612, 613, 614, 632, 635], "sai": [165, 206, 307, 338, 361, 363, 364, 368, 370, 371, 398, 451, 455, 461, 628, 921, 938, 945, 956, 964, 965, 967], "x_sp": 165, "sparse_lasso": 165, "dense_lasso": 165, "coeff_diff": 165, "2e": [165, 249], "xs_sp": 165, "tocsc": 165, "nnz": [165, 312, 333, 650], "plot_lasso_dense_vs_sparse_data": 165, "lars_path": [166, 347, 482, 488, 490, 493, 494, 496, 497, 499, 601, 602, 603, 604, 605, 606, 607, 614, 615, 616, 634, 635, 636, 637, 928, 973, 975, 978, 982, 984], "plot_lasso_lar": 166, "zht2007": 167, "lassolars": [167, 168, 372, 602, 605, 606, 928, 973, 980, 982, 986, 987], "trevor": [167, 335, 579, 607, 672, 673, 674, 922, 928, 944, 977, 978, 981, 982, 983, 985], "annal": [167, 335, 370, 425, 467, 468, 469, 510, 511, 607, 928], "2173": [167, 607, 928], "2192": [167, 607, 928], "linearlars": 167, "akaik": [167, 168, 226, 607, 746, 921, 928], "lasso_lars_": [167, 168], "zou_et_al_criterion_resc": 167, "noise_vari": [167, 483, 607, 928, 987], "aic_criterion": 167, "criterion_": [167, 168, 607], "index_alpha_path_a": 167, "alphas_": [167, 168, 598, 601, 602, 604, 605, 606, 607, 612, 614, 633, 634, 973, 976, 986], "lassolarsic__criterion": [167, 168], "bic_criterion": 167, "index_alpha_path_b": 167, "plot_lasso_lars_": 167, "n_random_featur": 168, "x_random": 168, "random_": 168, "02d": 168, "alpha_a": 168, "alpha_b": 168, "set_xscal": [168, 183, 184], "optimist": [168, 240, 311, 320, 658, 928, 932], "proper": [168, 197, 326, 344, 361, 370, 400, 492, 504, 627, 886, 907, 927, 928, 929, 932, 947, 973, 983, 984, 985, 986, 987, 988], "badli": [168, 179, 311, 326, 829, 928, 942], "lassolarscv": [168, 372, 603, 604, 605, 607, 614, 616, 633, 634, 635, 928, 973, 980, 986], "2300": 168, "3800": 168, "mse_path_": [168, 598, 602, 604, 606, 612, 614], "cv_alphas_": [168, 602, 606, 985], "kink": 168, "heavili": [168, 324, 325, 338, 346, 600, 606, 949], "efficaci": 168, "plot_lasso_model_select": [168, 598, 604], "plot_logist": 169, "axes_row": 170, "clf_l1_lr": 170, "clf_l2_lr": 170, "clf_en_lr": 170, "coef_l1_lr": 170, "coef_l2_lr": 170, "coef_en_lr": 170, "sparsity_l1_lr": 170, "sparsity_l2_lr": 170, "sparsity_en_lr": 170, "nl1_ratio": 170, "plot_logistic_l1_l2_spars": 170, "dupr": [171, 187, 253, 255, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988], "m4x": [171, 195], "sag": [171, 186, 609, 610, 623, 625, 638, 928, 946, 952, 978, 979, 980, 982, 983], "bry": [171, 188], "classes_": [171, 188, 207, 244, 288, 289, 338, 340, 351, 389, 390, 500, 501, 502, 504, 506, 508, 510, 512, 515, 518, 520, 544, 545, 561, 609, 610, 617, 619, 625, 626, 627, 648, 651, 653, 738, 747, 750, 751, 761, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 791, 796, 799, 806, 809, 816, 817, 820, 844, 845, 846, 849, 851, 854, 857, 859, 862, 932, 943, 946, 974, 977, 978, 980, 983, 985], "plot_hyperplan": [171, 188, 213], "plot_logistic_multinomi": 171, "looser": 172, "liblinear": [172, 297, 344, 609, 610, 738, 849, 850, 851, 854, 855, 932, 947, 973, 977, 978, 979, 980, 981, 982, 983, 984], "l1_min_c": [172, 928, 947, 973], "intercept_sc": [172, 609, 610, 849, 850, 856, 928], "coefs_": [172, 270, 806, 807, 936, 978], "plot_logistic_path": 172, "jointli": [173, 242, 362, 363, 368, 928], "instant": 173, "wave": [173, 338, 931], "n_task": [173, 928], "n_relevant_featur": 173, "multitasklasso": [173, 603, 611, 614, 928, 973, 981, 984, 986], "coef_lasso_": 173, "coef_multi_task_lasso_": 173, "spy": 173, "feature_to_plot": 173, "seagreen": 173, "plot_multi_task_lasso_support": 173, "reg_nnl": 174, "y_pred_nnl": 174, "r2_score_nnl": 174, "nnl": [174, 608], "reg_ol": 174, "y_pred_ol": 174, "r2_score_ol": 174, "low_x": 174, "high_x": 174, "low_i": 174, "high_i": 174, "get_ylim": [174, 273, 274], "plot_nnl": 174, "diabetes_x": [175, 965], "diabetes_i": [175, 965], "diabetes_x_train": [175, 965], "diabetes_x_test": [175, 965], "diabetes_y_train": [175, 965], "diabetes_y_test": [175, 965], "regr": [175, 364, 505, 507, 516, 597, 598, 618, 782, 807, 850, 852, 855, 947, 965], "diabetes_y_pr": 175, "plot_ol": 175, "43": [176, 235, 253, 335, 343, 747, 761, 830], "plot_ols_3d": 176, "greatli": [177, 211, 286, 338, 346, 403, 935, 948, 979, 987], "plot_ols_ridge_vari": 177, "orthogonalmatchingpursuit": [178, 616, 636, 637, 928, 973, 975, 978, 981, 986], "orthogonalmatchingpursuitcv": [178, 615, 975, 986], "make_sparse_coded_sign": [178, 482, 488, 987, 989], "512": 178, "n_nonzero_coef": [178, 477, 482, 488, 493, 499, 601, 615, 636, 637], "xw": [178, 284, 597, 598, 600, 603, 604, 605, 606, 607, 611, 612, 613, 614, 623, 632, 633, 634, 635, 928], "_0": [178, 636, 928, 932, 947], "distort": [178, 210, 335, 361, 362, 826, 838, 843, 929, 942, 944], "y_noisi": 178, "idx_r": 178, "omp_cv": 178, "06": [178, 235, 271, 275, 306, 344, 433, 434, 435, 595, 596, 640, 644, 745, 746, 747, 761, 858, 928, 942, 944], "38": [178, 258, 370, 583, 680, 830, 932, 942, 973, 974, 975], "plot_omp": 178, "gbrt": [179, 370], "contract": [179, 197, 325, 351, 953], "compani": [179, 197, 363, 956], "policyhold": [179, 197, 928], "vehicl": [179, 197], "driver": [179, 197, 988], "exposur": [179, 197, 928], "car": 179, "accid": [179, 197], "noll": [179, 197], "salzmann": [179, 197], "wuthrich": [179, 197], "novemb": [179, 197, 335, 978, 979, 981], "2139": [179, 197], "ssrn": [179, 197], "3164764": [179, 197], "ch": [179, 181, 197, 291, 293], "rth": [179, 197], "41214": [179, 197], "claimnb": [179, 197], "log_scale_transform": [179, 197], "linear_model_preprocessor": 179, "passthrough_numer": [179, 197], "bonusmalu": [179, 197], "binned_numer": [179, 197], "2e5": [179, 197, 814], "vehag": [179, 197], "drivag": [179, 197], "log_scaled_numer": [179, 197], "onehot_categor": [179, 197], "vehbrand": [179, 197], "vehpow": [179, 197], "vehga": [179, 197], "93": [179, 335, 738, 747, 773, 857, 927, 932, 963, 967], "imbalanc": [179, 238, 242, 244, 312, 349, 361, 367, 654, 659, 737, 748, 752, 786, 932, 934, 940, 952], "simplist": [179, 371], "pertin": 179, "dummyregressor": [179, 197, 502, 932, 974, 976, 977, 980, 981, 983, 986, 987], "df_train": [179, 197], "df_test": [179, 197], "regressor__sample_weight": 179, "mean_absolute_error": [179, 181, 197, 932, 974, 976], "mean_poisson_devi": [179, 932, 983], "score_estim": [179, 197], "n_mask": 179, "comonli": 179, "ridge_glm": 179, "strictli": [179, 197, 273, 312, 343, 351, 361, 366, 368, 371, 459, 460, 486, 492, 495, 512, 513, 539, 542, 593, 621, 622, 646, 651, 689, 747, 750, 751, 757, 761, 772, 798, 825, 837, 841, 842, 844, 845, 849, 850, 854, 855, 884, 921, 923, 928, 932, 942, 946, 974, 984, 989], "domain": [179, 351, 353, 367, 586, 672, 673, 674, 748, 749, 754, 755, 756, 928, 953], "glm": [179, 197, 282, 599, 620, 631, 928, 973, 984], "vanilla": [179, 363, 398, 400, 411, 580], "poissonregressor": [179, 197, 282, 285, 599, 631, 928, 984, 987, 988], "poisson_glm": 179, "newton": [179, 197, 271, 561, 599, 609, 610, 620, 631, 806, 807, 928, 977, 978, 980, 984, 985, 986, 987, 988], "deep": [179, 340, 351, 377, 386, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 719, 745, 746, 747, 750, 751, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 936, 937, 952, 953, 956, 978, 984, 985, 987], "implicit": [179, 351, 370, 371, 523, 633, 634, 926, 931, 952, 982], "concis": [179, 343, 984, 986], "poisson_gbrt": 179, "prone": [179, 223, 277, 349, 361], "set_yscal": 179, "5e5": 179, "realiz": [179, 956], "priori": [179, 196, 244, 252, 273, 351, 363, 370, 539, 545, 931], "wrongli": [179, 299], "gen_even_slic": [179, 347, 889], "_mean_frequency_by_risk_group": 179, "y_true_bin": 179, "y_pred_bin": 179, "idx_sort": 179, "sl": 179, "y_true_seg": 179, "y_pred_seg": 179, "ti": [179, 223, 226, 233, 308, 324, 361, 550, 551, 586, 671, 676, 706, 745, 746, 851, 854, 857, 931, 932, 947, 974, 976, 977, 981, 983, 987, 988], "portfolio": [179, 197, 926], "riskiest": [179, 197], "safest": [179, 197, 320, 332], "irrespect": [179, 210, 244, 253, 557], "lorenz": [179, 197, 978], "summar": [179, 227, 242, 244, 313, 338, 340, 353, 370, 472, 609, 645, 657, 658, 928, 929, 932, 938], "gini": [179, 197, 217, 247, 283, 504, 505, 508, 509, 510, 511, 515, 516, 517, 857, 858, 859, 860, 921, 940, 948, 981, 982], "lorenz_curv": [179, 197], "ranked_frequ": 179, "ranked_exposur": [179, 197], "cumulated_claim": 179, "cumulated_exposur": 179, "cum_exposur": 179, "cum_claim": [179, 197], "worst": [179, 279, 335, 363, 398, 659, 679, 680, 733, 734, 737, 740, 741, 774, 932, 956, 973, 986], "occurr": [179, 279, 312, 313, 333, 338, 363, 371, 520, 521, 532, 540, 541, 568, 578, 579, 580, 581, 733, 784, 812, 934, 974, 979], "circumstanti": 179, "extractor": [179, 271, 326, 333, 351, 371, 454, 921, 973], "discrim": 179, "profil": [179, 324, 338, 341, 472, 475, 928, 956], "ideal": [179, 181, 197, 232, 235, 242, 244, 245, 320, 337, 338, 342, 343, 346, 349, 351, 361, 676, 706, 921, 931, 946, 947, 953], "meaningfulli": [179, 932], "plot_poisson_regression_non_normal_loss": 179, "monomi": 180, "vandermond": [180, 942], "x_0": [180, 608], "pseudo": [180, 340, 367, 375, 392, 403, 405, 413, 420, 421, 422, 424, 425, 426, 427, 484, 512, 513, 514, 578, 585, 590, 592, 593, 597, 598, 603, 604, 611, 612, 613, 614, 628, 642, 646, 750, 751, 759, 761, 798, 805, 841, 842, 846, 849, 850, 851, 854, 885, 886, 928, 944, 978, 987], "consecut": [180, 361, 367, 371, 395, 398, 400, 401, 403, 407, 410, 413, 488, 489, 490, 497, 553, 596, 617, 618, 619, 627, 628, 629, 745, 746, 752, 784, 785, 786, 787, 788, 806, 807, 921, 942, 967, 981], "basis_1": 180, "basis_2": 180, "infinit": [180, 221, 238, 324, 373, 573, 574, 728, 745, 867, 869, 870, 924, 931, 942, 947, 981, 983, 986, 987, 988], "malt": [180, 986, 987, 988], "londschien": [180, 986], "prepar": [180, 324, 340, 341, 344, 346, 948, 956, 981], "set_prop_cycl": 180, "teal": [180, 189, 242], "yellowgreen": [180, 182, 189, 317], "tomato": 180, "unwant": [180, 311], "oscillatori": [180, 942], "danger": [180, 367], "pft": 180, "splt": 180, "bsplines_": [180, 828], "six": [180, 200, 277, 335, 982], "refrain": [180, 338], "dec": [180, 628, 828, 853, 947], "31st": [180, 828], "advis": [180, 320, 336, 338, 363, 371, 389, 597, 603, 605, 611, 613, 623, 638, 924, 928, 934, 936, 947, 987], "x_plot_ext": 180, "y_plot_ext": 180, "plot_polynomial_interpol": [180, 824, 828], "pareto": 181, "dale": [181, 986], "mail": [181, 278, 333, 338, 342, 346, 349, 352, 950, 981, 982], "ru": 181, "glemaitre58": 181, "y_true_mean": 181, "y_normal": 181, "y_pareto": 181, "huge": [181, 184, 324, 344, 578, 976], "heavi": [181, 360, 953], "sp_version": [181, 621], "parse_vers": [181, 621], "incompat": [181, 342, 447, 922, 981, 982], "older": [181, 337, 342, 976, 983, 985], "recent": [181, 327, 336, 339, 343, 346, 351, 354, 363, 419, 489, 516, 932, 946, 956, 976, 985], "interior": [181, 621, 928, 988], "out_bounds_predict": 181, "bool_": 181, "logical_or": [181, 187, 244, 344], "hit": [181, 344], "wider": [181, 371, 862, 928], "asymmetri": [181, 311], "linger": 181, "linear_regress": [181, 249], "quantile_regress": 181, "y_pred_lr": 181, "y_pred_qr": 181, "cv_results_lr": 181, "cv_results_qr": 181, "test_neg_mean_squared_error": [181, 772], "plot_quantile_regress": 181, "robustli": [182, 362], "faulti": [182, 973], "ransacregressor": [182, 185, 196, 600, 629, 630, 928, 976, 978, 979, 980, 981, 984, 986, 987], "inlier_mask": 182, "inlier_mask_": [182, 622], "outlier_mask": 182, "line_x": [182, 196], "line_i": 182, "line_y_ransac": 182, "estimator_": [182, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 544, 545, 548, 622, 916, 988], "plot_ransac": 182, "regularis": [183, 376, 424, 426], "eventu": [183, 224, 362, 363, 372, 544, 956], "simpler": [183, 197, 299, 324, 337, 363, 368, 928, 933, 965, 978], "stronger": [183, 236, 594, 603, 609, 610, 623, 624, 625, 626, 627, 629, 638], "kornel": [183, 979], "kielczewski": [183, 979], "plusnet": 183, "plot_ridge_coeff": 183, "practis": 184, "maintain": [184, 197, 199, 235, 325, 327, 337, 341, 344, 345, 346, 349, 351, 352, 354, 363, 370, 392, 394, 818, 819, 825, 826, 829, 834, 837, 838, 840, 928, 929, 942, 952, 953, 958, 969, 988], "10x10": 184, "hilbert": [184, 815, 924, 942], "n_alpha": [184, 423, 597, 598, 601, 602, 603, 604, 605, 606, 607, 611, 612, 613, 614, 624, 626, 632, 633, 634, 635, 976], "plot_ridge_path": 184, "theilsen": 185, "lessen": [185, 609, 610, 849, 850], "theilsenregressor": [185, 196, 600, 622, 629, 928, 977, 985, 987], "x_error": 185, "y_errors_larg": 185, "x_errors_larg": 185, "deviant": [185, 938], "legend_titl": 185, "nabsolut": 185, "nto": [185, 244], "plot_robust_fit": 185, "rob": [186, 973, 974, 975, 977, 978, 979, 980, 981, 985, 988], "zinkov": [186, 973, 974, 975, 977, 978], "heldout": 186, "asgd": [186, 946], "squared_hing": [186, 307, 617, 627, 849, 856, 928], "0e4": 186, "yy_": 186, "plot_sgd_comparison": 186, "monitor": [187, 341, 351, 504, 505, 510, 511, 512, 513, 936, 976, 981, 983, 985], "_test": [187, 275, 340, 986], "ignore_warn": [187, 275, 979], "convergencewarn": [187, 194, 269, 270, 275, 347, 351, 745, 746, 981, 982, 985], "load_mnist": [187, 253], "class_0": [187, 335, 461], "class_1": [187, 335, 461], "554": [187, 195, 270], "mnist_784": [187, 195, 253, 270], "fit_and_scor": 187, "train_scor": [187, 250, 279, 307, 315, 753, 772, 773, 776, 927], "estimator_dict": 187, "0001": [187, 340, 375, 395, 398, 410, 422, 423, 429, 484, 489, 491, 498, 500, 501, 510, 511, 597, 598, 599, 600, 603, 604, 609, 610, 611, 612, 613, 614, 619, 620, 623, 625, 627, 629, 631, 638, 640, 644, 806, 807, 849, 850, 921], "flush": 187, "results_df": [187, 235, 279], "group_df": 187, "plot_sgd_early_stop": 187, "ova": [188, 617, 619, 627, 946], "ugli": [188, 256, 261, 264, 295], "plot_sgd_iri": 188, "modified_huber_loss": 189, "darkorchid": 189, "plot_sgd_loss_funct": 189, "l1_color": 190, "l2_color": 190, "elastic_net_color": 190, "1001": 190, "rho": [190, 368, 628, 928, 946, 974], "elastic_net": 190, "dpi": [190, 863, 986], "elastic_net_contour": 190, "l2_contour": 190, "l1_contour": 190, "inlin": [190, 338, 339, 948], "plot_sgd_penalti": 190, "ndenumer": 191, "plot_sgd_separating_hyperplan": 191, "no_weight": 192, "samples_weight": 192, "no_weights_handl": 192, "weights_handl": 192, "plot_sgd_weighted_sampl": 192, "sgdoneclasssvm": [193, 206, 284, 853, 938, 946, 986, 988, 989], "rc": [193, 342], "novel": [193, 259, 298, 320, 361, 921], "abnorm": [193, 206, 259, 298, 333, 443, 514, 795, 938, 981], "y_pred_train": [193, 298], "y_pred_test": [193, 259, 298], "y_pred_outli": [193, 259, 298], "n_error_train": [193, 298], "n_error_test": [193, 259, 298], "n_error_outli": [193, 259, 298], "clf_sgd": 193, "pipe_sgd": 193, "y_pred_train_sgd": 193, "y_pred_test_sgd": 193, "y_pred_outliers_sgd": 193, "n_error_train_sgd": 193, "n_error_test_sgd": 193, "n_error_outliers_sgd": 193, "z_sgd": 193, "pubu": [193, 210, 259, 298], "darkr": [193, 259, 298], "palevioletr": [193, 259, 298], "b1": [193, 259, 298], "b2": [193, 259, 298], "blueviolet": [193, 259, 298], "plot_sgdocsvm_vs_ocsvm": 193, "newgroups20": 194, "trim": [194, 789, 790], "arthur": [194, 195, 363, 398, 411, 978, 979, 980, 981, 982, 985, 987], "mensch": [194, 195, 978, 979, 980, 981], "timeit": [194, 224, 344], "default_tim": [194, 224], "20newsgroup": [194, 331, 973], "model_param": 194, "epoch": [194, 351, 487, 617, 618, 619, 627, 628, 629, 806, 807, 946, 980, 981, 986], "this_max_it": 194, "train_tim": [194, 212, 311, 312], "ndataset": [194, 275], "run_tim": [194, 195], "plot_sparse_logistic_regression_20newsgroup": 194, "l1_plot": 195, "plot_sparse_logistic_regression_mnist": 195, "subpopul": [196, 630, 928], "residual_threshold": [196, 622, 928, 986], "remedi": 196, "max_subpopul": [196, 630, 987], "lose": [196, 313, 333, 351, 366, 371, 373, 497, 885, 886, 922, 928, 967], "florian": [196, 956, 973, 977, 979, 983], "wilhelm": [196, 977, 979, 983], "indigo": 196, "plot_theilsen": 196, "motor": 197, "parti": [197, 325, 337, 349, 749, 756, 900, 950, 973, 984], "liabil": 197, "functool": 197, "mean_tweedie_devi": [197, 932, 983], "load_mtpl2": 197, "678013": 197, "fremtpl2freq": 197, "df_freq": 197, "idpol": 197, "fremtpl2sev": 197, "41215": 197, "df_sev": 197, "claimamount": 197, "fillna": 197, "unquot": 197, "field": [197, 335, 360, 363, 364, 371, 449, 452, 568, 928, 930, 939, 947, 952, 955, 967, 974], "column_nam": 197, "plot_obs_pr": 197, "y_label": 197, "fill_legend": 197, "df_": 197, "tweedie_pow": 197, "d\u00b2": 197, "subset_label": 197, "score_label": [197, 241], "est_freq": 197, "est_sev": 197, "unstack": [197, 238], "fremtpl2": 197, "unreason": [197, 367], "exception": 197, "200000": 197, "column_tran": [197, 364], "purepremium": 197, "indirectli": 197, "avgclaimamount": 197, "fmax": 197, "option_context": 197, "max_column": 197, "seemingli": [197, 320, 349], "upon": [197, 204, 266, 333, 338, 349, 351, 357, 512, 513, 578, 581, 622, 739, 745, 746, 789, 790, 921, 928, 948, 958, 967, 987], "glm_freq": 197, "surprisingli": [197, 333, 371], "bonu": [197, 338, 962, 967], "malu": 197, "younger": 197, "infti": [197, 373, 570, 928, 942, 980], "gammaregressor": [197, 282, 285, 631, 928, 984, 987, 988], "mask_test": 197, "glm_sev": 197, "dummy_sev": 197, "slighli": 197, "avgclaim": 197, "nbclaim": 197, "apriori": 197, "regardless": [197, 236, 237, 238, 325, 338, 363, 486, 609, 655, 666, 932, 944, 981, 988], "glm_pure_premium": 197, "999": [197, 235, 342, 370, 668, 806, 807], "scores_product_model": 197, "scores_glm_pure_premium": 197, "expand_frame_repr": 197, "riski": 197, "operation": [197, 956], "develop": [197, 233, 235, 281, 311, 324, 327, 333, 337, 338, 344, 349, 351, 353, 357, 360, 362, 365, 366, 370, 371, 385, 444, 747, 928, 935, 948, 950, 952, 953, 955, 956, 965, 973, 981, 982, 983, 986, 988, 989], "ranked_pure_premium": 197, "cumulated_claim_amount": 197, "cumulated_sampl": 197, "y_pred_product": 197, "y_pred_tot": 197, "ordered_sampl": 197, "plot_tweedie_regression_insurance_claim": 197, "md": [199, 200, 201, 202, 342, 639, 643, 645, 968, 969, 973, 985, 988], "seek": [199, 201, 203, 337, 338, 349, 352, 459, 460, 929, 959, 961], "ticker": [199, 201, 204, 253], "s_point": 199, "s_color": 199, "make_s_curv": [199, 204], "plot_3d": 199, "points_color": 199, "subplot_kw": [199, 257], "set_major_loc": [199, 258], "multipleloc": [199, 258], "add_2d_scatt": 199, "set_major_formatt": [199, 201, 204, 253, 258], "nullformatt": [199, 201, 204, 253], "lle": [199, 200, 201, 203, 481, 640, 644, 929, 985], "thought": [199, 258, 351, 363, 929, 933], "analys": [199, 319, 368, 750, 751, 929, 952, 956], "lle_standard": 199, "s_standard": 199, "lle_ltsa": 199, "ltsa": [199, 200, 201, 640, 644, 929], "s_ltsa": 199, "lle_hessian": 199, "hessian": [199, 200, 201, 370, 599, 609, 610, 620, 631, 640, 644, 928, 936, 968, 969, 988], "s_hessian": 199, "lle_mod": 199, "s_mod": 199, "lle_method": 199, "tangent": [199, 640, 644, 930, 968, 969], "eigenmap": [199, 640, 642, 644, 646, 968, 969, 974], "isometr": [199, 639, 641, 642, 643, 929], "geodes": [199, 639, 929], "s_isomap": 199, "md_scale": 199, "normalized_stress": [199, 200, 201, 202, 641, 645, 929, 988], "s_scale": 199, "laplacian": [199, 330, 360, 392, 403, 413, 571, 590, 594, 642, 646, 715, 716, 724, 845, 928, 929, 945, 969, 974, 979], "s_spectral": 199, "t_sne": [199, 981], "s_t_sne": 199, "plot_compare_method": 199, "offsetbox": 200, "plot_embed": 200, "425": [200, 566], "shown_imag": 200, "someth": [200, 338, 340, 341, 342, 346, 371, 932, 982, 983, 984, 985, 986, 987, 988, 989], "4e": 200, "imagebox": 200, "annotationbbox": 200, "offsetimag": 200, "neighborhoodcomponentsanalysi": [200, 261, 262, 263, 935, 982, 987], "random_project": [200, 210, 327, 944, 949, 974, 979, 989], "sparserandomproject": [200, 210, 841, 944, 974, 979, 987, 989], "embeed": 200, "n_iter_without_progress": [200, 643, 978, 979], "nca": [200, 261, 262, 263, 798, 935], "plot_lle_digit": 200, "pole": 201, "thin": [201, 571], "earth": [201, 714, 952], "55": [201, 343, 363, 367, 442, 548, 747, 753, 761, 773, 932, 973], "251": [201, 335], "sphere_data": 201, "trans_data": 201, "2g": [201, 204, 648, 984], "252": [201, 335, 485, 825, 837], "257": 201, "258": 201, "se": [201, 335, 354], "plot_manifold_spher": 201, "euclidean_dist": [202, 210, 340, 401, 408, 639, 712, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 973, 978, 981, 982], "finfo": [202, 429, 557, 601, 602, 605, 606, 607, 633, 634, 691, 988], "x_true": 202, "dissimilar": [202, 351, 360, 403, 641, 645, 929, 979, 989], "embedding_": [202, 351, 639, 640, 641, 642, 643], "nmd": 202, "npo": 202, "plot_md": 202, "sr_point": 203, "sr_color": 203, "ambient": 203, "66": [203, 335, 363, 483, 583, 663, 733, 734, 743, 828, 932, 944], "text2d": 203, "unrol": 203, "unnecessarili": [203, 980, 983], "clump": 203, "sr_lle": 203, "sr_err": 203, "locally_linear_embed": [203, 929], "sr_tsne": 203, "stretch": [203, 225], "byproduct": 203, "ultim": [203, 339], "sh_point": 203, "sh_color": 203, "topologi": [203, 204], "sh_lle": 203, "sh_err": 203, "sh_tsne": 203, "plot_swissrol": 203, "tendenc": [204, 928, 929, 931, 934, 937], "clearer": [204, 947], "distil": 204, "pub": [204, 787, 844], "misread": 204, "narin": [204, 980, 981], "kokhlikyan": [204, 980, 981], "plot_t_sne_perplex": 204, "cope": [206, 326, 333, 928], "multimod": 206, "inli": [206, 928, 938], "unimod": [206, 425], "localoutlierfactor": [206, 215, 259, 260, 285, 351, 514, 853, 938, 980, 981, 983, 987, 988, 989], "modal": [206, 425, 888], "hypercub": [206, 466], "decent": [206, 234, 333, 934], "handpick": 206, "absenc": [206, 238, 351, 663, 812, 931, 932], "negative_linestyl": 206, "outliers_fract": 206, "n_inlier": 206, "anomaly_algorithm": 206, "blobs_param": 206, "plot_anomaly_comparison": 206, "blood": [207, 335, 965], "transfus": 207, "1464": 207, "donat": 207, "confust": 207, "cm_displai": 207, "y_score": [207, 242, 244, 351, 433, 434, 435, 658, 671, 676, 677, 689, 690, 706, 732, 738, 739, 742, 747, 750, 751, 761, 809, 932, 979, 987], "pos_label": [207, 215, 351, 390, 391, 649, 651, 653, 657, 658, 660, 677, 679, 680, 688, 732, 733, 734, 737, 739, 816, 833, 932, 981, 985, 987], "roc_displai": 207, "previs": 207, "precision_recall_curv": [207, 242, 651, 657, 658, 677, 932, 974, 975, 979, 986, 987, 989], "pr_displai": 207, "easlii": 207, "plot_display_object_visu": 207, "summaris": [208, 282], "composit": [208, 282, 327, 330, 367, 609, 738, 922, 928, 941, 969, 974], "num_proc": [208, 282], "cat_proc": [208, 282], "feat1": [208, 282, 371], "feat3": [208, 282, 371], "feat0": [208, 282], "feat2": [208, 282, 371], "plot_estimator_represent": 208, "isotonicregress": [209, 923, 974, 975, 976, 977, 979, 981, 982, 983, 985, 987, 988, 989], "ir": [209, 368, 541, 676, 706, 784, 788, 930, 932], "out_of_bound": [209, 586], "y_": [209, 222, 226, 227, 265, 340, 366, 368, 588, 599, 620, 631, 679, 680, 688, 733, 734, 737, 928, 932, 979], "x_thresholds_": [209, 586, 985], "y_thresholds_": [209, 586, 985], "plot_isotonic_regress": 209, "lemma": [210, 330, 362, 485, 492, 500, 841, 842, 843, 926, 969, 976], "johnson_lindenstrauss_min_dim": [210, 944, 974], "achliopta": [210, 842, 843, 944], "_compon": [210, 487], "geq": [210, 361, 368, 370, 928, 932, 942, 946, 947], "_sampl": [210, 368, 489, 491, 498], "admiss": [210, 325], "eps_rang": 210, "min_n_compon": 210, "nn_sampl": [210, 247], "semilogi": 210, "nn_compon": [210, 211], "100k": 210, "n_components_rang": 210, "rp": 210, "projected_data": 210, "n_byte": 210, "projected_dist": 210, "min_dist": 210, "max_dist": 210, "hexbin": 210, "gridsiz": 210, "jl": [210, 842], "56": [210, 344, 664, 685, 932, 942, 973], "436": 210, "plot_johnson_lindenstrauss_bound": 210, "rbfsampler": [211, 590, 591, 593, 924, 958, 977, 987, 988], "mont": [211, 373, 562, 592, 593, 924, 937], "fourier": [211, 362, 589, 590, 591, 592, 593, 708, 709, 924], "acceler": [211, 286, 324, 349, 419, 643, 847, 929, 952, 956, 982, 986, 988], "data_train": [211, 236, 311], "targets_train": 211, "data_test": [211, 236, 311], "targets_test": 211, "kernel_svm": 211, "linear_svm": 211, "feature_map_fouri": 211, "feature_map_nystroem": [211, 590], "fourier_approx_svm": 211, "feature_map": [211, 273], "nystroem_approx_svm": 211, "kernel_svm_tim": 211, "kernel_svm_scor": 211, "linear_svm_tim": 211, "linear_svm_scor": 211, "fourier_scor": 211, "nystroem_scor": 211, "fourier_tim": 211, "nystroem_tim": 211, "feature_map__n_compon": 211, "timescal": 211, "ly": [211, 797, 799, 800, 801, 977], "flat_grid": 211, "lv_ep": 211, "tab10": [211, 226], "plot_kernel_approxim": 211, "krr": [212, 373, 594, 925], "insensit": [212, 594, 627, 629, 738, 850, 925, 946, 947, 973], "fifth": [212, 925, 958], "100000": [212, 221, 338, 564, 565, 566, 570, 571, 573, 574, 576, 838, 925, 965, 967], "kr": [212, 235, 987], "svr_fit": 212, "kr_fit": 212, "sv_ratio": 212, "support_": [212, 306, 420, 425, 544, 545, 553, 851, 852, 853, 854, 855, 947], "y_svr": 212, "svr_predict": 212, "y_kr": 212, "kr_predict": 212, "sv_ind": 212, "arithmet": [212, 344, 346, 363, 502, 599, 620, 631, 655, 668, 686, 687, 707, 743, 932, 981], "test_tim": [212, 311], "train_test_s": 212, "learningcurvedisplai": [212, 237, 286, 927, 988], "negate_scor": [212, 753], "std_display_styl": [212, 237, 753], "get_legend_handles_label": [212, 237, 242], "plot_kernel_ridge_regress": 212, "theta_c": [213, 474], "reject": [213, 351, 352, 474, 622, 677, 869, 870, 928, 932, 981], "never": [213, 320, 338, 347, 349, 357, 363, 364, 366, 367, 401, 408, 474, 497, 506, 507, 508, 515, 809, 810, 924, 983, 986], "likewis": [213, 363, 474], "surround": [213, 338, 795, 938], "cca": [213, 366, 434, 436, 977, 981, 982, 983, 985, 987], "onevsrestclassifi": [213, 242, 244, 252, 361, 777, 779, 849, 958, 974, 975, 977, 979, 980, 986, 987], "metaclassifi": 213, "min_x": 213, "max_x": 213, "plot_subfigur": 213, "min_i": 213, "zero_class": 213, "one_class": 213, "160": [213, 921, 965], "nfor": 213, "plot_multilabel": 213, "extratreesregressor": [214, 370, 508, 516, 517, 859, 860, 976, 979, 981, 982, 983, 986, 987, 988, 989], "n_face": 214, "face_id": 214, "n_pixel": [214, 233], "nn": [214, 371, 646, 965], "y_test_predict": 214, "true_fac": 214, "completed_fac": 214, "plot_multioutput_face_complet": 214, "benchmark": [215, 253, 283, 312, 313, 324, 331, 333, 338, 349, 354, 356, 361, 419, 466, 847], "iforest": 215, "pharuj": 215, "rajborirug": 215, "ra": 215, "kmitl": 215, "ac": [215, 481, 615, 636, 637, 928, 945, 967], "th": [215, 284, 319, 350, 367, 370, 378, 393, 397, 402, 404, 410, 414, 423, 508, 509, 510, 511, 512, 513, 515, 516, 517, 544, 545, 583, 599, 600, 620, 622, 631, 647, 669, 730, 768, 830, 874, 922, 928, 932, 936, 939, 946, 947, 988], "preprocess_dataset": 215, "fetch_kddcup99": [215, 333, 980, 981, 982, 985, 986], "labelbinar": [215, 244, 351, 691, 778, 813, 822, 833, 933, 958, 976, 977, 978, 982, 987], "dataset_nam": [215, 253], "smtp": [215, 333, 443], "sa": [215, 333, 443], "percent10": [215, 443], "lb": [215, 816, 943], "forestcov": 215, "glass": [215, 333], "wdbc": [215, 335], "cardiotocographi": 215, "tablewar": 215, "x_mal": 215, "y_mal": 215, "x_ben": 215, "y_ben": 215, "39": [215, 333, 335, 336, 342, 363, 371, 446, 858], "x_mal2": 215, "y_mal2": 215, "compute_predict": 215, "model_nam": [215, 252], "negative_outlier_factor_": [215, 260, 795, 938], "datasets_nam": 215, "models_nam": 215, "ceil": [215, 508, 509, 510, 511, 514, 515, 516, 517, 545, 622, 750, 751, 857, 858, 859, 860, 946], "plot_outlier_detection_bench": 215, "recalcul": [216, 218, 363, 970, 973], "mass": [216, 335, 745, 928, 939], "tree_disp": 216, "mlp_disp": 216, "plot_partial_dependence_visualization_api": 216, "set_config": [217, 219, 282, 324, 325, 364, 419, 577, 982, 984, 987], "deactiv": [217, 332, 336, 339, 344, 354, 364, 750, 751, 987], "standard_scal": 217, "numeric_preprocessor": 217, "imputation_mean": 217, "categorical_preprocessor": [217, 279], "imputation_const": 217, "onehot": [217, 274, 275, 364, 814, 942], "gender": [217, 822, 942], "classifier__n_estim": 217, "classifier__max_featur": 217, "classifier__max_depth": 217, "classifier__criterion": 217, "plot_pipeline_displai": 217, "svc_disp": [218, 281, 970], "rfc_disp": [218, 281, 970], "plot_roc_curve_visualization_api": 218, "transform_output": [219, 419, 847, 988], "slep018": [219, 340, 988], "x_test_scal": 219, "scaler2": 219, "x_test_np": 219, "x_test_df": 219, "feature_names_in_": [219, 284, 351, 383, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 561, 562, 578, 579, 580, 581, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 745, 746, 747, 750, 751, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 986, 987, 988, 989], "num_pip": 219, "num_col": 219, "log_reg": [219, 285], "reset": [219, 320, 346, 485, 627, 628, 629, 789, 790, 818, 819, 829, 975], "config_context": [219, 324, 325, 359, 577, 847, 980, 986], "plot_set_output": 219, "bayesiangaussianmixtur": [221, 222, 227, 746, 979, 981, 982, 986, 987], "weight_concentration_prior_typ": [221, 227, 745, 931, 979], "dirichlet_distribut": [221, 745, 931, 979], "dirichlet_process": [221, 227, 745, 931, 979], "weight_concentration_prior": [221, 227, 745, 931], "finit": [221, 227, 324, 333, 351, 419, 489, 502, 533, 557, 560, 561, 562, 609, 678, 728, 735, 745, 770, 847, 867, 869, 870, 928, 931, 932, 956, 958, 965, 980, 981, 985, 987, 988], "unnecessari": [221, 343, 395, 597, 598, 603, 604, 611, 612, 613, 614, 632, 635, 656, 935, 942, 953, 956, 976, 978, 983, 984, 986], "covar": [221, 222, 227], "eig_val": 221, "eig_vec": 221, "unit_eig_vec": 221, "arctan2": [221, 223, 226], "56b4e9": 221, "plot_titl": 221, "weights_": [221, 745, 746, 987], "covariances_": [221, 222, 223, 226, 227, 745, 746, 980], "get_xaxi": [221, 263, 273], "set_tick_param": 221, "007": [221, 253], "labelleft": 221, "0072b2": 221, "f0e442": 221, "d55e00": 221, "mean_precision_prior": [221, 227, 745], "nprior": 221, "gamma_0": [221, 227], "reg_covar": [221, 745, 746], "init_param": [221, 224, 227, 745, 746], "concentrations_prior": 221, "plot_concentration_prior": 221, "color_it": [222, 226, 227], "dp": [222, 227], "shouldn": [222, 227, 338], "em": [222, 223, 227, 395, 398, 410, 487, 745, 746, 931, 987], "dpgmm": [222, 227, 973, 977, 979], "plot_gmm": 222, "ronweiss": 223, "make_ellips": 223, "datalim": 223, "skf": [223, 367, 766], "train_index": [223, 291, 367, 748, 749, 752, 754, 755, 756, 757, 760, 762, 763, 764, 765, 766, 767, 768], "test_index": [223, 291, 367, 748, 749, 752, 754, 755, 756, 757, 760, 762, 763, 764, 765, 766, 767, 768], "cov_typ": 223, "means_init": [223, 224, 746], "y_train_pr": 223, "train_accuraci": 223, "y_test_pr": 223, "test_accuraci": [223, 236], "plot_gmm_covari": 223, "random_from_data": [224, 745, 746, 931], "diamond": 224, "colour": [224, 335, 371, 538, 933], "gordon": [224, 979, 983, 985, 987], "walsh": [224, 985, 987], "extmath": [224, 311, 347, 404, 979, 980, 983, 988], "row_norm": 224, "_samples_gener": 224, "timer": [224, 344], "x_squared_norm": [224, 411], "get_initial_mean": 224, "times_init": 224, "relative_tim": 224, "ini": 224, "init_tim": 224, "2fx": 224, "plot_gmm_init": 224, "shifted_gaussian": 225, "stretched_gaussian": 225, "score_sampl": [225, 258, 259, 260, 266, 351, 369, 420, 483, 492, 514, 628, 745, 746, 747, 750, 751, 761, 794, 795, 805, 809, 853, 938, 976, 981, 983, 985], "plot_gmm_pdf": 225, "candid": [226, 233, 243, 283, 326, 338, 342, 363, 370, 399, 401, 747, 750, 751, 759, 761, 928, 935, 948, 979], "component_1": 226, "component_2": 226, "best_parameters_": 226, "gmm_bic_scor": 226, "callabl": [226, 239, 351, 367, 371, 372, 374, 375, 393, 395, 396, 397, 398, 400, 401, 403, 408, 410, 411, 415, 416, 417, 418, 482, 484, 486, 488, 490, 496, 497, 508, 509, 510, 511, 512, 513, 515, 516, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 561, 562, 571, 579, 585, 590, 594, 610, 617, 622, 624, 626, 639, 642, 643, 647, 662, 670, 682, 692, 721, 724, 728, 729, 730, 731, 740, 741, 747, 750, 751, 753, 761, 771, 772, 773, 774, 776, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 813, 822, 844, 845, 851, 852, 853, 854, 855, 893, 899, 902, 916, 921, 932, 942, 973, 977, 980, 981, 982, 983, 985, 987, 989], "param_n_compon": 226, "param_covariance_typ": 226, "renam": [226, 236, 338, 342, 363, 393, 397, 398, 410, 422, 423, 429, 487, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 822, 973, 974, 975, 979, 980, 981, 982, 984, 985, 986, 987, 988], "catplot": 226, "hue": [226, 235, 256, 278, 335], "eigenvalu": [226, 360, 363, 365, 403, 413, 420, 421, 422, 423, 424, 425, 426, 427, 486, 492, 500, 624, 639, 640, 642, 644, 646, 815, 929, 942, 975, 979, 982, 983, 984, 985], "plot_gmm_select": 226, "loos": [227, 232, 947, 981], "liberti": 227, "judgment": [227, 932], "panel": [227, 258, 273, 369, 952], "primarili": [227, 240, 338, 351, 359, 363, 956, 982, 983], "covariance_prior": [227, 745], "plot_gmm_sin": 227, "mislabel": [229, 370, 934], "imbal": [229, 238, 367, 658, 679, 680, 688, 733, 734, 737, 738, 932], "misclassifi": [229, 311, 947], "life": [229, 346, 929], "set_printopt": 229, "titles_opt": 229, "plot_confusion_matrix": [229, 281, 983, 984, 985, 986], "shufflesplit": [230, 237, 307, 367, 749, 755, 757, 767, 775, 962, 973, 974, 976, 978, 979], "groupshufflesplit": [230, 367, 962, 979], "groupkfold": [230, 240, 367, 545, 747, 750, 751, 752, 753, 754, 755, 756, 761, 765, 770, 771, 772, 773, 776, 962, 979, 986], "stratifiedshufflesplit": [230, 299, 367, 962, 973, 974, 979, 980, 986], "stratifiedgroupkfold": [230, 986], "1338": 230, "cmap_data": 230, "cmap_cv": 230, "coolwarm": [230, 296], "n_point": [230, 789, 790], "percentiles_class": 230, "perc": 230, "group_prior": 230, "visualize_group": 230, "yticklabel": [230, 311], "ngroup": 230, "nclass": 230, "plot_cv_indic": 230, "tr": [230, 335, 342, 363, 365, 420, 421, 422, 423, 424, 425, 426, 427, 787], "this_cv": 230, "plot_cv_predict": 231, "fnr": [232, 649, 677], "det_curv": [232, 649, 732, 739, 932, 985, 986], "visuali": 232, "commonli": [232, 331, 351, 363, 364, 373, 565, 708, 709, 745, 778, 821, 929, 930, 932, 933, 935, 989], "detcurvedisplai": [232, 284, 677, 985, 986], "ax_roc": 232, "ax_det": 232, "feedback": [232, 337, 338, 339, 352, 952, 981], "plot_det": 232, "n_imag": 233, "print_datafram": 233, "filtered_cv_result": 233, "mean_precis": 233, "std_precis": 233, "mean_recal": 233, "std_recal": 233, "mean_test_precis": [233, 239], "std_test_precis": 233, "mean_test_recal": 233, "std_test_recal": 233, "03f": 233, "refit_strategi": 233, "best_index": [233, 239], "precision_threshold": 233, "high_precision_cv_result": 233, "mean_score_tim": [233, 236, 747, 761], "rank_test_recal": 233, "rank_test_precis": [233, 239], "best_recall_std": 233, "best_recal": 233, "best_recall_threshold": 233, "high_recall_cv_result": 233, "fastest_top_recall_high_precision_index": 233, "idxmin": 233, "plot_grid_search_digit": 233, "minimis": [234, 363, 367, 609, 610, 948], "88": [234, 315, 333, 335, 365, 424, 809, 963, 973], "219": 234, "260": [234, 986], "york": [234, 738, 745, 922, 932, 944], "usa": [234, 333, 846, 922, 929, 944, 945], "wenhao": [234, 981, 982], "zhang": [234, 363, 394, 615, 630, 636, 637, 640, 644, 708, 709, 928, 929, 930, 934, 946, 977, 978, 980, 981, 982, 983, 985], "wenhaoz": 234, "ucla": [234, 928], "lower_bound": 234, "best_score_idx": 234, "best_low_complex": 234, "fewest": [234, 578], "candidate_idx": 234, "param_reduce_dim__n_compon": 234, "best_index_": [234, 239, 747, 750, 751, 761], "plot_grid_search_refit_cal": 234, "moon": [235, 269, 275, 473], "moder": [235, 338, 373, 405, 938], "352": [235, 344], "repeatedstratifiedkfold": [235, 367, 762, 766, 980], "repetit": [235, 343, 367, 762, 763, 940, 987], "rank_test_scor": [235, 243, 747, 761, 979], "rename_axi": 235, "certainti": [235, 340, 692, 932], "repreat": 235, "model_scor": [235, 252], "regex": [235, 313, 415, 417], "_test_scor": [235, 423, 545, 986], "lineplot": 235, "labelpad": 235, "nadeau": [235, 981], "bengio": [235, 806, 807, 921, 945], "framework": [235, 324, 340, 349, 351, 357, 363, 588, 639, 745, 928, 929, 936, 950, 953, 956, 973, 979], "diebold": 235, "mariano": 235, "proven": [235, 926, 930, 956], "replic": [235, 337, 340], "cdot": [235, 360, 363, 368, 369, 373, 565, 566, 570, 573, 574, 815, 924, 926, 932, 936, 942], "sum_": [235, 244, 307, 360, 361, 363, 368, 369, 370, 489, 491, 498, 647, 705, 926, 928, 929, 932, 934, 936, 937, 939, 940, 942, 946, 947, 948], "ij": [235, 263, 360, 363, 368, 489, 491, 498, 597, 598, 603, 604, 611, 612, 613, 614, 632, 635, 928, 929, 932, 934, 937, 947], "corrected_std": 235, "crossvalid": [235, 249], "corrected_var": 235, "ddof": [235, 829, 840], "compute_corrected_ttest": 235, "t_stat": 235, "p_val": 235, "model_1_scor": 235, "model_2_scor": 235, "ncorrect": 235, "uncorrect": [235, 546, 549], "t_stat_uncorrect": 235, "p_val_uncorrect": 235, "convent": [235, 327, 338, 340, 341, 342, 344, 351, 381, 382, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 420, 421, 422, 423, 424, 425, 426, 427, 459, 460, 482, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 498, 514, 517, 520, 521, 532, 533, 534, 539, 540, 542, 578, 579, 580, 581, 628, 639, 640, 641, 642, 650, 669, 745, 746, 777, 778, 793, 795, 797, 801, 813, 821, 824, 825, 827, 841, 842, 853, 880, 881, 932, 959, 973, 980, 981, 984, 986, 987], "belief": [235, 805, 937], "benavoli": 235, "colleagu": 235, "conjug": [235, 403, 413, 623, 625, 638, 646, 928], "overlin": [235, 360], "t_post": 235, "ppf": 235, "infin": [235, 492, 633, 634, 663, 770, 856, 868, 935], "minu": [235, 710, 932], "better_prob": 235, "cdf": 235, "essenti": [235, 286, 336, 340, 363, 367, 368, 460, 924, 932, 935, 953, 956, 981], "rope": 235, "rope_interv": 235, "rope_prob": 235, "x_rope": 235, "uncertain": [235, 289, 337], "credibl": 235, "cred_interv": 235, "cred_int_df": 235, "000977": 235, "019023": 235, "005422": 235, "025422": 235, "016445": 235, "036445": 235, "bonferroni": 235, "n_comparison": 235, "pairwise_t_test": 235, "model_i": 235, "model_k": 235, "model_i_scor": 235, "model_k_scor": 235, "pairwise_comp_df": 235, "model_1": 235, "model_2": 235, "2_poli": 235, "3_poli": 235, "pairwise_bayesian": 235, "worse_prob": 235, "pairwise_bayesian_df": 235, "dietterich": [235, 779, 933], "1998": [235, 333, 335, 368, 370, 506, 507, 779, 784, 815, 933, 934, 936, 942, 946], "bouckaert": 235, "frank": [235, 780, 933, 978, 982, 983], "pacif": 235, "asia": [235, 942], "confer": [235, 333, 363, 368, 374, 391, 396, 401, 462, 486, 514, 647, 659, 676, 706, 805, 806, 807, 932, 938, 944, 948], "discoveri": [235, 333, 344, 347, 363, 370, 372, 374, 396, 462, 506, 507, 514, 543, 546, 547, 549, 550, 551, 557, 671, 690, 733, 932, 944, 956, 987, 988], "corani": 235, "dem\u0161ar": 235, "zaffalon": 235, "accompani": [235, 981], "1995": [235, 335, 361, 370, 504, 505, 779, 846, 933], "144": [235, 344, 973], "plot_grid_search_stat": 235, "loader": [236, 292, 311, 331, 332, 333, 449, 450, 459, 952, 953, 967, 973, 978, 980, 981, 984], "fetch20newsgroup": 236, "complementnb": [236, 311, 784, 785, 787, 788, 934, 981, 985, 986, 988], "vect__": 236, "clf__": 236, "parameter_grid": 236, "vect__max_df": 236, "vect__min_df": 236, "vect__ngram_rang": [236, 967], "unigram": [236, 333, 371, 539, 540, 542, 980], "bigram": [236, 371, 539, 540, 542, 967], "vect__norm": 236, "clf__alpha": [236, 967], "exhaust": [236, 281, 282, 283, 284, 285, 286, 324, 335, 343, 350, 358, 363, 747, 750, 751, 761, 839, 840, 842, 928, 967, 969], "parallelis": [236, 419, 847, 980], "random_search": [236, 243], "best_paramet": 236, "get_param": [236, 341, 351, 373, 377, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 745, 746, 747, 750, 751, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 921, 983, 984, 985, 987, 988], "param_nam": [236, 250, 307, 776, 927, 967], "ambigu": [236, 343, 371, 523, 663, 886, 935, 982, 984, 986], "shorten_param": 236, "plotli": [236, 338, 354, 356], "cursor": 236, "px": 236, "error_x": 236, "std_score_tim": [236, 747, 761], "error_i": 236, "hover_data": 236, "update_layout": 236, "xanchor": 236, "yanchor": 236, "autom": [236, 342, 354, 643, 921, 928, 929, 932, 952, 956], "parallel_coordin": 236, "understood": [236, 338, 363, 964], "column_result": 236, "transform_func": 236, "fromkei": [236, 864], "ngram_rang": [236, 292, 371, 539, 540, 542], "color_continuous_scal": 236, "viridis_r": 236, "slide": [236, 595, 928, 951, 952], "intersect": [236, 296, 360, 363, 688], "undo": [236, 819, 977], "plot_grid_search_text_feature_extract": 236, "depict": [237, 370, 931], "score_typ": [237, 753], "ax_idx": 237, "resort": [237, 333, 506, 983], "learning_curv": [237, 286, 753, 927, 976, 979, 980, 981, 982, 983, 985, 987, 988], "return_tim": [237, 773, 983], "test_scores_nb": 237, "fit_times_nb": 237, "score_times_nb": 237, "test_scores_svm": 237, "fit_times_svm": 237, "score_times_svm": 237, "score_tim": [237, 367, 772, 773], "rapidli": [237, 947, 956, 961], "inflect": 237, "plot_learning_curv": 237, "class_likelihood_ratio": [238, 932, 988], "medicin": [238, 663, 932], "medic": [238, 367, 663, 928, 956], "truli": [238, 242, 326, 663, 932], "odd": [238, 370, 465, 663, 932, 980, 981], "suppos": [238, 288, 324, 325, 340, 344, 365, 370, 371, 372, 508, 512, 515, 609, 610, 617, 619, 625, 626, 627, 692, 795, 849, 851, 854, 857, 859, 875, 936, 982, 984], "physiolog": [238, 335, 965], "hopefulli": [238, 346, 973], "indirect": [238, 339, 351], "bio": 238, "minor": [238, 242, 333, 341, 352, 447, 932, 973, 975, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "diagnos": [238, 335, 346, 353, 364], "diagnosi": [238, 335, 796], "pos_lr": 238, "neg_lr": 238, "raise_warn": [238, 663, 918], "positive_likelihood_ratio": [238, 663], "negative_likelihood_ratio": [238, 663], "extract_scor": 238, "test_positive_likelihood_ratio": 238, "test_negative_likelihood_ratio": 238, "dummyclassifi": [238, 503, 932, 974, 976, 977, 978, 980, 981, 982, 983], "compat": [238, 253, 282, 332, 341, 347, 348, 349, 351, 354, 371, 414, 420, 459, 517, 528, 536, 537, 540, 554, 565, 566, 569, 570, 571, 573, 574, 583, 584, 585, 609, 610, 624, 626, 724, 728, 748, 749, 752, 754, 755, 756, 757, 760, 762, 763, 764, 765, 766, 767, 768, 793, 794, 814, 822, 823, 861, 862, 865, 895, 929, 932, 935, 937, 952, 953, 956, 969, 973, 976, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989], "diagnost": [238, 331, 351, 451, 663, 771, 772, 932, 952, 953, 969], "most_frequ": [238, 502, 578, 581, 799, 922, 932, 981, 983, 985], "undefin": [238, 351, 663, 679, 688, 691, 733, 901, 932, 981, 985, 989], "stand": [238, 313, 342, 349, 368, 482, 488, 496, 497, 547, 560, 629, 656, 668, 686, 687, 707, 736, 738, 743, 931, 932, 938], "lr_base": 238, "pos_lr_bas": 238, "pos_lr_base_std": 238, "neg_lr_bas": 238, "neg_lr_base_std": 238, "plot_indic": 238, "scoring_on_bootstrap": 238, "n_bootstrap": [238, 974], "results_for_preval": 238, "bootstrap_indic": 238, "default_rng": 238, "band": [238, 275, 942], "plot_likelihood_ratio": 238, "scorer_nam": [239, 747, 761], "8000": 239, "predefin": [239, 760, 921, 935, 962, 988], "403": 239, "return_train_scor": [239, 279, 367, 747, 750, 751, 761, 772, 979, 980, 982], "402": 239, "73": [239, 350, 747, 761, 795, 858, 942, 963, 973, 975], "maskedarrai": [239, 979], "param_min_samples_split": 239, "sample_score_mean": 239, "sample_score_std": 239, "std_": [239, 978], "rank_test_": 239, "best_scor": 239, "mean_test_": 239, "005": [239, 258, 273, 344], "plot_multi_metric_evalu": 239, "cawlei": [240, 932], "talbot": 240, "mach": [240, 361, 367, 544, 545], "2079": 240, "2107": 240, "num_trial": 240, "x_iri": [240, 966], "y_iri": [240, 966], "p_grid": 240, "non_nested_scor": 240, "nested_scor": 240, "leaveoneout": [240, 367, 962], "leaveonegroupout": [240, 367, 748, 755, 756, 962, 979], "inner_cv": 240, "outer_cv": 240, "non_nest": 240, "score_differ": 240, "211": [240, 291, 825, 837], "non_nested_scores_lin": 240, "nested_lin": 240, "difference_plot": 240, "plot_nested_cross_validation_iri": 240, "permutation_test_scor": [241, 367, 973, 980, 985], "plant": [241, 244, 245, 331, 932, 969], "uncorrel": [241, 334, 479, 485, 492, 932, 965], "n_uncorrelated_featur": 241, "x_rand": 241, "undergo": 241, "score_iri": 241, "perm_scores_iri": 241, "pvalue_iri": 241, "n_permut": [241, 367, 774], "score_rand": 241, "perm_scores_rand": 241, "pvalue_rand": 241, "evid": [241, 311, 346, 363, 367, 368, 370, 595, 745, 931], "ndata": 241, "destroi": [241, 371, 743, 818, 942], "ojala": [241, 367, 774], "garriga": [241, 367, 774], "plot_permutation_tests_for_classif": 241, "t_p": 242, "plu": [242, 335, 343, 630, 780, 783, 933, 946], "f_p": 242, "f_n": 242, "denomin": [242, 371, 376, 426, 541, 655, 707, 926], "stairstep": 242, "ap": [242, 658, 659, 932], "sum_n": [242, 658, 932], "r_n": [242, 658, 932], "p_n": [242, 658, 932], "nth": [242, 658, 932], "r_k": 242, "p_k": [242, 932], "trapezoid": [242, 657, 658, 932], "binar": [242, 244, 245, 330, 332, 362, 364, 704, 784, 813, 814, 816, 820, 822, 833, 932, 934, 958, 969, 987, 989], "average_precision_scor": [242, 657, 659, 692, 732, 738, 932, 973, 976, 980, 981, 987], "differenti": [242, 370, 373, 510, 511, 570, 573], "precisionrecalldisplai": [242, 284, 732, 734, 737, 983, 986, 989], "got": [242, 320, 343, 502, 600, 616, 986, 988], "label_binar": [242, 244, 816, 977], "average_precis": [242, 651, 658, 692, 932], "setup": [242, 244, 324, 336, 340, 344, 346, 935, 959], "f_score": 242, "extens": [242, 244, 258, 324, 325, 332, 333, 336, 339, 341, 342, 346, 347, 349, 357, 368, 447, 454, 485, 691, 880, 888, 929, 931, 932, 951, 952, 956, 973, 979, 986, 987, 989], "plot_precision_recal": 242, "pose": [243, 928, 966], "deem": [243, 244, 485, 940, 986], "n_top": 243, "param_dist": [243, 247, 283], "n_iter_search": 243, "plot_randomized_search": 243, "unambigu": [244, 933, 979], "notion": [244, 312, 326, 349, 368, 370, 928, 932], "scheme": [244, 258, 279, 333, 351, 363, 367, 369, 371, 517, 541, 609, 610, 656, 760, 816, 817, 820, 822, 826, 830, 833, 838, 849, 854, 921, 928, 942, 946, 973, 981, 984, 985], "harder": [244, 245, 277, 333, 337, 340, 346, 363, 466, 512, 513, 955], "bulk": [244, 374, 396], "scrutin": 244, "y_onehot_test": 244, "class_id": [244, 245], "class_of_interest": 244, "nvirginica": 244, "versicolor": [244, 245, 455], "tp_c": 244, "fn_c": 244, "fp_c": 244, "tn_c": 244, "briefli": [244, 337, 350, 370, 921, 983], "nreceiv": 244, "micro_roc_auc_ovr": 244, "mcclish": [244, 738], "deci": 244, "1989": [244, 586, 738, 806, 807, 928, 935], "jul": 244, "fpr_grid": 244, "mean_tpr": [244, 245], "interp": [244, 245, 299], "macro_roc_auc_ovr": 244, "deeppink": 244, "aqua": 244, "role": [244, 324, 337, 349, 368, 950], "pair_list": 244, "pair_scor": 244, "label_a": 244, "label_b": 244, "a_mask": 244, "b_mask": 244, "ab_mask": 244, "a_tru": 244, "b_true": 244, "idx_a": 244, "idx_b": 244, "fpr_a": 244, "tpr_a": 244, "fpr_b": 244, "tpr_b": 244, "macro_roc_auc_ovo": 244, "ovo_tpr": 244, "pool": [244, 349, 397, 586, 901, 953, 984], "plot_roc": 244, "mean_fpr": 245, "viz": [245, 345], "interp_tpr": 245, "mean_auc": 245, "std_auc": 245, "std_tpr": 245, "tprs_upper": 245, "tprs_lower": 245, "plot_roc_crossv": 245, "halvinggridsearchcv": [246, 247, 283, 530, 751, 921, 985, 987, 988], "1e4": [246, 610, 630, 843, 944], "gsh": 246, "gsh_time": 246, "gs_time": 246, "make_heatmap": 246, "is_sh": 246, "make_cbar": 246, "param_c": [246, 747], "param_gamma": [246, 747, 761], "sh": [246, 342, 346, 921], "scores_matrix": 246, "pivot_t": 246, "aggfunc": 246, "0e": [246, 500, 501], "get_xticklabel": 246, "rotation_mod": 246, "cbar_ax": 246, "plot_successive_halving_heatmap": 246, "rsh": [247, 283], "params_str": 247, "drop_dupl": 247, "n_resources_": [247, 750, 751, 921], "nn_candid": 247, "n_candidates_": [247, 750, 751, 921], "n_iterations_": [247, 750, 751], "multialign": 247, "plot_successive_halving_iter": 247, "n_samples_train": [248, 851, 852, 853, 854, 855], "n_samples_test": [248, 851, 852, 853, 854, 855, 935, 942], "train_error": 248, "test_error": 248, "i_alpha_optim": 248, "alpha_optim": 248, "plot_train_error_vs_test_error": 248, "nonlinear": [249, 284, 595, 639, 640, 644, 647, 815, 928, 929, 937, 942], "true_fun": 249, "polynomial_featur": 249, "plot_underfitting_overfit": 249, "validation_curv": [250, 307, 927, 980, 981, 982, 985], "subset_mask": 250, "isin": 250, "param_rang": [250, 307, 776, 927], "train_scores_mean": 250, "train_scores_std": 250, "test_scores_mean": 250, "test_scores_std": 250, "plot_validation_curv": 250, "yeast": 252, "2417": 252, "103": [252, 253, 333, 370, 448, 506, 507, 973], "jaccard": [252, 360, 401, 408, 650, 654, 670, 679, 684, 688, 728, 729, 730, 744, 935, 981, 982], "preced": [252, 325, 338, 438, 932, 973], "arrang": [252, 583, 780, 781, 782, 783, 932], "adam": [252, 269, 806, 807, 936, 980, 981, 983, 984, 985, 986, 987, 988], "kleczewski": [252, 980, 981], "classifierchain": [252, 351, 781, 783, 980, 985, 988], "jaccard_scor": [252, 654, 679, 684, 744, 932, 982, 985], "40597": 252, "wrapper": [252, 253, 344, 347, 367, 373, 495, 571, 622, 849, 948, 952, 977, 985], "base_lr": [252, 780], "y_pred_ovr": 252, "ovr_jaccard_scor": 252, "y_pred_chain": 252, "chain_jaccard_scor": 252, "y_pred_ensembl": 252, "ensemble_jaccard_scor": 252, "x_po": 252, "plot_classifier_chain_yeast": 252, "kneighborstransform": [253, 255, 281, 801, 935, 983, 987, 988], "nmslib": 253, "pynndesc": 253, "pip": [253, 281, 282, 283, 284, 285, 286, 325, 336, 338, 342, 344, 354, 948], "pynndescenttransform": 253, "csr_matrix": [253, 282, 392, 396, 403, 447, 485, 495, 508, 509, 510, 511, 514, 515, 516, 517, 539, 544, 545, 665, 775, 824, 851, 852, 854, 855, 857, 858, 859, 860, 933, 942, 946, 947, 948, 988], "transformermixin": [253, 340, 351, 416, 981, 988], "nmslibtransform": 253, "sw": 253, "n_samples_fit_": [253, 791, 792, 793, 795, 797, 799, 800, 801], "cosinesimil": 253, "nmslib_": 253, "adddatapointbatch": 253, "createindex": 253, "n_samples_transform": [253, 793, 801], "thread": [253, 282, 285, 336, 349, 351, 363, 370, 781, 782, 898, 899, 900, 976, 978, 980, 981, 982, 983, 984, 986, 988, 989], "num_thread": 253, "knnquerybatch": 253, "mnist_10000": 253, "mnist_20000": 253, "20_000": 253, "tsne_param": 253, "barnes_hut": [253, 643, 980, 981], "parallel_batch_queri": 253, "msg": [253, 916], "transformer_nam": 253, "longest": 253, "fit_dur": 253, "transform_dur": 253, "139": [253, 344, 370, 403, 413, 642, 646, 933], "208": [253, 335], "315": [253, 335], "823": 253, "884": 253, "744": 253, "011": [253, 344], "769": 253, "733": 253, "077": 253, "448": 253, "759": 253, "numba": [253, 953], "cold": 253, "nearestneighbor": [253, 285, 363, 374, 396, 399, 412, 639, 640, 644, 791, 792, 793, 795, 799, 800, 801, 935, 973, 977, 981, 982, 983, 985, 986, 987, 988, 989], "i_ax": 253, "int32": [253, 338, 351, 395, 398, 400, 402, 404, 851, 852, 853, 854, 855, 897, 947, 982, 988], "828": 253, "757": [253, 335], "955": [253, 367, 605], "994": 253, "536": 253, "brute": [253, 349, 358, 367, 374, 396, 401, 408, 583, 584, 639, 640, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 939, 969, 977, 981, 985, 988, 989], "spent": [253, 339, 344, 773, 988], "approximate_nearest_neighbor": 253, "slow": [255, 273, 311, 324, 332, 336, 338, 368, 371, 398, 650, 823, 824, 828, 851, 854, 886, 929, 935, 953, 966, 980], "temporarydirectori": [255, 281], "n_neighbors_list": 255, "graph_model": 255, "classifier_model": 255, "sklearn_graph_cache_": 255, "tmpdir": [255, 281], "full_model": 255, "classifier__n_neighbor": 255, "grid_model": 255, "mean_fit_tim": [255, 747, 761], "std_fit_tim": [255, 747, 761], "plot_caching_nearest_neighbor": 255, "cmap_light": [256, 261, 264], "cmap_bold": [256, 261, 264], "darkblu": [256, 264], "neighbour": [256, 264, 413, 643, 937], "plot_classif": 256, "kerneldens": [257, 258, 266, 369, 975, 981, 982, 986, 987, 988], "new_data": [257, 340], "4x11": 257, "real_data": 257, "set_clim": 257, "plot_digits_kde_sampl": 257, "block": [258, 273, 285, 333, 335, 338, 343, 346, 351, 360, 363, 366, 369, 403, 404, 413, 424, 430, 431, 439, 440, 462, 464, 646, 900, 935, 937], "wildli": [258, 931], "ball": [258, 266, 363, 369, 399, 643, 789, 790, 794, 797, 799, 800, 801, 973, 975, 978, 984], "kd": [258, 363, 369, 935, 981, 982, 983], "jakevdp": [258, 266], "aaaaff": [258, 261], "tophat": [258, 369, 789, 790, 794], "log_den": 258, "34": [258, 335, 367, 373, 471, 521, 548, 600, 618, 667, 714, 963, 973], "x_src": 258, "format_func": 258, "ih": 258, "epanechnikov": [258, 369, 789, 790, 794], "funcformatt": 258, "nullloc": 258, "true_den": 258, "plot_kde_1d": 258, "NOT": [259, 335, 341, 757, 789, 790], "plot_lof_novelty_detect": 259, "x_inlier": 260, "ground_truth": 260, "n_error": 260, "x_score": [260, 433, 434, 435, 436], "radiu": [260, 299, 335, 363, 394, 401, 639, 714, 731, 789, 790, 791, 792, 793, 797, 799, 800, 801, 803, 935, 975, 977, 987], "legendhandl": 260, "_size": 260, "plot_lof_outlier_detect": 260, "ffaaaa": 261, "aaffaa": 261, "00ff00": 261, "plot_nca_classif": 261, "neighborhoodcomponentanalysi": 262, "dim_reduction_method": 262, "acc_knn": 262, "x_embed": [262, 263, 643, 647, 798, 935], "ntest": 262, "plot_nca_dim_reduct": 262, "logsumexp": [263, 980], "get_yaxi": [263, 273], "link_thickness_i": 263, "diff_embed": 263, "dist_embed": 263, "einsum": 263, "exp_dist_embed": 263, "relate_point": 263, "pt_i": 263, "pt_j": 263, "plot_nca_illustr": 263, "nearestcentroid": [264, 311, 933, 935, 973, 977, 980, 985, 988], "shrink_threshold": [264, 796, 935, 973, 985], "plot_nearest_centroid": 264, "barycent": [265, 973], "plot_regress": 265, "geospati": [266, 369], "haversin": [266, 369, 650, 712, 714, 935, 982, 985], "latitud": [266, 273, 333, 449, 650, 714], "longitud": [266, 273, 333, 449, 650, 714], "xtrain": 266, "ytrain": 266, "radian": [266, 650, 714], "land_mask": 266, "ball_tre": [266, 374, 396, 401, 408, 639, 640, 791, 792, 793, 794, 795, 797, 799, 800, 801, 935, 973], "ocean": 266, "plot_species_kd": 266, "combat": [268, 368], "encourag": [268, 299, 337, 338, 349, 947, 952], "lesser": [268, 351, 394, 492, 928], "curvatur": 268, "complic": [268, 344, 373, 645, 935], "lbfg": [268, 340, 599, 600, 609, 610, 620, 623, 625, 631, 638, 780, 783, 806, 807, 928, 936, 977, 978, 980, 981, 986, 987, 988], "plot_mlp_alpha": 268, "bfg": [269, 561, 562, 599, 600, 609, 620, 623, 625, 631, 638, 935, 936, 988], "schedul": [269, 325, 627, 628, 629, 806, 807, 900, 946, 956, 980], "momentum": [269, 806, 807, 936], "nesterovs_momentum": [269, 806, 807], "invscal": [269, 627, 628, 629, 806, 807, 946], "nesterov": [269, 806, 807, 936], "plot_arg": 269, "plot_on_dataset": 269, "nlearn": 269, "loss_": [269, 510, 806, 807, 936, 987], "loss_curve_": [269, 806, 807], "data_set": 269, "get_lin": 269, "plot_mlp_training_curv": 269, "28x28": 270, "784": 270, "throw": [270, 347, 868, 977, 980, 981, 982, 983, 987], "infrastructur": [270, 950, 952, 953], "plot_mnist_filt": 270, "greyscal": 271, "bernoulli": [271, 371, 372, 784, 785, 786, 787, 788, 805, 806, 807, 812, 928, 942, 954, 969, 973], "bernoullirbm": [271, 806, 807, 937, 942, 975, 976, 985, 987], "yann": [271, 973, 975], "dauphin": [271, 975], "gabriel": [271, 981, 982, 983, 986, 987], "synnaev": 271, "convolv": 271, "minmax_scal": [271, 273, 819, 978, 981], "nudge_dataset": 271, "1px": 271, "direction_vector": 271, "apply_along_axi": 271, "feature_rang": [271, 819, 835, 942, 975, 985], "cg": [271, 609, 610, 623, 625, 638, 928, 977, 978, 980, 984, 986, 987], "rbm": [271, 805, 806, 807, 937], "rbm_features_classifi": 271, "6000": [271, 578], "raw_pixel_classifi": 271, "plot_rbm_logistic_classif": 271, "incom": [273, 333, 392], "unscal": [273, 278, 928, 932, 981, 987], "notabl": [273, 332, 351, 447, 678, 822, 929, 931, 935, 977, 980, 987], "unterthin": [273, 976, 977, 978], "medinc": [273, 283, 333], "houseag": [273, 283, 333], "averoom": [273, 283, 333], "room": [273, 333, 343, 363, 955], "avebedrm": [273, 333], "bedroom": [273, 333], "aveoccup": [273, 283, 333], "features_idx": 273, "quantile_rang": [273, 827, 839, 979], "yeo": [273, 277, 825, 837, 942, 981, 987], "cox": [273, 277, 825, 837, 942, 981], "plasma": 273, "plasma_r": 273, "create_ax": 273, "bottom_h": 273, "left_h": 273, "rect_scatt": 273, "rect_histx": 273, "rect_histi": 273, "ax_scatt": 273, "ax_histx": 273, "ax_histi": 273, "ax_scatter_zoom": 273, "ax_histx_zoom": 273, "ax_histy_zoom": 273, "rect_colorbar": 273, "ax_colorbar": 273, "plot_distribut": 273, "hist_nbin": 273, "x0_label": 273, "x1_label": 273, "hist_x1": 273, "hist_x0": 273, "aesthet": [273, 948, 978], "layout": [273, 349, 849, 850, 851, 854, 870, 947, 976, 978], "tick_bottom": 273, "tick_left": 273, "outward": 273, "ec": [273, 481], "make_plot": 273, "item_idx": 273, "ax_zoom_out": 273, "ax_zoom_in": 273, "zoom_in_percentile_rang": 273, "cutoffs_x0": 273, "cutoffs_x1": 273, "non_outliers_mask": 273, "colorbarbas": 273, "OR": [273, 363, 374, 396, 984], "indistinguish": 273, "quadrant": 273, "plot_all_sc": [273, 818, 819, 821, 825, 826, 827, 829, 834, 835, 836, 837, 838, 839, 840], "straightforward": [274, 337, 368, 956], "anywher": 274, "qinhanmin2005": 274, "sina": [274, 986], "rnd": 274, "enc": [274, 276, 285, 822, 823, 942], "x_bin": 274, "line_bin": 274, "plot_discret": 274, "get_nam": 275, "broader": [275, 928], "logisticregression__c": 275, "linearsvc__c": 275, "kbinsdiscretizer__n_bin": 275, "gradientboostingclassifier__learning_r": 275, "svc__c": 275, "cm_piyg": 275, "piyg": 275, "b30065": 275, "178000": 275, "est_idx": 275, "plot_discretization_classif": 275, "centers_0": 276, "centers_1": 276, "x_list": 276, "grid_encod": 276, "stripe": 276, "plot_discretization_strategi": 276, "powertransform": [277, 826, 837, 922, 942, 981, 984, 987, 989], "johnwon": 277, "weibul": 277, "bimod": [277, 369], "ineffect": [277, 942, 981, 982], "eric": [277, 976, 977, 978, 981, 982, 983, 984, 985, 986, 987, 988], "ericchang2017": 277, "northwestern": [277, 609], "contact": [277, 349, 952], "font_siz": 277, "304": [277, 335], "bc": 277, "qt": [277, 826], "x_lognorm": [277, 942], "x_chisq": 277, "chisquar": 277, "x_weibul": 277, "x_gaussian": 277, "x_uniform": 277, "loc_a": 277, "loc_b": 277, "105": 277, "x_a": 277, "x_b": 277, "x_bimod": 277, "d81b60": 277, "0188ff": 277, "ffc107": 277, "b7a2ff": 277, "2ec5ac": 277, "figaspect": 277, "axes_idx": 277, "axes_list": 277, "x_trans_bc": 277, "lmbda_bc": 277, "lambdas_": [277, 825, 986], "x_trans_yj": 277, "lmbda_yj": 277, "x_trans_qt": 277, "ax_origin": 277, "ax_bc": 277, "ax_yj": 277, "ax_qt": 277, "x_tran": [277, 340, 359, 394, 415, 825, 830, 837, 942], "meth_nam": 277, "lmbda": 277, "plot_map_data_to_norm": 277, "involv": [278, 281, 299, 324, 326, 333, 338, 342, 351, 352, 366, 373, 650, 777, 778, 929, 933, 935, 939, 947, 952, 956, 965, 981], "kneighbor": [278, 285, 791, 792, 793, 795, 797, 935, 977, 982, 986, 987, 988, 989], "obatin": 278, "tyler": [278, 980, 986, 987, 988], "lanigan": [278, 980], "tylerlanigan": 278, "sebastian": [278, 974, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987], "raschka": [278, 978, 979, 980, 981, 982, 985], "sebastianraschka": 278, "alcohol": [278, 335], "malic": [278, 335], "acid": [278, 335], "scaled_x_train": 278, "prolin": [278, 335], "x_plot_scal": 278, "fit_and_plot_model": 278, "desicion": 278, "scaled_pca": 278, "x_train_transform": [278, 320, 367], "x_train_std_transform": 278, "first_pca_compon": 278, "target_class": 278, "repercuss": 278, "logisticregressioncv": [278, 351, 609, 928, 933, 977, 978, 979, 981, 982, 983, 987, 988], "unscaled_clf": 278, "scaled_clf": 278, "y_pred_scal": 278, "y_proba_sc": 278, "vastli": 278, "plot_scaling_import": 278, "targetencod": [279, 822, 823, 942, 989], "review": [279, 324, 333, 340, 341, 342, 343, 344, 349, 352, 367, 368, 486, 492, 932, 942, 959], "wine_review": 279, "42074": 279, "countri": [279, 929], "provinc": 279, "region_1": 279, "region_2": 279, "wineri": 279, "one_hot": 279, "max_categori": [279, 285, 822, 823, 942, 987, 989], "target_typ": [279, 830, 873, 895], "evaluate_model_and_stor": 279, "rmse_test_scor": 279, "rmse_train_scor": 279, "rmse_test_mean": 279, "rmse_test_std": 279, "rmse_train_mean": 279, "rmse_train_std": 279, "nuniqu": 279, "workaround": [279, 338, 747, 761], "high_cardinality_featur": 279, "low_cardinality_featur": 279, "mixed_encoded_preprocessor": 279, "high_cardin": 279, "low_cardin": 279, "mixed_pip": 279, "mixed_target": 279, "name_to_color": 279, "rmse_": 279, "_mean": 279, "_std": 279, "explod": 279, "unrel": [279, 325, 343, 346, 371, 466], "plot_target_encod": 279, "announc": [281, 282, 283, 284, 285, 286, 342, 352], "bug": [281, 282, 283, 284, 285, 286, 327, 336, 340, 341, 343, 346, 349, 351, 950, 953, 973, 974, 975, 983, 984, 985, 986, 987, 988, 989], "latest": [281, 282, 283, 284, 285, 286, 336, 338, 342, 344, 346, 948, 950, 987], "upgrad": [281, 282, 283, 284, 285, 286, 354, 953, 973, 978, 981], "conda": [281, 282, 283, 284, 285, 286, 325, 338, 339, 341, 342, 344, 346, 356, 948], "forg": [281, 282, 283, 284, 285, 286, 325, 339, 341, 342, 346, 354], "plot_roc_curv": [281, 983, 985], "plot_precision_recall_curv": [281, 983, 985, 986], "stackingclassifi": [281, 320, 370, 519, 983, 984, 985, 986, 987, 988], "radiusneighborstransform": [281, 793, 935, 983, 985, 987, 988], "sklearn_cache_": 281, "isomap__n_neighbor": 281, "nan_euclidean_dist": [281, 712, 922, 983], "ccp_alpha": [281, 315, 508, 509, 510, 511, 515, 516, 857, 858, 859, 860, 948, 983], "tree_": [281, 315, 319, 794, 857, 858, 859, 860], "node_count": [281, 315, 319, 857, 858, 859, 860], "check_estim": [281, 340, 351, 881, 980, 981, 982, 983, 984, 985, 987, 988], "pytest": [281, 325, 336, 338, 340, 341, 354, 356, 880, 881, 983, 986], "estimator_check": [281, 340, 351, 980, 981, 983, 984, 987, 988, 989], "parametrize_with_check": [281, 340, 880, 983, 984], "test_sklearn_compatible_estim": [281, 881], "ovo": [281, 738, 777, 851, 854, 932, 933, 947], "macro": [281, 333, 367, 658, 664, 679, 680, 688, 733, 734, 737, 738, 932, 967, 973, 981, 989], "preval": [281, 351, 663, 932], "decision_function_shap": [281, 308, 851, 854, 947, 978, 979, 982, 983], "plot_release_highlights_0_22_0": 281, "await": 282, "lam": [282, 283, 984], "openmp": [282, 336, 341, 349, 351, 363, 370, 900, 984, 986], "10k": [282, 398], "monotoinc": 282, "gbdt_cst": 282, "plot_release_highlights_0_23_0": 282, "art": [283, 344, 600, 643, 952, 956], "700": 283, "footprint": [283, 286, 324, 326, 363, 368, 506, 507, 514, 975, 978, 979, 984, 985, 988], "yarowski": [283, 846, 945], "selftrainingclassifi": [283, 291, 292, 293, 945, 985], "random_unlabeled_point": [283, 844, 845, 846], "self_training_model": [283, 846], "linear_baselin": 283, "effort": [283, 338, 344, 952, 956, 984, 986], "plot_release_highlights_0_24_0": 283, "l2_regular": [284, 370, 512, 513], "max_bin": [284, 285, 370, 512, 513], "typeerror": [284, 343, 662, 873, 916, 980, 981, 984, 986], "quantileregressor": [284, 928, 932, 986, 987, 988], "min_": [284, 363, 370, 819, 928, 942, 946, 947, 948], "sum_i": [284, 597, 598, 603, 604, 611, 612, 613, 614, 632, 635, 923, 924, 928, 930, 932, 937], "pb_q": [284, 928], "_1": [284, 365, 368, 371, 482, 488, 489, 491, 496, 497, 498, 597, 598, 603, 604, 605, 606, 607, 611, 612, 613, 614, 632, 633, 634, 635, 716, 928, 930, 932, 947], "get_feature_nam": [284, 981, 982, 984, 985, 986], "pet": [284, 738, 932], "dog": [284, 285, 533, 733, 830, 942], "fish": 284, "plot_": [284, 354], "2100": 284, "plot_release_highlights_1_0_0": 284, "x_1d": 285, "hist_quantil": 285, "log_reg_input_featur": 285, "gather": [285, 346, 352, 362, 363, 942, 956], "min_frequ": [285, 822, 823, 942, 987, 989], "rabbit": [285, 942], "snake": [285, 533, 830, 942], "infrequent_categories_": [285, 822, 823, 830, 942], "refactor": [285, 973, 975, 976, 977, 983, 986, 987, 988], "radius_neighbor": [285, 797, 799, 800, 801, 977, 982, 983, 985, 986, 987, 988], "summari": [285, 320, 335, 349, 643, 664, 862, 930, 933, 952, 967], "pairwise_distances_argmin_min": [285, 729, 976, 981, 987, 988, 989], "radiusneighborsclassifi": [285, 791, 792, 797, 800, 933, 935, 973, 975, 979, 981, 983, 985, 986, 987, 988, 989], "radiusneighborsregressor": [285, 791, 792, 797, 799, 935, 973, 975, 981, 983, 985, 986, 987, 988, 989], "trustworthi": [285, 981, 982, 987, 988, 989], "labelpropag": [285, 290, 845, 846, 933, 945, 974, 979, 980, 983, 984, 985, 987, 988, 989], "labelspread": [285, 288, 289, 290, 292, 293, 844, 846, 933, 945, 974, 979, 980, 983, 984, 987, 988, 989], "blog": [285, 324, 338, 344, 346, 984], "cython": [285, 324, 325, 327, 336, 338, 341, 347, 349, 354, 356, 359, 363, 370, 459, 942, 943, 946, 947, 952, 953, 973, 976, 977, 979, 985, 988, 989], "readili": [285, 368, 948, 956], "true_w": 285, "true_h": 285, "x_reconstruct": [285, 433, 434, 435, 534], "divis": [285, 363, 371, 541, 542, 545, 663, 664, 679, 680, 688, 696, 733, 734, 737, 932, 966, 977, 981, 982, 985, 989], "repeatedli": [285, 320, 351, 363, 370, 373, 459, 497, 617, 618, 627, 628, 629, 731, 922, 936, 962], "bisect_km": 285, "plot_release_highlights_1_1_0": 285, "video": [286, 327, 332, 341, 454, 933, 956, 959], "sepal_col": 286, "petal_col": 286, "kbin": 286, "x_out": [286, 813, 822, 823], "hist_no_interact": 286, "v1": [286, 332, 354, 375, 484, 706, 745, 746, 784, 785, 786, 788, 985, 988, 989], "liac": [286, 332, 338, 447, 988], "arff": [286, 338, 447, 985, 988], "compliant": [286, 338], "cupi": [286, 359], "gpu": [286, 359, 936, 953, 967], "changelog": [286, 342, 351], "plot_release_highlights_1_2_0": 286, "semisupervis": [288, 351], "clai": [288, 289, 290, 293, 973], "woolam": [288, 289, 290, 293, 973], "340": 288, "n_total_sampl": [288, 289], "n_labeled_point": [288, 289], "unlabeled_set": 288, "everyth": [288, 320, 342, 344, 349, 415, 892, 952, 953, 973], "lp_model": [288, 289], "predicted_label": [288, 289], "transduction_": [288, 289, 290, 844, 845, 846], "true_label": [288, 289], "pred_entropi": [288, 289], "label_distributions_": [288, 289, 844, 845, 984], "uncertainty_index": [288, 289], "image_index": [288, 289], "plot_label_propagation_digit": 288, "max_iter": 289, "330": 289, "unlabeled_indic": 289, "transduc": 289, "in1d": [289, 980], "delete_indic": 289, "183": [289, 344, 933, 973], "nfit": 289, "delete_index": 289, "plot_label_propagation_digits_active_learn": 289, "label_spread": 290, "output_label": 290, "output_label_arrai": 290, "outer_numb": 290, "inner_numb": 290, "plot_label_propagation_structur": 290, "breast_canc": 291, "569": [291, 335, 451, 543, 546, 547, 549], "augment": [291, 581, 831, 956], "oliv": [291, 293, 981, 982, 984, 985, 986], "rausch": [291, 293, 981, 982, 985], "rauscho": [291, 293], "ethz": [291, 293], "total_sampl": [291, 487], "base_classifi": [291, 293, 945], "x_valu": 291, "99999": 291, "amount_label": 291, "amount_iter": 291, "self_training_clf": 291, "skfold": 291, "y_test_tru": 291, "labeled_iter_": [291, 846], "return_count": [291, 312, 801], "capsiz": 291, "twinx": 291, "plot_self_training_varying_threshold": 291, "tfidftransform": [292, 312, 313, 371, 440, 542, 967, 980, 981, 987, 989], "sdg_param": 292, "vectorizer_param": 292, "selftrain": 292, "st_pipelin": 292, "ls_pipelin": 292, "eval_and_print_metr": 292, "y_mask": 292, "x_20": 292, "y_20": 292, "plot_semi_supervised_newsgroup": 292, "y_rand": 293, "y_30": 293, "y_50": 293, "ls30": 293, "ls50": 293, "ls100": 293, "st30": 293, "st50": 293, "rbf_svc": [293, 947], "color_map": 293, "plot_semi_supervised_versus_svm_iri": 293, "my_kernel": [295, 947], "plot_custom_kernel": 295, "2x2": [296, 363, 704], "plot_iris_svc": 296, "convention": [297, 351, 845], "support_vector_indic": 297, "plot_linearsvc_support_vector": 297, "plot_oneclass": 298, "midpoint": 299, "blink": 299, "act": [299, 338, 350, 369, 370, 664, 679, 680, 688, 733, 734, 737, 824, 828, 929, 932, 935, 947, 981], "spuriou": [299, 346, 942, 986, 987, 988], "c_rang": 299, "gamma_rang": 299, "midpointnorm": 299, "masked_arrai": [299, 747, 761], "x_2d": 299, "y_2d": 299, "cheat": [299, 936, 946, 975], "c_2d_rang": 299, "gamma_2d_rang": 299, "bright": 299, "brutal": 299, "plot_rbf_paramet": 299, "plot_separating_hyperplan": 300, "plain": [301, 373, 608, 946], "n_samples_1": [301, 947], "n_samples_2": [301, 947], "clusters_std": 301, "wclf": 301, "wdisp": 301, "surface_": [301, 582], "plot_separating_hyperplane_unbalanc": 301, "blown": 302, "score_mean": 302, "score_std": 302, "plot_svm_anova": 302, "fignum": [303, 304], "plot_svm_kernel": 303, "unreg": 304, "perpendicular": 304, "yy_down": 304, "yy_up": 304, "plot_svm_margin": 304, "nusvc": [305, 324, 852, 933, 973, 974, 975, 978, 981, 983, 984, 985, 987], "plot_svm_nonlinear": 305, "svr_rbf": 306, "svr_lin": 306, "svr_poli": 306, "kernel_label": 306, "model_color": 306, "setdiff1d": 306, "plot_svm_regress": 306, "mathcal": [307, 368, 370, 578, 647, 924, 926, 928, 932, 946, 986], "omega": [307, 366, 926], "model_l1": 307, "logx": 307, "train_size_idx": 307, "results_sc": 307, "c_scale": 307, "model_l2": 307, "plot_svm_scale_c": 307, "break_ti": [308, 851, 854, 947, 983], "accent": [308, 539, 540, 542, 983], "plot_svm_tie_break": 308, "emphasi": [309, 366, 851, 852, 853, 854, 855, 939, 952], "subtl": [309, 320, 931, 953], "plot_decision_funct": 309, "sample_weight_last_ten": 309, "sample_weight_const": 309, "clf_no_weight": 309, "clf_weight": 309, "plot_weighted_sampl": 309, "signatur": [311, 312, 333, 439, 440, 508, 509, 515, 516, 545, 561, 562, 610, 624, 626, 662, 692, 753, 771, 773, 776, 822, 921, 980, 986], "size_mb": 311, "utf": [311, 313, 371, 438, 454, 533, 539, 540, 542], "load_dataset": 311, "sublinear_tf": [311, 368, 371, 541, 542], "duration_train": 311, "duration_test": 311, "data_train_size_mb": 311, "data_test_size_mb": 311, "ridgeclassifi": [311, 324, 623, 624, 626, 928, 933, 978, 982, 986, 987, 988], "sparse_cg": [311, 623, 625, 638, 928, 974, 980, 982, 983, 987], "rarer": [311, 313, 371], "deeper": [311, 948], "plot_feature_effect": 311, "average_feature_effect": 311, "top5": 311, "top_indic": 311, "predictive_word": 311, "bar_siz": 311, "y_loc": 311, "keyword": [311, 332, 338, 340, 343, 345, 351, 363, 374, 377, 390, 396, 397, 401, 403, 408, 415, 418, 454, 486, 489, 491, 510, 511, 518, 519, 520, 521, 571, 579, 582, 583, 590, 594, 597, 598, 603, 604, 611, 612, 613, 614, 632, 635, 639, 643, 648, 649, 651, 652, 653, 724, 728, 729, 730, 731, 740, 741, 753, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 809, 813, 881, 883, 899, 921, 929, 932, 935, 945, 973, 977, 979, 980, 981, 983, 985, 987, 988], "god": [311, 967], "expectedli": 311, "caltech": 311, "pollut": [311, 678, 735, 932, 938], "sender": [311, 333], "writer": 311, "custom_nam": 311, "clf_descr": 311, "rocchio": [311, 796], "training_tim": 311, "txt": [311, 332, 444, 454], "curs": [311, 312, 363, 369, 373, 934, 935, 961, 966], "harm": [311, 340, 371, 743], "plot_document_classification_20newsgroup": 311, "discov": [312, 363, 368, 371, 374, 396, 399, 958, 988], "metadata": [312, 332, 333, 357, 439, 440, 447, 952, 953, 958], "category_s": 312, "true_k": 312, "evaluations_std": 312, "fit_and_evalu": 312, "evaluation_std": 312, "score_valu": 312, "std_score": [312, 986], "reweight": [312, 351, 365, 370, 541, 542, 599, 620, 631], "collis": [312, 313, 371, 533, 540], "x_tfidf": 312, "devid": 312, "prod": [312, 572], "phenomenon": [312, 942], "cluster_s": 312, "redo": 312, "x_lsa": 312, "explained_vari": [312, 932], "minibatch_kmean": 312, "influenti": [312, 956], "original_space_centroid": 312, "order_centroid": 312, "sparciti": 312, "lsa_vector": 312, "50_000": 312, "x_hashed_lsa": 312, "df_std": 312, "speak": [312, 324, 338, 946], "safer": [312, 320, 363, 367, 973], "plot_document_clust": 312, "assembl": [313, 809], "18000": [313, 333], "raw_data": 313, "data_size_mb": 313, "anyth": [313, 342, 344, 351, 367, 896, 987], "unicod": [313, 371, 438, 454, 533, 539, 540, 542, 897, 973, 981, 985], "charact": [313, 338, 343, 351, 371, 454, 459, 460, 539, 540, 542, 861, 937, 967, 973, 986, 988], "underscor": [313, 340, 351, 916, 964, 973, 983, 986], "tok": [313, 371], "findal": 313, "token_freq": 313, "freq": 313, "dict_count_vector": 313, "vocabulary_": [313, 371, 532, 539, 542, 967, 973], "n_nonzero_column": 313, "inact": [313, 332, 338], "input_typ": [313, 371, 415, 533], "y_po": 313, "downsid": 313, "featureheash": 313, "implicitli": [313, 347, 370, 548, 583, 584, 828, 922, 924, 939, 942, 947], "token_pattern": [313, 371, 539, 540, 542], "plot_hashing_vs_dict_vector": 313, "parameter": [315, 373, 565, 566, 573, 574, 745, 746, 928, 929, 937, 942, 948], "weakest": [315, 948], "cost_complexity_pruning_path": [315, 857, 858, 859, 860], "drawstyl": [315, 651], "015": [315, 940], "plot_cost_complexity_prun": 315, "ryb": 316, "pairidx": 316, "borderpad": 316, "handletextpad": 316, "plot_tre": [316, 319, 948, 982, 984, 985, 986, 988], "plot_iris_dtc": 316, "plot_tree_regress": 317, "regr_3": 318, "y_3": 318, "plot_tree_regression_multioutput": 318, "decision_path": [319, 508, 509, 515, 516, 517, 857, 858, 859, 860, 979, 984], "children_left": 319, "child": [319, 325, 349, 351, 363, 370, 394, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 857, 858, 859, 860, 900, 980], "children_right": 319, "n_node_sampl": 319, "travers": [319, 935, 939], "n_node": [319, 393, 397, 414, 508, 509, 515, 516, 517, 857, 858, 859, 860, 891], "node_depth": 319, "is_leav": 319, "pop": [319, 349, 864, 962, 981], "visit": [319, 338, 939], "node_id": [319, 861, 863], "is_split_nod": 319, "children": [319, 363, 370, 393, 397, 414, 517, 977], "Or": [319, 367, 368, 822, 932, 938, 946], "node_index": 319, "node_ind": 319, "leaf_id": 319, "sample_id": [319, 333, 448], "threshold_sign": 319, "inequ": [319, 351, 363, 395, 398, 410, 650, 929, 930, 935], "boolean": [319, 333, 338, 340, 347, 364, 370, 371, 372, 415, 512, 513, 532, 533, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 580, 583, 584, 587, 600, 622, 650, 778, 784, 805, 812, 832, 865, 916, 922, 928, 934, 939, 942, 948, 973, 976, 978, 979, 980, 982, 983, 984, 986, 987, 988], "common_nod": 319, "common_node_id": 319, "plot_unveil_tree_structur": 319, "anti": [320, 557, 784, 934], "x_test_transform": [320, 367], "standard_norm": 320, "unfair": 320, "x_select": 320, "gbc": 320, "76": [320, 335, 344, 731, 965], "x_train_select": 320, "x_test_select": 320, "46": [320, 344, 544, 545, 667, 853, 858, 927, 942], "tip": [320, 323, 327, 338, 341, 344, 358, 371, 485, 492, 596, 643, 928, 954, 968, 969, 971, 976], "glossari": [320, 327, 338, 340, 344, 362, 374, 375, 389, 392, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 411, 412, 413, 415, 418, 420, 423, 425, 439, 442, 443, 446, 448, 454, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 534, 535, 545, 553, 558, 559, 561, 562, 578, 583, 585, 590, 591, 592, 593, 597, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 652, 724, 728, 731, 741, 745, 746, 747, 749, 750, 751, 752, 753, 759, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 792, 794, 795, 797, 798, 799, 800, 802, 803, 805, 806, 807, 808, 811, 814, 826, 830, 838, 841, 842, 844, 845, 849, 850, 851, 854, 857, 858, 859, 860, 885, 886, 903, 906, 921, 922, 928, 958, 981], "mtrand": 320, "_rand": 320, "85418642": 320, "79084103": 320, "13077794": 320, "11915045": 320, "56479934": 320, "70814003": 320, "25291366": 320, "55212743": 320, "18197458": 320, "37845099": 320, "snippet": [320, 338, 343, 346, 349, 359, 370, 371, 372, 922, 942, 955, 986], "mutat": [320, 981], "somewhat": [320, 326, 338, 340, 368, 370, 851, 854, 928, 947, 948], "debug": [320, 325, 339, 341, 344, 351, 353, 578, 848, 898, 952, 967, 981, 985], "govern": [320, 324, 327, 338, 351, 950, 956], "implic": 320, "rf_123": 320, "rf_inst": 320, "didn": [320, 351, 981, 982, 983, 984, 985, 986, 987, 988, 989], "strict": [320, 336, 351, 368, 454, 486, 539, 540, 542, 928, 973, 982, 985], "pervas": [320, 338], "throughout": [320, 351, 578, 748, 806, 807, 958, 976, 981], "codebas": [320, 338, 339, 340, 371, 973, 979], "84": [320, 335, 370, 371, 738, 761, 927, 932, 942, 963], "unlucki": 320, "lucki": 320, "fairer": 320, "temptat": [320, 338], "throughput": [323, 952, 969, 976], "switch": [323, 629, 655, 668, 687, 705, 707, 743, 789, 790, 885, 886, 932, 935, 969, 973], "offlin": [324, 338], "bottleneck": [324, 344, 370, 399, 806, 807], "hurt": [324, 485, 981], "toolkit": [324, 952, 956], "branch": [324, 336, 338, 341, 342, 363, 370, 394, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 857, 858, 859, 860, 862, 935, 939, 948], "sklearn_assume_finit": 324, "assume_finit": [324, 325, 419, 847], "assert_all_finit": [324, 347, 419], "nm": 324, "csc": [324, 349, 351, 371, 502, 504, 505, 621, 643, 816, 818, 824, 829, 832, 834, 840, 865, 869, 870, 895, 907, 908, 910, 911, 912, 913, 935, 942, 981, 982, 984, 987], "32bit": [324, 897], "speedup": [324, 368, 370, 601, 605, 608, 973, 974, 975, 976, 988], "multithread": [324, 363, 849, 850, 851, 852, 853, 854, 855], "bla": [324, 325, 336, 339, 344, 973, 981, 982, 984, 985], "sparsity_ratio": 324, "gbt": 324, "speedi": 324, "packet": 324, "reuter": [324, 333], "carefulli": [324, 368], "spawn": [324, 349, 747, 761, 770, 771, 772, 984], "gil": [324, 325, 339, 900, 976, 981, 982, 985, 986], "ought": 324, "lapack": [324, 325, 336, 483, 486, 492, 639, 988], "dgemm": 324, "show_vers": [324, 336, 338, 346, 354, 981], "atla": [324, 336], "rebuild": [324, 357, 371, 394], "openbla": [324, 325, 336, 349, 900, 986], "mkl": [324, 325, 336, 349, 900, 973], "veclib": [324, 349], "osx": 324, "nouri": [324, 974, 976], "instruct": [324, 338, 339, 340, 341, 342, 343, 346, 349, 350, 454, 539, 540, 542, 958, 967, 973], "ubuntu": [324, 336, 344, 346], "1gb": 324, "mib": [324, 419, 847], "working_memori": [324, 325, 419, 731, 847, 981], "adher": [324, 340, 351, 880, 881, 973, 974], "pairwise_distances_chunk": [324, 728, 981, 984], "facilit": [324, 351, 357, 952, 953, 979, 982], "moment": [324, 368, 373, 392, 566, 574, 806, 807, 896, 936, 937], "000024": 324, "027400": 324, "mileag": 324, "deploi": [324, 353, 357, 953, 956], "upstream": [324, 338, 342, 346, 349, 942, 982], "lighter": [324, 651, 653, 732, 739, 989], "threadpoolctl": [325, 336, 354, 356], "subsect": [325, 362], "worker": [325, 351, 371, 898, 899, 900, 988], "14228": 325, "loki": [325, 900, 932, 981, 984], "duplic": [325, 337, 338, 351, 363, 374, 396, 399, 400, 466, 586, 597, 598, 603, 604, 611, 612, 613, 614, 632, 635, 773, 820, 918, 935, 973, 976, 985, 987, 989], "memmap": [325, 333, 351, 368, 459, 485, 981], "1mb": [325, 978], "parallel_backend": [325, 374, 389, 396, 399, 401, 403, 408, 409, 412, 415, 418, 423, 482, 486, 487, 488, 490, 493, 494, 496, 497, 499, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 545, 553, 561, 583, 585, 590, 598, 602, 604, 606, 608, 609, 610, 612, 614, 616, 617, 619, 627, 630, 639, 640, 641, 642, 643, 644, 645, 724, 728, 731, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 782, 791, 792, 795, 797, 799, 800, 802, 803, 808, 811, 844, 845, 981], "exclus": [325, 349, 368, 370, 578, 579, 581, 921, 928, 932, 933, 956, 980, 984], "omp_num_thread": 325, "my_script": 325, "algebra": [325, 336, 341, 349, 368, 371, 413, 815, 942], "bli": [325, 336, 349], "mkl_num_thread": 325, "openblas_num_thread": 325, "blis_num_thread": 325, "bash": [325, 346], "zsh": 325, "prompt": [325, 336, 338, 354, 356, 371, 958], "pypi": [325, 336, 338, 340, 342, 344, 354, 948, 981, 985, 987, 988], "channel": [325, 333, 336, 349, 371, 444, 445, 534, 535, 537, 538], "subscript": [325, 900, 986], "physic": [325, 456, 897, 928], "max_thread": [325, 339], "n_cpu": [325, 351], "lib": [325, 336, 354, 952], "_num_thread": 325, "singleton": [325, 755, 872, 986], "aforement": [325, 933], "global_random_se": 325, "fixtur": [325, 338], "ci": [325, 341, 342, 346, 934, 979, 981], "build_numb": 325, "disrupt": 325, "config": [325, 338, 339, 346, 577, 981], "contributor": [325, 341, 342, 343, 346, 349, 351, 932, 950, 953, 974, 975, 976], "encount": [325, 336, 357, 363, 370, 371, 447, 512, 513, 532, 784, 785, 786, 788, 822, 907, 942, 946, 952, 955, 956, 967, 981, 984], "watch": 325, "annoi": 325, "test_your_test_nam": 325, "skip": [325, 338, 340, 347, 371, 419, 519, 597, 598, 603, 611, 612, 613, 622, 632, 847, 967, 977, 980, 983, 985, 987], "global_dtyp": 325, "boundscheck": [325, 339], "segfault": [325, 339, 973, 981, 986], "posix": [325, 349], "pairwisedistancesreduct": 325, "adequ": [325, 344, 518, 958, 986], "drive": [326, 368, 369, 370, 500, 946, 956, 967], "passiveaggressiveregressor": [326, 928, 974, 977, 980, 981, 984, 986], "maxabsscal": [326, 813, 834, 922, 942, 978, 981, 982, 983, 984, 989], "routin": [326, 332, 335, 338, 339, 340, 341, 346, 349, 351, 372, 623, 625, 638, 650, 851, 852, 853, 854, 855, 929, 935, 942, 943, 946, 952, 956, 973, 987, 988, 989], "passiveaggress": [326, 371], "late": 326, "fledg": [326, 371], "exercis": [326, 327, 335, 338, 452, 453, 455, 456, 603, 604, 609, 747, 752, 771, 791, 854, 959, 976], "naivebay": 326, "dramat": 326, "welcom": [327, 337, 338, 346, 352, 953, 955], "roadmap": [327, 950], "persist": [327, 346, 349, 368, 561, 562, 805, 937, 952, 969, 979, 982], "miscellan": [327, 331, 332, 979, 980, 987, 988, 989], "craft": [327, 341], "curat": [327, 338, 341, 342], "conveni": [330, 346, 349, 364, 367, 371, 373, 378, 395, 398, 400, 402, 404, 415, 440, 562, 627, 629, 650, 678, 735, 808, 809, 906, 922, 924, 928, 929, 939, 956, 967, 973], "commun": [331, 337, 341, 343, 346, 351, 354, 363, 370, 489, 491, 498, 643, 661, 821, 922, 929, 935, 942, 946, 950, 952, 956, 981, 982], "fetcher": [331, 978, 980], "linnerrud": [331, 969], "breast": [331, 451, 969, 978], "cancer": [331, 451, 544, 545, 796, 969, 978], "covertyp": [331, 442, 969], "rcv1": [331, 448, 969, 978], "kddcup": [331, 443, 969], "svmlight": [331, 438, 459, 460, 952, 969, 973, 974, 980, 982], "jpeg": [332, 333, 444, 445], "publish": [332, 333, 340, 342, 346, 351, 944, 953, 985], "creativ": 332, "spare": [332, 625, 626], "pyplpt": 332, "load_svmlight_fil": [332, 973, 974, 979, 980, 981, 988], "test_dataset": 332, "everybodi": [332, 338], "upload": [332, 336, 342, 349, 622], "mice": [332, 578, 922], "brain": 332, "miceprotein": 332, "1080": [332, 363], "sc": [332, 363], "clara": [332, 985], "higuera": 332, "katheleen": 332, "gardin": 332, "krzysztof": 332, "cio": 332, "protein": [332, 952], "cite": [332, 363, 950], "kj": [332, 934], "critic": [332, 338, 350, 357, 370, 643, 929, 932, 940, 947, 956, 984], "syndrom": 332, "plo": [332, 558, 559], "ONE": [332, 558, 559], "e0129126": 332, "40966": 332, "upload_d": 332, "08t16": 332, "17928620": 332, "file_id": 332, "default_target_attribut": 332, "row_id_attribut": 332, "mouseid": 332, "ignore_attribut": 332, "genotyp": 332, "cc18": 332, "study_135": 332, "study_98": 332, "study_99": 332, "statu": [332, 342, 354, 447, 789, 790], "md5_checksum": 332, "3c479a6885bfa0438971388283a1ce32": 332, "websit": [332, 333, 335, 338, 352, 936, 946, 956, 967, 974, 975, 976], "4550": 332, "creator": [332, 335], "17t14": 332, "49": [332, 333, 335, 343, 363, 401, 408, 664, 676, 706, 714, 745, 747, 830, 927, 932, 942, 976], "1804243": 332, "web": [332, 333, 335, 338, 341, 346, 363, 370, 371, 472, 842, 932, 942, 973], "pone": 332, "0129126": 332, "openml100": 332, "study_14": 332, "study_34": 332, "earliest": [332, 929], "iris_61": 332, "iris_969": 332, "969": 332, "iris_version_3": 332, "vanschoren": [332, 985], "rijn": [332, 981], "bischl": 332, "torgo": 332, "acm": [332, 333, 363, 374, 396, 401, 408, 411, 462, 514, 627, 676, 706, 795, 932, 935, 938, 944], "sigkdd": [332, 333, 462, 627, 830, 942, 944], "newslett": 332, "legaci": [332, 342, 351, 900, 973, 980, 985], "my": [332, 338, 343, 346, 447], "columnar": [332, 415, 952], "usabl": [332, 338, 340, 351, 357, 371, 747, 900, 973, 980, 987, 988], "io": [332, 335, 336, 338, 342, 344, 346, 351, 357, 643, 952, 971], "json": [332, 338, 354], "sql": 332, "smoothli": 332, "manipul": [332, 359, 458, 900, 952, 979], "mat": [332, 371], "load_fil": [332, 333, 967, 975, 987], "audio": [332, 454], "wish": [332, 338, 345, 347, 354, 363, 601, 602, 605, 606, 607, 615, 616, 886, 959, 967, 980], "imageio": 332, "wavfil": 332, "wav": 332, "hdf5": 332, "h5py": 332, "pytabl": 332, "april": [333, 615, 636, 637, 977, 985], "1992": [333, 335, 367, 370, 518, 519, 596, 928], "1994": [333, 335, 595], "AT": [333, 446], "laboratori": [333, 952], "cambridg": [333, 368, 541, 784, 788, 928, 930, 934], "facial": 333, "upright": 333, "frontal": 333, "movement": 333, "112": [333, 335, 975], "credit": [333, 346, 370, 928, 956], "18846": [333, 439, 440], "scikit_learn_data": [333, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450], "20news_hom": 333, "newsgroups_train": 333, "11314": 333, "1073": 333, "20new": [333, 967], "2034": 333, "34118": 333, "159": [333, 973], "01327": 333, "aren": [333, 342, 354, 362, 676, 706, 937, 983, 985], "newsgroups_test": 333, "vectors_test": 333, "class_prior": [333, 784, 785, 786, 788, 974, 977], "fit_prior": [333, 784, 785, 786, 788], "88213": 333, "suspici": 333, "show_top10": 333, "top10": 333, "nntp": [333, 967], "affili": 333, "abund": 333, "clue": [333, 346, 929], "bare": [333, 929, 967], "quotat": 333, "77310": 333, "76995": 333, "cleveland": 333, "indian": 333, "leagu": 333, "team": [333, 341, 349, 351, 950, 952, 956, 973], "ohio": 333, "spark": [333, 953], "death": 333, "georg": [333, 363, 979, 985, 986, 987, 988], "floyd": [333, 639, 929], "reckon": 333, "coloni": 333, "owner": [333, 335], "paul": [333, 976, 979, 980, 981, 982, 986, 987], "dolan": 333, "nicknam": 333, "tribe": 333, "theme": [333, 973], "mlb": [333, 820], "inappropri": [333, 367, 373, 660, 768], "nlp": [333, 368, 371, 784, 788, 930, 956], "cultur": 333, "inflammatori": 333, "famou": [333, 335, 947], "internet": [333, 343, 942, 965], "offici": [333, 340, 351, 354, 444, 448, 952, 967, 981, 982, 985], "verif": [333, 932, 956], "identif": [333, 338, 448, 921, 959], "viola": [333, 981], "opencv": 333, "detector": [333, 351, 795], "5749": [333, 444, 445], "13233": [333, 444, 445], "5828": [333, 444, 445], "200m": 333, "lfw_home": 333, "ariel": [333, 973, 979], "sharon": 333, "colin": [333, 979], "powel": 333, "donald": [333, 363, 675, 922], "rumsfeld": 333, "bush": 333, "gerhard": 333, "schroeder": 333, "hugo": [333, 979, 984, 985, 986, 987], "chavez": 333, "toni": [333, 514, 829, 938, 986, 987], "blair": 333, "rectangular": [333, 351, 886, 953], "1288": 333, "1850": 333, "37": [333, 370, 475, 667, 829, 942, 973], "1140": 333, "fetch_lfw_pair": [333, 978, 988], "lfw_pairs_train": 333, "2200": [333, 444], "47": [333, 444, 445, 486, 492, 927], "subdivid": [333, 373], "10_fold": [333, 444], "gari": [333, 980], "huang": [333, 609, 979, 984], "manu": 333, "ramesh": [333, 956, 976, 979, 983], "tamara": 333, "berg": [333, 974, 975, 985], "erik": [333, 956, 976], "miller": [333, 981, 982, 986], "massachusett": 333, "amherst": 333, "30m": 333, "seven": [333, 925], "homepag": [333, 481, 948], "581012": [333, 442], "newswir": 333, "ltd": [333, 956], "804414": [333, 448], "47236": [333, 448], "fetch_rcv1": [333, 978, 982], "v2": [333, 448, 615, 636, 637, 928], "chronolog": [333, 448], "23149": [333, 448, 987], "781265": [333, 448], "lyrl2004": [333, 448], "2286": 333, "810596": 333, "2287": 333, "2288": 333, "uint32": [333, 448], "gmil": 333, "381327": 333, "ccat": 333, "e11": 333, "ecat": 333, "m11": 333, "656": 333, "lewi": [333, 980, 984], "yang": [333, 363, 368, 485, 590, 979, 980, 983, 985, 986, 987], "rose": 333, "361": [333, 370, 506, 507], "397": 333, "cup": [333, 932], "tcpdump": 333, "darpa": 333, "intrus": 333, "mit": [333, 344, 363, 373, 561, 562, 565, 570, 573, 594, 617, 618, 627, 786, 925], "lincoln": 333, "inject": [333, 370], "attack": 333, "unrealist": 333, "logged_in": 333, "resp": [333, 370, 548, 745, 746, 946, 981], "4898431": [333, 443], "41": [333, 335, 373, 420, 443, 482, 572, 575, 586, 609, 615, 636, 637, 731, 784, 934, 938], "976158": 333, "699691": 333, "619052": 333, "95373": 333, "kddcup99": [333, 443], "richard": [333, 372, 609, 974, 983, 985, 987, 988], "lippmann": 333, "joshua": [333, 975, 976, 978, 979, 985, 988], "hain": 333, "jonathan": [333, 977, 979, 980, 981, 982, 983, 985, 986, 989], "korba": 333, "da": [333, 988, 989], "yamanishi": 333, "takeuchi": 333, "william": [333, 335, 373, 561, 562, 565, 570, 573, 590, 932, 936, 980, 981, 982, 983, 988, 989], "miln": 333, "discount": [333, 363, 676, 706, 980, 983], "sixth": 333, "320": [333, 921, 946, 973], "press": [333, 363, 368, 373, 374, 396, 541, 561, 562, 565, 570, 573, 594, 784, 788, 925, 928, 930, 934], "household": 333, "statlib": 333, "dcc": 333, "ltorgo": 333, "cal_hous": 333, "1990": 333, "censu": 333, "bureau": 333, "resid": 333, "vacat": 333, "pace": 333, "kellei": [333, 975, 976], "ronald": [333, 936, 976, 986], "barri": [333, 981], "autoregress": 333, "291": [333, 335], "297": 333, "hyperspher": [334, 952], "interleav": [334, 473], "simplif": [334, 337, 343, 973, 979], "realiti": 334, "make_sparse_uncorrel": 334, "make_friedman1": [334, 370, 490, 494, 544, 545, 583], "make_friedman2": [334, 562, 564, 565, 566, 567, 568, 572, 575, 576], "reciproc": [334, 932], "make_friedman3": 334, "7826": 335, "4194": 335, "9490": 335, "9565": 335, "fisher": [335, 370, 455, 587, 952], "donor": 335, "michael": [335, 361, 363, 401, 579, 588, 642, 745, 922, 928, 956, 967, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 985, 987, 988], "marshal": 335, "arc": [335, 370], "nasa": 335, "juli": [335, 372, 684, 830, 942, 976, 980, 981, 982], "1988": 335, "sir": 335, "referenc": [335, 340, 341, 346, 351, 841, 842, 935, 980, 986], "duda": [335, 926], "hart": [335, 926, 981], "taxonom": 335, "annual": [335, 363, 676, 706, 846, 932, 945], "eugen": [335, 974, 979], "179": [335, 344, 370, 973], "188": [335, 344, 535], "1936": 335, "john": [335, 371, 487, 659, 685, 719, 824, 851, 852, 854, 855, 922, 928, 932, 973, 974, 975, 976, 978, 979, 980, 981, 982, 986, 988, 989], "wilei": [335, 922], "1950": [335, 932], "1973": [335, 361], "scene": [335, 935, 937, 986], "q327": 335, "d83": 335, "son": [335, 922], "isbn": [335, 363, 928], "471": 335, "22361": 335, "218": [335, 422, 666, 736], "dasarathi": 335, "1980": 335, "nose": [335, 976, 980], "pami": [335, 363, 675], "71": [335, 461, 680, 932, 965, 975], "gate": [335, 986], "1972": 335, "431": 335, "433": 335, "mlc": 335, "cheeseman": 335, "autoclass": 335, "conceptu": [335, 370, 930], "pressur": [335, 965], "serum": 335, "tc": [335, 352], "cholesterol": 335, "ldl": 335, "lipoprotein": 335, "hdl": 335, "s4": 335, "tch": 335, "s5": [335, 940], "ltg": [335, 452], "triglycerid": 335, "s6": 335, "glu": 335, "sugar": 335, "www4": 335, "ncsu": 335, "boo": 335, "bradlei": [335, 928], "efron": [335, 633, 634, 928], "iain": [335, 928], "johnston": [335, 928, 982], "407": 335, "499": [335, 344], "stanford": [335, 600, 633, 634, 784, 787, 788, 842, 930], "leastangle_2002": 335, "alpaydin": 335, "boun": 335, "nist": [335, 932], "bitmap": 335, "preprint": 335, "32x32": 335, "nonoverlap": 335, "4x4": [335, 368, 371], "garri": 335, "candela": 335, "dimmick": 335, "geist": 335, "grother": 335, "janet": 335, "handprint": 335, "nistir": 335, "5469": 335, "kaynak": 335, "msc": 335, "graduat": 335, "bogazici": 335, "cascad": 335, "kybernetika": 335, "ken": [335, 967, 975, 982], "tang": [335, 983, 984, 985], "ponnuthurai": 335, "suganthan": 335, "yao": [335, 979, 980, 981, 982, 989], "kai": [335, 514, 938, 980], "dimensionalityreduct": 335, "school": [335, 363, 738, 932], "nanyang": 335, "technolog": 335, "claudio": [335, 987, 988], "gentil": [335, 985], "linnerud": [335, 456], "men": 335, "club": 335, "waist": 335, "puls": 335, "chin": [335, 977], "situp": 335, "tenenhau": 335, "pratiqu": 335, "178": [335, 344, 461, 793], "alcalin": 335, "magnesium": 335, "phenol": 335, "nonflavanoid": 335, "proanthocyanin": 335, "od280": 335, "od315": 335, "dilut": 335, "class_2": [335, 461], "74": [335, 541, 747, 761, 828], "162": 335, "63": [335, 370, 508, 509, 516, 517, 676, 747, 761, 859, 860, 932], "59": [335, 344, 364, 461, 932, 973], "57": [335, 336, 354, 355, 356, 364, 656, 731, 782, 932, 942, 973], "278": [335, 789, 790], "1680": 335, "746": 335, "chemic": 335, "grown": [335, 370, 504, 505, 506, 507, 508, 509, 515, 516, 857, 858, 859, 860, 948], "itali": 335, "cultiv": 335, "thirteen": 335, "constitu": 335, "forina": 335, "parvu": 335, "pharmaceut": 335, "food": 335, "technologi": [335, 363, 952, 956], "brigata": 335, "salerno": 335, "16147": 335, "genoa": 335, "lichman": 335, "irvin": 335, "ca": [335, 363, 394, 857, 858, 944, 948], "aeberhard": 335, "cooman": 335, "vel": 335, "rep": [335, 952], "dept": 335, "cook": [335, 973, 979], "north": [335, 363], "queensland": 335, "submit": [335, 336, 337, 340, 341, 342, 343, 346, 351, 352], "technometr": [335, 365, 420, 425, 938], "rda": 335, "1nn": 335, "THE": 335, "OF": 335, "chemometr": 335, "perimet": 335, "textur": [335, 708, 709, 930], "concav": 335, "symmetri": [335, 650, 822, 825, 837, 930], "fractal": 335, "malign": [335, 451], "benign": [335, 451], "981": [335, 932], "143": [335, 422, 423, 944, 973, 974], "2501": 335, "053": [335, 344], "163": [335, 940], "019": [335, 344, 422], "345": 335, "427": [335, 457, 458, 534, 535], "106": [335, 825, 926, 974], "097": 335, "873": 335, "885": 335, "802": 335, "542": 335, "031": 335, "135": 335, "396": [335, 967], "008": [335, 344], "079": 335, "185": [335, 344, 806, 807], "4254": 335, "071": [335, 389], "027": 335, "058": 335, "156": 335, "664": 335, "055": [335, 932], "357": [335, 451, 850], "wolberg": 335, "nick": [335, 973, 979, 980, 981, 982], "olvi": 335, "mangasarian": 335, "goo": [335, 451], "gl": [335, 451], "u2uwz2": [335, 451], "needl": 335, "aspir": [335, 338], "fna": 335, "nuclei": 335, "multisurfac": 335, "msm": 335, "bennett": [335, 932], "midwest": 335, "cognit": 335, "societi": [335, 363, 365, 420, 425, 492, 578, 825, 837, 928, 946], "101": [335, 795, 974], "insepar": 335, "uw": [335, 985], "ftp": [335, 633, 634], "wisc": [335, 844], "prog": 335, "cpo": 335, "nuclear": 335, "tumor": 335, "spie": 335, "1993": [335, 425, 615, 636, 637, 948], "symposium": [335, 363, 411], "1905": 335, "861": [335, 738, 739, 932], "870": 335, "san": [335, 371, 944], "jose": [335, 609, 932, 981, 983], "prognosi": 335, "570": [335, 965], "577": 335, "august": [335, 363, 462, 485, 947, 973, 975, 976, 980, 987], "171": [335, 344, 738, 932], "961": [336, 354, 355, 356, 806], "wheel": [336, 338, 342, 354, 983, 985, 987], "quickest": 336, "registri": [336, 354], "uninstal": 336, "git": [336, 340, 342, 344, 346, 955, 973], "fork": [336, 338, 342, 346, 349], "miniforge3": [336, 346], "miniforg": [336, 346, 354], "env": [336, 346, 354], "virtualenv": [336, 338], "python3": [336, 354], "venv": [336, 354], "dev0": [336, 342, 955], "flag": [336, 338, 339, 341, 415, 561, 562, 578, 624, 626, 678, 735, 947, 979, 983, 984, 986, 987, 988], "pyx": [336, 338, 339, 344, 346], "pxd": [336, 338], "sklearn_fail_no_openmp": 336, "checkout": [336, 338, 342, 346], "cumbersom": 336, "reinstal": [336, 354], "setuptool": 336, "unix": [336, 371], "makefil": 336, "studio": [336, 956], "vs_buildtool": 336, "ex": [336, 339, 354, 977, 978], "desktop": 336, "screenshot": 336, "secondli": [336, 338, 349, 363, 370, 608, 928, 967], "architectur": [336, 340, 346, 349, 357, 419, 847, 936, 950, 956, 973], "cmd": 336, "powershel": 336, "struct": [336, 351, 976], "calcsiz": 336, "distutils_use_sdk": 336, "x86": 336, "buildtool": 336, "vc": 336, "vcvarsal": 336, "bat": 336, "x64": 336, "clang": [336, 339], "confusingli": 336, "usr": 336, "gcc": [336, 339, 344, 349], "libomp": [336, 985], "silicon": [336, 950], "m1": [336, 950], "januari": [336, 338, 354, 973, 974, 983, 985, 988], "arm64": [336, 338, 341, 354], "llvm": 336, "toolchain": 336, "xcode": 336, "conflict": [336, 338, 342, 346, 354, 980, 981], "condarc": 336, "channel_prior": 336, "reactiv": [336, 344], "echo": [336, 342], "cxx": 336, "cflag": 336, "cxxflag": 336, "ldflag": 336, "subfold": [336, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 454, 986], "fopenmp": [336, 339], "export": [336, 339, 340, 357, 861, 862, 948, 952, 955, 982], "cppflag": 336, "xpreprocessor": 336, "wl": 336, "rpath": 336, "lomp": 336, "sudo": [336, 354], "apt": [336, 346, 354], "pip3": 336, "pythonx": 336, "site": [336, 338, 341, 346, 354, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 956, 981], "precompil": 336, "arm": [336, 346, 921], "cython3": 336, "cento": 336, "yum": 336, "devel": 336, "gnu": 336, "port": [336, 354, 983], "pkg": 336, "build_ext": [336, 344], "lt": [336, 338], "build_clib": 336, "linker": [336, 339], "sysconfig": 336, "counterpart": [336, 921, 929, 947, 962], "get_config_var": 336, "sklearn_build_parallel": 336, "tracker": [337, 341, 346, 349, 352, 357, 950, 953], "prioriti": [337, 583, 777, 778, 953, 976], "guidelin": [337, 341, 343, 344, 346, 362, 363, 370], "reformul": 337, "xyz": 337, "someestim": 337, "glanc": 337, "relabel": [337, 765, 766, 846], "stall": [337, 341], "sprint": [337, 338, 950, 973], "unfinish": [337, 338], "supersed": [337, 978], "overflow": [337, 346, 349, 976, 980, 981, 982, 983, 984, 986], "submitt": 337, "strive": [337, 352, 956], "poster": [337, 338, 966], "expertis": [337, 338, 349], "unclear": [337, 338, 452], "pleasant": [337, 956], "chime": 337, "permiss": [337, 342, 352, 354, 956, 988], "matthew": [337, 343, 487, 693, 973, 976, 980, 982, 986, 987], "rocklin": [337, 343], "acknowledg": [337, 560], "struggl": 337, "everyon": [338, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "underrepres": 338, "merit": [338, 342, 352], "teach": 338, "priceless": 338, "abid": 338, "codeofconduct": 338, "hesit": 338, "ticket": 338, "typo": [338, 352, 973], "send": [338, 363, 375, 484], "valuabl": [338, 922, 956], "burden": [338, 821, 953], "slep": [338, 351, 950], "templat": [338, 342, 343, 351, 352, 508, 509, 514, 515, 516, 517, 952], "ecosystem": [338, 922, 951, 956], "contrib": [338, 340, 346, 349, 351, 952, 953], "numpydoc": [338, 351, 354, 356], "compli": [338, 351, 880, 953], "fulfil": [338, 363, 370, 747, 750, 751, 761, 809, 813, 928], "anyon": [338, 352, 956], "gist": [338, 346, 955], "repo": [338, 342, 953], "feasibl": [338, 818, 819, 829], "traceback": [338, 343, 346, 349, 419, 932, 955], "doubt": [338, 339, 342, 928, 938, 952], "companion": [338, 942], "transcript": 338, "inclus": [338, 340, 346, 401, 407, 704, 736, 932, 933, 973, 987], "yourlogin": 338, "flake8": [338, 354, 356, 530], "mypi": [338, 342, 354, 356, 984], "synchron": [338, 371], "my_featur": 338, "commit": [338, 342, 346, 352, 955, 973, 974, 975, 976], "modified_fil": 338, "committ": [338, 973], "modif": [338, 366, 370, 371, 945], "approv": [338, 352, 370], "mrg": [338, 346], "incomplet": [338, 354, 363, 656, 743, 922, 929, 967, 977, 979], "wip": [338, 346, 354], "matur": [338, 952, 953], "broad": [338, 351, 952], "collabor": 338, "_logist": 338, "doctest": [338, 351, 959, 973], "test_logist": [338, 346], "rst": [338, 342, 346, 967, 973, 978], "test_common": [338, 346], "caught": [338, 346, 357], "editor": [338, 346, 349], "submodul": [338, 342, 344, 362, 924, 930, 973], "intricaci": 338, "narr": [338, 351, 609, 849, 854, 973, 974], "unittest": 338, "tests_for_packag": 338, "static": [338, 340, 344, 346, 597, 598, 603, 604, 611, 612, 613, 614], "astropi": 338, "linux": [338, 340, 341, 346, 952, 973], "circleci": 338, "lint": [338, 346], "aarch64": [338, 346, 354], "gh": 338, "nogil": [338, 339], "cpython": [338, 339, 344, 988], "sklearn_run_float32_test": 338, "lengthi": [338, 349], "etiquett": 338, "she": [338, 839, 840, 983], "he": [338, 676, 706, 806, 807, 839, 840, 932, 967, 980, 987, 988], "shorten": [338, 947, 986], "leader": [338, 956], "grab": 338, "familiar": [338, 369, 981], "acquaint": 338, "experienc": 338, "abandon": 338, "someon": [338, 342, 351, 973], "glad": 338, "restructuredtext": 338, "_build": 338, "viewabl": 338, "pillow": [338, 354, 356], "sphinxext": [338, 354, 356], "opengraph": [338, 354, 356], "vast": 338, "examples_pattern": 338, "your_regex_goes_her": 338, "no_mathjax": 338, "latexpdf": 338, "elabor": [338, 933], "paragraph": [338, 371, 454, 967], "hood": [338, 928, 947], "colon": 338, "selectfpr": [338, 372, 543, 546, 549, 550, 551, 557, 989], "some_param": 338, "hello": [338, 346, 893], "goodby": 338, "liter": [338, 342, 956], "array_paramet": 338, "list_param": 338, "typed_ndarrai": 338, "multioutput_arrai": 338, "bracket": [338, 928], "delimit": [338, 938, 988], "unwritten": 338, "bibliograph": 338, "arxiv": [338, 413], "backtick": [338, 343], "nowadai": 338, "syntax": [338, 343, 346, 364, 921, 958, 984, 986], "_my": 338, "ref": [338, 345, 346, 922, 979], "currentmodul": 338, "succeed": 338, "stone": [338, 857, 858, 948], "subdirectori": 338, "subpackag": [338, 342, 950, 977, 982], "cleanup": [338, 973], "charg": 338, "test_requiring_mpl_fixtur": 338, "hang": [338, 955, 983, 984], "fruit": [338, 933], "asv": 338, "asv_benchmark": 338, "airspe": 338, "veloc": 338, "publicli": [338, 983], "zero_on": [338, 974], "futurewarn": [338, 346, 980, 981, 982, 984, 986, 989], "example_funct": 338, "exampleestim": 338, "_n_cluster": 338, "versionchang": 338, "meet": [338, 349, 352, 372, 523, 554, 806, 807, 846, 932, 945, 956, 981, 982, 983], "nit": 338, "retract": 338, "grammar": 338, "disambigu": [338, 777, 846, 945, 988], "immedi": [338, 349, 747, 761, 770, 771, 772, 981], "Will": [338, 448, 485, 578, 595, 596, 597, 603, 607, 608, 611, 612, 613, 614, 615, 616, 624, 626, 658, 665, 738, 814, 818, 822, 829, 976, 977, 979, 981], "clariti": [338, 346], "unhelp": 338, "extran": 338, "rewritten": [338, 600, 975, 977], "generos": 338, "reward": 338, "heard": 338, "ve": [338, 371, 955, 956, 967, 980], "enemi": 338, "courtesi": 338, "justifi": [338, 344, 361, 516], "occas": 338, "deserv": [338, 344], "digest": [338, 988], "overwhelm": 338, "sheer": [338, 956], "myself": 338, "trickiest": 338, "buri": 338, "inherit": [338, 340, 350, 351, 528, 627, 878, 880, 928, 973, 978, 979, 980, 981, 983, 984, 985, 988, 989], "mixin": [338, 351, 378, 379, 380, 381, 382, 383, 384, 385, 552, 880, 975, 984, 988], "classifiermixin": [338, 340, 351, 367, 984], "grep": 338, "delai": [338, 447, 747, 761, 770, 771, 772, 900, 987, 988], "some_funct": [338, 876], "some_iter": 338, "flavor": [338, 935], "pointer": [338, 346, 394, 982], "mandatori": [338, 371], "favorit": [338, 349, 956], "Being": [338, 352, 357, 928, 935], "killer": [338, 956], "blame": 338, "migrat": [338, 973], "ignorerevsfil": 338, "rev": [338, 558, 559], "ruin": 338, "maco": [339, 341, 354, 981, 985, 987], "sklearn_enable_debug_cython_direct": 339, "scratch": [339, 394, 932, 975], "magic": [339, 344, 373, 567, 572, 575], "gdb": [339, 341, 955], "entrypoint_to_bug_reproduc": 339, "cdef": 339, "state_to_print": 339, "test_val": 339, "unifi": [339, 347, 349, 350, 370, 588, 952, 973], "fuse": [339, 979, 989], "ongo": [339, 352], "concret": [339, 352, 372, 619, 625, 626, 627, 628, 841, 842, 928, 946], "alia": [339, 342, 346, 351, 568, 906, 938, 953, 973, 987], "shell": [339, 346, 349, 958, 967], "cythonx": 339, "language_level": 339, "wraparound": 339, "initializedcheck": 339, "nonecheck": 339, "cdivis": 339, "recompil": [339, 344, 354], "pep073": 339, "pathwai": 339, "memoryview": 339, "cnp": 339, "lightweight": [339, 747, 761, 770, 771, 772, 952], "virtual": [339, 354, 367, 956], "enter": [339, 342, 363, 394, 939], "prang": 339, "void": 339, "my_func": [339, 344], "st\u00e9fan": 339, "benhel": 339, "_cython_bla": 339, "protect": [339, 342, 898], "_openmp_help": 339, "cimport": [339, 347, 981], "omp_get_max_thread": 339, "prolifer": 340, "adopt": [340, 351, 845, 932, 946, 981, 988], "predomin": [340, 974], "overrid": [340, 371, 401, 408, 493, 499, 539, 540, 542, 544, 545, 548, 607, 615, 636, 637, 791, 792, 793, 795, 797, 799, 800, 801, 973, 981, 983, 987, 989], "creation": [340, 462, 463, 464, 466, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 607, 789, 790, 956, 980, 981, 982, 986], "optimis": [340, 363, 935, 952, 976, 986, 988], "rememb": [340, 343, 354, 371, 935, 939, 948], "param1": [340, 964], "param2": [340, 964], "param3": 340, "postpon": [340, 342], "requisit": 340, "liner": [340, 775], "ipython": [340, 343, 344, 346, 959, 967], "session": [340, 344, 349, 354, 951, 956, 967], "trainabl": 340, "trail": [340, 916], "overridden": [340, 351, 373, 493, 499, 567, 572, 575, 645, 981, 982], "n_features_in_": [340, 351, 383, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 561, 562, 578, 579, 580, 581, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 745, 746, 747, 750, 751, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 984, 986, 988], "slep010": [340, 984], "duck": [340, 351, 983], "boilerpl": [340, 956, 967], "check_x_i": [340, 347, 977, 981, 982, 987], "check_arrai": [340, 347, 485, 977, 981, 982, 983, 984, 985, 986, 987, 988, 989], "templateclassifi": 340, "demo_param": 340, "myestim": 340, "subestim": 340, "my_extra_param": 340, "my_estim": [340, 364], "subestimator__c": 340, "subestimator__class_weight": 340, "subestimator__du": 340, "subestimator__fit_intercept": 340, "subestimator__intercept_sc": 340, "subestimator__l1_ratio": 340, "subestimator__max_it": 340, "subestimator__multi_class": 340, "subestimator__n_job": 340, "subestimator__penalti": 340, "subestimator__random_st": 340, "subestimator__solv": 340, "subestimator__tol": 340, "subestimator__verbos": 340, "subestimator__warm_start": 340, "__c": 340, "__class_weight": 340, "unpack": 340, "easiest": [340, 346, 364, 929], "__repr__": [340, 953, 982], "setattr": 340, "accomplish": [340, 361, 497, 929, 933, 935, 956], "deepcopi": 340, "__sklearn_clone__": [340, 386, 989], "frozen": 340, "frozentransform": 340, "fitted_transform": [340, 415], "__getattr__": 340, "_estimator_typ": [340, 351, 978], "regressormixin": [340, 351, 416, 984], "clustermixin": 340, "is_classifi": [340, 351], "predict_log_proba": [340, 351, 500, 501, 502, 504, 506, 508, 510, 515, 544, 545, 609, 610, 627, 747, 750, 751, 761, 770, 784, 785, 786, 787, 788, 806, 809, 846, 851, 854, 857, 859, 947, 973, 986], "_base": 340, "programmat": [340, 450, 982], "_get_tag": [340, 984], "allow_nan": [340, 868, 870, 989], "binary_onli": [340, 983, 984], "multioutput_onli": 340, "no_valid": 340, "non_determinist": [340, 987], "primari": [340, 351, 368, 466, 939, 956], "_safe_split": 340, "preserves_dtyp": 340, "poor_scor": 340, "requires_fit": 340, "requires_positive_x": [340, 983, 988], "requires_i": [340, 984], "requires_positive_i": 340, "_skip_test": 340, "_xfail_check": 340, "check_nam": 340, "xfail": [340, 346], "skiptestwarn": 340, "x_type": 340, "2darrai": 340, "signifi": [340, 363, 532, 758, 937], "1dlabel": 340, "2dlabel": 340, "_more_tag": 340, "mymultioutputestim": 340, "_required_paramet": 340, "base_estim": [340, 361, 389, 504, 505, 506, 507, 622, 780, 783, 846, 921, 928, 984, 986, 987, 988], "ridgeregress": 340, "idiosyncrat": 340, "subclass": [340, 373, 525, 898, 978, 981, 986], "onetoonefeaturemixin": [340, 385], "classnameprefixfeaturesoutmixin": [340, 385, 988], "auto_wrap_output_kei": 340, "mytransform": 340, "__init_subclass__": 340, "ownership": 340, "pep8": [340, 342, 346], "indent": [340, 898], "nsampl": [340, 745, 746], "statement": [340, 343, 346, 349, 351, 368, 950, 967], "flow": 340, "client": 340, "corollari": 340, "foo": [340, 532, 936], "baz": [340, 532], "pyflak": 340, "asanyarrai": 340, "hadamard": 340, "choose_random_sampl": 340, "freestand": 340, "unmodifi": [340, 351], "random_state_": [340, 487, 578, 798, 987], "gaussiannois": 340, "showcas": 340, "quasi": [340, 806, 807, 928], "assert_allclos": 340, "rtol": [340, 789, 790, 794], "atol": [340, 623, 625, 789, 790, 794], "checklist": 341, "unclaim": 341, "workflow": [341, 342, 350, 367], "boil": [341, 365], "markdown": 341, "saniti": [341, 813, 932, 973, 974], "outdat": 341, "diff": [341, 932], "valgrind": 341, "platform": [341, 349, 351, 357, 956, 978, 981, 982, 984, 986, 987], "x86_64": 341, "yep": 341, "gperftool": 341, "debugg": [341, 346], "gprof": 341, "callgrind": 341, "kcachegrind": 341, "warm": [341, 351, 482, 488, 494, 496, 497, 561, 604, 610, 617, 619, 627, 628, 629, 928, 953, 983, 985, 987], "homebrew": [341, 354], "freebsd": 341, "rrrcn": 342, "pep101": 342, "build_tool": 342, "blocker": 342, "mileston": 342, "maint_tool": 342, "sort_whats_new": 342, "whats_miss": 342, "fixm": [342, 351], "feedstock": 342, "recip": [342, 929, 956], "yaml": 342, "whats_new": [342, 346], "v0": [342, 422, 423, 429, 463, 539, 540, 542, 747, 761, 808, 811, 974, 981, 982, 983], "freez": [342, 354, 357, 953, 956, 981], "afterward": [342, 486, 492, 773], "0rc1": 342, "__version__": 342, "draft": [342, 352], "rebas": 342, "bugfix": [342, 973, 987], "backport": [342, 347, 980], "maint": 342, "enh": 342, "blindli": 342, "invit": 342, "cherri": 342, "shortlog": 342, "f2": [342, 933], "sed": [342, 973], "front": [342, 980], "rc1": 342, "suffix": [342, 772, 932, 983], "brows": 342, "3a": 342, "22wheel": 342, "pyproject": 342, "toml": 342, "oldest": [342, 447], "abi": 342, "acronym": 342, "deliveri": 342, "whl": 342, "22publish": 342, "went": [342, 932], "bot": [342, 937, 987], "sync": 342, "testpypi": 342, "tarbal": [342, 988], "wheelhouse_upload": 342, "twine": 342, "rrr": 342, "symlink": 342, "latestst": 342, "tmp": 342, "ln": [342, 928, 936, 942], "versionwarn": 342, "secur": [342, 351, 952, 953, 956, 969], "twitter": 342, "linkedin": 342, "squash": [342, 373, 482, 488, 493, 499], "authorship": 342, "permalink": 342, "_hist_gradient_boost": 342, "_iter": 342, "pickl": [342, 351, 357, 371, 539, 540, 542, 789, 790, 952, 953, 975, 978, 979, 980, 981, 982, 983, 986, 987, 988, 989], "checker": [342, 769], "type_check": 342, "test_enable_hist_gradient_boost": 342, "enable_hist_gradient_boost": [342, 982], "enable_my_experimental_featur": 342, "indefinit": 342, "incentiv": 342, "workabl": 343, "stackoverflow": [343, 346, 349, 955], "blogpost": 343, "mcve": [343, 346, 349], "my_data": 343, "with_mean": [343, 829, 840, 942, 981, 986], "default_scor": 343, "other_scor": 343, "72": [343, 773], "scrollbar": 343, "tripl": 343, "fenc": 343, "qualifi": 343, "a674e682c281": 343, "lda_featur": 343, "lda_model": 343, "n_topic": [343, 487, 980], "minimalist": [343, 371, 955], "continuous_featur": 343, "positive_featur": 343, "invest": [344, 956], "idiom": 344, "wast": [344, 367, 368, 921], "crunch": 344, "performancetip": 344, "reimplement": [344, 351, 979, 983], "spottabl": 344, "amen": [344, 373, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 921], "cpp": 344, "engag": [344, 352], "tent": 344, "somewher": [344, 932, 967], "prun": 344, "14496": [344, 982], "682": 344, "ncall": 344, "tottim": 344, "percal": 344, "cumtim": 344, "lineno": 344, "609": 344, "017": [344, 422, 423], "042": 344, "151": [344, 370, 944], "_nls_subproblem": 344, "1263": 344, "157": 344, "_po": 344, "681": 344, "673": 344, "057": [344, 488], "006": 344, "047": 344, "_initialize_nmf": 344, "010": [344, 940], "_spars": 344, "_neg": 344, "337": 344, "461": 344, "hotspot": 344, "16159": [344, 984], "840": 344, "2833": 344, "653": [344, 562, 565, 576], "_dotbla": 344, "651": 344, "014": 344, "636": 344, "036": [344, 423], "1397": 344, "2780": 344, "167": [344, 973], "064": [344, 940], "1542": 344, "043": 344, "2734": 344, "181": 344, "fromnumer": 344, "1185": 344, "lapack_lit": 344, "dgesdd": 344, "748": 344, "009": 344, "065": 344, "rewrit": [344, 948, 966, 973], "shallow": [344, 370, 512, 513, 864], "4x": [344, 988], "line_profil": 344, "wire": [344, 485, 492], "profile_default": 344, "ipython_config": 344, "terminalipythonapp": 344, "interactiveshellapp": 344, "lprun": 344, "qtconsol": 344, "_nmf": 344, "137": [344, 974], "73153": 344, "h_init": 344, "138": [344, 370, 373, 932], "5863": 344, "172": [344, 444, 445, 600, 928], "nl": 344, "173": [344, 535], "175": [344, 942], "112141": 344, "2336": 344, "wtv": 344, "176": [344, 782, 933, 940], "16144": 344, "336": [344, 942], "wtw": 344, "177": 344, "113": [344, 976], "638": 344, "1880": 344, "182": [344, 370], "195133": 344, "305": 344, "grad": [344, 956], "495761": 344, "777": 344, "proj_gradi": 344, "184": [344, 965], "2449": 344, "130": 344, "186": [344, 738, 932], "187": [344, 535, 933, 965, 975], "1474": 344, "4474": 344, "inner_it": 344, "83833": 344, "hn": 344, "189": [344, 846, 945], "194239": 344, "191": [344, 933], "48858": 344, "150407": 344, "102": [344, 965, 975], "gradd": 344, "193": [344, 370, 666, 736, 945], "515390": 344, "349": 344, "dqd": 344, "pin": 344, "memory_profil": [344, 354, 356], "memit": 344, "mprun": 344, "166": [344, 932, 973], "152": 344, "1e7": 344, "402344": 344, "standalon": [344, 609, 849, 955], "bianp": 344, "conda_prefix": 344, "pydebug": 344, "extra_cflag": 344, "dpy_debug": 344, "num_cor": 344, "dbg": 344, "fortun": [344, 370, 967, 986, 987], "my_fil": 344, "callgrin": 344, "prof": 344, "encapsul": [345, 364], "artist": [345, 390, 583, 649, 651, 652, 653, 753, 863], "classmethod": [345, 390, 582, 583, 648, 649, 651, 652, 653, 753], "line_": [345, 390, 649, 651, 652, 653, 753], "gridspecfromsubplotspec": 345, "subplot_spec": 345, "get_subplotspec": 345, "ax_top_left": 345, "ax_top_right": 345, "ax_bottom": 345, "bounding_ax_": [345, 583], "lines_": [345, 583, 753], "contours_": [345, 583], "advic": [346, 373, 573, 574], "forth": 346, "userscript": 346, "tampermonkei": 346, "greasemonkei": 346, "shortcut": [346, 373], "pr_number": 346, "navig": [346, 975], "overlai": [346, 583], "codecov": 346, "test_sparsifi": 346, "pdb": 346, "ipdb": [346, 967], "pdbcl": 346, "terminalpdb": 346, "lf": 346, "ff": 346, "tb": [346, 522, 523, 524, 525, 526, 527, 528, 529], "runxfail": 346, "werror": 346, "mailman": 346, "listinfo": 346, "crowd": [346, 352, 929, 953, 955], "imped": 346, "attent": [346, 558, 559, 946], "pytb": 346, "stdin": [346, 967], "perman": 346, "25163598": 346, "issuenumb": 346, "1506": 346, "volunt": 346, "establish": [346, 349, 352, 922], "clarifi": [346, 352, 741], "believ": [346, 349, 956], "regression_test": 346, "0008": 346, "patienc": [346, 351], "manifest": [346, 929, 935], "fault": [346, 981, 983, 985], "glibc": 346, "uniniti": 346, "trace": [346, 363, 376, 424, 426, 427, 430, 431, 432, 640, 644, 929, 984], "supp": 346, "readm": [346, 371, 444], "my_test_script": 346, "mobil": 346, "deploy": [346, 952, 953, 956], "scalewai": 346, "aw": 346, "graviton": 346, "laptop": [346, 419, 847, 987, 988, 989], "workstat": 346, "qemu": 346, "docker": [346, 357, 986, 987], "multiarch": 346, "ppc64le": 346, "filesystem": [346, 354, 986], "pushd": 346, "wget": 346, "arm64v8": 346, "mount": 346, "privileg": 346, "ye": [346, 351, 816, 833, 928], "pwd": 346, "reinit": 346, "bashrc": 346, "ephemer": 346, "evolv": [347, 988], "as_float_arrai": 347, "column_or_1d": [347, 984, 988], "multitarget": 347, "multi_output": [347, 869], "safe_index": [347, 983], "check_memori": [347, 351, 980], "5488135": 347, "71518937": 347, "60276338": 347, "54488318": 347, "has_fit_paramet": 347, "randomized_range_find": [347, 974, 979], "arrayfunc": 347, "cholesky_delet": 347, "min_po": 347, "least_angl": 347, "fast_logdet": 347, "safe_sparse_dot": [347, 983], "weighted_mod": 347, "sample_without_replac": [347, 979], "n_popul": [347, 901], "sparsefunc": [347, 986], "mean_variance_axi": [347, 979, 986], "sparsefuncs_fast": 347, "inplace_csr_row_normalize_l1": 347, "inplace_csr_row_normalize_l2": 347, "inplace_csr_column_scal": 347, "sort_graph_by_row_valu": [347, 988], "single_source_shortest_path_length": 347, "dijkstra": [347, 639, 929], "graph_shortest_path": [347, 986], "all_estim": [347, 983, 984, 988], "all_displai": [347, 988], "all_funct": [347, 988], "is_multilabel": 347, "dict_learn": [347, 482, 488, 497, 974, 981, 983, 986, 987, 989], "gen_batch": [347, 890], "safe_mask": 347, "safe_sqr": 347, "murmurhash3_32": 347, "murmurhash3_x86_32": [347, 897], "cryptograph": 347, "lookup": [347, 897, 982], "bloom": [347, 897], "384616559": 347, "3910350737": 347, "murmurhash": 347, "graphical_lasso": [347, 422, 423, 981], "kit": 349, "toolbox": [349, 952, 956], "multilay": [349, 930], "kera": [349, 952], "forese": 349, "redesign": [349, 973], "pystruct": [349, 952], "ssvm": 349, "seqlearn": 349, "4143": 349, "meanwhil": [349, 947], "pipegraph": 349, "squared_loss": [349, 986], "undertak": 349, "discourag": [349, 354, 640], "slowli": [349, 351, 495, 886], "ordinarili": [349, 351], "corrobor": 349, "proof": [349, 370, 843, 944], "happi": [349, 352, 765, 766], "road": 349, "bridg": [349, 929, 952], "reproduct": [349, 928, 955], "guidanc": [349, 373], "gitter": [349, 950, 980, 981], "value_kei": [349, 864], "levenshtein": 349, "dna": [349, 579, 922], "rna": 349, "pain": 349, "suppli": [349, 363, 597, 869, 870, 935, 956, 977, 979, 981, 986], "leven": 349, "acctcctagaag": 349, "acctactagaagtt": 349, "gaatattaggccga": 349, "lev_metr": 349, "multiprocess": [349, 351, 898, 900, 935, 973, 981, 987], "exec": 349, "nvidia": 349, "cuda": [349, 359], "reiniti": 349, "culprit": 349, "refus": [349, 839, 840], "safeti": [349, 364, 898, 953, 983], "forkserv": 349, "joblib_start_method": 349, "set_start_method": 349, "dozen": [350, 373], "unsuperv": [350, 366], "newli": [350, 370, 414, 939, 979, 980, 988], "leakag": [350, 351, 364, 969], "disclos": 350, "entail": [350, 827, 829, 946], "r_squar": 350, "searchcv": [350, 988], "tacit": 351, "inconsist": [351, 357, 371, 459, 460, 527, 851, 854, 873, 938, 947, 969, 973, 978, 979, 980, 981, 983, 986, 988, 989], "elsewher": [351, 413, 414, 422, 423, 429], "formal": [351, 352, 363, 370, 789, 790, 929, 932, 933, 936], "thereof": 351, "transduct": [351, 363, 844, 845, 953], "position": 351, "serial": [351, 952, 953, 969, 973, 981, 985], "unpickl": [351, 357, 527, 789, 790, 979, 985, 989], "pep257": 351, "nuanc": 351, "flaw": [351, 370], "terminologi": [351, 981], "est1": [351, 583], "est2": [351, 583], "exemplifi": 351, "disregard": [351, 371, 384, 416, 433, 434, 435, 503, 505, 507, 509, 511, 513, 516, 519, 521, 562, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 623, 624, 629, 630, 672, 673, 674, 735, 782, 783, 792, 800, 807, 818, 819, 825, 826, 829, 834, 837, 838, 840, 850, 852, 855, 858, 860, 932, 981], "_score": [351, 747, 761, 772, 932, 973, 986], "_loss": [351, 932], "divers": [351, 370], "8022": [351, 424, 982], "abstract": [351, 368, 373, 569, 719, 952, 973], "notfittederror": [351, 798, 916, 977, 979, 982, 983, 989], "descriptor": [351, 459, 460], "hoc": 351, "spectral_embed": [351, 929, 974, 977, 979, 981, 983, 986, 987, 988], "maxabs_scal": [351, 818, 981], "astrai": 351, "readthedoc": 351, "entireti": 351, "shield": 351, "n_output": [351, 370, 380, 384, 385, 389, 394, 397, 416, 420, 433, 434, 435, 483, 485, 487, 488, 490, 493, 494, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 520, 521, 533, 534, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 561, 562, 579, 581, 584, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 621, 623, 624, 625, 626, 627, 629, 630, 672, 673, 678, 695, 696, 698, 700, 701, 703, 704, 735, 738, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 796, 798, 799, 800, 805, 806, 807, 808, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 826, 827, 828, 829, 841, 842, 844, 845, 849, 850, 851, 852, 854, 855, 857, 858, 859, 860, 875, 903, 932, 933, 948, 980, 983], "n_target": [351, 366, 433, 434, 435, 436, 475, 507, 562, 594, 597, 598, 601, 602, 603, 604, 605, 607, 608, 611, 612, 613, 614, 615, 616, 622, 623, 624, 625, 626, 632, 633, 634, 635, 636, 637, 638, 933, 985, 987], "synonym": [351, 791, 792, 793, 799, 800, 801], "themat": 351, "alphanumer": [351, 539, 540, 542], "statistician": [351, 829], "prescrib": 351, "baggingclassifi": [351, 370, 507, 859, 976, 979, 980, 981, 984, 988, 989], "estimator__max_depth": [351, 921], "improp": [351, 980], "pairwise_kernel": [351, 373, 403, 594, 715, 815, 930, 973, 980], "redundantli": 351, "distancemetr": [351, 369, 789, 790, 935, 981, 985, 986, 987], "di": [351, 363, 368, 482, 488, 615, 636, 637, 842, 977, 986], "vectori": [351, 983], "noun": 351, "rout": [351, 987], "fit_param": [351, 385, 389, 394, 397, 416, 483, 485, 487, 488, 490, 493, 494, 500, 518, 520, 521, 533, 534, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 579, 581, 586, 589, 590, 591, 592, 593, 747, 750, 751, 753, 761, 770, 771, 772, 773, 774, 776, 781, 782, 783, 793, 798, 801, 805, 808, 809, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 826, 827, 828, 829, 841, 842, 980, 983, 984, 985, 987, 989], "venu": [351, 955], "broadli": [351, 363], "consolid": [351, 352, 973], "coo": [351, 504, 505, 643, 816, 865, 869, 870, 935, 974], "lil": [351, 504, 505, 816, 865, 891, 935], "csgraph": [351, 986], "absent": [351, 371, 704, 770], "densifi": [351, 368, 609, 610, 617, 619, 627, 628, 629, 849, 922, 975], "lossili": 351, "unnorm": [351, 487, 929, 979, 980], "encompass": [351, 401, 407, 506, 507, 929], "is_regressor": 351, "get_n_split": [351, 748, 749, 752, 754, 755, 756, 757, 760, 762, 763, 764, 765, 766, 767, 768], "elasticnetcv": [351, 597, 603, 611, 612, 613, 614, 632, 928, 973, 976, 984, 986, 987], "estimatorcv": [351, 953], "loo": [351, 755, 984], "type_of_target": [351, 816, 830, 933, 987, 988], "hashabl": [351, 817, 820, 943], "labelencod": [351, 520, 823, 943, 973, 981, 988], "canonic": 351, "xxx": 351, "everywher": 351, "multilabelbinar": [351, 778, 813, 822, 933, 958, 976, 978, 979, 981, 982], "nonetheless": [351, 932], "wherein": 351, "amber": 351, "return_cov": [351, 518, 519, 562, 809], "test_idx": 351, "_idx": 351, "label1": 351, "label2": 351, "class_label": [351, 508, 512, 515, 609, 610, 617, 619, 625, 626, 627, 857, 859, 875, 947], "bincount": [351, 367, 508, 512, 515, 609, 610, 617, 619, 625, 626, 627, 849, 851, 854, 857, 859, 874, 875, 980], "rebalanc": 351, "compute_class_weight": [351, 976, 987], "check_cv": [351, 978], "obei": [351, 930], "triangl": [351, 368, 395, 398, 410, 650, 930, 935], "concurr": [351, 371, 898, 985, 987], "unset": [351, 981], "get_scor": [351, 683, 980], "check_scor": 351, "uppercas": [351, 986], "unavail": [351, 609, 610, 893, 980, 986], "deadlock": 352, "meritocrat": 352, "consult": [352, 932], "unanim": 352, "outreach": 352, "brand": [352, 354], "social": [352, 363, 956], "emeritu": [352, 950], "recant": 352, "strateg": 352, "entiti": [352, 676, 706], "duti": 352, "resign": 352, "occasion": [352, 677, 982], "escal": 352, "fallback": [352, 777, 778, 932], "hereaft": 352, "lazi": [352, 371, 946, 977], "opinion": 352, "veto": 352, "appeal": 352, "revis": [352, 621], "insuffici": [353, 931, 966], "greatest": [354, 816, 981], "afraid": 354, "64bit": [354, 973], "miniconda": 354, "administr": 354, "venvpython": 354, "venvsourc": 354, "activatesourc": 354, "activatesklearn": 354, "activatepip": 354, "learnpip": 354, "learnpip3": 354, "learnconda": 354, "installedpython3": 354, "virtualenvpython3": 354, "installedpython": 354, "virtualenvpython": 354, "installedconda": 354, "environmentpython": 354, "dnf": 354, "pacman": 354, "raspberri": 354, "lock": [354, 356, 898, 900], "19137": 354, "py3": 354, "apk": 354, "bind": [354, 973, 980, 981], "buster": 354, "fedora30": 354, "pkgsrc": 354, "py39": 354, "daal": 354, "daal4pi": 354, "intelpython": 354, "plugin": 354, "appdata": 354, "usernam": 354, "windowsapp": 354, "environmenterror": 354, "errno": 354, "pythonsoftwarefound": 354, "7_qbz5n2kfra8p0": 354, "localcach": 354, "python37": 354, "292": [354, 370, 685], "data_nam": 354, "australian": 354, "data_vers": 354, "lift": 354, "regedit": 354, "menu": 354, "launch": [354, 956], "hkey_local_machin": 354, "currentcontrolset": 354, "longpathsen": 354, "broken": [354, 367, 550, 551, 586, 671, 865, 932, 976, 980, 981, 982, 984, 987], "retrain": [357, 953, 989], "inconsistentversionwarn": [357, 989], "simplefilt": 357, "model_from_prevision_vers": 357, "original_sklearn_vers": [357, 527], "untrust": 357, "malici": 357, "unsupport": [357, 444, 981, 986], "inadvis": 357, "immut": 357, "snapshot": [357, 510, 511, 953], "portabl": 357, "alex": [357, 371, 947, 973, 976, 981, 983, 984, 985, 987, 988, 989], "gaynor": 357, "sio": 357, "obj": [357, 518, 519, 893, 898], "get_untrusted_typ": 357, "unknown_typ": 357, "exchang": [357, 955], "markup": 357, "pmml": [357, 952], "onnx": [357, 952, 953], "xml": 357, "sklearn2pmml": [357, 952], "affero": 357, "gplv3": 357, "datastructur": [359, 981, 985], "namespac": 359, "array_api": 359, "xp": [359, 366, 824], "x_np": 359, "y_np": 359, "x_cu": 359, "y_cu": 359, "devic": [359, 367, 533], "array_api_dispatch": [359, 419, 847], "_estimator_with_converted_arrai": 359, "transfer": [359, 928, 953], "_array_api": 359, "cupy_to_ndarrai": 359, "_arrai": 359, "lda_np": 359, "submatrix": [360, 378, 402, 404], "unusu": [360, 938, 942, 981], "submatric": 360, "bipartit": [360, 404, 462, 937], "subgraph": 360, "a_n": 360, "lceil": [360, 938], "log_2": [360, 514, 938], "rceil": [360, 938], "bmatrix": 360, "u_2": 360, "u_": [360, 433, 434, 435], "n_column": [360, 402, 404], "inderjit": [360, 404], "blockwis": [360, 928], "bistochast": [360, 402], "l_": [360, 562, 603, 691, 932], "k_": [360, 373, 567, 570, 572, 575, 724, 942], "u_1": 360, "v_1": 360, "v_2": 360, "v_": [360, 371], "kluger": [360, 402, 464], "yuval": [360, 402], "microarrai": [360, 402, 464, 579, 922], "cap": [360, 363, 705, 932, 982], "hochreit": [360, 670], "hungarian": [360, 670], "bodenhof": [360, 670], "fabia": [360, 670], "acquisit": [360, 670], "murphi": [361, 594, 925], "discriminatori": 361, "wilk": 361, "tricki": [361, 929], "logit": [361, 373, 609, 610, 928], "f_i": 361, "train_set": 361, "test_set": 361, "disjoint": [361, 363, 364, 389, 655, 681, 705, 707, 929], "platt": [361, 389, 851, 852, 854, 855, 947], "_i": [361, 370, 923, 928, 932, 936, 947], "_j": [361, 923], "f_j": [361, 940], "allan": [361, 985], "meteorologi": 361, "climatologi": 361, "precipit": 361, "wea": 361, "640": [361, 441, 457, 458, 534, 535, 921], "650": 361, "1990a": 361, "menon": 361, "ak": [361, 987, 988], "jiang": [361, 977, 984], "xj": 361, "vembu": 361, "ohno": 361, "machado": [361, 673], "703": [361, 464], "710": 361, "kull": [361, 932], "silva": [361, 639, 929, 984, 986], "filho": 361, "flach": [361, 932], "mario": [361, 977, 979, 987, 988, 989], "w\u00fcthrich": 361, "merz": 361, "2023": [361, 988], "actuari": 361, "refurbish": 362, "rough": [362, 938, 960], "uniti": 362, "lipschitz": [362, 944], "usecas": 363, "mu_j": 363, "coher": 363, "elong": 363, "lloyd": [363, 395, 398, 400, 410, 987, 988], "distant": [363, 643, 660, 935], "sergei": [363, 975, 979, 980, 981, 982, 983], "vassilvitskii": [363, 398, 411], "eighteenth": 363, "siam": [363, 367, 403, 411, 413, 486, 492], "industri": [363, 952], "predetermin": [363, 929], "scullei": 363, "19th": 363, "exemplar": [363, 392, 405, 966], "sent": [363, 778], "leftarrow": [363, 936, 946], "foral": [363, 373, 564], "neq": [363, 932, 934, 942], "notin": 363, "hill": [363, 399, 412, 983], "climb": [363, 399, 412], "maxima": [363, 373], "x_j": [363, 373, 565, 566, 570, 573, 574, 576, 923, 924, 928, 935, 947, 948], "dictat": 363, "solvabl": 363, "stella": [363, 403, 413], "yu": [363, 403, 413, 609, 928, 936, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987], "jianbo": [363, 403, 413, 642], "shi": [363, 403, 413, 642], "anil": [363, 403, 413], "daml": [363, 403, 413], "victor": [363, 403, 413, 980, 983], "minden": [363, 403, 413], "lex": [363, 403, 413], "ying": [363, 403, 413, 987], "adjac": [363, 368, 403, 413, 536, 537, 586, 642, 646, 891, 929, 935, 966], "adjacency_matrix": 363, "ulrik": [363, 403, 413, 642], "von": [363, 403, 413, 642, 952, 980, 981], "luxburg": [363, 403, 413, 642], "jitendra": [363, 403, 413, 642], "malik": [363, 403, 413, 642], "walk": [363, 369, 976], "marina": 363, "meila": 363, "ng": [363, 368, 642, 795, 936, 938, 984], "jordan": [363, 368, 642, 745, 983, 984, 987, 988], "yair": [363, 642], "precondit": [363, 403, 413, 646, 948], "zhuzhunashvili": [363, 413], "forbid": [363, 370], "macroscop": 363, "occupi": [363, 932], "manhattan": [363, 393, 397, 401, 408, 650, 712, 721, 728, 729, 730, 796, 930, 935, 977, 982], "bisecting_strategi": [363, 395], "largest_clust": [363, 395], "biggest_inertia": [363, 395], "biggest": [363, 366, 368, 395], "steinbach": [363, 988], "karypi": 363, "vipin": 363, "egin": 363, "minnesota": 363, "june": [363, 929, 979], "weblog": 363, "abirami": 363, "mayilvahanan": 363, "emerg": [363, 956], "ijet": 363, "jian": 363, "xinyu": 363, "gou": 363, "baod": 363, "hebei": 363, "knee": 363, "triangular": [363, 414, 562, 929], "whichev": [363, 370, 495, 512, 513, 584, 601, 605, 607, 615, 633, 634, 648], "conjunct": [363, 545, 747, 750, 751, 753, 761, 770, 771, 772, 773, 776, 899, 922, 928, 988], "extract_dbscan": 363, "radius_neighbors_graph": [363, 374, 396, 791, 792, 793, 795, 797, 799, 800, 801, 802, 935, 977, 982, 985], "ester": [363, 374, 396], "kriegel": [363, 374, 396, 401, 408, 795, 938], "sander": [363, 374, 396, 401, 408, 795, 938, 982, 983], "xu": [363, 366, 374, 396, 946, 986, 987], "portland": [363, 374, 396], "aaai": [363, 374, 396, 784, 934], "226": [363, 374, 396], "revisit": [363, 374, 396], "schubert": [363, 374, 396, 401, 977, 978, 981, 982, 984, 985, 986, 987], "tod": [363, 374, 396], "max_ep": [363, 401, 406, 408], "nearbi": [363, 935], "cluster_hierarchy_": [363, 401], "planar": 363, "peripheri": 363, "hdbscan": [363, 952], "wall": 363, "ankerst": [363, 401, 408], "mihael": [363, 401, 408], "marku": [363, 401, 408, 981, 983, 984, 985], "breunig": [363, 401, 408, 795, 938], "han": [363, 394, 401, 408, 973, 981, 982, 986], "j\u00f6rg": [363, 401, 408, 981], "sigmod": [363, 401, 408, 795, 938], "cft": 363, "lossi": 363, "cf": [363, 366, 394, 651, 928, 942, 953], "subclust": [363, 394], "till": [363, 394, 738, 932], "temporarili": [363, 978], "farthest": 363, "brc": [363, 394], "tian": [363, 394, 978, 979, 980], "raghu": [363, 394], "ramakrishnan": [363, 394], "maron": [363, 394], "livni": [363, 394], "sfu": [363, 394], "coursecentr": [363, 394], "459": [363, 394], "zhang96": [363, 394], "roberto": [363, 394], "perdisci": [363, 394], "jbirch": [363, 394], "java": [363, 394, 952], "satisfi": [363, 601, 605, 650, 668, 686, 687, 789, 790], "labels_pr": [363, 655, 656, 665, 666, 668, 681, 686, 687, 705, 707, 736, 743], "unadjust": [363, 932, 985], "swap": [363, 368, 667, 686, 911, 912, 973], "ri": [363, 656, 736], "c_2": [363, 929], "unord": [363, 370, 942], "esp": [363, 973], "hubert": [363, 656, 666, 736], "arabi": [363, 656, 666, 736], "steinlei": [363, 656], "psycholog": [363, 656, 667], "agreement": [363, 655, 667, 705, 707, 743, 932], "22504": 363, "69": [363, 422, 423, 558, 559, 706, 932, 942, 965], "10526": 363, "u_i": [363, 433, 434, 435, 705], "v_j": [363, 705, 937], "veb2009": 363, "a_i": 363, "b_j": 363, "yat2016": 363, "average_method": [363, 655, 707, 981], "vinh": [363, 655], "veb2010": 363, "strehl": 363, "joydeep": 363, "583": [363, 965], "617": [363, 719], "1162": 363, "153244303321897735": 363, "epp": [363, 655], "bailei": [363, 655], "26th": [363, 676, 706, 932], "1553374": 363, "1553511": 363, "9781605585161": 363, "csail": [363, 617, 618, 627, 786], "volume11": 363, "vinh10a": 363, "algesheim": 363, "tesson": 363, "30750": 363, "1038": 363, "srep30750": 363, "rosenberg": [363, 668, 687, 743], "hirschberg": [363, 668, 687, 743], "b2011": 363, "homogeneity_completeness_v_measur": [363, 982], "68": [363, 486, 492, 541, 973], "n_k": [363, 501], "n_c": [363, 610], "julia": [363, 668, 687, 743], "media": [363, 956], "hila": 363, "becker": [363, 956, 976, 985], "fowlkes_mallows_scor": [363, 932, 979, 981], "fmi": [363, 681], "fp": [363, 663, 669, 681, 732, 733, 734, 737, 932], "fn": [363, 663, 669, 681, 732, 733, 734, 737, 932, 933], "47140": 363, "fowkl": [363, 681], "1983": [363, 681, 829], "tandfonlin": 363, "01621459": 363, "10478008": 363, "kmeans_model": 363, "1987": [363, 558, 559, 740, 741], "53": [363, 370, 486, 492, 740, 741], "calinski_harabasz_scor": [363, 981], "dispers": [363, 661, 675, 928], "561": 363, "n_e": 363, "mathrm": [363, 365, 368, 372, 928, 948], "b_k": 363, "w_k": [363, 928], "c_q": 363, "n_q": 363, "c_e": 363, "cali\u0144ski": 363, "1974": [363, 371, 661], "dendrit": [363, 661], "davies_bouldin_scor": [363, 981], "6619": 363, "bould": 363, "c_i": [363, 935], "c_j": [363, 937], "s_i": [363, 942], "diamet": 363, "nonneg": [363, 368, 404, 489, 491, 498, 826], "s_j": 363, "max_": [363, 932], "1979": [363, 675, 719], "227": [363, 675], "halkidi": 363, "batistaki": 363, "yanni": 363, "vazirgianni": 363, "michali": 363, "107": [363, 844, 933, 975], "145": 363, "contingency_matrix": [363, 705, 981], "pair_confusion_matrix": [363, 985], "permit": [364, 418, 539, 540, 542, 747, 750, 751, 761, 771, 810, 811, 932, 933, 934, 979], "clf__c": 364, "pca1": [364, 379], "svm1": 364, "77484909e": 364, "07058917e": 364, "pca2": [364, 379], "svm2": 364, "raw_target_regr": 364, "bypass": [364, 550, 597, 603, 857, 858, 859, 860], "check_invers": [364, 416, 813, 942, 981, 987, 988], "caller": [364, 597, 598, 603, 611, 612, 613, 632, 839, 840, 900, 908, 909, 910, 982], "linear_pca": 364, "transformer_list": [364, 808, 811, 922, 984, 985], "make_union": [364, 808, 976, 980], "incorpor": [364, 370, 931, 952, 956], "unreli": 364, "citi": [364, 371, 417, 967], "london": [364, 371, 417], "sallisaw": [364, 417], "bow": 364, "watson": [364, 952], "moveabl": 364, "feast": 364, "grape": 364, "wrath": 364, "expert_r": 364, "user_r": 364, "city_categori": 364, "title_bow": 364, "city_london": 364, "city_pari": 364, "city_sallisaw": 364, "904": 364, "507": 364, "414": [364, 676, 706, 825, 837, 932], "301": [364, 946], "ignored_new_col": 364, "estimator_html_repr": [364, 984, 985, 986, 987], "shrunk_covari": 365, "sigma_": [365, 595, 596, 986], "365": [365, 424], "411": [365, 375, 424, 484], "wiesel": [365, 376, 426], "eldar": [365, 376, 426], "hero": [365, 376, 426], "5016": [365, 376, 426], "5029": [365, 376, 426], "_k": [365, 926, 928], "glasso": [365, 429], "biostatist": [365, 429], "432": 365, "uncommon": [365, 609, 849, 947], "downweight": [365, 487], "driessen": [365, 420, 425, 938], "fastmcd": [365, 420, 425], "raw_location_": [365, 420, 425], "raw_covariance_": [365, 420, 425], "multidimension": [366, 639, 641, 643, 645, 929, 935], "plsw2a": 366, "u_k": [366, 368], "v_k": [366, 368, 482, 488, 496, 497], "x_k": [366, 368, 926, 935], "y_k": [366, 942], "xi_k": 366, "omega_k": [366, 926], "gamma_k": 366, "delta_k": 366, "nipal": [366, 434, 435], "x_rotations_": [366, 433, 434, 435], "y_rotations_": [366, 433, 434, 435], "ty": 366, "x_weights_": [366, 433, 434, 435, 436], "y_weights_": [366, 433, 434, 435, 436], "yv": 366, "tx": 366, "pls1": [366, 435], "pls2": [366, 435], "tx_k": [366, 926], "ty_k": 366, "ja": [366, 980], "wegelin": 366, "methodolog": [367, 955], "academ": [367, 956], "commerci": [367, 956], "flowchart": [367, 960], "f1_macro": [367, 932, 977], "977": 367, "custom_cv_2fold": 367, "custom_cv": 367, "973": 367, "9333": 367, "933": 367, "scorer1_nam": 367, "scorer2_nam": 367, "return_indic": [367, 772, 989], "precision_macro": [367, 962], "recall_macro": [367, 932], "test_precision_macro": 367, "test_recall_macro": 367, "prec_macro": 367, "rec_macro": 367, "test_prec_macro": 367, "test_rec_macro": 367, "train_prec_macro": 367, "train_rec_macro": 367, "undistinguish": 367, "kf": [367, 752], "12883823": 367, "rkf": [367, 762], "weigh": [367, 980], "caveat": [367, 373], "part3": 367, "spector": 367, "submodel": 367, "kohavi": 367, "jnt": 367, "bharat": [367, 981, 982, 983, 984, 985, 986, 987], "rao": [367, 985, 988], "fung": 367, "rosal": 367, "witten": 367, "leavepout": [367, 755, 962], "ss": 367, "gkf": 367, "sgkf": [367, 765], "suboptim": [367, 651, 653, 732, 739, 935, 981, 989], "leavepgroupsout": [367, 749, 962, 979], "n_group": [367, 756, 962, 979], "lpgo": [367, 756], "gss": [367, 749], "withheld": 367, "predefinedsplit": [367, 962, 977], "test_fold": [367, 760], "train_indx": 367, "test_indx": 367, "autocorrel": 367, "superset": [367, 768, 932], "surplu": 367, "tscv": [367, 768], "inbuilt": 367, "some_integ": 367, "n_cv": [367, 389], "isotropi": 368, "alik": [368, 930], "halko": [368, 486, 492, 495, 885, 886], "szlam": [368, 885, 886], "disadvantag": [368, 373, 928, 929, 936, 946, 947, 948], "parsimoni": [368, 942], "jen09": 368, "mrl09": 368, "ell_1": [368, 928], "underset": [368, 928, 935, 948], "operatornam": [368, 691, 928, 932, 948], "fro": [368, 489, 491, 498, 644, 928], "gentli": 368, "spirit": 368, "mairal": [368, 482, 488], "bach": [368, 482, 487, 488, 489, 609, 928], "ponc": [368, 482, 488], "sapiro": [368, 482, 488], "jenatton": 368, "obozinski": 368, "scholkopf1997": 368, "bakir2003": 368, "smola": [368, 371, 486, 815, 942, 947], "klau": [368, 486, 815], "berlin": [368, 486, 647, 676, 706, 932], "heidelberg": [368, 486, 647, 676, 706, 932], "eigendecompos": 368, "eigensolv": [368, 403, 413, 486, 495, 646, 929], "eigsh": [368, 486, 979, 980], "lehoucq": 368, "sorensen": 368, "lsa": [368, 495, 975], "synonymi": 368, "polysemi": 368, "lsi": 368, "sigma_k": [368, 926], "columnwis": 368, "sublinear": [368, 541, 542], "use_idf": [368, 371, 541, 542, 967], "textual": [368, 948, 982], "man": [368, 541, 719, 784, 788, 930, 932, 934], "prabhakar": 368, "raghavan": [368, 541, 784, 788, 930, 932, 934], "hinrich": 368, "sch\u00fctze": [368, 541, 930, 932, 934], "transform_method": 368, "split_cod": 368, "dictionarylearn": [368, 488, 490, 491, 493, 494, 495, 496, 497, 974, 978, 980, 983, 986, 987, 988, 989], "overcomplet": 368, "mammalian": 368, "cortex": 368, "inpaint": 368, "h_i": [368, 937], "psi": 368, "sim": [368, 965], "wh_i": 368, "ww": 368, "superflu": 368, "psi_1": 368, "psi_2": 368, "psi_n": 368, "superimpos": 368, "plug": [368, 928, 956, 967], "wh": [368, 489, 491, 498], "hoyer": [368, 976], "nndsvd": [368, 489, 491, 498, 982, 985], "nndsvdar": [368, 489, 491, 498, 982], "elementwis": [368, 489, 491, 498], "_featur": [368, 489, 491, 498], "kl": [368, 929, 981], "itakura": [368, 489, 491, 498, 980], "saito": [368, 489, 491, 498, 980], "w_new": 368, "forget_factor": [368, 489], "lee": [368, 973, 974, 977, 979, 980, 981, 982, 984, 985, 988], "seung": 368, "boutsidi": 368, "gallopoulo": 368, "cichocki": [368, 489, 491, 498], "phan": 368, "fevott": [368, 489, 491, 498], "idier": [368, 489, 491, 498], "lefevr": [368, 489], "corpora": 368, "hoffman": [368, 487, 978, 985], "unshad": 368, "beta_k": 368, "eta": [368, 487, 627, 628, 629, 936, 946, 978], "topic_word_prior": [368, 487], "theta_d": 368, "doc_topic_prior": [368, 487], "z_": 368, "w_": [368, 597, 598, 603, 604, 611, 612, 613, 614, 632, 635, 928, 932, 934, 937], "beta_": 368, "elbo": 368, "overset": [368, 939], "e_": 368, "blei": [368, 487, 745], "wang": [368, 487, 630, 640, 644, 676, 706, 928, 929, 932, 976, 978, 979, 980, 981, 985, 988], "paislei": [368, 487], "kaiser": [368, 483], "talli": 369, "disproportion": 369, "41075698": 369, "41076071": 369, "rho_k": 369, "unsmooth": 369, "scott": [369, 794, 973, 974, 979, 981, 982, 983, 988], "silvermann": 369, "propto": [369, 934], "2h": 369, "angular": [369, 643, 714], "contin": [369, 665, 942], "generaliz": 370, "flavour": 370, "b1999": 370, "b1996": 370, "h1998": 370, "lg2012": 370, "bootstrap_featur": [370, 506, 507], "140": [370, 461, 467, 468, 469, 506, 507, 933], "832": [370, 506, 507], "844": [370, 506, 507], "geurt": [370, 506, 507, 508, 509, 516, 517, 859, 860], "346": [370, 452, 506, 507], "b1998": 370, "decoupl": [370, 934], "cancel": [370, 371, 713], "b2001": 370, "bear": [370, 952], "ernst": [370, 508, 509, 516, 517, 859, 860], "wehenkel": [370, 508, 509, 516, 517, 859, 860], "l2014": 370, "lieg": 370, "freund": [370, 504, 505], "fs1995": 370, "w_1": [370, 928, 936], "w_2": [370, 928, 936], "w_n": 370, "w_i": [370, 923, 932], "reappli": 370, "htf": 370, "zzrh2009": 370, "d1997": 370, "semin": 370, "friedman2001": 370, "shelf": 370, "ecologi": 370, "lightgbm": [370, 512, 513, 982], "913": [370, 510], "nr": 370, "f_m": 370, "h_m": 370, "f_": [370, 586, 932], "l_m": 370, "taylor": [370, 981, 983, 984, 987], "g_i": [370, 600], "absolute_error": [370, 509, 511, 513, 516, 622, 858, 860, 986], "sum_m": 370, "softmax": [370, 512, 609, 610, 928, 935, 936], "superior": 370, "ineffici": [370, 395, 525, 777, 778, 935, 937], "r2007": 370, "friedman2002": 370, "1189": 370, "1232": 370, "367": [370, 973], "378": [370, 967, 973], "tremend": 370, "8965": 370, "grower": [370, 512, 513], "missing": [370, 578, 579, 581, 982], "comfort": 370, "fisher1958": 370, "loan": [370, 485, 928, 956], "nevertheless": 370, "mayer2022": 370, "mayer": [370, 985, 987], "bourassa": 370, "hoesli": 370, "scognamiglio": 370, "valuat": 370, "tianqi": 370, "guestrin": 370, "ke": [370, 984, 985], "boostingdecis": 370, "789": 370, "798": 370, "w2": 370, "w3": 370, "lr__c": 370, "rf__n_estim": 370, "w1992": 370, "knr": 370, "stack_method": [370, 518], "142": 370, "146": 370, "286": 370, "225": 370, "126": 370, "124": [370, 975], "164": 370, "stack_method_": [370, 518, 519], "final_layer_rfr": 370, "final_layer_gbr": 370, "final_lay": 370, "multi_layer_regressor": 370, "wolpert": [370, 518, 519], "241": [370, 518, 519], "dubai": 371, "francisco": [371, 944], "movi": [371, 959], "movie_entri": 371, "thriller": [371, 820], "drama": 371, "anim": 371, "000e": 371, "003e": 371, "011e": 371, "974e": 371, "unseen_featur": [371, 532], "speech": [371, 932], "chunker": 371, "pos_window": 371, "pos_vector": 371, "1x6": 371, "part_of_speech": 371, "token_featur": 371, "isupp": 371, "uppercase_initi": 371, "all_uppercas": 371, "raw_x": [371, 533], "pos_tagg": 371, "comprehens": [371, 708, 709, 930, 956, 981], "murmurhash3": [371, 533, 540, 897], "weinberg": 371, "modulo": [371, 984], "kilian": [371, 988], "anirban": 371, "dasgupta": [371, 843, 944], "langford": [371, 639, 929], "josh": [371, 980], "attenberg": 371, "multitask": [371, 933], "punctuat": [371, 539, 540, 542], "diminish": 371, "4x9": 371, "build_analyz": [371, 539, 540, 542, 983], "interrog": 371, "bigram_vector": 371, "bi": 371, "cool": [371, 973], "feature_index": 371, "him": 371, "constru": 371, "nqy18": 371, "smooth_idf": [371, 541, 542], "_n": [371, 932], "textbook": [371, 541], "6x3": 371, "81940995": 371, "57320793": 371, "47330339": 371, "88089948": 371, "58149261": 371, "81355169": 371, "term1": 371, "term2": 371, "term3": 371, "0986": [371, 813], "819": 371, "573": 371, "8473": 371, "8515": [371, 980], "5243": 371, "85151335": 371, "52433293": 371, "55422893": 371, "83236428": 371, "63035731": 371, "77630514": 371, "idf_": [371, 541, 542, 981], "western": 371, "europ": [371, 942], "koi8": 371, "russian": 371, "modern": [371, 419, 454, 541, 641, 645, 680, 847, 929, 953], "unicodedecodeerror": [371, 539, 540, 542], "told": 371, "silent": [371, 532, 805, 942, 978, 979, 981, 982, 986, 987], "chardet": 371, "chardetect": 371, "damag": 371, "sloppili": 371, "ftfy": 371, "mish": 371, "mash": 371, "text1": 371, "sei": 371, "mir": 371, "gegr": 371, "xc3": 371, "xbc": 371, "x9ft": 371, "mein": 371, "sauerkraut": 371, "text2": 371, "holdselig": 371, "sind": 371, "dein": 371, "ger": 371, "xfcche": 371, "text3": 371, "xff": 371, "xfea": 371, "x00u": 371, "x00f": 371, "x00": 371, "x00l": 371, "xfc": 371, "x00g": 371, "x00e": 371, "x00n": 371, "x00d": 371, "x00a": 371, "x00h": 371, "x00r": 371, "x00z": 371, "x00i": 371, "x00b": 371, "x00c": 371, "x00t": 371, "x00o": 371, "spolski": 371, "nnmf": [371, 968, 969, 973], "phrase": 371, "misspel": 371, "rescu": 371, "resili": 371, "wprd": 371, "ngram_vector": 371, "char_wb": [371, 539, 540, 542], "rd": 371, "wo": 371, "wp": [371, 608, 622], "char": [371, 539, 540, 542, 973], "jumpi": 371, "fox": 371, "1x4": 371, "umpi": 371, "1x5": 371, "mpy": 371, "fo": 371, "barrier": 371, "hv": 371, "4x10": 371, "discrep": [371, 967, 977], "4x1048576": 371, "collid": 371, "ingest": 371, "spend": 371, "my_token": 371, "lowercas": [371, 379, 394, 395, 397, 398, 400, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 539, 540, 542, 590, 591, 592, 593, 639, 640, 643, 793, 798, 801, 805, 810, 815, 841, 842, 986], "lucen": 371, "build_preprocessor": [371, 539, 540, 542, 983], "whitespac": 371, "fanci": 371, "lemmat": 371, "nltk": [371, 951, 952], "word_token": 371, "wordnetlemmat": 371, "lemmatoken": 371, "wnl": 371, "british": 371, "spell": 371, "to_british": 371, "1or": 371, "bt": 371, "1er": 371, "ing": 371, "ation": 371, "1z": 371, "ogu": 371, "og": 371, "customvector": 371, "asian": 371, "one_imag": [371, 535], "fake": 371, "assert_array_equ": 371, "patchextractor": [371, 989], "five_imag": 371, "variancethreshold": [372, 814, 922, 976, 983, 986, 989], "sel": 372, "selectfdr": [372, 543, 547, 549, 550, 551, 557, 977, 979, 980, 989], "selectfw": [372, 543, 546, 547, 550, 551, 557, 989], "genericunivariateselect": [372, 546, 547, 549, 550, 551, 553, 987, 989], "r_regress": [372, 557, 986, 987], "nonparametr": [372, 558, 559], "bewar": 372, "importance_gett": [372, 544, 545, 548, 985], "unimport": 372, "lsvc": 372, "baraniuk": 372, "isr": 372, "ist": 372, "utl": 372, "aguiar": 372, "cs_note": 372, "ferri": [372, 932], "versatil": [373, 947, 956], "optima": 373, "markov": [373, 562, 937, 952, 973], "ppmv": 373, "214": [373, 535], "446": [373, 676, 706, 932], "957": [373, 678, 932], "197": 373, "0336": 373, "4ppm": 373, "27ppm": 373, "197ppm": 373, "nuisanc": 373, "one_vs_on": [373, 561, 933], "ingredi": 373, "duv2014": 373, "theta_l": 373, "x_bound": [373, 568], "operand": 373, "k1__": 373, "k2__": 373, "constant_valu": [373, 564, 568], "constant_value_bound": [373, 562, 564, 568], "k1__k1__constant_valu": 373, "value_typ": [373, 568], "n_element": [373, 568], "k1__k2__length_scal": 373, "k2__length_scal": 373, "k1": [373, 572, 575], "k1__k1": 373, "k1__k1__constant_value_bound": 373, "k1__k2": 373, "k1__k2__length_scale_bound": 373, "k2": [373, 572, 575], "k2__length_scale_bound": 373, "69314718": [373, 563, 942], "30258509": 373, "interoper": [373, 950, 953, 969], "pairwisekernel": 373, "_valu": [373, 564], "_level": [373, 576], "k_1": [373, 572, 575], "k_2": [373, 572, 575], "__add__": [373, 575], "__mul___": 373, "__pow__": [373, 567], "2l": [373, 573], "bigg": [373, 570], "bessel": [373, 570], "rightarrow": [373, 570, 936], "quad": [373, 935, 946], "tfrac": 373, "3l": 373, "pp84": 373, "x_d": [373, 565], "inhomogen": [373, 565], "expon": [373, 567, 627, 628, 629, 759, 806, 807, 824, 921], "carl": [373, 561, 562, 565, 570, 573], "rasmussen": [373, 561, 562, 565, 570, 573], "duvenaud": [373, 573, 574], "cookbook": [373, 573, 574], "minkowski": [374, 396, 401, 408, 639, 650, 728, 729, 730, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 935, 973, 976, 987, 988], "metric_param": [374, 396, 401, 408, 639, 643, 791, 792, 793, 794, 795, 797, 799, 800, 801, 802, 803, 977, 980, 987], "leaf_siz": [374, 396, 401, 408, 789, 790, 791, 792, 793, 794, 795, 797, 799, 800, 801], "kd_tree": [374, 396, 401, 408, 639, 640, 791, 792, 793, 794, 795, 797, 799, 800, 801, 935, 986], "balltre": [374, 396, 401, 408, 639, 640, 650, 791, 792, 793, 794, 795, 797, 799, 800, 801, 802, 803, 929, 973, 975, 977, 981, 986, 989], "ckdtree": [374, 396, 975], "inhibit": [374, 396], "core_sampl": 374, "n_core_sampl": [374, 396], "attract": [374, 396, 926, 935, 952], "fun": [375, 484, 956], "logcosh": [375, 484], "fun_arg": [375, 484], "w_init": [375, 484], "whiten_solv": [375, 484, 988], "return_x_mean": 375, "compute_sourc": 375, "return_n_it": [375, 405, 410, 429, 496, 497, 597, 598, 603, 604, 611, 612, 613, 614, 632, 633, 634, 635, 636, 637, 638, 645, 987], "cube": [375, 484], "my_g": [375, 484], "x_mean": 375, "AS": 375, "fortran": [375, 492, 597, 598, 603, 604, 611, 612, 613, 614, 616, 632, 635, 636, 637, 869, 870, 973, 976, 977, 981], "hyvarinen": [375, 484], "oja": [375, 484], "430": [375, 484], "shrunk_cov": [376, 430, 432], "eq": [376, 426, 672, 673, 674], "subobject": [377, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 640, 641, 642, 643, 745, 746, 747, 750, 751, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860], "row_ind": [378, 402, 404], "intp": [378, 402, 404], "col_ind": [378, 402, 404], "get_submatrix": [378, 402, 404], "pca0": 379, "_n_features_out": 379, "class_name0": [379, 394, 395, 397, 398, 400, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 590, 591, 592, 593, 639, 640, 643, 793, 798, 801, 805, 815, 841, 842], "class_name1": [379, 394, 395, 397, 398, 400, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 590, 591, 592, 593, 639, 640, 643, 793, 798, 801, 805, 815, 841, 842], "class_name2": [379, 394, 395, 397, 398, 400, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 590, 591, 592, 593, 639, 640, 643, 793, 798, 801, 805, 815, 841, 842], "feature_names_out": [379, 383, 394, 395, 397, 398, 400, 415, 433, 434, 435, 436, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 517, 518, 519, 520, 521, 532, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 578, 579, 580, 581, 586, 589, 590, 591, 592, 593, 639, 640, 643, 793, 798, 801, 805, 808, 809, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 987], "harsh": [380, 389, 420, 500, 501, 502, 504, 506, 508, 510, 512, 515, 518, 520, 561, 609, 617, 619, 625, 626, 627, 777, 778, 779, 780, 784, 785, 786, 787, 788, 791, 796, 799, 806, 844, 845, 849, 851, 854, 857, 859, 983, 985, 988], "n_samples_fit": [384, 416, 433, 434, 435, 505, 507, 509, 511, 513, 516, 519, 521, 562, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 623, 624, 629, 630, 639, 782, 783, 791, 792, 793, 795, 797, 799, 800, 801, 807, 850, 852, 855, 858, 860], "uniform_averag": [384, 416, 433, 434, 435, 505, 507, 509, 511, 513, 516, 519, 521, 562, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 621, 623, 624, 629, 630, 672, 673, 678, 695, 696, 698, 700, 701, 703, 735, 782, 783, 792, 800, 807, 850, 852, 855, 858, 860, 932, 982], "n_features_new": [385, 394, 397, 483, 485, 487, 488, 490, 493, 494, 500, 518, 520, 521, 533, 534, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 579, 581, 586, 589, 590, 591, 592, 593, 798, 805, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 826, 827, 828, 829, 841, 842], "base_clf": 389, "calibrated_clf": 389, "889": 389, "072": [389, 599], "927": 389, "x_calib": 389, "y_calib": 389, "936": [389, 932], "063": 389, "prob_tru": [390, 391], "prob_pr": [390, 391], "ref_lin": 390, "alexandru": 391, "22nd": 391, "525": [391, 579, 922], "convergence_it": [392, 405], "hardcod": [392, 405, 981], "affinity_matrix_": [392, 403, 642], "cluster_center_indic": [392, 405], "compute_full_tre": [393, 397, 977], "compute_dist": [393, 397, 985], "inferior": [393, 397, 984], "n_leaves_": [393, 397], "n_connected_components_": [393, 397, 982], "ward_tre": [393, 397, 973, 977], "branching_factor": 394, "compute_label": [394, 400], "promot": [394, 659, 952, 984, 986], "redistribut": 394, "overwritten": [394, 483, 484, 485, 487, 492, 499, 558, 559, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 623, 625, 630, 632, 633, 634, 635, 637, 900, 902, 986], "root_": 394, "_cfnode": 394, "cftree": 394, "dummy_leaf_": 394, "subcluster_labels_": 394, "centroids_": [394, 796], "copy_x": [395, 398, 410, 486, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 623, 625, 630, 632, 633, 634, 635, 636, 975, 981, 982], "smart": [395, 410, 411, 541], "k_init": [395, 410], "sse": 395, "bisect_mean": 395, "pooling_func": [397, 981], "xred": 397, "socg2006": 398, "min_bin_freq": [399, 412], "cluster_al": [399, 412], "get_bin_se": 399, "orphan": [399, 412, 973], "reassignment_ratio": 400, "eec": [400, 592], "tuft": 400, "dscullei": 400, "fastkmean": 400, "375": [400, 700, 932], "55102041": 400, "48979592": 400, "06896552": 400, "cluster_method": 401, "predecessor_correct": [401, 407], "unprocess": [401, 539, 540, 542], "heap": 401, "braycurti": [401, 408, 650, 728, 729, 730, 935], "canberra": [401, 408, 650, 728, 729, 730, 935], "chebyshev": [401, 408, 650, 728, 729, 730, 935], "dice": [401, 408, 650, 728, 729, 730, 935], "kulsinski": [401, 408, 650, 728, 729, 730], "rogerstanimoto": [401, 408, 650, 728, 729, 730, 935], "russellrao": [401, 408, 650, 728, 729, 730, 935], "seuclidean": [401, 408, 650, 728, 729, 730, 796, 935, 981, 984, 985], "sokalmichen": [401, 408, 650, 728, 729, 730, 935], "sokalsneath": [401, 408, 650, 728, 729, 730, 935], "yule": [401, 408, 728, 729, 730], "manhattan_dist": [401, 408, 639, 712, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 973, 983, 988, 989], "minkowski_dist": [401, 408, 639, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803], "l_p": [401, 408, 639, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803], "upward": [401, 407], "successor": [401, 407, 948, 952], "predecessor": [401, 407, 408], "kdtree": [401, 408, 639, 640, 789, 791, 792, 793, 794, 795, 797, 799, 800, 801, 975, 977, 981, 985, 986], "predecessor_": [401, 408], "erich": [401, 977, 978, 981, 982, 984, 985, 986, 987], "gertz": 401, "lernen": 401, "wissen": 401, "daten": [401, 981, 982], "analysen": 401, "lwda": 401, "318": 401, "329": 401, "n_best": 402, "n_svd_vec": [402, 404], "mini_batch": [402, 404], "n_row_clust": [402, 404, 464], "n_column_clust": [402, 404, 464], "ncv": [402, 404], "n_oversampl": [402, 404, 492, 495, 886, 987], "kernel_param": [403, 486, 590, 594], "precomputed_nearest_neighbor": [403, 642], "eigendecomposit": [403, 413, 624, 642, 646, 815], "dist_matrix": 403, "517": [403, 413, 965], "541": [403, 413], "csc_matrix": [403, 508, 509, 514, 515, 516, 517, 826, 857, 858, 859, 860, 922, 942, 948, 978], "best_n_it": 410, "n_local_tri": 411, "n_seed": 412, "multigrid": 413, "multiscal": 413, "preliminari": 413, "return_dist": [414, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 935, 977], "heapq": 414, "topolog": [414, 952], "n_connected_compon": 414, "n_leav": [414, 857, 858, 859, 860], "untransform": [415, 418, 943], "transformers_": 415, "remaining_column": 415, "named_transformers_": 415, "sparse_output_": [415, 502], "output_indices_": [415, 986], "datatyp": [415, 417, 980, 983], "norm1": 415, "norm2": 415, "text_preprocess": 415, "num_preprocess": 415, "x_t": [415, 578, 808], "sum_n_compon": [415, 808], "transformer_": 416, "predict_param": [416, 518, 519, 809, 986], "y_hat": 416, "90453403": 417, "50755672": 417, "30151134": 417, "print_changed_onli": [419, 847, 982, 984, 985], "pairwise_dist_chunk_s": [419, 847], "enable_cython_pairwise_dist": [419, 847], "cache_s": [419, 847, 851, 852, 853, 854, 855, 947], "get_config": [419, 731, 847, 899, 988], "offset_": [420, 514, 628, 795, 853, 981], "raw_support_": [420, 425], "dist_": [420, 425], "true_cov": [420, 422, 423], "7411": [420, 425, 979], "2535": [420, 425], "3053": [420, 425], "0813": [420, 425], "0427": [420, 425], "correct_covari": [420, 425], "rvd": [420, 425], "covariance_correct": [420, 425], "comp_cov": [420, 421, 422, 423, 424, 425, 426, 427], "get_precis": [420, 421, 422, 423, 424, 425, 426, 427, 483, 485, 492], "is_inli": [420, 514, 795], "reweight_covari": [420, 425], "rvdriessen": [420, 425], "location_reweight": [420, 425], "covariance_reweight": [420, 425], "support_reweight": [420, 425], "negative_mahal_dist": 420, "7569": 421, "2818": 421, "3928": 421, "0622": [421, 427], "0193": [421, 427], "enet_tol": [422, 423, 429, 978], "graphlasso": [422, 978, 981], "816": [422, 423], "049": 422, "364": [422, 423, 974], "034": 422, "093": [422, 978], "073": [422, 423], "038": [422, 423, 806], "n_refin": 423, "graphlassocv": [423, 975, 981], "dualiti": [423, 928], "051": 423, "018": 423, "094": 423, "block_siz": [424, 430, 431, 977], "4406": 424, "1616": 424, "0595": 424, "0075": [424, 492], "rouseeuw1984": 425, "butlerdavi": 425, "butler": [425, 976, 984, 985], "davi": [425, 675, 932, 977], "jhun": 425, "1385": 425, "1400": 425, "7533": [426, 980], "2763": 426, "3964": 426, "7833": 426, "2431": 426, "3889": 426, "0195": 426, "7387": 427, "2536": 427, "4110": 427, "cov_init": 429, "return_cost": 429, "220446049250313e": [429, 601, 602, 605, 606, 607, 633, 634], "graph_lasso": [429, 981], "dual_gap": [429, 597, 598, 603, 604, 611, 612, 613, 614, 632, 635], "x_loadings_": [433, 434, 435], "y_loadings_": [433, 434, 435], "plssvd": [433, 434, 954, 969, 985, 987], "x_c": [433, 434, 436, 939], "y_c": [433, 434, 436], "y_reconstruct": [433, 434, 435], "x_scores_": [435, 985], "y_scores_": [435, 985], "y_transform": 436, "data_hom": [437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 980], "sklearn_learn_data": [437, 450], "zero_bas": [438, 459, 460], "query_id": [438, 459, 460], "grok": 438, "qid": [438, 459, 460, 974, 979], "download_if_miss": [439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 980], "ioerror": [439, 440, 441, 442, 443, 444, 445, 446, 448, 449], "stopword": [440, 967], "130107": 440, "target_column": [440, 441, 447], "percent": [443, 551, 945], "494021": 443, "slice_": [444, 445, 988], "195": [444, 445], "78": [444, 445, 604, 606, 615, 616, 747, 932, 953, 963], "unrestrict": 444, "2914": 445, "5748": 445, "n_retri": [447, 987], "timeout": [447, 898, 987], "412": [447, 928], "silenc": 447, "ith": [447, 724, 728, 785, 806, 807, 822, 823], "1592": 449, "1212": 449, "1624": 449, "620": 449, "data_filenam": [452, 456], "target_filenam": [452, 456], "container_path": 454, "load_cont": 454, "allowed_extens": 454, "container_fold": 454, "category_1_fold": 454, "file_1": 454, "file_2": 454, "file_42": 454, "category_2_fold": 454, "file_43": 454, "file_44": 454, "mod": 454, "image_nam": 457, "first_img_data": 458, "backup": [459, 973], "instantan": 459, "mycach": 459, "get_data": 459, "mysvmlightfil": 459, "xn": 460, "yn": [460, 933, 934], "q1": 460, "qn": 460, "yi": [460, 934, 977, 981, 982, 985], "qi": [460, 985], "triplet": 460, "minval": [462, 464], "maxval": [462, 464], "seventh": [462, 944], "269": 462, "274": 462, "return_cent": [463, 984], "intric": 463, "basri": 464, "gerstein": 464, "genom": 464, "716": 464, "flip_i": 466, "interdepend": 466, "polytop": 466, "guyon": [466, 544, 545, 932], "madelon": 466, "1991": [467, 468, 469], "560": [468, 469], "12000": 471, "effective_rank": [472, 475], "tail_strength": [472, 475], "bell": [472, 981, 983, 985, 986], "fat": [472, 475], "crawl": [472, 878], "return_ind": 474, "make_low_rank_matrix": 475, "4967": 475, "1382": 475, "6476": 475, "523": 475, "2341": 475, "4694": 475, "5425": 475, "579": 475, "7674": [475, 980], "737": 475, "4017": 475, "data_transpos": [477, 987, 989], "norm_diag": 478, "make_spd_matrix": 478, "celeux": 479, "el": [479, 986, 988], "anbari": 479, "marin": 479, "frequentist": 479, "n_dim": [480, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576], "marsland": 481, "vuw": 481, "nz": 481, "marslast": 481, "ch6": 481, "code_init": [482, 496], "dict_init": [482, 488, 496, 497], "callback": [482, 488, 490, 496, 497, 798, 898, 953, 989], "split_sign": [482, 488, 493], "transform_max_it": [482, 488, 489, 493, 983], "_fro": [482, 488, 496, 497, 597, 598, 603, 611, 612, 613, 632], "lasso_cd": [482, 488, 493, 499], "invok": [482, 488, 490, 496, 497, 518, 520, 521, 770, 846, 985], "error_": [482, 494], "minibatchsparsepca": [482, 484, 488, 491, 493, 494, 496, 497, 973, 974, 984, 986, 987, 988, 989], "sierra": [482, 488], "icml09": [482, 488], "x_hat": [482, 488], "noise_variance_init": 483, "quartimax": [483, 985], "loglike_": 483, "barber": 483, "bishop": [483, 485, 492, 691, 745, 928, 933, 947], "get_covari": [483, 485, 492], "unmixing_matrix": 484, "whitening_": 484, "kpca": [484, 485, 486, 968, 969, 973], "unsaf": 485, "singular_values_": [485, 492, 495, 980], "var_": [485, 787, 829, 986], "574": [485, 492], "miketip": [485, 492], "mppca": [485, 492], "n_samples_seen_": [485, 818, 819, 829, 981], "batch_size_": 485, "ross": [485, 558, 559, 948, 987, 988], "vision": [485, 708, 709, 924, 928, 930, 948, 952, 956, 974], "141": [485, 849, 933], "toronto": [485, 595, 805], "dross": 485, "ivt": 485, "rosslimlinyang_ijcv": 485, "karhunen": 485, "loev": 485, "levi": [485, 980], "lindenbaum": 485, "1371": 485, "1374": 485, "abstain": 485, "holub": 485, "opportun": [485, 946], "golub": [485, 787, 829], "x_spars": [485, 903, 906], "sigma2": [485, 492], "x_origin": [485, 490, 492, 494, 495, 581, 841, 842], "check_input": [485, 499, 597, 598, 603, 611, 612, 613, 632, 638, 857, 858, 859, 860, 981], "remove_zero_eig": [486, 975, 982], "x_fit_": [486, 594], "eigenvalues_": [486, 986], "eigenvectors_": [486, 986], "dual_coef_": [486, 594, 851, 852, 853, 854, 855, 947, 977], "x_transformed_fit_": 486, "nathan": [486, 981, 985, 988], "gunnar": [486, 886], "tropp": [486, 492], "217": [486, 492], "288": [486, 492], "vladimir": [486, 886, 928, 983, 987], "rokhlin": [486, 492, 886], "tygert": [486, 492, 886], "learning_decai": 487, "evaluate_everi": 487, "perp_tol": 487, "mean_change_tol": 487, "max_doc_update_it": 487, "kappa": [487, 667], "tau_0": 487, "pseudocount": [487, 981], "exp_dirichlet_component_": 487, "n_batch_iter_": 487, "bound_": 487, "doc_topic_prior_": 487, "topic_word_prior_": 487, "franci": [487, 609, 928, 979], "onlineldavb": 487, "chong": 487, "00360392": 487, "25499205": 487, "0036211": 487, "64236448": 487, "09541846": 487, "15297572": 487, "00362644": 487, "44412786": 487, "39568399": 487, "003586": 487, "vb": 487, "sub_sampl": 487, "doc_topic_distr": [487, 980], "fresh_restart": 489, "fresh_restarts_max_it": 489, "_w": [489, 491, 498], "_ratio": [489, 491, 498], "_h": [489, 491, 498], "fresh": [489, 953, 983], "reconstruction_err_": [489, 491], "andrzej": [489, 491, 498], "anh": [489, 491, 498], "ieic": [489, 491, 498], "708": [489, 491, 498, 700], "721": [489, 491, 498], "waspa": 489, "ridge_alpha": [490, 494, 980], "power_iteration_norm": [492, 495, 885, 886, 987], "500x500": 492, "lu": [492, 495, 885, 886, 979, 980, 981, 982], "n_samples_": 492, "royal": [492, 578, 825, 837, 946], "methodologi": [492, 822, 922, 932, 956], "611": 492, "622": 492, "9924": 492, "30061": 492, "54980": 492, "00755": 492, "99244": 492, "ascontiguousarrai": 492, "sparse_encod": [493, 601, 602, 603, 604, 605, 606, 607, 614, 615, 616, 633, 634, 635, 636, 637, 973, 980, 981, 983, 987], "u_init": 494, "v_init": 494, "9666": 494, "oversampl": [495, 973], "indeterminaci": 495, "x_dens": 495, "0157": 495, "0512": 495, "0499": 495, "0479": 495, "0453": 495, "2102": 495, "2410": 495, "5981": 495, "5420": 495, "4486": 495, "3288": 495, "method_max_it": [496, 497, 983], "dict_learning_onlin": [496, 974, 983, 986, 987], "return_cod": 497, "iter_offset": [497, 987], "return_inner_stat": [497, 987], "inner_stat": [497, 987], "update_h": 498, "_n_compon": 498, "hal": [498, 609, 708, 709, 930], "copy_cov": 499, "orthogonal_mp": [499, 615, 616, 637, 928], "eigen": [500, 624, 642, 646, 926, 979, 982], "sum_k": [500, 948], "prior_k": 500, "c_k": 500, "priors_": [500, 501], "scalings_": [500, 501], "xbar_": 500, "reg_param": 501, "scaling_": 501, "colinear": 501, "rotations_": 501, "n_classes_": [502, 504, 506, 508, 510, 515, 561, 777, 778, 857, 859, 974, 983, 985], "class_prior_": [502, 787], "n_outputs_": [502, 503, 508, 509, 515, 516, 517, 806, 807, 857, 858, 859, 860], "dummy_clf": 502, "constant_": 503, "dummy_regr": 503, "base_estimator_": [504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 561, 846, 988], "983": [504, 678], "dok": [504, 505, 816, 986], "staged_decision_funct": [504, 510, 512], "staged_scor": [504, 505], "7972": 505, "9771": 505, "estimators_samples_": [506, 507, 514, 979, 981, 984], "estimators_features_": [506, 507, 514], "oob_decision_function_": [506, 508, 515], "oob_prediction_": [507, 509, 516], "8720": [507, 981], "min_weight_fraction_leaf": [508, 509, 510, 511, 515, 516, 517, 857, 858, 859, 860, 948, 976, 979, 980], "min_impurity_decreas": [508, 509, 510, 511, 515, 516, 517, 857, 858, 859, 860, 948, 980], "shannon": [508, 515, 857, 859, 929, 948], "unlimit": [508, 509, 510, 511, 515, 516, 517, 857, 858, 859, 860], "n_t": [508, 509, 510, 511, 515, 516, 517, 857, 858, 859, 860], "n_t_r": [508, 509, 510, 511, 515, 516, 517, 857, 858, 859, 860], "right_impur": [508, 509, 510, 511, 515, 516, 517, 857, 858, 859, 860], "n_t_l": [508, 509, 510, 511, 515, 516, 517, 857, 858, 859, 860], "left_impur": [508, 509, 510, 511, 515, 516, 517, 857, 858, 859, 860], "balanced_subsampl": [508, 515, 981], "subtre": [508, 509, 510, 511, 515, 516, 857, 858, 859, 860, 948], "unprun": [508, 509, 515, 516, 857, 858, 859, 860], "x_leav": [508, 509, 510, 511, 515, 516, 517, 857, 858, 859, 860], "n_nodes_ptr": [508, 509, 515, 516, 517], "friedman_ms": [509, 510, 511, 516, 858, 860], "extratreeregressor": [509, 514, 517, 859, 938, 982, 983, 984, 986, 987, 988], "2727": 509, "dummyestim": [510, 511], "eras": [510, 511, 597, 603, 609, 611, 613, 617, 618, 619, 627, 628, 629, 806, 807], "oob_scores_": [510, 511, 989], "init_": [510, 511], "init_estim": [510, 511], "max_features_": [510, 511, 548, 857, 858, 859, 860, 987], "_fit_stag": [510, 511], "crossentropi": 512, "deepest": [512, 513, 984], "reserv": [512, 513, 956, 958], "no_interact": [512, 513, 988], "do_early_stopping_": [512, 513], "n_trees_per_iteration_": [512, 513], "validation_score_": [512, 513], "is_categorical_": [512, 513], "n_trees_per_iter": 512, "longerr": 514, "max_samples_": 514, "fei": [514, 938], "ting": [514, 938, 981, 982], "ming": [514, 938, 977, 981, 982, 983, 987], "zhou": [514, 590, 845, 938, 981], "zhi": [514, 938], "hua": [514, 938], "icdm": [514, 938], "eighth": [514, 938], "tkdd": 514, "n_left": 514, "32987858": 516, "n_out": 517, "one_hot_encoder_": 517, "extratreeclassifi": [517, 860, 933, 977, 982, 983, 984, 986, 987, 988], "moosmann": 517, "trigg": 517, "juri": 517, "random_tre": 517, "x_sparse_embed": 517, "randomtreesembedding_": 517, "final_estimator_": [518, 519], "named_estimators_": [518, 519, 520, 521, 981, 983], "named_estim": [518, 519, 520, 521], "parameter_nam": [518, 519, 520, 521], "new_valu": [518, 519, 520, 521], "linearsvr": [519, 855, 977, 979, 984], "flatten_transform": [520, 980], "le_": 520, "eclf1": 520, "array_equ": [520, 980], "eclf2": 520, "eclf3": 520, "maj": 520, "avg": [520, 655, 664, 932, 963, 967, 989], "probabilities_or_label": 520, "n_regressor": 521, "r1": 521, "r3": 521, "er": 521, "with_traceback": [522, 523, 524, 525, 526, 527, 528, 529], "__traceback__": [522, 523, 524, 525, 526, 527, 528, 529], "current_sklearn_vers": 527, "repr": [528, 984, 985, 987], "linter": 530, "spam": [532, 660, 691, 784, 932, 934, 956], "feature_names_": 532, "xa": 532, "dict_typ": 532, "conform": [532, 579, 777, 778, 932, 952, 953, 980, 986], "1048576": [533, 540], "non_neg": [533, 980], "eleph": 533, "bird": [533, 669, 704, 932], "patch_height": [534, 535, 538], "patch_width": [534, 535, 538], "img_height": 534, "img_width": 534, "pe": 534, "pe_tran": 534, "263758": 534, "image_height": [534, 535, 538], "image_width": [534, 535, 538], "n_channel": [534, 535, 538], "n_patch": [534, 535, 538], "272214": 535, "230": 535, "243": 535, "215": 535, "244": 535, "n_z": 536, "return_a": [536, 537, 976], "_coo": [536, 537], "image_s": 538, "strip_acc": [539, 540, 542], "nfkd": [539, 540, 542, 983], "unicodedata": [539, 540, 542], "regexp": [539, 540, 542], "min_n": [539, 540, 542, 973], "max_n": [539, 540, 542, 973], "fixed_vocabulary_": [539, 542], "stop_words_": [539, 542], "delattr": [539, 542, 985], "vectorizer2": 539, "raw_docu": [539, 542], "get_stop_word": [539, 540, 542], "x_inv": [539, 542], "con": 540, "yates2011": 541, "baeza": [541, 680, 976], "yate": [541, 680], "ribeiro": [541, 680, 986], "neto": [541, 680], "addison": [541, 680], "weslei": [541, 680], "mrs2008": 541, "118": 541, "tfid": 541, "22314355": 541, "51082562": 541, "91629073": 541, "_check_stop_list": 542, "pvalu": [543, 546, 547, 549, 550, 551, 774], "k_best": [543, 846, 945], "fdr": 543, "fwe": 543, "iff": [543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 820], "retent": [543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554], "n_selected_featur": [543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554], "n_original_featur": [543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554], "attrgett": [544, 548], "barnhil": [544, 545], "vapnik": [544, 545], "389": [544, 545, 967], "422": [544, 545, 676, 706, 932], "n_subsets_of_featur": 545, "narrai": 545, "benjamini": [546, 979, 980], "hochberg": [546, 979, 980], "false_discovery_r": 546, "norm_ord": [548, 980], "threshold_": [548, 980], "87": [548, 618, 738, 747, 825, 837, 932, 967], "3252302": 548, "83462377": 548, "49750423": 548, "55245": 548, "half_cal": 548, "half_selector": 548, "unspecifi": [550, 551, 749, 929], "_get_support_mask": 552, "n_features_to_select_": 553, "variances_": 554, "weed": 555, "p_valu": [555, 556, 557], "f_statist": [556, 557], "force_finit": [557, 560, 678, 735, 932, 987], "pearson": [557, 560, 986], "discrete_featur": [558, 559], "essenc": [558, 559, 693, 929, 932], "hardli": [558, 559], "kraskov": [558, 559], "stogbauer": [558, 559], "grassberg": [558, 559], "phy": [558, 559], "kozachenko": [558, 559], "leonenko": [558, 559], "probl": [558, 559], "peredachi": [558, 559], "correlation_coeffici": 560, "fmin_l_bfgs_b": [561, 562], "max_iter_predict": 561, "copy_x_train": [561, 562], "one_vs_rest": [561, 933], "compoundkernel": [561, 987], "obj_func": [561, 562], "initial_theta": [561, 562], "theta_opt": [561, 562], "func_min": [561, 562], "_posterior_mod": 561, "log_marginal_likelihood_value_": [561, 562], "9866": [561, 570, 573], "83548752": 561, "03228706": 561, "13222543": 561, "79064206": 561, "06525643": 561, "14410151": 561, "clone_kernel": [561, 562, 983], "n_kernel_param": [561, 562], "log_likelihood_gradi": [561, 562], "x_train_": 562, "y_train_": 562, "3680": [562, 565, 576], "592": [562, 565, 576, 939], "316": [562, 565, 576, 825], "y_cov": 562, "n_samples_x": [562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 650, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 724, 725, 726, 727, 728, 729, 730, 731], "requires_vector_input": [563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576], "51292546": 563, "09861229": [563, 942], "n_samples_i": [563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 650, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 724, 725, 726, 727, 728, 729, 730, 731], "n_kernel": 563, "k_gradient": [563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576], "k_diag": [563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576], "hyperparameter_constant_valu": 564, "3696": 564, "606": [564, 779, 933], "hyperparameter_sigma_0": 565, "edward": [565, 570, 573, 976, 981, 982, 983, 984, 988], "hyperparameter_length_scal": [566, 570, 573, 574], "hyperparameter_period": 566, "0144": 566, "457": 566, "3894": 566, "3467": 566, "419": 567, "635": 567, "559": 567, "namedtupl": 568, "maxsiz": 568, "mat\u00e9rn": 570, "appr": 570, "8513": 570, "0368": 570, "1117": 570, "8086": [570, 980], "0693": 570, "1220": 570, "gamma_bound": 571, "pairwise_kernels_kwarg": 571, "additive_chi2": [571, 589, 715, 724], "pairwise_kernel_funct": [571, 594, 724], "hyperparameter_gamma": 571, "9733": [571, 574], "8880": 571, "05663": 571, "05532": 571, "8676": [571, 980], "07073": 571, "06165": 571, "__mul__": 572, "8354": [573, 980], "03228": 573, "1322": 573, "7906": [573, 600], "0652": 573, "1441": 573, "hyperparameter_alpha": 574, "8881": 574, "0566": 574, "05518": 574, "8678": 574, "0707": 574, "0614": 574, "hyperparameter_noise_level": 576, "initial_strategi": 578, "imputation_ord": [578, 983], "skip_complet": 578, "min_valu": [578, 984, 985], "max_valu": [578, 984, 985], "keep_empty_featur": [578, 579, 581, 922, 988], "nullabl": [578, 579, 580, 581, 984, 988], "na": [578, 579, 580, 581, 719, 728, 867, 869, 870, 983, 984, 987, 988], "known_val": 578, "Nearness": 578, "arab": 578, "broadcast": 578, "missingind": [578, 579, 581, 922, 981, 982, 983, 987, 989], "initial_imputer_": 578, "imputation_sequence_": 578, "feat_idx": 578, "neighbor_feat_idx": 578, "n_features_with_missing_": 578, "indicator_": [578, 579, 581], "knp": 578, "stef": [578, 922], "buuren": [578, 922], "karin": [578, 922], "groothui": [578, 922], "oudshoorn": [578, 922], "buck": 578, "1960": [578, 667], "302": 578, "306": 578, "imp_mean": [578, 581], "9584": [578, 980], "nan_euclidean": [579, 712, 728], "_pairwise_cal": 579, "kwd": [579, 721, 724, 728, 731, 740, 741], "olga": [579, 922], "troyanskaya": [579, 922], "cantor": [579, 922], "gavin": [579, 922], "sherlock": [579, 922], "pat": [579, 922], "botstein": [579, 922], "russ": [579, 922], "altman": [579, 922], "bioinformat": [579, 922], "520": [579, 798, 922, 935], "n_output_featur": 579, "error_on_new": 580, "features_": [580, 922], "n_missing_featur": 580, "x2_tr": 580, "n_features_with_miss": 580, "statistics_": 581, "n_features_missing_ind": 581, "x_imput": 581, "n_features_out": 581, "quadcontourset": 582, "quadmesh": 582, "feature_1": [582, 862], "feature_2": 582, "nicer": 582, "overwrit": [582, 958, 973, 984], "pd_result": 583, "target_idx": 583, "decil": [583, 984], "pdp_lim": 583, "is_categor": 583, "nonexist": 583, "deciles_vlines_": 583, "vlines_": 583, "deciles_hlines_": 583, "bars_": 583, "heatmaps_": 583, "ice_lines_kw": 583, "pd_line_kw": 583, "contour_kw": 583, "disp1": 583, "disp2": 583, "pdp_line_kw": 583, "bar_kw": 583, "heatmap_kw": 583, "seq": 584, "n_values_feature_j": 584, "bre": [585, 948], "4666": 585, "2211": 585, "x_min_": 586, "x_max_": 586, "n_threshold": [586, 677, 732, 739], "stepwis": [586, 605, 606, 607, 633, 634, 928], "increasing_": 586, "isotonic_regress": [586, 986], "secondari": [586, 977], "leeuw": 586, "1977": 586, "nilotp": [586, 588], "chakravarti": [586, 588], "303": 586, "308": 586, "pava": 586, "hornik": 586, "mair": 586, "kruskal": [586, 641, 645, 929], "psychometrica": 586, "iso_reg": 586, "8628": 586, "7256": 586, "isotonicregression0": 586, "increasing_bool": 587, "fisher_transform": 587, "sample_step": 589, "sample_interv": 589, "sample_interval_": [589, 989], "skewedchi2sampl": [589, 590, 591, 592, 924, 980, 987, 988], "chi2_kernel": [589, 593, 708, 715, 930, 974], "additive_chi2_kernel": [589, 709, 715, 924], "vedaldi": [589, 924], "zisserman": [589, 924, 932], "chi2sampl": 589, "9499": 589, "component_indices_": [590, 986], "normalization_": 590, "additivechi2sampl": [590, 591, 592, 593, 708, 709, 924, 987, 989], "kernel_metr": [590, 591, 592, 593], "seeger": 590, "mahdavi": 590, "jin": [590, 984, 985], "data_transform": 590, "9987": 590, "fft": 591, "indexhash": 591, "bithash": 591, "indexhash_": 591, "bithash_": 591, "kitchen": [592, 924], "sink": [592, 924], "random_offset_": [592, 593], "random_weights_": [592, 593], "rahimi": [592, 924], "benjamin": [592, 975, 976, 984, 985, 986, 987, 988], "recht": [592, 924], "berkelei": [592, 857, 858], "brecht": 592, "rah": 592, "rbf_featur": [592, 924], "skewed": [593, 980], "secant": 593, "hyperbol": [593, 806, 807, 930, 936], "fuxin": 593, "catalin": 593, "ionescu": [593, 924, 983], "cristian": 593, "sminchisescu": [593, 924], "chi2_featur": 593, "2c": [594, 603, 623, 624, 625, 626, 638, 924], "492": [594, 925, 965], "493": [594, 849, 925], "alpha_1": [595, 596, 928], "alpha_2": [595, 596, 928], "lambda_1": [595, 596, 928], "lambda_2": [595, 596, 928], "threshold_lambda": 595, "x_offset_": [595, 596, 985], "x_scale_": [595, 596, 985], "mackai": [595, 596, 928], "ashra": 595, "salakhutdinov": [595, 798, 935], "lectur": [595, 924, 951], "utstat": 595, "rsalakhu": 595, "sta4273": 595, "lecture2": 595, "computed_scor": 596, "appendix": [596, 627, 928, 942], "wipf": [596, 928], "nagarajan": [596, 928], "2_2": [597, 598, 603, 604, 605, 606, 607, 611, 612, 613, 614, 623, 632, 633, 634, 635], "glmnet": [597, 598, 973], "sparse_coef_": [597, 603, 611, 613, 973], "dual_gap_": [597, 598, 603, 604, 611, 612, 613, 614, 986], "max_j": [597, 603], "w_j": [597, 603, 932, 946], "ext": 597, "83816048": 597, "55968825": 597, "451": 597, "coef_init": [597, 598, 603, 604, 611, 612, 613, 614, 617, 619, 627, 628, 629, 632, 635], "mono": [597, 598, 603, 604, 611, 612, 613, 614, 632, 635], "_21": [597, 598, 603, 604, 611, 612, 613, 614, 632, 635], "sum_j": [597, 598, 603, 604, 611, 612, 613, 614, 632, 635, 928, 932, 937], "alpha_min": [597, 598, 601, 603, 604, 605, 607, 611, 612, 613, 614, 632, 633, 634, 635], "alpha_max": [597, 598, 603, 604, 611, 612, 613, 614, 632, 635], "ndim": [597, 598, 603, 604, 611, 612, 613, 614, 632, 635, 869, 870], "multitaskelasticnet": [597, 598, 603, 612, 613, 614, 632, 928, 973, 980, 981, 984, 986], "multitaskelasticnetcv": [597, 598, 603, 611, 613, 614, 632, 928, 976, 983, 984, 986], "l1_ratio_": [598, 610, 612], "n_l1_ratio": [598, 610, 612, 976], "199": [598, 701, 947], "398": [598, 967], "unpen": [599, 620, 631, 928], "raphson": [599, 620, 631], "g_j": [599, 620, 631], "773": [599, 787], "066": 599, "896": 599, "483": 599, "795": 599, "pg_i": 600, "scale_": [600, 818, 819, 827, 829, 839, 942, 978], "outliers_": 600, "elvezio": [600, 928], "ronchetti": [600, 928], "concomit": [600, 928], "owen": [600, 982, 983], "hybrid": [600, 952], "statweb": [600, 633, 634], "hhu": [600, 982], "284": 600, "806": 600, "7200": 600, "4923": 600, "1698": 600, "0106": 600, "9221": 600, "0226": 600, "fit_path": [601, 605, 606, 607, 633, 634], "jitter": [601, 605, 984], "coef_path_": [601, 602, 605, 606, 928], "active_": [601, 602, 605, 606], "larscv": [601, 616, 633, 634, 980, 986], "1111": [601, 607], "max_n_alpha": [602, 606], "n_cv_alpha": [602, 606], "cv_alpha": [602, 606], "lassolar": [602, 603, 604, 606, 607, 614, 615, 616, 633, 634, 635, 928, 965, 973, 974, 976, 980, 983, 984, 986], "9996": 602, "2961": 602, "154": [602, 933], "3996": 602, "2_f": 603, "_11": 603, "9993": [604, 606, 981], "4951": 604, "2_fro": [604, 613, 614, 635], "coef_path": [604, 614, 635], "46874778": [604, 614, 635], "2159048": [604, 614, 635], "4425765": [604, 614, 635], "23689075": [604, 614, 635], "coef_path_lar": [604, 614, 635], "coef_path_continu": [604, 614, 635], "interp1d": [604, 614, 635], "46915237": [604, 614, 635], "23668876": [604, 614, 635], "congruenc": [605, 606, 607, 633, 634], "fragil": 606, "3972": 606, "4831": 606, "2222": 607, "rank_": 608, "singular_": 608, "maxent": [609, 610, 928], "primal": [609, 610, 628, 849, 850, 946, 947], "synthetic_feature_weight": [609, 610], "ciyou": 609, "byrd": 609, "jorg": [609, 976, 985, 987], "noced": 609, "lui": [609, 974, 976, 977, 981], "iem": 609, "lbfgsb": 609, "schmidt": [609, 928, 976], "le": [609, 817, 923, 928, 935, 943, 945, 981, 985, 986], "roux": [609, 928, 945], "00860051": 609, "defazio": [609, 928], "lacost": [609, 928], "hsiang": [609, 977], "fu": [609, 977], "fang": [609, 980, 981], "lan": [609, 988], "chih": [609, 978], "jen": [609, 981], "maxent_du": 609, "cs_": 610, "l1_ratios_": 610, "coefs_paths_": [610, 983], "coefs_path": 610, "n_l1_ratios_": 610, "w_ij": 611, "eps_": [611, 613], "45663524": 611, "45612256": 611, "0872422": 611, "fro_2": [612, 614], "multitasklassocv": [612, 976, 983, 984, 986], "52875032": 612, "46958558": 612, "00166409": 612, "60809415": 613, "94592424": 613, "41888636": 613, "87382323": 613, "9994": 614, "5713": 614, "153": 614, "7971": 614, "9015": [614, 981], "n_nonzero_coefs_": [615, 616], "orthogonal_mp_gram": [615, 616, 636, 987], "mallat": [615, 636, 637, 928], "3397": [615, 636, 637], "3415": [615, 636, 637], "papier": [615, 636, 637], "mallatpursuit93": [615, 636, 637], "rubinstein": [615, 636, 637], "zibulevski": [615, 636, 637], "elad": [615, 636, 637], "technion": [615, 636, 637, 928], "ronrubin": [615, 636, 637, 928], "ksvd": [615, 636, 637, 928], "9991": [615, 616, 981], "3854": [615, 616], "previous_loss": [617, 618, 619, 628], "pa": [617, 618, 846, 928, 932, 945], "preset": [617, 619, 627, 936], "t_": [617, 618, 619, 627, 628, 629, 806, 807, 946], "loss_function_": [617, 619, 627, 628], "volume7": [617, 618], "crammer06a": [617, 618], "crammer": [617, 618, 685, 928, 932, 947], "dekel": [617, 618, 928], "keshat": [617, 618, 928], "shalev": [617, 618, 928, 946], "shwartz": [617, 618, 928, 946], "singer": [617, 618, 685, 928, 932, 946, 947], "26642044": 617, "45070924": 617, "67251877": 617, "64185414": 617, "84127814": 617, "intercept_init": [617, 619, 627, 629], "y_all": [617, 619, 627, 777, 778, 806], "epsilon_insensit": [618, 627, 629, 850, 928, 946], "squared_epsilon_insensit": [618, 627, 629, 850, 928, 979], "48736655": 618, "18818427": 618, "59122734": 618, "94731329": 618, "02306214": 618, "eta0": [619, 627, 628, 629, 946], "lossfunct": [619, 627, 628, 982], "therein": 619, "939": [619, 962], "990": [620, 932], "088": [620, 940], "676": 620, "875": 620, "solver_opt": 621, "ipm": 621, "linprog": [621, 928], "is_data_valid": [622, 928], "is_model_valid": [622, 928], "max_trial": [622, 928], "max_skip": 622, "stop_n_inli": [622, 928], "stop_scor": [622, 928], "stop_prob": 622, "mad": [622, 979], "costlier": 622, "n_trials_": 622, "n_skips_no_inliers_": 622, "n_skips_invalid_data_": 622, "n_skips_invalid_model_": 622, "sri": [622, 928, 980, 981], "bmva": 622, "bmvc": [622, 928], "paper355": 622, "9885": 622, "9417": 622, "15000": [623, 638, 806, 807], "btol": [623, 625], "gcv_mode": [624, 975], "store_cv_valu": [624, 626, 981, 984], "alpha_per_target": [624, 985], "cv_values_": [624, 626], "ridgeclassifiercv": [624, 625, 738, 932, 933, 981, 983, 984, 986, 987], "5166": 624, "gcv": [624, 626], "9595": 625, "9630": 626, "power_t": [627, 628, 629, 806, 807, 946], "best_loss": [627, 629], "leon": [627, 628, 629, 973], "bottou": [627, 628, 629, 936, 946], "pow": [627, 628, 629, 806, 807], "dl": 627, "775047": 627, "775151": 627, "justif": 627, "volume2": 627, "zhang02c": 627, "offset_init": 628, "unshifft": 628, "n_subsampl": [630, 875], "breakdown_": 630, "n_subpopulation_": 630, "xin": [630, 928, 981], "dang": [630, 928], "hanxiang": [630, 928], "peng": [630, 928, 979, 980, 981, 983, 985], "xueqin": [630, 928], "hepe": [630, 928], "olemiss": 630, "xdang": 630, "mtse": 630, "9884": 630, "5871": 630, "coeff": 631, "839": 631, "599": 631, "copy_gram": [633, 634, 637], "return_path": [633, 634, 636, 637], "lars_path_gram": [633, 928, 982], "tib": [633, 634], "xgamma": 636, "norms_squar": 637, "copy_xi": 637, "return_intercept": [638, 982], "linearoper": 638, "_preprocess_data": 638, "path_method": [639, 929], "neighbors_algorithm": [639, 640], "arnoldi": [639, 640, 644], "fw": 639, "warshal": [639, 929], "kernel_pca_": 639, "nbrs_": [639, 640], "dist_matrix_": 639, "tenenbaum": [639, 929], "290": [639, 640, 644, 929], "5500": [639, 929], "reconstruction_error": 639, "frobenius_norm": 639, "d_fit": 639, "x_fit": 639, "n_queri": [639, 791, 792, 793, 795, 797, 799, 800, 801], "hessian_tol": [640, 644], "modified_tol": [640, 644], "reconstruction_error_": 640, "rowei": [640, 644, 798, 929, 935], "saul": [640, 644, 929, 980, 981, 983], "2323": [640, 644, 929], "donoho": [640, 644, 929], "grime": [640, 644, 929], "natl": [640, 644, 929], "acad": [640, 644, 929], "5591": [640, 644, 929], "mlle": [640, 644, 929], "zha": [640, 644, 929], "shanghai": [640, 644, 929], "univ": [640, 644, 929], "406": [640, 644, 929], "immers": [641, 645], "nonmetr": [641, 645], "smacof": [641, 988], "stress": [641, 645, 929, 988], "stress_": 641, "dispar": [641, 645, 929], "dissimilarity_matrix_": 641, "psychometrika": [641, 645, 929], "1964": [641, 645, 825, 837, 929], "borg": [641, 645, 929], "groenen": [641, 645, 929], "affinity_matrix": 642, "n_neighbors_": [642, 795], "early_exagger": 643, "min_grad_norm": [643, 979], "square_dist": [643, 985], "der": [643, 647, 929, 976, 977, 981], "maaten": [643, 647, 929], "bhtsne": [643, 980], "opentsn": 643, "abort": 643, "pdist": [643, 650, 728, 731], "pairwise_distance_funct": [643, 647, 728, 731, 935], "barn": [643, 978, 980, 983], "hut": [643, 978, 980, 983], "nlogn": 643, "kl_divergence_": [643, 980], "learning_rate_": [643, 807], "hinton": [643, 798, 805, 806, 807, 929, 935, 936, 937], "2579": 643, "2605": 643, "lvdmaaten": [643, 980], "oct": [643, 719, 929, 935], "3221": [643, 929], "3245": [643, 929], "jmlr_2014": 643, "belkina": [643, 929], "ciccolella": [643, 929], "anno": [643, 929], "halpert": [643, 929], "spidlen": [643, 929], "snyder": [643, 929], "cappion": [643, 929], "kobak": [643, 986], "beren": 643, "transcriptom": 643, "guttman": 645, "norm_laplacian": 646, "drop_first": 646, "nk": 647, "2n": [647, 924, 936], "3k": 647, "cosine_dist": [647, 712, 935, 979], "jarkko": 647, "venna": 647, "samuel": [647, 956, 976, 977, 979, 981, 982, 983, 984, 985, 986, 987], "kaski": 647, "icann": 647, "verlag": 647, "485": 647, "491": 647, "twelth": 647, "pmlr": 647, "384": [647, 850], "391": 647, "im_": 648, "axesimag": 648, "text_": 648, "include_valu": 648, "values_format": [648, 983], "im_kw": [648, 987], "text_kw": [648, 988], "get_metr": 650, "19615242": 650, "euclideandist": 650, "manhattandist": 650, "chebyshevdist": 650, "minkowskidist": [650, 986], "wminkowski": [650, 796, 935, 985, 987], "wminkowskidist": 650, "seuclideandist": 650, "mahalanobisdist": 650, "haversinedist": 650, "arcsin": [650, 714], "hammingdist": 650, "n_unequ": 650, "n_tot": 650, "canberradist": 650, "braycurtisdist": 650, "abbrevi": 650, "ntt": 650, "ntf": 650, "nft": 650, "nff": 650, "nneq": 650, "jaccarddist": 650, "matchingdist": 650, "dicedist": 650, "kulsinskidist": [650, 989], "rogerstanimotodist": 650, "russellraodist": 650, "sokalmichenerdist": 650, "sokalsneathdist": 650, "pyfunc": [650, 935], "pyfuncdist": 650, "dist_to_rdist": 650, "surrog": [650, 956], "cdist": [650, 986], "rdist_to_dist": 650, "rdist": 650, "predictionrecalldisplai": [651, 932], "drop_intermedi": [651, 653, 732, 739, 989], "errors_lines_": 652, "with_error": 652, "scatter_": 652, "balanced_accuracy_scor": [654, 737, 932, 981], "imperfectli": [654, 684, 932], "label_tru": [655, 668, 687, 705, 707, 743], "upperlimit": 655, "nat": [655, 705, 707, 987], "expected_ri": 656, "discord": 656, "hubert1985": 656, "1007": 656, "2fbf01908075": 656, "steinley2004": 656, "wk": 656, "rand_index": 656, "adjusted_rand_index": 656, "chacon": 656, "chac\u00f3n": 656, "rastrojo": 656, "balanced_accuraci": [659, 932, 981], "brodersen": 659, "ong": 659, "stephan": [659, 976, 982, 983, 985], "buhmann": 659, "20th": 659, "3121": 659, "kelleh": [659, 932], "aoif": [659, 932], "arci": [659, 932], "625": 659, "y_true_categor": [660, 932], "037": 660, "calinski": [661, 979], "harabasz": 661, "allow_non": 662, "thrown": [662, 982, 983], "tn": [663, 669, 932], "negative_class": 663, "zebra": 663, "output_dict": [664, 981, 985], "zero_divis": [664, 679, 680, 688, 733, 734, 737, 983, 985, 989], "precision_recall_fscore_support": [664, 679, 680, 734, 737, 932, 977, 981, 983, 989], "multilabel_confusion_matrix": [664, 679, 680, 688, 734, 737, 932, 982], "conting": [665, 666, 681, 705, 979], "n_classes_tru": [665, 705], "n_classes_pr": [665, 705], "cohen": [667, 981], "p_o": 667, "p_e": 667, "artstein": 667, "poesio": 667, "linguist": [667, 846, 945], "555": 667, "596": 667, "label_pr": [668, 686, 687, 705, 707, 743], "ant": [669, 704, 932], "a_row": 670, "a_column": 670, "b_row": 670, "b_column": 670, "tsoumaka": [671, 684, 690, 932], "kataki": [671, 684, 690, 932], "vlahava": [671, 690, 932], "handbook": [671, 690, 932], "667": [671, 690, 932], "685": [671, 690, 932], "raw_valu": [672, 673, 678, 695, 696, 698, 700, 701, 703, 735, 932, 981, 984], "wainwright": [672, 673, 674], "su": [672, 673, 674], "statlearnspars": [672, 673, 674], "764": [672, 932], "691": 672, "8125": 672, "57142857": 672, "d2": 673, "d2_absolute_error_scor": [673, 932, 987], "koenker": [673, 928], "roger": [673, 980, 981, 985], "jos\u00e9": [673, 976, 986], "772": 673, "045": 673, "285": 674, "487": 674, "630": 674, "bouldin": 675, "farther": 675, "log_bas": 676, "ignore_ti": [676, 706], "ndcg": [676, 706, 932, 980], "ndcg_score": [676, 932, 980, 983, 988, 989], "sharper": 676, "discounted_cumulative_gain": 676, "dcg": [676, 706, 932, 980], "jarvelin": [676, 706, 932], "kekalainen": [676, 706, 932], "colt": [676, 706, 932], "mcsherri": [676, 706, 932], "najork": [676, 706, 932], "european": [676, 706, 932], "421": [676, 706, 932], "groud": [676, 706], "true_relev": [676, 706], "propabl": 677, "imperfect": [678, 735, 932, 975], "variance_weight": [678, 735, 932], "n_unique_label": [679, 680, 688, 733, 734, 737, 896], "fbeta_scor": [679, 692, 733, 932, 975, 976, 977, 978, 983, 989], "undefinedmetricwarn": [679, 680, 733, 734, 737, 982], "y_true_empti": 679, "y_pred_empti": [679, 680], "66666667": [679, 732, 799, 942], "lend": [680, 956], "327": [680, 965], "328": 680, "fowlk": [681, 979], "mallow": [681, 979], "get_scorer_nam": [682, 932, 987], "forgiv": 684, "upperbound": 684, "grigorio": 684, "ioanni": 684, "wareh": 684, "septemb": [684, 932, 973, 976, 979, 981, 986], "pred_decis": [685, 932, 986], "disagre": [685, 939], "kobi": 685, "yoram": 685, "265": [685, 784, 788, 934], "AND": 685, "denero": 685, "gluster": 686, "v_measur": [686, 743], "6666": [688, 932, 979], "5833": [688, 932], "lrap": [689, 932], "416": [689, 932], "209": [691, 825], "21616": 691, "needs_proba": [692, 982], "needs_threshold": [692, 932], "ftwo_scor": [692, 932], "mcc": [693, 932, 987], "baldi": 693, "brunak": 693, "chauvin": 693, "andersen": [693, 987], "nielsen": [693, 981], "gorodkin": 693, "jurman": 693, "riccadonna": 693, "furlanello": 693, "cen": 693, "mape": [696, 932], "3273": 696, "5515": 696, "6198": 696, "112589990684262": 696, "0568": 697, "4260": [699, 702], "612": 700, "822": 700, "41666667": 700, "825": 700, "msle": [701, 932], "rmsle": 701, "039": [701, 731, 932], "044": [701, 932], "00462428": 701, "08377444": 701, "060": 701, "samplewis": [704, 932], "mcm": [704, 932], "mcm_": 704, "multi_confus": 704, "normalized_discounted_cumulative_gain": 706, "dcg_score": [706, 932, 980, 983], "kernel_matrix": [708, 709, 716, 726], "marszalek": [708, 709, 930], "lazebnik": [708, 709, 930], "schmid": [708, 709, 930], "ouvert": [708, 709, 930], "00171412": [708, 709, 930], "cosine_similar": [710, 715, 930, 978], "dense_output": [711, 717, 842, 887, 981], "linear_kernel": [711, 715, 930, 981], "haversine_dist": [712, 982], "y_norm_squar": 713, "x_norm_squar": [713, 978], "catastroph": [713, 953], "paired_dist": [713, 719, 728, 977], "41421356": [713, 719, 935], "ezeiza": 714, "airport": 714, "bueno": 714, "argentina": 714, "gaull": 714, "franc": 714, "bsa": 714, "83333": 714, "5166646": 714, "0083899664": 714, "53844117956": 714, "bsas_in_radian": 714, "paris_in_radian": 714, "6371000": 714, "kilomet": 714, "11099": 714, "54035582": 714, "polynomial_kernel": [715, 930], "rbf_kernel": [715, 930, 977], "laplacian_kernel": [715, 930, 978], "sigmoid_kernel": [715, 930], "kernal_metr": 715, "sum_over_featur": [718, 973, 988], "componentwis": 718, "sq": 719, "dixon": [719, 983, 984], "cybernet": 719, "621": 719, "ieeexplor": 719, "4310090": 719, "filter_param": 724, "jth": [724, 728], "tanh": [727, 806, 807, 930, 947], "force_all_finit": [728, 867, 869, 870, 984, 987], "distance_metr": [728, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803], "metric_kwarg": [729, 730], "reduce_func": [731, 984], "d_chunk": 731, "sought": 731, "neigh": [731, 791, 792, 793, 795, 797, 799, 800, 801], "gen": 731, "probas_pr": 732, "warn_for": 733, "shantanu": 733, "godbol": 733, "sunita": 733, "sarawagi": 733, "pig": 733, "948": [735, 932], "938": [735, 932, 962], "max_fpr": [738, 932, 981], "provost": [738, 932], "ceder": [738, 932], "stern": [738, 932], "fawcett": [738, 739, 932], "874": [738, 739, 932], "generalis": [738, 932, 953], "multioutputclassifi": [738, 778, 780, 782, 932, 980, 982, 983, 984, 985], "86": [738, 857, 932, 963], "n_samples_a": [740, 741], "favour": [740, 929, 931, 982], "mean_prior": 745, "degrees_of_freedom_prior": 745, "verbose_interv": [745, 746], "wishart": 745, "emipr": 745, "precisions_": [745, 746], "precisions_cholesky_": [745, 746, 987], "converged_": [745, 746], "lower_bound_": [745, 746, 981], "weight_concentration_prior_": 745, "weight_concentration_": 745, "mean_precision_prior_": 745, "mean_precision_": 745, "mean_prior_": 745, "degrees_of_freedom_prior_": 745, "degrees_of_freedom_": 745, "covariance_prior_": 745, "hagai": 745, "attia": 745, "bgm": 745, "n_dimens": [745, 746], "log_prob": [745, 746], "weights_init": 746, "precisions_init": [746, 987], "gm": 746, "pre_dispatch": [747, 753, 761, 770, 771, 772, 773, 776, 898, 976], "error_scor": [747, 750, 751, 753, 761, 771, 772, 773, 776, 921, 977, 981, 985, 988], "explos": [747, 761, 770, 771, 772], "fitfailedwarn": [747, 750, 751, 753, 761, 771, 772, 773, 776], "param_kernel": [747, 761], "param_degre": 747, "split0_test_scor": [747, 761, 979], "rank_t": 747, "split1_test_scor": [747, 761], "split0_train_scor": [747, 761, 979], "split1_train_scor": [747, 761], "mean_train_scor": [747, 761, 979], "std_train_scor": [747, 761, 979], "split0_test_precis": [747, 761], "mean_train_precis": [747, 761], "best_estim": [747, 750, 751, 761], "scorer_": [747, 750, 751, 761], "n_splits_": [747, 750, 751, 761], "refit_time_": [747, 750, 751, 761, 981], "multimetric_": [747, 750, 751, 761], "parametergrid": [747, 975, 981], "split2_test_scor": 747, "num_sampl": [747, 761, 988], "stratif": [748, 749, 755, 756, 765, 766, 767, 903, 982], "group_kfold": 748, "aggressive_elimin": [750, 751, 921], "r0": [750, 751], "replai": [750, 751], "n_remaining_candidates_": [750, 751], "n_candid": [750, 751, 921], "max_resources_": [750, 751], "min_resources_": [750, 751], "n_required_iterations_": [750, 751], "n_possible_iterations_": [750, 751], "exceed": [750, 751, 979], "n_unique_tick": [753, 773], "n_tick": [753, 773, 776], "errorbar_": 753, "errorbarcontain": 753, "line2d": 753, "fill_between_": 753, "polycollect": 753, "775": [753, 773], "exploit_incremental_learn": [753, 773], "log_scal": 753, "fill_between_kw": 753, "errorbar_kw": 753, "model_selectionkfold": 753, "predispatch": [753, 773, 776], "negat": [753, 932], "neg_": [753, 979], "combinator": 757, "lpo": 757, "param_list": 759, "rounded_list": 759, "89856": 759, "923223": 759, "878964": 759, "038159": 759, "parametersampl": [761, 975, 981, 985], "2652124": 762, "rskf": 763, "36851234": 763, "sizeabl": [764, 767], "sad": [765, 766], "sss": 767, "kth": 768, "checked_cv": 769, "3315057": [771, 772], "08022103": [771, 772], "03531816": [771, 772], "test_r2": 772, "test_auc": 772, "train_r2": 772, "train_auc": 772, "3635": 772, "3573": 772, "6114": 772, "28009951": 772, "3908844": 772, "22784907": 772, "train_sizes_ab": 773, "train_size_ab": 773, "cv_train_scor": 773, "cv_test_scor": 773, "permutation_scor": 774, "n_valu": [776, 981], "pairwise_indices_": 777, "outputcodeclassifi": [777, 778, 980, 985, 989], "label_binarizer_": 778, "multilabel_": [778, 978], "onevsoneclassifi": [778, 779, 974, 976, 977, 979, 980, 982, 985, 987], "code_s": [779, 933], "code_book_": 779, "bakiri": [779, 933], "pict": [779, 933], "order_": [780, 783], "regressorchain": [780, 782, 981, 984, 988], "jess": [780, 933, 986], "pfahring": [780, 933], "geoff": [780, 933], "holm": [780, 933], "eib": [780, 933], "8387": 780, "9431": 780, "4576": 780, "8878": 780, "3684": 780, "2640": 780, "0321": 780, "9935": 780, "0625": 780, "y_decis": 780, "load_linnerud": [782, 979, 984], "force_alpha": [784, 785, 786, 788, 988], "lidston": [784, 785, 786, 788, 934], "class_count_": [784, 785, 786, 787, 788], "class_log_prior_": [784, 785, 786, 788], "feature_count_": [784, 786, 788], "feature_log_prob_": [784, 785, 786, 788], "categoricalnb": [784, 786, 787, 788, 934, 983, 984, 985, 986, 988], "renni": [784, 786, 934, 981], "schuetz": [784, 788], "234": [784, 788, 806, 807, 934], "htmledit": [784, 788, 930], "mccallum": [784, 934], "nigam": [784, 934], "metsi": [784, 934], "androutsopoulo": [784, 934], "palioura": [784, 934], "cea": [784, 934], "predict_joint_log_proba": [784, 785, 786, 787, 788, 988], "min_categori": [785, 985], "n_categori": [785, 823, 942], "category_count_": 785, "n_categories_": 785, "mirror": [786, 921], "mahout": 786, "weka": 786, "feature_all_": 786, "shih": [786, 934], "teevan": [786, 934], "karger": [786, 934], "616": [786, 934, 942], "623": [786, 934], "jrenni": 786, "icml03": 786, "var_smooth": [787, 981], "stan": 787, "levequ": [787, 829], "cstr": 787, "epsilon_": 787, "theta_": [787, 934], "clf_pf": 787, "valid_metr": [789, 790, 935], "random_sampl": [789, 790, 794], "19662693": [789, 790], "29473397": [789, 790], "tree_copi": [789, 790], "query_radiu": [789, 790], "count_onli": [789, 790], "kernel_dens": [789, 790], "94114649": [789, 790], "83281226": [789, 790], "2071716": [789, 790], "two_point_correl": [789, 790], "580": [789, 790], "820": [789, 790], "get_arrai": [789, 790], "get_n_cal": [789, 790], "n_call": [789, 790], "get_tree_stat": [789, 790], "tree_stat": [789, 790], "breadth_first": [789, 790, 794], "return_log": [789, 790], "k_true": [789, 790], "k_ret": [789, 790], "breadth": [789, 790, 794, 956, 975], "dualtre": [789, 790], "sort_result": [789, 790, 797, 799, 800, 801, 985], "radii": [789, 790], "reset_n_cal": [789, 790], "effective_metric_": [791, 792, 793, 795, 797, 799, 800, 801, 935], "callbl": 791, "effective_metric_params_": [791, 792, 793, 795, 797, 799, 800, 801], "outputs_2d_": [791, 799, 983], "nearest_neighbor_algorithm": [791, 799, 800], "333": 791, "n_index": [791, 792, 793, 795, 797, 799, 800], "neigh_dist": [791, 792, 793, 795, 797, 799, 800, 801], "neigh_ind": [791, 792, 793, 795, 797, 799, 800, 801], "nearest_neighbors_algorithm": [792, 797], "nearer": [793, 801, 935], "x_dist_graph": 793, "silverman": [794, 988], "binarytre": [794, 977, 981, 985], "bandwidth_": 794, "log_dens": 794, "52955942": 794, "51462041": 794, "60244657": 794, "logprob": 794, "negative_outlier_factor": 795, "9821": 795, "0370": 795, "3697": 795, "shifted_opposite_lof_scor": 795, "opposite_lof_scor": 795, "narasimhan": 796, "chu": [796, 989], "shrunken": [796, 973], "6567": 796, "6572": 796, "nbr": [797, 935], "neighborsclassifi": [797, 799, 800, 801, 973], "n_features_a": 798, "n_features_b": 798, "goldberg": [798, 935], "neighbourhood": [798, 935], "513": [798, 935], "ncanip": 798, "neighbourhood_components_analysi": 798, "933333": 798, "961904": 798, "outlier_label": [799, 983], "outlier_label_": 799, "33333333": [799, 942], "x_cluster": 801, "warn_when_not_sort": 804, "efficiencywarn": [804, 988], "sml": [805, 937], "pcd": [805, 937], "sweep": 805, "gibb": [805, 937, 952], "intercept_hidden_": 805, "intercept_visible_": 805, "h_samples_": 805, "osindero": [805, 937], "teh": [805, 937], "1527": 805, "1554": 805, "absp": 805, "fastnc": 805, "tieleman": [805, 937], "v_new": 805, "pseudo_likelihood": 805, "relu": [806, 807], "beta_1": [806, 807], "beta_2": [806, 807], "max_fun": [806, 807, 983], "n_layer": [806, 807], "neuron": [806, 807, 930, 936], "tan": [806, 807, 936, 980], "rectifi": [806, 807], "kingma": [806, 807, 936], "diederik": [806, 807, 936, 988], "jimmi": [806, 807, 936, 979, 981], "gradual": [806, 807, 946], "effective_learning_r": [806, 807], "best_loss_": [806, 807, 988], "ot": 806, "best_validation_score_": [806, 807, 988], "validation_scores_": [806, 807, 988], "intercepts_": [806, 807, 936], "n_layers_": [806, 807], "out_activation_": [806, 807], "geoffrei": [806, 807, 936, 984, 985, 986, 987], "connectionist": [806, 807], "glorot": [806, 807], "xavier": [806, 807, 981, 982, 983, 985, 986], "yoshua": [806, 807, 945], "feedforward": [806, 807], "kaim": [806, 807], "delv": [806, 807], "surpass": [806, 807], "imagenet": [806, 807], "log_y_prob": 806, "time_step": 807, "named_transform": [808, 988], "transform_list": 808, "s__p": 809, "n_transformed_featur": 809, "predict_log_proba_param": 809, "y_log_proba": 809, "predict_proba_param": 809, "analyst": 812, "x_tr": [812, 818, 821, 822, 823, 827, 829, 832, 834, 835, 839, 840], "accept_spars": [813, 869, 870, 980], "inv_kw_arg": 813, "pickleabl": [813, 979], "6931": 813, "3862": 813, "onward": [814, 823, 977], "n_bins_": 814, "int_": 814, "regener": 814, "xinv": 814, "tild": [815, 940, 942], "k_fit_rows_": 815, "k_fit_all_": 815, "1299": [815, 942], "1319": [815, 942], "n_samples1": 815, "n_samples2": 815, "k_new": 815, "neg_label": [816, 833], "y_type_": 816, "sparse_input_": 816, "tokyo": [817, 943], "amsterdam": [817, 943], "max_abs_": 818, "x_std": [819, 835, 942], "data_min_": [819, 978], "data_max_": [819, 978], "data_range_": [819, 978], "unwieldi": 820, "fi": 820, "comedi": 820, "y_indic": 820, "yt": 820, "ands": 820, "feature_name_combin": [822, 989], "categories_": [822, 823, 830, 942, 981, 988], "unregular": [822, 845, 965, 982], "intact": [822, 967], "infrequ": [822, 823, 830, 932, 973, 987, 988, 989], "infrequent_if_exist": [822, 942], "x_6": 822, "x_7": 822, "drop_idx_": [822, 984, 988], "drop_idx": 822, "gender_femal": 822, "gender_mal": 822, "group_1": 822, "group_2": 822, "group_3": 822, "drop_enc": [822, 942], "drop_binary_enc": 822, "custom_combin": 822, "custom_fnames_enc": 822, "x0_str_femal": 822, "x0_str_male": 822, "x1_int_1": 822, "x1_int_2": 822, "x1_int_3": 822, "oh": [822, 983], "infrequent_sklearn": [822, 942], "n_encoded_featur": [822, 823], "weren": [823, 982], "bpo": 823, "43475": 823, "lenient": [823, 953], "min_degre": [824, 986], "max_degre": [824, 986], "powers_": 824, "n_output_features_": 824, "nystrom": [824, 982, 983], "featurewis": 825, "power_transform": [825, 838, 981], "biometrika": [825, 837], "954": [825, 837], "959": [825, 837], "386": 825, "707": [825, 837], "ignore_implicit_zero": [826, 838], "landmark": [826, 838, 942], "n_quantiles_": 826, "quantiles_": [826, 942, 983], "references_": 826, "robustscal": [826, 839, 922, 942, 978, 979, 981, 983, 984, 985, 989], "with_cent": [827, 839], "with_scal": [827, 839], "unit_vari": [827, 839, 985], "iqr": [827, 839], "interquartil": [827, 839], "quartil": 827, "75th": 827, "q_min": [827, 839], "q_max": [827, 839], "center_": 827, "robust_scal": [827, 838, 981], "interquartile_rang": 827, "bspline": 828, "n_features_out_": 828, "with_std": [829, 840, 942, 981], "n_samples_seen": 829, "5a": 829, "randal": [829, 977, 987], "242": [829, 973], "247": 829, "mic": [830, 942], "target_mean_": [830, 942], "target_type_": 830, "encodings_": 830, "micci": [830, 942], "barreca": [830, 942], "newsl": [830, 942], "enc_auto": 830, "enc_high_smooth": 830, "enc_low_smooth": 830, "ahead": 833, "return_norm": [836, 980], "notimplementederror": [836, 980], "332": 837, "076": 837, "compute_inverse_compon": [841, 842, 944], "inverse_components_": [841, 842, 944, 987], "2759": [841, 842], "afor": [841, 842], "baserandomproject": [841, 842], "ping": [842, 944, 979, 980], "density_": 842, "gaussianrandomproject": [842, 944, 974, 987, 989], "church": [842, 944], "kdd06_rp": 842, "cgi": 842, "uoa": 842, "gr": 842, "opta": 842, "0182": 842, "e2": [843, 928], "93lindenstrauss_lemma": 843, "sanjoi": [843, 944], "anupam": [843, 944, 988], "gupta": [843, 944, 980, 981, 984, 985, 986, 987, 989], "elementari": [843, 944], "663": [843, 940, 944], "11841": [843, 944], "1112658": [843, 944], "7894": [843, 944], "9868": [843, 944], "steadi": [844, 845], "baselabelpropag": [844, 980], "xiaojin": 844, "zoubin": 844, "ghahramani": 844, "cmu": 844, "cald": 844, "carnegi": 844, "mellon": 844, "jerryzhu": 844, "label_prop_model": [844, 845], "clamp": [845, 945], "dengyong": 845, "bousquet": 845, "navin": 845, "lal": 845, "schoelkopf": 845, "termination_condition_": 846, "no_chang": 846, "all_label": 846, "33rd": [846, 945], "acl": [846, 945, 946], "stroudsburg": [846, 945], "196": [846, 945], "crammer_sing": [849, 933, 947, 973], "seldom": 849, "readonli": [849, 850, 986, 988, 989], "raw_coef_": [849, 850], "smo": [849, 850], "526": 849, "679": 849, "1693": 849, "unsur": 850, "582": 850, "023": [850, 940], "522": 850, "class_weight_": [851, 852, 853, 854, 855, 988], "n_sv": [851, 852, 853, 854, 855, 947, 983], "fit_status_": [851, 852, 853, 854, 855], "n_support_": [851, 852, 853, 854, 855, 947, 983], "proba_": [851, 854, 984], "probb_": [851, 854, 984], "shape_fit_": [851, 852, 853, 854, 855], "n_dimensions_of_x": [851, 852, 853, 854, 855], "7798": 853, "0547": 853, "0556": 853, "0561": 853, "7332": 853, "unshift": 853, "impract": 854, "tube": [855, 947], "_tree": [857, 858, 859, 860, 974, 976], "decision_tree_learn": [857, 858, 948], "olshen": [857, 858, 948], "wadsworth": [857, 858, 948], "belmont": [857, 858, 948], "cutler": [857, 858], "cc_home": [857, 858], "htm": [857, 858], "ccp_path": [857, 858, 859, 860], "get_depth": [857, 858, 859, 860, 982], "get_n_leav": [857, 858, 859, 860, 982], "extra_tre": [859, 860], "8947": 859, "decision_tre": [861, 862, 863, 948], "out_fil": [861, 948], "leaves_parallel": 861, "special_charact": [861, 948], "fontnam": [861, 986], "helvetica": [861, 863], "graphviz": [861, 948], "postscript": 861, "tpng": 861, "paint": [861, 863], "dot_data": [861, 948], "digraph": 861, "show_weight": 862, "feature_0": 862, "unrepresent": 864, "keyerror": [864, 983], "popitem": 864, "lifo": 864, "input_nam": [868, 870, 895, 987], "accept_large_spars": [869, 870, 981], "ensure_2d": [869, 870], "allow_nd": [869, 870], "ensure_min_sampl": [869, 870], "ensure_min_featur": [869, 870], "y_numer": 869, "bsr": [869, 870, 986], "x_convert": 869, "y_convert": 869, "array_convert": 870, "min_val": 873, "max_val": 873, "include_boundari": [873, 987], "y_org": 874, "class_weight_vect": 874, "king": 874, "zen": 874, "sample_weight_vect": 875, "parenthes": 876, "type_filt": 878, "generate_onli": [880, 983], "checks_gener": 880, "test_check_estim": 881, "check_estimators_fit_returns_self": 881, "array_lik": 884, "logdet": 884, "slogdet": 884, "6375861597263857": 884, "flip_sign": 886, "svd_lapack_driv": 886, "gesdd": 886, "p5": 886, "transposit": 886, "gesvd": 886, "conquer": 886, "unitari": 886, "vh": 886, "dot_product": 887, "deweight": 888, "min_batch_s": 889, "n_pack": [889, 890], "path_length": 891, "sliceabl": 892, "truthi": 893, "helloifeven": 893, "_x_is_even": 893, "say_hello": 893, "temp_fold": 898, "max_nbyt": 898, "1m": 898, "mmap_mod": 898, "dispatch_next": 898, "dispatch_one_batch": 898, "unprotect": 898, "prefetch": 898, "print_progress": 898, "inner_max_num_thread": 900, "backend_param": 900, "register_parallel_backend": [900, 981], "pyiodin": 900, "dask": [900, 953, 981], "workload": [900, 952], "register_rai": 900, "backend_nam": 900, "oversubscript": [900, 987], "threadpool": 900, "effective_n_job": 900, "tracking_select": 901, "reservoir_sampl": 901, "reservoir": 901, "make_default": 902, "parallelbackendbas": 902, "resampled_arrai": 903, "3x2": [903, 906], "shuffled_arrai": 906, "last_mean": 907, "last_var": 907, "last_n": 907, "return_sum_weight": 913, "sum_weight": 913, "all_or_ani": [916, 983], "is_fit": 916, "__sklearn_is_fitted__": [916, 986, 987], "eg": 916, "substitut": [916, 953, 979], "raise_except": 918, "array_sym": 918, "is_paramet": 920, "enclos": 921, "set_stat": 921, "bergstra": [921, 973, 974], "tournament": 921, "dispos": [921, 967], "n_resources_i": 921, "n_resources_0": 921, "n_candidates_i": 921, "n_candidates_0": 921, "r_0": 921, "n_resourc": 921, "983667": 921, "951958": 921, "947958": 921, "961009": 921, "955989": 921, "jamieson": 921, "talwalkar": 921, "desalvo": 921, "rostamizadeh": 921, "hyperband": 921, "bandit": 921, "multimetr": [921, 983, 988], "calibrated_forest": 921, "select__k": 921, "model__estimator__max_depth": 921, "imp": 922, "sophist": [922, 934], "14338": 922, "13286": 922, "15611": 922, "amelia": 922, "scientist": [922, 956], "roderick": 922, "rubin": 922, "1986": [922, 948], "ol2001": 922, "mask_missing_values_onli": 922, "mask_al": 922, "rr2007": 924, "2x_iy_i": 924, "vz2010": 924, "vvz2010": 924, "prod_i": 924, "ls2010": 924, "c_0": [924, 930], "tensorsketch": 924, "pp2013": 924, "wikic": 924, "ccf2002": 924, "mercer": 924, "langl": [924, 932, 946, 947], "rangl": [924, 932, 946, 947], "y_j": [924, 932, 934, 947], "obviat": 924, "dagm": 924, "vempati": 924, "jawahar": 924, "charikar": 924, "farach": 924, "colton": 924, "m2012": 925, "mu_k": 926, "cst": 926, "omega_": 926, "k0": 926, "h_l": 926, "extrema": 926, "119": [926, 976], "honei": 926, "stork": 926, "dilemma": 927, "valid_scor": 927, "w_0": 928, "w_p": 928, "x_p": 928, "34545455": 928, "13636": [928, 982], "rifkin": 928, "lippert": 928, "2n_": 928, "softw": 928, "kim": [928, 981, 982, 983, 987], "koh": [928, 956], "lustig": 928, "boyd": 928, "gorinevski": 928, "c_p": 928, "cherkasski": 928, "yunqian": 928, "1691": 928, "1714": 928, "ell_2": 928, "equiangular": 928, "weisberg": 928, "ell_0": [928, 932], "_coef": 928, "mp": 928, "ell_": 928, "posteriori": [928, 934], "radford": 928, "neal": [928, 986], "50000013": 928, "49999993": 928, "lambda_i": [928, 942], "srikantan": 928, "tristan": 928, "fletcher": [928, 973, 977], "nomenclatur": [928, 979], "deliber": 928, "overparameter": 928, "ldot": [928, 932, 934, 936, 946], "w_l": 928, "min_w": 928, "iverson": 928, "broyden": 928, "goldfarb": 928, "shanno": 928, "shortcom": 928, "statsmodel": [928, 952], "aaron": [928, 976, 977, 978, 983], "simon": [928, 956, 976, 977, 986, 987, 988], "93fletcher": 928, "93goldfarb": 928, "93shanno_algorithm": 928, "noah": 928, "multirespons": 928, "edm": 928, "agricultur": 928, "rainfal": 928, "bernouli": 928, "fraud": [928, 956], "cash": 928, "fraudul": [928, 956], "interrupt": 928, "drug": 928, "cure": 928, "entertain": 928, "mccullagh": 928, "nelder": 928, "boca": 928, "raton": 928, "chapman": 928, "hall": [928, 980, 984], "crc": 928, "31760": 928, "j\u00f8rgensen": 928, "monografia": 928, "matem\u00e1tica": 928, "2463": 928, "4337": 928, "7638": 928, "disappear": [928, 973], "photogrammetr": 928, "hypothes": 928, "paradigm": 928, "cartographi": 928, "fischler": 928, "boll": 928, "1981": 928, "sunglok": 928, "choi": 928, "taemin": 928, "wonpil": 928, "93sen_estim": 928, "binom": 928, "infeas": [928, 935, 937], "k\u00e4rkk\u00e4inen": 928, "\u00e4yr\u00e4m\u00f6": 928, "h_": 928, "oarc": 928, "dae": 928, "bassett": 928, "jr": 928, "1978": 928, "econometrica": 928, "econometr": 928, "portnoi": 928, "hare": 928, "tortois": 928, "279": 928, "paraboloid": 928, "w_3": 928, "w_4": 928, "w_5": 928, "z_1": 928, "z_2": 928, "z_3": 928, "z_4": 928, "z_5": 928, "streamlin": 928, "gotten": [928, 942], "necess": [929, 935], "strife": 929, "mother": 929, "baloo": 929, "song": 929, "jungl": 929, "rubric": 929, "defici": [929, 946], "hlle": 929, "revolv": 929, "belkin": 929, "niyogi": 929, "1373": 929, "1396": 929, "molecul": 929, "jk": 929, "delta_": 929, "c_1": 929, "disentangl": 929, "legitim": 929, "die": 929, "noisier": 929, "5415": 929, "circuit": 929, "brief": 930, "num_featur": [930, 988], "quantum": 930, "nutshel": 930, "36787944": 930, "89483932": 930, "58364548": 930, "51341712": 930, "83822343": 930, "7768366": 930, "facil": 931, "equi": 931, "agnost": [931, 940], "cue": 931, "came": 931, "quicker": 931, "unpract": 931, "analogi": [931, 932], "top_k_accuraci": 932, "top_k_accuracy_scor": [932, 985, 987], "neg_brier_scor": [932, 983], "f1_micro": [932, 977], "f1_weight": [932, 977], "f1_sampl": 932, "neg_log_loss": 932, "roc_auc_ovr": [932, 983], "roc_auc_ovo": [932, 983], "roc_auc_ovr_weight": [932, 983], "roc_auc_ovo_weight": [932, 983], "explained_variance_scor": [932, 976, 980, 987], "max_error": [932, 982], "neg_mean_squared_log_error": 932, "mean_squared_log_error": [932, 980, 986], "neg_median_absolute_error": 932, "neg_mean_poisson_devi": 932, "neg_mean_gamma_devi": 932, "mean_gamma_devi": [932, 983], "d2_pinball_scor": [932, 987], "d2_tweedie_scor": [932, 986], "wrong_choic": 932, "_error": 932, "my_custom_loss_func": 932, "693": 932, "protocol": [932, 976, 989], "custom_scoring_funct": 932, "custom_scorer_modul": 932, "confusion_matrix_scor": 932, "test_tp": 932, "test_fn": 932, "untru": 932, "dividend": 932, "divisor": 932, "quotient": 932, "texttt": 932, "_class": 932, "youden": 932, "informed": 932, "mosley2013": 932, "kelleher2015": 932, "guyon2015": 932, "urbanowicz2015": 932, "escalant": 932, "escalera": 932, "maci\u00e0": [932, 986, 988], "saeed": 932, "statnikov": 932, "viega": 932, "chalearn": 932, "automl": [932, 952], "ijcnn": 932, "moslei": 932, "ijcv": 932, "urbanowicz": 932, "exstrac": 932, "evol": 932, "intel": [932, 952], "89": [932, 942, 967, 973, 976, 984], "cohen_kappa_scor": [932, 978, 980], "4285714285714286": 932, "manning2008": 932, "everingham2010": 932, "davis2006": 932, "flach2015": 932, "everingham": 932, "gool": 932, "winn": 932, "pascal": 932, "voc": 932, "goadrich": 932, "y_l": 932, "_l": 932, "emptyset": 932, "f_beta": 932, "hinge_loss": [932, 977, 985, 986], "ne": [932, 935], "1738": 932, "matthews_corrcoef": [932, 973, 979, 980, 987], "t_k": [932, 948], "ik": 932, "ki": 932, "kk": 932, "auroc": 932, "ht2001": 932, "fc2009": 932, "pd2000": 932, "f2006": 932, "f2001": 932, "inner_clf": 932, "c\u00e8sar": 932, "hernandez": 932, "orallo": 932, "modroiu": 932, "wikipediadet2017": 932, "martin1997": 932, "navratil2007": 932, "encyclopedia": 932, "utc": 932, "php": [932, 952], "detection_error_tradeoff": 932, "oldid": 932, "798982054": 932, "doddington": 932, "kamm": 932, "ordowski": 932, "przybocki": 932, "navractil": 932, "klusacek": 932, "acoust": 932, "icassp": 932, "honolulu": 932, "229": 932, "232": 932, "brier1950": 932, "p_i": [932, 935], "bella2012": 932, "flach2008": 932, "bella": 932, "hern\u00e1ndez": 932, "ram\u00edrez": 932, "quintana": 932, "khosrow": 932, "pour": 932, "hershei": 932, "edson": [932, 978], "matsubara": 932, "dagstuhl": 932, "seminar": 932, "schloss": 932, "leibniz": 932, "zentrum": 932, "lr_": 932, "brenner": 932, "gefel": 932, "991": 932, "coverage_error": [932, 977, 987], "label_ranking_average_precision_scor": [932, 977, 981, 982, 988], "label_ranking_loss": [932, 978], "grade": 932, "unalt": 932, "epsilon_i": 932, "965": 932, "908": 932, "925": [932, 962], "7083": 932, "log_": 932, "growth": [932, 978, 979], "commod": 932, "mapd": 932, "2e6": 932, "2666": 932, "y_n": [932, 936, 946], "967": [932, 936], "elicit": 932, "2500": 932, "mean_pinball_loss_95p": 932, "skill": 932, "mcfadden": 932, "d2_tweedie_score_15": 932, "d2_pinball_score_08": 932, "heteroschedast": 932, "homoschedast": 932, "pear": 933, "y_dens": 933, "y_spars": 933, "advoc": 933, "financ": 933, "f3": 933, "y3": 933, "multi_target_forest": 933, "109": [933, 975], "75474165": 933, "147": 933, "03498585": 933, "03812219": 933, "12165031": 933, "12914884": 933, "46081961": 933, "8948621": 933, "44373091": 933, "88978285": 933, "62745778": 933, "02891072": 933, "48204257": 933, "03260883": 933, "165": 933, "34867495": 933, "52003279": 933, "92529176": 933, "25719016": 933, "84253": 933, "25193977": 933, "16443186": 933, "12274212": 933, "170388": 933, "80956739": 933, "16979946": 933, "72667194": 933, "50941682": 933, "50447799": 933, "149": [933, 973], "37967282": 933, "15699552": 933, "72850319": 933, "prod_": 934, "downarrow": 934, "spite": 934, "famous": 934, "serious": 934, "flair": 934, "2_y": 934, "mu_i": 934, "sigma_i": [934, 942], "theta_i": 934, "cnb": 934, "mnb": 934, "inventor": 934, "alpha_i": [934, 947], "cj": [934, 976, 977, 978, 979, 980], "summat": [934, 936], "min_c": 934, "t_i": 934, "poorest": 934, "n_i": [934, 942], "satellit": 935, "kdt": 935, "farawai": 935, "invent": 935, "orthotrop": 935, "bentlei": 935, "1975": 935, "omohundro": 935, "characteris": 935, "unaffect": 935, "amort": 935, "cache_path": 935, "gettempdir": 935, "unsort": [935, 974, 977, 981], "5807": 935, "nca_pip": 935, "96190476": 935, "limits_": 935, "lx": 935, "x_m": 936, "leftmost": 936, "w_1x_1": 936, "w_2x_2": 936, "w_mx_m": 936, "backpropag": 936, "998": 936, "b_1": 936, "b_2": 936, "z_l": 936, "dfrac": [936, 942], "nabla": 936, "deduct": 936, "rumelhart": 936, "jiquan": 936, "ngiam": 936, "chuan": 936, "yifan": 936, "carolin": 936, "suen": 936, "backprop": [936, 946], "lecun": [936, 946], "orr": [936, 946], "strai": 937, "v_ih_j": 937, "b_iv_i": 937, "c_jh_j": 937, "h_j": 937, "v_i": 937, "b_i": 937, "sum_h": 937, "fantasi": 937, "particl": 937, "thoroughli": 937, "hereund": 938, "1443": 938, "1471": 938, "outlying": 938, "h2009": 939, "g2015": 939, "absurd": 939, "m2019": 939, "bike": 939, "mc_clf": 939, "466": 939, "624": 939, "overlaid": 939, "obscur": 939, "cice": [939, 987], "pd_": 939, "dx_c": 939, "footnot": [939, 952], "opaqu": 940, "x_val": 940, "y_val": 940, "356": 940, "probe": 940, "204": [940, 945], "050": 940, "048": 940, "033": 940, "056": 940, "r_multi": 940, "081": 940, "020": 940, "029": 940, "1013": 940, "866": 940, "246": [940, 973], "445": 940, "872": 940, "726": 940, "298": 940, "438": 940, "022": 940, "277": [940, 975], "376": 940, "115": 940, "i_j": 940, "min_max_scal": [942, 978], "x_train_minmax": 942, "x_test_minmax": 942, "max_abs_scal": 942, "x_train_maxab": 942, "x_test_maxab": 942, "excess": [942, 980], "unintention": 942, "kernelcenter": [942, 983, 987], "semidefinit": [942, 947], "scholkopf1998": 942, "1_": 942, "x_train_tran": 942, "x_test_tran": 942, "8pt": 942, "x_normal": 942, "firefox": 942, "chrome": 942, "safari": 942, "africa": 942, "dragon": 942, "x0_cat": 942, "x0_rabbit": 942, "x0_infrequent_sklearn": 942, "lexicon": 942, "par": 942, "sigma_c": 942, "tau": 942, "l_i": 942, "pargent": 942, "pfister": 942, "2671": 942, "2692": 942, "infant": 942, "kid": 942, "teen": 942, "adult": 942, "senior": [942, 956], "citizen": 942, "retbin": 942, "x_1x_2": 942, "x_1x_3": 942, "x_2x_3": 942, "x_1x_2x_3": 942, "rung": 942, "eiler": 942, "marx": 942, "perperogl": 942, "sauerbrei": 942, "abrahamowicz": 942, "bmc": 942, "methodol": 942, "38629436": 942, "sixteenth": 944, "uai": 944, "craig": [944, 976, 981], "boutili": 944, "mois\u00e9": 944, "goldszmidt": 944, "morgan": [944, 948, 950], "kaufmann": [944, 948, 985], "ella": 944, "bingham": 944, "heikki": 944, "mannila": 944, "245": [944, 975], "explic": 944, "3947": 944, "671": 944, "687": 944, "kenneth": [944, 973, 974, 979, 980, 987, 988], "12th": 944, "287": 944, "296": 944, "x_new_invers": 944, "x_new_again": 944, "delalleau": 945, "216": 945, "aistat": 945, "gatsbi": 945, "ucl": 945, "uk": [945, 967], "fullpap": 945, "xi_i": 946, "slack": 946, "varepsilon": [946, 947], "t_0": 946, "l\u00e9on": [946, 987, 988, 989], "_init_t": 946, "basesgd": 946, "eta_0": 946, "_t": 946, "svmsgd": 946, "pegaso": 946, "srebro": 946, "tsuruoka": 946, "tsujii": 946, "ananiad": 946, "afnlp": 946, "lin_clf": 947, "grasp": [947, 953], "sv": 947, "builtin": 947, "qp": 947, "linear_svc": 947, "gram_train": 947, "gram_test": 947, "zeta": 947, "zeta_i": 947, "textrm": [947, 965], "q_": 947, "equiv": 947, "reparameter": 947, "wu": [947, 977, 985], "weng": 947, "975": 947, "1005": 947, "rong": 947, "aug": 947, "1871": 947, "1874": 947, "ofmulticlass": 947, "fitter": 948, "pariti": 948, "multiplex": 948, "export_graphviz": [948, 978, 980, 986, 988], "export_text": [948, 982, 989], "dumont": 948, "subwindow": 948, "beforehand": 948, "dichotomis": 948, "quinlan": 948, "multiwai": 948, "proprietari": 948, "ruleset": 948, "q_m": 948, "n_m": 948, "t_m": 948, "setminu": 948, "mk": 948, "_m": 948, "ge0": 948, "widetild": 948, "tradition": 948, "t_t": 948, "eff": 948, "predictive_analyt": 948, "troubleshoot": 950, "artwork": 950, "fund": 950, "spotifi": 950, "betawork": 950, "evernot": 950, "aweb": 950, "yhat": 950, "rangespan": 950, "birchbox": 950, "bestofmedia": 950, "phimeca": 950, "howaboutw": 950, "peerindex": 950, "datarobot": 950, "okcupid": 950, "love": [950, 967], "publica": 950, "machinali": 950, "solido": 950, "infonea": 950, "dataiku": 950, "otto": 950, "zopa": 950, "bnp": 950, "pariba": 950, "cardif": 950, "post1": [950, 971], "foot": 951, "gear": 951, "neuroimag": [951, 956], "astronom": 951, "pycon": 951, "thirti": 951, "nyc": [951, 956], "sister": 952, "sklearn_panda": 952, "sklearn_xarrai": 952, "xarrai": 952, "autoviml": 952, "tpot": 952, "featuretool": 952, "tempor": [952, 953], "neuraxl": 952, "neat": [952, 973], "checkpoint": 952, "funki": 952, "saver": 952, "evalml": 952, "neptun": 952, "mlop": 952, "sacr": 952, "dtreeviz": 952, "eli5": 952, "mlxtend": 952, "yellowbrick": 952, "deap": 952, "evolutionari": 952, "interchang": 952, "skop": [952, 969], "jpmml": 952, "porter": 952, "transpil": 952, "javascript": 952, "m2cgen": 952, "dart": 952, "haskel": 952, "rust": 952, "treelit": 952, "intelex": 952, "tslearn": 952, "sktime": 952, "hmmlearn": 952, "pomegran": 952, "crfsuit": 952, "nolearn": 952, "lasagn": 952, "theano": 952, "skorch": 952, "scikera": 952, "scikit_learn": 952, "feder": 952, "lego": 952, "subsembl": 952, "lightn": 952, "sdca": 952, "adagrad": 952, "svrg": 952, "nadaraya": 952, "gplearn": 952, "genet": 952, "multilearn": 952, "seglearn": 952, "libopf": 952, "fastfm": 952, "kmode": 952, "sphereclust": 952, "mise": 952, "giotto": 952, "tda": 952, "pymc": 952, "censor": 952, "lightfm": 952, "openrec": 952, "spotlight": 952, "gensim": 952, "nilearn": 952, "neuro": 952, "astroml": 952, "astronomi": 952, "msmbuilder": 952, "dissemin": 952, "chines": 952, "persian": 952, "spanish": 952, "korean": 952, "disclaim": 952, "promis": 953, "eleven": 953, "incept": 953, "scala": 953, "reinforc": 953, "era": 953, "7242": 953, "12147": 953, "5523": 953, "10733": 953, "13902": [953, 983], "12800": 953, "12866": 953, "15550": 953, "5853": 953, "11805": 953, "15319": 953, "11977": 953, "12852": [953, 983], "13911": [953, 983], "amput": 953, "6284": 953, "beginn": 953, "priorit": [953, 980], "4497": 953, "7646": 953, "6425": 953, "6424": 953, "8480": 953, "6231": 953, "8100": 953, "6599": 953, "6715": 953, "14582": 953, "3855": 953, "13227": 953, "6323": 953, "14180": [953, 984], "9173": 953, "13146": [953, 983], "8614": 953, "7608": 953, "5082": 953, "8243": 953, "searchgrid": 953, "6929": 953, "__array_function__": [953, 983], "etl": [953, 956], "8370": 953, "6451": 953, "lifecycl": 953, "8157": 953, "7382": 953, "drift": 953, "11047": [953, 983], "9326": 953, "slep011": 953, "1626": 953, "10463": 953, "id3": [954, 969], "cart": [954, 969], "touch": 955, "savetxt": 955, "cloneabl": 955, "datafil": 955, "printabl": 955, "indispens": 956, "stephen": [956, 977, 978, 980, 981, 982, 983, 984, 986], "simmon": 956, "vp": 956, "athena": 956, "music": 956, "bernhardsson": 956, "pariet": [956, 973], "lear": 956, "visag": 956, "fantast": 956, "startup": 956, "bitli": 956, "chartbeat": 956, "digg": [956, 980], "poncho": 956, "gilad": 956, "lotan": 956, "chief": 956, "chat": 956, "bread": 956, "butter": 956, "chaumond": [956, 981], "offic": 956, "ayzenshtat": [956, 981], "undergrad": 956, "professor": 956, "hotel": 956, "destin": 956, "agent": 956, "melani": [956, 980, 981], "awesom": 956, "stuff": 956, "randomizedpca": [956, 973, 975, 976, 978, 979, 980], "boston": 956, "mdbecker": 956, "pydata_2013": 956, "ninja": 956, "thorough": 956, "notch": 956, "production": 956, "greg": [956, 979, 980, 982, 983], "lamp": 956, "founder": 956, "prototyp": 956, "jurgen": 956, "director": 956, "commerc": 956, "inventori": 956, "bertin": 956, "mahieux": 956, "invalu": 956, "vijai": [956, 976], "traine": 956, "impress": 956, "traffic": 956, "tenur": 956, "matchmak": 956, "weitzenfeld": 956, "tweet": 956, "ferenc": 956, "huszar": 956, "shop": 956, "ourselv": 956, "jeremi": [956, 978, 979, 980, 981, 984, 985], "achin": 956, "ceo": 956, "marketplac": 956, "frid": [956, 976], "radar": 956, "partnership": 956, "lebourgeoi": 956, "charron": [956, 976, 977, 984, 985, 986], "cornerston": 956, "sheep": 956, "featureforg": 956, "rafael": [956, 974, 975, 977, 980], "carrascosa": [956, 977], "law": 956, "semiconductor": 956, "fab": [956, 983, 984], "bleed": 956, "chip": 956, "smartphon": 956, "automobil": 956, "trent": [956, 979], "mcconaghi": 956, "rapid": 956, "immens": 956, "thorsten": 956, "kranz": 956, "coma": 956, "dss": 956, "douetteau": 956, "b2c": 956, "retail": 956, "palladium": 956, "rammig": [956, 979], "peer": 956, "billion": 956, "gbp": 956, "grate": 956, "vlasio": [956, 980], "vasilei": [956, 980], "petfood": 956, "cocoa": 956, "worldwid": 956, "toolset": 956, "equip": 956, "fitzk": 956, "sr": 956, "fondat": 956, "s\u00e9bastien": [956, 979, 981], "conort": 956, "salmon": 958, "nine": 958, "sentiment": 959, "cli": 959, "doctest_mod": 959, "hardest": 960, "tightli": 961, "knit": 961, "x_fold": 962, "array_split": 962, "y_fold": 962, "934": 962, "956": 962, "train_indic": 962, "test_indic": 962, "963": 962, "922": 962, "930": 962, "96388889": 962, "92222222": 962, "9637883": 962, "93036212": 962, "96578289": 962, "92708922": 962, "96681476": 962, "96362897": 962, "93192644": 962, "0077": 962, "943": 962, "944": 962, "00375": 962, "lfw_": 963, "_lfw": 963, "gerhard_schroed": 963, "donald_rumsfeld": 963, "tony_blair": 963, "colin_powel": 963, "george_w_bush": 963, "129": [963, 973], "282": [963, 973], "estimated_param_": 964, "iris_x": 965, "iris_i": 965, "iris_x_train": 965, "iris_y_train": 965, "iris_x_test": 965, "iris_y_test": 965, "pave": 965, "paltri": 965, "exabyt": 965, "30349955": 965, "237": 965, "63931533": 965, "510": 965, "53060544": 965, "73698041": 965, "814": 965, "13170937": 965, "81458798": 965, "84845219": 965, "60648906": 965, "743": 965, "51961675": 965, "09517222": 965, "585": 965, "5854": 965, "5855": 965, "occam": 965, "razor": 965, "best_alpha": [965, 973], "025118864315095794": 965, "313": 965, "508": 965, "knew": 966, "taxonomist": 966, "face_compress": 966, "x_approx": 966, "images_approx": 966, "18565811e": 966, "19346747e": 966, "43026679e": 966, "text_analyt": 967, "skeleton": [967, 976], "sklearn_tut_workspac": 967, "cp": 967, "work_directori": 967, "tutorial_hom": 967, "fetch_data": 967, "lang": 967, "newsweed": 967, "netnew": 967, "bydat": 967, "twenty_train": 967, "holder": 967, "2257": 967, "sd345": 967, "collier": 967, "laserjet": 967, "iii": [967, 987], "hampton": 967, "4gb": 967, "count_vect": 967, "x_train_count": 967, "35788": 967, "4690": 967, "downscal": 967, "tf_transform": 967, "x_train_tf": 967, "tfidf_transform": 967, "x_train_tfidf": 967, "na\u00efv": 967, "docs_new": 967, "opengl": 967, "x_new_count": 967, "x_new_tfidf": 967, "text_clf": 967, "twenty_test": 967, "docs_test": 967, "8348": 967, "9101": [967, 981], "319": 967, "1502": 967, "380": 967, "353": 967, "tfidf__use_idf": 967, "searcher": 967, "gs_clf": 967, "workspac": 967, "fear": 967, "fire": 967, "exercise_xx_script": 967, "arg1": 967, "arg2": 967, "arg3": 967, "mortem": 967, "charngramanalyz": 967, "exercise_01_language_train_model": 967, "exercise_02_senti": 967, "movie_review": 967, "txt_sentoken": 967, "cpickl": 967, "polar": 967, "subtleti": 969, "subscrib": 971, "gzip": 973, "bzip2": 973, "decompress": 973, "auc_scor": [973, 975], "kernc": [973, 987, 988], "led": 973, "probabilisticpca": [973, 976], "hmm": [973, 974, 975, 976, 978], "gaussianhmm": 973, "multinomialhmm": 973, "n_gram_rang": 973, "267": 973, "alexi": [973, 976, 977, 980], "mignon": [973, 976, 977, 980], "subhodeep": [973, 974, 975], "moitra": [973, 974, 975], "yannick": [973, 975], "schwartz": [973, 975, 987], "duckworth": 973, "benediktsson": [973, 974, 975], "marko": [973, 982, 983], "burjek": 973, "pinto": 973, "abraham": [973, 974, 979, 983], "hoenig": 973, "flyingimmidev": 973, "francoi": [973, 986], "savard": 973, "hann": 973, "schulz": 973, "welind": 973, "companioni": 973, "brandyn": 973, "bussonni": [973, 985], "matthia": [973, 975, 976, 979, 980, 981, 985, 988], "pierr": [973, 981, 982, 984, 986, 988], "astolfi": 973, "huiginn": 973, "keith": [973, 978], "goodman": [973, 978], "ludwig": 973, "schwardt": 973, "hervieu": 973, "sergio": [973, 975, 976, 985, 988], "medina": [973, 975], "sheerman": 973, "buguen": 973, "seq_dataset": [973, 983], "weight_vector": [973, 983], "reuben": 973, "costin": 973, "_basehmm": 973, "neighborsregressor": 973, "gone": [973, 974], "vbgmm": [973, 977, 979], "_pvalu": 973, "charset": [973, 975], "test_fract": 973, "train_fract": 973, "239": 973, "198": 973, "114": 973, "marek": 973, "fcostin": 973, "adrien": 973, "gaidon": 973, "joona": 973, "sillanp\u00e4\u00e4": 973, "mccarthi": [973, 981], "roi": [973, 987], "hyunjin": 973, "ibay": 973, "scheidegg": 973, "clair": 973, "revillet": 973, "conrad": [973, 974, 988], "meng": [973, 974, 977, 979, 980], "xinfan": [973, 974, 977], "udi": 973, "weinsberg": 973, "janso": 973, "palafox": 973, "overwrite_": 973, "copy_": 973, "buffer_mb": 973, "sparse_encode_parallel": 973, "accident": [973, 977, 982], "basedictionarylearn": 973, "sparsecodingmixin": 973, "fast_svd": 973, "arnold": [973, 974], "bala": [973, 976], "subrahmanyam": [973, 976], "varanasi": [973, 976], "draxu": 973, "eickenberg": [973, 975, 976, 977, 978], "bogdan": 973, "trach": 973, "f\u00e9lix": [973, 975, 976, 977, 981], "antoin": [973, 975, 976, 977, 980], "fortin": [973, 975, 976, 977], "manuel": [973, 977, 981, 982, 985, 986], "caicedo": 973, "carvaj": 973, "tiziano": 973, "zito": [973, 986], "jean": [973, 976, 977, 978, 979, 980, 986], "kossaifi": [973, 977, 978], "thumbnail": 973, "univariate_select": 973, "mldata": [973, 981], "pietro": [973, 976], "berk": 973, "macosx": 973, "xarg": 973, "bscikit": 973, "cross_val": 973, "bcross_val": 973, "lurk": 973, "l1_distanc": 973, "387": 973, "168": 973, "andi": [973, 980], "amit": [973, 987, 988], "salvator": [973, 987, 988], "masecchia": 973, "schut": 973, "metaireau": [973, 976], "bryan": [973, 976, 982, 983, 986], "silverthorn": 973, "minwoo": 973, "luca": [973, 983, 984, 985, 986], "wiman": 973, "schl\u00fcter": [973, 981], "malet": 973, "miott": [973, 976], "feth": 973, "arezki": 973, "yamin": 973, "notes_neighbor": 973, "netbsd": 973, "kamel": 973, "ibn": 973, "hassen": 973, "derouich": 973, "virgilefritsch": 973, "example_gaussian_process_plot_gp_regress": 973, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 973, "tast": 973, "2x": 973, "10x": 973, "200x": 973, "207": 973, "ann": [973, 985, 987], "laur": 973, "fouqu": 973, "ronan": [973, 976, 981], "amicel": [973, 976], "osendorf": [973, 974], "gmmhmm": [973, 974], "latex": 973, "mlcomp": 973, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 973, "pybrain": 973, "262": 973, "116": 973, "rokem": [973, 979], "100x": [973, 976], "obsolet": 973, "attrselect": 973, "unmaintain": 973, "lite": 973, "filo": [973, 976], "fred": [973, 986], "mailhot": 973, "huard": 973, "dave": [973, 980, 981, 987], "morril": 973, "schofield": 973, "travi": [973, 981], "oliph": 973, "pearu": 973, "peterson": [973, 975], "0d": 974, "marchman": [974, 975], "hrishikesh": [974, 975], "huilgolkar": [974, 975], "bastiaan": [974, 975], "diego": [974, 975], "molla": [974, 975], "cunha": [974, 975], "almeida": [974, 975, 986], "rolando": [974, 975], "espinoza": [974, 975], "fuent": [974, 975], "formerli": [974, 977, 979, 980], "beauchamp": [974, 977], "longstand": [974, 980], "shaun": 974, "jackman": 974, "winterman": 974, "seberg": 974, "n_atom": 974, "label_propag": 974, "learn_rat": 974, "basegradientboost": 974, "mean_square_error": 974, "gmm_": 974, "eig_tol": 974, "chunk_siz": 974, "zero_one_scor": 974, "117": 974, "aymer": 974, "masurel": 974, "syhw": [974, 975], "corei": [974, 981, 982], "lynch": [974, 980], "shu": [974, 977, 981], "tadej": [974, 975], "jane\u017e": [974, 975], "caje": 974, "tiago": [974, 978], "nune": 974, "cow": 974, "anz": 974, "jauvin": 974, "jacqu": [974, 976], "kvam": [974, 976], "doug": [974, 975, 985], "coleman": [974, 975], "dickerson": 974, "approximateident": 974, "veronda": 974, "matti": [974, 977, 978], "lyra": [974, 977, 978], "mikhail": [974, 975, 976, 979, 980, 988], "korobov": [974, 975, 976, 979, 980], "alejandro": [974, 979], "weinstein": 974, "deil": [974, 984, 985], "nizhibitski": 974, "coelho": [974, 976, 977, 981], "miroslav": [974, 975, 978], "batchkarov": [974, 978], "pavel": [974, 982], "bob": [974, 980], "dengemann": 974, "emanuel": 974, "x006": 974, "justin": [975, 981, 985], "stochastic_gradi": [975, 976, 982], "crombach": 975, "sheet": 975, "jaccard_similarity_scor": [975, 977, 982], "jochen": 975, "wersd\u00f6rfer": 975, "sinayev": 975, "unpleas": 975, "novic": 975, "tini": [975, 988], "hyperlink": 975, "luessi": 975, "philipp": [975, 976, 979, 988], "gervai": [975, 976], "cleverless": 975, "nosetest": 975, "compute_import": 975, "return_model": [975, 977], "itergrid": 975, "tacitli": 975, "charset_error": 975, "precompute_gram": 975, "2224": 975, "jim": 975, "holmstr\u00f6m": 975, "steven": [975, 976, 978, 980, 981, 986, 988], "gryze": [975, 978], "sergeyf": 975, "ben": [975, 976, 977, 980, 981, 982, 985], "speer": 975, "federico": [975, 976, 981, 982, 987], "vaggi": [975, 976], "raul": [975, 976], "garreta": [975, 976], "gei": 975, "flaxman": [975, 977], "denton": 975, "cockburn": 975, "dougal": [975, 977, 978, 980, 981, 982, 983], "sutherland": [975, 977, 978, 980, 981, 982, 983], "ian": [975, 977, 982, 983, 985, 988, 989], "ozsvald": 975, "johann": [975, 976, 981, 983, 984, 987], "sch\u00f6nberger": [975, 976], "szabo": [975, 976], "roland": [975, 976], "imran": [975, 976, 977], "haqu": [975, 976, 977], "karayev": 975, "jamestwebb": [975, 976], "abhijeet": 975, "kolh": 975, "velkov": 975, "fazlul": 975, "shahriar": 975, "felix": [975, 980, 981, 983, 985, 986, 987], "brockherd": 975, "harikrishnan": 975, "jack": [975, 978, 986, 987, 988], "hale": [975, 987], "jakemick": 975, "mcdermott": 975, "zwinck": 975, "vredevoogd": [975, 976], "pati": 975, "ekman": [975, 979], "shubernetskii": 975, "naoki": [975, 985], "orii": 975, "seamu": 975, "absher": 975, "feldman": [975, 980, 981, 982, 983], "stefano": 975, "lattarini": 975, "steve": [975, 977, 981, 986, 988], "koch": [975, 981, 982, 984, 985], "sturla": 975, "molden": 975, "jarosch": 975, "nikolai": [976, 977, 978, 979, 981, 982, 987], "mayorov": [976, 977, 978, 979], "msvc": 976, "mingw": 976, "resourcewarn": 976, "calvin": [976, 977], "gile": [976, 977], "billing": [976, 977, 978], "safe_realloc": 976, "bradshaw": [976, 977, 980], "pico": [976, 977], "restor": [976, 981, 982, 983, 984, 988], "raff": 976, "__array__": [976, 983], "jeffrei": [976, 979], "blackburn": [976, 979], "danni": [976, 977, 978], "sullivan": [976, 977, 978], "wignal": [976, 977, 983, 984], "grid_tograph": 976, "gracefulli": [976, 977], "gaussianprocess": 976, "novak": 976, "tulloch": [976, 977], "wardagglomer": 976, "wardclust": 976, "mean_l1_ratio": 976, "phlypo": 976, "312": 976, "275": 976, "148": 976, "bommarito": [976, 977], "brook": [976, 977, 985], "osborn": [976, 977], "eltermann": 976, "bwignal": 976, "ankit": [976, 983, 985, 987], "agraw": [976, 981, 987, 988], "carei": [976, 977, 978, 979, 980], "ugurthemast": [976, 977], "schumach": [976, 977, 978], "baptist": [976, 984], "lagard": 976, "rajat": [976, 983], "khanduja": 976, "pascual": 976, "ignacio": 976, "rossi": 976, "s\u00e4ger": [976, 979], "ilambharathi": [976, 977], "kanniah": [976, 977], "sdenton4": 976, "alyssa": [976, 980], "amo": 976, "waterland": 976, "murad": 976, "maud": 976, "karol": 976, "pysniak": 976, "cgohlk": [976, 977], "jacobsen": 976, "collin": 976, "kaushik94": 976, "erwin": 976, "marsi": 976, "csytraci": 976, "lk": 976, "laurent": [976, 977, 980, 981, 988], "direr": [976, 977, 980, 981], "shilt": 976, "yoshiki": [976, 979], "v\u00e1zquez": 976, "yung": [976, 979], "siang": 976, "liau": 976, "abhishek": [976, 977, 983, 987], "thakur": [976, 977], "rohit": [976, 977, 981, 982], "sivaprasad": [976, 977], "amormachin": 976, "oscar": [976, 980], "carlsson": 976, "nanta": 976, "nardelli": 976, "jess010": 976, "kowalski87": 976, "clegg": 976, "ralf": [976, 979, 980, 988], "gommer": [976, 979, 980, 988], "aft": 976, "rupesh": 976, "srivastava": [976, 988], "ryan": [976, 979, 981, 982], "skipper": [976, 978, 979], "seabold": [976, 978, 979], "stefan": [976, 977, 981, 983], "walt": [976, 977, 981], "allen": [976, 978, 980, 983], "riddel": [976, 978, 980], "valentin": [976, 978, 988], "haenel": 976, "myer": [976, 980], "yoni": 976, "meshulam": 976, "yuri": [976, 978], "zaytsev": 976, "adrinjalali": [976, 985], "ai8rahim": 976, "alemagnani": 976, "chalmerlow": 976, "dziki": 976, "dro\u017cd\u017c": 976, "matrixorz": 976, "popo": 976, "samuela": 976, "fran\u00e7oi": 976, "boulogn": 976, "ethan": [976, 979], "guilherm": 976, "trein": 976, "heuer": 976, "ivicajov": 976, "rouli": 976, "eduardo": [976, 978, 986, 987], "ari\u00f1o": 976, "rubia": 976, "jell": 976, "zijlstra": 976, "eddi": 976, "jansson": [976, 988], "ca\u00f1ardo": 976, "alastuei": 976, "joseph": [976, 977, 978, 979, 985, 987, 988], "perla": 976, "ricardo": [976, 986, 987], "kenta": 976, "sato": 976, "medri": 976, "luce": 976, "pierron": 976, "danielweitzenfeld": 976, "thompson": [976, 988, 989], "brett": [976, 978, 979, 980, 981, 988], "feurer": [976, 981], "earl": 976, "hank": 976, "orr\u00f9": 976, "lunt": 976, "kearn": 976, "pawe\u0142": [976, 980, 985, 986], "mandera": 976, "zambelli": 976, "staubda": 976, "dedupl": 977, "heilman": [977, 978], "precompute_dist": [977, 984], "lshforest": [977, 980], "qiang": 977, "luo": 977, "clemen": 977, "brunner": 977, "matteo": [977, 979, 987], "visconti": 977, "oleggio": 977, "castello": 977, "linkage_tre": 977, "jatin": [977, 979], "shah": [977, 978, 979, 985], "saurabh": [977, 978, 979, 980, 981, 985], "jha": [977, 983, 987], "blanchard": [977, 978], "michal": [977, 980, 986, 987], "romaniuk": 977, "gilmor": 977, "stapl": 977, "hedyati": 977, "antoni": [977, 979, 985, 988], "parel": 977, "herv\u00e9": 977, "bredin": 977, "hasil": 977, "sharma": [977, 979, 981, 982, 984, 985, 987], "ducktyp": 977, "download_20newsgroup": 977, "friend": 977, "cathi": [977, 983], "deng": [977, 978, 979], "dawson": 977, "garret": 977, "hanna": [977, 978, 984], "wallach": [977, 978], "yan": [977, 985], "artem": [977, 980], "sobolev": 977, "fit_ovr": 977, "predict_ovr": 977, "predict_proba_ovr": 977, "fit_ovo": 977, "predict_ovo": 977, "fit_ecoc": 977, "predict_ecoc": 977, "lamond": 977, "outweigh": 977, "thresh": 977, "akshai": [977, 980, 985], "akshayah3": 977, "aldrian": 977, "obaja": 977, "ander": [977, 983], "aagaard": 977, "cranenburgh": 977, "walker": 977, "banilo": [977, 978], "barmalei": [977, 978], "benedikt": 977, "koehler": 977, "bhsu": 977, "bori": [977, 985], "feld": 977, "borja": 977, "ayerdi": 977, "boyuan": [977, 978, 979], "brent": [977, 981, 982], "pedersen": 977, "celeo": 977, "chebee7i": 977, "stade": 977, "schuldt": 977, "christof": [977, 978], "angermuel": [977, 978], "daiki": 977, "aminaka": 977, "danfrankj": 977, "dmitrij": 977, "milajev": 977, "floydsoft": 977, "garrett": 977, "gpassino": 977, "gwulf": [977, 978], "hampu": 977, "bengtsson": 977, "harri": [977, 979, 985, 986], "mavroforaki": [977, 979], "helder": [977, 986, 987], "herv": 977, "hugu": 977, "salamin": 977, "ism": 977, "dlabal": 977, "javier": 977, "l\u00f3pez": [977, 981, 982, 985], "pe\u00f1a": 977, "jdcaballero": 977, "jeff": [977, 979, 986, 987], "hammerbach": 977, "helmu": 977, "kaicheng": 977, "markham": [977, 984, 985], "lagacheri": 977, "leepei": 977, "loic": [977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988], "estev": [977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988], "luka": [977, 984], "michelbach": 977, "krell": [977, 979], "ku": [977, 978], "mateusz": [977, 984, 985], "susik": 977, "mehdi": [977, 986], "cherti": 977, "mlg": 977, "montecchio": 977, "okal": 977, "billi": 977, "\u00f3scar": [977, 978, 979, 980], "n\u00e1jera": [977, 978, 979, 980], "puggioni": 977, "pratap": [977, 980, 987], "vardhan": 977, "pvnguyen": 977, "queqichao": 977, "rahiel": 977, "kasim": 977, "mason": 977, "saket": [977, 978, 985], "choudhari": [977, 978, 987], "sam": [977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988], "nichol": 977, "sethdandridg": 977, "sinhrk": [977, 978], "snuderl": 977, "ott": 977, "tjoa": 977, "swu": 977, "zimmer": [977, 987], "tejesh95": 977, "terrycojon": 977, "delteil": 977, "toma": 977, "kazmar": 977, "trevorstephen": [977, 979], "tttthomasssss": 977, "tzu": 977, "kuo": 977, "ugurcaliskan": 977, "vinayak": [977, 978, 979, 981, 982, 988], "mehta": [977, 978, 979, 981, 982, 983, 984, 988], "vjacheslav": 977, "murashkin": 977, "wadawson": 977, "x0l": 977, "vendor": [978, 981, 982], "6196": 978, "6147": 978, "presort": [978, 983], "5857": 978, "mcculloh": [978, 979], "6258": 978, "giorgio": [978, 979, 980], "patrini": [978, 979, 980], "joe": 978, "jevnik": 978, "labelkfold": [978, 979], "labelshufflesplit": [978, 979], "mcfee": [978, 979], "3659": 978, "4738": 978, "projectedgradientnmf": 978, "nls_max_it": 978, "erick": 978, "moodi": 978, "4025": 978, "mean_shift_": 978, "mean_shift": [978, 981], "martino": 978, "sorbaro": 978, "cori": 978, "konstantin": [978, 979, 980], "shmelkov": 978, "backlink": 978, "jaidev": 978, "deshpand": [978, 979], "dictlearn": 978, "kashif": 978, "rasul": [978, 980, 981], "galvez": 978, "sonni": 978, "hu": [978, 981, 983], "4881": 978, "santi": [978, 980, 981], "villalba": [978, 981, 985], "5186": 978, "stolbunov": 978, "booster": 978, "graham": [978, 979], "clenaghan": [978, 979], "clyde": 978, "subproblem": 978, "5131": 978, "forestclassifi": 978, "ankur": 978, "ankan": 978, "henri": [978, 979, 980, 981, 983, 984, 985, 987, 988], "5431": 978, "buddha": 978, "prakash": [978, 980, 986], "5182": 978, "lamb": [978, 986], "5282": 978, "5355": 978, "5360": 978, "4478": 978, "5337": 978, "4362": 978, "5495": 978, "elvi": [978, 979, 980], "dohmatob": [978, 979, 980], "data_min": 978, "data_max": 978, "data_rang": 978, "_learntselectormixin": 978, "gradientboost": 978, "metatransfom": 978, "load_lfw_pair": 978, "wardagglom": 978, "residues_": 978, "indicator_matrix_": 978, "adithya": 978, "ganesh": 978, "akitti": 978, "alexei": 978, "grigorev": 978, "ali": [978, 981, 982, 985, 986, 988], "baharev": 978, "ando": 978, "saaba": 978, "anish": [978, 979], "anthoni": [978, 980, 981], "erling": 978, "rouvinen": 978, "rachez": [978, 979], "benjaminirv": 978, "naul": [978, 979], "gohlk": 978, "bourguignat": 978, "cindi": [978, 986], "sridharan": 978, "kronovet": 978, "data1010": 978, "dotson": 978, "djipei": [978, 979], "dmitri": [978, 980, 981, 982, 986], "spikhalskii": 978, "donn": 978, "duart": [978, 986, 988], "caro": 978, "larson": [978, 982, 983, 985, 987], "fernando": [978, 985], "carrillo": 978, "eckert": 978, "zalkow": 978, "ganiev": [978, 979, 980], "ibraim": [978, 979, 980], "giorgiop": 978, "gryllo": [978, 981], "prokopi": [978, 981], "hsuan": 978, "tien": 978, "ishank": [978, 979, 980], "gulati": [978, 979, 980], "jeffrey04": [978, 979], "jfraj": 978, "jiali": 978, "mei": [978, 983], "kirkham": [978, 979, 981], "wittenau": 978, "loyal": 978, "jungkook": 978, "park": [978, 983, 985, 988], "kamalakerdadi": [978, 979], "kyler": 978, "lilian": [978, 979], "besson": [978, 979], "loui": [978, 979, 983, 985, 987], "tiao": [978, 979], "marktab": 978, "spacek": 978, "martinbpr": [978, 979], "martinosorb": 978, "maryanmorel": [978, 979], "masafumi": 978, "oyamada": 978, "krump": 978, "kolganov": 978, "mbilling": 978, "mhg": 978, "patterson": 978, "omer": 978, "katz": [978, 985, 986], "pauli": 978, "virtanen": 978, "fischer": [978, 979], "pianomania": 978, "preston": [978, 979, 980], "parri": [978, 979, 980], "rohan": [978, 979, 981, 982, 986], "ramanath": 978, "bansod": [978, 979, 980], "scls19fr": 978, "saeger": [978, 979, 980], "shivan": 978, "sornarajah": 978, "simonpl": 978, "sseg": 978, "hoover": [978, 979, 980, 982], "seguin": 978, "theodor": 978, "vasiloudi": 978, "freita": [978, 980, 981], "pereira": [978, 981, 982], "timothi": [978, 986], "hopper": 978, "tokoroten": 978, "vstolbunov": 978, "wangz10": 978, "yucheng": 978, "zhauniarovich": 978, "zac": 978, "stewart": [978, 983, 986, 988], "zhai_pro": 978, "zichen": 978, "7946": 979, "8355": 979, "9010": 979, "8040": 979, "9149": 979, "aman": [979, 980, 981, 987, 988], "dalmia": [979, 980, 981], "nate": [979, 980, 986], "guerin": [979, 980], "lebedev": [979, 980], "utilis": 979, "6497": 979, "7724": 979, "bing": [979, 980], "explained_variance_ratio": 979, "7632": 979, "jpfrancoia": [979, 980], "7676": 979, "moham": [979, 981, 982, 983, 984, 985, 986, 987], "affan": 979, "7756": 979, "7786": 979, "srivatsan": [979, 980, 983], "7799": 979, "7490": [979, 980], "6282": 979, "7301": 979, "6178": 979, "7680": 979, "n_iters_": 979, "7553": 979, "ekaterina": [979, 980, 981, 982, 984], "krivich": [979, 980, 982], "5874": 979, "7593": 979, "7594": 979, "7660": 979, "7750": 979, "7732": 979, "artsion": 979, "lieu": [979, 980], "grid_scores_": [979, 985, 986], "leaveonelabelout": 979, "leaveplabelout": 979, "plural": 979, "mean_tim": 979, "std_time": 979, "3204": 979, "5291": 979, "sounder": 979, "7295": 979, "5299": 979, "bravi": 979, "fouchet": 979, "calinski_harabaz_scor": [979, 981], "harabaz": 979, "6586": 979, "4294": 979, "6667": 979, "6954": 979, "unveil": 979, "yelit": 979, "basebag": [979, 981], "staub": 979, "5805": 979, "5251": 979, "imacul": 979, "1000x": 979, "arfa": 979, "6691": 979, "6913": 979, "5762": 979, "utkarsh": [979, 980, 981, 982], "upadhyai": [979, 980, 981, 982], "6846": 979, "5929": 979, "podshumok": [979, 980], "6173": 979, "ryad": 979, "zenin": 979, "devashish": 979, "asish": [979, 980], "dowl": 979, "6697": 979, "ori": 979, "ziv": 979, "sear": 979, "merritt": 979, "7325": 979, "7239": 979, "hong": [979, 981, 985, 986, 987], "guangguo": 979, "jensen": [979, 985], "7419": 979, "gregori": [979, 983, 984, 985, 986], "stupp": [979, 980], "bernardo": 979, "stein": 979, "sparse_func": [979, 985], "incr_mean_variance_axi": [979, 985], "7049": 979, "7152": 979, "load_boston": [979, 981, 986], "7154": 979, "manvendra": [979, 980], "singh": [979, 980, 981, 982, 983, 985, 986, 987, 988], "5540": 979, "7248": 979, "6764": 979, "wenhua": 979, "6817": 979, "6902": 979, "leonieborn": 979, "5141": 979, "4995": 979, "5012": 979, "_transform_select": 979, "7194": 979, "caio": [979, 981, 983], "oliveira": [979, 981, 983, 987], "6182": 979, "6121": 979, "6472": 979, "7350": 979, "russel": [979, 980], "smith": [979, 980, 981, 982, 983, 985], "7159": 979, "yichuan": [979, 980], "5460": 979, "document_clust": 979, "7353": 979, "_search": 979, "_check_param_grid": 979, "xrang": 979, "7323": 979, "viacheslav": 979, "kovalevskyi": 979, "7101": 979, "residual_metr": 979, "6651": 979, "reorgan": 979, "7187": 979, "7260": 979, "sebasti\u00e1n": 979, "vanrel": 979, "leaveplabelsout": 979, "6660": 979, "unprefix": 979, "7261": 979, "aditya": [979, 981, 982, 983, 987, 988], "joshi": [979, 981, 987], "loginov": 979, "minyushkin": 979, "rudi": 979, "abadi": [979, 980], "saint": 979, "alexfield": 979, "alvaro": [979, 981], "ulloa": 979, "alyssaq": 979, "amlan": 979, "kar": 979, "giessel": 979, "jackson": [979, 980, 982], "murrai": [979, 980], "arafat": 979, "archit": 979, "asnt": 979, "b0noi": 979, "behzad": 979, "tabibian": 979, "kratzwald": 979, "bhargav": 979, "mangipudi": 979, "blakeflei": 979, "brandon": [979, 980, 987, 988], "carter": [979, 980, 988], "camilo": 979, "lamu": 979, "carol": [979, 980], "Willing": [979, 980], "cass": 979, "ceshin": 979, "truong": 979, "codevig": 979, "shiebler": 979, "hnyk": [979, 980], "elli": [979, 982], "nicholson": [979, 980, 981], "thaler": 979, "warshaw": 979, "lasagna": 979, "deborah": [979, 980], "definitelyuncertain": 979, "didi": [979, 980, 981, 982], "zev": [979, 980, 981, 982], "dsquareindia": 979, "edwinensa": 979, "elia": 979, "kuth": 979, "fabio": 979, "ticconi": 979, "fisach": 979, "donovan": 979, "ghg": 979, "giovanni": [979, 981], "cherubin": 979, "lanzani": 979, "glenn": 979, "qian": [979, 984], "mohr": 979, "govin": 979, "vatsan": 979, "reda": 979, "gustav": 979, "m\u00f6rtberg": 979, "halwai": 979, "harizo": [979, 980], "rajaona": [979, 980], "hashcode55": 979, "hdmetor": 979, "hobson": 979, "lane": 979, "bown": 979, "igor": [979, 980, 986], "andriushchenko": [979, 980], "inki": 979, "hwang": 979, "isaac": [979, 980, 982, 983], "sijaranamu": 979, "iver": 979, "jordal": 979, "jackmartin": 979, "fiedler": 979, "routlei": 979, "zike": 979, "janna": 979, "brettingen": 979, "jarfa": 979, "laska": 979, "jblackburn": 979, "levesqu": 979, "hintz": 979, "jeremynixon": 979, "jeroen": 979, "jessica": 979, "jill": 979, "j\u00eann": 979, "vie": 979, "jia": 979, "jiyuan": 979, "johannah": 979, "boersma": 979, "moeller": 979, "striebel": [979, 980], "joncral": 979, "jordi": 979, "munoz": [979, 985], "jrfiedler": 979, "juliankahnert": 979, "juliathebrav": 979, "kaichogami": 979, "lyon": [979, 980], "kingjr": 979, "kjell": 979, "krishna": [979, 980, 981, 982, 983, 984, 987, 988], "kalyan": 979, "krishnakalyan3": 979, "kvle": 979, "putnam": 979, "ldavid": 979, "leig": 979, "leightonzhang": 979, "leland": [979, 980, 981, 983, 984], "mcinn": [979, 980, 981, 983, 984], "liang": [979, 984, 985], "hsieh": 979, "lizsz": 979, "l\u00e9oni": 979, "born": 979, "maniteja": [979, 980, 981], "nandana": [979, 980, 981], "marco": [979, 981, 982, 986, 987, 988], "bao": [979, 987], "szepieniec": 979, "madsen": [979, 981], "massil": 979, "matheu": 979, "duboi": [979, 981], "moroz": 979, "scherer": 979, "michiaki": 979, "ariga": 979, "moussa": 979, "taifi": 979, "mrandrewandrad": 979, "mridul": 979, "seth": 979, "nadya": 979, "naoya": [979, 980, 981, 982], "kanai": [979, 980, 981], "nickledav": 979, "nico": [979, 986], "ningchi": 979, "nlathia": 979, "okbalefthand": 979, "okhlopkov": [979, 980], "pano": 979, "lourida": 979, "strickland": 979, "perrin": 979, "letelli": 979, "pestrickland": 979, "practicalswift": 979, "qimu": 979, "zheng": [979, 980, 985], "rachit": [979, 985, 988], "kansal": 979, "ramana": [979, 980], "randi": 979, "olson": 979, "lutz": [979, 983, 986], "schucker": 979, "jain": [979, 980, 981, 985, 987, 988], "ruifeng": [979, 980, 985], "r\u00e9my": 979, "l\u00e9one": 979, "saihttam": 979, "saiw": 979, "yeung": 979, "shleifer": [979, 980], "sartaj": 979, "sasank": 979, "chilamkurthi": 979, "seal": 979, "shagun": 979, "sodhani": 979, "shanmuga": 979, "shashank": [979, 985], "shekhar": 979, "shawpan": 979, "shengxiduan": 979, "shota": 979, "shuckle16": 979, "smedbergm": 979, "srvanrel": 979, "leriqu": [979, 981], "taranjeet": 979, "themrmax": [979, 980], "hallock": 979, "moreau": [979, 980, 981, 982, 983], "tkammi": 979, "toastedcornflak": [979, 980], "tomdlt": 979, "toshihiro": [979, 980, 986], "kamishima": [979, 980], "tracer0tong": 979, "hauck": 979, "vo": [979, 987], "varun": [979, 980, 981, 987, 988], "jewalikar": 979, "vikram": [979, 988], "villu": 979, "ruusmann": 979, "walter": 979, "waterponei": [979, 980], "wenjian": 979, "welch": 979, "wyseguy7": 979, "xyguo": [979, 981], "yanlend": 979, "yen": [979, 980], "yenchenlin": 979, "yoav": 979, "zivori": 979, "10723": [980, 981], "9623": 980, "undocu": 980, "deleteri": 980, "9677": 980, "ashutosh": [980, 981, 983, 985], "correlation_model": 980, "regression_model": 980, "belatedli": 980, "9717": 980, "9693": 980, "steingold": [980, 981], "9711": 980, "goncalo": [980, 981], "rodrigu": [980, 981, 986], "9641": 980, "bourbeau": [980, 981, 982], "9865": 980, "sachin": [980, 981, 987], "kelkar": [980, 981, 983], "9922": 980, "charli": [980, 981, 989], "brummitt": [980, 981], "9945": 980, "9830": 980, "9600": 980, "kerimov": [980, 981], "9593": 980, "reiichiro": [980, 981], "nakano": [980, 981], "9604": 980, "interim": 980, "9558": 980, "9847": 980, "joan": [980, 981, 982, 983], "massich": [980, 981, 982, 983], "oli": 980, "blum": 980, "9697": 980, "9750": 980, "9788": 980, "9815": 980, "9802": 980, "vrishank": [980, 981], "bhardwaj": [980, 981], "nagarjuna": [980, 981], "nathaniel": [980, 981, 983], "diegodlh": [980, 981], "jkleint": [980, 981], "oliblum90": [980, 981], "pasbi": [980, 981], "lawson": [980, 981, 982], "nielsenmarkus11": [980, 981], "excit": 980, "cautiou": 980, "min_impurity_split": 980, "7823": [980, 981], "8446": 980, "5279": 980, "8363": 980, "5295": 980, "7388": 980, "userguid": 980, "7655": 980, "karan": [980, 981, 982], "desai": [980, 982, 985, 986, 988], "7739": 980, "gasquez": 980, "8120": 980, "neeraj": 980, "gangwar": 980, "7548": 980, "9206": 980, "7441": 980, "6101": 980, "8698": 980, "7794": 980, "herilalaina": [980, 981, 983], "rakotoarison": [980, 981, 983], "5036": 980, "4939": 980, "esuli": [980, 985], "n_skips_": 980, "7914": 980, "horrel": 980, "8591": 980, "hadrien": [980, 983], "7838": 980, "8835": 980, "8061": 980, "cordier": 980, "6288": 980, "9145": 980, "reddi": [980, 981, 982, 987], "chinthala": 980, "7721": 980, "jon": [980, 983, 984, 986, 987], "crall": [980, 986], "7685": 980, "tommi": [980, 981, 982], "l\u00f6fstedt": 980, "9277": 980, "hongkahjun": 980, "7089": 980, "randomized_svd_low_rank": 980, "9067": 980, "6181": 980, "wendling": 980, "8065": 980, "lejeun": 980, "7567": 980, "jay": 980, "doepk": 980, "7573": 980, "romain": [980, 985], "brault": 980, "5229": 980, "7990": 980, "8586": 980, "7723": 980, "8028": 980, "booth": 980, "8005": 980, "7863": 980, "7506": 980, "9044": 980, "5991": 980, "8845": 980, "8053": 980, "8282": 980, "8117": 980, "9259": 980, "8094": 980, "8335": 980, "poughon": 980, "7880": 980, "karnofski": 980, "935": 980, "8931": 980, "attractador": [980, 981], "8002": 980, "8549": 980, "zerodivisionerror": [980, 983, 989], "7501": 980, "dominik": 980, "krzeminski": 980, "7970": 980, "8006": 980, "p\u00f6lsterl": [980, 983, 986], "8936": 980, "8672": 980, "mike": 980, "benfield": 980, "broke": 980, "8068": 980, "5732": 980, "ytrue": 980, "ypred": 980, "8087": 980, "7983": 980, "8512": 980, "8251": 980, "aivision2020": 980, "5814": 980, "7849": 980, "jair": 980, "montoya": 980, "martinez": 980, "randomizedlasso": 980, "5359": 980, "9302": 980, "8160": 980, "8224": 980, "gedeck": 980, "vathsala": [980, 981, 982, 983], "achar": [980, 981, 982, 983], "9022": 980, "mehmet": [980, 986], "basbug": 980, "9024": 980, "8973": 980, "paulo": [980, 986, 988], "haddad": 980, "unmeaning": 980, "6573": 980, "quazi": [980, 981], "marufur": 980, "rahman": [980, 981, 985], "9239": 980, "andr": [980, 987], "ambrosio": 980, "boechat": 980, "early_exager": 980, "assertionerror": 980, "8992": 980, "7954": 980, "foreman": 980, "9105": 980, "9108": 980, "8306": 980, "7872": 980, "_c_step": 980, "3367": 980, "steward": 980, "8768": 980, "detomaso": 980, "6507": 980, "7819": 980, "jayzed82": 980, "6126": 980, "7814": 980, "7702": 980, "9219": 980, "7771": 980, "ang": 980, "randomizedlogisticregress": 980, "8259": 980, "mandatorili": 980, "7565": 980, "8181": 980, "basesearchcv": [980, 981], "8344": 980, "eriksson": 980, "7661": 980, "8295": 980, "batula": 980, "dylan": [980, 983], "werner": [980, 985], "meier": 980, "7365": 980, "aleksandr": 980, "sandrovskii": 980, "5697": 980, "stijn": 980, "tonk": 980, "6250": 980, "8093": 980, "bull": 980, "9507": 980, "7356": 980, "dingwal": 980, "_check_target": 980, "8377": 980, "7929": 980, "5211": 980, "rhinehart": 980, "8159": 980, "8198": 980, "fetch_": 980, "7944": 980, "7825": 980, "kathleen": 980, "7376": 980, "7331": 980, "yangarbit": 980, "__getstate__": [980, 988], "obstruct": 980, "8316": 980, "holger": 980, "8010": 980, "7986": 980, "najera": 980, "9289": 980, "makedir": 980, "9284": 980, "sebastin": [980, 981], "alert": 980, "lgtm": 980, "9278": 980, "heli": 980, "8449": 980, "9078": 980, "purport": 980, "sergul": [980, 981, 984], "aydor": [980, 981, 984], "8922": 980, "8137": 980, "8139": 980, "8995": 980, "2879": 980, "7459": 980, "7812": 980, "9100": 980, "8481": 980, "8174": 980, "tahar": 980, "zanouda": 980, "8854": 980, "8874": 980, "7998": 980, "jiacheng": 980, "argpartit": 980, "frombuffer_empti": 980, "rankdata": 980, "safe_copi": 980, "eig": 980, "fast_dot": 980, "pinvh": [980, 982], "graph_laplacian": 980, "sparsetool": 980, "connected_compon": 980, "check_decision_proba_consist": 980, "7578": 980, "shubham": [980, 983], "9019": 980, "baseensembl": [980, 983], "7464": 980, "rishikesh": 980, "taehoon": [980, 981], "aashil": 980, "balakumaran": [980, 981], "manoharan": [980, 981], "petrov": [980, 981], "minghui": [980, 981], "jc": [980, 981], "alexandercbooth": 980, "chkoar": 980, "aarshai": [980, 981], "gilliam": 980, "subramanyam": 980, "clement": [980, 981, 985], "joudet": [980, 981], "robl": 980, "kati": 980, "luangkot": 980, "lacchia": 980, "akshay0724": 980, "omtcyfz": 980, "rickiepark": 980, "jbdelafoss": 980, "vivek": [980, 981, 982], "elliott": 980, "ldirer": 980, "sid": 980, "kapur": 980, "midina": 980, "mikebenfield": 980, "sourav": [980, 983], "aseem": 980, "bansal": 980, "aishwaryark": 980, "howel": 980, "dokato": 980, "kathi": [980, 983], "ferria": 980, "nikita": [980, 981, 983, 986, 987, 988], "basil": 980, "beirouti": 980, "possa": 980, "bednar": 980, "janin": 980, "harper": 980, "artsiom": 980, "ligo": 980, "rahn": [980, 983], "seanpwilliam": 980, "julian": [980, 981], "kuhlmann": [980, 981], "aubert": 980, "j\u00f6rn": 980, "hee": [980, 983], "shivamgargsya": [980, 984, 986], "kat": 980, "hempstalk": 980, "kaushik": [980, 987, 988, 989], "lakshmikanth": 980, "kennedi": [980, 983], "yap": 980, "kiril": [980, 981, 983, 985], "bobyrev": 980, "imbert": [980, 982, 985, 987], "lera": 980, "douillard": 980, "mainak": 980, "tobychees": [980, 981], "manraj": 980, "marc": [980, 982, 983, 989], "meketon": 980, "marcofalk": 980, "gilch": 980, "mehul": 980, "ahuja": [980, 987, 988], "goetz": [980, 981], "dezub": 980, "baumgartn": 980, "vibrantabhi19": 980, "golubin": 980, "milen": 980, "paskov": 980, "antonin": 980, "carett": 980, "morikko": 980, "mrmjauh": 980, "nalepa": 980, "namiya": 980, "narinek": [980, 981], "angu": [980, 981, 987], "nicol": 980, "vavrova": 980, "nitish": 980, "pandei": [980, 985], "daniil": 980, "olegovich": 980, "craze": 980, "om": 980, "parmind": 980, "patrick": [980, 981, 986, 987], "carlson": 980, "pei": 980, "ganssl": 980, "lorek": 980, "pete": [980, 984, 985], "bachant": 980, "csizsek": 980, "jong": 980, "puneet": 980, "mathur": [980, 982, 983, 988, 989], "quentin": [980, 981, 982], "hibon": 980, "1kastner": 980, "rameshwar": [980, 981], "bhaskaran": [980, 981], "rebecca": 980, "bilbro": 980, "remi": 980, "rampin": 980, "pratik": 980, "agarw": [980, 981, 983], "sailesh": [980, 981], "choyal": [980, 981], "samson": 980, "samu\u00ebl": 980, "weber": 980, "sarah": [980, 982, 985], "abhyudai": 980, "sharan": [980, 981], "yalburgi": [980, 981], "willduan": 980, "siddharth": [980, 984], "almer": 980, "theofilo": 980, "papapanagiot": 980, "alison": 980, "boucher": 980, "folkman": 980, "jung": [980, 984, 988], "shenoi": 980, "vilhelm": [980, 981], "ehrenheim": [980, 981], "alan": [980, 981, 984, 986, 987], "yee": [980, 981], "warut": [980, 981], "vijitbenjaronk": [980, 981], "yuichi": 980, "fujikawa": 980, "affanv14": 980, "andreh7": 980, "bradi": 980, "salz": 980, "campustrampu": 980, "agamemnon": [980, 981, 982, 983, 985, 986], "krasouli": [980, 981, 982, 983, 985, 986], "ditenberg": 980, "elena": 980, "sharova": 980, "filipj8": [980, 981], "fukatani": 980, "guiniol": 980, "guoci": 980, "hakaa1": [980, 981], "xhy": 980, "jakirkham": [980, 981, 982, 988], "jaroslaw": 980, "jeroko": 980, "jmontoyam": 980, "josephsalmon": [980, 981, 982], "jschendel": [980, 981], "leereev": 980, "hahn": [980, 981], "mathurinm": [980, 981, 982, 984, 985, 986, 987, 988], "mehak": 980, "sachdeva": 980, "mlewis1729": 980, "mlliou112": 980, "mthorrel": [980, 983], "ndingwal": 980, "nuff": 980, "plagre": 980, "pldtc325": 980, "breno": [980, 981], "olsen": 980, "alfano": 980, "burn": [980, 981], "polmauri": 980, "charlton": 980, "austin": 980, "chayant": 980, "t15h": 980, "chinmaya": 980, "pancholi": 980, "danielsen": 980, "chung": [980, 981], "pravarmahajan": [980, 981], "dariu": [980, 981], "morawiec": [980, 981], "haberth\u00fcr": 980, "heryanto": 980, "kirkbi": [980, 981], "rashchedrin": 980, "gertrud": 980, "devansh": [980, 981], "dickson": 980, "baxlei": 980, "don86": 980, "klarup": 980, "elizabeth": [980, 982, 985], "ferriss": 980, "ellen": 980, "egli": 980, "chieh": [980, 981], "chou": [980, 981], "grzegorz": [980, 983], "szpak": [980, 983], "zxcvbniu": 980, "icyblad": 980, "ilya": 980, "laughlin": 980, "iv\u00e1n": [980, 986], "vall\u00e9": 980, "aur\u00e9lien": [980, 981, 982, 986, 987], "bellet": [980, 981, 982], "mahapatra": 980, "bundl": [981, 982], "indexerror": [981, 982], "11756": [981, 982], "14237": [981, 982], "schuder": [981, 982, 983], "13903": [981, 982], "13124": [981, 982], "13772": [981, 982], "vya": [981, 982, 983], "12949": 981, "prabakaran": [981, 982, 985, 987, 988], "kumaresshan": [981, 982, 985], "12946": 981, "tallott": 981, "13276": 981, "13005": 981, "13312": 981, "11295": 981, "vacaliuc": [981, 982], "13046": 981, "12360": 981, "aakanksha": 981, "13134": 981, "sandro": [981, 988], "casagrand": [981, 982], "12881": 981, "13165": 981, "13221": 981, "bertrandhaut": [981, 982], "raghunathan": [981, 982, 983, 984, 985, 986, 987], "dowon": [981, 982], "aria": [981, 982, 988], "fibins": [981, 982], "finn": [981, 982], "shea": [981, 982], "joaak": [981, 982], "m\u00e9hault": [981, 982], "kms15": [981, 982], "kossori": [981, 982], "aruku": [981, 982], "lakshya": [981, 982, 983], "ib\u00e1\u00f1ez": [981, 982, 985], "gorelli": [981, 982, 986, 988], "marcogorelli": [981, 982], "mferrari3": [981, 982], "micka\u00ebl": [981, 982], "schoentgen": [981, 982], "pavlo": [981, 982], "kalli": [981, 982], "glaser": [981, 982], "pierretallott": [981, 982, 983], "kapoor": [981, 982], "sandrocasagrand": [981, 982], "tashai": [981, 982], "vishaal": [981, 982], "zhuyi": [981, 982], "ziji": [981, 982], "zj": [981, 982], "poh": [981, 982], "12704": 981, "12701": 981, "12685": 981, "12699": 981, "adanhawth": [981, 982], "stine": [981, 982], "feda": [981, 982], "curic": [981, 982], "jeremiedbb": [981, 982, 983], "katrin": [981, 982], "leinweb": [981, 982], "muhammad": [981, 982, 986], "hassaan": [981, 982], "rafiqu": [981, 982], "paczuski": [981, 982], "waterburi": [981, 982], "shivam": [981, 982, 983], "kotwalia": [981, 982], "12159": 981, "12105": 981, "11912": 981, "12304": 981, "12339": 981, "12246": 981, "12330": 981, "10811": 981, "feldbauer": [981, 982, 983, 984, 987], "12441": 981, "12517": 981, "12234": 981, "12165": 981, "12388": 981, "connor": [981, 986], "tann": [981, 986], "12393": 981, "12122": 981, "sharedmem": 981, "12518": 981, "12481": 981, "12612": 981, "12211": 981, "lisa": [981, 982, 984, 985, 987, 988], "hannel": [981, 982], "melissa": 981, "ferrari": 981, "12451": 981, "12171": 981, "12365": 981, "_encod": 981, "12514": 981, "12522": 981, "12471": 981, "marzinotto": [981, 982], "12317": 981, "12338": 981, "bauk": [981, 982], "12625": 981, "sklearn_site_joblib": 981, "12350": 981, "12467": 981, "unvendor": 981, "12345": 981, "navarret": [981, 982, 983], "benjastudio": [981, 982], "cheuk": [981, 982], "connossor": [981, 982], "levinson": [981, 982], "kieker": [981, 982], "kataev": [981, 982], "dillon": [981, 982, 983], "gardner": [981, 982], "vukolov": [981, 982], "caselli": [981, 982], "gauravahlawat": [981, 982], "gustavo": [981, 982, 987], "mari": [981, 982, 983, 984, 987], "haroldfox": [981, 982], "jacklangerman": [981, 982], "jacopo": [981, 982], "notarstefano": [981, 982], "janvanrijn": [981, 982], "jdethuren": [981, 982], "koen": [981, 982], "kushal": [981, 982], "chauhan": [981, 982, 988], "jie": [981, 982, 985], "lili": [981, 982], "xiong": [981, 982, 987], "liam": [981, 982], "melsyt": [981, 982], "nichola": [981, 982, 984], "shebanov": [981, 982], "oleksandr": [981, 982, 983, 984, 987], "pavlyk": [981, 982, 983, 984], "hausamann": [981, 982], "pulkit": [981, 982, 984], "maloo": [981, 982], "batista": [981, 982, 986], "radostin": [981, 982], "stoyanov": [981, 982], "ramil": [981, 982], "nugmanov": [981, 982], "rebekah": [981, 982, 983], "roopam": [981, 982], "tiernei": [981, 982, 983], "sylvainlan": [981, 982, 983, 984, 985], "takingitcasu": [981, 982], "tulio": [981, 982], "xing": [981, 982], "zach": [981, 982, 987], "mountain": 981, "sorri": 981, "basemultilayerperceptron": [981, 983], "11924": 981, "macbook": 981, "9354": 981, "9372": 981, "astel": 981, "10933": 981, "hansen": 981, "10471": 981, "gaurav": [981, 982, 983, 984, 985, 987], "dhingra": [981, 982, 985], "8003": 981, "jo\u00ebl": 981, "billaud": 981, "10059": 981, "braun": 981, "9612": 981, "jonatan": 981, "samoocha": 981, "8129": 981, "margeta": 981, "k_means_elkan": 981, "11353": 981, "11901": 981, "9875": 981, "9012": 981, "11315": 981, "9041": 981, "9858": 981, "artiem": 981, "krinitsyn": 981, "9908": 981, "8617": 981, "maskani": [981, 983, 984, 985], "filali": 981, "konstantino": 981, "katriopla": 981, "10774": 981, "catalfo": 981, "10795": 981, "takeshi": [981, 986, 987, 988], "yoshizawa": 981, "11082": 981, "sadhana": 981, "srinivasan": [981, 984], "9731": 981, "10045": 981, "fetch_mldata": 981, "11466": 981, "6374": 981, "normalize_compon": [981, 983], "11585": 981, "ivan": [981, 982, 985, 988], "panico": [981, 985], "11420": 981, "6452": 981, "walli": 981, "gauz": 981, "9492": 981, "8484": 981, "9886": 981, "underflow": [981, 986], "10142": 981, "5956": 981, "_class_mean": 981, "_class_cov": 981, "10898": 981, "nanxin": 981, "9832": 981, "11951": 981, "r\u00fcdiger": [981, 982, 984], "busch": [981, 982, 984], "9707": 981, "wan": 981, "7071": 981, "9157": 981, "11176": 981, "forsyth": 981, "11542": 981, "anna": 981, "9524": 981, "9723": 981, "10908": 981, "10899": 981, "melderi": 981, "10101": 981, "10\u2079": 981, "9147": 981, "clae": 981, "fredrik": 981, "mannbi": 981, "10441": 981, "mayur": 981, "kulkarni": 981, "6689": 981, "nihar": 981, "sheth": 981, "11293": 981, "9656": 981, "greenhal": 981, "n_features_to_comput": 981, "9222": 981, "hoh": 981, "9234": 981, "andrewww": 981, "8075": 981, "11211": 981, "9484": 981, "dalla": 981, "card": 981, "9043": 981, "10112": 981, "logistic_regression_path": [981, 982], "11724": 981, "9939": 981, "westov": 981, "10998": 981, "vazelh": [981, 982, 983], "10071": 981, "10153": 981, "d\u00f6pfert": 981, "10095": 981, "cv_valu": 981, "10297": 981, "mabel": [981, 985], "10581": 981, "yacin": 981, "mazari": 981, "10687": 981, "10836": 981, "aishwarya": 981, "10397": 981, "10992": 981, "11327": 981, "11905": 981, "9837": 981, "10593": 981, "10610": 981, "8554": 981, "9775": 981, "10827": 981, "osa": 981, "8066": 981, "10587": 981, "3840": 981, "niederb\u00fchl": 981, "9521": 981, "11124": 981, "arya": 981, "11160": 981, "barkhorn": 981, "11679": 981, "pacha": 981, "9980": 981, "10845": 981, "perez": [981, 988], "parra": 981, "toledano": 981, "10999": 981, "memoryerror": [981, 985], "11135": 981, "10377": 981, "9786": 981, "10093": 981, "alexryndin": 981, "9772": 981, "9515": 981, "liddel": 981, "manh": 981, "dao": 981, "9851": 981, "10280": 981, "10336": 981, "haoran": 981, "basemixtur": [981, 982], "10740": 981, "10869": 981, "g\u00e9ron": 981, "9686": 981, "11310": 981, "_fit_and_scor": 981, "11576": 981, "ronsin": [981, 982], "_run_search": 981, "9599": 981, "11006": 981, "11557": 981, "boucaud": 981, "iid": 981, "9085": 981, "10677": 981, "zhdanovich": 981, "10982": 981, "juliet": 981, "lawton": 981, "10928": 981, "solutu": 981, "immensu": 981, "9257": 981, "8190": 981, "alcorn": 981, "9681": 981, "mottl": [981, 982], "10005": 981, "10346": 981, "tobia": [981, 986, 988], "10887": 981, "11136": 981, "4394": 981, "9579": 981, "kober": 981, "9655": 981, "bjerr": 981, "11556": 981, "11774": 981, "9456": 981, "unexpectedli": 981, "9304": 981, "11144": [981, 982], "9151": 981, "10521": 981, "7668": 981, "9647": 981, "10195": 981, "10192": 981, "11272": 981, "11467": 981, "11505": 981, "giusepp": [981, 982], "costa": [981, 986], "10210": 981, "11520": 981, "11011": 981, "11005": 981, "11308": 981, "11206": 981, "11306": 981, "10437": 981, "lucija": 981, "gregov": 981, "10452": 981, "10181": 981, "nirvan": [981, 985], "anjirbag": 981, "9399": 981, "10913": 981, "rodrigo": 981, "agundez": 981, "10458": 981, "9816": 981, "newei": 981, "11042": 981, "11235": 981, "active_features_": 981, "feature_indices_": 981, "n_values_": 981, "9726": 981, "10829": 981, "gilberto": 981, "olimpio": 981, "10655": 981, "python2": 981, "10412": 981, "jiongyan": 981, "9497": 981, "8361": 981, "neo": 981, "_criterion": 981, "classificationcriterion": 981, "regressioncriterion": 981, "10325": 981, "camil": 981, "stap": 981, "basedecisiontre": [981, 982, 985], "10536": 981, "ohayon": [981, 982, 989], "11464": 981, "stott": 981, "10663": 981, "10229": 981, "11553": 981, "10881": 981, "sevin": 981, "ridge_regress": [981, 982, 988], "10306": 981, "siebert": 981, "11741": 981, "11166": 981, "pypy3": 981, "v5": 981, "11010": 981, "lami": 981, "11596": 981, "marcu": 981, "voss": 981, "9569": 981, "12462": 981, "zachariah": 981, "10474": 981, "10500": 981, "9701": 981, "9378": 981, "check_set_param": 981, "7738": 981, "alvin": 981, "chiang": 981, "8102": 981, "ankita": 981, "sinha": 981, "check_methods_subset_invari": [981, 987], "10428": 981, "check_sample_weights_pandas_seri": 981, "11558": 981, "211217613": 981, "absolutelynowarranti": 981, "richi": 981, "halford": [981, 988], "adelr": 981, "adityadaflapurkar": 981, "aidan": 981, "fitzgerald": 981, "aishgrt1": 981, "akash": 981, "shivram": 981, "lenail": [981, 985], "egg": 981, "diaz": 981, "amanda": [981, 984, 985, 986, 987], "aniruddha": 981, "annaayzenshtat": 981, "antonio": [981, 983], "quinonez": 981, "anubhav": 981, "marwaha": 981, "arik": 981, "pamnani": 981, "ozga": 981, "arunava": 981, "geron": [981, 986, 987], "ayush": [981, 986], "bangda": 981, "bastian": 981, "venthur": 981, "benn": 981, "koonc": 981, "cclauss": 981, "chadi": 981, "kamar": 981, "holdgraf": 981, "hirsch": 981, "hogan": 981, "cnx": 981, "cwitt": 981, "ferreira": [981, 986, 987], "gomez": [981, 988], "klevebr": 981, "shwed": 981, "mohn": [981, 985], "danil": 981, "baibak": [981, 982], "beach": 981, "pickup": 981, "derek": 981, "niederhut": [981, 983], "dilutedsauc": 981, "dlovel": 981, "dor": 981, "dougla": 981, "duhaim": 981, "tuzova": 981, "eunji": 981, "farahsae": 981, "raimundo": 981, "fenx": 981, "frankhui": 981, "franz": 981, "wompner": 981, "freija": 981, "descamp": 981, "frsi": 981, "calvo": [981, 982], "georgi": [981, 984], "peev": [981, 984], "gkevinyen5418": 981, "vermeil": 981, "hongh": 981, "hossein": [981, 982, 983], "pourbozorg": [981, 982, 983], "hristo": [981, 988], "hunan": 981, "rostomyan": 981, "iampat": 981, "jaewon": 981, "malcolm": 981, "jami": 981, "wolosonovich": 981, "jeb": 981, "bearer": 981, "jinkun": 981, "jjabl": 981, "johnstott": 981, "jotasi": 981, "julietcl": 981, "shenk": 981, "karl": 981, "kasper": 981, "primdal": 981, "lauritzen": 981, "ksemb": 981, "kuai": [981, 982], "kyeongpil": 981, "kang": [981, 983], "kye": 981, "kyledrogo": 981, "l\u00e9o": 981, "liutong": 981, "lizao": 981, "lkjcalc": 981, "louib": [981, 982], "luciano": [981, 988], "luke": 981, "persola": 981, "markiwanchyshyn": 981, "marsgui": 981, "gubri": [981, 982], "koko": [981, 987, 988], "copeland": [981, 982], "meghann": [981, 983], "minh": 981, "jamaoui": [981, 982, 985], "mohammad": [981, 982], "shahebaz": 981, "muayyad": 981, "alsadi": 981, "nabarun": 981, "pal": [981, 987], "narendran": 981, "santhanam": 981, "suh": 981, "eng": 981, "av": 981, "nicolau": 981, "werneck": 981, "titov": [981, 983, 986, 987], "nilesh": 981, "kevlani": 981, "notmatthancock": [981, 983], "nzw": 981, "oren": 981, "milman": 981, "osaid": 981, "rehman": 981, "nasir": 981, "fernand": [981, 987, 988], "olden": 981, "pierreablin": 981, "pietruh": 981, "pinaki": 981, "nath": 981, "chowdhuri": [981, 987], "piotr": [981, 982], "szyma\u0144ski": [981, 982], "pradeep": [981, 982], "raamana": [981, 982], "pravar": 981, "mahajan": [981, 983], "qingi": 981, "rajendra": 981, "arora": [981, 988], "rankylau": 981, "kosobrodov": 981, "rragundez": 981, "sagnik": 981, "bhattacharya": 981, "radhakrishnan": 981, "saqib": 981, "nizam": 981, "shamsi": 981, "satish": 981, "gigant": [981, 983, 988], "flennerhag": 981, "sebastien": 981, "shalil": 981, "awalei": 981, "shangwu": [981, 982], "sharad": 981, "vijalapuram": 981, "shenhanc78": 981, "rastogi": 981, "siftikha": 981, "sinclert": 981, "p\u00e9rez": 981, "solutusimmensu": 981, "somya": 981, "anand": [981, 985], "srajan": 981, "paliw": 981, "sriharsha": [981, 982], "hatwar": [981, 982], "mcdowel": 981, "syonekura": 981, "takanori": 981, "hayashi": 981, "tarcusx": 981, "theriley106": 981, "heavei": 981, "augspurg": [981, 983], "trishnendu": 981, "ghorai": 981, "twosigmajab": 981, "umar": [981, 982], "farouk": [981, 982], "urvang": [981, 983], "patel": [981, 983, 984, 985, 987], "vadim": [981, 985, 986], "markovtsev": 981, "vinit": 981, "vinod": 981, "viraj": 981, "mavani": 981, "navkal": 981, "vqean3": [981, 982], "vufg": 981, "wallygauz": 981, "wdevazelh": 981, "barnett": 981, "rosenfeld": 981, "yime": 981, "ymazari": 981, "yufeng": 981, "griffith": [981, 982], "z\u00e9": 981, "vin\u00edciu": 981, "zhenq": 981, "zhiqe": 981, "xiao": [981, 983, 986, 987, 988, 989], "couldn": [982, 983, 984, 985, 986, 987, 988, 989], "12955": 982, "klopfer": 982, "14197": 982, "14024": 982, "nicolashug": 982, "13974": 982, "hoang": [982, 983], "fhoang7": 982, "14393": 982, "guillem": [982, 983, 988], "subi": [982, 983, 988], "14087": 982, "14067": 982, "stalei": [982, 983], "14092": 982, "14053": 982, "13947": 982, "instanci": 982, "suffient": 982, "13910": 982, "13894": 982, "myatt": [982, 983], "min_max_axi": 982, "13741": 982, "roddi": [982, 983], "macsween": [982, 983], "14309": 982, "13864": 982, "paresh": [982, 983], "13877": 982, "_sag": 982, "sag_solv": 982, "3591": 982, "13317": 982, "13157": 982, "13086": 982, "cole": 982, "13485": 982, "assia": 982, "benbihi": 982, "13651": 982, "reloc": 982, "13486": 982, "13427": 982, "couvreur": [982, 983], "9069": 982, "13835": 982, "10727": 982, "wood": 982, "13250": 982, "13241": 982, "12143": 982, "11650": 982, "non_negative_factor": [982, 984, 985, 986], "12988": 982, "8769": 982, "11000": 982, "thibault": 982, "sejourn": 982, "changedbehaviourwarn": 982, "11526": 982, "6848": 982, "glemaitr": [982, 983, 985], "11727": 982, "13266": 982, "13545": 982, "sorro": 982, "12807": 982, "12513": 982, "12543": 982, "storch": 982, "13260": 982, "13283": 982, "13524": 982, "13174": 982, "13496": 982, "13620": 982, "12436": 982, "12983": 982, "13251": 982, "joshuakennethjon": 982, "12715": 982, "13164": 982, "12834": 982, "leastsquareserror": 982, "update_terminal_region": 982, "6463": 982, "movelikeriv": 982, "13193": 982, "12599": 982, "13779": 982, "13780": 982, "12916": 982, "13641": 982, "8478": 982, "12177": 982, "12583": 982, "13601": 982, "danylo": 982, "densif": 982, "13240": 982, "bartosz": 982, "13562": 982, "11646": 982, "11699": 982, "make_dataset": 982, "12860": 982, "13336": 982, "toleranbc": 982, "11754": 982, "13397": 982, "fagan": 982, "12174": 982, "12972": 982, "lucio": 982, "fernandez": 982, "arjona": 982, "coeffeci": 982, "13279": 982, "13328": 982, "13389": 982, "basesgdclassifi": 982, "13422": 982, "cl\u00e9ment": [982, 986, 988], "doumouro": 982, "unhandl": 982, "13363": 982, "12821": 982, "13350": 982, "j\u00e9r\u00f4me": [982, 983, 984], "dock\u00e8": [982, 983, 984], "9907": 982, "12232": 982, "sangeeth": 982, "11179": 982, "13151": 982, "12568": 982, "8216": 982, "romuald": 982, "menuet": 982, "12732": 982, "12334": 982, "13607": 982, "12855": 982, "pawel": 982, "sendyk": 982, "13628": 982, "wasn": 982, "13447": 982, "10580": 982, "sandra": [982, 988], "mitrov": 982, "13554": 982, "celelibi": 982, "13142": 982, "11354": 982, "12613": 982, "12669": 982, "torrella": [982, 983, 989], "12861": 982, "8773": 982, "13366": 982, "fournier": 982, "10440": 982, "12222": 982, "10058": 982, "chiotelli": 982, "12279": 982, "12582": 982, "my_pipelin": 982, "2568": 982, "make_": 982, "11364": 982, "baze": 982, "petrushev": 982, "__len__": 982, "13439": 982, "12908": 982, "drew": 982, "13253": 982, "12116": 982, "12197": 982, "12251": 982, "float16": 982, "13007": 982, "raffaello": 982, "baluyot": 982, "13333": 982, "13459": 982, "hunter": 982, "mcgushion": 982, "8508": 982, "6261": 982, "vettigli": 982, "justglow": 982, "12300": 982, "11458": 982, "mitar": 982, "milutinov": 982, "12344": 982, "13549": 982, "warn_on_dtyp": 982, "check_pairwise_arrai": 982, "13382": 982, "prathmesh": 982, "saval": 982, "11705": 982, "11973": 982, "our_rand_r": 982, "madhura": [982, 984, 985, 988], "parikh": [982, 987, 988, 989], "13531": 982, "check_fit_idempot": 982, "12328": 982, "alberto": [982, 986, 987], "torr": 982, "amourav": 982, "assiaben": 982, "micha\u0142owski": 982, "brentfagan": 982, "chenal": [982, 983, 985], "choe": 982, "drewmjohnston": 982, "dror": 982, "atariah": 982, "esvhd": 982, "falak": 982, "gandenberg": 982, "luqi": 982, "jf": 982, "kulbear": 982, "leandro": [982, 986], "hermida": [982, 986], "luk": 982, "manimaran": [982, 984, 985, 986, 987], "gaido": 982, "marinelm": 982, "masstran": 982, "roeschk": 982, "aftab": 982, "abdela": 982, "ibraheem": 982, "mwestt": 982, "iijima": 982, "oresti": 982, "osman": [982, 988], "flanagan": [982, 983], "soriano": 982, "peai": 982, "pim": 982, "haan": 982, "raf": 982, "rajdeep": 982, "dua": 982, "ra\u00fal": 982, "garc\u00eda": [982, 983, 988], "lekhwani": 982, "varma": 982, "shiyu": 982, "duan": [982, 984], "smari": [982, 983, 984], "st\u00e9phane": [982, 983, 987, 988], "surgan12": 982, "thibsej": 982, "xhan": 982, "xinyuliu12": 982, "zayd": 982, "hammoudeh": 982, "16397": [983, 984], "16500": 983, "16505": 983, "16076": 983, "shack": [983, 984, 985], "15930": 983, "inder128": 983, "15810": 983, "15898": 983, "gargsya": 983, "15933": 983, "15760": 983, "15888": 983, "15936": 983, "dizietasahi": 983, "15879": 983, "bibhash": [983, 984], "chandra": [983, 984, 987], "mitra": [983, 984, 988], "15937": 983, "blyston": [983, 984], "15863": 983, "abstractmethod": 983, "_check_x": 983, "basenb": 983, "15996": 983, "brigitta": [983, 984, 985, 989], "sip\u0151cz": [983, 984, 985, 989], "15751": 983, "tirth": [983, 984], "15868": 983, "nikla": [983, 984], "smedemark": 983, "marguli": 983, "15797": 983, "15947": 983, "revamp": 983, "14849": 983, "_name_estim": 983, "_gb": 983, "facto": 983, "_birch": 983, "9250": 983, "12927": 983, "deprecationwarn": 983, "interfer": 983, "hinder": 983, "15080": 983, "14464": 983, "13575": 983, "10482": 983, "13726": 983, "shuzh": 983, "9288": 983, "15057": 983, "korolev": 983, "15120": 983, "7943": 983, "12303": 983, "14510": 983, "14890": 983, "miguel": 983, "cabrera": 983, "14544": 983, "15304": 983, "jaim": 983, "ferrando": 983, "huerta": 983, "12068": 983, "12145": 983, "13609": 983, "camila": 983, "williamson": 983, "15661": 983, "15160": 983, "14259": 983, "14764": 983, "14740": 983, "st\u00e9phan": 983, "tulken": 983, "14623": 983, "sarra": 983, "habchi": 983, "15257": 983, "willocx": 983, "12650": 983, "13960": 983, "multiouput": 983, "14908": 983, "martina": [983, 985], "vila": [983, 985], "15382": 983, "14933": 983, "15138": 983, "cusick": 983, "14406": 983, "14012": 983, "faouzi": [983, 984], "13769": 983, "14194": 983, "least_absolute_devi": [983, 985, 986], "13896": 983, "13933": 983, "14710": 983, "categorical_crossentropi": [983, 987], "14869": 983, "14682": 983, "hancock": 983, "5963": 983, "pablo": [983, 986, 987], "dubou": 983, "14287": 983, "15375": 983, "14305": 983, "14114": 983, "15084": 983, "14294": 983, "14907": 983, "14602": 983, "chawla": 983, "vectorizermixin": 983, "14430": 983, "strip_accents_unicod": 983, "15100": 983, "gradi": 983, "overflowerror": 983, "15463": 983, "norvan": 983, "sahin": 983, "14520": 983, "11635": 983, "alec": 983, "13704": 983, "15557": 983, "14378": 983, "masashi": [983, 985], "shibata": 983, "ashim": 983, "bhattarai": 983, "15010": 983, "skip_comput": 983, "13773": 983, "14356": 983, "15393": 983, "venkatachalam": [983, 984, 985, 986, 987], "14646": 983, "14028": 983, "15429": 983, "14706": 983, "14108": 983, "14170": 983, "14296": 983, "13618": 983, "13995": 983, "14458": 983, "14591": 983, "14864": 983, "15044": 983, "15086": 983, "15038": 983, "15082": 983, "13213": 983, "14647": 983, "linalgerror": 983, "13393": 983, "13707": 983, "training_data_": 983, "14357": 983, "14900": 983, "socastro": [983, 989], "9951": 983, "14936": 983, "15083": 983, "12789": 983, "15274": 983, "13938": 983, "15049": 983, "toccac": 983, "ptocca": 983, "13231": 983, "dong": 983, "13467": 983, "14595": 983, "14865": 983, "l\u00e9onard": [983, 988], "binet": [983, 988], "14732": 983, "14417": 983, "15625": 983, "12258": 983, "14898": 983, "matcovici": 983, "14593": 983, "reboul": 983, "14549": 983, "14704": 983, "15096": 983, "14629": 983, "15488": 983, "15490": 983, "12569": 983, "bicker": 983, "9597": 983, "wenbo": [983, 985], "zhao": [983, 985, 986, 987, 988], "14336": 983, "dexter": 983, "9274": 983, "perri": 983, "13806": 983, "ana\u00ebl": 983, "beaugnon": 983, "15119": 983, "15053": 983, "13290": 983, "13987": 983, "_pairwis": [983, 985], "13925": 983, "robson": 983, "15524": 983, "xun": [983, 985], "12557": 983, "border": 983, "14286": 983, "15099": 983, "baselibsvm": 983, "_sparse_fit": 983, "14894": 983, "danna": 983, "naser": 983, "12887": 983, "15028": 983, "guan": 983, "14381": 983, "11232": 983, "sievert": 983, "10815": 983, "14035": 983, "14475": 983, "14538": 983, "14872": 983, "upcast": [983, 987], "15094": 983, "choose_check_classifiers_label": 983, "enforce_estimator_tags_i": 983, "mock": 983, "mockdatafram": 983, "checkingclassifi": 983, "newton_cg": 983, "random_choice_csc": 983, "fast_dict": 983, "parallel_help": 983, "14902": 983, "14971": 983, "nep": 983, "14702": 983, "13013": 983, "13875": 983, "14680": 983, "check_classifier_multioutput": 983, "check_regressor_multioutput": 983, "13392": 983, "rok": 983, "mihevc": 983, "check_transformer_data_not_an_arrai": 983, "mro": [983, 984], "14884": 983, "alphonsu": 983, "abbi": [983, 984], "popa": [983, 984], "abdur": 983, "rahmaan": 983, "janhang": 983, "abenbihi": 983, "abhinav": [983, 986], "sagar": 983, "jana": 983, "lagat": 983, "alessandro": [983, 985, 988], "surac": 983, "siqueira": 983, "alexgoryainov": 983, "itk": [983, 984, 985], "alexshack": [983, 984, 985], "akinkunl": 983, "kaseorg": 983, "maldonado": [983, 986], "angela": [983, 984, 988], "ambroz": [983, 984], "anisha": 983, "keshavan": 983, "gutierrez": 983, "anuja": 983, "archana": [983, 985], "alva": 983, "arnaudstiegl": 983, "arpanchowdhri": 983, "ashimb9": 983, "ayomid": 983, "bamidel": 983, "baran": 983, "buluttekin": 983, "barrycg": 983, "bill": [983, 984], "mill": 983, "biswadip": 983, "mandal": 983, "blackd0t": 983, "barklei": 983, "c56poni": 983, "camilaagw": 983, "cartman_nabana": 983, "catajara": 983, "cgsavard": [983, 984], "vesteghem": 983, "dakota": 983, "grusak": 983, "datenbergwerk": 983, "dormagen": 983, "deeplook": 983, "drgfreeman": 983, "cashman": 983, "edvardlindelof": 983, "ndirangu": [983, 987], "eunseop": 983, "jeong": 983, "fanni": 983, "federicopisanu": 983, "divo": 983, "flaviomorelli": 983, "francidona": 983, "franco": 983, "luqu": 983, "freder": 983, "haas": 983, "g0g0gadget": 983, "altai": 983, "vale": 983, "rio": [983, 985, 986, 987], "ganevgv": 983, "gdex1": 983, "getgaurav2": 983, "gideon": 983, "sonoiya": 983, "gpapadok": [983, 987], "mogavero": 983, "h4dr1en": 983, "hadshirt": 983, "hailei": [983, 984], "nguyen": [983, 984, 987, 988], "hannah": [983, 985, 987], "bruce": [983, 984], "macdonald": [983, 984], "honglu": 983, "ingrid": 983, "spielman": 983, "a16": [983, 984], "jaehong": 983, "jai": [983, 987], "jeromedock": 983, "jesper": 983, "dramsch": 983, "joanna": 983, "ortiz": 983, "kanika": 983, "sabharw": 983, "katarina": [983, 985], "slama": [983, 985], "kellycarmodi": 983, "eth": 983, "kensuk": 983, "arai": 983, "kesshi": [983, 984], "kevad": 983, "lofti": [983, 984], "winata": [983, 985], "sheng": 983, "dolmatov": 983, "kirthi": 983, "shankar": 983, "sivamani": 983, "katyal": 983, "lakshmi": 983, "krishnan": 983, "lalliacqua": [983, 986], "lbfin": 983, "loopym": 983, "lostcoast": 983, "huynh": [983, 985], "lrjball": [983, 984], "roeder": 983, "maggiecheg": [983, 987], "maithreyi": 983, "venkatesh": 983, "maltimor": 983, "maocx": 983, "douriez": [983, 984], "oywa": 983, "aladago": 983, "mbillingr": 983, "clare": 983, "micah": 983, "miguelbarao": 983, "mina": [983, 984], "naghshhnejad": [983, 984], "motmoti": 983, "mschaffenroth": 983, "natasha": 983, "nezar": 983, "nidhin": 983, "pattaniyil": 983, "nishan": 983, "mann": 983, "nitya": 983, "mandyam": 983, "novaya": [983, 986], "nxorabl": 983, "oleg": 983, "stikhin": 983, "omar": [983, 988, 989], "saleem": 983, "panpiort8": [983, 985], "paula": [983, 984], "poorna": [983, 985], "pspachtholz": [983, 984, 985], "qdeffens": [983, 986], "garg": [983, 984], "rapha\u00ebl": 983, "bournhonesqu": 983, "reza": 983, "gharibi": 983, "payn": 983, "rlm": 983, "juergen": [983, 988], "sanjabi": 983, "ruchitagard": 983, "ruth": 983, "waithera": 983, "sackei": 983, "samesh": [983, 984], "lakhotia": [983, 984], "sewook": 983, "dare": 983, "shreya": 983, "simoncw": 983, "smujjiga": 983, "s\u00f6nke": 983, "behrend": 983, "soumirai": 983, "steinfurt": [983, 985], "cowlei": 983, "th0rwa": [983, 984], "theoptip": [983, 984], "theotheo": 983, "thierno": 983, "ibrahima": 983, "diop": 983, "schmitt": [983, 984], "tilen": 983, "kusterl": 983, "timsaur": 983, "tola": 983, "topisan": 983, "ttang131": 983, "veerlosar": 983, "luzgin": 983, "jeanselm": 983, "lostanlen": 983, "vnherdeiro": 983, "wendi": 983, "willdarnel": 983, "wolframalpha": 983, "xcjason": 983, "martian": 983, "xsat": 983, "yinglr": 983, "yokasr": 983, "maxin": [983, 984], "yulia": 983, "zamrii": 983, "feng": [983, 985, 986, 987], "17959": 984, "17848": 984, "17742": 984, "17995": 984, "thomaz": 984, "santana": [984, 987], "dsouza": [984, 985, 986, 987], "17433": 984, "17985": 984, "multinomialdevi": 984, "logloss": [984, 988], "17694": 984, "rempfler": 984, "tsutomu": 984, "kusanagi": [984, 986], "17357": 984, "18016": 984, "x_copi": 984, "17914": 984, "15730": 984, "forrest": [984, 985], "17309": 984, "swier": [984, 985], "heer": 984, "17360": 984, "17812": 984, "bruno": [984, 985, 986], "idl": 984, "17210": 984, "17235": 984, "17204": 984, "changed_onli": 984, "17205": 984, "15005": [984, 986], "slep009": [984, 986, 987], "estimator_samples_": 984, "16149": 984, "11950": 984, "11514": 984, "16075": 984, "16484": 984, "agglomerativecluclust": 984, "16257": 984, "simona": [984, 985, 986], "maggio": [984, 985, 986], "16801": 984, "rcwoolston": 984, "16431": 984, "14048": 984, "15963": 984, "16084": 984, "15950": 984, "stephani": 984, "15980": 984, "wconnel": 984, "15709": 984, "15707": 984, "maciej": 984, "mikulski": 984, "16006": 984, "rushabh": 984, "vasani": 984, "streamhandl": 984, "logger": 984, "handler": 984, "16451": 984, "16280": 984, "16837": 984, "wornbb": 984, "15669": 984, "chaitanya": 984, "16224": 984, "schwetlick": [984, 985], "gelavizh": 984, "ahmadi": 984, "marija": [984, 985], "vlajic": [984, 985], "wheeler": [984, 985], "16841": 984, "16655": 984, "16718": 984, "miotto": 984, "16981": 984, "g\u00f3rski": [984, 985], "14696": 984, "14516": 984, "15582": 984, "16069": 984, "bail": 984, "16183": 984, "16182": 984, "santhosh": 984, "16437": 984, "hwan": 984, "cho": 984, "16539": 984, "deros": 984, "16692": 984, "16663": 984, "15834": 984, "santiago": 984, "mola": 984, "16103": 984, "divyaprabha": 984, "selectormixin": 984, "16132": 984, "trimeta": 984, "15503": 984, "15782": 984, "plgreenliru": 984, "16403": 984, "narendra": 984, "mukherje": 984, "16508": 984, "15864": 984, "14300": 984, "15436": 984, "15652": 984, "15179": 984, "angelaambroz": 984, "15773": 984, "15655": 984, "14848": 984, "absgrad": 984, "_newton_cg": 984, "16266": 984, "standard_coef_": 984, "standard_intercept_": 984, "average_coef_": 984, "average_intercept_": 984, "16261": 984, "brandt": 984, "16849": 984, "14264": 984, "17021": 984, "16323": 984, "16362": 984, "16442": 984, "parson": [984, 986], "rick": 984, "mackenbach": 984, "16993": 984, "emit": 984, "15622": 984, "mors": 984, "15918": 984, "kubin": 984, "fit_grid_point": 984, "16401": 984, "pratama": 984, "sutiono": 984, "15953": 984, "15959": 984, "16111": 984, "16090": 984, "jayaratn": [984, 985, 988], "14075": 984, "meyer89": 984, "16117": 984, "15785": 984, "16245": 984, "16585": 984, "15762": 984, "16466": 984, "16632": 984, "maura": 984, "pintor": 984, "battista": 984, "biggio": 984, "15946": 984, "ngshya": 984, "32767": 984, "mt19937": 984, "mersenn": 984, "twister": 984, "31bit": 984, "63bit": 984, "crude": 984, "postprocessor": 984, "lemir": 984, "13511": 984, "kennel": 984, "11296": 984, "15558": 984, "15806": 984, "16331": 984, "batiss": 984, "15926": 984, "16021": 984, "sparsearrai": 984, "16728": 984, "uint": 984, "17032": 984, "_safe_tag": 984, "16950": 984, "15380": 984, "acitiv": 984, "16726": 984, "16112": 984, "16622": 984, "17061": 984, "aleksandra": 984, "kocot": 984, "alonso": [984, 986], "allend": [984, 986], "ana": [984, 986], "casado": 984, "ankit810": 984, "arunav": 984, "konwar": 984, "maingret": 984, "beier": 984, "berni": 984, "bharathi": 984, "brigi": [984, 985], "castachick": 984, "castor": 984, "corri": 984, "bartelheim": 984, "dani\u00ebl": 984, "gelder": 984, "daphn": 984, "breuer": 984, "cort": [984, 985, 988], "dbauer9": 984, "borovikova": 984, "eln": 984, "emili": [984, 985], "leung": 984, "evgeni": 984, "chasnovski": 984, "fabiana": 984, "facundo": [984, 987], "ferr\u00edn": 984, "franziska": 984, "boenisch": 984, "bolmier": [984, 985], "gholdman1": 984, "gonthier": 984, "hao": [984, 985, 987, 988], "chun": [984, 985, 987, 988, 989], "haoyin": [984, 986, 987], "h\u00e9lion": 984, "bourboux": 984, "himanshu": [984, 987], "hirofumi": [984, 985], "suzuki": [984, 985], "huangk10": 984, "kemenad": 984, "hye": 984, "sung": 984, "indecisiveus": [984, 985], "inderjeet": 984, "jjmistri": 984, "haitz": [984, 986, 987], "legarreta": [984, 986, 987], "gorro\u00f1o": [984, 986, 987], "judithabk6": 984, "jumon": 984, "kathryn": 984, "krishnachaitanya9": 984, "gia": 984, "thuan": 984, "lkubin": 984, "lopusz": 984, "lucgiffon": 984, "lucyleeow": 984, "kemk": 984, "magda": 984, "zielinska": 984, "mandi": [984, 987], "gu": [984, 985, 987], "manish": 984, "aradwad": 984, "maren": [984, 985, 986, 987, 988], "westermann": [984, 985, 986, 987, 988], "mariana": 984, "meirel": 984, "mariel": 984, "mc4229": 984, "shoemak": 984, "micha\u0142": 984, "s\u0142apek": 984, "mo": 984, "mojca": 984, "bertoncelj": 984, "narendramukherje": 984, "nicolasservel": 984, "nkish": 984, "noa": 984, "tamir": [984, 987], "olicairn": 984, "ur": 984, "lenz": [984, 988], "delanou": 984, "qizhi": 984, "quang": 984, "rachelcjordan": 984, "raduspaimoc": 984, "riccardo": 984, "folloni": 984, "ritchi": 984, "rori": 984, "hartong": 984, "redden": 984, "sambhav": 984, "kothari": 984, "santhoshbala18": 984, "sarat": 984, "addep": 984, "scibol": 984, "kie\u00dfl": 984, "sergiodsr": 984, "shiki": 984, "shubh": 984, "chatterje": 984, "simonamaggio": [984, 985, 986], "snowhit": 984, "stareh": 984, "marsh": 984, "sunmi": 984, "yoon": 984, "talgatomarov": 984, "tamirlan1": 984, "nonner": 984, "vink": [984, 986], "tiphain": 984, "viard": 984, "titu": 984, "vachan": 984, "vandana": 984, "iyer": 984, "waelbenamara": 984, "wderos": 984, "wenliwyan": 984, "windber": 984, "19579": 985, "19646": 985, "stopiter": 985, "19922": 985, "19732": 985, "ishikawa": [985, 986], "19407": 985, "ushtanit": [985, 986], "19982": 985, "19939": 985, "halvic": 985, "19703": 985, "sobkevich": 985, "villaz\u00f3n": 985, "terraza": 985, "fonari": [985, 986], "19182": 985, "yosuk": [985, 986], "kobayashi": [985, 986], "19721": 985, "19659": 985, "19211": 985, "19847": 985, "xiaoyu": 985, "chai": [985, 988], "19308": 985, "19234": 985, "19727": 985, "delong": [985, 986], "transfrom": 985, "19888": 985, "19924": 985, "19271": 985, "zhaowei": 985, "19580": 985, "brice": [985, 986], "adamson": 985, "wil": 985, "yegelwel": 985, "css": 985, "19417": 985, "19179": 985, "19126": 985, "17448": 985, "17107": 985, "17546": 985, "17856": 985, "17984": 985, "riedmann": 985, "francesco": [985, 988], "casalegno": 985, "18052": 985, "sean": [985, 986, 988], "stallei": 985, "17937": 985, "counts_": 985, "init_size_": 985, "17864": 985, "17616": 985, "18167": 985, "18256": 985, "jayratn": 985, "16392": 985, "17095": 985, "18746": 985, "18525": 985, "norm_y_weight": 985, "x_mean_": 985, "y_mean_": 985, "x_std_": 985, "y_std_": 985, "18768": 985, "18302": 985, "md5": 985, "checksum": 985, "14800": 985, "17396": 985, "jiaxiang": 985, "17491": 985, "18280": 985, "17499": 985, "17610": 985, "11064": 985, "17414": 985, "18149": 985, "17679": 985, "18528": 985, "villanova": [985, 986], "14446": 985, "18394": 985, "16985": 985, "garbag": 985, "18334": 985, "multicor": [985, 986], "18341": 985, "egor": 985, "smirnov": 985, "18410": 985, "17702": 985, "18326": 985, "changedbehaviorwarn": 985, "nonblasdotwarn": 985, "17804": 985, "17367": 985, "15427": 985, "gangesh": 985, "gudmalwar": 985, "erin": 985, "6545": 985, "17159": 985, "15361": 985, "17878": 985, "17090": 985, "_check_bounds_param": 985, "12638": 985, "lannuzel": 985, "17526": 985, "ayako": 985, "yagi": 985, "17612": 985, "srimukh": 985, "sripada": 985, "16493": 985, "darshan": 985, "15636": 985, "18987": 985, "16619": 985, "16906": 985, "roei": 985, "kahni": 985, "18293": 985, "16289": 985, "kishimoto": 985, "17379": 985, "18639": 985, "13003": 985, "s\u00e1nchez": 985, "18545": 985, "laurenz": 985, "reitsam": 985, "17578": 985, "knox": 985, "6624": 985, "marijn": 985, "vliet": 985, "18121": 985, "18607": 985, "fhaselbeck": 985, "18622": 985, "haesun": [985, 988], "10493": 985, "17997": 985, "maisonneuv": 985, "17662": 985, "18278": 985, "17412": 985, "16625": 985, "10591": 985, "karnowski": 985, "plot_det_curv": [985, 986], "18176": 985, "10708": 985, "15007": 985, "hathidara": 985, "10711": 985, "17192": 985, "avi": [985, 986], "17225": 985, "17569": 985, "17651": 985, "mato": 985, "17777": 985, "shubhanshu": 985, "mishra": [985, 986], "17826": 985, "decal": 985, "willard": 985, "17935": 985, "cari": 985, "goltermann": 985, "18114": 985, "18405": 985, "yakov": 985, "pchelintsev": 985, "13900": 985, "17478": 985, "teon": 985, "13204": 985, "kosic": 985, "18527": 985, "18343": 985, "devi": 985, "sandeep": 985, "18595": 985, "18222": 985, "18266": 985, "subrat": 985, "sahu": 985, "15126": 985, "17987": 985, "17233": 985, "zolisa": 985, "bleki": 985, "histgradientboost": 985, "18124": 985, "brocchini": 985, "16326": 985, "armstrong": 985, "17427": 985, "17038": 985, "neighborsbas": [985, 988], "17148": 985, "18691": 985, "18370": 985, "18612": 985, "17603": 985, "17604": 985, "17606": 985, "17608": 985, "17609": 985, "17633": 985, "17661": 985, "17932": 985, "16352": 985, "17759": 985, "18269": 985, "17876": 985, "18429": 985, "biernat": 985, "17317": 985, "17406": 985, "wick": 985, "18406": 985, "17833": 985, "yashika": 985, "18510": 985, "18447": 985, "16066": 985, "18682": 985, "16935": 985, "17193": 985, "16335": 985, "14982": 985, "11682": 985, "patric": [985, 986], "15763": 985, "16530": 985, "shuhua": 985, "17386": 985, "17187": 985, "x_idx_sort": 985, "17614": 985, "check_methods_sample_order_invari": [985, 987], "17598": 985, "ngo": 985, "17992": 985, "endian": 985, "17644": 985, "18508": 985, "abo7atm": 985, "spannbauer": 985, "deodhar": 985, "alexandracraciun": 985, "amy12xx": 985, "tiwari": 985, "choraria": 985, "subramaniyan": 985, "kushwaha": 985, "atsushi": [985, 986], "nukariya": [985, 986], "aura": 985, "autoviz": 985, "auto_viml": 985, "avinash": 985, "anak": 985, "barankaraku": 985, "barberogaston": 985, "beatrizsmg": 985, "mainy": 985, "bossan": [985, 987, 988], "pedigo": [985, 986], "bhavika": 985, "devnani": 985, "biprateep": 985, "dei": 985, "bmaisonn": 985, "byron": 985, "ceethinwa": [985, 986], "chaitanyamog": 985, "clmbst": 985, "coelhudo": 985, "crispinlogan": [985, 988, 989], "cristina": 985, "mula": 985, "darioka": [985, 987, 988], "declan": 985, "neill": 985, "deeksha": 985, "madan": 985, "fiegel": [985, 986, 988], "khoo": 985, "eschibli": 985, "fran": [985, 986, 987], "larsson": [985, 986, 987], "sheni": 985, "genvalen": [985, 986, 987, 988], "kiragu": 985, "gesa": 985, "stupperich": 985, "ghislain": 985, "vaillant": 985, "gim": 985, "seng": 985, "chevali": 985, "bohl": [985, 987], "schole": 985, "hitesh": 985, "somani": 985, "hoda1394": 985, "moin": 985, "hugorichard": 985, "isuru": 985, "wiryadi": 985, "j0rd1smit": 985, "jaehyun": 985, "ahn": 985, "tae": 985, "hoctor": 985, "vese": 985, "jeevan": 985, "jeroenpeterbo": 985, "jhay": 985, "jigna": 985, "panchal": 985, "jim0421": 985, "joaquin": 985, "gorb": 985, "moya": 985, "kartik": 985, "chugh": 985, "kaylani2": 985, "kendrick": 985, "cetina": 985, "kenni": 985, "isakov": 985, "koki": 985, "nishihara": 985, "krum": [985, 987], "arnaudov": [985, 987], "oldja": 985, "guitton": 985, "mariam": 985, "l\u00f6ning": 985, "scheubrein": 985, "megasari": 985, "mathschi": 985, "giudic": 985, "milan": 985, "straka": 985, "muoki": 985, "caleb": 985, "haiat": 985, "nadia": 985, "tahiri": 985, "ph": 985, "hamada": 985, "neil": 985, "botelho": 985, "nil": 985, "noelano": 985, "oj_lappi": 985, "oleh": [985, 987], "kozynet": [985, 987], "pankaj": 985, "jindal": 985, "pardeep": 985, "parthiv": 985, "chigurupati": 985, "pgithub": 985, "probinette4": 985, "pwalchessen": 985, "rachel": [985, 988], "fischoff": 985, "toshniw": 985, "rafei": 985, "iqbal": 985, "rahul": 985, "jakhar": 985, "rachum": 985, "ramyanp": [985, 986], "rauwuckl": 985, "ravi": [985, 988], "kiran": 985, "boggavarapu": 985, "rishi": 985, "advani": 985, "rithvik": 985, "romijnd": 985, "tavenard": 985, "rubi": 985, "werman": 985, "ryotaro": 985, "tsukada": 985, "sadak": 985, "khandelw": 985, "ezebunandu": 985, "kimbinyi": 985, "shail": 985, "keller": 985, "shao": [985, 986, 987], "shooter23": [985, 986], "soledad": 985, "galli": 985, "subrat93": 985, "sunitha": 985, "selvan": 985, "kusanagi2": 985, "terenc": [985, 986], "honl": [985, 986], "thij": [985, 988, 989], "thomas9292": 985, "thorben": 985, "tijanajovanov": 985, "timo": 985, "tnwei": 985, "ufmay": 985, "umberto": 985, "lupo": 985, "vika": [985, 987], "viniciu": [985, 986], "fuck": [985, 986], "violeta": 985, "watchtheblur": 985, "willpeppo": 985, "xethan": 985, "qianm": 985, "yue": 985, "yutaro": 985, "ikeda": 985, "zacchari": 985, "ramzi": 985, "zoj613": 985, "21271": 986, "21833": 986, "siavash": 986, "rezazadeh": 986, "19210": 986, "21295": 986, "22050": 986, "21991": 986, "19869": 986, "21481": [986, 987], "andr\u00e9": [986, 987], "babino": [986, 987], "disconnect": 986, "21915": 986, "21694": 986, "minknowski": 986, "21741": 986, "21871": 986, "21845": 986, "21517": 986, "21917": 986, "21552": 986, "escap": [986, 988], "21493": 986, "21199": 986, "20638": 986, "bohn\u00e9": 986, "21179": 986, "21195": 986, "21130": 986, "20761": 986, "21251": 986, "min_idf": 986, "max_idf": 986, "20752": 986, "alek": [986, 987], "lefebvr": [986, 987], "21340": 986, "21093": 986, "21351": 986, "cve": 986, "28975": 986, "21336": 986, "_check_sample_weight": 986, "only_non_neg": 986, "20880": 986, "andr\u00e1": [986, 987, 988], "if_delegate_has_method": [986, 987], "21145": 986, "zahlii": 986, "21389": 986, "20002": 986, "19310": 986, "least_squar": 986, "19733": 986, "lad": 986, "absolute_loss": 986, "20165": 986, "18444": 986, "18010": 986, "threadsaf": 986, "18736": 986, "17443": 986, "19641": 986, "20087": 986, "fauchereau": 986, "19002": 986, "19052": 986, "yusuk": 986, "nagasaka": 986, "17622": 986, "19024": 986, "franki": 986, "robertson": 986, "20117": 986, "natchiappan": [986, 987], "19883": 986, "20597": 986, "20899": 986, "20200": 986, "fit_": 986, "partial_fit_": 986, "19297": 986, "20560": 986, "18393": 986, "bittarello": 986, "19263": 986, "19244": 986, "18459": 986, "nd": 986, "18898": 986, "ora": 986, "phongpanagnam": 986, "21080": 986, "ledoit_wolf_shrinkag": 986, "20416": 986, "defoi": 986, "20583": 986, "19365": 986, "ateif": 986, "sara": 986, "19669": 986, "importlib": 986, "pyoxid": 986, "20297": 986, "20209": 986, "19011": 986, "20729": 986, "12069": 986, "19046": 986, "surya": [986, 987], "18433": 986, "19198": 986, "19159": 986, "beno\u00eet": 986, "mal\u00e9zieux": 986, "19908": 986, "20512": 986, "20960": 986, "cgroup": [986, 987], "quota": [986, 987], "20477": 986, "19799": 986, "19564": 986, "19836": 986, "19162": 986, "10096": 986, "fenil": 986, "suchak": 986, "20159": 986, "murata": [986, 987], "20534": 986, "19296": 986, "19035": 986, "19520": 986, "18964": 986, "19401": 986, "relova": 986, "17169": 986, "dmytro": 986, "lituiev": 986, "20380": 986, "pulido": 986, "felip": [986, 987, 988, 989], "bidu": [986, 987], "rutter": 986, "20515": 986, "carsten": 986, "allefeld": 986, "19568": 986, "shyam": 986, "20207": 986, "tomohiro": 986, "endo": 986, "20161": 986, "shuhei": 986, "kayawari": 986, "arka204": [986, 988], "20431": 986, "pfaffel": 986, "19428": 986, "hamoumi": 986, "19411": 986, "20959": 986, "20554": 986, "xiangyin": 986, "kong": 986, "9978": 986, "10027": 986, "16449": 986, "20231": 986, "naka": 986, "19571": 986, "20155": 986, "oura": [986, 987, 988], "19004": 986, "midvidi": 986, "19055": 986, "19172": 986, "19426": 986, "19499": 986, "strubel": 986, "19616": 986, "19391": 986, "19390": 986, "linearmodel": 986, "17743": 986, "17772": 986, "17746": 986, "17785": 986, "17750": 986, "17769": 986, "20683": 986, "19491": 986, "19472": 986, "shortest_path": 986, "20531": 986, "19415": 986, "17036": 986, "20326": 986, "uttam": 986, "9843": 986, "19643": 986, "attard": 986, "19784": 986, "18328": 986, "20312": 986, "divyanshu": 986, "deoli": 986, "18543": 986, "20552": 986, "19278": 986, "20030": 986, "tingshan": 986, "18649": 986, "rodion": 986, "martynov": 986, "20619": 986, "baseshufflesplit": 986, "20056": 986, "pabloduque0": 986, "prematur": 986, "20904": 986, "tomasz": 986, "jakubek": [986, 987], "18925": 986, "poznik": [986, 987, 988], "18842": 986, "19473": 986, "jiefangxuanyan": 986, "20072": 986, "20842": 986, "mart\u00edn": [986, 987], "19631": 986, "19790": 986, "flynn": [986, 988], "18368": 986, "19483": 986, "20526": 986, "19069": 986, "19041": 986, "20250": 986, "20652": 986, "19934": 986, "gleb": [986, 988, 989], "levitskii": 986, "19734": 986, "robinson": 986, "19752": 986, "zhehao": [986, 987, 988], "19527": 986, "19788": 986, "19356": 986, "makoeppel": 986, "19879": 986, "19906": 986, "20727": 986, "20961": 986, "n_input_features_": 986, "20240": 986, "20843": 986, "18959": 986, "wstate": 986, "20023": 986, "19336": 986, "20272": 986, "19459": 986, "bezuidenhout": 986, "clifford": 986, "akai": 986, "nettei": 986, "19948": 986, "20657": 986, "19766": 986, "propreti": 986, "20385": 986, "_weighted_percentil": 986, "huberlossfunct": 986, "20528": 986, "_safe_index": 986, "20673": 986, "is_scalar_nan": 986, "assert_warn": 986, "assert_warns_messag": 986, "20521": 986, "abdulelah": 986, "mesfer": 986, "adrian": [986, 987, 988], "garcia": 986, "badaracco": 986, "sad\u0142ocha": 986, "rubial": 986, "alessia": 986, "marcolini": 986, "alihan": 986, "zihna": 986, "alin": 986, "amol": 986, "deshmukh": 986, "pessoa": 986, "anavelyz": 986, "ashish": 986, "ashvith": 986, "shetti": 986, "baam": [986, 987], "baptbillard": 986, "bmalezieux": 986, "bumblebe": 986, "caherrera": 986, "meli": [986, 987, 988], "chrissobel": 986, "yeh": 986, "chuliang": 986, "cliffordemmanuel": 986, "conner": 986, "shen": 986, "dimitri": [986, 987, 988], "papadopoulo": [986, 987, 988], "orfano": [986, 987, 988], "dmallia17": 986, "ds_ana": 986, "jardim": 986, "edwinwenink": 986, "eleni": 986, "markou": 986, "ericellwang": [986, 987], "ezri": 986, "mudd": 986, "fato": 986, "morina": 986, "hafner": 986, "flyingdutchman23": 986, "uwha": [986, 987], "bereng": 986, "frederick": 986, "frellwan": 986, "vicent": [986, 987, 988], "geroldcsend": 986, "glen": 986, "gl\u00f2ria": [986, 988], "mu\u00f1oz": [986, 988], "gregorystrubel": 986, "groceryheist": 986, "guiweb": 986, "haidar": [986, 987], "almubarak": [986, 987], "moritz": [986, 988], "g\u00fcnther": 986, "mirza": 986, "harutaka": 986, "kawamura": 986, "hassan": 986, "alsawadi": 986, "geovan": [986, 987], "gome": [986, 987], "lima": [986, 987], "ilic": 986, "ikko": 986, "ashimin": 986, "isaack": 986, "mungui": 986, "ishaan": 986, "bhat": [986, 988], "ishan": [986, 987], "iwhalv": 986, "preiss": 986, "budarz": 986, "jannik": 986, "jennif": 986, "jianzhu": 986, "guo": 986, "jnboehm": 986, "johanwork": 986, "paton": 986, "schneider": 986, "n\u00e1pole": 986, "julio": 986, "julyrashchenko": 986, "jvm": 986, "kadatatlu": 986, "kishor": 986, "karen": 986, "palacio": 986, "kmatt10": 986, "kobaski": 986, "kot271828": 986, "kunj": 986, "kurumeyuta": 986, "kxytim": 986, "lacrosse91": 986, "laveen": 986, "bagai": 986, "leonardo": 986, "rocco": [986, 987, 988], "uieda": 986, "leopoldo": 986, "corona": 986, "lsturtew": 986, "lucca": 986, "quadro": 986, "ly648499246": 986, "mabu": 986, "manaileng": 986, "mariangela": 986, "marielaraj": 986, "hirzel": 986, "mateo": 986, "nore\u00f1a": 986, "mathi": 986, "batoul": 986, "calcot": 986, "prieur": 986, "\u00f6zer": 986, "miao": 986, "cai": 986, "karbownik": 986, "michalkrawczyk": [986, 987], "mitzi": [986, 987], "mlondschien": 986, "haseeb": [986, 987], "khoual": 986, "jarir": 986, "kanji": 986, "nadim": 986, "kawwa": 986, "nanshan": 986, "naozin555": 986, "fultz": 986, "nic": 986, "annau": 986, "stefani": [986, 988], "nigel": 986, "bosch": 986, "nodar": 986, "okroshiashvili": 986, "ogbonna": 986, "chibuik": 986, "ogordon100": 986, "phongpanangam": 986, "duqu": 986, "ibieta": 986, "jimenez": [986, 987], "lacouth": 986, "olszewski": 986, "dye": 986, "pierreattard": [986, 987], "yve": 986, "borgn": 986, "pranayanchuri": 986, "princ": 986, "canuma": 986, "putschblo": 986, "ranjanikrishnan": 986, "rene": 986, "corneil": 986, "ricardojnf": 986, "richardscottoz": 986, "sandi": 986, "khosasi": 986, "benhur": 986, "flore": 986, "shinehid": 986, "shinnar": 986, "tootoonian": 986, "solosil": 986, "kolawol": 986, "stagg": 986, "swpeas": 986, "tfifi": 986, "caswel": 986, "timotheemathieu": 986, "wolodzko": 986, "tliu68": 986, "uhmann": 986, "tom1092": 986, "tom\u00e1": [986, 987], "moreyra": 986, "tommaso": 986, "noto": 986, "tsuga": 986, "vang": 986, "gkiasta": 986, "vil\u00e9m": 986, "zouhar": 986, "vlasovet": 986, "waijean": 986, "whidou": 986, "xiaoyuchai": 986, "yasmeen": 986, "alsaedi": 986, "yoch": 986, "yusukenagasaka": 986, "yzhenman": 986, "zeyusun": 986, "zhaoweiwang": 986, "msvcp140": 987, "dll": 987, "24631": 987, "24446": 987, "10805": 987, "mathia": 987, "23471": 987, "24015": 987, "23990": 987, "23833": 987, "24017": 987, "sorski": [987, 988], "23395": 987, "23636": 987, "22063": 987, "22059": 987, "kurz": [987, 988], "23608": 987, "23548": 987, "24087": 987, "23273": 987, "23194": 987, "23198": 987, "lise": 987, "kleiber": 987, "23358": 987, "23264": 987, "feature_names_in": 987, "23299": 987, "23214": 987, "collot": [987, 988], "baak": 987, "23370": 987, "23410": 987, "compute_sample_weight": 987, "23115": 987, "22868": 987, "multiindex": 987, "22410": 987, "23271": 987, "21987": 987, "22064": 987, "22065": 987, "22288": 987, "22320": 987, "21219": 987, "21542": 987, "23098": 987, "22318": 987, "23036": 987, "binary_crossentropi": 987, "23040": 987, "23046": 987, "22856": 987, "21032": 987, "18170": 987, "21038": 987, "14975": 987, "22526": 987, "23095": 987, "silk": 987, "20031": 987, "krawczyk": 987, "21148": 987, "22255": 987, "21881": 987, "vassard": 987, "22217": 987, "21735": 987, "22154": 987, "22537": 987, "iofal": 987, "arisa": [987, 988], "22775": 987, "22913": 987, "randomgeek78": 987, "22493": 987, "19680": 987, "thibaut": 987, "22119": 987, "22016": 987, "22015": 987, "19747": 987, "attalla": 987, "22498": 987, "21482": 987, "pujalt": 987, "22412": 987, "16605": 987, "21901": 987, "rileran": 987, "23113": 987, "ilion": 987, "beyst": 987, "21425": 987, "stefanini": 987, "16948": 987, "patricio": 987, "cerda": 987, "22002": 987, "21109": 987, "inner_stats_": 987, "iter_offset_": 987, "18975": 987, "22111": 987, "22181": 987, "21334": 987, "21705": 987, "stanlei": [987, 988], "21432": 987, "22806": 987, "jihan": 987, "benni": 987, "21713": 987, "haya": 987, "21567": 987, "maggi": 987, "chege": 987, "22300": 987, "15948": 987, "sysuresh": 987, "22553": 987, "19490": 987, "ferrin": 987, "22120": 987, "15984": 987, "okon": 987, "22696": 987, "22486": 987, "21800": 987, "20567": 987, "22159": 987, "20811": 987, "21814": 987, "16748": 987, "siqi": 987, "22215": 987, "23047": 987, "22695": 987, "22697": 987, "21762": 987, "22106": 987, "gijsber": 987, "21632": 987, "genesi": 987, "valencia": 987, "22566": 987, "22908": 987, "23097": 987, "23079": 987, "20803": 987, "23023": 987, "21573": 987, "21832": 987, "20145": 987, "22356": 987, "18482": 987, "gameiro": 987, "kharsa": 987, "22370": 987, "17819": 987, "22235": 987, "21837": 987, "wagner": 987, "22199": 987, "aidar": 987, "shakerimoff": 987, "tenavi": 987, "nakamura": 987, "22223": 987, "marcom": 987, "21617": 987, "ritter": [987, 988], "21114": 987, "21078": 987, "21448": 987, "16061": 987, "19438": 987, "18310": 987, "elfner": 987, "22249": 987, "22137": 987, "22694": 987, "22808": 987, "22950": 987, "21086": 987, "22206": 987, "21808": 987, "22548": 987, "22062": 987, "trujillo": [987, 988], "22148": 987, "22240": 987, "9087": 987, "22525": 987, "19689": 987, "21606": 987, "21341": 987, "preservs": 987, "21767": 987, "21724": 987, "yar": 987, "khine": 987, "phyo": 987, "21998": 987, "22891": 987, "22899": 987, "23256": 987, "19794": 987, "21534": 987, "22254": 987, "21805": 987, "jeann": 987, "dionisi": 987, "22685": 987, "n_neighbour": 987, "18832": 987, "23033": 987, "21565": 987, "17266": 987, "interpet": 987, "22118": 987, "ohad": 987, "22284": 987, "19158": 987, "nicki": 987, "skaft": 987, "20753": 987, "22108": 987, "22635": 987, "19085": 987, "22866": 987, "21576": 987, "emil": 987, "dugnat": 987, "21873": 987, "21177": 987, "20408": 987, "ceballo": 987, "22058": 987, "23034": 987, "22203": 987, "21026": 987, "21880": 987, "mrinal": 987, "tyagi": 987, "22982": 987, "22508": 987, "comb": 987, "22604": 987, "22212": 987, "21430": 987, "desislava": 987, "vasileva": 987, "22687": 987, "22150": 987, "22248": 987, "20860": 987, "shubhraneel": 987, "21888": 987, "21954": 987, "22953": 987, "16018": 987, "21445": 987, "21988": 987, "get_output_feature_nam": 987, "21569": 987, "21079": 987, "20653": 987, "21434": 987, "19916": 987, "22735": 987, "compute_inverse_transform": 987, "21701": 987, "22114": 987, "21330": 987, "21408": 987, "22149": 987, "21436": 987, "22191": 987, "22476": 987, "21278": 987, "21316": 987, "clickabl": 987, "21298": 987, "22237": 987, "check_scalar": 987, "22218": 987, "validationerror": 987, "check_requires_y_non": 987, "22578": 987, "arcidiacono": [987, 988], "22595": 987, "21310": 987, "22027": 987, "lanterni": 987, "23077": 987, "22188": 987, "22830": 987, "2357juan": [987, 988], "adamgonzo": 987, "adijohar": 987, "kumawat": 987, "raghuwanshi": 987, "duron": 987, "ahmadjubair33": 987, "aj": 987, "druck": 987, "peixinho": 987, "arroyo": 987, "alexanmv": 987, "almeidayoel": 987, "amar": [987, 988, 989], "amrcod": 987, "griva": [987, 988], "andrii": 987, "herrou": 987, "ducout": 987, "arth": 987, "arthurmello": 987, "arturoamor": 987, "atharva": 987, "patil": 987, "aufarkari": 987, "avm19": [987, 988], "ayan": 987, "bardiya": [987, 988], "behrouz": 987, "ben3940": 987, "bijil": 987, "subhash": 987, "bmreinig": 987, "brenden": 987, "kadota": 987, "cdrig": 987, "chalmer": 987, "chitteti": 987, "srinath": [987, 988], "chloe": 987, "agath": 987, "azencott": 987, "christopherlim98": 987, "weidemann": 987, "combsccod": 987, "daniela": [987, 988], "darren": [987, 988], "eargl": 987, "gilbertson": [987, 988], "dea": [987, 988, 989], "mar\u00eda": [987, 988, 989], "denni": 987, "osei": 987, "dessyvv": 987, "dev514": 987, "diwakar": 987, "ries": 987, "drskd": 987, "emiko": 987, "sano": 987, "emmanouil": 987, "gionanidi": 987, "ermolaevpa": [987, 988], "estefania": 987, "barreto": 987, "ojeda": 987, "eyast": 987, "fatima": 987, "gasmi": 987, "luna": 987, "glushchenkov": 987, "fkaren27": 987, "fpgawesom": 987, "ftorres16": [987, 988], "gabor": 987, "berei": 987, "kertesz": 987, "gauthier": 987, "giancarlo": 987, "glennfrutiz": 987, "guillermo": 987, "fern\u00e1ndez": 987, "hansin": [987, 988], "henrymooresc": [987, 988], "hideaki": 987, "imamura": 987, "hind": 987, "hmasdev": 987, "hvassard": 987, "aki": [987, 988], "iasoon": 987, "ingela": 987, "cowton": 987, "jalexand3r": 987, "jauhar": 987, "jaya": 987, "kommireddi": 987, "je": 987, "jelfner": 987, "jenni": 987, "jirka": 987, "borovec": 987, "cipri\u00e1n": 987, "loayza": 987, "chazalon": 987, "mess": 987, "jovan": [987, 988], "stojanov": [987, 988], "jschuerz": 987, "katotten": 987, "ken4git": 987, "doucet": 987, "kimayoung": 987, "koushik": 987, "kranthi": 987, "sedamaki": 987, "krumetoft": 987, "lesne": 987, "casino": [987, 988], "logan": [987, 988], "lucieclair": 987, "luiz": 987, "magali": 987, "mandjev": 987, "wurp": [987, 988], "boerner": 987, "wimld": 987, "martel": 987, "corentin": 987, "mat\u00eda": 987, "matjansen": 987, "francia": 987, "megabyt": 987, "mehrdad": 987, "moradizadeh": 987, "melemo2": 987, "micky774": [987, 988], "milana2": 987, "millawel": 987, "miwojc": 987, "mizuki": 987, "mlant": 987, "mohit": 987, "moonkyung94": 987, "mpoemsl": 987, "mrinaltyagi": 987, "leu": 987, "msabati": 987, "nadirhan": 987, "\u015fahin": 987, "naipawat": [987, 988], "poolsawat": [987, 988], "nartayxd": 987, "nastegiano": 987, "nathansquan": 987, "detlefsen": 987, "niket": 987, "nikhil": 987, "suresh": 987, "kondratyev": 987, "husak": 987, "partev": [987, 988], "pelennor": 987, "piet": [987, 988], "br\u00f6mmel": [987, 988], "pinki": 987, "poloso": 987, "pramod": 987, "anantharam": 987, "puhuk": [987, 988], "purna": 987, "mansingh": 987, "quadv": 987, "rahil": [987, 988, 989], "boy": 987, "raz": 987, "hoshia": 987, "rishabh": 987, "barnowski": [987, 988], "rsnegrin": 987, "yadav": 987, "sakinaouisrani": 987, "sanjai": 987, "marreddi": 987, "seel": 987, "sele": [987, 988], "seyedsaman": 987, "emami": 987, "shandeng123": 987, "sharmadharmp": 987, "shaymernaturalint": 987, "shuangchi": [987, 988], "siavrez": 987, "slishak": 987, "spikebh": 987, "sply88": 987, "kailasa": [987, 988], "sultan": 987, "orazbayev": 987, "sumit": 987, "saha": 987, "sven": [987, 988], "eschlbeck": 987, "stehl": [987, 988], "swapnil": 987, "teunp": 987, "ferr\u00e9": 987, "hjortkj\u00e6r": 987, "thiruvenkadam": 987, "toastedyeast": [987, 988], "mctiernan": [987, 988], "udit": 987, "ugo": 987, "marchand": 987, "vera": [987, 988], "komey": [987, 988], "victoireloui": 987, "vishwakarma": 987, "vikrant": 987, "khedkar": 987, "chernyi": 987, "weijiadu": 987, "yuan": [987, 988], "yiyangq": 987, "yosshi999": 987, "yuki": 987, "koyama": 987, "zeel": 987, "zempleni": 987, "zhenfish": 987, "\u8d75\u4e30": 987, "25747": 988, "base_estimator__": 988, "25477": 988, "25563": 988, "25570": 988, "25664": 988, "25774": 988, "25500": 988, "25589": 988, "25704": 988, "min_sample_split": 988, "25744": 988, "25619": 988, "25638": 988, "25354": 988, "25174": 988, "25089": 988, "25129": 988, "auxillari": 988, "25363": 988, "25188": 988, "25295": 988, "spec": 988, "25312": 988, "backslash": 988, "25511": 988, "25172": 988, "25341": 988, "25094": 988, "25250": 988, "25370": 988, "23101": 988, "24873": 988, "25694": 988, "25274": 988, "25296": 988, "25147": 988, "23619": 988, "24354": 988, "safiuddin": 988, "khaja": 988, "gsiisg": 988, "23935": 988, "22527": 988, "_sgd_fast": 988, "_plain_sgd": 988, "oversc": 988, "23798": 988, "24543": 988, "24465": 988, "23734": 988, "24699": 988, "23865": 988, "simd": 988, "primit": 988, "23446": 988, "23197": 988, "23604": 988, "23585": 988, "24556": 988, "maladi\u00e8r": [988, 989], "24617": 988, "sim4n6": 988, "24688": 988, "22054": 988, "roic": 988, "24264": 988, "maladier": 988, "14736": 988, "hunt": 988, "zhan": 988, "20802": 988, "pokorni": 988, "22965": 988, "22968": 988, "23038": 988, "propog": 988, "23210": 988, "24258": 988, "23470": 988, "21938": 988, "23127": 988, "19075": 988, "ramo": 988, "carre\u00f1o": 988, "24951": 988, "22268": 988, "mohamedbsh": 988, "23905": 988, "11860": 988, "ablin": 988, "24528": 988, "23726": 988, "24421": 988, "kshitij": [988, 989], "22554": 988, "24218": 988, "molin": 988, "21020": 988, "24856": 988, "22014": 988, "23252": 988, "24538": 988, "24889": 988, "24146": 988, "peretti": 988, "nestor": 988, "navarro": 988, "nati": 988, "tomatti": 988, "24855": 988, "24849": 988, "20415": 988, "24283": 988, "24894": 988, "23819": 988, "edoardo": 988, "abati": 988, "24747": 988, "24245": 988, "24405": 988, "salman": [988, 989], "16695": 988, "vitor": 988, "rosa": 988, "18298": 988, "25077": 988, "24317": 988, "24350": 988, "24755": 988, "levitski": [988, 989], "24637": 988, "24767": 988, "23275": 988, "maxwelllzh": 988, "24433": 988, "yogendrasingh": 988, "23637": 988, "23877": 988, "10168": 988, "\u0142ukasz": 988, "borchmann": 988, "12285": 988, "miltenberg": 988, "13042": 988, "parizi": 988, "18094": 988, "22562": 988, "24714": 988, "foor": 988, "23834": 988, "24051": 988, "22518": 988, "18020": 988, "24338": 988, "23442": 988, "atukorala": 988, "22710": 988, "conroi": 988, "trinh": 988, "23461": 988, "24365": 988, "24630": 988, "rushil": 988, "24084": 988, "iinfo": 988, "24141": 988, "24539": 988, "23977": 988, "23683": 988, "andrei": 988, "melnik": 988, "16747": 988, "18805": 988, "hongshaoyang": 988, "22269": 988, "23139": 988, "24645": 988, "10468": 988, "ruben": 988, "22993": 988, "24750": 988, "rudresh": 988, "veerkhar": 988, "23874": 988, "24075": 988, "22665": 988, "24683": 988, "24058": 988, "perdok": 988, "20331": 988, "23993": 988, "22629": 988, "24412": 988, "22898": 988, "23480": 988, "21469": 988, "lapack_svd_driv": 988, "20617": 988, "ouptut": 988, "25067": 988, "14862": 988, "24512": 988, "24667": 988, "25080": 988, "24523": 988, "mia": 988, "bajic": 988, "3llobo": 988, "kania": 988, "anulekh": 988, "admir": 988, "demiraj": 988, "adoublet": 988, "ahmedbgh": 988, "aiko": 988, "akshita": 988, "prasanth": 988, "ala": 988, "miola": 988, "lebel": 988, "buzenet": [988, 989], "kassa": 988, "bera": 988, "maennel": 988, "aniket": 988, "shirsat": 988, "anthony22": 988, "apostolo": 988, "tsetogl": 988, "aravindh": 988, "artur": 988, "hermano": 988, "ashah002": 988, "ashwin": [988, 989], "azaria": 988, "gebremichael": 988, "b0rxington": 988, "badr": 988, "moufad": 988, "bart\u0142omiej": 988, "go\u0144da": 988, "bdegraaff": 988, "berkecanrizai": 988, "bernd": 988, "fritzk": 988, "bhoomika": 988, "biswaroop": 988, "cannon": 988, "bsh": 988, "ceh": 988, "chalulu": 988, "changyao": 988, "zablit": 988, "veenhui": 988, "christianwaldmann": 988, "christin": 988, "verrier": 988, "dangonite57": 988, "danielgaerb": 988, "davidblnc": 988, "dayn": 988, "khant": 988, "dhanshre": 988, "diadochokinet": 988, "diederikwp": 988, "litsidi": 988, "drewhogg": 988, "oc": 988, "dwight": 988, "lindquist": 988, "eden": 988, "brekk": 988, "edern": 988, "eleanor": 988, "eliaschiavon": 988, "emir": 988, "fabrizio": 988, "damicelli": 988, "fcharra": 988, "siola": [988, 989], "tuveri": 988, "franck": 988, "charra": 988, "geevarghes": 988, "georgiamaydai": 988, "gianr": 988, "lazz": 988, "guitar": 988, "gunesbayir": 988, "harshit5674": 988, "hasan": 988, "yaman": 988, "vrigazov": 988, "htsedebenham": 988, "humahn": 988, "ido": 988, "iglesi": 988, "iliya": 988, "zhechev": 988, "iren": 988, "ivanllt": 988, "sedykh": 988, "mcivor": 988, "janfidor": 988, "jiten": 988, "sidhpura": 988, "jkarolczak": 988, "jo\u00e3o": 988, "johnathanpi": 988, "koumenti": 988, "panga": [988, 989], "johnthagen": 988, "fleme": 988, "choo": 988, "yun": 988, "keat": 988, "juanfe88": 988, "juliaschoepp": 988, "jygerardi": 988, "ka00ri": 988, "kanishk": 988, "sachdev": 988, "kanissh": 988, "kendal": 988, "kento": 988, "nozawa": 988, "eliasi": 988, "kluge": 988, "lieret": 988, "kirandevraj": 988, "kraig": 988, "vamsi": 988, "kapadni": 988, "lingyi1110": 988, "mantovani": 988, "maascha": 988, "madinak": 988, "maksym": 988, "mansi": 988, "kostelac": [988, 989], "marvin": [988, 989], "krawutschk": [988, 989], "masanori": 988, "kanazu": 988, "haberland": 988, "mauroantonioserrano": 988, "maxi": 988, "marufo": 988, "maximesaur": 988, "smolskii": 988, "bou": 988, "mehgarg": 988, "mehmetcanakbai": 988, "baji\u0107": 988, "flak": 988, "hornstein": 988, "ruiter": 988, "paradi": 988, "iljin": 988, "misa": 988, "ogura": 988, "wilksch": 988, "mrastgoo": 988, "naois": 988, "holohan": 988, "nass": 988, "jacobi": 988, "nawazish": 988, "alam": 988, "nguy\u1ec5n": 988, "v\u0103n": 988, "di\u1ec5n": 988, "fanelli": 988, "nihal": 988, "thukarama": 988, "jare": 988, "nima10khodaveisi": 988, "nima": 988, "sarajpoor": 988, "nitinramvelraj": 988, "nnlnr": 988, "npach": 988, "nwanna": 988, "nymark": 988, "kho": 988, "holman": 988, "oll": 988, "lukowski": 988, "hassoun": 988, "tamer": 988, "ouss1508": 988, "oyindamola": 988, "olatunji": 988, "pab": 988, "pandata": 988, "soar": 988, "petar": 988, "mlinari\u0107": 988, "pooja": 988, "subramaniam": 988, "priyam": 988, "kakati": 988, "freeland": 988, "keerti": 988, "rafal": 988, "wojdyla": 988, "raghuv": 988, "makhija": 988, "rehan": 988, "guha": 988, "klima": 988, "crockett": 988, "homm": 988, "roman4oo": 988, "rowan": 988, "mankoo": 988, "sabri": 988, "monaf": 988, "safikh": 988, "salahuddin": 988, "yojana": 988, "menes": 988, "ephrem": 988, "sangam": 988, "sangamswadik": 988, "sanjai_3": 988, "sarahremu": 988, "sashka": 988, "savkomax": 988, "gustafson": 988, "sec65": 988, "seljak": 988, "shadi": 988, "gewili": 988, "shellyfung": 988, "shinsuk": 988, "mori": 988, "shiva": 988, "shoaib": 988, "khan": 988, "shogo": 988, "hida": 988, "shrankhla": 988, "sonniv": 988, "sortofamudkip": 988, "stanislav": 988, "modrak": 988, "stellalin7": 988, "vaerenbergh": 988, "schmerler": 988, "tabea": 988, "kossen": 988, "thedevpanda": 988, "syd": 988, "sre": 988, "weezel": [988, 989], "bonald": 988, "germer": 988, "ion": 988, "timofei": 988, "kornev": 988, "pitter": 988, "tomiock": 988, "mathew": 988, "tspeng": 988, "egashira": 988, "rey": 988, "puerta": 988, "vishal": 988, "vyom": 988, "pathak": 988, "wattai": 988, "wchathura": 988, "wen": 988, "x110": 988, "xuniu": 988, "yanhong": 988, "ef": 988, "yusuf": 988, "raji": 988, "adil": 988, "khwaja": 988, "zeeshan": 988, "lone": 988, "25196": 989, "24871": 989, "25438": 989, "yotam": 989, "avidar": 989, "constantini": 989, "25752": 989, "25294": 989, "25308": 989, "25291": 989, "25367": 989, "25402": 989, "25044": 989, "25102": 989, "25973": 989, "24568": 989, "25805": 989, "25251": 989, "25784": 989, "25490": 989, "22409": 989, "25177": 989, "24882": 989, "25186": 989, "breve": 989, "25506": 989, "25601": 989, "fidor": 989, "25931": 989, "sckit": 989, "verion": 989, "25297": 989, "24230": 989, "25232": 989, "21809": 989, "25732": 989, "25587": 989, "25713": 989, "25531": 989, "25432": 989, "25672": 989, "lene": 989, "preuss": 989, "18723": 989, "sahil": 989, "24677": 989, "24668": 989, "dberenbaum": 989, "25299": 989, "omarmanzoor": 989, "25659": 989, "24140": 989, "25417": 989, "24076": 989, "25443": 989, "feature_union": 989, "25093": 989, "25220": 989, "25334": 989, "22506": 989, "24935": 989, "seladu": 989, "25257": 989, "25677": 989, "25190": 989, "25387": 989, "check_transformers_unfitted_stateless": 989, "25733": 989, "25813": 989, "suport": 989, "25814": 989, "19664": 989}, "objects": {"sklearn": [[362, 0, 0, "-", "base"], [362, 0, 0, "-", "calibration"], [362, 0, 0, "-", "cluster"], [362, 0, 0, "-", "compose"], [419, 4, 1, "", "config_context"], [362, 0, 0, "-", "covariance"], [362, 0, 0, "-", "cross_decomposition"], [362, 0, 0, "-", "datasets"], [362, 0, 0, "-", "decomposition"], [362, 0, 0, "-", "discriminant_analysis"], [362, 0, 0, "-", "dummy"], [362, 0, 0, "-", "ensemble"], [362, 0, 0, "-", "exceptions"], [362, 0, 0, "-", "experimental"], [362, 0, 0, "-", "feature_extraction"], [362, 0, 0, "-", "feature_selection"], [362, 0, 0, "-", "gaussian_process"], [577, 4, 1, "", "get_config"], [362, 0, 0, "-", "impute"], [362, 0, 0, "-", "inspection"], [362, 0, 0, "-", "isotonic"], [362, 0, 0, "-", "kernel_approximation"], [362, 0, 0, "-", "kernel_ridge"], [362, 0, 0, "-", "linear_model"], [362, 0, 0, "-", "manifold"], [362, 0, 0, "-", "metrics"], [362, 0, 0, "-", "mixture"], [362, 0, 0, "-", "model_selection"], [362, 0, 0, "-", "multiclass"], [362, 0, 0, "-", "multioutput"], [362, 0, 0, "-", "naive_bayes"], [362, 0, 0, "-", "neighbors"], [362, 0, 0, "-", "neural_network"], [362, 0, 0, "-", "pipeline"], [362, 0, 0, "-", "preprocessing"], [362, 0, 0, "-", "random_projection"], [362, 0, 0, "-", "semi_supervised"], [847, 4, 1, "", "set_config"], [848, 4, 1, "", "show_versions"], [362, 0, 0, "-", "svm"], [362, 0, 0, "-", "tree"], [362, 0, 0, "-", "utils"]], "sklearn.base": [[377, 1, 1, "", "BaseEstimator"], [378, 1, 1, "", "BiclusterMixin"], [379, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [380, 1, 1, "", "ClassifierMixin"], [381, 1, 1, "", "ClusterMixin"], [382, 1, 1, "", "DensityMixin"], [383, 1, 1, "", "OneToOneFeatureMixin"], [384, 1, 1, "", "RegressorMixin"], [385, 1, 1, "", "TransformerMixin"], [386, 4, 1, "", "clone"], [387, 4, 1, "", "is_classifier"], [388, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[377, 2, 1, "", "get_params"], [377, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[378, 3, 1, "", "biclusters_"], [378, 2, 1, "", "get_indices"], [378, 2, 1, "", "get_shape"], [378, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[379, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[380, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[381, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[382, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[383, 2, 1, "", "get_feature_names_out"]], "sklearn.base.RegressorMixin": [[384, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[385, 2, 1, "", "fit_transform"], [385, 2, 1, "", "set_output"]], "sklearn.calibration": [[389, 1, 1, "", "CalibratedClassifierCV"], [390, 1, 1, "", "CalibrationDisplay"], [391, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[389, 2, 1, "", "fit"], [389, 2, 1, "", "get_params"], [389, 2, 1, "", "predict"], [389, 2, 1, "", "predict_proba"], [389, 2, 1, "", "score"], [389, 2, 1, "", "set_params"]], "sklearn.calibration.CalibrationDisplay": [[390, 2, 1, "", "from_estimator"], [390, 2, 1, "", "from_predictions"], [390, 2, 1, "", "plot"]], "sklearn.cluster": [[392, 1, 1, "", "AffinityPropagation"], [393, 1, 1, "", "AgglomerativeClustering"], [394, 1, 1, "", "Birch"], [395, 1, 1, "", "BisectingKMeans"], [396, 1, 1, "", "DBSCAN"], [397, 1, 1, "", "FeatureAgglomeration"], [398, 1, 1, "", "KMeans"], [399, 1, 1, "", "MeanShift"], [400, 1, 1, "", "MiniBatchKMeans"], [401, 1, 1, "", "OPTICS"], [402, 1, 1, "", "SpectralBiclustering"], [403, 1, 1, "", "SpectralClustering"], [404, 1, 1, "", "SpectralCoclustering"], [405, 4, 1, "", "affinity_propagation"], [406, 4, 1, "", "cluster_optics_dbscan"], [407, 4, 1, "", "cluster_optics_xi"], [408, 4, 1, "", "compute_optics_graph"], [374, 4, 1, "", "dbscan"], [409, 4, 1, "", "estimate_bandwidth"], [410, 4, 1, "", "k_means"], [411, 4, 1, "", "kmeans_plusplus"], [412, 4, 1, "", "mean_shift"], [413, 4, 1, "", "spectral_clustering"], [414, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[392, 2, 1, "", "fit"], [392, 2, 1, "", "fit_predict"], [392, 2, 1, "", "get_params"], [392, 2, 1, "", "predict"], [392, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[393, 2, 1, "", "fit"], [393, 2, 1, "", "fit_predict"], [393, 2, 1, "", "get_params"], [393, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[394, 2, 1, "", "fit"], [394, 2, 1, "", "fit_predict"], [394, 2, 1, "", "fit_transform"], [394, 2, 1, "", "get_feature_names_out"], [394, 2, 1, "", "get_params"], [394, 2, 1, "", "partial_fit"], [394, 2, 1, "", "predict"], [394, 2, 1, "", "set_output"], [394, 2, 1, "", "set_params"], [394, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[395, 2, 1, "", "fit"], [395, 2, 1, "", "fit_predict"], [395, 2, 1, "", "fit_transform"], [395, 2, 1, "", "get_feature_names_out"], [395, 2, 1, "", "get_params"], [395, 2, 1, "", "predict"], [395, 2, 1, "", "score"], [395, 2, 1, "", "set_output"], [395, 2, 1, "", "set_params"], [395, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[396, 2, 1, "", "fit"], [396, 2, 1, "", "fit_predict"], [396, 2, 1, "", "get_params"], [396, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[397, 2, 1, "", "fit"], [397, 3, 1, "", "fit_predict"], [397, 2, 1, "", "fit_transform"], [397, 2, 1, "", "get_feature_names_out"], [397, 2, 1, "", "get_params"], [397, 2, 1, "", "inverse_transform"], [397, 2, 1, "", "set_output"], [397, 2, 1, "", "set_params"], [397, 2, 1, "", "transform"]], "sklearn.cluster.KMeans": [[398, 2, 1, "", "fit"], [398, 2, 1, "", "fit_predict"], [398, 2, 1, "", "fit_transform"], [398, 2, 1, "", "get_feature_names_out"], [398, 2, 1, "", "get_params"], [398, 2, 1, "", "predict"], [398, 2, 1, "", "score"], [398, 2, 1, "", "set_output"], [398, 2, 1, "", "set_params"], [398, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[399, 2, 1, "", "fit"], [399, 2, 1, "", "fit_predict"], [399, 2, 1, "", "get_params"], [399, 2, 1, "", "predict"], [399, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[400, 2, 1, "", "fit"], [400, 2, 1, "", "fit_predict"], [400, 2, 1, "", "fit_transform"], [400, 2, 1, "", "get_feature_names_out"], [400, 2, 1, "", "get_params"], [400, 2, 1, "", "partial_fit"], [400, 2, 1, "", "predict"], [400, 2, 1, "", "score"], [400, 2, 1, "", "set_output"], [400, 2, 1, "", "set_params"], [400, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[401, 2, 1, "", "fit"], [401, 2, 1, "", "fit_predict"], [401, 2, 1, "", "get_params"], [401, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[402, 3, 1, "", "biclusters_"], [402, 2, 1, "", "fit"], [402, 2, 1, "", "get_indices"], [402, 2, 1, "", "get_params"], [402, 2, 1, "", "get_shape"], [402, 2, 1, "", "get_submatrix"], [402, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[403, 2, 1, "", "fit"], [403, 2, 1, "", "fit_predict"], [403, 2, 1, "", "get_params"], [403, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[404, 3, 1, "", "biclusters_"], [404, 2, 1, "", "fit"], [404, 2, 1, "", "get_indices"], [404, 2, 1, "", "get_params"], [404, 2, 1, "", "get_shape"], [404, 2, 1, "", "get_submatrix"], [404, 2, 1, "", "set_params"]], "sklearn.compose": [[415, 1, 1, "", "ColumnTransformer"], [416, 1, 1, "", "TransformedTargetRegressor"], [417, 4, 1, "", "make_column_selector"], [418, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[415, 2, 1, "", "fit"], [415, 2, 1, "", "fit_transform"], [415, 2, 1, "", "get_feature_names_out"], [415, 2, 1, "", "get_params"], [415, 3, 1, "", "named_transformers_"], [415, 2, 1, "", "set_output"], [415, 2, 1, "", "set_params"], [415, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[416, 2, 1, "", "fit"], [416, 2, 1, "", "get_params"], [416, 3, 1, "", "n_features_in_"], [416, 2, 1, "", "predict"], [416, 2, 1, "", "score"], [416, 2, 1, "", "set_params"]], "sklearn.covariance": [[420, 1, 1, "", "EllipticEnvelope"], [421, 1, 1, "", "EmpiricalCovariance"], [422, 1, 1, "", "GraphicalLasso"], [423, 1, 1, "", "GraphicalLassoCV"], [424, 1, 1, "", "LedoitWolf"], [425, 1, 1, "", "MinCovDet"], [426, 1, 1, "", "OAS"], [427, 1, 1, "", "ShrunkCovariance"], [428, 4, 1, "", "empirical_covariance"], [429, 4, 1, "", "graphical_lasso"], [430, 4, 1, "", "ledoit_wolf"], [431, 4, 1, "", "ledoit_wolf_shrinkage"], [376, 4, 1, "", "oas"], [432, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[420, 2, 1, "", "correct_covariance"], [420, 2, 1, "", "decision_function"], [420, 2, 1, "", "error_norm"], [420, 2, 1, "", "fit"], [420, 2, 1, "", "fit_predict"], [420, 2, 1, "", "get_params"], [420, 2, 1, "", "get_precision"], [420, 2, 1, "", "mahalanobis"], [420, 2, 1, "", "predict"], [420, 2, 1, "", "reweight_covariance"], [420, 2, 1, "", "score"], [420, 2, 1, "", "score_samples"], [420, 2, 1, "", "set_params"]], "sklearn.covariance.EmpiricalCovariance": [[421, 2, 1, "", "error_norm"], [421, 2, 1, "", "fit"], [421, 2, 1, "", "get_params"], [421, 2, 1, "", "get_precision"], [421, 2, 1, "", "mahalanobis"], [421, 2, 1, "", "score"], [421, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLasso": [[422, 2, 1, "", "error_norm"], [422, 2, 1, "", "fit"], [422, 2, 1, "", "get_params"], [422, 2, 1, "", "get_precision"], [422, 2, 1, "", "mahalanobis"], [422, 2, 1, "", "score"], [422, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLassoCV": [[423, 2, 1, "", "error_norm"], [423, 2, 1, "", "fit"], [423, 2, 1, "", "get_params"], [423, 2, 1, "", "get_precision"], [423, 2, 1, "", "mahalanobis"], [423, 2, 1, "", "score"], [423, 2, 1, "", "set_params"]], "sklearn.covariance.LedoitWolf": [[424, 2, 1, "", "error_norm"], [424, 2, 1, "", "fit"], [424, 2, 1, "", "get_params"], [424, 2, 1, "", "get_precision"], [424, 2, 1, "", "mahalanobis"], [424, 2, 1, "", "score"], [424, 2, 1, "", "set_params"]], "sklearn.covariance.MinCovDet": [[425, 2, 1, "", "correct_covariance"], [425, 2, 1, "", "error_norm"], [425, 2, 1, "", "fit"], [425, 2, 1, "", "get_params"], [425, 2, 1, "", "get_precision"], [425, 2, 1, "", "mahalanobis"], [425, 2, 1, "", "reweight_covariance"], [425, 2, 1, "", "score"], [425, 2, 1, "", "set_params"]], "sklearn.covariance.OAS": [[426, 2, 1, "", "error_norm"], [426, 2, 1, "", "fit"], [426, 2, 1, "", "get_params"], [426, 2, 1, "", "get_precision"], [426, 2, 1, "", "mahalanobis"], [426, 2, 1, "", "score"], [426, 2, 1, "", "set_params"]], "sklearn.covariance.ShrunkCovariance": [[427, 2, 1, "", "error_norm"], [427, 2, 1, "", "fit"], [427, 2, 1, "", "get_params"], [427, 2, 1, "", "get_precision"], [427, 2, 1, "", "mahalanobis"], [427, 2, 1, "", "score"], [427, 2, 1, "", "set_params"]], "sklearn.cross_decomposition": [[433, 1, 1, "", "CCA"], [434, 1, 1, "", "PLSCanonical"], [435, 1, 1, "", "PLSRegression"], [436, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[433, 3, 1, "", "coef_"], [433, 2, 1, "", "fit"], [433, 2, 1, "", "fit_transform"], [433, 2, 1, "", "get_feature_names_out"], [433, 2, 1, "", "get_params"], [433, 2, 1, "", "inverse_transform"], [433, 2, 1, "", "predict"], [433, 2, 1, "", "score"], [433, 2, 1, "", "set_output"], [433, 2, 1, "", "set_params"], [433, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[434, 3, 1, "", "coef_"], [434, 2, 1, "", "fit"], [434, 2, 1, "", "fit_transform"], [434, 2, 1, "", "get_feature_names_out"], [434, 2, 1, "", "get_params"], [434, 2, 1, "", "inverse_transform"], [434, 2, 1, "", "predict"], [434, 2, 1, "", "score"], [434, 2, 1, "", "set_output"], [434, 2, 1, "", "set_params"], [434, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[435, 3, 1, "", "coef_"], [435, 2, 1, "", "fit"], [435, 2, 1, "", "fit_transform"], [435, 2, 1, "", "get_feature_names_out"], [435, 2, 1, "", "get_params"], [435, 2, 1, "", "inverse_transform"], [435, 2, 1, "", "predict"], [435, 2, 1, "", "score"], [435, 2, 1, "", "set_output"], [435, 2, 1, "", "set_params"], [435, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[436, 2, 1, "", "fit"], [436, 2, 1, "", "fit_transform"], [436, 2, 1, "", "get_feature_names_out"], [436, 2, 1, "", "get_params"], [436, 2, 1, "", "set_output"], [436, 2, 1, "", "set_params"], [436, 2, 1, "", "transform"]], "sklearn.datasets": [[437, 4, 1, "", "clear_data_home"], [438, 4, 1, "", "dump_svmlight_file"], [439, 4, 1, "", "fetch_20newsgroups"], [440, 4, 1, "", "fetch_20newsgroups_vectorized"], [441, 4, 1, "", "fetch_california_housing"], [442, 4, 1, "", "fetch_covtype"], [443, 4, 1, "", "fetch_kddcup99"], [444, 4, 1, "", "fetch_lfw_pairs"], [445, 4, 1, "", "fetch_lfw_people"], [446, 4, 1, "", "fetch_olivetti_faces"], [447, 4, 1, "", "fetch_openml"], [448, 4, 1, "", "fetch_rcv1"], [449, 4, 1, "", "fetch_species_distributions"], [450, 4, 1, "", "get_data_home"], [451, 4, 1, "", "load_breast_cancer"], [452, 4, 1, "", "load_diabetes"], [453, 4, 1, "", "load_digits"], [454, 4, 1, "", "load_files"], [455, 4, 1, "", "load_iris"], [456, 4, 1, "", "load_linnerud"], [457, 4, 1, "", "load_sample_image"], [458, 4, 1, "", "load_sample_images"], [459, 4, 1, "", "load_svmlight_file"], [460, 4, 1, "", "load_svmlight_files"], [461, 4, 1, "", "load_wine"], [462, 4, 1, "", "make_biclusters"], [463, 4, 1, "", "make_blobs"], [464, 4, 1, "", "make_checkerboard"], [465, 4, 1, "", "make_circles"], [466, 4, 1, "", "make_classification"], [467, 4, 1, "", "make_friedman1"], [468, 4, 1, "", "make_friedman2"], [469, 4, 1, "", "make_friedman3"], [470, 4, 1, "", "make_gaussian_quantiles"], [471, 4, 1, "", "make_hastie_10_2"], [472, 4, 1, "", "make_low_rank_matrix"], [473, 4, 1, "", "make_moons"], [474, 4, 1, "", "make_multilabel_classification"], [475, 4, 1, "", "make_regression"], [476, 4, 1, "", "make_s_curve"], [477, 4, 1, "", "make_sparse_coded_signal"], [478, 4, 1, "", "make_sparse_spd_matrix"], [479, 4, 1, "", "make_sparse_uncorrelated"], [480, 4, 1, "", "make_spd_matrix"], [481, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[482, 1, 1, "", "DictionaryLearning"], [483, 1, 1, "", "FactorAnalysis"], [484, 1, 1, "", "FastICA"], [485, 1, 1, "", "IncrementalPCA"], [486, 1, 1, "", "KernelPCA"], [487, 1, 1, "", "LatentDirichletAllocation"], [488, 1, 1, "", "MiniBatchDictionaryLearning"], [489, 1, 1, "", "MiniBatchNMF"], [490, 1, 1, "", "MiniBatchSparsePCA"], [491, 1, 1, "", "NMF"], [492, 1, 1, "", "PCA"], [493, 1, 1, "", "SparseCoder"], [494, 1, 1, "", "SparsePCA"], [495, 1, 1, "", "TruncatedSVD"], [496, 4, 1, "", "dict_learning"], [497, 4, 1, "", "dict_learning_online"], [375, 4, 1, "", "fastica"], [498, 4, 1, "", "non_negative_factorization"], [499, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[482, 2, 1, "", "fit"], [482, 2, 1, "", "fit_transform"], [482, 2, 1, "", "get_feature_names_out"], [482, 2, 1, "", "get_params"], [482, 2, 1, "", "set_output"], [482, 2, 1, "", "set_params"], [482, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[483, 2, 1, "", "fit"], [483, 2, 1, "", "fit_transform"], [483, 2, 1, "", "get_covariance"], [483, 2, 1, "", "get_feature_names_out"], [483, 2, 1, "", "get_params"], [483, 2, 1, "", "get_precision"], [483, 2, 1, "", "score"], [483, 2, 1, "", "score_samples"], [483, 2, 1, "", "set_output"], [483, 2, 1, "", "set_params"], [483, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[484, 2, 1, "", "fit"], [484, 2, 1, "", "fit_transform"], [484, 2, 1, "", "get_feature_names_out"], [484, 2, 1, "", "get_params"], [484, 2, 1, "", "inverse_transform"], [484, 2, 1, "", "set_output"], [484, 2, 1, "", "set_params"], [484, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[485, 2, 1, "", "fit"], [485, 2, 1, "", "fit_transform"], [485, 2, 1, "", "get_covariance"], [485, 2, 1, "", "get_feature_names_out"], [485, 2, 1, "", "get_params"], [485, 2, 1, "", "get_precision"], [485, 2, 1, "", "inverse_transform"], [485, 2, 1, "", "partial_fit"], [485, 2, 1, "", "set_output"], [485, 2, 1, "", "set_params"], [485, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[486, 2, 1, "", "fit"], [486, 2, 1, "", "fit_transform"], [486, 2, 1, "", "get_feature_names_out"], [486, 2, 1, "", "get_params"], [486, 2, 1, "", "inverse_transform"], [486, 2, 1, "", "set_output"], [486, 2, 1, "", "set_params"], [486, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[487, 2, 1, "", "fit"], [487, 2, 1, "", "fit_transform"], [487, 2, 1, "", "get_feature_names_out"], [487, 2, 1, "", "get_params"], [487, 2, 1, "", "partial_fit"], [487, 2, 1, "", "perplexity"], [487, 2, 1, "", "score"], [487, 2, 1, "", "set_output"], [487, 2, 1, "", "set_params"], [487, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[488, 2, 1, "", "fit"], [488, 2, 1, "", "fit_transform"], [488, 2, 1, "", "get_feature_names_out"], [488, 2, 1, "", "get_params"], [488, 2, 1, "", "partial_fit"], [488, 2, 1, "", "set_output"], [488, 2, 1, "", "set_params"], [488, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[489, 2, 1, "", "fit"], [489, 2, 1, "", "fit_transform"], [489, 2, 1, "", "get_feature_names_out"], [489, 2, 1, "", "get_params"], [489, 2, 1, "", "inverse_transform"], [489, 2, 1, "", "partial_fit"], [489, 2, 1, "", "set_output"], [489, 2, 1, "", "set_params"], [489, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[490, 2, 1, "", "fit"], [490, 2, 1, "", "fit_transform"], [490, 2, 1, "", "get_feature_names_out"], [490, 2, 1, "", "get_params"], [490, 2, 1, "", "inverse_transform"], [490, 2, 1, "", "set_output"], [490, 2, 1, "", "set_params"], [490, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[491, 2, 1, "", "fit"], [491, 2, 1, "", "fit_transform"], [491, 2, 1, "", "get_feature_names_out"], [491, 2, 1, "", "get_params"], [491, 2, 1, "", "inverse_transform"], [491, 2, 1, "", "set_output"], [491, 2, 1, "", "set_params"], [491, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[492, 2, 1, "", "fit"], [492, 2, 1, "", "fit_transform"], [492, 2, 1, "", "get_covariance"], [492, 2, 1, "", "get_feature_names_out"], [492, 2, 1, "", "get_params"], [492, 2, 1, "", "get_precision"], [492, 2, 1, "", "inverse_transform"], [492, 2, 1, "", "score"], [492, 2, 1, "", "score_samples"], [492, 2, 1, "", "set_output"], [492, 2, 1, "", "set_params"], [492, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[493, 2, 1, "", "fit"], [493, 2, 1, "", "fit_transform"], [493, 2, 1, "", "get_feature_names_out"], [493, 2, 1, "", "get_params"], [493, 3, 1, "", "n_components_"], [493, 3, 1, "", "n_features_in_"], [493, 2, 1, "", "set_output"], [493, 2, 1, "", "set_params"], [493, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[494, 2, 1, "", "fit"], [494, 2, 1, "", "fit_transform"], [494, 2, 1, "", "get_feature_names_out"], [494, 2, 1, "", "get_params"], [494, 2, 1, "", "inverse_transform"], [494, 2, 1, "", "set_output"], [494, 2, 1, "", "set_params"], [494, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[495, 2, 1, "", "fit"], [495, 2, 1, "", "fit_transform"], [495, 2, 1, "", "get_feature_names_out"], [495, 2, 1, "", "get_params"], [495, 2, 1, "", "inverse_transform"], [495, 2, 1, "", "set_output"], [495, 2, 1, "", "set_params"], [495, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[500, 1, 1, "", "LinearDiscriminantAnalysis"], [501, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[500, 2, 1, "", "decision_function"], [500, 2, 1, "", "fit"], [500, 2, 1, "", "fit_transform"], [500, 2, 1, "", "get_feature_names_out"], [500, 2, 1, "", "get_params"], [500, 2, 1, "", "predict"], [500, 2, 1, "", "predict_log_proba"], [500, 2, 1, "", "predict_proba"], [500, 2, 1, "", "score"], [500, 2, 1, "", "set_output"], [500, 2, 1, "", "set_params"], [500, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[501, 2, 1, "", "decision_function"], [501, 2, 1, "", "fit"], [501, 2, 1, "", "get_params"], [501, 2, 1, "", "predict"], [501, 2, 1, "", "predict_log_proba"], [501, 2, 1, "", "predict_proba"], [501, 2, 1, "", "score"], [501, 2, 1, "", "set_params"]], "sklearn.dummy": [[502, 1, 1, "", "DummyClassifier"], [503, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[502, 2, 1, "", "fit"], [502, 2, 1, "", "get_params"], [502, 2, 1, "", "predict"], [502, 2, 1, "", "predict_log_proba"], [502, 2, 1, "", "predict_proba"], [502, 2, 1, "", "score"], [502, 2, 1, "", "set_params"]], "sklearn.dummy.DummyRegressor": [[503, 2, 1, "", "fit"], [503, 2, 1, "", "get_params"], [503, 2, 1, "", "predict"], [503, 2, 1, "", "score"], [503, 2, 1, "", "set_params"]], "sklearn.ensemble": [[504, 1, 1, "", "AdaBoostClassifier"], [505, 1, 1, "", "AdaBoostRegressor"], [506, 1, 1, "", "BaggingClassifier"], [507, 1, 1, "", "BaggingRegressor"], [508, 1, 1, "", "ExtraTreesClassifier"], [509, 1, 1, "", "ExtraTreesRegressor"], [510, 1, 1, "", "GradientBoostingClassifier"], [511, 1, 1, "", "GradientBoostingRegressor"], [512, 1, 1, "", "HistGradientBoostingClassifier"], [513, 1, 1, "", "HistGradientBoostingRegressor"], [514, 1, 1, "", "IsolationForest"], [515, 1, 1, "", "RandomForestClassifier"], [516, 1, 1, "", "RandomForestRegressor"], [517, 1, 1, "", "RandomTreesEmbedding"], [518, 1, 1, "", "StackingClassifier"], [519, 1, 1, "", "StackingRegressor"], [520, 1, 1, "", "VotingClassifier"], [521, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[504, 3, 1, "", "base_estimator_"], [504, 2, 1, "", "decision_function"], [504, 3, 1, "", "feature_importances_"], [504, 2, 1, "", "fit"], [504, 2, 1, "", "get_params"], [504, 2, 1, "", "predict"], [504, 2, 1, "", "predict_log_proba"], [504, 2, 1, "", "predict_proba"], [504, 2, 1, "", "score"], [504, 2, 1, "", "set_params"], [504, 2, 1, "", "staged_decision_function"], [504, 2, 1, "", "staged_predict"], [504, 2, 1, "", "staged_predict_proba"], [504, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[505, 3, 1, "", "base_estimator_"], [505, 3, 1, "", "feature_importances_"], [505, 2, 1, "", "fit"], [505, 2, 1, "", "get_params"], [505, 2, 1, "", "predict"], [505, 2, 1, "", "score"], [505, 2, 1, "", "set_params"], [505, 2, 1, "", "staged_predict"], [505, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[506, 3, 1, "", "base_estimator_"], [506, 2, 1, "", "decision_function"], [506, 3, 1, "", "estimators_samples_"], [506, 2, 1, "", "fit"], [506, 2, 1, "", "get_params"], [506, 2, 1, "", "predict"], [506, 2, 1, "", "predict_log_proba"], [506, 2, 1, "", "predict_proba"], [506, 2, 1, "", "score"], [506, 2, 1, "", "set_params"]], "sklearn.ensemble.BaggingRegressor": [[507, 3, 1, "", "base_estimator_"], [507, 3, 1, "", "estimators_samples_"], [507, 2, 1, "", "fit"], [507, 2, 1, "", "get_params"], [507, 2, 1, "", "predict"], [507, 2, 1, "", "score"], [507, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesClassifier": [[508, 2, 1, "", "apply"], [508, 3, 1, "", "base_estimator_"], [508, 2, 1, "", "decision_path"], [508, 3, 1, "", "feature_importances_"], [508, 2, 1, "", "fit"], [508, 2, 1, "", "get_params"], [508, 2, 1, "", "predict"], [508, 2, 1, "", "predict_log_proba"], [508, 2, 1, "", "predict_proba"], [508, 2, 1, "", "score"], [508, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesRegressor": [[509, 2, 1, "", "apply"], [509, 3, 1, "", "base_estimator_"], [509, 2, 1, "", "decision_path"], [509, 3, 1, "", "feature_importances_"], [509, 2, 1, "", "fit"], [509, 2, 1, "", "get_params"], [509, 2, 1, "", "predict"], [509, 2, 1, "", "score"], [509, 2, 1, "", "set_params"]], "sklearn.ensemble.GradientBoostingClassifier": [[510, 2, 1, "", "apply"], [510, 3, 1, "", "base_estimator_"], [510, 2, 1, "", "decision_function"], [510, 3, 1, "", "feature_importances_"], [510, 2, 1, "", "fit"], [510, 2, 1, "", "get_params"], [510, 2, 1, "", "predict"], [510, 2, 1, "", "predict_log_proba"], [510, 2, 1, "", "predict_proba"], [510, 2, 1, "", "score"], [510, 2, 1, "", "set_params"], [510, 2, 1, "", "staged_decision_function"], [510, 2, 1, "", "staged_predict"], [510, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[511, 2, 1, "", "apply"], [511, 3, 1, "", "base_estimator_"], [511, 3, 1, "", "feature_importances_"], [511, 2, 1, "", "fit"], [511, 2, 1, "", "get_params"], [511, 2, 1, "", "predict"], [511, 2, 1, "", "score"], [511, 2, 1, "", "set_params"], [511, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[512, 2, 1, "", "decision_function"], [512, 2, 1, "", "fit"], [512, 2, 1, "", "get_params"], [512, 3, 1, "", "n_iter_"], [512, 2, 1, "", "predict"], [512, 2, 1, "", "predict_proba"], [512, 2, 1, "", "score"], [512, 2, 1, "", "set_params"], [512, 2, 1, "", "staged_decision_function"], [512, 2, 1, "", "staged_predict"], [512, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[513, 2, 1, "", "fit"], [513, 2, 1, "", "get_params"], [513, 3, 1, "", "n_iter_"], [513, 2, 1, "", "predict"], [513, 2, 1, "", "score"], [513, 2, 1, "", "set_params"], [513, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[514, 3, 1, "", "base_estimator_"], [514, 2, 1, "", "decision_function"], [514, 3, 1, "", "estimators_samples_"], [514, 2, 1, "", "fit"], [514, 2, 1, "", "fit_predict"], [514, 2, 1, "", "get_params"], [514, 2, 1, "", "predict"], [514, 2, 1, "", "score_samples"], [514, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[515, 2, 1, "", "apply"], [515, 3, 1, "", "base_estimator_"], [515, 2, 1, "", "decision_path"], [515, 3, 1, "", "feature_importances_"], [515, 2, 1, "", "fit"], [515, 2, 1, "", "get_params"], [515, 2, 1, "", "predict"], [515, 2, 1, "", "predict_log_proba"], [515, 2, 1, "", "predict_proba"], [515, 2, 1, "", "score"], [515, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestRegressor": [[516, 2, 1, "", "apply"], [516, 3, 1, "", "base_estimator_"], [516, 2, 1, "", "decision_path"], [516, 3, 1, "", "feature_importances_"], [516, 2, 1, "", "fit"], [516, 2, 1, "", "get_params"], [516, 2, 1, "", "predict"], [516, 2, 1, "", "score"], [516, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomTreesEmbedding": [[517, 2, 1, "", "apply"], [517, 3, 1, "", "base_estimator_"], [517, 2, 1, "", "decision_path"], [517, 3, 1, "", "feature_importances_"], [517, 2, 1, "", "fit"], [517, 2, 1, "", "fit_transform"], [517, 2, 1, "", "get_feature_names_out"], [517, 2, 1, "", "get_params"], [517, 2, 1, "", "set_output"], [517, 2, 1, "", "set_params"], [517, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[518, 2, 1, "", "decision_function"], [518, 2, 1, "", "fit"], [518, 2, 1, "", "fit_transform"], [518, 2, 1, "", "get_feature_names_out"], [518, 2, 1, "", "get_params"], [518, 3, 1, "", "n_features_in_"], [518, 3, 1, "", "named_estimators"], [518, 2, 1, "", "predict"], [518, 2, 1, "", "predict_proba"], [518, 2, 1, "", "score"], [518, 2, 1, "", "set_output"], [518, 2, 1, "", "set_params"], [518, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[519, 2, 1, "", "fit"], [519, 2, 1, "", "fit_transform"], [519, 2, 1, "", "get_feature_names_out"], [519, 2, 1, "", "get_params"], [519, 3, 1, "", "n_features_in_"], [519, 3, 1, "", "named_estimators"], [519, 2, 1, "", "predict"], [519, 2, 1, "", "score"], [519, 2, 1, "", "set_output"], [519, 2, 1, "", "set_params"], [519, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[520, 2, 1, "", "fit"], [520, 2, 1, "", "fit_transform"], [520, 2, 1, "", "get_feature_names_out"], [520, 2, 1, "", "get_params"], [520, 3, 1, "", "n_features_in_"], [520, 3, 1, "", "named_estimators"], [520, 2, 1, "", "predict"], [520, 2, 1, "", "predict_proba"], [520, 2, 1, "", "score"], [520, 2, 1, "", "set_output"], [520, 2, 1, "", "set_params"], [520, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[521, 2, 1, "", "fit"], [521, 2, 1, "", "fit_transform"], [521, 2, 1, "", "get_feature_names_out"], [521, 2, 1, "", "get_params"], [521, 3, 1, "", "n_features_in_"], [521, 3, 1, "", "named_estimators"], [521, 2, 1, "", "predict"], [521, 2, 1, "", "score"], [521, 2, 1, "", "set_output"], [521, 2, 1, "", "set_params"], [521, 2, 1, "", "transform"]], "sklearn.exceptions": [[522, 1, 1, "", "ConvergenceWarning"], [523, 1, 1, "", "DataConversionWarning"], [524, 1, 1, "", "DataDimensionalityWarning"], [525, 1, 1, "", "EfficiencyWarning"], [526, 1, 1, "", "FitFailedWarning"], [527, 1, 1, "", "InconsistentVersionWarning"], [528, 1, 1, "", "NotFittedError"], [529, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[522, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[523, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[524, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[525, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[526, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[527, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[528, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[529, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[530, 0, 0, "-", "enable_halving_search_cv"], [531, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[532, 1, 1, "", "DictVectorizer"], [533, 1, 1, "", "FeatureHasher"], [362, 0, 0, "-", "image"], [362, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "inverse_transform"], [532, 2, 1, "", "restrict"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[534, 1, 1, "", "PatchExtractor"], [535, 4, 1, "", "extract_patches_2d"], [536, 4, 1, "", "grid_to_graph"], [537, 4, 1, "", "img_to_graph"], [538, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[539, 1, 1, "", "CountVectorizer"], [540, 1, 1, "", "HashingVectorizer"], [541, 1, 1, "", "TfidfTransformer"], [542, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[539, 2, 1, "", "build_analyzer"], [539, 2, 1, "", "build_preprocessor"], [539, 2, 1, "", "build_tokenizer"], [539, 2, 1, "", "decode"], [539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "get_stop_words"], [539, 2, 1, "", "inverse_transform"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[540, 2, 1, "", "build_analyzer"], [540, 2, 1, "", "build_preprocessor"], [540, 2, 1, "", "build_tokenizer"], [540, 2, 1, "", "decode"], [540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "get_stop_words"], [540, 2, 1, "", "partial_fit"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_params"], [541, 3, 1, "", "idf_"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[542, 2, 1, "", "build_analyzer"], [542, 2, 1, "", "build_preprocessor"], [542, 2, 1, "", "build_tokenizer"], [542, 2, 1, "", "decode"], [542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "get_stop_words"], [542, 3, 1, "", "idf_"], [542, 2, 1, "", "inverse_transform"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.feature_selection": [[543, 1, 1, "", "GenericUnivariateSelect"], [544, 1, 1, "", "RFE"], [545, 1, 1, "", "RFECV"], [546, 1, 1, "", "SelectFdr"], [547, 1, 1, "", "SelectFpr"], [548, 1, 1, "", "SelectFromModel"], [549, 1, 1, "", "SelectFwe"], [550, 1, 1, "", "SelectKBest"], [551, 1, 1, "", "SelectPercentile"], [552, 1, 1, "", "SelectorMixin"], [553, 1, 1, "", "SequentialFeatureSelector"], [554, 1, 1, "", "VarianceThreshold"], [555, 4, 1, "", "chi2"], [556, 4, 1, "", "f_classif"], [557, 4, 1, "", "f_regression"], [558, 4, 1, "", "mutual_info_classif"], [559, 4, 1, "", "mutual_info_regression"], [560, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "get_support"], [543, 2, 1, "", "inverse_transform"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[544, 3, 1, "", "classes_"], [544, 2, 1, "", "decision_function"], [544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "get_support"], [544, 2, 1, "", "inverse_transform"], [544, 2, 1, "", "predict"], [544, 2, 1, "", "predict_log_proba"], [544, 2, 1, "", "predict_proba"], [544, 2, 1, "", "score"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[545, 3, 1, "", "classes_"], [545, 2, 1, "", "decision_function"], [545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "get_support"], [545, 2, 1, "", "inverse_transform"], [545, 2, 1, "", "predict"], [545, 2, 1, "", "predict_log_proba"], [545, 2, 1, "", "predict_proba"], [545, 2, 1, "", "score"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_feature_names_out"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "get_support"], [546, 2, 1, "", "inverse_transform"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "get_support"], [547, 2, 1, "", "inverse_transform"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[548, 2, 1, "", "fit"], [548, 2, 1, "", "fit_transform"], [548, 2, 1, "", "get_feature_names_out"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "get_support"], [548, 2, 1, "", "inverse_transform"], [548, 3, 1, "", "n_features_in_"], [548, 2, 1, "", "partial_fit"], [548, 2, 1, "", "set_output"], [548, 2, 1, "", "set_params"], [548, 3, 1, "", "threshold_"], [548, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[549, 2, 1, "", "fit"], [549, 2, 1, "", "fit_transform"], [549, 2, 1, "", "get_feature_names_out"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "get_support"], [549, 2, 1, "", "inverse_transform"], [549, 2, 1, "", "set_output"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[550, 2, 1, "", "fit"], [550, 2, 1, "", "fit_transform"], [550, 2, 1, "", "get_feature_names_out"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "get_support"], [550, 2, 1, "", "inverse_transform"], [550, 2, 1, "", "set_output"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[551, 2, 1, "", "fit"], [551, 2, 1, "", "fit_transform"], [551, 2, 1, "", "get_feature_names_out"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "get_support"], [551, 2, 1, "", "inverse_transform"], [551, 2, 1, "", "set_output"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[552, 2, 1, "", "fit_transform"], [552, 2, 1, "", "get_feature_names_out"], [552, 2, 1, "", "get_support"], [552, 2, 1, "", "inverse_transform"], [552, 2, 1, "", "set_output"], [552, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[553, 2, 1, "", "fit"], [553, 2, 1, "", "fit_transform"], [553, 2, 1, "", "get_feature_names_out"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "get_support"], [553, 2, 1, "", "inverse_transform"], [553, 2, 1, "", "set_output"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[554, 2, 1, "", "fit"], [554, 2, 1, "", "fit_transform"], [554, 2, 1, "", "get_feature_names_out"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "get_support"], [554, 2, 1, "", "inverse_transform"], [554, 2, 1, "", "set_output"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[561, 1, 1, "", "GaussianProcessClassifier"], [562, 1, 1, "", "GaussianProcessRegressor"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[561, 2, 1, "", "fit"], [561, 2, 1, "", "get_params"], [561, 3, 1, "", "kernel_"], [561, 2, 1, "", "log_marginal_likelihood"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "predict_proba"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_params"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[562, 2, 1, "", "fit"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "log_marginal_likelihood"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "sample_y"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_params"]], "sklearn.gaussian_process.kernels": [[563, 1, 1, "", "CompoundKernel"], [564, 1, 1, "", "ConstantKernel"], [565, 1, 1, "", "DotProduct"], [566, 1, 1, "", "ExpSineSquared"], [567, 1, 1, "", "Exponentiation"], [568, 1, 1, "", "Hyperparameter"], [569, 1, 1, "", "Kernel"], [570, 1, 1, "", "Matern"], [571, 1, 1, "", "PairwiseKernel"], [572, 1, 1, "", "Product"], [573, 1, 1, "", "RBF"], [574, 1, 1, "", "RationalQuadratic"], [575, 1, 1, "", "Sum"], [576, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[563, 2, 1, "", "__call__"], [563, 3, 1, "", "bounds"], [563, 2, 1, "", "clone_with_theta"], [563, 2, 1, "", "diag"], [563, 2, 1, "", "get_params"], [563, 3, 1, "", "hyperparameters"], [563, 2, 1, "", "is_stationary"], [563, 3, 1, "", "n_dims"], [563, 3, 1, "", "requires_vector_input"], [563, 2, 1, "", "set_params"], [563, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[564, 2, 1, "", "__call__"], [564, 3, 1, "", "bounds"], [564, 2, 1, "", "clone_with_theta"], [564, 2, 1, "", "diag"], [564, 2, 1, "", "get_params"], [564, 3, 1, "", "hyperparameters"], [564, 2, 1, "", "is_stationary"], [564, 3, 1, "", "n_dims"], [564, 3, 1, "", "requires_vector_input"], [564, 2, 1, "", "set_params"], [564, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[565, 2, 1, "", "__call__"], [565, 3, 1, "", "bounds"], [565, 2, 1, "", "clone_with_theta"], [565, 2, 1, "", "diag"], [565, 2, 1, "", "get_params"], [565, 3, 1, "", "hyperparameters"], [565, 2, 1, "", "is_stationary"], [565, 3, 1, "", "n_dims"], [565, 3, 1, "", "requires_vector_input"], [565, 2, 1, "", "set_params"], [565, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[566, 2, 1, "", "__call__"], [566, 3, 1, "", "bounds"], [566, 2, 1, "", "clone_with_theta"], [566, 2, 1, "", "diag"], [566, 2, 1, "", "get_params"], [566, 3, 1, "", "hyperparameter_length_scale"], [566, 3, 1, "", "hyperparameters"], [566, 2, 1, "", "is_stationary"], [566, 3, 1, "", "n_dims"], [566, 3, 1, "", "requires_vector_input"], [566, 2, 1, "", "set_params"], [566, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[567, 2, 1, "", "__call__"], [567, 3, 1, "", "bounds"], [567, 2, 1, "", "clone_with_theta"], [567, 2, 1, "", "diag"], [567, 2, 1, "", "get_params"], [567, 3, 1, "", "hyperparameters"], [567, 2, 1, "", "is_stationary"], [567, 3, 1, "", "n_dims"], [567, 3, 1, "", "requires_vector_input"], [567, 2, 1, "", "set_params"], [567, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[568, 2, 1, "", "__call__"], [568, 5, 1, "", "bounds"], [568, 2, 1, "", "count"], [568, 5, 1, "", "fixed"], [568, 2, 1, "", "index"], [568, 5, 1, "", "n_elements"], [568, 5, 1, "", "name"], [568, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[569, 2, 1, "", "__call__"], [569, 3, 1, "", "bounds"], [569, 2, 1, "", "clone_with_theta"], [569, 2, 1, "", "diag"], [569, 2, 1, "", "get_params"], [569, 3, 1, "", "hyperparameters"], [569, 2, 1, "", "is_stationary"], [569, 3, 1, "", "n_dims"], [569, 3, 1, "", "requires_vector_input"], [569, 2, 1, "", "set_params"], [569, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[570, 2, 1, "", "__call__"], [570, 3, 1, "", "bounds"], [570, 2, 1, "", "clone_with_theta"], [570, 2, 1, "", "diag"], [570, 2, 1, "", "get_params"], [570, 3, 1, "", "hyperparameters"], [570, 2, 1, "", "is_stationary"], [570, 3, 1, "", "n_dims"], [570, 3, 1, "", "requires_vector_input"], [570, 2, 1, "", "set_params"], [570, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[571, 2, 1, "", "__call__"], [571, 3, 1, "", "bounds"], [571, 2, 1, "", "clone_with_theta"], [571, 2, 1, "", "diag"], [571, 2, 1, "", "get_params"], [571, 3, 1, "", "hyperparameters"], [571, 2, 1, "", "is_stationary"], [571, 3, 1, "", "n_dims"], [571, 3, 1, "", "requires_vector_input"], [571, 2, 1, "", "set_params"], [571, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[572, 2, 1, "", "__call__"], [572, 3, 1, "", "bounds"], [572, 2, 1, "", "clone_with_theta"], [572, 2, 1, "", "diag"], [572, 2, 1, "", "get_params"], [572, 3, 1, "", "hyperparameters"], [572, 2, 1, "", "is_stationary"], [572, 3, 1, "", "n_dims"], [572, 3, 1, "", "requires_vector_input"], [572, 2, 1, "", "set_params"], [572, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[573, 2, 1, "", "__call__"], [573, 3, 1, "", "bounds"], [573, 2, 1, "", "clone_with_theta"], [573, 2, 1, "", "diag"], [573, 2, 1, "", "get_params"], [573, 3, 1, "", "hyperparameters"], [573, 2, 1, "", "is_stationary"], [573, 3, 1, "", "n_dims"], [573, 3, 1, "", "requires_vector_input"], [573, 2, 1, "", "set_params"], [573, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[574, 2, 1, "", "__call__"], [574, 3, 1, "", "bounds"], [574, 2, 1, "", "clone_with_theta"], [574, 2, 1, "", "diag"], [574, 2, 1, "", "get_params"], [574, 3, 1, "", "hyperparameters"], [574, 2, 1, "", "is_stationary"], [574, 3, 1, "", "n_dims"], [574, 3, 1, "", "requires_vector_input"], [574, 2, 1, "", "set_params"], [574, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[575, 2, 1, "", "__call__"], [575, 3, 1, "", "bounds"], [575, 2, 1, "", "clone_with_theta"], [575, 2, 1, "", "diag"], [575, 2, 1, "", "get_params"], [575, 3, 1, "", "hyperparameters"], [575, 2, 1, "", "is_stationary"], [575, 3, 1, "", "n_dims"], [575, 3, 1, "", "requires_vector_input"], [575, 2, 1, "", "set_params"], [575, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[576, 2, 1, "", "__call__"], [576, 3, 1, "", "bounds"], [576, 2, 1, "", "clone_with_theta"], [576, 2, 1, "", "diag"], [576, 2, 1, "", "get_params"], [576, 3, 1, "", "hyperparameters"], [576, 2, 1, "", "is_stationary"], [576, 3, 1, "", "n_dims"], [576, 3, 1, "", "requires_vector_input"], [576, 2, 1, "", "set_params"], [576, 3, 1, "", "theta"]], "sklearn.impute": [[578, 1, 1, "", "IterativeImputer"], [579, 1, 1, "", "KNNImputer"], [580, 1, 1, "", "MissingIndicator"], [581, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[578, 2, 1, "", "fit"], [578, 2, 1, "", "fit_transform"], [578, 2, 1, "", "get_feature_names_out"], [578, 2, 1, "", "get_params"], [578, 2, 1, "", "set_output"], [578, 2, 1, "", "set_params"], [578, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[579, 2, 1, "", "fit"], [579, 2, 1, "", "fit_transform"], [579, 2, 1, "", "get_feature_names_out"], [579, 2, 1, "", "get_params"], [579, 2, 1, "", "set_output"], [579, 2, 1, "", "set_params"], [579, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[580, 2, 1, "", "fit"], [580, 2, 1, "", "fit_transform"], [580, 2, 1, "", "get_feature_names_out"], [580, 2, 1, "", "get_params"], [580, 2, 1, "", "set_output"], [580, 2, 1, "", "set_params"], [580, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_feature_names_out"], [581, 2, 1, "", "get_params"], [581, 2, 1, "", "inverse_transform"], [581, 2, 1, "", "set_output"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "transform"]], "sklearn.inspection": [[582, 1, 1, "", "DecisionBoundaryDisplay"], [583, 1, 1, "", "PartialDependenceDisplay"], [584, 4, 1, "", "partial_dependence"], [585, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[582, 2, 1, "", "from_estimator"], [582, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[583, 2, 1, "", "from_estimator"], [583, 2, 1, "", "plot"]], "sklearn.isotonic": [[586, 1, 1, "", "IsotonicRegression"], [587, 4, 1, "", "check_increasing"], [588, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[586, 2, 1, "", "fit"], [586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_feature_names_out"], [586, 2, 1, "", "get_params"], [586, 2, 1, "", "predict"], [586, 2, 1, "", "score"], [586, 2, 1, "", "set_output"], [586, 2, 1, "", "set_params"], [586, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[589, 1, 1, "", "AdditiveChi2Sampler"], [590, 1, 1, "", "Nystroem"], [591, 1, 1, "", "PolynomialCountSketch"], [592, 1, 1, "", "RBFSampler"], [593, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_feature_names_out"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[594, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[594, 2, 1, "", "fit"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "predict"], [594, 2, 1, "", "score"], [594, 2, 1, "", "set_params"]], "sklearn.linear_model": [[595, 1, 1, "", "ARDRegression"], [596, 1, 1, "", "BayesianRidge"], [597, 1, 1, "", "ElasticNet"], [598, 1, 1, "", "ElasticNetCV"], [599, 1, 1, "", "GammaRegressor"], [600, 1, 1, "", "HuberRegressor"], [601, 1, 1, "", "Lars"], [602, 1, 1, "", "LarsCV"], [603, 1, 1, "", "Lasso"], [604, 1, 1, "", "LassoCV"], [605, 1, 1, "", "LassoLars"], [606, 1, 1, "", "LassoLarsCV"], [607, 1, 1, "", "LassoLarsIC"], [608, 1, 1, "", "LinearRegression"], [609, 1, 1, "", "LogisticRegression"], [610, 1, 1, "", "LogisticRegressionCV"], [611, 1, 1, "", "MultiTaskElasticNet"], [612, 1, 1, "", "MultiTaskElasticNetCV"], [613, 1, 1, "", "MultiTaskLasso"], [614, 1, 1, "", "MultiTaskLassoCV"], [615, 1, 1, "", "OrthogonalMatchingPursuit"], [616, 1, 1, "", "OrthogonalMatchingPursuitCV"], [617, 1, 1, "", "PassiveAggressiveClassifier"], [618, 4, 1, "", "PassiveAggressiveRegressor"], [619, 1, 1, "", "Perceptron"], [620, 1, 1, "", "PoissonRegressor"], [621, 1, 1, "", "QuantileRegressor"], [622, 1, 1, "", "RANSACRegressor"], [623, 1, 1, "", "Ridge"], [624, 1, 1, "", "RidgeCV"], [625, 1, 1, "", "RidgeClassifier"], [626, 1, 1, "", "RidgeClassifierCV"], [627, 1, 1, "", "SGDClassifier"], [628, 1, 1, "", "SGDOneClassSVM"], [629, 1, 1, "", "SGDRegressor"], [630, 1, 1, "", "TheilSenRegressor"], [631, 1, 1, "", "TweedieRegressor"], [632, 4, 1, "", "enet_path"], [633, 4, 1, "", "lars_path"], [634, 4, 1, "", "lars_path_gram"], [635, 4, 1, "", "lasso_path"], [636, 4, 1, "", "orthogonal_mp"], [637, 4, 1, "", "orthogonal_mp_gram"], [638, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "predict"], [595, 2, 1, "", "score"], [595, 2, 1, "", "set_params"]], "sklearn.linear_model.BayesianRidge": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "predict"], [596, 2, 1, "", "score"], [596, 2, 1, "", "set_params"]], "sklearn.linear_model.ElasticNet": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "path"], [597, 2, 1, "", "predict"], [597, 2, 1, "", "score"], [597, 2, 1, "", "set_params"], [597, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "path"], [598, 2, 1, "", "predict"], [598, 2, 1, "", "score"], [598, 2, 1, "", "set_params"]], "sklearn.linear_model.GammaRegressor": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "predict"], [599, 2, 1, "", "score"], [599, 2, 1, "", "set_params"]], "sklearn.linear_model.HuberRegressor": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "predict"], [600, 2, 1, "", "score"], [600, 2, 1, "", "set_params"]], "sklearn.linear_model.Lars": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "predict"], [601, 2, 1, "", "score"], [601, 2, 1, "", "set_params"]], "sklearn.linear_model.LarsCV": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "predict"], [602, 2, 1, "", "score"], [602, 2, 1, "", "set_params"]], "sklearn.linear_model.Lasso": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "path"], [603, 2, 1, "", "predict"], [603, 2, 1, "", "score"], [603, 2, 1, "", "set_params"], [603, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "path"], [604, 2, 1, "", "predict"], [604, 2, 1, "", "score"], [604, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLars": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "predict"], [605, 2, 1, "", "score"], [605, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsCV": [[606, 2, 1, "", "fit"], [606, 2, 1, "", "get_params"], [606, 2, 1, "", "predict"], [606, 2, 1, "", "score"], [606, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsIC": [[607, 2, 1, "", "fit"], [607, 2, 1, "", "get_params"], [607, 2, 1, "", "predict"], [607, 2, 1, "", "score"], [607, 2, 1, "", "set_params"]], "sklearn.linear_model.LinearRegression": [[608, 2, 1, "", "fit"], [608, 2, 1, "", "get_params"], [608, 2, 1, "", "predict"], [608, 2, 1, "", "score"], [608, 2, 1, "", "set_params"]], "sklearn.linear_model.LogisticRegression": [[609, 2, 1, "", "decision_function"], [609, 2, 1, "", "densify"], [609, 2, 1, "", "fit"], [609, 2, 1, "", "get_params"], [609, 2, 1, "", "predict"], [609, 2, 1, "", "predict_log_proba"], [609, 2, 1, "", "predict_proba"], [609, 2, 1, "", "score"], [609, 2, 1, "", "set_params"], [609, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[610, 2, 1, "", "decision_function"], [610, 2, 1, "", "densify"], [610, 2, 1, "", "fit"], [610, 2, 1, "", "get_params"], [610, 2, 1, "", "predict"], [610, 2, 1, "", "predict_log_proba"], [610, 2, 1, "", "predict_proba"], [610, 2, 1, "", "score"], [610, 2, 1, "", "set_params"], [610, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[611, 2, 1, "", "fit"], [611, 2, 1, "", "get_params"], [611, 2, 1, "", "path"], [611, 2, 1, "", "predict"], [611, 2, 1, "", "score"], [611, 2, 1, "", "set_params"], [611, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[612, 2, 1, "", "fit"], [612, 2, 1, "", "get_params"], [612, 2, 1, "", "path"], [612, 2, 1, "", "predict"], [612, 2, 1, "", "score"], [612, 2, 1, "", "set_params"]], "sklearn.linear_model.MultiTaskLasso": [[613, 2, 1, "", "fit"], [613, 2, 1, "", "get_params"], [613, 2, 1, "", "path"], [613, 2, 1, "", "predict"], [613, 2, 1, "", "score"], [613, 2, 1, "", "set_params"], [613, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[614, 2, 1, "", "fit"], [614, 2, 1, "", "get_params"], [614, 2, 1, "", "path"], [614, 2, 1, "", "predict"], [614, 2, 1, "", "score"], [614, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[615, 2, 1, "", "fit"], [615, 2, 1, "", "get_params"], [615, 2, 1, "", "predict"], [615, 2, 1, "", "score"], [615, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[616, 2, 1, "", "fit"], [616, 2, 1, "", "get_params"], [616, 2, 1, "", "predict"], [616, 2, 1, "", "score"], [616, 2, 1, "", "set_params"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[617, 2, 1, "", "decision_function"], [617, 2, 1, "", "densify"], [617, 2, 1, "", "fit"], [617, 2, 1, "", "get_params"], [617, 2, 1, "", "partial_fit"], [617, 2, 1, "", "predict"], [617, 2, 1, "", "score"], [617, 2, 1, "", "set_params"], [617, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[619, 2, 1, "", "decision_function"], [619, 2, 1, "", "densify"], [619, 2, 1, "", "fit"], [619, 2, 1, "", "get_params"], [619, 2, 1, "", "partial_fit"], [619, 2, 1, "", "predict"], [619, 2, 1, "", "score"], [619, 2, 1, "", "set_params"], [619, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[620, 2, 1, "", "fit"], [620, 2, 1, "", "get_params"], [620, 2, 1, "", "predict"], [620, 2, 1, "", "score"], [620, 2, 1, "", "set_params"]], "sklearn.linear_model.QuantileRegressor": [[621, 2, 1, "", "fit"], [621, 2, 1, "", "get_params"], [621, 2, 1, "", "predict"], [621, 2, 1, "", "score"], [621, 2, 1, "", "set_params"]], "sklearn.linear_model.RANSACRegressor": [[622, 2, 1, "", "fit"], [622, 2, 1, "", "get_params"], [622, 2, 1, "", "predict"], [622, 2, 1, "", "score"], [622, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[623, 2, 1, "", "fit"], [623, 2, 1, "", "get_params"], [623, 2, 1, "", "predict"], [623, 2, 1, "", "score"], [623, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeCV": [[624, 2, 1, "", "fit"], [624, 2, 1, "", "get_params"], [624, 2, 1, "", "predict"], [624, 2, 1, "", "score"], [624, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifier": [[625, 3, 1, "", "classes_"], [625, 2, 1, "", "decision_function"], [625, 2, 1, "", "fit"], [625, 2, 1, "", "get_params"], [625, 2, 1, "", "predict"], [625, 2, 1, "", "score"], [625, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifierCV": [[626, 3, 1, "", "classes_"], [626, 2, 1, "", "decision_function"], [626, 2, 1, "", "fit"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "predict"], [626, 2, 1, "", "score"], [626, 2, 1, "", "set_params"]], "sklearn.linear_model.SGDClassifier": [[627, 2, 1, "", "decision_function"], [627, 2, 1, "", "densify"], [627, 2, 1, "", "fit"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "partial_fit"], [627, 2, 1, "", "predict"], [627, 2, 1, "", "predict_log_proba"], [627, 2, 1, "", "predict_proba"], [627, 2, 1, "", "score"], [627, 2, 1, "", "set_params"], [627, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[628, 2, 1, "", "decision_function"], [628, 2, 1, "", "densify"], [628, 2, 1, "", "fit"], [628, 2, 1, "", "fit_predict"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "partial_fit"], [628, 2, 1, "", "predict"], [628, 2, 1, "", "score_samples"], [628, 2, 1, "", "set_params"], [628, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[629, 2, 1, "", "densify"], [629, 2, 1, "", "fit"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "partial_fit"], [629, 2, 1, "", "predict"], [629, 2, 1, "", "score"], [629, 2, 1, "", "set_params"], [629, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "predict"], [630, 2, 1, "", "score"], [630, 2, 1, "", "set_params"]], "sklearn.linear_model.TweedieRegressor": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "predict"], [631, 2, 1, "", "score"], [631, 2, 1, "", "set_params"]], "sklearn.manifold": [[639, 1, 1, "", "Isomap"], [640, 1, 1, "", "LocallyLinearEmbedding"], [641, 1, 1, "", "MDS"], [642, 1, 1, "", "SpectralEmbedding"], [643, 1, 1, "", "TSNE"], [644, 4, 1, "", "locally_linear_embedding"], [645, 4, 1, "", "smacof"], [646, 4, 1, "", "spectral_embedding"], [647, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "fit_transform"], [639, 2, 1, "", "get_feature_names_out"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "reconstruction_error"], [639, 2, 1, "", "set_output"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "fit_transform"], [640, 2, 1, "", "get_feature_names_out"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "set_output"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "fit_transform"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "fit_transform"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "fit_transform"], [643, 2, 1, "", "get_feature_names_out"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "set_output"], [643, 2, 1, "", "set_params"]], "sklearn.metrics": [[648, 1, 1, "", "ConfusionMatrixDisplay"], [649, 1, 1, "", "DetCurveDisplay"], [650, 1, 1, "", "DistanceMetric"], [651, 1, 1, "", "PrecisionRecallDisplay"], [652, 1, 1, "", "PredictionErrorDisplay"], [653, 1, 1, "", "RocCurveDisplay"], [654, 4, 1, "", "accuracy_score"], [655, 4, 1, "", "adjusted_mutual_info_score"], [656, 4, 1, "", "adjusted_rand_score"], [657, 4, 1, "", "auc"], [658, 4, 1, "", "average_precision_score"], [659, 4, 1, "", "balanced_accuracy_score"], [660, 4, 1, "", "brier_score_loss"], [661, 4, 1, "", "calinski_harabasz_score"], [662, 4, 1, "", "check_scoring"], [663, 4, 1, "", "class_likelihood_ratios"], [664, 4, 1, "", "classification_report"], [362, 0, 0, "-", "cluster"], [667, 4, 1, "", "cohen_kappa_score"], [668, 4, 1, "", "completeness_score"], [669, 4, 1, "", "confusion_matrix"], [670, 4, 1, "", "consensus_score"], [671, 4, 1, "", "coverage_error"], [672, 4, 1, "", "d2_absolute_error_score"], [673, 4, 1, "", "d2_pinball_score"], [674, 4, 1, "", "d2_tweedie_score"], [675, 4, 1, "", "davies_bouldin_score"], [676, 4, 1, "", "dcg_score"], [677, 4, 1, "", "det_curve"], [678, 4, 1, "", "explained_variance_score"], [679, 4, 1, "", "f1_score"], [680, 4, 1, "", "fbeta_score"], [681, 4, 1, "", "fowlkes_mallows_score"], [682, 4, 1, "", "get_scorer"], [683, 4, 1, "", "get_scorer_names"], [684, 4, 1, "", "hamming_loss"], [685, 4, 1, "", "hinge_loss"], [686, 4, 1, "", "homogeneity_completeness_v_measure"], [687, 4, 1, "", "homogeneity_score"], [688, 4, 1, "", "jaccard_score"], [689, 4, 1, "", "label_ranking_average_precision_score"], [690, 4, 1, "", "label_ranking_loss"], [691, 4, 1, "", "log_loss"], [692, 4, 1, "", "make_scorer"], [693, 4, 1, "", "matthews_corrcoef"], [694, 4, 1, "", "max_error"], [695, 4, 1, "", "mean_absolute_error"], [696, 4, 1, "", "mean_absolute_percentage_error"], [697, 4, 1, "", "mean_gamma_deviance"], [698, 4, 1, "", "mean_pinball_loss"], [699, 4, 1, "", "mean_poisson_deviance"], [700, 4, 1, "", "mean_squared_error"], [701, 4, 1, "", "mean_squared_log_error"], [702, 4, 1, "", "mean_tweedie_deviance"], [703, 4, 1, "", "median_absolute_error"], [704, 4, 1, "", "multilabel_confusion_matrix"], [705, 4, 1, "", "mutual_info_score"], [706, 4, 1, "", "ndcg_score"], [707, 4, 1, "", "normalized_mutual_info_score"], [362, 0, 0, "-", "pairwise"], [728, 4, 1, "", "pairwise_distances"], [729, 4, 1, "", "pairwise_distances_argmin"], [730, 4, 1, "", "pairwise_distances_argmin_min"], [731, 4, 1, "", "pairwise_distances_chunked"], [732, 4, 1, "", "precision_recall_curve"], [733, 4, 1, "", "precision_recall_fscore_support"], [734, 4, 1, "", "precision_score"], [735, 4, 1, "", "r2_score"], [736, 4, 1, "", "rand_score"], [737, 4, 1, "", "recall_score"], [738, 4, 1, "", "roc_auc_score"], [739, 4, 1, "", "roc_curve"], [740, 4, 1, "", "silhouette_samples"], [741, 4, 1, "", "silhouette_score"], [742, 4, 1, "", "top_k_accuracy_score"], [743, 4, 1, "", "v_measure_score"], [744, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[648, 2, 1, "", "from_estimator"], [648, 2, 1, "", "from_predictions"], [648, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[649, 2, 1, "", "from_estimator"], [649, 2, 1, "", "from_predictions"], [649, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[650, 2, 1, "", "dist_to_rdist"], [650, 2, 1, "", "get_metric"], [650, 2, 1, "", "pairwise"], [650, 2, 1, "", "rdist_to_dist"]], "sklearn.metrics.PrecisionRecallDisplay": [[651, 2, 1, "", "from_estimator"], [651, 2, 1, "", "from_predictions"], [651, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[652, 2, 1, "", "from_estimator"], [652, 2, 1, "", "from_predictions"], [652, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[653, 2, 1, "", "from_estimator"], [653, 2, 1, "", "from_predictions"], [653, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[665, 4, 1, "", "contingency_matrix"], [666, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[708, 4, 1, "", "additive_chi2_kernel"], [709, 4, 1, "", "chi2_kernel"], [710, 4, 1, "", "cosine_distances"], [711, 4, 1, "", "cosine_similarity"], [712, 4, 1, "", "distance_metrics"], [713, 4, 1, "", "euclidean_distances"], [714, 4, 1, "", "haversine_distances"], [715, 4, 1, "", "kernel_metrics"], [716, 4, 1, "", "laplacian_kernel"], [717, 4, 1, "", "linear_kernel"], [718, 4, 1, "", "manhattan_distances"], [719, 4, 1, "", "nan_euclidean_distances"], [720, 4, 1, "", "paired_cosine_distances"], [721, 4, 1, "", "paired_distances"], [722, 4, 1, "", "paired_euclidean_distances"], [723, 4, 1, "", "paired_manhattan_distances"], [724, 4, 1, "", "pairwise_kernels"], [725, 4, 1, "", "polynomial_kernel"], [726, 4, 1, "", "rbf_kernel"], [727, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[745, 1, 1, "", "BayesianGaussianMixture"], [746, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[745, 2, 1, "", "fit"], [745, 2, 1, "", "fit_predict"], [745, 2, 1, "", "get_params"], [745, 2, 1, "", "predict"], [745, 2, 1, "", "predict_proba"], [745, 2, 1, "", "sample"], [745, 2, 1, "", "score"], [745, 2, 1, "", "score_samples"], [745, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[746, 2, 1, "", "aic"], [746, 2, 1, "", "bic"], [746, 2, 1, "", "fit"], [746, 2, 1, "", "fit_predict"], [746, 2, 1, "", "get_params"], [746, 2, 1, "", "predict"], [746, 2, 1, "", "predict_proba"], [746, 2, 1, "", "sample"], [746, 2, 1, "", "score"], [746, 2, 1, "", "score_samples"], [746, 2, 1, "", "set_params"]], "sklearn.model_selection": [[747, 1, 1, "", "GridSearchCV"], [748, 1, 1, "", "GroupKFold"], [749, 1, 1, "", "GroupShuffleSplit"], [750, 1, 1, "", "HalvingGridSearchCV"], [751, 1, 1, "", "HalvingRandomSearchCV"], [752, 1, 1, "", "KFold"], [753, 1, 1, "", "LearningCurveDisplay"], [754, 1, 1, "", "LeaveOneGroupOut"], [755, 1, 1, "", "LeaveOneOut"], [756, 1, 1, "", "LeavePGroupsOut"], [757, 1, 1, "", "LeavePOut"], [758, 1, 1, "", "ParameterGrid"], [759, 1, 1, "", "ParameterSampler"], [760, 1, 1, "", "PredefinedSplit"], [761, 1, 1, "", "RandomizedSearchCV"], [762, 1, 1, "", "RepeatedKFold"], [763, 1, 1, "", "RepeatedStratifiedKFold"], [764, 1, 1, "", "ShuffleSplit"], [765, 1, 1, "", "StratifiedGroupKFold"], [766, 1, 1, "", "StratifiedKFold"], [767, 1, 1, "", "StratifiedShuffleSplit"], [768, 1, 1, "", "TimeSeriesSplit"], [769, 4, 1, "", "check_cv"], [770, 4, 1, "", "cross_val_predict"], [771, 4, 1, "", "cross_val_score"], [772, 4, 1, "", "cross_validate"], [773, 4, 1, "", "learning_curve"], [774, 4, 1, "", "permutation_test_score"], [775, 4, 1, "", "train_test_split"], [776, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[747, 3, 1, "", "classes_"], [747, 2, 1, "", "decision_function"], [747, 2, 1, "", "fit"], [747, 2, 1, "", "get_params"], [747, 2, 1, "", "inverse_transform"], [747, 3, 1, "", "n_features_in_"], [747, 2, 1, "", "predict"], [747, 2, 1, "", "predict_log_proba"], [747, 2, 1, "", "predict_proba"], [747, 2, 1, "", "score"], [747, 2, 1, "", "score_samples"], [747, 2, 1, "", "set_params"], [747, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[748, 2, 1, "", "get_n_splits"], [748, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[749, 2, 1, "", "get_n_splits"], [749, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[750, 3, 1, "", "classes_"], [750, 2, 1, "", "decision_function"], [750, 2, 1, "", "fit"], [750, 2, 1, "", "get_params"], [750, 2, 1, "", "inverse_transform"], [750, 3, 1, "", "n_features_in_"], [750, 2, 1, "", "predict"], [750, 2, 1, "", "predict_log_proba"], [750, 2, 1, "", "predict_proba"], [750, 2, 1, "", "score"], [750, 2, 1, "", "score_samples"], [750, 2, 1, "", "set_params"], [750, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[751, 3, 1, "", "classes_"], [751, 2, 1, "", "decision_function"], [751, 2, 1, "", "fit"], [751, 2, 1, "", "get_params"], [751, 2, 1, "", "inverse_transform"], [751, 3, 1, "", "n_features_in_"], [751, 2, 1, "", "predict"], [751, 2, 1, "", "predict_log_proba"], [751, 2, 1, "", "predict_proba"], [751, 2, 1, "", "score"], [751, 2, 1, "", "score_samples"], [751, 2, 1, "", "set_params"], [751, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[752, 2, 1, "", "get_n_splits"], [752, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[753, 2, 1, "", "from_estimator"], [753, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[754, 2, 1, "", "get_n_splits"], [754, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[755, 2, 1, "", "get_n_splits"], [755, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[756, 2, 1, "", "get_n_splits"], [756, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[757, 2, 1, "", "get_n_splits"], [757, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[760, 2, 1, "", "get_n_splits"], [760, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[761, 3, 1, "", "classes_"], [761, 2, 1, "", "decision_function"], [761, 2, 1, "", "fit"], [761, 2, 1, "", "get_params"], [761, 2, 1, "", "inverse_transform"], [761, 3, 1, "", "n_features_in_"], [761, 2, 1, "", "predict"], [761, 2, 1, "", "predict_log_proba"], [761, 2, 1, "", "predict_proba"], [761, 2, 1, "", "score"], [761, 2, 1, "", "score_samples"], [761, 2, 1, "", "set_params"], [761, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[762, 2, 1, "", "get_n_splits"], [762, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[763, 2, 1, "", "get_n_splits"], [763, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[764, 2, 1, "", "get_n_splits"], [764, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[765, 2, 1, "", "get_n_splits"], [765, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[766, 2, 1, "", "get_n_splits"], [766, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[767, 2, 1, "", "get_n_splits"], [767, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[768, 2, 1, "", "get_n_splits"], [768, 2, 1, "", "split"]], "sklearn.multiclass": [[777, 1, 1, "", "OneVsOneClassifier"], [778, 1, 1, "", "OneVsRestClassifier"], [779, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[777, 2, 1, "", "decision_function"], [777, 2, 1, "", "fit"], [777, 2, 1, "", "get_params"], [777, 3, 1, "", "n_classes_"], [777, 2, 1, "", "partial_fit"], [777, 2, 1, "", "predict"], [777, 2, 1, "", "score"], [777, 2, 1, "", "set_params"]], "sklearn.multiclass.OneVsRestClassifier": [[778, 2, 1, "", "decision_function"], [778, 2, 1, "", "fit"], [778, 2, 1, "", "get_params"], [778, 3, 1, "", "multilabel_"], [778, 3, 1, "", "n_classes_"], [778, 2, 1, "", "partial_fit"], [778, 2, 1, "", "predict"], [778, 2, 1, "", "predict_proba"], [778, 2, 1, "", "score"], [778, 2, 1, "", "set_params"]], "sklearn.multiclass.OutputCodeClassifier": [[779, 2, 1, "", "fit"], [779, 2, 1, "", "get_params"], [779, 2, 1, "", "predict"], [779, 2, 1, "", "score"], [779, 2, 1, "", "set_params"]], "sklearn.multioutput": [[780, 1, 1, "", "ClassifierChain"], [781, 1, 1, "", "MultiOutputClassifier"], [782, 1, 1, "", "MultiOutputRegressor"], [783, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[780, 2, 1, "", "decision_function"], [780, 2, 1, "", "fit"], [780, 2, 1, "", "get_params"], [780, 2, 1, "", "predict"], [780, 2, 1, "", "predict_proba"], [780, 2, 1, "", "score"], [780, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputClassifier": [[781, 2, 1, "", "fit"], [781, 2, 1, "", "get_params"], [781, 2, 1, "", "partial_fit"], [781, 2, 1, "", "predict"], [781, 2, 1, "", "predict_proba"], [781, 2, 1, "", "score"], [781, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputRegressor": [[782, 2, 1, "", "fit"], [782, 2, 1, "", "get_params"], [782, 2, 1, "", "partial_fit"], [782, 2, 1, "", "predict"], [782, 2, 1, "", "score"], [782, 2, 1, "", "set_params"]], "sklearn.multioutput.RegressorChain": [[783, 2, 1, "", "fit"], [783, 2, 1, "", "get_params"], [783, 2, 1, "", "predict"], [783, 2, 1, "", "score"], [783, 2, 1, "", "set_params"]], "sklearn.naive_bayes": [[784, 1, 1, "", "BernoulliNB"], [785, 1, 1, "", "CategoricalNB"], [786, 1, 1, "", "ComplementNB"], [787, 1, 1, "", "GaussianNB"], [788, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[784, 2, 1, "", "fit"], [784, 2, 1, "", "get_params"], [784, 2, 1, "", "partial_fit"], [784, 2, 1, "", "predict"], [784, 2, 1, "", "predict_joint_log_proba"], [784, 2, 1, "", "predict_log_proba"], [784, 2, 1, "", "predict_proba"], [784, 2, 1, "", "score"], [784, 2, 1, "", "set_params"]], "sklearn.naive_bayes.CategoricalNB": [[785, 2, 1, "", "fit"], [785, 2, 1, "", "get_params"], [785, 2, 1, "", "partial_fit"], [785, 2, 1, "", "predict"], [785, 2, 1, "", "predict_joint_log_proba"], [785, 2, 1, "", "predict_log_proba"], [785, 2, 1, "", "predict_proba"], [785, 2, 1, "", "score"], [785, 2, 1, "", "set_params"]], "sklearn.naive_bayes.ComplementNB": [[786, 2, 1, "", "fit"], [786, 2, 1, "", "get_params"], [786, 2, 1, "", "partial_fit"], [786, 2, 1, "", "predict"], [786, 2, 1, "", "predict_joint_log_proba"], [786, 2, 1, "", "predict_log_proba"], [786, 2, 1, "", "predict_proba"], [786, 2, 1, "", "score"], [786, 2, 1, "", "set_params"]], "sklearn.naive_bayes.GaussianNB": [[787, 2, 1, "", "fit"], [787, 2, 1, "", "get_params"], [787, 2, 1, "", "partial_fit"], [787, 2, 1, "", "predict"], [787, 2, 1, "", "predict_joint_log_proba"], [787, 2, 1, "", "predict_log_proba"], [787, 2, 1, "", "predict_proba"], [787, 2, 1, "", "score"], [787, 2, 1, "", "set_params"]], "sklearn.naive_bayes.MultinomialNB": [[788, 2, 1, "", "fit"], [788, 2, 1, "", "get_params"], [788, 2, 1, "", "partial_fit"], [788, 2, 1, "", "predict"], [788, 2, 1, "", "predict_joint_log_proba"], [788, 2, 1, "", "predict_log_proba"], [788, 2, 1, "", "predict_proba"], [788, 2, 1, "", "score"], [788, 2, 1, "", "set_params"]], "sklearn.neighbors": [[789, 1, 1, "", "BallTree"], [790, 1, 1, "", "KDTree"], [791, 1, 1, "", "KNeighborsClassifier"], [792, 1, 1, "", "KNeighborsRegressor"], [793, 1, 1, "", "KNeighborsTransformer"], [794, 1, 1, "", "KernelDensity"], [795, 1, 1, "", "LocalOutlierFactor"], [796, 1, 1, "", "NearestCentroid"], [797, 1, 1, "", "NearestNeighbors"], [798, 1, 1, "", "NeighborhoodComponentsAnalysis"], [799, 1, 1, "", "RadiusNeighborsClassifier"], [800, 1, 1, "", "RadiusNeighborsRegressor"], [801, 1, 1, "", "RadiusNeighborsTransformer"], [802, 4, 1, "", "kneighbors_graph"], [803, 4, 1, "", "radius_neighbors_graph"], [804, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[789, 2, 1, "", "get_arrays"], [789, 2, 1, "", "get_n_calls"], [789, 2, 1, "", "get_tree_stats"], [789, 2, 1, "", "kernel_density"], [789, 2, 1, "", "query"], [789, 2, 1, "", "query_radius"], [789, 2, 1, "", "reset_n_calls"], [789, 2, 1, "", "two_point_correlation"], [789, 2, 1, "", "valid_metrics"]], "sklearn.neighbors.KDTree": [[790, 2, 1, "", "get_arrays"], [790, 2, 1, "", "get_n_calls"], [790, 2, 1, "", "get_tree_stats"], [790, 2, 1, "", "kernel_density"], [790, 2, 1, "", "query"], [790, 2, 1, "", "query_radius"], [790, 2, 1, "", "reset_n_calls"], [790, 2, 1, "", "two_point_correlation"], [790, 2, 1, "", "valid_metrics"]], "sklearn.neighbors.KNeighborsClassifier": [[791, 2, 1, "", "fit"], [791, 2, 1, "", "get_params"], [791, 2, 1, "", "kneighbors"], [791, 2, 1, "", "kneighbors_graph"], [791, 2, 1, "", "predict"], [791, 2, 1, "", "predict_proba"], [791, 2, 1, "", "score"], [791, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsRegressor": [[792, 2, 1, "", "fit"], [792, 2, 1, "", "get_params"], [792, 2, 1, "", "kneighbors"], [792, 2, 1, "", "kneighbors_graph"], [792, 2, 1, "", "predict"], [792, 2, 1, "", "score"], [792, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsTransformer": [[793, 2, 1, "", "fit"], [793, 2, 1, "", "fit_transform"], [793, 2, 1, "", "get_feature_names_out"], [793, 2, 1, "", "get_params"], [793, 2, 1, "", "kneighbors"], [793, 2, 1, "", "kneighbors_graph"], [793, 2, 1, "", "set_output"], [793, 2, 1, "", "set_params"], [793, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[794, 2, 1, "", "fit"], [794, 2, 1, "", "get_params"], [794, 2, 1, "", "sample"], [794, 2, 1, "", "score"], [794, 2, 1, "", "score_samples"], [794, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[795, 2, 1, "", "decision_function"], [795, 2, 1, "", "fit"], [795, 2, 1, "", "fit_predict"], [795, 2, 1, "", "get_params"], [795, 2, 1, "", "kneighbors"], [795, 2, 1, "", "kneighbors_graph"], [795, 2, 1, "", "predict"], [795, 2, 1, "", "score_samples"], [795, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[796, 2, 1, "", "fit"], [796, 2, 1, "", "get_params"], [796, 2, 1, "", "predict"], [796, 2, 1, "", "score"], [796, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestNeighbors": [[797, 2, 1, "", "fit"], [797, 2, 1, "", "get_params"], [797, 2, 1, "", "kneighbors"], [797, 2, 1, "", "kneighbors_graph"], [797, 2, 1, "", "radius_neighbors"], [797, 2, 1, "", "radius_neighbors_graph"], [797, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[798, 2, 1, "", "fit"], [798, 2, 1, "", "fit_transform"], [798, 2, 1, "", "get_feature_names_out"], [798, 2, 1, "", "get_params"], [798, 2, 1, "", "set_output"], [798, 2, 1, "", "set_params"], [798, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[799, 2, 1, "", "fit"], [799, 2, 1, "", "get_params"], [799, 2, 1, "", "predict"], [799, 2, 1, "", "predict_proba"], [799, 2, 1, "", "radius_neighbors"], [799, 2, 1, "", "radius_neighbors_graph"], [799, 2, 1, "", "score"], [799, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[800, 2, 1, "", "fit"], [800, 2, 1, "", "get_params"], [800, 2, 1, "", "predict"], [800, 2, 1, "", "radius_neighbors"], [800, 2, 1, "", "radius_neighbors_graph"], [800, 2, 1, "", "score"], [800, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[801, 2, 1, "", "fit"], [801, 2, 1, "", "fit_transform"], [801, 2, 1, "", "get_feature_names_out"], [801, 2, 1, "", "get_params"], [801, 2, 1, "", "radius_neighbors"], [801, 2, 1, "", "radius_neighbors_graph"], [801, 2, 1, "", "set_output"], [801, 2, 1, "", "set_params"], [801, 2, 1, "", "transform"]], "sklearn.neural_network": [[805, 1, 1, "", "BernoulliRBM"], [806, 1, 1, "", "MLPClassifier"], [807, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[805, 2, 1, "", "fit"], [805, 2, 1, "", "fit_transform"], [805, 2, 1, "", "get_feature_names_out"], [805, 2, 1, "", "get_params"], [805, 2, 1, "", "gibbs"], [805, 2, 1, "", "partial_fit"], [805, 2, 1, "", "score_samples"], [805, 2, 1, "", "set_output"], [805, 2, 1, "", "set_params"], [805, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[806, 2, 1, "", "fit"], [806, 2, 1, "", "get_params"], [806, 2, 1, "", "partial_fit"], [806, 2, 1, "", "predict"], [806, 2, 1, "", "predict_log_proba"], [806, 2, 1, "", "predict_proba"], [806, 2, 1, "", "score"], [806, 2, 1, "", "set_params"]], "sklearn.neural_network.MLPRegressor": [[807, 2, 1, "", "fit"], [807, 2, 1, "", "get_params"], [807, 2, 1, "", "partial_fit"], [807, 2, 1, "", "predict"], [807, 2, 1, "", "score"], [807, 2, 1, "", "set_params"]], "sklearn.pipeline": [[808, 1, 1, "", "FeatureUnion"], [809, 1, 1, "", "Pipeline"], [810, 4, 1, "", "make_pipeline"], [811, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[808, 3, 1, "", "feature_names_in_"], [808, 2, 1, "", "fit"], [808, 2, 1, "", "fit_transform"], [808, 2, 1, "", "get_feature_names_out"], [808, 2, 1, "", "get_params"], [808, 3, 1, "", "n_features_in_"], [808, 2, 1, "", "set_output"], [808, 2, 1, "", "set_params"], [808, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[809, 3, 1, "", "classes_"], [809, 2, 1, "", "decision_function"], [809, 3, 1, "", "feature_names_in_"], [809, 2, 1, "", "fit"], [809, 2, 1, "", "fit_predict"], [809, 2, 1, "", "fit_transform"], [809, 2, 1, "", "get_feature_names_out"], [809, 2, 1, "", "get_params"], [809, 2, 1, "", "inverse_transform"], [809, 3, 1, "", "n_features_in_"], [809, 3, 1, "", "named_steps"], [809, 2, 1, "", "predict"], [809, 2, 1, "", "predict_log_proba"], [809, 2, 1, "", "predict_proba"], [809, 2, 1, "", "score"], [809, 2, 1, "", "score_samples"], [809, 2, 1, "", "set_output"], [809, 2, 1, "", "set_params"], [809, 2, 1, "", "transform"]], "sklearn.preprocessing": [[812, 1, 1, "", "Binarizer"], [813, 1, 1, "", "FunctionTransformer"], [814, 1, 1, "", "KBinsDiscretizer"], [815, 1, 1, "", "KernelCenterer"], [816, 1, 1, "", "LabelBinarizer"], [817, 1, 1, "", "LabelEncoder"], [818, 1, 1, "", "MaxAbsScaler"], [819, 1, 1, "", "MinMaxScaler"], [820, 1, 1, "", "MultiLabelBinarizer"], [821, 1, 1, "", "Normalizer"], [822, 1, 1, "", "OneHotEncoder"], [823, 1, 1, "", "OrdinalEncoder"], [824, 1, 1, "", "PolynomialFeatures"], [825, 1, 1, "", "PowerTransformer"], [826, 1, 1, "", "QuantileTransformer"], [827, 1, 1, "", "RobustScaler"], [828, 1, 1, "", "SplineTransformer"], [829, 1, 1, "", "StandardScaler"], [830, 1, 1, "", "TargetEncoder"], [831, 4, 1, "", "add_dummy_feature"], [832, 4, 1, "", "binarize"], [833, 4, 1, "", "label_binarize"], [834, 4, 1, "", "maxabs_scale"], [835, 4, 1, "", "minmax_scale"], [836, 4, 1, "", "normalize"], [837, 4, 1, "", "power_transform"], [838, 4, 1, "", "quantile_transform"], [839, 4, 1, "", "robust_scale"], [840, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[812, 2, 1, "", "fit"], [812, 2, 1, "", "fit_transform"], [812, 2, 1, "", "get_feature_names_out"], [812, 2, 1, "", "get_params"], [812, 2, 1, "", "set_output"], [812, 2, 1, "", "set_params"], [812, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[813, 2, 1, "", "fit"], [813, 2, 1, "", "fit_transform"], [813, 2, 1, "", "get_feature_names_out"], [813, 2, 1, "", "get_params"], [813, 2, 1, "", "inverse_transform"], [813, 2, 1, "", "set_output"], [813, 2, 1, "", "set_params"], [813, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[814, 2, 1, "", "fit"], [814, 2, 1, "", "fit_transform"], [814, 2, 1, "", "get_feature_names_out"], [814, 2, 1, "", "get_params"], [814, 2, 1, "", "inverse_transform"], [814, 2, 1, "", "set_output"], [814, 2, 1, "", "set_params"], [814, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[815, 2, 1, "", "fit"], [815, 2, 1, "", "fit_transform"], [815, 2, 1, "", "get_feature_names_out"], [815, 2, 1, "", "get_params"], [815, 2, 1, "", "set_output"], [815, 2, 1, "", "set_params"], [815, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[816, 2, 1, "", "fit"], [816, 2, 1, "", "fit_transform"], [816, 2, 1, "", "get_params"], [816, 2, 1, "", "inverse_transform"], [816, 2, 1, "", "set_output"], [816, 2, 1, "", "set_params"], [816, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[817, 2, 1, "", "fit"], [817, 2, 1, "", "fit_transform"], [817, 2, 1, "", "get_params"], [817, 2, 1, "", "inverse_transform"], [817, 2, 1, "", "set_output"], [817, 2, 1, "", "set_params"], [817, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[818, 2, 1, "", "fit"], [818, 2, 1, "", "fit_transform"], [818, 2, 1, "", "get_feature_names_out"], [818, 2, 1, "", "get_params"], [818, 2, 1, "", "inverse_transform"], [818, 2, 1, "", "partial_fit"], [818, 2, 1, "", "set_output"], [818, 2, 1, "", "set_params"], [818, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[819, 2, 1, "", "fit"], [819, 2, 1, "", "fit_transform"], [819, 2, 1, "", "get_feature_names_out"], [819, 2, 1, "", "get_params"], [819, 2, 1, "", "inverse_transform"], [819, 2, 1, "", "partial_fit"], [819, 2, 1, "", "set_output"], [819, 2, 1, "", "set_params"], [819, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[820, 2, 1, "", "fit"], [820, 2, 1, "", "fit_transform"], [820, 2, 1, "", "get_params"], [820, 2, 1, "", "inverse_transform"], [820, 2, 1, "", "set_output"], [820, 2, 1, "", "set_params"], [820, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[821, 2, 1, "", "fit"], [821, 2, 1, "", "fit_transform"], [821, 2, 1, "", "get_feature_names_out"], [821, 2, 1, "", "get_params"], [821, 2, 1, "", "set_output"], [821, 2, 1, "", "set_params"], [821, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[822, 2, 1, "", "fit"], [822, 2, 1, "", "fit_transform"], [822, 2, 1, "", "get_feature_names_out"], [822, 2, 1, "", "get_params"], [822, 3, 1, "", "infrequent_categories_"], [822, 2, 1, "", "inverse_transform"], [822, 2, 1, "", "set_output"], [822, 2, 1, "", "set_params"], [822, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[823, 2, 1, "", "fit"], [823, 2, 1, "", "fit_transform"], [823, 2, 1, "", "get_feature_names_out"], [823, 2, 1, "", "get_params"], [823, 3, 1, "", "infrequent_categories_"], [823, 2, 1, "", "inverse_transform"], [823, 2, 1, "", "set_output"], [823, 2, 1, "", "set_params"], [823, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[824, 2, 1, "", "fit"], [824, 2, 1, "", "fit_transform"], [824, 2, 1, "", "get_feature_names_out"], [824, 2, 1, "", "get_params"], [824, 3, 1, "", "powers_"], [824, 2, 1, "", "set_output"], [824, 2, 1, "", "set_params"], [824, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[825, 2, 1, "", "fit"], [825, 2, 1, "", "fit_transform"], [825, 2, 1, "", "get_feature_names_out"], [825, 2, 1, "", "get_params"], [825, 2, 1, "", "inverse_transform"], [825, 2, 1, "", "set_output"], [825, 2, 1, "", "set_params"], [825, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[826, 2, 1, "", "fit"], [826, 2, 1, "", "fit_transform"], [826, 2, 1, "", "get_feature_names_out"], [826, 2, 1, "", "get_params"], [826, 2, 1, "", "inverse_transform"], [826, 2, 1, "", "set_output"], [826, 2, 1, "", "set_params"], [826, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[827, 2, 1, "", "fit"], [827, 2, 1, "", "fit_transform"], [827, 2, 1, "", "get_feature_names_out"], [827, 2, 1, "", "get_params"], [827, 2, 1, "", "inverse_transform"], [827, 2, 1, "", "set_output"], [827, 2, 1, "", "set_params"], [827, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[828, 2, 1, "", "fit"], [828, 2, 1, "", "fit_transform"], [828, 2, 1, "", "get_feature_names_out"], [828, 2, 1, "", "get_params"], [828, 2, 1, "", "set_output"], [828, 2, 1, "", "set_params"], [828, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[829, 2, 1, "", "fit"], [829, 2, 1, "", "fit_transform"], [829, 2, 1, "", "get_feature_names_out"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "inverse_transform"], [829, 2, 1, "", "partial_fit"], [829, 2, 1, "", "set_output"], [829, 2, 1, "", "set_params"], [829, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[830, 2, 1, "", "fit"], [830, 2, 1, "", "fit_transform"], [830, 2, 1, "", "get_feature_names_out"], [830, 2, 1, "", "get_params"], [830, 3, 1, "", "infrequent_categories_"], [830, 2, 1, "", "set_output"], [830, 2, 1, "", "set_params"], [830, 2, 1, "", "transform"]], "sklearn.random_projection": [[841, 1, 1, "", "GaussianRandomProjection"], [842, 1, 1, "", "SparseRandomProjection"], [843, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "fit_transform"], [841, 2, 1, "", "get_feature_names_out"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "inverse_transform"], [841, 2, 1, "", "set_output"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "fit_transform"], [842, 2, 1, "", "get_feature_names_out"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "inverse_transform"], [842, 2, 1, "", "set_output"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[844, 1, 1, "", "LabelPropagation"], [845, 1, 1, "", "LabelSpreading"], [846, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "predict_proba"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_params"]], "sklearn.semi_supervised.LabelSpreading": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "predict"], [845, 2, 1, "", "predict_proba"], [845, 2, 1, "", "score"], [845, 2, 1, "", "set_params"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[846, 2, 1, "", "decision_function"], [846, 2, 1, "", "fit"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "predict_log_proba"], [846, 2, 1, "", "predict_proba"], [846, 2, 1, "", "score"], [846, 2, 1, "", "set_params"]], "sklearn.svm": [[849, 1, 1, "", "LinearSVC"], [850, 1, 1, "", "LinearSVR"], [851, 1, 1, "", "NuSVC"], [852, 1, 1, "", "NuSVR"], [853, 1, 1, "", "OneClassSVM"], [854, 1, 1, "", "SVC"], [855, 1, 1, "", "SVR"], [856, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[849, 2, 1, "", "decision_function"], [849, 2, 1, "", "densify"], [849, 2, 1, "", "fit"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "predict"], [849, 2, 1, "", "score"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "score"], [850, 2, 1, "", "set_params"]], "sklearn.svm.NuSVC": [[851, 3, 1, "", "coef_"], [851, 2, 1, "", "decision_function"], [851, 2, 1, "", "fit"], [851, 2, 1, "", "get_params"], [851, 3, 1, "", "n_support_"], [851, 2, 1, "", "predict"], [851, 2, 1, "", "predict_log_proba"], [851, 2, 1, "", "predict_proba"], [851, 3, 1, "", "probA_"], [851, 3, 1, "", "probB_"], [851, 2, 1, "", "score"], [851, 2, 1, "", "set_params"]], "sklearn.svm.NuSVR": [[852, 3, 1, "", "coef_"], [852, 2, 1, "", "fit"], [852, 2, 1, "", "get_params"], [852, 3, 1, "", "n_support_"], [852, 2, 1, "", "predict"], [852, 2, 1, "", "score"], [852, 2, 1, "", "set_params"]], "sklearn.svm.OneClassSVM": [[853, 3, 1, "", "coef_"], [853, 2, 1, "", "decision_function"], [853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_predict"], [853, 2, 1, "", "get_params"], [853, 3, 1, "", "n_support_"], [853, 2, 1, "", "predict"], [853, 2, 1, "", "score_samples"], [853, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[854, 3, 1, "", "coef_"], [854, 2, 1, "", "decision_function"], [854, 2, 1, "", "fit"], [854, 2, 1, "", "get_params"], [854, 3, 1, "", "n_support_"], [854, 2, 1, "", "predict"], [854, 2, 1, "", "predict_log_proba"], [854, 2, 1, "", "predict_proba"], [854, 3, 1, "", "probA_"], [854, 3, 1, "", "probB_"], [854, 2, 1, "", "score"], [854, 2, 1, "", "set_params"]], "sklearn.svm.SVR": [[855, 3, 1, "", "coef_"], [855, 2, 1, "", "fit"], [855, 2, 1, "", "get_params"], [855, 3, 1, "", "n_support_"], [855, 2, 1, "", "predict"], [855, 2, 1, "", "score"], [855, 2, 1, "", "set_params"]], "sklearn.tree": [[857, 1, 1, "", "DecisionTreeClassifier"], [858, 1, 1, "", "DecisionTreeRegressor"], [859, 1, 1, "", "ExtraTreeClassifier"], [860, 1, 1, "", "ExtraTreeRegressor"], [861, 4, 1, "", "export_graphviz"], [862, 4, 1, "", "export_text"], [863, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[857, 2, 1, "", "apply"], [857, 2, 1, "", "cost_complexity_pruning_path"], [857, 2, 1, "", "decision_path"], [857, 3, 1, "", "feature_importances_"], [857, 2, 1, "", "fit"], [857, 2, 1, "", "get_depth"], [857, 2, 1, "", "get_n_leaves"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "predict"], [857, 2, 1, "", "predict_log_proba"], [857, 2, 1, "", "predict_proba"], [857, 2, 1, "", "score"], [857, 2, 1, "", "set_params"]], "sklearn.tree.DecisionTreeRegressor": [[858, 2, 1, "", "apply"], [858, 2, 1, "", "cost_complexity_pruning_path"], [858, 2, 1, "", "decision_path"], [858, 3, 1, "", "feature_importances_"], [858, 2, 1, "", "fit"], [858, 2, 1, "", "get_depth"], [858, 2, 1, "", "get_n_leaves"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "predict"], [858, 2, 1, "", "score"], [858, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeClassifier": [[859, 2, 1, "", "apply"], [859, 2, 1, "", "cost_complexity_pruning_path"], [859, 2, 1, "", "decision_path"], [859, 3, 1, "", "feature_importances_"], [859, 2, 1, "", "fit"], [859, 2, 1, "", "get_depth"], [859, 2, 1, "", "get_n_leaves"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "predict"], [859, 2, 1, "", "predict_log_proba"], [859, 2, 1, "", "predict_proba"], [859, 2, 1, "", "score"], [859, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeRegressor": [[860, 2, 1, "", "apply"], [860, 2, 1, "", "cost_complexity_pruning_path"], [860, 2, 1, "", "decision_path"], [860, 3, 1, "", "feature_importances_"], [860, 2, 1, "", "fit"], [860, 2, 1, "", "get_depth"], [860, 2, 1, "", "get_n_leaves"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "predict"], [860, 2, 1, "", "score"], [860, 2, 1, "", "set_params"]], "sklearn.utils": [[864, 1, 1, "", "Bunch"], [865, 4, 1, "", "_safe_indexing"], [867, 4, 1, "", "as_float_array"], [868, 4, 1, "", "assert_all_finite"], [869, 4, 1, "", "check_X_y"], [870, 4, 1, "", "check_array"], [871, 4, 1, "", "check_consistent_length"], [872, 4, 1, "", "check_random_state"], [873, 4, 1, "", "check_scalar"], [876, 4, 1, "", "deprecated"], [882, 4, 1, "", "estimator_html_repr"], [889, 4, 1, "", "gen_batches"], [890, 4, 1, "", "gen_even_slices"], [892, 4, 1, "", "indexable"], [897, 4, 1, "", "murmurhash3_32"], [900, 4, 1, "", "parallel_backend"], [902, 4, 1, "", "register_parallel_backend"], [903, 4, 1, "", "resample"], [904, 4, 1, "", "safe_mask"], [905, 4, 1, "", "safe_sqr"], [906, 4, 1, "", "shuffle"]], "sklearn.utils.Bunch": [[864, 2, 1, "", "clear"], [864, 2, 1, "", "copy"], [864, 2, 1, "", "fromkeys"], [864, 2, 1, "", "get"], [864, 2, 1, "", "items"], [864, 2, 1, "", "keys"], [864, 2, 1, "", "pop"], [864, 2, 1, "", "popitem"], [864, 2, 1, "", "setdefault"], [864, 2, 1, "", "update"], [864, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[866, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[874, 4, 1, "", "compute_class_weight"], [875, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[877, 4, 1, "", "all_displays"], [878, 4, 1, "", "all_estimators"], [879, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[880, 4, 1, "", "check_estimator"], [881, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[883, 4, 1, "", "density"], [884, 4, 1, "", "fast_logdet"], [885, 4, 1, "", "randomized_range_finder"], [886, 4, 1, "", "randomized_svd"], [887, 4, 1, "", "safe_sparse_dot"], [888, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[891, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metaestimators": [[893, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[894, 4, 1, "", "is_multilabel"], [895, 4, 1, "", "type_of_target"], [896, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[898, 1, 1, "", "Parallel"], [899, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[898, 2, 1, "", "dispatch_next"], [898, 2, 1, "", "dispatch_one_batch"], [898, 2, 1, "", "format"], [898, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[901, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[907, 4, 1, "", "incr_mean_variance_axis"], [908, 4, 1, "", "inplace_column_scale"], [909, 4, 1, "", "inplace_csr_column_scale"], [910, 4, 1, "", "inplace_row_scale"], [911, 4, 1, "", "inplace_swap_column"], [912, 4, 1, "", "inplace_swap_row"], [913, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[914, 4, 1, "", "inplace_csr_row_normalize_l1"], [915, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[916, 4, 1, "", "check_is_fitted"], [917, 4, 1, "", "check_memory"], [918, 4, 1, "", "check_symmetric"], [919, 4, 1, "", "column_or_1d"], [920, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 349], "u": 0, "histori": [0, 971], "govern": [0, 352], "author": [0, 973], "contributor": [0, 337, 338, 352, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "experi": [0, 33, 337, 352], "team": [0, 337, 352], "commun": [0, 338, 352], "emeritu": 0, "core": [0, 8, 326, 337, 342, 344, 349, 352, 371, 934], "develop": [0, 336, 339, 340, 341, 342, 345, 346, 347, 352, 921], "cite": 0, "scikit": [0, 230, 281, 282, 283, 284, 285, 286, 323, 324, 336, 339, 340, 342, 343, 349, 352, 354, 950, 952, 953, 956, 958, 959, 964, 967], "learn": [0, 5, 12, 46, 85, 88, 134, 148, 150, 151, 152, 156, 198, 199, 200, 201, 212, 230, 237, 263, 269, 281, 282, 283, 284, 285, 286, 288, 289, 290, 323, 324, 326, 334, 336, 338, 339, 340, 342, 343, 349, 352, 354, 362, 368, 370, 927, 929, 937, 945, 950, 952, 953, 954, 956, 958, 959, 961, 964, 965, 966, 967, 968], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 78, 90, 94, 210, 338, 340, 349, 362, 944, 949, 952], "infrastructur": 0, "support": [0, 23, 108, 148, 173, 279, 281, 282, 283, 284, 286, 294, 297, 306, 349, 354, 359, 361, 362, 370, 947, 955, 965, 979], "exampl": [3, 6, 9, 49, 54, 69, 79, 92, 114, 142, 148, 175, 176, 304, 308, 326, 332, 333, 343, 349, 353, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 385, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 413, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 433, 434, 435, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 452, 453, 455, 457, 461, 462, 463, 464, 465, 466, 470, 471, 473, 474, 475, 476, 477, 478, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 532, 533, 535, 538, 539, 540, 541, 542, 544, 545, 548, 550, 551, 553, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 568, 569, 570, 573, 574, 576, 578, 579, 581, 582, 583, 584, 585, 586, 590, 591, 592, 594, 595, 596, 597, 599, 600, 603, 604, 606, 607, 608, 609, 610, 613, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 639, 640, 641, 642, 643, 644, 648, 651, 652, 653, 654, 655, 656, 657, 658, 660, 663, 664, 668, 669, 670, 677, 679, 684, 687, 688, 691, 692, 695, 698, 699, 700, 702, 703, 705, 707, 728, 729, 732, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 778, 780, 782, 784, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 802, 805, 806, 807, 808, 809, 810, 813, 814, 816, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 835, 838, 842, 843, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 863, 864, 872, 881, 883, 890, 893, 906, 916, 921, 924, 926, 927, 928, 929, 931, 932, 933, 935, 936, 937, 938, 939, 940, 942, 944, 945, 946, 947, 948, 949, 958, 964, 965, 966, 970, 973], "base": [3, 4, 77, 105, 106, 133, 148, 212, 281, 282, 284, 286, 338, 362, 363, 367, 370, 372, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 928, 940, 982, 983, 985, 986, 987, 988, 989], "real": [3, 9, 69, 98, 148, 333], "world": [3, 69, 148, 333], "dataset": [3, 4, 5, 8, 22, 23, 25, 29, 31, 40, 53, 57, 64, 77, 79, 80, 81, 82, 83, 85, 94, 107, 108, 118, 123, 124, 135, 137, 139, 140, 142, 144, 148, 150, 151, 152, 158, 161, 168, 179, 181, 188, 197, 199, 200, 206, 211, 216, 233, 241, 242, 292, 293, 296, 311, 316, 330, 331, 332, 333, 334, 335, 343, 349, 362, 373, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 958, 964, 965, 967, 981, 982, 983, 984, 985, 986, 987, 988, 989], "time": [4, 109, 173, 211, 212, 311, 367], "relat": [4, 8, 332, 338, 940, 952, 980], "featur": [4, 47, 50, 68, 90, 104, 105, 106, 108, 112, 115, 116, 127, 129, 131, 132, 133, 148, 153, 154, 156, 158, 173, 176, 197, 211, 216, 236, 271, 274, 275, 278, 279, 281, 283, 284, 302, 311, 312, 324, 326, 338, 342, 362, 364, 370, 371, 372, 922, 940, 942, 949, 966, 967, 976, 977, 978, 979, 980], "engin": [4, 153, 952, 956], "data": [4, 7, 9, 12, 16, 22, 24, 34, 43, 45, 46, 52, 53, 58, 59, 61, 62, 64, 69, 71, 73, 75, 77, 78, 86, 87, 90, 91, 92, 93, 98, 100, 105, 106, 112, 114, 118, 129, 132, 133, 140, 141, 143, 147, 150, 153, 154, 156, 159, 163, 165, 172, 173, 207, 212, 215, 218, 226, 230, 232, 236, 241, 242, 244, 245, 248, 265, 271, 273, 277, 278, 279, 288, 299, 302, 306, 312, 313, 320, 324, 326, 333, 343, 349, 351, 363, 364, 366, 367, 372, 373, 942, 946, 956, 958, 961, 964, 966, 967], "explor": 4, "bike": [4, 152], "share": [4, 152], "demand": 4, "cross": [4, 76, 77, 123, 124, 132, 148, 168, 230, 231, 233, 234, 238, 240, 245, 302, 320, 338, 362, 366, 367, 921, 928, 962], "valid": [4, 123, 124, 132, 168, 210, 230, 231, 233, 234, 238, 240, 245, 250, 302, 320, 324, 340, 347, 362, 367, 916, 917, 918, 919, 920, 921, 927, 928, 935, 962], "gradient": [4, 108, 109, 110, 111, 112, 113, 152, 179, 187, 193, 281, 282, 284, 286, 370, 928, 946], "boost": [4, 108, 109, 110, 111, 112, 113, 152, 179, 281, 282, 284, 286, 370], "naiv": [4, 22, 23, 362, 934], "linear": [4, 23, 30, 31, 111, 135, 148, 151, 157, 158, 175, 179, 182, 185, 199, 200, 211, 282, 298, 305, 306, 324, 347, 349, 362, 926, 928, 929, 930, 942, 965], "regress": [4, 67, 69, 77, 78, 100, 111, 112, 121, 135, 140, 141, 142, 143, 158, 159, 162, 168, 170, 171, 172, 175, 177, 179, 181, 194, 196, 197, 209, 212, 265, 306, 317, 318, 334, 362, 364, 370, 373, 923, 925, 928, 932, 933, 935, 936, 946, 947, 948, 965], "step": [4, 217, 350, 364], "categori": [4, 285, 942], "trigonometr": 4, "period": [4, 180], "spline": [4, 180, 284, 942], "qualit": 4, "analysi": [4, 30, 31, 55, 85, 91, 93, 96, 111, 221, 237, 238, 245, 261, 262, 263, 311, 362, 366, 368, 926, 935, 949, 966, 967], "impact": [4, 56, 988, 989], "model": [4, 7, 11, 52, 69, 77, 86, 93, 98, 105, 106, 108, 112, 114, 132, 133, 135, 140, 148, 151, 152, 153, 156, 157, 158, 167, 168, 173, 179, 182, 197, 207, 212, 216, 220, 222, 226, 227, 228, 234, 235, 237, 242, 265, 271, 278, 282, 284, 306, 311, 324, 340, 349, 350, 352, 357, 358, 362, 367, 921, 927, 928, 931, 932, 934, 936, 937, 958, 962, 965, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "predict": [4, 10, 22, 78, 100, 111, 121, 136, 150, 159, 179, 212, 215, 231, 242, 288, 324, 349, 350, 366, 367, 373, 932, 943, 958, 965], "pairwis": [4, 235, 362, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 930], "interact": [4, 152, 286, 370, 965], "polynomi": [4, 156, 158, 159, 180, 924, 928, 930, 942, 965], "non": [4, 14, 85, 111, 174, 179, 199, 240, 298, 305, 306, 368, 928, 942], "kernel": [4, 5, 90, 135, 140, 141, 143, 144, 148, 155, 156, 211, 212, 257, 258, 266, 283, 295, 298, 303, 306, 362, 368, 369, 373, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 924, 925, 930, 942, 947, 965], "conclud": [4, 98, 203], "remark": [4, 52, 98, 203, 210], "imag": [5, 43, 46, 49, 61, 88, 332, 362, 371, 534, 535, 536, 537, 538], "denois": [5, 88], "us": [5, 6, 12, 16, 44, 85, 86, 88, 115, 116, 118, 166, 182, 193, 195, 235, 239, 244, 274, 306, 311, 312, 320, 326, 339, 343, 344, 346, 349, 367, 368, 370, 371, 372, 377, 385, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 413, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 433, 434, 435, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 452, 453, 455, 457, 461, 462, 463, 464, 465, 466, 470, 471, 473, 474, 475, 476, 477, 478, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 532, 533, 535, 538, 539, 540, 541, 542, 544, 545, 548, 550, 551, 553, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 568, 569, 570, 573, 574, 576, 578, 579, 581, 582, 583, 584, 585, 586, 590, 591, 592, 594, 595, 596, 597, 599, 600, 603, 604, 606, 607, 608, 609, 610, 613, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 639, 640, 641, 642, 643, 644, 648, 651, 652, 653, 654, 655, 656, 657, 658, 660, 663, 664, 668, 669, 670, 677, 679, 684, 687, 688, 691, 692, 695, 698, 699, 700, 702, 703, 705, 707, 728, 729, 732, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 778, 780, 782, 784, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 802, 805, 806, 807, 808, 809, 810, 813, 814, 816, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 835, 838, 842, 843, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 863, 864, 872, 881, 883, 890, 893, 906, 916, 926, 928, 929, 932, 936, 946, 947, 948, 956, 965, 967, 983], "pca": [5, 53, 67, 85, 86, 89, 90, 91, 92, 93, 94, 278, 368, 492, 949, 966], "refer": [5, 11, 23, 25, 73, 74, 88, 102, 153, 156, 167, 235, 240, 241, 266, 332, 333, 335, 360, 361, 362, 363, 365, 366, 367, 368, 370, 371, 372, 373, 921, 922, 924, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 944, 945, 946, 947, 948], "load": [5, 7, 16, 46, 53, 106, 108, 112, 123, 133, 153, 172, 197, 200, 207, 211, 218, 236, 244, 245, 278, 279, 299, 302, 311, 312, 313, 331, 332, 343, 349, 371, 958, 966, 967], "via": [5, 49, 167, 168, 197, 370, 924], "openml": [5, 279, 281, 332], "basi": [5, 144, 373, 924, 928, 965], "reconstruct": [5, 13, 88], "test": [5, 71, 128, 238, 241, 248, 311, 315, 336, 338, 340, 346, 347, 367, 958, 965, 967], "face": [6, 46, 85, 214, 333, 956, 963], "recognit": [6, 333, 335, 963], "eigenfac": [6, 85, 963], "svm": [6, 126, 129, 130, 156, 193, 211, 284, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 362, 849, 850, 851, 852, 853, 854, 855, 856, 928, 938, 946, 965, 981, 982, 983, 984, 985, 986, 987, 988], "complex": [7, 208, 217, 234, 237, 290, 315, 324, 363, 928, 929, 935, 936, 946, 947, 948], "influenc": [7, 10, 324], "benchmark": [7, 10, 53, 311], "choos": [7, 921, 958, 960, 962], "paramet": [7, 71, 111, 233, 283, 299, 307, 338, 340, 350, 351, 362, 364, 370, 921, 928, 932, 947, 958, 962, 967], "run": [7, 53, 239], "code": [7, 85, 95, 338, 340, 343, 344, 346, 368, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "plot": [7, 8, 10, 22, 27, 31, 34, 37, 43, 45, 46, 52, 58, 59, 61, 62, 71, 75, 77, 82, 83, 86, 87, 91, 98, 100, 107, 112, 114, 118, 119, 120, 121, 123, 132, 147, 152, 158, 159, 163, 171, 172, 173, 183, 184, 188, 200, 207, 211, 215, 216, 218, 226, 231, 232, 237, 239, 242, 244, 248, 250, 271, 279, 281, 283, 284, 288, 296, 297, 302, 311, 316, 345, 362, 927, 939, 970], "result": [7, 8, 34, 43, 45, 46, 52, 53, 58, 59, 62, 71, 73, 75, 86, 87, 98, 100, 118, 121, 147, 156, 184, 212, 215, 239, 248, 279, 306, 312, 320, 921], "conclus": [7, 135, 168], "out": [8, 110, 326, 346, 367, 371, 921, 928, 934], "classif": [8, 24, 26, 27, 29, 30, 64, 82, 125, 136, 137, 138, 139, 143, 148, 195, 213, 238, 241, 242, 245, 256, 264, 271, 281, 287, 292, 311, 334, 362, 370, 373, 928, 932, 933, 935, 936, 946, 947, 948, 965, 967], "text": [8, 148, 208, 236, 292, 310, 311, 312, 313, 333, 362, 371, 539, 540, 541, 542, 967], "document": [8, 18, 148, 283, 284, 310, 311, 312, 338, 952, 953, 955, 973, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "reuter": 8, "routin": [8, 325, 347], "main": [8, 179], "outlier": [9, 161, 196, 206, 215, 259, 260, 273, 362, 928, 938, 942], "detect": [9, 206, 215, 232, 259, 260, 932, 938, 947], "set": [9, 69, 71, 92, 118, 147, 242, 299, 315, 349, 367, 928, 958, 964, 965, 967], "first": [9, 33, 338], "second": [9, 33], "latenc": [10, 324], "helper": [10, 144, 200, 347], "function": [10, 31, 144, 169, 183, 184, 189, 200, 215, 230, 248, 283, 302, 313, 347, 362, 367, 370, 373, 924, 928, 932, 947, 965], "bulk": [10, 324], "atom": [10, 324], "speed": [10, 344], "variou": [10, 48, 186, 204], "regressor": [10, 100, 111, 158, 281, 284, 362, 370], "n_featur": 10, "throughput": [10, 324], "speci": [11, 266], "distribut": [11, 197, 199, 266, 277, 354, 929, 942], "visual": [12, 53, 96, 207, 212, 218, 230, 270, 282, 299, 362, 363, 364, 932, 970], "stock": [12, 963], "market": [12, 963], "structur": [12, 35, 43, 62, 143, 290, 319, 963], "retriev": [12, 281], "from": [12, 88, 133, 153, 279, 281, 325, 332, 336, 349, 362, 371, 928, 932, 958, 965, 966, 967, 983], "internet": 12, "graph": [12, 281, 347, 349, 363, 371, 891], "cluster": [12, 18, 20, 32, 33, 34, 35, 36, 37, 40, 41, 43, 45, 48, 51, 53, 55, 58, 59, 60, 61, 62, 85, 148, 285, 312, 334, 360, 362, 363, 368, 374, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 665, 666, 932, 966, 981, 982, 983, 984, 985, 986, 987, 988, 989], "affin": [12, 34, 363, 930], "propag": [12, 34, 288, 289, 290, 363, 945], "embed": [12, 48, 199, 200, 210, 263, 370, 929], "2d": [12, 48, 87, 94, 152], "space": [12, 90, 364, 921, 929], "compress": [13, 49, 324, 372], "sens": [13, 372], "tomographi": 13, "l1": [13, 170, 172, 195, 307, 372], "prior": [13, 144, 221], "lasso": [13, 163, 164, 165, 166, 167, 168, 173, 282, 603, 928], "topic": 14, "extract": [14, 68, 88, 197, 236, 312, 324, 326, 362, 371, 967], "neg": [14, 85, 174, 368, 928], "matrix": [14, 16, 143, 160, 229, 362, 363, 368, 932, 947], "factor": [14, 85, 93, 96, 259, 260, 368, 938], "latent": [14, 77, 368], "dirichlet": [14, 368, 931], "alloc": [14, 368], "libsvm": [15, 332], "gui": 15, "wikipedia": 16, "princip": [16, 78, 91, 368, 949, 966], "eigenvector": 16, "download": [16, 118, 147, 332], "alreadi": 16, "disk": 16, "redirect": 16, "file": [16, 354, 371, 967], "comput": [16, 34, 43, 45, 58, 59, 62, 71, 172, 184, 248, 323, 324, 363, 364, 367, 939], "adjac": 16, "singular": [16, 368], "vector": [16, 23, 49, 148, 294, 297, 306, 311, 313, 333, 362, 371, 947, 965, 966], "random": [16, 85, 103, 116, 117, 153, 154, 210, 218, 241, 243, 320, 340, 347, 362, 367, 368, 370, 901, 921, 928, 944, 949], "svd": [16, 85, 368], "central": 16, "score": [16, 77, 109, 123, 132, 147, 158, 226, 234, 241, 242, 302, 363, 367, 927, 932, 947, 962], "biclust": [17, 18, 19, 148, 334, 360, 362], "spectral": [18, 19, 20, 61, 199, 360, 363, 929], "co": [18, 20, 360], "algorithm": [18, 19, 20, 34, 40, 45, 58, 59, 60, 199, 206, 344, 349, 926, 928, 931, 933, 935, 936, 940, 948, 965], "A": [19, 20, 43, 53, 58, 179, 284, 337, 344, 357, 367, 961, 964], "demo": [19, 20, 34, 43, 45, 53, 58, 60], "calibr": [21, 22, 23, 24, 25, 111, 148, 179, 361, 362, 389, 390, 391, 982, 983, 985, 986, 987, 988, 989], "probabl": [22, 23, 24, 27, 120, 138, 361, 362, 370, 947], "classifi": [22, 23, 25, 28, 121, 162, 217, 232, 252, 281, 293, 296, 299, 311, 319, 361, 362, 370, 926, 935, 965, 967], "gener": [22, 31, 34, 43, 45, 52, 58, 59, 61, 62, 71, 73, 75, 82, 83, 86, 87, 88, 105, 114, 129, 132, 135, 141, 142, 144, 148, 157, 158, 159, 163, 173, 179, 181, 212, 226, 232, 248, 265, 271, 282, 288, 306, 320, 334, 338, 351, 362, 368, 370, 928, 942, 953, 962], "synthet": [22, 69, 158, 232, 343], "gaussian": [22, 23, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 220, 221, 222, 225, 226, 227, 273, 362, 373, 931, 934, 942, 944], "bay": [22, 23, 362, 934], "curv": [23, 25, 159, 212, 218, 227, 232, 237, 242, 244, 250, 361, 927], "summari": [23, 168, 312, 313, 973, 974, 975, 976, 977, 978, 979, 980], "3": [24, 162, 967, 981, 982, 987, 989], "class": [24, 33, 99, 101, 120, 162, 188, 193, 238, 242, 244, 284, 298, 301, 351, 362, 367, 370, 371, 931, 932, 935, 938, 946, 947, 973, 974], "fit": [24, 52, 86, 93, 105, 106, 109, 111, 112, 140, 158, 159, 160, 173, 176, 181, 185, 242, 265, 306, 320, 340, 350, 370, 934, 938, 958], "compar": [24, 38, 40, 57, 71, 77, 109, 117, 129, 156, 158, 165, 181, 186, 206, 212, 235, 243, 261, 269, 273, 279, 349], "comparison": [25, 28, 39, 59, 73, 94, 108, 128, 135, 199, 200, 212, 235, 246, 313, 363, 373, 928], "recogn": 29, "hand": 29, "written": 29, "digit": [29, 48, 53, 80, 124, 125, 200, 271, 288, 289, 335, 964], "normal": [30, 156, 179, 273, 277, 362, 821, 836, 932, 942], "ledoit": [30, 72, 365], "wolf": [30, 72, 365], "oa": [30, 71, 72, 376, 426], "discrimin": [30, 31, 362, 926], "quadrat": [31, 373, 926], "covari": [31, 70, 71, 73, 74, 75, 148, 223, 362, 365, 376, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 926, 981, 985, 986, 987], "ellipsoid": [31, 222], "colormap": 31, "adjust": 33, "chanc": 33, "perform": [33, 39, 238, 278, 283, 285, 288, 312, 324, 338, 339, 363, 367, 371, 967], "evalu": [33, 53, 56, 74, 179, 215, 236, 239, 271, 279, 312, 350, 358, 360, 363, 367, 370, 921, 927, 932, 967], "defin": [33, 43, 53, 62, 199, 215, 230, 232, 233, 313, 932], "list": [33, 955], "metric": [33, 36, 111, 239, 362, 363, 367, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 921, 929, 930, 932, 935, 981, 982, 983, 984, 985, 986, 987, 988, 989], "fix": [33, 342, 973, 976, 977, 978, 979, 980, 986], "ground": [33, 158], "truth": [33, 158], "label": [33, 242, 288, 289, 290, 333, 334, 363, 367, 370, 932, 943, 945], "grow": 33, "number": [33, 55, 108, 132, 247, 324, 340, 921, 922, 931], "vari": [33, 268, 291, 363], "sampl": [34, 58, 71, 86, 87, 129, 160, 192, 212, 236, 248, 265, 282, 306, 309, 332, 347, 351, 362, 363, 370, 928], "agglom": [35, 36, 48, 966], "without": [35, 109, 261, 311], "differ": [36, 40, 57, 71, 144, 152, 273, 276, 279, 296, 340, 349, 363, 928, 965], "hierarch": [37, 43, 57, 62, 363, 966], "dendrogram": 37, "birch": [38, 363, 394], "minibatchkmean": [38, 59, 85, 400], "bisect": [39, 363], "k": [39, 41, 44, 52, 53, 54, 56, 59, 62, 77, 278, 312, 363, 367, 932, 935, 942, 965, 966], "mean": [39, 41, 44, 52, 53, 54, 56, 58, 59, 105, 106, 147, 153, 312, 363, 932, 942, 966], "regular": [39, 71, 113, 151, 172, 183, 184, 268, 307, 928, 936], "toi": [40, 57, 206, 335], "segment": [42, 61], "pictur": 42, "greek": 42, "coin": [42, 43], "region": [42, 235], "ward": [43, 62, 363, 966], "an": [43, 54, 147, 160, 168, 215, 263, 281, 285, 349, 371, 921, 938, 958, 964, 965], "color": 44, "quantiz": [44, 49, 966], "dbscan": [45, 363, 374, 396], "onlin": [46, 186, 284, 285, 946], "dictionari": [46, 85, 88, 95, 368], "part": [46, 372], "agglomer": [47, 50, 949, 966], "origin": [49, 90, 241, 263, 273], "encod": [49, 108, 279, 942, 943], "strategi": [49, 233, 269, 276, 326, 362, 363, 932], "memori": [49, 324, 344, 346, 363], "footprint": 49, "v": [50, 62, 71, 72, 74, 78, 90, 132, 153, 161, 171, 197, 238, 244, 248, 249, 315, 363, 922, 942, 958], "univari": [50, 77, 129, 302, 372, 922], "select": [50, 55, 66, 93, 123, 127, 129, 132, 133, 148, 167, 168, 173, 226, 228, 302, 349, 358, 362, 367, 372, 921, 928, 931, 962, 979], "induct": 51, "demonstr": [52, 239, 276, 288], "assumpt": 52, "possibl": [52, 343], "solut": 52, "final": [52, 135], "handwritten": [53, 200, 335], "our": [53, 230, 233, 338], "reduc": [53, 324], "initi": [54, 56, 224, 931], "silhouett": [55, 363], "kmean": [55, 59, 282, 398], "empir": [56, 74, 210, 365], "linkag": [57, 363], "method": [57, 68, 77, 97, 135, 148, 199, 201, 224, 251, 351, 362, 363, 370, 924, 931, 938, 939, 966], "shift": [58, 363], "meanshift": [58, 399], "establish": [59, 156], "pariti": 59, "between": [59, 246], "optic": [60, 335, 363, 401], "four": 61, "circl": 61, "two": [61, 101, 165, 216, 235], "unstructur": 62, "we": 62, "ar": [62, 284, 349], "nearest": [62, 148, 253, 254, 255, 256, 261, 264, 265, 281, 362, 922, 935, 965], "neighbor": [62, 148, 199, 253, 254, 255, 256, 261, 265, 278, 281, 362, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 922, 929, 935, 965, 981, 982, 983, 985, 986, 987, 988, 989], "10": [62, 973], "pipelin": [63, 64, 66, 67, 118, 130, 148, 151, 208, 217, 236, 279, 302, 340, 349, 350, 362, 364, 372, 808, 809, 810, 811, 949, 963, 967, 981, 982, 983, 984, 985, 986, 987, 988, 989], "composit": [63, 148, 362, 364, 921], "estim": [63, 70, 71, 72, 73, 74, 75, 102, 108, 110, 117, 141, 147, 148, 158, 182, 185, 208, 214, 215, 225, 243, 257, 258, 266, 281, 282, 283, 286, 320, 340, 349, 350, 351, 359, 362, 364, 365, 367, 369, 370, 373, 921, 922, 926, 928, 931, 932, 947, 952, 960, 962, 964, 974, 981, 982, 983], "column": [64, 65, 217], "transform": [64, 65, 66, 69, 77, 104, 116, 217, 283, 284, 285, 330, 349, 350, 364, 366, 367, 935, 942, 943, 944, 966], "heterogen": [64, 364], "sourc": [64, 86, 336], "20": [64, 311, 333, 967, 981], "newsgroup": [64, 311, 333, 967], "creat": [64, 91, 93, 207, 242, 302, 349], "mix": 65, "type": [65, 221, 340, 351, 363, 958], "dimension": [66, 199, 202, 217, 262, 278, 312, 926, 929, 935, 949, 965], "reduct": [66, 199, 203, 217, 262, 278, 312, 926, 935, 949], "gridsearchcv": [66, 123, 239, 370, 747], "illustr": [66, 139, 144, 263, 373], "cach": [66, 255, 364], "within": 66, "chain": [67, 217, 252, 350, 364], "logist": [67, 162, 169, 170, 171, 172, 194, 195, 928, 965], "concaten": 68, "multipl": [68, 217, 239, 320, 345, 367, 921, 922, 932, 981, 982], "effect": [69, 150, 204, 273, 278, 291, 315, 935], "target": [69, 142, 197, 279, 349, 351, 364, 366, 933, 942, 943], "shrinkag": [71, 365, 370, 926, 965], "ledoitwolf": [71, 424], "max": [71, 932], "likelihood": [71, 158, 159, 238, 932, 937], "approach": [71, 168, 235], "robust": [73, 74, 158, 182, 185, 320, 362, 365, 921, 928], "mahalanobi": [73, 935], "distanc": [73, 362, 935], "relev": [73, 928], "minimum": [74, 365], "determin": [74, 365, 928, 932], "spars": [75, 85, 95, 151, 163, 165, 194, 281, 311, 312, 347, 365, 368, 372, 942, 944, 946], "invers": [75, 365, 944], "decomposit": [76, 77, 84, 85, 102, 148, 334, 362, 366, 368, 375, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 966, 981, 982, 983, 984, 985, 986, 987, 988, 989], "variabl": [77, 150, 151, 325, 349, 362, 965], "canon": [77, 366], "symmetr": 77, "pl": 77, "scatter": 77, "multivari": [77, 922], "respons": [77, 352], "pls2": 77, "pls1": 77, "cca": [77, 433], "mode": [77, 324, 336], "b": 77, "deflat": 77, "compon": [78, 85, 91, 261, 262, 263, 368, 931, 935, 949, 966], "partial": [78, 150, 152, 216, 939], "least": [78, 111, 168, 174, 177, 928], "squar": [78, 111, 144, 174, 177, 373, 924, 928, 930, 932], "The": [78, 80, 81, 150, 151, 179, 204, 210, 233, 242, 333, 342, 367, 371, 931, 932, 944, 965, 966], "one": [78, 108, 216, 928, 932], "power": [78, 179], "iri": [81, 92, 94, 107, 137, 188, 293, 296, 316, 335, 373, 964], "randomli": [82, 83], "multilabel": [83, 213, 334, 347, 362, 932, 933, 958], "prepar": [85, 98, 100, 156, 199, 244, 245, 278, 299, 342], "nmf": [85, 285, 368, 491], "independ": [85, 368, 966], "fastica": [85, 86, 87, 375, 484], "minibatchsparsepca": [85, 368, 490], "center": [85, 942], "fa": [85, 93], "posit": [85, 284], "blind": 86, "separ": [86, 191, 300, 301], "ica": [86, 368, 966], "point": [87, 263], "cloud": 87, "distort": 88, "displai": [88, 184, 207, 208, 217, 286, 346, 970], "patch": [88, 371], "noisi": [88, 142], "them": [88, 337], "increment": [89, 326, 368], "kernelpca": [90, 486], "figur": 91, "probabilist": [93, 136, 368, 373], "lda": [94, 368, 926], "precomput": [95, 160, 281, 368], "rotat": 96, "pattern": 96, "ensembl": [97, 104, 107, 148, 285, 362, 370, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 981, 982, 983, 984, 985, 986, 987, 988, 989], "discret": [98, 114, 143, 274, 275, 942], "versu": [98, 102, 193, 240, 293, 324], "adaboost": [98, 99, 100, 101, 370], "baselin": [98, 156, 179], "samm": 98, "r": 98, "multi": [99, 117, 173, 188, 202, 214, 239, 242, 268, 318, 344, 362, 928, 929, 932, 936, 947, 948], "decis": [99, 100, 107, 114, 119, 148, 211, 293, 314, 315, 316, 317, 318, 319, 349, 352, 362, 948], "tree": [99, 100, 104, 105, 106, 107, 116, 148, 153, 179, 281, 286, 314, 315, 316, 317, 318, 319, 349, 362, 370, 372, 857, 858, 859, 860, 861, 862, 863, 935, 940, 948, 981, 982, 983, 984, 985, 986, 987, 988, 989], "train": [100, 112, 114, 121, 132, 207, 212, 216, 218, 226, 248, 271, 279, 283, 291, 299, 311, 315, 316, 319, 333, 367, 935, 945, 958, 965, 967], "decisiontre": 100, "singl": [102, 118, 197, 207, 334, 363, 922], "bag": [102, 110, 311, 370, 371, 921, 967], "bia": 102, "varianc": [102, 177, 372, 932, 942], "oob": 103, "error": [103, 111, 123, 158, 232, 248, 346, 354, 928, 932], "forest": [103, 105, 106, 117, 153, 154, 218, 333, 370, 938], "import": [105, 106, 112, 133, 153, 154, 211, 278, 281, 370, 940], "decreas": [105, 106, 153], "impur": [105, 106, 153, 315, 940], "permut": [105, 153, 154, 241, 281, 367, 940], "pixel": 106, "parallel": [106, 325, 336, 344, 363, 370, 898, 899, 921], "mdi": [106, 153], "surfac": [107, 211, 316], "categor": [108, 279, 283, 349, 370, 934, 942], "am": 108, "hous": [108, 333], "drop": 108, "hot": 108, "ordin": 108, "nativ": [108, 279, 281, 283], "limit": [108, 135, 324, 354, 357, 371], "split": [108, 283, 320, 367], "earli": [109, 187], "stop": [109, 187, 371, 946], "interv": 111, "quantil": [111, 181, 284, 285, 928], "confid": 111, "tune": [111, 233, 236, 283, 921, 967], "hyper": [111, 233, 283, 362, 921], "preprocess": [112, 118, 148, 151, 152, 215, 217, 272, 313, 320, 349, 362, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 942, 981, 982, 983, 984, 985, 986, 987, 988, 989], "devianc": [112, 932], "isolationforest": [114, 514], "boundari": [114, 119, 293], "path": [114, 166, 172, 184, 319, 354], "length": [114, 354], "monoton": [115, 370], "constraint": [115, 286, 363, 370], "name": [115, 284, 349], "specifi": [115, 349, 921], "hash": [116, 347, 371], "total": [116, 315, 370], "output": [117, 214, 273, 286, 318, 948, 965], "meta": [117, 283, 370], "combin": [118, 207], "predictor": 118, "stack": [118, 281, 370], "make": [118, 121, 147, 338, 342, 352], "measur": [118, 238, 363, 932], "votingclassifi": [119, 120, 370, 520], "calcul": 120, "individu": [121, 152, 283, 939], "vote": [121, 370], "tutori": [122, 148, 951, 959, 961, 967], "exercis": [122, 123, 124, 125, 126, 148, 962, 965, 967], "diabet": [123, 216, 335, 965], "appli": 123, "line": [123, 138], "show": [123, 244], "std": [123, 158], "bonu": 123, "how": [123, 320, 338, 344, 349], "much": 123, "can": [123, 349], "you": [123, 349], "trust": 123, "alpha": [123, 315], "f": [128, 932], "mutual": [128, 363], "inform": [128, 147, 167, 168, 342, 363, 921, 928], "anova": [130, 302], "recurs": [131, 132, 372], "elimin": [131, 132, 372, 921], "sequenti": [133, 372], "coeffici": [133, 151, 158, 183, 184, 363, 932], "discuss": [133, 337], "process": [134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 151, 320, 352, 362, 373, 931, 961], "machin": [134, 148, 150, 151, 152, 271, 294, 346, 362, 937, 947, 958, 965], "ridg": [135, 159, 161, 177, 183, 184, 212, 362, 373, 623, 925, 928], "simpl": [135, 258, 344, 964], "gpc": [136, 137, 138, 139, 373], "iso": [138, 242], "xor": [139, 373], "gpr": [140, 141, 373], "mauna": [140, 373], "loa": [140, 373], "co2": [140, 373], "build": [140, 147, 336, 338, 346, 967], "design": 140, "proper": 140, "extrapol": 140, "interpret": [140, 151, 215, 368, 370], "hyperparamet": [140, 141, 236, 243, 568], "nois": [141, 142, 159, 373], "level": [141, 325, 363, 370, 373], "optimis": 141, "basic": [142, 197, 350, 365, 373], "introductori": 142, "free": 142, "sequenc": [143, 349], "similar": [143, 930, 932], "under": [143, 349], "posterior": 144, "cookbook": 144, "radial": [144, 373, 924, 965], "ration": [144, 373], "quadradt": 144, "exp": [144, 373], "sine": [144, 227, 373], "dot": [144, 373], "product": [144, 197, 346, 349, 373, 572], "mat\u00e9rn": [144, 373], "miss": [145, 146, 147, 148, 281, 370, 922, 942], "valu": [145, 146, 147, 148, 204, 281, 338, 368, 370, 922, 932, 940, 942], "imput": [145, 146, 147, 148, 281, 362, 578, 579, 580, 581, 922, 942, 981, 982, 983, 984, 985, 986, 987, 988, 989], "variant": 146, "iterativeimput": [146, 578, 922], "befor": [147, 342], "replac": 147, "0": [147, 281, 282, 283, 284, 948, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "knn": [147, 281], "iter": [147, 247, 367, 921], "releas": [148, 280, 281, 282, 283, 284, 285, 286, 342, 354, 971, 979], "highlight": [148, 280, 281, 282, 283, 284, 285, 286, 973, 976, 977, 980, 981], "mixtur": [148, 220, 221, 222, 225, 226, 227, 362, 745, 746, 931, 981, 982, 986, 987], "inspect": [148, 149, 353, 362, 582, 583, 584, 585, 982, 983, 984, 985, 986, 987, 988, 989], "approxim": [148, 155, 156, 211, 253, 283, 362, 365, 924], "manifold": [148, 198, 199, 200, 201, 334, 362, 639, 640, 641, 642, 643, 644, 645, 646, 647, 929, 981, 982, 983, 984, 985, 986, 987, 988], "miscellan": [148, 205, 362, 981, 982, 983, 984, 985, 986], "multioutput": [148, 251, 362, 780, 781, 782, 783, 933, 981, 982, 983, 984, 985, 988], "neural": [148, 152, 267, 362, 936, 937], "network": [148, 152, 267, 362, 936, 937], "semi": [148, 287, 288, 292, 293, 362, 945], "supervis": [148, 287, 288, 292, 293, 362, 936, 945, 954, 965], "work": [148, 310, 324, 337, 349, 967], "failur": [150, 921], "infer": [150, 931], "causal": [150, 151], "simul": 150, "hourli": 150, "wage": [150, 151], "descript": 150, "incom": 150, "fulli": 150, "observ": [150, 965, 966], "lesson": [150, 151], "common": [151, 320, 351, 371, 932], "pitfal": [151, 320], "scale": [151, 199, 202, 278, 307, 326, 371, 840, 929, 938, 942, 949], "matter": 151, "check": [151, 237, 281, 346, 981, 982, 983], "problem": [151, 368, 947, 948, 958, 963, 965, 966], "correl": [151, 154, 366, 932, 940], "numer": [151, 325, 340], "wrong": [151, 349], "depend": [152, 216, 336, 939, 973, 986, 987], "condit": [152, 283, 939], "expect": [152, 283, 931, 939], "preprocessor": 152, "1": [152, 176, 284, 285, 286, 349, 967, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "wai": [152, 338, 349], "accuraci": [153, 211, 311, 315, 932], "": [153, 278, 341, 349, 370, 932], "multicollinear": 154, "breast": [154, 335], "cancer": [154, 335], "handl": [154, 922], "scalabl": [156, 237, 282], "partit": 156, "bayesian": [158, 159, 221, 235, 362, 928, 931], "recov": 158, "weight": [158, 160, 192, 270, 282, 309, 370, 371], "true": [158, 159], "margin": [158, 159, 191, 300, 304], "log": [158, 159, 932], "expans": 158, "sinusoid": 159, "cubic": 159, "l": 159, "elast": [160, 163, 164, 928], "net": [160, 163, 164, 928], "gram": [160, 947], "huberregressor": [161, 600], "strong": 161, "signal": [163, 368, 966], "elasticnet": [163, 282, 597], "dens": 165, "implement": [165, 349, 363, 371, 932, 935, 946, 947], "lar": [166, 601, 928], "criteria": [167, 349, 928, 948], "aic": 168, "bic": [168, 226], "criterion": [168, 283, 921, 946], "coordin": 168, "descent": [168, 187, 193, 928, 946], "angl": [168, 928], "penalti": [170, 190, 307], "sparsiti": [170, 176, 371, 965], "multinomi": [171, 195, 928, 934], "One": [171, 193, 244, 284, 298, 367, 938, 946], "rest": [171, 244], "joint": 173, "task": [173, 362, 928, 952], "seri": [173, 367], "onli": [176, 196, 984, 986], "2": [176, 286, 967, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "ordinari": [177, 928], "orthogon": [178, 928], "match": [178, 928], "pursuit": [178, 928], "poisson": [179, 197, 282, 283, 932], "loss": [179, 189, 282, 285, 370, 932], "french": 179, "motor": 179, "third": [179, 354], "parti": [179, 354], "liabil": 179, "claim": [179, 197], "constant": [179, 922], "rank": [179, 362, 932], "takeawai": 179, "interpol": 180, "quantileregressor": [181, 621], "linearregress": [181, 608], "ransac": [182, 928], "l2": [183, 307], "solver": [186, 368, 928], "stochast": [187, 193, 199, 269, 928, 929, 937, 946], "sgd": [188, 189, 190, 191, 192, 928, 946], "convex": 189, "maximum": [191, 300, 937], "hyperplan": [191, 300, 301], "multiclass": [194, 244, 281, 347, 361, 362, 777, 778, 779, 894, 895, 896, 932, 933, 958, 965, 982, 985, 986, 987], "20newgroup": 194, "mnist": [195, 270], "theil": [196, 928], "sen": [196, 928], "y": [196, 349, 366, 943, 945], "direct": 196, "x": 196, "tweedi": [197, 932], "insur": 197, "definit": [197, 271, 939, 983], "frequenc": [197, 967], "sever": [197, 201], "gamma": [197, 932], "pure": 197, "premium": 197, "tweedieregressor": [197, 631], "local": [199, 200, 259, 260, 929, 938], "isomap": [199, 200, 639, 929], "multidimension": 199, "t": [199, 204, 929], "techniqu": 200, "sphere": 201, "swiss": 203, "roll": [203, 340], "And": [203, 352], "hole": 203, "sne": [204, 929], "perplex": 204, "shape": [204, 958], "anomali": 206, "object": [207, 230, 340, 349, 921, 932, 964, 970], "confusionmatrixdisplai": [207, 648], "roccurvedisplai": [207, 653], "precisionrecalldisplai": [207, 651], "compact": 208, "represent": [208, 282, 324, 371, 966], "rich": [208, 282], "html": 208, "isoton": [209, 361, 362, 586, 587, 588, 923, 981, 982, 983, 985, 987, 988], "johnson": [210, 944], "lindenstrauss": [210, 944], "bound": 210, "theoret": [210, 928], "explicit": 211, "map": [211, 277, 942], "rbf": [211, 298, 299, 373, 573, 930, 947, 965], "python": [211, 325, 344, 357, 947, 951, 952, 979], "packag": [211, 952, 985], "svr": [212, 306, 855, 947], "construct": [212, 364], "look": [212, 306], "complet": [214, 363], "advanc": 216, "With": [216, 967], "togeth": [216, 244, 963, 966], "grid": [217, 233, 235, 243, 246, 921, 962, 967], "search": [217, 233, 235, 243, 246, 350, 921, 962, 967], "over": 217, "roc": [218, 232, 244, 245, 281, 932], "api": [218, 219, 281, 284, 286, 325, 340, 345, 351, 359, 362, 373, 973, 974, 975, 976, 977, 978, 979, 980, 983], "svc": [218, 307, 854, 947], "introduc": 219, "set_output": [219, 286, 340], "concentr": 221, "variat": [221, 931], "gmm": [223, 224], "densiti": [225, 257, 258, 266, 369, 883, 947], "best": [226, 339, 349], "confus": [229, 363, 932], "behavior": 230, "indic": 230, "mani": [230, 286, 325, 349], "cv": [230, 320], "tradeoff": [232, 932], "det": [232, 932], "custom": [233, 295, 371, 942, 947], "refit": [233, 958], "balanc": [234, 932], "statist": [235, 952, 961, 964], "frequentist": 235, "practic": [235, 320, 339, 343, 928, 929, 936, 946, 947, 948], "equival": 235, "all": [235, 244, 285, 354, 963, 988, 989], "take": 235, "home": 235, "messag": 235, "ratio": [238, 932], "pre": [238, 320, 350], "post": [238, 315], "invari": 238, "respect": 238, "preval": 238, "cross_val_scor": [239, 771], "nest": [240, 364, 962], "see": [240, 364], "also": [240, 342, 364], "signific": 241, "precis": [242, 932], "recal": [242, 932], "In": 242, "binari": [242, 928, 932], "averag": [242, 244, 363, 370, 932], "micro": [242, 244], "each": [242, 247, 311, 921], "f1": 242, "receiv": [244, 245, 932], "oper": [244, 245, 337, 347, 373, 932], "characterist": [244, 245, 932], "specif": [244, 336, 340, 357, 921, 952, 953], "ovr": 244, "macro": 244, "ovo": 244, "success": [246, 247, 283, 921], "halv": [246, 247, 283, 921], "candid": [247, 921], "amount": [247, 921], "resourc": [247, 325, 338, 921, 951, 955], "underfit": 249, "overfit": 249, "tsne": [253, 643], "1d": 258, "novelti": [259, 938, 947], "lof": [259, 260], "neighborhood": [261, 262, 263, 935], "centroid": [264, 935], "layer": [268, 936], "perceptron": [268, 619, 928, 936], "mlpclassifi": [269, 806], "mlp": 270, "restrict": [271, 937], "boltzmann": [271, 937], "scaler": 273, "standardscal": [273, 829], "minmaxscal": [273, 819], "maxabsscal": [273, 818], "robustscal": [273, 827], "powertransform": [273, 825], "quantiletransform": [273, 826], "uniform": [273, 942], "kbinsdiscret": [274, 276, 814], "continu": [274, 338], "rescal": 278, "other": [279, 332, 349, 952, 973], "22": [281, 983], "new": [281, 283, 284, 286, 338, 349, 951, 973, 974, 976, 977, 978, 979, 980], "prune": [281, 315, 948], "datafram": [281, 349], "compat": [281, 338, 340, 359], "auc": [281, 657], "now": [281, 284, 983], "23": [282, 984], "stabil": 282, "improv": [282, 283, 284, 285, 286, 337, 338, 976, 977], "histogram": [282, 284, 286, 369, 370], "24": [283, 985], "histgradientboost": 283, "self": [283, 291, 945], "sequentialfeatureselector": [283, 553], "polynomialcountsketch": [283, 591], "decisiontreeregressor": [283, 858], "keyword": [284, 984, 986], "argument": [284, 340, 984, 986], "more": [284, 333, 349, 357, 936], "flexibl": [284, 922], "stabl": 284, "histgradientboostingregressor": [285, 513], "get_feature_names_out": 285, "avail": [285, 921, 970], "group": [285, 367, 956, 966], "infrequ": [285, 942], "onehotencod": [285, 822], "minibatchnmf": [285, 489], "version": [285, 332, 336, 342, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "bisectingkmean": [285, 395], "divid": 285, "panda": [286, 343, 349], "enhanc": [286, 352, 952, 976, 977, 978, 979, 980], "faster": [286, 370], "parser": [286, 332], "fetch_openml": [286, 447], "experiment": [286, 342, 359, 362, 530, 531], "arrai": [286, 347, 359, 958], "lineardiscriminantanalysi": [286, 500], "effici": [286, 347], "most": 288, "uncertain": 288, "activ": 289, "threshold": 291, "linearsvc": [297, 849, 947], "unbalanc": [301, 947], "some": 302, "plai": 302, "percentil": 302, "case": [307, 928, 932], "tie": 308, "break": 308, "word": [311, 371, 967], "metadata": 311, "strip": 311, "quantifi": [312, 932], "qualiti": [312, 932], "tfidfvector": [312, 313, 542], "lsa": 312, "top": [312, 932], "term": [312, 351, 371], "per": 312, "hashingvector": [312, 371, 540], "featurehash": [313, 533], "dictvector": [313, 532], "special": 313, "purpos": [313, 953], "cost": [315, 948], "leav": [315, 367, 928], "understand": 319, "recommend": [320, 333, 952], "inconsist": 320, "leakag": 320, "dure": 320, "avoid": [320, 364], "control": [320, 370, 936], "none": 320, "randomst": 320, "instanc": [320, 326], "repeat": [320, 364, 367], "call": [320, 337], "splitter": [320, 362], "subtleti": 320, "get": [320, 349, 350], "reproduc": [320, 343], "across": 320, "execut": [320, 349], "configur": [324, 325], "overhead": 324, "input": [324, 340, 359, 363, 942], "tip": [324, 339, 346, 921, 929, 936, 946, 947, 948], "trick": [324, 344, 346, 371], "algebra": [324, 347], "librari": [324, 325], "reshap": [324, 964], "link": [324, 332, 932], "manag": [325, 354], "higher": 325, "joblib": [325, 344], "lower": 325, "openmp": [325, 339], "numpi": [325, 343], "scipi": 325, "oversubscript": 325, "spawn": 325, "too": 325, "thread": 325, "switch": 325, "environ": 325, "sklearn_assume_finit": 325, "sklearn_working_memori": 325, "sklearn_se": 325, "sklearn_tests_global_random_se": 325, "sklearn_skip_network_test": 325, "sklearn_run_float32_test": 325, "sklearn_enable_debug_cython_direct": 325, "sklearn_build_enable_debug_symbol": 325, "sklearn_pairwise_dist_chunk_s": 325, "computation": 326, "bigger": 326, "stream": 326, "note": [326, 364, 367, 928], "tabl": [327, 349], "Of": 327, "content": [327, 349, 958], "util": [331, 343, 347, 362, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 967, 970, 981, 982, 983, 984, 985, 986, 987, 988, 989], "svmlight": 332, "format": [332, 343, 349, 357, 933], "org": [332, 342, 956], "repositori": 332, "arff": 332, "extern": [332, 951, 958, 973, 982], "olivetti": 333, "usag": [333, 344, 349, 359, 361, 364, 370, 371, 928], "convert": 333, "filter": 333, "realist": 333, "consider": [333, 928], "wild": 333, "covertyp": 333, "rcv1": 333, "kddcup": 333, "99": 333, "california": 333, "plant": 335, "linnerrud": 335, "wine": 335, "wisconsin": 335, "diagnost": 335, "instal": [336, 354], "nightli": 336, "runtim": 336, "tag": [336, 338, 340], "edit": 336, "platform": [336, 346, 354], "instruct": 336, "window": [336, 354], "maco": 336, "compil": [336, 344], "conda": [336, 354], "forg": 336, "homebrew": 336, "linux": [336, 349, 354], "system": 336, "freebsd": 336, "altern": [336, 921], "bug": [337, 338, 342, 955, 976, 977, 978, 979, 980, 981, 982], "triag": 337, "issu": [337, 338], "curat": 337, "fruit": 337, "pr": [337, 342], "help": [337, 338, 349], "review": [337, 338, 346, 967], "member": 337, "close": 337, "tough": 337, "typic": 337, "workflow": [337, 338], "contribut": [338, 349], "submit": 338, "report": [338, 343, 932], "request": [338, 342, 346, 349], "good": [338, 343], "video": [338, 951], "git": 338, "pull": [338, 342, 346, 349], "checklist": [338, 342], "integr": 338, "ci": 338, "stall": 338, "unclaim": 338, "easi": 338, "want": 338, "guidelin": [338, 340], "write": 338, "referenc": 338, "github": 338, "action": 338, "coverag": [338, 346, 932], "matplotlib": 338, "monitor": 338, "tracker": [338, 955], "maintain": [338, 342, 357], "backward": 338, "deprec": [338, 362, 876, 983], "chang": [338, 352, 956, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "default": 338, "read": 338, "exist": 338, "cython": [339, 344, 346], "convent": [339, 958], "knowledg": 339, "eas": 339, "instanti": 340, "attribut": [340, 351, 921], "option": 340, "univers": 340, "your": [340, 343, 932], "own": [340, 349, 932], "templat": 340, "baseestim": [340, 377], "mixin": 340, "get_param": 340, "set_param": 340, "init": 340, "clone": [340, 386], "assert": 340, "guid": [341, 969], "major": [342, 370, 981, 982], "minor": 342, "known": [342, 981, 982], "merg": 342, "web": 342, "site": 342, "craft": 343, "minim": [343, 948, 986, 987], "provid": 343, "fail": 343, "comment": 343, "boil": 343, "down": 343, "script": 343, "someth": 343, "small": 343, "do": [343, 349], "NOT": 343, "unless": 343, "i": [343, 349, 367, 956], "extrem": [343, 370], "necessari": 343, "markdown": 343, "make_regress": [343, 475], "make_classif": [343, 466], "make_blob": [343, 463], "optim": [344, 362, 921, 929], "c": 344, "profil": 344, "extens": 344, "yep": 344, "gperftool": 344, "debugg": 344, "gdb": 344, "gprof": 344, "valgrind": [344, 346], "callgrind": 344, "kcachegrind": 344, "warm": 344, "restart": 344, "overview": [345, 363, 938], "ax": 345, "saniti": 346, "preserv": 346, "fold": [346, 367], "unfold": 346, "outdat": 346, "diff": 346, "remot": 346, "track": 346, "branch": 346, "pytest": 346, "alias": 346, "flag": 346, "standard": [346, 942], "repli": 346, "debug": 346, "arm64": 346, "x86_64": 346, "tool": [347, 349], "matric": [347, 942], "warn": [347, 362], "except": [347, 362, 522, 523, 524, 525, 526, 527, 528, 529, 985, 989], "dispatch": 348, "frequent": 349, "ask": 349, "question": [349, 955], "what": 349, "lot": 349, "peopl": [349, 973, 974, 975, 976], "pronounc": 349, "why": [349, 370], "pypi": 349, "deep": 349, "reinforc": 349, "Will": 349, "add": 349, "graphic": [349, 937], "did": 349, "remov": [349, 372, 942, 973], "hmm": 349, "gpu": 349, "need": 349, "doe": 349, "directli": 349, "plan": 349, "so": 349, "my": 349, "ani": 349, "attent": 349, "inclus": 349, "includ": 349, "should": 349, "save": 349, "export": 349, "deploi": 349, "bunch": [349, 864], "usabl": 349, "deal": 349, "string": 349, "sometim": 349, "crash": 349, "freez": 349, "n_job": 349, "osx": [349, 354], "job": 349, "than": 349, "random_st": 349, "entir": 349, "start": 350, "processor": 350, "automat": [350, 928], "next": 350, "glossari": 351, "element": 351, "concept": [351, 928], "properti": 351, "role": 352, "technic": 352, "committe": 352, "propos": 352, "slep": 352, "latest": 354, "appl": 354, "silicon": 354, "m1": 354, "hardwar": 354, "alpin": 354, "arch": 354, "debian": 354, "ubuntu": 354, "fedora": 354, "netbsd": 354, "macport": 354, "mac": 354, "anaconda": 354, "enthought": 354, "deploy": 354, "intel": 354, "channel": 354, "winpython": 354, "troubleshoot": 354, "caus": 354, "persist": 357, "serial": 357, "secur": 357, "skop": 357, "interoper": [357, 952], "mathemat": [360, 363, 370, 924, 926, 928, 935, 936, 939, 946, 947, 948], "formul": [360, 363, 370, 926, 928, 935, 936, 946, 947, 948], "sigmoid": [361, 930], "sklearn": [362, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 981, 982, 983, 984, 985, 986, 987, 988, 989], "compos": [362, 415, 416, 417, 418, 981, 982, 983, 984, 985, 986, 987, 988], "cross_decomposit": [362, 433, 434, 435, 436, 983, 985, 987], "loader": 362, "discriminant_analysi": [362, 500, 501, 981, 982, 985, 987, 988], "dummi": [362, 502, 503, 932, 981, 982, 983, 986, 987], "feature_extract": [362, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 981, 982, 983, 984, 985, 986, 987, 988, 989], "feature_select": [362, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 981, 983, 984, 985, 986, 987, 988, 989], "gaussian_process": [362, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 981, 983, 984, 985, 986, 987, 988], "kernel_approxim": [362, 589, 590, 591, 592, 593, 983, 985, 986, 987, 988], "kernel_ridg": [362, 594], "linear_model": [362, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 981, 982, 983, 984, 985, 986, 987, 988, 989], "classic": [362, 931], "glm": 362, "interfac": 362, "model_select": [362, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 981, 982, 983, 984, 985, 986, 987, 988, 989], "naive_bay": [362, 784, 785, 786, 787, 788, 981, 983, 984, 985, 986, 988, 989], "neural_network": [362, 805, 806, 807, 981, 982, 983, 984, 985, 986, 987, 988, 989], "random_project": [362, 841, 842, 843, 987], "semi_supervis": [362, 844, 845, 846, 983, 984, 985, 989], "recent": 362, "low": [363, 370, 372], "mini": [363, 368], "batch": [363, 368], "assign": 363, "featureagglomer": [363, 397], "hierarchi": 363, "ad": 363, "connect": [363, 371, 966], "consumpt": 363, "larg": [363, 371], "size": [363, 370], "rand": 363, "index": [363, 892], "advantag": 363, "drawback": 363, "homogen": 363, "fowlk": 363, "mallow": 363, "calinski": 363, "harabasz": 363, "davi": 363, "bouldin": 363, "conting": 363, "pair": 363, "access": 364, "featureunion": [364, 808], "columntransform": [364, 415], "shrunk": 365, "oracl": 365, "plscanon": [366, 434], "plssvd": [366, 436], "plsregress": [366, 435], "held": 367, "cross_valid": [367, 772], "obtain": 367, "d": [367, 935], "loo": 367, "p": [367, 956], "lpo": 367, "shuffl": [367, 906], "stratif": 367, "stratifi": 367, "stratifiedgroupkfold": [367, 765], "predefin": [367, 932], "decompos": 368, "exact": 368, "sparsepca": [368, 494], "kpca": 368, "choic": [368, 931, 935], "truncat": 368, "semant": 368, "nnmf": 368, "frobeniu": 368, "norm": 368, "beta": 368, "diverg": 368, "addit": [370, 924], "weak": 370, "learner": 370, "rate": 370, "subsampl": 370, "hard": 370, "soft": 370, "dict": 371, "detail": [371, 924, 928, 946, 947], "tf": 371, "idf": 371, "decod": 371, "applic": [371, 966], "corpu": 371, "selectfrommodel": [372, 548], "recoveri": 372, "biclustermixin": 378, "classnameprefixfeaturesoutmixin": 379, "classifiermixin": 380, "clustermixin": 381, "densitymixin": 382, "onetoonefeaturemixin": 383, "regressormixin": 384, "transformermixin": 385, "is_classifi": 387, "is_regressor": 388, "calibratedclassifiercv": 389, "calibrationdisplai": 390, "calibration_curv": 391, "affinitypropag": 392, "agglomerativeclust": 393, "spectralbiclust": 402, "spectralclust": 403, "spectralcoclust": 404, "affinity_propag": 405, "cluster_optics_dbscan": 406, "cluster_optics_xi": 407, "compute_optics_graph": 408, "estimate_bandwidth": 409, "k_mean": 410, "kmeans_plusplu": 411, "mean_shift": 412, "spectral_clust": 413, "ward_tre": 414, "transformedtargetregressor": 416, "make_column_selector": 417, "make_column_transform": 418, "config_context": 419, "ellipticenvelop": 420, "empiricalcovari": 421, "graphicallasso": 422, "graphicallassocv": 423, "mincovdet": 425, "shrunkcovari": 427, "empirical_covari": 428, "graphical_lasso": 429, "ledoit_wolf": 430, "ledoit_wolf_shrinkag": 431, "shrunk_covari": 432, "clear_data_hom": 437, "dump_svmlight_fil": 438, "fetch_20newsgroup": 439, "fetch_20newsgroups_vector": 440, "fetch_california_h": 441, "fetch_covtyp": 442, "fetch_kddcup99": 443, "fetch_lfw_pair": 444, "fetch_lfw_peopl": 445, "fetch_olivetti_fac": 446, "fetch_rcv1": 448, "fetch_species_distribut": 449, "get_data_hom": 450, "load_breast_canc": 451, "load_diabet": 452, "load_digit": 453, "load_fil": 454, "load_iri": 455, "load_linnerud": 456, "load_sample_imag": [457, 458], "load_svmlight_fil": [459, 460], "load_win": 461, "make_biclust": 462, "make_checkerboard": 464, "make_circl": 465, "make_friedman1": 467, "make_friedman2": 468, "make_friedman3": 469, "make_gaussian_quantil": 470, "make_hastie_10_2": 471, "make_low_rank_matrix": 472, "make_moon": 473, "make_multilabel_classif": 474, "make_s_curv": 476, "make_sparse_coded_sign": 477, "make_sparse_spd_matrix": 478, "make_sparse_uncorrel": 479, "make_spd_matrix": 480, "make_swiss_rol": 481, "dictionarylearn": 482, "factoranalysi": 483, "incrementalpca": 485, "latentdirichletalloc": 487, "minibatchdictionarylearn": 488, "sparsecod": 493, "truncatedsvd": 495, "dict_learn": 496, "dict_learning_onlin": 497, "non_negative_factor": 498, "sparse_encod": 499, "quadraticdiscriminantanalysi": 501, "dummyclassifi": 502, "dummyregressor": 503, "adaboostclassifi": 504, "adaboostregressor": 505, "baggingclassifi": 506, "baggingregressor": 507, "extratreesclassifi": 508, "extratreesregressor": 509, "gradientboostingclassifi": 510, "gradientboostingregressor": 511, "histgradientboostingclassifi": 512, "randomforestclassifi": 515, "randomforestregressor": 516, "randomtreesembed": 517, "stackingclassifi": 518, "stackingregressor": 519, "votingregressor": 521, "convergencewarn": 522, "dataconversionwarn": 523, "datadimensionalitywarn": 524, "efficiencywarn": 525, "fitfailedwarn": 526, "inconsistentversionwarn": 527, "notfittederror": 528, "undefinedmetricwarn": 529, "enable_halving_search_cv": 530, "enable_iterative_imput": 531, "patchextractor": 534, "extract_patches_2d": 535, "grid_to_graph": 536, "img_to_graph": 537, "reconstruct_from_patches_2d": 538, "countvector": 539, "tfidftransform": 541, "genericunivariateselect": 543, "rfe": 544, "rfecv": 545, "selectfdr": 546, "selectfpr": 547, "selectfw": 549, "selectkbest": 550, "selectpercentil": 551, "selectormixin": 552, "variancethreshold": 554, "chi2": 555, "f_classif": 556, "f_regress": 557, "mutual_info_classif": 558, "mutual_info_regress": 559, "r_regress": 560, "gaussianprocessclassifi": 561, "gaussianprocessregressor": 562, "compoundkernel": 563, "constantkernel": 564, "dotproduct": 565, "expsinesquar": 566, "exponenti": 567, "matern": 570, "pairwisekernel": 571, "rationalquadrat": 574, "sum": 575, "whitekernel": 576, "get_config": 577, "knnimput": 579, "missingind": 580, "simpleimput": 581, "decisionboundarydisplai": 582, "partialdependencedisplai": 583, "partial_depend": 584, "permutation_import": 585, "isotonicregress": 586, "check_increas": 587, "isotonic_regress": 588, "additivechi2sampl": 589, "nystroem": [590, 924], "rbfsampler": 592, "skewedchi2sampl": 593, "kernelridg": 594, "ardregress": 595, "bayesianridg": 596, "elasticnetcv": 598, "gammaregressor": 599, "larscv": 602, "lassocv": 604, "lassolar": 605, "lassolarscv": 606, "lassolars": 607, "logisticregress": 609, "logisticregressioncv": 610, "multitaskelasticnet": 611, "multitaskelasticnetcv": 612, "multitasklasso": 613, "multitasklassocv": 614, "orthogonalmatchingpursuit": 615, "orthogonalmatchingpursuitcv": 616, "passiveaggressiveclassifi": 617, "passiveaggressiveregressor": 618, "poissonregressor": 620, "ransacregressor": 622, "ridgecv": 624, "ridgeclassifi": 625, "ridgeclassifiercv": 626, "sgdclassifi": 627, "sgdoneclasssvm": 628, "sgdregressor": 629, "theilsenregressor": 630, "enet_path": 632, "lars_path": 633, "lars_path_gram": 634, "lasso_path": 635, "orthogonal_mp": 636, "orthogonal_mp_gram": 637, "ridge_regress": 638, "locallylinearembed": 640, "md": [641, 929], "spectralembed": 642, "locally_linear_embed": 644, "smacof": 645, "spectral_embed": 646, "trustworthi": 647, "detcurvedisplai": 649, "distancemetr": 650, "predictionerrordisplai": 652, "accuracy_scor": 654, "adjusted_mutual_info_scor": 655, "adjusted_rand_scor": 656, "average_precision_scor": 658, "balanced_accuracy_scor": 659, "brier_score_loss": 660, "calinski_harabasz_scor": 661, "check_scor": 662, "class_likelihood_ratio": 663, "classification_report": 664, "contingency_matrix": 665, "pair_confusion_matrix": 666, "cohen_kappa_scor": 667, "completeness_scor": 668, "confusion_matrix": 669, "consensus_scor": 670, "coverage_error": 671, "d2_absolute_error_scor": 672, "d2_pinball_scor": 673, "d2_tweedie_scor": 674, "davies_bouldin_scor": 675, "dcg_score": 676, "det_curv": 677, "explained_variance_scor": 678, "f1_score": 679, "fbeta_scor": 680, "fowlkes_mallows_scor": 681, "get_scor": 682, "get_scorer_nam": 683, "hamming_loss": 684, "hinge_loss": 685, "homogeneity_completeness_v_measur": 686, "homogeneity_scor": 687, "jaccard_scor": 688, "label_ranking_average_precision_scor": 689, "label_ranking_loss": 690, "log_loss": 691, "make_scor": 692, "matthews_corrcoef": 693, "max_error": 694, "mean_absolute_error": 695, "mean_absolute_percentage_error": 696, "mean_gamma_devi": 697, "mean_pinball_loss": 698, "mean_poisson_devi": 699, "mean_squared_error": 700, "mean_squared_log_error": 701, "mean_tweedie_devi": 702, "median_absolute_error": 703, "multilabel_confusion_matrix": 704, "mutual_info_scor": 705, "ndcg_score": 706, "normalized_mutual_info_scor": 707, "additive_chi2_kernel": 708, "chi2_kernel": 709, "cosine_dist": 710, "cosine_similar": 711, "distance_metr": 712, "euclidean_dist": 713, "haversine_dist": 714, "kernel_metr": 715, "laplacian_kernel": 716, "linear_kernel": 717, "manhattan_dist": 718, "nan_euclidean_dist": 719, "paired_cosine_dist": 720, "paired_dist": 721, "paired_euclidean_dist": 722, "paired_manhattan_dist": 723, "pairwise_kernel": 724, "polynomial_kernel": 725, "rbf_kernel": 726, "sigmoid_kernel": 727, "pairwise_dist": 728, "pairwise_distances_argmin": 729, "pairwise_distances_argmin_min": 730, "pairwise_distances_chunk": 731, "precision_recall_curv": 732, "precision_recall_fscore_support": 733, "precision_scor": 734, "r2_score": 735, "rand_scor": 736, "recall_scor": 737, "roc_auc_scor": 738, "roc_curv": 739, "silhouette_sampl": 740, "silhouette_scor": 741, "top_k_accuracy_scor": 742, "v_measure_scor": 743, "zero_one_loss": 744, "bayesiangaussianmixtur": [745, 931], "gaussianmixtur": [746, 931], "groupkfold": 748, "groupshufflesplit": 749, "halvinggridsearchcv": 750, "halvingrandomsearchcv": 751, "kfold": 752, "learningcurvedisplai": 753, "leaveonegroupout": 754, "leaveoneout": 755, "leavepgroupsout": 756, "leavepout": 757, "parametergrid": 758, "parametersampl": 759, "predefinedsplit": 760, "randomizedsearchcv": 761, "repeatedkfold": 762, "repeatedstratifiedkfold": 763, "shufflesplit": 764, "stratifiedkfold": 766, "stratifiedshufflesplit": 767, "timeseriessplit": 768, "check_cv": 769, "cross_val_predict": 770, "learning_curv": 773, "permutation_test_scor": 774, "train_test_split": 775, "validation_curv": 776, "onevsoneclassifi": [777, 933], "onevsrestclassifi": [778, 933], "outputcodeclassifi": [779, 933], "classifierchain": [780, 933], "multioutputclassifi": [781, 933], "multioutputregressor": [782, 933], "regressorchain": [783, 933], "bernoullinb": 784, "categoricalnb": 785, "complementnb": 786, "gaussiannb": 787, "multinomialnb": 788, "balltre": [789, 935], "kdtree": [790, 935], "kneighborsclassifi": 791, "kneighborsregressor": 792, "kneighborstransform": 793, "kerneldens": 794, "localoutlierfactor": 795, "nearestcentroid": 796, "nearestneighbor": 797, "neighborhoodcomponentsanalysi": 798, "radiusneighborsclassifi": 799, "radiusneighborsregressor": 800, "radiusneighborstransform": 801, "kneighbors_graph": 802, "radius_neighbors_graph": 803, "sort_graph_by_row_valu": 804, "bernoullirbm": 805, "mlpregressor": 807, "make_pipelin": 810, "make_union": 811, "binar": [812, 832, 942, 943], "functiontransform": 813, "kernelcenter": 815, "labelbinar": [816, 943], "labelencod": 817, "multilabelbinar": [820, 943], "ordinalencod": 823, "polynomialfeatur": 824, "splinetransform": 828, "targetencod": 830, "add_dummy_featur": 831, "label_binar": 833, "maxabs_scal": 834, "minmax_scal": 835, "power_transform": 837, "quantile_transform": 838, "robust_scal": 839, "gaussianrandomproject": 841, "sparserandomproject": 842, "johnson_lindenstrauss_min_dim": 843, "labelpropag": 844, "labelspread": 845, "selftrainingclassifi": 846, "set_config": 847, "show_vers": 848, "linearsvr": [850, 947], "nusvc": [851, 947], "nusvr": 852, "oneclasssvm": 853, "l1_min_c": 856, "decisiontreeclassifi": 857, "extratreeclassifi": 859, "extratreeregressor": 860, "export_graphviz": 861, "export_text": 862, "plot_tre": 863, "_safe_index": 865, "arrayfunc": 866, "min_po": 866, "as_float_arrai": 867, "assert_all_finit": 868, "check_x_i": 869, "check_arrai": 870, "check_consistent_length": 871, "check_random_st": 872, "check_scalar": 873, "class_weight": [874, 875], "compute_class_weight": 874, "compute_sample_weight": 875, "discoveri": [877, 878, 879], "all_displai": 877, "all_estim": 878, "all_funct": 879, "estimator_check": [880, 881], "check_estim": 880, "parametrize_with_check": 881, "estimator_html_repr": 882, "extmath": [883, 884, 885, 886, 887, 888], "fast_logdet": 884, "randomized_range_find": 885, "randomized_svd": 886, "safe_sparse_dot": 887, "weighted_mod": 888, "gen_batch": 889, "gen_even_slic": 890, "single_source_shortest_path_length": 891, "metaestim": 893, "available_if": 893, "is_multilabel": 894, "type_of_target": 895, "unique_label": 896, "murmurhash3_32": 897, "delai": 899, "parallel_backend": 900, "sample_without_replac": 901, "register_parallel_backend": 902, "resampl": 903, "safe_mask": 904, "safe_sqr": 905, "sparsefunc": [907, 908, 909, 910, 911, 912, 913, 982], "incr_mean_variance_axi": 907, "inplace_column_scal": 908, "inplace_csr_column_scal": 909, "inplace_row_scal": 910, "inplace_swap_column": 911, "inplace_swap_row": 912, "mean_variance_axi": 913, "sparsefuncs_fast": [914, 915], "inplace_csr_row_normalize_l1": 914, "inplace_csr_row_normalize_l2": 915, "check_is_fit": 916, "check_memori": 917, "check_symmetr": 918, "column_or_1d": 919, "has_fit_paramet": 920, "exhaust": 921, "min_resourc": 921, "aggress": [921, 928], "analyz": 921, "cv_results_": 921, "brute": [921, 935], "forc": [921, 935], "keep": 922, "mark": 922, "nan": 922, "chi": [924, 930], "skew": 924, "tensor": 924, "sketch": 924, "qda": 926, "omp": 928, "ard": 928, "liblinear": 928, "passiv": 928, "scenario": 928, "trade": 928, "off": 928, "which": 928, "consensu": 928, "median": [928, 932], "huber": 928, "extend": 928, "introduct": [929, 958], "modifi": 929, "hessian": 929, "eigenmap": 929, "tangent": 929, "align": 929, "nonmetr": 929, "barn": 929, "hut": 929, "cosin": 930, "laplacian": 930, "pro": 931, "con": 931, "maxim": 931, "rule": 932, "cohen": 932, "kappa": 932, "ham": 932, "jaccard": 932, "hing": 932, "matthew": 932, "zero": 932, "brier": 932, "discount": 932, "cumul": 932, "gain": 932, "r\u00b2": 932, "absolut": 932, "logarithm": 932, "percentag": 932, "explain": 932, "pinbal": 932, "d\u00b2": 932, "complement": 934, "bernoulli": [934, 937], "unsupervis": [935, 937, 949, 966, 968], "find": 935, "ball": 935, "leaf_siz": 935, "shrunken": 935, "warm_start": 936, "parametr": 937, "up": 938, "ellipt": 938, "envelop": 938, "isol": 938, "ic": 939, "outlin": 940, "mislead": 940, "strongli": 940, "rang": 942, "whiten": 942, "bin": 942, "lemma": 944, "unlabel": 945, "entri": 945, "id3": 948, "c4": 948, "5": [948, 973], "c5": 948, "cart": 948, "welcom": 950, "talk": 951, "scientif": [951, 961], "framework": 952, "domain": 952, "translat": 952, "roadmap": 953, "thi": 953, "statement": 953, "2018": 953, "architectur": 953, "goal": 953, "subpackag": 953, "mail": 955, "user": [955, 969], "gitter": 955, "who": 956, "j": 956, "morgan": 956, "spotifi": 956, "inria": 956, "betawork": 956, "hug": 956, "evernot": 956, "t\u00e9l\u00e9com": 956, "paristech": 956, "book": 956, "com": 956, "aweb": 956, "yhat": 956, "rangespan": 956, "birchbox": 956, "bestofmedia": 956, "phimeca": 956, "howaboutw": 956, "peerindex": 956, "datarobot": 956, "okcupid": 956, "love": 956, "publica": 956, "machinali": 956, "solido": 956, "infonea": 956, "dataiku": 956, "otto": 956, "zopa": 956, "mar": 956, "bnp": 956, "pariba": 956, "cardif": 956, "section": 958, "cast": 958, "updat": [958, 983], "right": 960, "put": 963, "open": 963, "ship": 964, "would": 964, "high": 965, "solv": [965, 966], "vocabulari": 965, "curs": 965, "iris": 965, "same": 965, "seek": 966, "constrain": 966, "inverse_transform": 966, "setup": 967, "token": 967, "occurr": 967, "languag": 967, "identif": 967, "sentiment": 967, "movi": 967, "cli": 967, "where": 967, "here": 967, "12": 973, "changelog": [973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "11": 973, "9": 973, "8": 973, "7": 973, "6": [973, 979], "modul": [973, 981, 982, 988, 989], "misc": 973, "4": [973, 981], "earlier": 973, "13": 974, "14": 975, "15": 976, "16": 977, "17": 978, "18": 979, "last": 979, "19": 980, "21": 982, "legend": [982, 983, 984, 985, 986, 987, 988, 989], "post1": 983, "websit": 983, "clear": 983, "public": 983, "futurewarn": 983, "enforc": [984, 986]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [148, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [98, "concluding-remarks"], [203, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [23, "references"], [25, "references"], [74, "references"], [102, "references"], [156, "references"], [167, null], [235, null], [266, "references"], [333, null], [333, null], [333, null], [335, null], [335, null], [335, null], [335, null], [335, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [370, null], [370, null], [370, null], [370, null], [370, null], [370, null], [370, null], [370, null], [371, null], [373, "references"], [922, "references"], [922, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [939, null], [942, null], [942, null], [945, null], [945, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [46, "load-the-data"], [112, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [168, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [45, "plot-results"], [71, "plot-results"], [86, "plot-results"], [87, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [324, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [299, "visualization"], [362, "visualization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[13, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[14, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Libsvm GUI": [[15, "libsvm-gui"]], "Wikipedia principal eigenvector": [[16, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[16, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[16, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[16, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[16, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[16, "computing-centrality-scores"]], "Biclustering": [[17, "biclustering"], [148, "biclustering"], [334, "biclustering"], [360, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[18, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[19, "a-demo-of-the-spectral-biclustering-algorithm"]], "A demo of the Spectral Co-Clustering algorithm": [[20, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[21, "calibration"], [148, "calibration"]], "Probability calibration of classifiers": [[22, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[22, "generate-synthetic-dataset"], [158, "generate-synthetic-dataset"], [158, "id1"]], "Gaussian Naive-Bayes": [[22, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[22, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[23, "probability-calibration-curves"]], "Dataset": [[23, "dataset"], [25, "dataset"], [168, "dataset"], [241, "dataset"]], "Calibration curves": [[23, "calibration-curves"], [25, "calibration-curves"], [361, "calibration-curves"]], "Gaussian Naive Bayes": [[23, "gaussian-naive-bayes"], [934, "gaussian-naive-bayes"]], "Linear support vector classifier": [[23, "linear-support-vector-classifier"]], "Summary": [[23, "summary"], [313, "summary"]], "Probability Calibration for 3-class classification": [[24, "probability-calibration-for-3-class-classification"]], "Data": [[24, "data"]], "Fitting and calibration": [[24, "fitting-and-calibration"]], "Compare probabilities": [[24, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[25, "comparison-of-calibration-of-classifiers"]], "Classification": [[26, "classification"], [29, "classification"], [143, "classification"], [148, "classification"], [370, "classification"], [370, "id18"], [928, "classification"], [935, "id4"], [936, "classification"], [946, "classification"], [947, "classification"], [948, "classification"], [965, "classification"]], "Plot classification probability": [[27, "plot-classification-probability"]], "Classifier comparison": [[28, "classifier-comparison"]], "Recognizing hand-written digits": [[29, "recognizing-hand-written-digits"]], "Digits dataset": [[29, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[30, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[31, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Colormap": [[31, "colormap"]], "Datasets generation functions": [[31, "datasets-generation-functions"]], "Plot functions": [[31, "plot-functions"]], "Plot": [[31, "plot"], [163, "plot"]], "Clustering": [[32, "clustering"], [148, "clustering"], [363, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[33, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[33, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[33, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[33, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[34, "demo-of-affinity-propagation-clustering-algorithm"]], "Generate sample data": [[34, "generate-sample-data"], [58, "generate-sample-data"], [71, "generate-sample-data"], [86, "generate-sample-data"], [87, "generate-sample-data"], [129, "generate-sample-data"], [212, "generate-sample-data"], [248, "generate-sample-data"], [265, "generate-sample-data"], [306, "generate-sample-data"]], "Compute Affinity Propagation": [[34, "compute-affinity-propagation"]], "Plot result": [[34, "plot-result"], [58, "plot-result"], [62, "plot-result"], [62, "id2"]], "Agglomerative clustering with and without structure": [[35, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[36, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[37, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[38, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[39, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[40, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[41, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[42, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[43, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[43, "generate-data"], [62, "generate-data"], [73, "generate-data"], [173, "generate-data"], [271, "generate-data"]], "Define structure of the data": [[43, "define-structure-of-the-data"]], "Compute clustering": [[43, "compute-clustering"], [62, "compute-clustering"], [62, "id1"]], "Plot the results on an image": [[43, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[44, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[45, "demo-of-dbscan-clustering-algorithm"]], "Data generation": [[45, "data-generation"], [52, "data-generation"], [114, "data-generation"], [132, "data-generation"], [141, "data-generation"], [226, "data-generation"], [288, "data-generation"]], "Compute DBSCAN": [[45, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[46, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[46, "learn-the-dictionary-of-images"]], "Plot the results": [[46, "plot-the-results"], [75, "plot-the-results"], [121, "plot-the-results"], [147, "plot-the-results"]], "Feature agglomeration": [[47, "feature-agglomeration"], [949, "feature-agglomeration"], [966, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[48, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[49, "vector-quantization-example"]], "Original image": [[49, "original-image"]], "Compression via vector quantization": [[49, "compression-via-vector-quantization"]], "Encoding strategy": [[49, "encoding-strategy"]], "Memory footprint": [[49, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[50, "feature-agglomeration-vs-univariate-selection"]], "Inductive Clustering": [[51, "inductive-clustering"]], "Demonstration of k-means assumptions": [[52, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[52, "fit-models-and-plot-results"]], "Possible solutions": [[52, "possible-solutions"]], "Final remarks": [[52, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[53, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[53, "load-the-dataset"]], "Define our evaluation benchmark": [[53, "define-our-evaluation-benchmark"]], "Run the benchmark": [[53, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[53, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[54, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[55, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[56, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[57, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[58, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[58, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[59, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[59, "generate-the-data"], [61, "generate-the-data"], [75, "generate-the-data"]], "Compute clustering with KMeans": [[59, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[59, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[59, "establishing-parity-between-clusters"]], "Plotting the results": [[59, "plotting-the-results"], [98, "plotting-the-results"], [100, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[60, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[61, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[61, "plotting-four-circles"]], "Plotting two circles": [[61, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[62, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[62, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[63, "pipelines-and-composite-estimators"], [148, "pipelines-and-composite-estimators"], [364, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[64, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[64, "newsgroups-dataset"]], "Creating transformers": [[64, "creating-transformers"]], "Classification pipeline": [[64, "classification-pipeline"]], "Column Transformer with Mixed Types": [[65, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[66, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[66, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[66, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[67, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[68, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[69, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[69, "synthetic-example"]], "Real-world data set": [[69, "real-world-data-set"]], "Covariance estimation": [[70, "covariance-estimation"], [148, "covariance-estimation"], [365, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[71, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[71, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[71, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[72, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[73, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[73, null], [153, null], [240, null], [241, null], [332, null], [333, null], [360, null], [360, null], [360, null], [361, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [365, null], [365, null], [365, null], [365, null], [367, null], [367, null], [368, null], [368, null], [368, null], [368, null], [368, null], [368, null], [368, null], [368, null], [371, null], [372, null], [921, null], [921, null], [924, null], [925, null], [926, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [929, null], [929, null], [929, null], [929, null], [929, null], [929, null], [929, null], [929, null], [930, null], [930, null], [932, null], [932, null], [932, null], [932, null], [932, null], [932, null], [932, null], [932, null], [933, null], [933, null], [933, null], [934, null], [934, null], [934, null], [935, null], [935, null], [935, null], [936, null], [937, null], [938, null], [938, null], [938, null], [938, null], [940, null], [942, null], [942, null], [944, null], [944, null], [944, null], [946, null], [946, null], [947, null], [948, null], [948, null]], "Comparison of results": [[73, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[74, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[74, "minimum-covariance-determinant-estimator"]], "Evaluation": [[74, "evaluation"], [271, "evaluation"]], "Sparse inverse covariance estimation": [[75, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[75, "estimate-the-covariance"]], "Cross decomposition": [[76, "cross-decomposition"], [148, "cross-decomposition"], [366, "cross-decomposition"]], "Compare cross decomposition methods": [[77, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[77, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[77, "canonical-symmetric-pls"]], "Transform data": [[77, "transform-data"]], "Scatter plot of scores": [[77, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[77, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[77, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[77, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[78, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[78, "the-data"]], "Projection on one component and predictive power": [[78, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[79, "dataset-examples"], [148, "dataset-examples"]], "The Digit Dataset": [[80, "the-digit-dataset"]], "The Iris Dataset": [[81, "the-iris-dataset"]], "Plot randomly generated classification dataset": [[82, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[83, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[84, "decomposition"], [85, "decomposition"], [148, "decomposition"]], "Faces dataset decompositions": [[85, "faces-dataset-decompositions"]], "Dataset preparation": [[85, "dataset-preparation"], [199, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[85, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[85, "non-negative-components-nmf"]], "Independent components - FastICA": [[85, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[85, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[85, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[85, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[85, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[85, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[85, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[85, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[85, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[86, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[86, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[87, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[88, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[88, "generate-distorted-image"]], "Display the distorted image": [[88, "display-the-distorted-image"]], "Extract reference patches": [[88, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[88, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[88, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[89, "incremental-pca"], [368, "incremental-pca"]], "Kernel PCA": [[90, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[90, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[90, "projecting-into-the-original-feature-space"]], "Principal components analysis (PCA)": [[91, "principal-components-analysis-pca"]], "Create the data": [[91, "create-the-data"], [93, "create-the-data"]], "Plot the figures": [[91, "plot-the-figures"]], "PCA example with Iris Data-set": [[92, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[93, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Fit the models": [[93, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[94, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[95, "sparse-coding-with-a-precomputed-dictionary"], [368, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[96, "factor-analysis-with-rotation-to-visualize-patterns"]], "Ensemble methods": [[97, "ensemble-methods"], [148, "ensemble-methods"], [370, "ensemble-methods"]], "Discrete versus Real AdaBoost": [[98, "discrete-versus-real-adaboost"]], "Preparing the data and baseline models": [[98, "preparing-the-data-and-baseline-models"]], "Adaboost with discrete SAMME and real SAMME.R": [[98, "adaboost-with-discrete-samme-and-real-samme-r"]], "Multi-class AdaBoosted Decision Trees": [[99, "multi-class-adaboosted-decision-trees"]], "Decision Tree Regression with AdaBoost": [[100, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[100, "preparing-the-data"], [156, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[100, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[101, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[102, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[103, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[104, "feature-transformations-with-ensembles-of-trees"]], "Feature importances with a forest of trees": [[105, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[105, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[105, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[105, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[106, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[106, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[106, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[107, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[108, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[108, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[108, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[108, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[108, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[108, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[108, "model-comparison"]], "Limiting the number of splits": [[108, "limiting-the-number-of-splits"]], "Early stopping of Gradient Boosting": [[109, "early-stopping-of-gradient-boosting"]], "Compare scores with and without early stopping": [[109, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[109, "compare-fit-times-with-and-without-early-stopping"]], "Gradient Boosting Out-of-Bag estimates": [[110, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[111, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[111, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[111, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[111, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[111, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[112, "gradient-boosting-regression"]], "Data preprocessing": [[112, "data-preprocessing"]], "Fit regression model": [[112, "fit-regression-model"], [265, "fit-regression-model"], [306, "fit-regression-model"]], "Plot training deviance": [[112, "plot-training-deviance"]], "Plot feature importance": [[112, "plot-feature-importance"]], "Gradient Boosting regularization": [[113, "gradient-boosting-regularization"]], "IsolationForest example": [[114, "isolationforest-example"]], "Training of the model": [[114, "training-of-the-model"]], "Plot discrete decision boundary": [[114, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[114, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[115, "monotonic-constraints"], [370, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[115, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[116, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[117, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[118, "combine-predictors-using-stacking"]], "Download the dataset": [[118, "download-the-dataset"]], "Make pipeline to preprocess the data": [[118, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[118, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[118, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[119, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[120, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[121, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[121, "training-classifiers"]], "Making predictions": [[121, "making-predictions"]], "Tutorial exercises": [[122, "tutorial-exercises"], [148, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[123, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[123, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[123, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[123, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Cross-validation on Digits Dataset Exercise": [[124, "cross-validation-on-digits-dataset-exercise"]], "Digits Classification Exercise": [[125, "digits-classification-exercise"]], "SVM Exercise": [[126, "svm-exercise"]], "Feature Selection": [[127, "feature-selection"], [148, "feature-selection"]], "Comparison of F-test and mutual information": [[128, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[129, "univariate-feature-selection"]], "Univariate feature selection": [[129, "id1"], [372, "univariate-feature-selection"]], "Compare with SVMs": [[129, "compare-with-svms"]], "Pipeline ANOVA SVM": [[130, "pipeline-anova-svm"]], "Recursive feature elimination": [[131, "recursive-feature-elimination"], [372, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[132, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[132, "model-training-and-selection"], [226, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[132, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[133, "model-based-and-sequential-feature-selection"]], "Loading the data": [[133, "loading-the-data"]], "Feature importance from coefficients": [[133, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[133, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[133, "selecting-features-with-sequential-feature-selection"]], "Discussion": [[133, "discussion"]], "Gaussian Process for Machine Learning": [[134, "gaussian-process-for-machine-learning"], [148, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[135, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[135, "generating-a-dataset"]], "Limitations of a simple linear model": [[135, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[135, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[135, "kernel-ridge"]], "Gaussian process regression": [[135, "gaussian-process-regression"]], "Final conclusion": [[135, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[136, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[137, "gaussian-process-classification-gpc-on-iris-dataset"], [373, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[138, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[139, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Gaussian process regression (GPR) on Mauna Loa CO2 data": [[140, "gaussian-process-regression-gpr-on-mauna-loa-co2-data"]], "Build the dataset": [[140, "build-the-dataset"]], "Design the proper kernel": [[140, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[140, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[140, "interpretation-of-kernel-hyperparameters"]], "Gaussian process regression (GPR) with noise-level estimation": [[141, "gaussian-process-regression-gpr-with-noise-level-estimation"]], "Optimisation of kernel hyperparameters in GPR": [[141, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[142, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[142, "dataset-generation"], [181, "dataset-generation"]], "Example with noise-free target": [[142, "example-with-noise-free-target"]], "Example with noisy targets": [[142, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[143, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[143, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[143, "regression"], [370, "regression"], [370, "id17"], [928, "regression"], [936, "regression"], [946, "regression"], [947, "regression"], [948, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[144, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[144, "helper-function"]], "Dataset and Gaussian process generation": [[144, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[144, "kernel-cookbook"]], "Radial Basis Function kernel": [[144, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[144, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[144, "exp-sine-squared-kernel"], [373, "exp-sine-squared-kernel"]], "Dot-product kernel": [[144, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[144, "matern-kernel"], [373, "matern-kernel"]], "Missing Value Imputation": [[145, "missing-value-imputation"], [148, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[146, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[147, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[147, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[147, "impute-the-missing-data-and-score"]], "Missing information": [[147, "missing-information"]], "Estimate the score": [[147, "estimate-the-score"]], "Replace missing values by 0": [[147, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[147, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[147, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[147, "iterative-imputation-of-the-missing-values"]], "Examples": [[148, "examples"], [326, "examples"], [333, null], [333, "examples"], [367, null], [367, null], [372, null], [372, null], [945, null], [945, null], [949, null], [949, null], [949, null], [973, "examples"]], "Release Highlights": [[148, "release-highlights"], [280, "release-highlights"]], "Decision Trees": [[148, "decision-trees"], [314, "decision-trees"], [948, "decision-trees"]], "Gaussian Mixture Models": [[148, "gaussian-mixture-models"], [220, "gaussian-mixture-models"]], "Generalized Linear Models": [[148, "generalized-linear-models"], [157, "generalized-linear-models"], [928, "generalized-linear-models"]], "Inspection": [[148, "inspection"], [149, "inspection"], [353, "inspection"]], "Kernel Approximation": [[148, "kernel-approximation"], [155, "kernel-approximation"], [924, "kernel-approximation"]], "Manifold learning": [[148, "manifold-learning"], [198, "manifold-learning"], [929, "manifold-learning"]], "Miscellaneous": [[148, "miscellaneous"], [205, "miscellaneous"], [362, "miscellaneous"], [981, "miscellaneous"], [981, "id40"], [982, "miscellaneous"], [983, "miscellaneous"], [984, "miscellaneous"], [984, "id13"], [985, "miscellaneous"], [986, "miscellaneous"]], "Model Selection": [[148, "model-selection"], [228, "model-selection"]], "Multioutput methods": [[148, "multioutput-methods"], [251, "multioutput-methods"]], "Nearest Neighbors": [[148, "nearest-neighbors"], [254, "nearest-neighbors"], [935, "nearest-neighbors"]], "Neural Networks": [[148, "neural-networks"], [267, "neural-networks"]], "Preprocessing": [[148, "preprocessing"], [272, "preprocessing"]], "Semi Supervised Classification": [[148, "semi-supervised-classification"], [287, "semi-supervised-classification"]], "Support Vector Machines": [[148, "support-vector-machines"], [294, "support-vector-machines"], [947, "support-vector-machines"]], "Working with text documents": [[148, "working-with-text-documents"], [310, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[150, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[150, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[150, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[150, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[150, "income-prediction-with-partial-observations"]], "Lessons learned": [[150, "lessons-learned"], [151, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[151, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[151, "the-dataset-wages"]], "The machine-learning pipeline": [[151, "the-machine-learning-pipeline"]], "Processing the dataset": [[151, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[151, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[151, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[151, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[151, "preprocessing-numerical-variables"]], "Linear models with regularization": [[151, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[151, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[151, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[152, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[152, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[152, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[152, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[152, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[152, "way-partial-dependence-with-different-models"]], "2D interaction plots": [[152, "d-interaction-plots"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[153, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[153, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[153, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[153, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[154, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[154, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[154, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[156, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[156, "partitioning-the-data"]], "Feature normalization": [[156, "feature-normalization"]], "Establishing a baseline model": [[156, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[156, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[156, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[156, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[158, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[158, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[158, "fit-the-regressors"], [158, "id2"]], "Plot the true and estimated coefficients": [[158, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[158, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[158, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[158, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[159, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[159, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[159, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[159, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[160, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[161, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[162, "logistic-regression-3-class-classifier"]], "Lasso and Elastic Net for Sparse Signals": [[163, "lasso-and-elastic-net-for-sparse-signals"]], "Data Generation": [[163, "data-generation"]], "Lasso": [[163, "lasso"], [928, "lasso"]], "ElasticNet": [[163, "elasticnet"]], "Lasso and Elastic Net": [[164, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[165, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[165, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[165, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[166, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[167, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[168, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[168, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[168, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[168, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[168, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[168, "summary-of-cross-validation-approach"]], "Logistic function": [[169, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[170, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[171, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[172, "regularization-path-of-l1-logistic-regression"]], "Load data": [[172, "load-data"]], "Compute regularization path": [[172, "compute-regularization-path"]], "Plot regularization path": [[172, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[173, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[173, "fit-models"]], "Plot support and time series": [[173, "plot-support-and-time-series"]], "Non-negative least squares": [[174, "non-negative-least-squares"]], "Linear Regression Example": [[175, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[176, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[177, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[178, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[179, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[179, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[179, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[179, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[179, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[179, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[179, "evaluation-of-the-ranking-power"]], "Main takeaways": [[179, "main-takeaways"]], "Polynomial and Spline interpolation": [[180, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[180, "periodic-splines"]], "Quantile regression": [[181, "quantile-regression"]], "Fitting a QuantileRegressor": [[181, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[181, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[182, "robust-linear-model-estimation-using-ransac"]], "Plot Ridge coefficients as a function of the L2 regularization": [[183, "plot-ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Plot Ridge coefficients as a function of the regularization": [[184, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[184, "compute-paths"]], "Display results": [[184, "display-results"]], "Robust linear estimator fitting": [[185, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[186, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[187, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[188, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[189, "sgd-convex-loss-functions"]], "SGD: Penalties": [[190, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[191, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[192, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[193, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[194, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[195, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[196, "theil-sen-regression"]], "Outliers only in the y direction": [[196, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[196, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[197, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[197, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[197, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[197, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[197, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[199, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[199, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[199, "locally-linear-embeddings"]], "Isomap Embedding": [[199, "isomap-embedding"]], "Multidimensional scaling": [[199, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[199, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[199, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[200, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[200, "load-digits-dataset"]], "Helper function to plot embedding": [[200, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[200, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[201, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[202, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[203, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[203, "swiss-roll"]], "Swiss-Hole": [[203, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[204, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[206, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[207, "visualizations-with-display-objects"]], "Load Data and train model": [[207, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[207, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[207, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[207, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[207, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[208, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[208, "compact-text-representation"]], "Rich HTML representation": [[208, "rich-html-representation"]], "Isotonic Regression": [[209, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[210, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[210, "theoretical-bounds"]], "Empirical validation": [[210, "empirical-validation"]], "Remarks": [[210, "remarks"]], "Explicit feature map approximation for RBF kernels": [[211, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[211, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[211, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[211, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[212, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[212, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[212, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[212, "look-at-the-results"], [306, "look-at-the-results"]], "Visualize training and prediction times": [[212, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[212, "visualize-the-learning-curves"]], "Multilabel classification": [[213, "multilabel-classification"], [933, "multilabel-classification"]], "Face completion with a multi-output estimators": [[214, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[215, "evaluation-of-outlier-detection-estimators"]], "Define a data preprocessing function": [[215, "define-a-data-preprocessing-function"]], "Define an outlier prediction function": [[215, "define-an-outlier-prediction-function"]], "Plot and interpret results": [[215, "plot-and-interpret-results"]], "Advanced Plotting With Partial Dependence": [[216, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[216, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[216, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[216, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[216, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[217, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[217, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[217, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[217, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[217, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[217, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[218, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[218, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[218, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[218, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[219, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[221, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[222, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[223, "gmm-covariances"]], "GMM Initialization Methods": [[224, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[225, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[226, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[226, "plot-the-bic-scores"]], "Plot the best model": [[226, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[227, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[229, "confusion-matrix"], [932, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[230, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[230, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[230, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[230, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[231, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[232, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[232, "generate-synthetic-data"]], "Define the classifiers": [[232, "define-the-classifiers"]], "Plot ROC and DET curves": [[232, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[233, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[233, "the-dataset"]], "Define our grid-search strategy": [[233, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[233, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[234, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[235, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[235, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[235, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[235, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[235, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[235, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[235, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[236, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[236, "data-loading"]], "Pipeline with hyperparameter tuning": [[236, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[237, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[237, "learning-curve"]], "Complexity analysis": [[237, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[238, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[238, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[238, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[238, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[239, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[239, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[239, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[240, "nested-versus-non-nested-cross-validation"]], "See Also:": [[240, null], [364, null]], "Test with permutations the significance of a classification score": [[241, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[241, "permutation-test-score"], [367, "permutation-test-score"]], "Original data": [[241, "original-data"], [273, "original-data"]], "Random data": [[241, "random-data"]], "Precision-Recall": [[242, "precision-recall"]], "In binary classification settings": [[242, "in-binary-classification-settings"]], "Dataset and model": [[242, "dataset-and-model"]], "Plot the Precision-Recall curve": [[242, "plot-the-precision-recall-curve"]], "In multi-label settings": [[242, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[242, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[242, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[242, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[242, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[243, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[244, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[244, "load-and-prepare-data"], [245, "load-and-prepare-data"], [278, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[244, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[244, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[244, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[244, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[244, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[244, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[244, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[244, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[245, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[245, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[246, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[247, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[247, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[248, "train-error-vs-test-error"]], "Compute train and test errors": [[248, "compute-train-and-test-errors"]], "Plot results functions": [[248, "plot-results-functions"]], "Underfitting vs. Overfitting": [[249, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[250, "plotting-validation-curves"]], "Classifier Chain": [[252, "classifier-chain"]], "Approximate nearest neighbors in TSNE": [[253, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[255, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[256, "nearest-neighbors-classification"], [935, "nearest-neighbors-classification"]], "Kernel Density Estimation": [[257, "kernel-density-estimation"], [369, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[258, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[259, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[260, "outlier-detection-with-local-outlier-factor-lof"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[261, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[262, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[263, "neighborhood-components-analysis-illustration"]], "Original points": [[263, "original-points"]], "Learning an embedding": [[263, "learning-an-embedding"]], "Nearest Centroid Classification": [[264, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[265, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[266, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[268, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[269, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[270, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[271, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[271, "models-definition"]], "Training": [[271, "training"], [935, "training"]], "Plotting": [[271, "plotting"], [362, "plotting"], [362, "id7"], [362, "id9"]], "Compare the effect of different scalers on data with outliers": [[273, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[273, "standardscaler"]], "MinMaxScaler": [[273, "minmaxscaler"]], "MaxAbsScaler": [[273, "maxabsscaler"]], "RobustScaler": [[273, "robustscaler"]], "PowerTransformer": [[273, "powertransformer"]], "QuantileTransformer (uniform output)": [[273, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[273, "quantiletransformer-gaussian-output"]], "Normalizer": [[273, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[274, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[275, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[276, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[277, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[278, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[278, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[278, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[278, "effect-of-rescaling-on-model-s-performance"]], "Comparing Target Encoder with Other Encoders": [[279, "comparing-target-encoder-with-other-encoders"]], "Loading Data from OpenML": [[279, "loading-data-from-openml"]], "Training and Evaluating Pipelines with Different Encoders": [[279, "training-and-evaluating-pipelines-with-different-encoders"]], "Native Categorical Feature Support": [[279, "native-categorical-feature-support"]], "Plotting the Results": [[279, "plotting-the-results"]], "Release Highlights for scikit-learn 0.22": [[281, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[281, "new-plotting-api"]], "Stacking Classifier and Regressor": [[281, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[281, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[281, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[281, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[281, "knn-based-imputation"]], "Tree pruning": [[281, "tree-pruning"]], "Retrieve dataframes from OpenML": [[281, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[281, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[281, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[282, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[282, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[282, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[282, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[282, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[282, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 1.1": [[285, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[285, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[285, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[285, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[285, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[285, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[285, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[286, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[286, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[286, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[286, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[286, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[286, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[286, "improved-efficiency-of-many-estimators"]], "Label Propagation digits: Demonstrating performance": [[288, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[288, "semi-supervised-learning"], [945, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[288, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[289, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[290, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[291, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[292, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[293, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[295, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[296, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[297, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[298, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[299, "rbf-svm-parameters"]], "Load and prepare data set": [[299, "load-and-prepare-data-set"]], "Train classifiers": [[299, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[300, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[301, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[302, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[302, "load-some-data-to-play-with"]], "Create the pipeline": [[302, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[302, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "SVM-Kernels": [[303, "svm-kernels"]], "SVM Margins Example": [[304, "svm-margins-example"]], "Non-linear SVM": [[305, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[306, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[307, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[307, "l1-penalty-case"]], "L2-penalty case": [[307, "l2-penalty-case"]], "SVM Tie Breaking Example": [[308, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[309, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[311, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[311, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[311, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[311, "model-without-metadata-stripping"]], "Model with metadata stripping": [[311, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[311, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[311, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[312, "clustering-text-documents-using-k-means"]], "Loading text data": [[312, "loading-text-data"]], "Quantifying the quality of clustering results": [[312, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[312, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[312, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[312, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[312, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[312, "top-terms-per-cluster"]], "HashingVectorizer": [[312, "hashingvectorizer"]], "Clustering evaluation summary": [[312, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[313, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[313, "load-data"]], "Define preprocessing functions": [[313, "define-preprocessing-functions"]], "DictVectorizer": [[313, "dictvectorizer"]], "FeatureHasher": [[313, "featurehasher"]], "Comparison with special purpose text vectorizers": [[313, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[313, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[315, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[315, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[315, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[316, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[317, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[318, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[319, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[319, "train-tree-classifier"]], "Tree structure": [[319, "tree-structure"]], "Decision path": [[319, "decision-path"]], "sklearn.utils.arrayfuncs.min_pos": [[866, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.parallel_backend": [[900, "sklearn-utils-parallel-backend"]], "sklearn.utils.register_parallel_backend": [[902, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[914, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[915, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [973, "authors"], [973, "id20"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [352, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Release Highlights for scikit-learn 0.24": [[283, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[283, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[283, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[283, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[283, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[283, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[283, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[283, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[283, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[283, "new-documentation-improvements"], [284, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[284, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[284, "keyword-and-positional-arguments"]], "Spline Transformers": [[284, "spline-transformers"]], "Quantile Regressor": [[284, "quantile-regressor"]], "Feature Names Support": [[284, "feature-names-support"]], "A more flexible plotting API": [[284, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[284, "online-one-class-svm"], [946, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[284, "histogram-based-gradient-boosting-models-are-now-stable"]], "Common pitfalls and recommended practices": [[320, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[320, "inconsistent-preprocessing"]], "Data leakage": [[320, "data-leakage"]], "Data leakage during pre-processing": [[320, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[320, "how-to-avoid-data-leakage"]], "Controlling randomness": [[320, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[320, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Estimators": [[320, "estimators"], [320, "id2"], [340, "estimators"], [362, "estimators"]], "CV splitters": [[320, "cv-splitters"], [320, "id3"]], "Common pitfalls and subtleties": [[320, "common-pitfalls-and-subtleties"]], "General recommendations": [[320, "general-recommendations"]], "Getting reproducible results across multiple executions": [[320, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[320, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[323, "computing-with-scikit-learn"]], "Computational Performance": [[324, "computational-performance"]], "Bulk versus Atomic mode": [[324, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[324, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[324, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[324, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[324, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[324, "feature-extraction-latency"]], "Prediction Throughput": [[324, "prediction-throughput"]], "Tips and Tricks": [[324, "tips-and-tricks"]], "Linear algebra libraries": [[324, "linear-algebra-libraries"]], "Limiting Working Memory": [[324, "limiting-working-memory"]], "Model Compression": [[324, "model-compression"]], "Model Reshaping": [[324, "model-reshaping"]], "Links": [[324, "links"]], "Parallelism, resource management, and configuration": [[325, "parallelism-resource-management-and-configuration"]], "Parallelism": [[325, "parallelism"], [921, "parallelism"]], "Higher-level parallelism with joblib": [[325, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[325, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[325, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[325, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[325, "configuration-switches"]], "Python API": [[325, "python-api"]], "Environment variables": [[325, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[325, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[325, "sklearn-working-memory"]], "SKLEARN_SEED": [[325, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[325, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[325, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[325, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[325, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[325, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[325, "sklearn-pairwise-dist-chunk-size"]], "Strategies to scale computationally: bigger data": [[326, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[326, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[326, "streaming-instances"]], "Extracting features": [[326, "extracting-features"]], "Incremental learning": [[326, "incremental-learning"]], "Notes": [[326, "notes"], [364, "notes"], [928, "notes"]], "Table Of Contents": [[327, "table-of-contents"]], "Dataset transformations": [[330, "dataset-transformations"]], "Dataset loading utilities": [[331, "dataset-loading-utilities"], [343, "dataset-loading-utilities"]], "Loading other datasets": [[332, "loading-other-datasets"]], "Sample images": [[332, "sample-images"]], "Examples:": [[332, null], [353, null], [360, null], [360, null], [361, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [363, null], [364, null], [364, null], [364, null], [364, null], [364, null], [365, null], [365, null], [365, null], [365, null], [365, null], [365, null], [366, null], [368, null], [368, null], [368, null], [368, null], [368, null], [368, null], [368, null], [368, null], [368, null], [368, null], [368, null], [368, null], [369, null], [370, null], [370, null], [370, null], [370, null], [370, null], [370, null], [370, null], [370, null], [370, null], [370, null], [370, null], [370, null], [372, null], [372, null], [372, null], [372, null], [921, null], [921, null], [921, null], [924, null], [924, null], [926, null], [926, null], [926, null], [927, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [928, null], [929, null], [931, null], [931, null], [931, null], [931, null], [932, null], [932, null], [932, null], [932, null], [932, null], [933, null], [935, null], [935, null], [935, null], [935, null], [935, null], [936, null], [936, null], [937, null], [938, null], [938, null], [938, null], [938, null], [938, null], [938, null], [939, null], [940, null], [942, null], [942, null], [942, null], [946, null], [946, null], [947, null], [947, null], [947, null], [947, null], [947, null], [947, null], [948, null], [948, null], [948, null], [948, null], [970, null]], "Datasets in svmlight / libsvm format": [[332, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[332, null]], "Downloading datasets from the openml.org repository": [[332, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[332, "dataset-versions"]], "ARFF parser": [[332, "arff-parser"]], "Loading from external datasets": [[332, "loading-from-external-datasets"], [958, null]], "Real world datasets": [[333, "real-world-datasets"]], "The Olivetti faces dataset": [[333, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[333, "the-20-newsgroups-text-dataset"]], "Usage": [[333, "usage"], [333, "id2"], [361, "usage"], [364, "usage"], [364, "id1"], [370, "usage"], [370, "id26"], [370, "id31"], [370, "id32"], [370, "id34"], [928, "usage"]], "Converting text to vectors": [[333, "converting-text-to-vectors"]], "Filtering text for more realistic training": [[333, "filtering-text-for-more-realistic-training"]], "Data Considerations": [[333, null]], "Recommendation": [[333, null]], "The Labeled Faces in the Wild face recognition dataset": [[333, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[333, "forest-covertypes"]], "RCV1 dataset": [[333, "rcv1-dataset"]], "Kddcup 99 dataset": [[333, "kddcup-99-dataset"]], "California Housing dataset": [[333, "california-housing-dataset"]], "Generated datasets": [[334, "generated-datasets"]], "Generators for classification and clustering": [[334, "generators-for-classification-and-clustering"]], "Single label": [[334, "single-label"]], "Multilabel": [[334, "multilabel"]], "Generators for regression": [[334, "generators-for-regression"]], "Generators for manifold learning": [[334, "generators-for-manifold-learning"]], "Generators for decomposition": [[334, "generators-for-decomposition"]], "Toy datasets": [[335, "toy-datasets"]], "Iris plants dataset": [[335, "iris-plants-dataset"]], "Diabetes dataset": [[335, "diabetes-dataset"], [965, null]], "Optical recognition of handwritten digits dataset": [[335, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[335, "linnerrud-dataset"]], "Wine recognition dataset": [[335, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[335, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[336, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[336, "installing-nightly-builds"]], "Building from source": [[336, "building-from-source"]], "Dependencies": [[336, "dependencies"]], "Runtime dependencies": [[336, "runtime-dependencies"]], "Build dependencies": [[336, "build-dependencies"]], "Test dependencies": [[336, "test-dependencies"]], "Building a specific version from a tag": [[336, "building-a-specific-version-from-a-tag"]], "Editable mode": [[336, "editable-mode"]], "Platform-specific instructions": [[336, "platform-specific-instructions"]], "Windows": [[336, "windows"]], "macOS": [[336, "macos"]], "macOS compilers from conda-forge": [[336, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[336, "macos-compilers-from-homebrew"]], "Linux": [[336, "linux"]], "Linux compilers from the system": [[336, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[336, "linux-compilers-from-conda-forge"]], "FreeBSD": [[336, "freebsd"]], "Alternative compilers": [[336, "alternative-compilers"]], "Parallel builds": [[336, "parallel-builds"]], "Bug triaging and issue curation": [[337, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[337, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[337, null]], "Working on PRs to help review": [[337, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[337, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[337, null]], "A typical workflow for triaging issues": [[337, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[338, "contributing"], [349, "contributing"]], "Our community, our values": [[338, null]], "Ways to contribute": [[338, "ways-to-contribute"]], "Contributing to related projects": [[338, null]], "Submitting a bug report or a feature request": [[338, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[338, "how-to-make-a-good-bug-report"]], "Contributing code": [[338, "contributing-code"]], "Video resources": [[338, "video-resources"]], "How to contribute": [[338, "how-to-contribute"]], "Learning git:": [[338, null]], "Pull request checklist": [[338, "pull-request-checklist"]], "Continuous Integration (CI)": [[338, "continuous-integration-ci"]], "Stalled pull requests": [[338, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[338, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[338, "issues-for-new-contributors"]], "good first issue tag": [[338, null]], "Easy tag": [[338, null]], "help wanted tag": [[338, null]], "Documentation": [[338, "documentation"], [973, "documentation"]], "Building the documentation": [[338, "building-the-documentation"]], "Guidelines for writing documentation": [[338, "guidelines-for-writing-documentation"]], "Cross-referencing": [[338, "cross-referencing"]], "Generated documentation on GitHub Actions": [[338, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[338, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[338, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[338, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[338, "monitoring-performance"]], "Issue Tracker Tags": [[338, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[338, "maintaining-backwards-compatibility"]], "Deprecation": [[338, "deprecation"]], "Change the default value of a parameter": [[338, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[338, "code-review-guidelines"]], "Communication Guidelines": [[338, "communication-guidelines"]], "Reading the existing code base": [[338, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[339, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[339, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[339, "tips-to-ease-development"]], "Tips for performance": [[339, "tips-for-performance"]], "Using OpenMP": [[339, "using-openmp"]], "Developing scikit-learn estimators": [[340, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[340, "apis-of-scikit-learn-objects"]], "Different objects": [[340, "different-objects"]], "Instantiation": [[340, "instantiation"]], "Fitting": [[340, "fitting"]], "Estimated Attributes": [[340, "estimated-attributes"]], "Optional Arguments": [[340, "optional-arguments"]], "Universal attributes": [[340, "universal-attributes"]], "Rolling your own estimator": [[340, "rolling-your-own-estimator"]], "Project template:": [[340, null]], "BaseEstimator and mixins:": [[340, null]], "get_params and set_params": [[340, "get-params-and-set-params"]], "Parameters and init": [[340, "parameters-and-init"]], "Cloning": [[340, "cloning"]], "Pipeline compatibility": [[340, "pipeline-compatibility"]], "Estimator types": [[340, "estimator-types"]], "Specific models": [[340, "specific-models"]], "Estimator Tags": [[340, "estimator-tags"]], "Developer API for set_output": [[340, "developer-api-for-set-output"]], "Coding guidelines": [[340, "coding-guidelines"]], "Input validation": [[340, "input-validation"]], "Random Numbers": [[340, "random-numbers"]], "Numerical assertions in tests": [[340, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[341, "developer-s-guide"]], "Maintainer / core-developer information": [[342, "maintainer-core-developer-information"]], "Releasing": [[342, "releasing"]], "Before a release": [[342, "before-a-release"]], "Preparing a release PR": [[342, "preparing-a-release-pr"]], "Major version release": [[342, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[342, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[342, "making-a-release"]], "Release checklist": [[342, "release-checklist"]], "Merging Pull Requests": [[342, "merging-pull-requests"]], "The scikit-learn.org web site": [[342, "the-scikit-learn-org-web-site"]], "Experimental features": [[342, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[343, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[343, "good-practices"]], "Provide a failing code example with minimal comments": [[343, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[343, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[343, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[343, "use-markdown-formatting"]], "Synthetic dataset": [[343, "synthetic-dataset"]], "NumPy": [[343, "numpy"]], "Pandas": [[343, "pandas"]], "make_regression": [[343, "make-regression"]], "make_classification": [[343, "make-classification"]], "make_blobs": [[343, "make-blobs"]], "How to optimize for speed": [[344, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[344, "python-cython-or-c-c"]], "Profiling Python code": [[344, "profiling-python-code"]], "Memory usage profiling": [[344, "memory-usage-profiling"]], "Using Cython": [[344, "using-cython"]], "Profiling compiled extensions": [[344, "profiling-compiled-extensions"]], "Using yep and gperftools": [[344, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[344, "using-a-debugger-gdb"]], "Using gprof": [[344, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[344, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[344, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[344, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[344, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[345, "developing-with-the-plotting-api"]], "Plotting API Overview": [[345, "plotting-api-overview"]], "Plotting with Multiple Axes": [[345, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[346, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[346, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[346, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[346, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[346, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[346, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[346, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[346, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[346, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[347, "utilities-for-developers"]], "Validation Tools": [[347, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[347, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[347, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[347, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[347, "graph-routines"]], "Testing Functions": [[347, "testing-functions"]], "Multiclass and multilabel utility function": [[347, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[347, "helper-functions"]], "Hash Functions": [[347, "hash-functions"]], "Warnings and Exceptions": [[347, "warnings-and-exceptions"]], "Dispatching": [[348, "dispatching"]], "Frequently Asked Questions": [[349, "frequently-asked-questions"]], "Table of Contents": [[349, "table-of-contents"]], "About the project": [[349, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[349, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[349, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[349, "why-scikit"]], "Do you support PyPy?": [[349, "do-you-support-pypy"]], "Implementation decisions": [[349, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[349, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[349, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[349, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[349, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[349, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[349, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[349, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[349, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[349, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[349, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[349, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[349, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[349, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[349, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[349, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[349, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[349, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[349, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[349, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[349, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[349, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[350, "getting-started"]], "Fitting and predicting: estimator basics": [[350, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[350, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[350, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[350, "model-evaluation"]], "Automatic parameter searches": [[350, "automatic-parameter-searches"]], "Next steps": [[350, "next-steps"]], "Glossary of Common Terms and API Elements": [[351, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[351, "general-concepts"]], "Class APIs and Estimator Types": [[351, "class-apis-and-estimator-types"]], "Target Types": [[351, "target-types"]], "Methods": [[351, "methods"]], "Parameters": [[351, "parameters"], [370, "parameters"]], "Attributes": [[351, "attributes"]], "Data and sample properties": [[351, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[352, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[352, "roles-and-responsibilities"]], "Contributors": [[352, "contributors"]], "Communication team": [[352, "communication-team"]], "Core developers": [[352, "core-developers"]], "Technical Committee": [[352, "technical-committee"]], "Decision Making Process": [[352, "decision-making-process"]], "Governance Model Changes": [[352, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[352, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[354, "installing-scikit-learn"]], "Installing the latest release": [[354, "installing-the-latest-release"]], "Installing on Apple Silicon M1 hardware": [[354, "installing-on-apple-silicon-m1-hardware"]], "Third party distributions of scikit-learn": [[354, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[354, "alpine-linux"]], "Arch Linux": [[354, "arch-linux"]], "Debian/Ubuntu": [[354, "debian-ubuntu"]], "Fedora": [[354, "fedora"]], "NetBSD": [[354, "netbsd"]], "MacPorts for Mac OSX": [[354, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[354, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel conda channel": [[354, "intel-conda-channel"]], "WinPython for Windows": [[354, "winpython-for-windows"]], "Troubleshooting": [[354, "troubleshooting"]], "Error caused by file path length limit on Windows": [[354, "error-caused-by-file-path-length-limit-on-windows"]], "Model persistence": [[357, "model-persistence"]], "Python specific serialization": [[357, "python-specific-serialization"]], "Security & maintainability limitations": [[357, "security-maintainability-limitations"]], "A more secure format: skops": [[357, "a-more-secure-format-skops"]], "Interoperable formats": [[357, "interoperable-formats"]], "Model selection and evaluation": [[358, "model-selection-and-evaluation"]], "Array API support (experimental)": [[359, "array-api-support-experimental"]], "Example usage": [[359, "example-usage"]], "Estimators with support for Array API-compatible inputs": [[359, "estimators-with-support-for-array-api-compatible-inputs"]], "Spectral Co-Clustering": [[360, "spectral-co-clustering"]], "Mathematical formulation": [[360, "mathematical-formulation"], [360, "id3"], [363, "mathematical-formulation"], [363, "id12"], [363, "id19"], [363, "id29"], [363, "id33"], [370, "mathematical-formulation"], [928, "mathematical-formulation"], [935, "mathematical-formulation"], [936, "mathematical-formulation"], [946, "mathematical-formulation"], [947, "mathematical-formulation"], [948, "mathematical-formulation"]], "Spectral Biclustering": [[360, "spectral-biclustering"]], "Biclustering evaluation": [[360, "biclustering-evaluation"]], "Probability calibration": [[361, "probability-calibration"]], "Calibrating a classifier": [[361, "calibrating-a-classifier"]], "Sigmoid": [[361, "sigmoid"]], "Isotonic": [[361, "isotonic"]], "Multiclass support": [[361, "multiclass-support"]], "API Reference": [[362, "api-reference"]], "sklearn.base: Base classes and utility functions": [[362, "module-sklearn.base"]], "Base classes": [[362, "base-classes"]], "Functions": [[362, "functions"], [362, "id1"]], "sklearn.calibration: Probability Calibration": [[362, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[362, "module-sklearn.cluster"]], "Classes": [[362, "classes"]], "sklearn.compose: Composite Estimators": [[362, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[362, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[362, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[362, "module-sklearn.datasets"]], "Loaders": [[362, "loaders"]], "Samples generator": [[362, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[362, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[362, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[362, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[362, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[362, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[362, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[362, "module-sklearn.feature_extraction"]], "From images": [[362, "module-sklearn.feature_extraction.image"]], "From text": [[362, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[362, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[362, "module-sklearn.gaussian_process"]], "sklearn.impute: Impute": [[362, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[362, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[362, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[362, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[362, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[362, "module-sklearn.linear_model"]], "Linear classifiers": [[362, "linear-classifiers"]], "Classical linear regressors": [[362, "classical-linear-regressors"]], "Regressors with variable selection": [[362, "regressors-with-variable-selection"]], "Bayesian regressors": [[362, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[362, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[362, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[362, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[362, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[362, "sklearn-metrics-metrics"]], "Model Selection Interface": [[362, "model-selection-interface"]], "Classification metrics": [[362, "classification-metrics"], [932, "classification-metrics"]], "Regression metrics": [[362, "regression-metrics"], [932, "regression-metrics"]], "Multilabel ranking metrics": [[362, "multilabel-ranking-metrics"], [932, "multilabel-ranking-metrics"]], "Clustering metrics": [[362, "clustering-metrics"], [932, "clustering-metrics"]], "Biclustering metrics": [[362, "biclustering-metrics"]], "Distance metrics": [[362, "distance-metrics"]], "Pairwise metrics": [[362, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[362, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[362, "module-sklearn.model_selection"]], "Splitter Classes": [[362, "splitter-classes"]], "Splitter Functions": [[362, "splitter-functions"]], "Hyper-parameter optimizers": [[362, "hyper-parameter-optimizers"]], "Model validation": [[362, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[362, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[362, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[362, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[362, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[362, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[362, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[362, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[362, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[362, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[362, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[362, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[362, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[362, "module-sklearn.utils"]], "Recently deprecated": [[362, "recently-deprecated"]], "Input data": [[363, null]], "Overview of clustering methods": [[363, "overview-of-clustering-methods"]], "K-means": [[363, "k-means"]], "Low-level parallelism": [[363, "low-level-parallelism"], [370, "low-level-parallelism"]], "Mini Batch K-Means": [[363, "mini-batch-k-means"]], "Affinity Propagation": [[363, "affinity-propagation"]], "Mean Shift": [[363, "mean-shift"]], "Spectral clustering": [[363, "spectral-clustering"]], "Different label assignment strategies": [[363, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[363, "spectral-clustering-graphs"]], "Hierarchical clustering": [[363, "hierarchical-clustering"]], "FeatureAgglomeration": [[363, null]], "Different linkage type: Ward, complete, average, and single linkage": [[363, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[363, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[363, "adding-connectivity-constraints"]], "Varying the metric": [[363, "varying-the-metric"]], "Bisecting K-Means": [[363, "bisecting-k-means"]], "DBSCAN": [[363, "dbscan"]], "Implementation": [[363, null], [935, "implementation"]], "Memory consumption for large sample sizes": [[363, null]], "OPTICS": [[363, "optics"]], "Comparison with DBSCAN": [[363, null]], "Computational Complexity": [[363, null]], "BIRCH": [[363, "birch"]], "Clustering performance evaluation": [[363, "clustering-performance-evaluation"]], "Rand index": [[363, "rand-index"]], "Advantages": [[363, "advantages"], [363, "id10"], [363, "id17"], [363, "id21"], [363, "id24"], [363, "id27"], [363, "id31"], [363, "id35"]], "Drawbacks": [[363, "drawbacks"], [363, "id11"], [363, "id18"], [363, "id22"], [363, "id25"], [363, "id28"], [363, "id32"], [363, "id36"]], "Mutual Information based scores": [[363, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[363, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[363, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[363, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[363, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[363, "davies-bouldin-index"]], "Contingency Matrix": [[363, "contingency-matrix"]], "Pair Confusion Matrix": [[363, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[364, "pipeline-chaining-estimators"]], "Construction": [[364, "construction"]], "Accessing steps": [[364, "accessing-steps"]], "Nested parameters": [[364, "nested-parameters"]], "Caching transformers: avoid repeated computation": [[364, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[364, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[364, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[364, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[364, "visualizing-composite-estimators"]], "Empirical covariance": [[365, "empirical-covariance"]], "Shrunk Covariance": [[365, "shrunk-covariance"]], "Basic shrinkage": [[365, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[365, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[365, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[365, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[365, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[365, "minimum-covariance-determinant"]], "PLSCanonical": [[366, "plscanonical"]], "Transforming data": [[366, "transforming-data"]], "Predicting the targets Y": [[366, "predicting-the-targets-y"]], "PLSSVD": [[366, "plssvd"]], "PLSRegression": [[366, "plsregression"]], "Canonical Correlation Analysis": [[366, "canonical-correlation-analysis"]], "Reference:": [[366, null]], "Cross-validation: evaluating estimator performance": [[367, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[367, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[367, null]], "The cross_validate function and multiple metric evaluation": [[367, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[367, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[367, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[367, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[367, "k-fold"]], "Repeated K-Fold": [[367, "repeated-k-fold"]], "Leave One Out (LOO)": [[367, "leave-one-out-loo"]], "Leave P Out (LPO)": [[367, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[367, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels.": [[367, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[367, "stratified-k-fold"]], "Stratified Shuffle Split": [[367, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[367, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[367, "group-k-fold"]], "StratifiedGroupKFold": [[367, "stratifiedgroupkfold"]], "Leave One Group Out": [[367, "leave-one-group-out"]], "Leave P Groups Out": [[367, "leave-p-groups-out"]], "Group Shuffle Split": [[367, "group-shuffle-split"]], "Predefined Fold-Splits / Validation-Sets": [[367, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[367, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[367, "cross-validation-of-time-series-data"]], "Time Series Split": [[367, "time-series-split"]], "A note on shuffling": [[367, "a-note-on-shuffling"]], "Cross validation and model selection": [[367, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[368, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[368, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[368, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[368, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[368, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[368, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[368, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[368, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[368, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[368, "dictionary-learning"]], "Generic dictionary learning": [[368, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[368, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[368, null]], "Factor Analysis": [[368, "factor-analysis"]], "Independent component analysis (ICA)": [[368, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[368, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[368, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[368, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[368, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[368, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[369, "density-estimation"]], "Density Estimation: Histograms": [[369, "density-estimation-histograms"]], "Bagging meta-estimator": [[370, "bagging-meta-estimator"]], "Forests of randomized trees": [[370, "forests-of-randomized-trees"]], "Random Forests": [[370, "random-forests"]], "Extremely Randomized Trees": [[370, "extremely-randomized-trees"]], "Parallelization": [[370, "parallelization"]], "Feature importance evaluation": [[370, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[370, "totally-random-trees-embedding"]], "AdaBoost": [[370, "adaboost"]], "Gradient Tree Boosting": [[370, "gradient-tree-boosting"]], "Fitting additional weak-learners": [[370, "fitting-additional-weak-learners"]], "Controlling the tree size": [[370, "controlling-the-tree-size"]], "Loss Functions": [[370, "loss-functions"]], "Shrinkage via learning rate": [[370, "shrinkage-via-learning-rate"]], "Subsampling": [[370, "subsampling"]], "Interpretation with feature importance": [[370, "interpretation-with-feature-importance"]], "Histogram-Based Gradient Boosting": [[370, "histogram-based-gradient-boosting"]], "Missing values support": [[370, "missing-values-support"]], "Sample weight support": [[370, "sample-weight-support"]], "Categorical Features Support": [[370, "categorical-features-support"]], "Interaction constraints": [[370, "interaction-constraints"]], "Why it\u2019s faster": [[370, "why-it-s-faster"]], "Voting Classifier": [[370, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[370, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[370, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[370, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[370, "voting-regressor"]], "Stacked generalization": [[370, "stacked-generalization"]], "Feature extraction": [[371, "feature-extraction"]], "Loading features from dicts": [[371, "loading-features-from-dicts"]], "Feature hashing": [[371, "feature-hashing"]], "Implementation details": [[371, "implementation-details"], [946, "implementation-details"], [947, "implementation-details"]], "Text feature extraction": [[371, "text-feature-extraction"]], "The Bag of Words representation": [[371, "the-bag-of-words-representation"]], "Sparsity": [[371, "sparsity"], [965, "sparsity"]], "Common Vectorizer usage": [[371, "common-vectorizer-usage"]], "Using stop words": [[371, "using-stop-words"]], "Tf\u2013idf term weighting": [[371, "tfidf-term-weighting"]], "Decoding text files": [[371, "decoding-text-files"]], "Applications and examples": [[371, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[371, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[371, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Performing out-of-core scaling with HashingVectorizer": [[371, "performing-out-of-core-scaling-with-hashingvectorizer"]], "Customizing the vectorizer classes": [[371, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[371, "image-feature-extraction"]], "Patch extraction": [[371, "patch-extraction"]], "Connectivity graph of an image": [[371, "connectivity-graph-of-an-image"]], "Feature selection": [[372, "feature-selection"]], "Removing features with low variance": [[372, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[372, null]], "Feature selection using SelectFromModel": [[372, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[372, "l1-based-feature-selection"]], "L1-recovery and compressive sensing": [[372, "compressive-sensing"]], "Tree-based feature selection": [[372, "tree-based-feature-selection"]], "Sequential Feature Selection": [[372, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[372, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[373, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[373, "gaussian-process-regression-gpr"]], "GPR examples": [[373, "gpr-examples"]], "GPR with noise-level estimation": [[373, "gpr-with-noise-level-estimation"]], "Comparison of GPR and Kernel Ridge Regression": [[373, "comparison-of-gpr-and-kernel-ridge-regression"]], "GPR on Mauna Loa CO2 data": [[373, "gpr-on-mauna-loa-co2-data"]], "Gaussian Process Classification (GPC)": [[373, "gaussian-process-classification-gpc"]], "GPC examples": [[373, "gpc-examples"]], "Probabilistic predictions with GPC": [[373, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[373, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[373, "kernels-for-gaussian-processes"]], "Gaussian Process Kernel API": [[373, "gaussian-process-kernel-api"]], "Basic kernels": [[373, "basic-kernels"]], "Kernel operators": [[373, "kernel-operators"]], "Radial basis function (RBF) kernel": [[373, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[373, "rational-quadratic-kernel"]], "Dot-Product kernel": [[373, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[374, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[375, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[376, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[377, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[377, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[378, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[379, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[380, "sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[381, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[382, "sklearn-base-densitymixin"]], "sklearn.base.OneToOneFeatureMixin": [[383, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.RegressorMixin": [[384, "sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[385, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[385, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[386, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[387, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[388, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[389, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[389, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[390, "sklearn-calibration-calibrationdisplay"]], "sklearn.calibration.calibration_curve": [[391, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[392, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[392, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[393, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[393, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[394, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[394, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[395, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[395, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[396, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[396, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[397, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[397, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.KMeans": [[398, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[398, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[399, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[399, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[400, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[400, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[401, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[401, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[402, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[402, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[403, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[403, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[404, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[404, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[405, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[405, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[406, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[406, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[407, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[408, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[409, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[409, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[410, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[411, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[411, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[412, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[413, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[413, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[414, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[415, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[415, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[416, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[416, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[417, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[417, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[418, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[418, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[419, "sklearn-config-context"]], "Examples using sklearn.config_context": [[419, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[420, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[420, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[421, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[421, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[422, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[423, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[423, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[424, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[424, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[425, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[425, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[426, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[426, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[427, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[427, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[428, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[428, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[429, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[430, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[430, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[431, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[432, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[433, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[433, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[434, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[434, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[435, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[435, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[436, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[437, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[438, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[438, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[439, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[439, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[440, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[440, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[441, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[441, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[442, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[442, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[443, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[443, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[444, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[445, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[445, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[446, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[446, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[447, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[447, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[448, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[449, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[449, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[450, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[450, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[451, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[451, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[452, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[452, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[453, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[453, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[454, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[455, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[455, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[456, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[457, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[457, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[458, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[459, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[460, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[461, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[461, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[462, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[462, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[463, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[463, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[464, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[464, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[465, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[465, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[466, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[466, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[467, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[468, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[469, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[470, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[470, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[471, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[471, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[472, "sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[473, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[473, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[474, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[474, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[475, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[475, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[476, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[476, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[477, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[477, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[478, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[478, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[479, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[480, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[481, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[481, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[482, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[483, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[483, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[484, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[484, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[485, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[485, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[486, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[486, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[487, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[487, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[488, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[488, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[489, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[489, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[490, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[490, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[491, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[491, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[492, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[492, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[493, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[493, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[494, "sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[495, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[495, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[496, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[497, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[498, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[499, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[500, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[500, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[501, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[501, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[502, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[502, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[503, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[503, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[504, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[504, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[505, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[505, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[506, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[507, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[507, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[508, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[508, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[509, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[509, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[510, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[510, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[511, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[511, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[512, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[512, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[513, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[513, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[514, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[514, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[515, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[515, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[516, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[516, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[517, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[517, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[518, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[518, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[519, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[519, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[520, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[520, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[521, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[521, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[522, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[522, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[523, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[524, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[525, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[526, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[527, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[528, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[529, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[530, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[531, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[532, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[532, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[533, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[533, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[534, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[535, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[535, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[536, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[537, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[538, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[538, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[539, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[539, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[540, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[540, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[541, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[541, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[542, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[542, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[543, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[544, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[544, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[545, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[545, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[546, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[547, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[548, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[548, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[549, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[550, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[550, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[551, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[551, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[552, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[553, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[553, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[554, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[555, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[555, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[556, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[556, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[557, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[557, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[558, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[558, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[559, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[559, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[560, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[561, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[561, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[562, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[562, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[563, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[564, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[564, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[565, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[565, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[566, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[566, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[567, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[568, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[568, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[569, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[569, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[570, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[570, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[571, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[572, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[573, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[573, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[574, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[574, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[575, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[576, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[576, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[577, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[578, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[578, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[579, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[579, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[580, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[581, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[581, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[582, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[582, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "sklearn.inspection.PartialDependenceDisplay": [[583, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[583, "examples-using-sklearn-inspection-partialdependencedisplay"]], "sklearn.inspection.partial_dependence": [[584, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[584, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[585, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[585, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[586, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[586, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[587, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[588, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[589, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[590, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[590, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[591, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[591, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[592, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[592, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[593, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[594, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[594, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[595, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[595, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[596, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[596, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[597, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[597, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[598, "sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[599, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[599, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[600, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[600, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[601, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[602, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[603, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[603, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[604, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[604, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[605, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[606, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[606, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[607, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[607, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[608, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[608, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[609, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[609, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[610, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[610, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[611, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[612, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[613, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[613, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[614, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[615, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[615, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[616, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[616, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[617, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[617, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[618, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[619, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[619, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[620, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[620, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[621, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[621, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[622, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[622, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[623, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[623, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[624, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[624, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[625, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[625, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[626, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[627, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[627, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[628, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[628, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[629, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[629, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[630, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[630, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[631, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[631, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[632, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[632, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[633, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[633, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[634, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[635, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[635, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[636, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[637, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[638, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[639, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[639, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[640, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[640, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[641, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[641, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[642, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[642, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[643, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[643, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[644, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[644, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[645, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[646, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[647, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[648, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[648, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "sklearn.metrics.DetCurveDisplay": [[649, "sklearn-metrics-detcurvedisplay"]], "sklearn.metrics.DistanceMetric": [[650, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[651, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[651, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "sklearn.metrics.PredictionErrorDisplay": [[652, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[652, "examples-using-sklearn-metrics-predictionerrordisplay"]], "sklearn.metrics.RocCurveDisplay": [[653, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[653, "examples-using-sklearn-metrics-roccurvedisplay"]], "sklearn.metrics.accuracy_score": [[654, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[654, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[655, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[655, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[656, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[656, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[657, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[657, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[658, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[658, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[659, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[660, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[660, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[661, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[662, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[663, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[663, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[664, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[664, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[665, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[666, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[667, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[668, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[668, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[669, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[669, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[670, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[670, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[671, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[672, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[673, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[674, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[675, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[676, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[677, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[677, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[678, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[679, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[679, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[680, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[681, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[682, "sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[683, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[684, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[684, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[685, "sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[686, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[687, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[687, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[688, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[688, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[689, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[690, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[691, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[691, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[692, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[692, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[693, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[694, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[695, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[695, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[696, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[697, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[698, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[698, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[699, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[699, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[700, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[700, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[701, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[702, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[702, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[703, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[703, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[704, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[705, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[705, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[706, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[707, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[707, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[708, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[709, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[710, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[711, "sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[712, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[713, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[714, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[715, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[716, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[717, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[718, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[719, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[720, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[721, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[722, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[723, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[724, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[725, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[726, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[727, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[728, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[728, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[729, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[729, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[730, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[731, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[732, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[732, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[733, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[734, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[734, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[735, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[735, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[736, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[736, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[737, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[737, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[738, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[738, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[739, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[739, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.silhouette_samples": [[740, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[740, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[741, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[741, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[742, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[743, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[743, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[744, "sklearn-metrics-zero-one-loss"]], "Examples using sklearn.metrics.zero_one_loss": [[744, "examples-using-sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[745, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[745, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[746, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[746, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[747, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[747, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[748, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[748, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[749, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[749, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[750, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[750, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[751, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[751, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[752, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[752, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[753, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[753, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "sklearn.model_selection.LeaveOneGroupOut": [[754, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[755, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[756, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[757, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[758, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[759, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[760, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[761, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[761, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[762, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[762, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[763, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[763, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[764, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[764, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[765, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[765, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[766, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[766, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[767, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[767, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[768, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[768, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.check_cv": [[769, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[770, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[770, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[771, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[771, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[772, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[772, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[773, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[773, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[774, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[774, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[775, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[775, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[776, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[776, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[777, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[778, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[778, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[779, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[780, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[780, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[781, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[782, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[782, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[783, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[784, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[784, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[785, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[786, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[786, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[787, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[787, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[788, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[788, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[789, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[790, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[791, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[791, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[792, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[792, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[793, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[793, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[794, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[794, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[795, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[795, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[796, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[796, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[797, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[797, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[798, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[798, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[799, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[800, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[801, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[802, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[802, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[803, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[804, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[805, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[805, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[806, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[806, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[807, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[807, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[808, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[808, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[809, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[809, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[810, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[810, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[811, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[812, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[813, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[813, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[814, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[814, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[815, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[816, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[816, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[817, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[818, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[818, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[819, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[819, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[820, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[821, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[821, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[822, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[822, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[823, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[823, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[824, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[824, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[825, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[825, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[826, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[826, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[827, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[827, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[828, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[828, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[829, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[829, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[830, "sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.TargetEncoder": [[830, "examples-using-sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[831, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[832, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[833, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[833, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[834, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[835, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[835, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[836, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[837, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[838, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[838, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[839, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[840, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[841, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[842, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[842, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[843, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[843, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[844, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[845, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[845, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[846, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[846, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[847, "sklearn-set-config"]], "Examples using sklearn.set_config": [[847, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[848, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[849, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[849, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[850, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[851, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[851, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[852, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[852, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[853, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[853, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[854, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[854, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[855, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[855, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[856, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[856, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[857, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[857, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[858, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[858, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[859, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[860, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[861, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[862, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[863, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[863, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[864, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[864, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[865, "sklearn-utils-safe-indexing"]], "sklearn.utils.as_float_array": [[867, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[868, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[869, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[870, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[871, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[872, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[872, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[873, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[874, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[875, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[876, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[877, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[878, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[879, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[880, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[881, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[881, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[882, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[883, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[883, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[884, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[885, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[886, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[887, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[888, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[889, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[890, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[890, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[891, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[892, "sklearn-utils-indexable"]], "sklearn.utils.metaestimators.available_if": [[893, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[893, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[894, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[895, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[896, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[897, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[898, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[899, "sklearn-utils-parallel-delayed"]], "sklearn.utils.random.sample_without_replacement": [[901, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.resample": [[903, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[904, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[905, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[906, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[906, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[907, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[908, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[909, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[910, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[911, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[912, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[913, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.validation.check_is_fitted": [[916, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[916, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[917, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[918, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[919, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[920, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[921, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[921, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[921, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[921, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[921, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[921, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[921, "choosing-a-resource"]], "Exhausting the available resources": [[921, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[921, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[921, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[921, "tips-for-parameter-search"]], "Specifying an objective metric": [[921, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[921, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[921, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[921, "model-selection-development-and-evaluation"]], "Robustness to failure": [[921, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[921, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[921, "model-specific-cross-validation"]], "Information Criterion": [[921, "information-criterion"]], "Out of Bag Estimates": [[921, "out-of-bag-estimates"]], "Imputation of missing values": [[922, "imputation-of-missing-values"], [942, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[922, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[922, "univariate-feature-imputation"]], "Multivariate feature imputation": [[922, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[922, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[922, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[922, "nearest-neighbors-imputation"]], "Keeping the number of features constants": [[922, "keeping-the-number-of-features-constants"]], "Marking imputed values": [[922, "marking-imputed-values"]], "Estimators that handle NaN values": [[922, "estimators-that-handle-nan-values"]], "Isotonic regression": [[923, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[924, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[924, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[924, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[924, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[924, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[924, "mathematical-details"]], "Kernel ridge regression": [[925, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[926, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[926, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[926, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[926, "qda"]], "LDA": [[926, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[926, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[926, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[926, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[927, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[927, "validation-curve"]], "Learning curve": [[927, "learning-curve"]], "Linear Models": [[928, "linear-models"]], "Ordinary Least Squares": [[928, "ordinary-least-squares"]], "Non-Negative Least Squares": [[928, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[928, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[928, "ridge-regression-and-classification"]], "Ridge Complexity": [[928, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[928, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[928, "setting-regularization-parameter"]], "Using cross-validation": [[928, "using-cross-validation"]], "Information-criteria based model selection": [[928, "information-criteria-based-model-selection"]], "Comparison with the regularization parameter of SVM": [[928, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[928, "multi-task-lasso"]], "Elastic-Net": [[928, "elastic-net"]], "Multi-task Elastic-Net": [[928, "multi-task-elastic-net"]], "Least Angle Regression": [[928, "least-angle-regression"]], "LARS Lasso": [[928, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[928, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[928, "bayesian-regression"]], "Bayesian Ridge Regression": [[928, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[928, "automatic-relevance-determination-ard"]], "Logistic regression": [[928, "logistic-regression"]], "Binary Case": [[928, "binary-case"]], "Multinomial Case": [[928, "multinomial-case"]], "Solvers": [[928, "solvers"]], "Differences from liblinear:": [[928, "liblinear-differences"]], "Practical considerations": [[928, "practical-considerations"]], "Stochastic Gradient Descent - SGD": [[928, "stochastic-gradient-descent-sgd"]], "Perceptron": [[928, "perceptron"]], "Passive Aggressive Algorithms": [[928, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[928, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[928, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator?": [[928, null]], "RANSAC: RANdom SAmple Consensus": [[928, "ransac-random-sample-consensus"]], "Details of the algorithm": [[928, "details-of-the-algorithm"]], "Theil-Sen estimator: generalized-median-based estimator": [[928, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical considerations": [[928, "theoretical-considerations"]], "Huber Regression": [[928, "huber-regression"]], "Quantile Regression": [[928, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[928, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[929, "introduction"]], "Isomap": [[929, "isomap"]], "Complexity": [[929, "complexity"], [929, "id3"], [929, "id4"], [929, "id5"], [929, "id7"], [929, "id8"], [935, "complexity"], [936, "complexity"], [946, "complexity"], [947, "complexity"], [948, "complexity"]], "Locally Linear Embedding": [[929, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[929, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[929, "hessian-eigenmapping"]], "Spectral Embedding": [[929, "spectral-embedding"]], "Local Tangent Space Alignment": [[929, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[929, "multi-dimensional-scaling-mds"]], "Metric MDS": [[929, "metric-mds"]], "Nonmetric MDS": [[929, "nonmetric-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[929, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Optimizing t-SNE": [[929, "optimizing-t-sne"]], "Barnes-Hut t-SNE": [[929, "barnes-hut-t-sne"]], "Tips on practical use": [[929, "tips-on-practical-use"], [948, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[930, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[930, "cosine-similarity"]], "Linear kernel": [[930, "linear-kernel"], [965, "linear-kernel"]], "Polynomial kernel": [[930, "polynomial-kernel"], [965, "polynomial-kernel"]], "Sigmoid kernel": [[930, "sigmoid-kernel"]], "RBF kernel": [[930, "rbf-kernel"]], "Laplacian kernel": [[930, "laplacian-kernel"]], "Chi-squared kernel": [[930, "chi-squared-kernel"]], "Gaussian mixture models": [[931, "gaussian-mixture-models"]], "Gaussian Mixture": [[931, "gaussian-mixture"]], "Pros and cons of class GaussianMixture": [[931, "pros-and-cons-of-class-gaussianmixture"]], "Pros": [[931, "pros"], [931, "id2"]], "Cons": [[931, "cons"], [931, "id3"]], "Selecting the number of components in a classical Gaussian Mixture Model": [[931, "selecting-the-number-of-components-in-a-classical-gaussian-mixture-model"]], "Estimation algorithm Expectation-maximization": [[931, "estimation-algorithm-expectation-maximization"]], "Choice of the Initialization Method": [[931, "choice-of-the-initialization-method"]], "Variational Bayesian Gaussian Mixture": [[931, "variational-bayesian-gaussian-mixture"]], "Estimation algorithm: variational inference": [[931, "estimation-algorithm-variational-inference"]], "Pros and cons of variational inference with BayesianGaussianMixture": [[931, "pros-and-cons-of-variational-inference-with-bayesiangaussianmixture"]], "The Dirichlet Process": [[931, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[932, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[932, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[932, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[932, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[932, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[932, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[932, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[932, "accuracy-score"]], "Example:": [[932, null], [932, null], [932, null], [932, null], [932, null], [932, null], [932, null], [932, null], [944, null], [965, null]], "Top-k accuracy score": [[932, "top-k-accuracy-score"]], "Balanced accuracy score": [[932, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[932, "cohen-s-kappa"]], "Classification report": [[932, "classification-report"]], "Hamming loss": [[932, "hamming-loss"]], "Precision, recall and F-measures": [[932, "precision-recall-and-f-measures"]], "Binary classification": [[932, "binary-classification"]], "Multiclass and multilabel classification": [[932, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[932, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[932, "hinge-loss"]], "Log loss": [[932, "log-loss"]], "Matthews correlation coefficient": [[932, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[932, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[932, "receiver-operating-characteristic-roc"]], "Binary case": [[932, "binary-case"]], "Multi-class case": [[932, "multi-class-case"]], "Multi-label case": [[932, "multi-label-case"]], "Detection error tradeoff (DET)": [[932, "detection-error-tradeoff-det"]], "Zero one loss": [[932, "zero-one-loss"]], "Brier score loss": [[932, "brier-score-loss"]], "Class likelihood ratios": [[932, "class-likelihood-ratios"]], "Coverage error": [[932, "coverage-error"]], "Label ranking average precision": [[932, "label-ranking-average-precision"]], "Ranking loss": [[932, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[932, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[932, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[932, "mean-absolute-error"]], "Mean squared error": [[932, "mean-squared-error"]], "Mean squared logarithmic error": [[932, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[932, "mean-absolute-percentage-error"]], "Median absolute error": [[932, "median-absolute-error"]], "Max error": [[932, "max-error"]], "Explained variance score": [[932, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[932, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[932, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[932, "pinball-loss"]], "D\u00b2 score": [[932, "d2-score"]], "D\u00b2 Tweedie score": [[932, "d2-tweedie-score"]], "D\u00b2 pinball score": [[932, "d2-pinball-score"]], "D\u00b2 absolute error score": [[932, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[932, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[932, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[933, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[933, "multiclass-classification"], [965, null]], "Target format": [[933, "target-format"], [933, "id5"], [933, "id8"], [933, "id10"]], "OneVsRestClassifier": [[933, "onevsrestclassifier"]], "OneVsOneClassifier": [[933, "onevsoneclassifier"]], "OutputCodeClassifier": [[933, "outputcodeclassifier"]], "MultiOutputClassifier": [[933, "multioutputclassifier"]], "ClassifierChain": [[933, "classifierchain"]], "Multiclass-multioutput classification": [[933, "multiclass-multioutput-classification"]], "Multioutput regression": [[933, "multioutput-regression"]], "MultiOutputRegressor": [[933, "multioutputregressor"]], "RegressorChain": [[933, "regressorchain"]], "Naive Bayes": [[934, "naive-bayes"]], "Multinomial Naive Bayes": [[934, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[934, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[934, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[934, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[934, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[935, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[935, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[935, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[935, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[935, "nearest-neighbor-algorithms"]], "Brute Force": [[935, "brute-force"]], "K-D Tree": [[935, "k-d-tree"]], "Ball Tree": [[935, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[935, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[935, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[935, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[935, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[935, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[935, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[935, "neighborhood-components-analysis"]], "Dimensionality reduction": [[935, "dimensionality-reduction"]], "Mahalanobis distance": [[935, "mahalanobis-distance"]], "Transform": [[935, "transform"]], "Neural network models (supervised)": [[936, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[936, "multi-layer-perceptron"]], "Regularization": [[936, "regularization"]], "Algorithms": [[936, "algorithms"]], "Tips on Practical Use": [[936, "tips-on-practical-use"], [946, "tips-on-practical-use"], [947, "tips-on-practical-use"]], "More control with warm_start": [[936, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[937, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[937, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[937, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[937, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[937, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[938, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[938, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[938, "novelty-detection"]], "Scaling up the One-Class SVM": [[938, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[938, "id1"]], "Fitting an elliptic envelope": [[938, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[938, "isolation-forest"]], "Local Outlier Factor": [[938, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[938, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[939, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[939, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[939, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[939, "mathematical-definition"]], "Computation methods": [[939, "computation-methods"]], "Permutation feature importance": [[940, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[940, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[940, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[940, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[942, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[942, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[942, "scaling-features-to-a-range"]], "Scaling sparse data": [[942, "scaling-sparse-data"]], "Scaling data with outliers": [[942, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[942, null]], "Centering kernel matrices": [[942, "centering-kernel-matrices"]], "Non-linear transformation": [[942, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[942, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[942, "mapping-to-a-gaussian-distribution"]], "Normalization": [[942, "normalization"]], "Sparse input": [[942, null], [942, null]], "Encoding categorical features": [[942, "encoding-categorical-features"]], "Infrequent categories": [[942, "infrequent-categories"]], "Target Encoder": [[942, "target-encoder"]], "Discretization": [[942, "discretization"]], "K-bins discretization": [[942, "k-bins-discretization"]], "Feature binarization": [[942, "feature-binarization"]], "Generating polynomial features": [[942, "generating-polynomial-features"]], "Polynomial features": [[942, "polynomial-features"]], "Spline transformer": [[942, "spline-transformer"]], "Custom transformers": [[942, "custom-transformers"]], "Transforming the prediction target (y)": [[943, "transforming-the-prediction-target-y"]], "Label binarization": [[943, "label-binarization"]], "LabelBinarizer": [[943, "labelbinarizer"]], "MultiLabelBinarizer": [[943, "multilabelbinarizer"]], "Label encoding": [[943, "label-encoding"]], "Random Projection": [[944, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[944, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[944, "gaussian-random-projection"]], "Sparse random projection": [[944, "sparse-random-projection"]], "Inverse Transform": [[944, "inverse-transform"]], "Unlabeled entries in y": [[945, null]], "Self Training": [[945, "self-training"]], "Label Propagation": [[945, "label-propagation"]], "Stochastic Gradient Descent": [[946, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[946, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[946, "stopping-criterion"]], "SGD": [[946, "id5"]], "Multi-class classification": [[947, "multi-class-classification"]], "Scores and probabilities": [[947, "scores-and-probabilities"]], "Unbalanced problems": [[947, "unbalanced-problems"]], "Density estimation, novelty detection": [[947, "density-estimation-novelty-detection"]], "Kernel functions": [[947, "kernel-functions"]], "Parameters of the RBF Kernel": [[947, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[947, "custom-kernels"]], "Using Python functions as kernels": [[947, "using-python-functions-as-kernels"]], "Using the Gram matrix": [[947, "using-the-gram-matrix"]], "SVC": [[947, "svc"]], "LinearSVC": [[947, "linearsvc"]], "NuSVC": [[947, "nusvc"]], "SVR": [[947, "svr"]], "LinearSVR": [[947, "linearsvr"]], "Multi-output problems": [[948, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[948, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[948, "classification-criteria"]], "Regression criteria": [[948, "regression-criteria"]], "Minimal Cost-Complexity Pruning": [[948, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[949, "unsupervised-dimensionality-reduction"]], "Pipelining": [[949, null], [963, "pipelining"]], "PCA: principal component analysis": [[949, "pca-principal-component-analysis"]], "Random projections": [[949, "random-projections"]], "Feature scaling": [[949, null]], "Welcome to scikit-learn": [[950, "welcome-to-scikit-learn"]], "External Resources, Videos and Talks": [[951, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[951, "new-to-scientific-python"]], "External Tutorials": [[951, "external-tutorials"]], "Videos": [[951, "videos"]], "Related Projects": [[952, "related-projects"]], "Interoperability and framework enhancements": [[952, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[952, "other-estimators-and-tasks"]], "Statistical learning with Python": [[952, "statistical-learning-with-python"]], "Recommendation Engine packages": [[952, "recommendation-engine-packages"]], "Domain specific packages": [[952, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[952, "translations-of-scikit-learn-documentation"]], "Roadmap": [[953, "id1"]], "Purpose of this document": [[953, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[953, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[953, "architectural-general-goals"]], "Subpackage-specific goals": [[953, "subpackage-specific-goals"]], "Supervised learning": [[954, "supervised-learning"]], "Support": [[955, "support"]], "Mailing List": [[955, "mailing-list"]], "User questions": [[955, "user-questions"]], "Bug tracker": [[955, "bug-tracker"]], "Gitter": [[955, "gitter"]], "Documentation resources": [[955, "documentation-resources"]], "Who is using scikit-learn?": [[956, "who-is-using-scikit-learn"]], "J.P.Morgan": [[956, "id1"]], "Spotify": [[956, "id2"]], "Inria": [[956, "id3"]], "betaworks": [[956, "id4"]], "Hugging Face": [[956, "id5"]], "Evernote": [[956, "id6"]], "T\u00e9l\u00e9com ParisTech": [[956, "id7"]], "Booking.com": [[956, "id8"]], "AWeber": [[956, "id9"]], "Yhat": [[956, "id10"]], "Rangespan": [[956, "id11"]], "Birchbox": [[956, "id12"]], "Bestofmedia Group": [[956, "id13"]], "Change.org": [[956, "id14"]], "PHIMECA Engineering": [[956, "id15"]], "HowAboutWe": [[956, "id16"]], "PeerIndex": [[956, "id17"]], "DataRobot": [[956, "id18"]], "OkCupid": [[956, "id19"]], "Lovely": [[956, "id20"]], "Data Publica": [[956, "id21"]], "Machinalis": [[956, "id22"]], "solido": [[956, "id23"]], "INFONEA": [[956, "id24"]], "Dataiku": [[956, "id25"]], "Otto Group": [[956, "id26"]], "Zopa": [[956, "id27"]], "MARS": [[956, "id28"]], "BNP Paribas Cardif": [[956, "id29"]], "An introduction to machine learning with scikit-learn": [[958, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[958, null]], "Machine learning: the problem setting": [[958, "machine-learning-the-problem-setting"]], "Training set and testing set": [[958, null], [965, null]], "Loading an example dataset": [[958, "loading-an-example-dataset"]], "Shape of the data arrays": [[958, null]], "Learning and predicting": [[958, "learning-and-predicting"]], "Choosing the parameters of the model": [[958, null]], "Conventions": [[958, "conventions"]], "Type casting": [[958, "type-casting"]], "Refitting and updating parameters": [[958, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[958, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[959, "scikit-learn-tutorials"]], "Choosing the right estimator": [[960, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[961, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[961, null]], "Model selection: choosing estimators and their parameters": [[962, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[962, "score-and-cross-validated-scores"]], "Cross-validation generators": [[962, "cross-validation-generators"]], "Exercise": [[962, null], [962, null], [965, null], [965, null]], "Grid-search and cross-validated estimators": [[962, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[962, "grid-search"]], "Nested cross-validation": [[962, null]], "Cross-validated estimators": [[962, "cross-validated-estimators"]], "Putting it all together": [[963, "putting-it-all-together"]], "Face recognition with eigenfaces": [[963, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[963, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[964, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[964, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[964, null]], "An example of reshaping data would be the digits dataset": [[964, null]], "Estimators objects": [[964, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[965, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[965, null]], "Vocabulary: classification and regression": [[965, null]], "Nearest neighbor and the curse of dimensionality": [[965, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[965, null]], "k-Nearest neighbors classifier": [[965, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[965, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[965, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[965, "linear-regression"]], "Shrinkage": [[965, "shrinkage"]], "Different algorithms for the same problem": [[965, null]], "Shrinkage and sparsity with logistic regression": [[965, null]], "Support vector machines (SVMs)": [[965, "support-vector-machines-svms"]], "Linear SVMs": [[965, "linear-svms"]], "Using kernels": [[965, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[965, "rbf-kernel-radial-basis-function"]], "Interactive example": [[965, null]], "Unsupervised learning: seeking representations of the data": [[966, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[966, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[966, null]], "K-means clustering": [[966, "k-means-clustering"]], "Application example: vector quantization": [[966, null]], "Hierarchical agglomerative clustering: Ward": [[966, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[966, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[966, null]], "Decompositions: from a signal to components and loadings": [[966, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[966, null]], "Principal component analysis: PCA": [[966, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[966, "independent-component-analysis-ica"]], "Working With Text Data": [[967, "working-with-text-data"]], "Tutorial setup": [[967, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[967, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[967, "extracting-features-from-text-files"]], "Bags of words": [[967, "bags-of-words"]], "Tokenizing text with scikit-learn": [[967, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[967, "from-occurrences-to-frequencies"]], "Training a classifier": [[967, "training-a-classifier"]], "Building a pipeline": [[967, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[967, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[967, "parameter-tuning-using-grid-search"]], "Exercises": [[967, "exercises"]], "Exercise 1: Language identification": [[967, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[967, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[967, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[967, "where-to-from-here"]], "Unsupervised learning": [[968, "unsupervised-learning"]], "User Guide": [[969, "user-guide"]], "Visualizations": [[970, "visualizations"]], "Available Plotting Utilities": [[970, "available-plotting-utilities"]], "Display Objects": [[970, "display-objects"]], "Release History": [[971, "release-history"]], "Version 0.12.1": [[973, "version-0-12-1"]], "Changelog": [[973, "changelog"], [973, "id1"], [973, "id3"], [973, "id6"], [973, "id9"], [973, "id12"], [973, "id14"], [973, "id16"], [973, "id18"], [973, "id19"], [974, "changelog"], [974, "id1"], [975, "changelog"], [976, "changelog"], [977, "changelog"], [977, "id1"], [978, "changelog"], [978, "id1"], [979, "changelog"], [979, "id1"], [979, "id2"], [980, "changelog"], [980, "id1"], [981, "changelog"], [981, "id1"], [981, "id5"], [981, "id10"], [981, "id23"], [982, "changelog"], [982, "id1"], [982, "id2"], [982, "id7"], [983, "changelog"], [983, "id1"], [983, "id4"], [984, "changelog"], [984, "id1"], [984, "id4"], [985, "changelog"], [985, "id1"], [985, "id4"], [986, "changelog"], [986, "id1"], [986, "id7"], [987, "changelog"], [987, "id1"], [987, "id7"], [988, "changelog"], [988, "id1"], [988, "id9"], [989, "changelog"]], "People": [[973, "people"], [973, "id2"], [973, "id5"], [973, "id8"], [973, "id11"], [973, "id13"], [973, "id15"], [973, "id17"], [974, "people"], [974, "id2"], [975, "people"], [976, "people"]], "Version 0.12": [[973, "version-0-12"]], "API changes summary": [[973, "api-changes-summary"], [973, "id4"], [973, "id7"], [973, "id10"], [974, "api-changes-summary"], [975, "api-changes-summary"], [976, "api-changes-summary"], [977, "api-changes-summary"], [978, "api-changes-summary"], [979, "api-changes-summary"], [979, "id5"], [980, "api-changes-summary"]], "Version 0.11": [[973, "version-0-11"]], "Highlights": [[973, "highlights"], [976, "highlights"], [977, "highlights"], [980, "highlights"], [981, "highlights"]], "Other changes": [[973, "other-changes"]], "Version 0.10": [[973, "version-0-10"]], "Version 0.9": [[973, "version-0-9"]], "Version 0.8": [[973, "version-0-8"]], "Version 0.7": [[973, "version-0-7"]], "Version 0.6": [[973, "version-0-6"]], "Version 0.5": [[973, "version-0-5"]], "New classes": [[973, "new-classes"]], "Fixes": [[973, "fixes"]], "External dependencies": [[973, "external-dependencies"]], "Removed modules": [[973, "removed-modules"]], "Misc": [[973, "misc"]], "Version 0.4": [[973, "version-0-4"]], "Earlier versions": [[973, "earlier-versions"]], "Version 0.13.1": [[974, "version-0-13-1"]], "Version 0.13": [[974, "version-0-13"]], "New Estimator Classes": [[974, "new-estimator-classes"]], "Version 0.14": [[975, "version-0-14"]], "Version 0.15.2": [[976, "version-0-15-2"]], "Bug fixes": [[976, "bug-fixes"], [976, "id1"], [976, "id2"], [977, "bug-fixes"], [977, "id2"], [978, "bug-fixes"], [978, "id2"], [979, "bug-fixes"], [979, "id4"], [980, "bug-fixes"], [980, "id3"]], "Version 0.15.1": [[976, "version-0-15-1"]], "Version 0.15": [[976, "version-0-15"]], "New features": [[976, "new-features"], [977, "new-features"], [978, "new-features"], [979, "new-features"], [980, "new-features"]], "Enhancements": [[976, "enhancements"], [977, "enhancements"], [978, "enhancements"], [979, "enhancements"], [979, "id3"], [980, "enhancements"], [980, "id2"]], "Documentation improvements": [[976, "documentation-improvements"], [977, "documentation-improvements"]], "Version 0.16.1": [[977, "version-0-16-1"]], "Version 0.16": [[977, "version-0-16"]], "Code Contributors": [[977, "code-contributors"], [978, "code-contributors"], [979, "code-contributors"], [979, "id6"]], "Version 0.17.1": [[978, "version-0-17-1"]], "Version 0.17": [[978, "version-0-17"]], "Version 0.18.2": [[979, "version-0-18-2"]], "Last release with Python 2.6 support": [[979, null], [979, null]], "Version 0.18.1": [[979, "version-0-18-1"]], "Version 0.18": [[979, "version-0-18"]], "Model Selection Enhancements and API Changes": [[979, "model-selection-enhancements-and-api-changes"]], "Version 0.19.2": [[980, "version-0-19-2"]], "Related changes": [[980, "related-changes"]], "Version 0.19.1": [[980, "version-0-19-1"]], "API changes": [[980, "api-changes"]], "Code and Documentation Contributors": [[980, "code-and-documentation-contributors"], [980, "id9"], [981, "code-and-documentation-contributors"], [981, "id8"], [981, "id21"], [981, "id41"], [982, "code-and-documentation-contributors"], [983, "code-and-documentation-contributors"], [984, "code-and-documentation-contributors"], [985, "code-and-documentation-contributors"], [986, "code-and-documentation-contributors"], [987, "code-and-documentation-contributors"], [988, "code-and-documentation-contributors"], [989, "code-and-documentation-contributors"]], "Version 0.19": [[980, "version-0-19"]], "Changed models": [[980, "changed-models"], [981, "changed-models"], [981, "id9"], [981, "id22"], [982, "changed-models"], [982, "id6"], [983, "changed-models"], [984, "changed-models"], [984, "id3"], [985, "changed-models"], [986, "changed-models"], [987, "changed-models"], [987, "id6"], [988, "changed-models"], [988, "id7"], [989, "changed-models"]], "Version 0.20.4": [[981, "version-0-20-4"]], "sklearn.cluster": [[981, "sklearn-cluster"], [981, "id2"], [981, "id11"], [981, "id24"], [982, "sklearn-cluster"], [982, "id8"], [983, "sklearn-cluster"], [983, "id5"], [984, "sklearn-cluster"], [984, "id2"], [984, "id5"], [985, "sklearn-cluster"], [986, "sklearn-cluster"], [986, "id2"], [986, "id9"], [987, "sklearn-cluster"], [987, "id8"], [988, "sklearn-cluster"], [988, "id12"], [989, "sklearn-cluster"]], "sklearn.compose": [[981, "sklearn-compose"], [981, "id3"], [981, "id6"], [981, "id12"], [981, "id25"], [982, "sklearn-compose"], [982, "id9"], [983, "sklearn-compose"], [984, "sklearn-compose"], [985, "sklearn-compose"], [985, "id5"], [986, "sklearn-compose"], [987, "sklearn-compose"], [988, "sklearn-compose"]], "sklearn.decomposition": [[981, "sklearn-decomposition"], [981, "id4"], [981, "id14"], [981, "id28"], [982, "sklearn-decomposition"], [982, "id11"], [983, "sklearn-decomposition"], [984, "sklearn-decomposition"], [984, "id6"], [985, "sklearn-decomposition"], [985, "id7"], [986, "sklearn-decomposition"], [986, "id11"], [987, "sklearn-decomposition"], [987, "id10"], [988, "sklearn-decomposition"], [988, "id14"], [989, "sklearn-decomposition"]], "sklearn.model_selection": [[981, "sklearn-model-selection"], [981, "id35"], [982, "sklearn-model-selection"], [983, "sklearn-model-selection"], [983, "id9"], [983, "id13"], [984, "sklearn-model-selection"], [985, "sklearn-model-selection"], [985, "id12"], [986, "sklearn-model-selection"], [987, "sklearn-model-selection"], [988, "sklearn-model-selection"], [988, "id20"], [989, "sklearn-model-selection"]], "sklearn.neighbors": [[981, "sklearn-neighbors"], [981, "id7"], [981, "id18"], [981, "id36"], [982, "sklearn-neighbors"], [982, "id5"], [982, "id17"], [983, "sklearn-neighbors"], [983, "id11"], [985, "sklearn-neighbors"], [986, "sklearn-neighbors"], [986, "id5"], [986, "id18"], [987, "sklearn-neighbors"], [988, "sklearn-neighbors"], [989, "sklearn-neighbors"]], "Version 0.20.3": [[981, "version-0-20-3"]], "sklearn.covariance": [[981, "sklearn-covariance"], [981, "id26"], [985, "sklearn-covariance"], [986, "sklearn-covariance"], [987, "sklearn-covariance"]], "sklearn.datasets": [[981, "sklearn-datasets"], [981, "id13"], [981, "id27"], [982, "sklearn-datasets"], [982, "id10"], [983, "sklearn-datasets"], [984, "sklearn-datasets"], [985, "sklearn-datasets"], [986, "sklearn-datasets"], [986, "id10"], [987, "sklearn-datasets"], [987, "id9"], [988, "sklearn-datasets"], [988, "id13"], [989, "sklearn-datasets"]], "sklearn.feature_extraction": [[981, "sklearn-feature-extraction"], [981, "id15"], [981, "id30"], [982, "sklearn-feature-extraction"], [983, "sklearn-feature-extraction"], [984, "sklearn-feature-extraction"], [984, "id8"], [985, "sklearn-feature-extraction"], [986, "sklearn-feature-extraction"], [986, "id13"], [987, "sklearn-feature-extraction"], [988, "sklearn-feature-extraction"], [989, "sklearn-feature-extraction"]], "sklearn.impute": [[981, "sklearn-impute"], [981, "id31"], [982, "sklearn-impute"], [982, "id13"], [983, "sklearn-impute"], [983, "id6"], [984, "sklearn-impute"], [985, "sklearn-impute"], [986, "sklearn-impute"], [987, "sklearn-impute"], [987, "id12"], [988, "sklearn-impute"], [989, "sklearn-impute"]], "sklearn.linear_model": [[981, "sklearn-linear-model"], [981, "id16"], [981, "id32"], [982, "sklearn-linear-model"], [982, "id15"], [983, "sklearn-linear-model"], [984, "sklearn-linear-model"], [984, "id9"], [985, "sklearn-linear-model"], [985, "id10"], [986, "sklearn-linear-model"], [986, "id4"], [986, "id15"], [987, "sklearn-linear-model"], [987, "id13"], [988, "sklearn-linear-model"], [988, "id18"], [989, "sklearn-linear-model"]], "sklearn.preprocessing": [[981, "sklearn-preprocessing"], [981, "id19"], [981, "id37"], [982, "sklearn-preprocessing"], [982, "id18"], [983, "sklearn-preprocessing"], [983, "id12"], [984, "sklearn-preprocessing"], [985, "sklearn-preprocessing"], [985, "id14"], [986, "sklearn-preprocessing"], [986, "id20"], [987, "sklearn-preprocessing"], [987, "id4"], [987, "id16"], [988, "sklearn-preprocessing"], [988, "id4"], [988, "id22"], [989, "sklearn-preprocessing"]], "sklearn.svm": [[981, "sklearn-svm"], [981, "id38"], [982, "sklearn-svm"], [983, "sklearn-svm"], [984, "sklearn-svm"], [985, "sklearn-svm"], [986, "sklearn-svm"], [986, "id21"], [987, "sklearn-svm"], [988, "sklearn-svm"]], "Version 0.20.2": [[981, "version-0-20-2"]], "sklearn.metrics": [[981, "sklearn-metrics"], [981, "id17"], [981, "id33"], [982, "sklearn-metrics"], [982, "id4"], [982, "id16"], [983, "sklearn-metrics"], [983, "id2"], [983, "id8"], [984, "sklearn-metrics"], [984, "id10"], [985, "sklearn-metrics"], [985, "id2"], [985, "id11"], [986, "sklearn-metrics"], [986, "id17"], [987, "sklearn-metrics"], [987, "id3"], [987, "id15"], [988, "sklearn-metrics"], [989, "sklearn-metrics"]], "sklearn.utils": [[981, "sklearn-utils"], [981, "id20"], [981, "id39"], [982, "sklearn-utils"], [983, "sklearn-utils"], [983, "id14"], [984, "sklearn-utils"], [984, "id12"], [985, "sklearn-utils"], [985, "id17"], [986, "sklearn-utils"], [986, "id6"], [986, "id23"], [987, "sklearn-utils"], [987, "id18"], [988, "sklearn-utils"], [988, "id6"], [988, "id24"], [989, "sklearn-utils"]], "Version 0.20.1": [[981, "version-0-20-1"]], "sklearn.ensemble": [[981, "sklearn-ensemble"], [981, "id29"], [982, "sklearn-ensemble"], [982, "id12"], [983, "sklearn-ensemble"], [984, "sklearn-ensemble"], [984, "id7"], [985, "sklearn-ensemble"], [985, "id8"], [986, "sklearn-ensemble"], [986, "id3"], [986, "id12"], [987, "sklearn-ensemble"], [988, "sklearn-ensemble"], [988, "id3"], [988, "id15"], [989, "sklearn-ensemble"]], "sklearn.mixture": [[981, "sklearn-mixture"], [981, "id34"], [982, "sklearn-mixture"], [986, "sklearn-mixture"], [987, "sklearn-mixture"]], "Version 0.20.0": [[981, "version-0-20-0"]], "Known Major Bugs": [[981, "known-major-bugs"], [982, "known-major-bugs"]], "sklearn.discriminant_analysis": [[981, "sklearn-discriminant-analysis"], [982, "sklearn-discriminant-analysis"], [985, "sklearn-discriminant-analysis"], [987, "sklearn-discriminant-analysis"], [988, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[981, "sklearn-dummy"], [982, "sklearn-dummy"], [983, "sklearn-dummy"], [986, "sklearn-dummy"], [987, "sklearn-dummy"]], "sklearn.feature_selection": [[981, "sklearn-feature-selection"], [983, "sklearn-feature-selection"], [984, "sklearn-feature-selection"], [985, "sklearn-feature-selection"], [986, "sklearn-feature-selection"], [986, "id14"], [987, "sklearn-feature-selection"], [987, "id2"], [987, "id11"], [988, "sklearn-feature-selection"], [988, "id16"], [989, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[981, "sklearn-gaussian-process"], [983, "sklearn-gaussian-process"], [984, "sklearn-gaussian-process"], [985, "sklearn-gaussian-process"], [985, "id9"], [986, "sklearn-gaussian-process"], [987, "sklearn-gaussian-process"], [988, "sklearn-gaussian-process"]], "sklearn.isotonic": [[981, "sklearn-isotonic"], [982, "sklearn-isotonic"], [983, "sklearn-isotonic"], [985, "sklearn-isotonic"], [987, "sklearn-isotonic"], [988, "sklearn-isotonic"]], "sklearn.manifold": [[981, "sklearn-manifold"], [982, "sklearn-manifold"], [983, "sklearn-manifold"], [984, "sklearn-manifold"], [985, "sklearn-manifold"], [986, "sklearn-manifold"], [986, "id16"], [987, "sklearn-manifold"], [987, "id14"], [988, "sklearn-manifold"], [988, "id19"]], "sklearn.multioutput": [[981, "sklearn-multioutput"], [982, "sklearn-multioutput"], [983, "sklearn-multioutput"], [984, "sklearn-multioutput"], [985, "sklearn-multioutput"], [985, "id13"], [988, "sklearn-multioutput"]], "sklearn.naive_bayes": [[981, "sklearn-naive-bayes"], [983, "sklearn-naive-bayes"], [983, "id10"], [984, "sklearn-naive-bayes"], [985, "sklearn-naive-bayes"], [986, "sklearn-naive-bayes"], [988, "sklearn-naive-bayes"], [989, "sklearn-naive-bayes"]], "sklearn.neural_network": [[981, "sklearn-neural-network"], [982, "sklearn-neural-network"], [983, "sklearn-neural-network"], [984, "sklearn-neural-network"], [985, "sklearn-neural-network"], [986, "sklearn-neural-network"], [987, "sklearn-neural-network"], [988, "sklearn-neural-network"], [988, "id21"], [989, "sklearn-neural-network"]], "sklearn.pipeline": [[981, "sklearn-pipeline"], [982, "sklearn-pipeline"], [983, "sklearn-pipeline"], [984, "sklearn-pipeline"], [985, "sklearn-pipeline"], [986, "sklearn-pipeline"], [986, "id19"], [987, "sklearn-pipeline"], [988, "sklearn-pipeline"], [989, "sklearn-pipeline"]], "sklearn.tree": [[981, "sklearn-tree"], [982, "sklearn-tree"], [982, "id19"], [983, "sklearn-tree"], [984, "sklearn-tree"], [985, "sklearn-tree"], [985, "id16"], [986, "sklearn-tree"], [986, "id22"], [987, "sklearn-tree"], [987, "id5"], [987, "id17"], [988, "sklearn-tree"], [988, "id5"], [988, "id23"], [989, "sklearn-tree"]], "Multiple modules": [[981, "multiple-modules"], [982, "multiple-modules"]], "Changes to estimator checks": [[981, "changes-to-estimator-checks"], [982, "changes-to-estimator-checks"], [983, "changes-to-estimator-checks"]], "Version 0.21.3": [[982, "version-0-21-3"]], "Legend for changelogs": [[982, "legend-for-changelogs"], [983, "legend-for-changelogs"], [984, "legend-for-changelogs"], [985, "legend-for-changelogs"], [986, "legend-for-changelogs"], [987, "legend-for-changelogs"], [988, "legend-for-changelogs"], [989, "legend-for-changelogs"]], "sklearn.inspection": [[982, "sklearn-inspection"], [982, "id3"], [982, "id14"], [983, "sklearn-inspection"], [983, "id7"], [984, "sklearn-inspection"], [984, "id11"], [985, "sklearn-inspection"], [986, "sklearn-inspection"], [987, "sklearn-inspection"], [988, "sklearn-inspection"], [988, "id17"], [989, "sklearn-inspection"]], "Version 0.21.2": [[982, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[982, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[982, "version-0-21-1"]], "Version 0.21.0": [[982, "version-0-21-0"]], "sklearn.base": [[982, "sklearn-base"], [983, "sklearn-base"], [985, "sklearn-base"], [986, "sklearn-base"], [987, "sklearn-base"], [988, "sklearn-base"], [988, "id2"], [988, "id10"], [989, "sklearn-base"]], "sklearn.calibration": [[982, "sklearn-calibration"], [983, "sklearn-calibration"], [985, "sklearn-calibration"], [986, "sklearn-calibration"], [986, "id8"], [987, "sklearn-calibration"], [988, "sklearn-calibration"], [988, "id11"], [989, "sklearn-calibration"]], "sklearn.externals": [[982, "sklearn-externals"]], "sklearn.multiclass": [[982, "sklearn-multiclass"], [985, "sklearn-multiclass"], [986, "sklearn-multiclass"], [987, "sklearn-multiclass"]], "Version 0.22.2.post1": [[983, "version-0-22-2-post1"]], "Version 0.22.1": [[983, "version-0-22-1"]], "sklearn.semi_supervised": [[983, "sklearn-semi-supervised"], [984, "sklearn-semi-supervised"], [985, "sklearn-semi-supervised"], [985, "id3"], [985, "id15"], [989, "sklearn-semi-supervised"]], "Version 0.22.0": [[983, "version-0-22-0"]], "Website update": [[983, "website-update"]], "Clear definition of the public API": [[983, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[983, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[983, "sklearn-cross-decomposition"], [985, "sklearn-cross-decomposition"], [985, "id6"], [987, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[983, "sklearn-kernel-approximation"], [985, "sklearn-kernel-approximation"], [986, "sklearn-kernel-approximation"], [987, "sklearn-kernel-approximation"], [988, "sklearn-kernel-approximation"]], "Version 0.23.2": [[984, "version-0-23-2"]], "Version 0.23.1": [[984, "version-0-23-1"]], "Version 0.23.0": [[984, "version-0-23-0"]], "Enforcing keyword-only arguments": [[984, "enforcing-keyword-only-arguments"], [986, "enforcing-keyword-only-arguments"]], "Version 0.24.2": [[985, "version-0-24-2"]], "feature_extraction": [[985, "feature-extraction"]], "Version 0.24.1": [[985, "version-0-24-1"]], "Packaging": [[985, "packaging"]], "Version 0.24.0": [[985, "version-0-24-0"]], "sklearn.exceptions": [[985, "sklearn-exceptions"]], "Version 1.0.2": [[986, "version-1-0-2"]], "Version 1.0.1": [[986, "version-1-0-1"]], "Fixed models": [[986, "fixed-models"]], "Version 1.0.0": [[986, "version-1-0-0"]], "Minimal dependencies": [[986, "minimal-dependencies"], [987, "minimal-dependencies"]], "Version 1.1.3": [[987, "version-1-1-3"]], "Version 1.1.2": [[987, "version-1-1-2"]], "Version 1.1.1": [[987, "version-1-1-1"]], "Version 1.1.0": [[987, "version-1-1-0"]], "sklearn.random_projection": [[987, "sklearn-random-projection"]], "Version 1.2.2": [[988, "version-1-2-2"]], "Version 1.2.1": [[988, "version-1-2-1"]], "Changes impacting all modules": [[988, "changes-impacting-all-modules"], [988, "id8"], [989, "changes-impacting-all-modules"]], "Version 1.2.0": [[988, "version-1-2-0"]], "Version 1.3.0": [[989, "version-1-3-0"]], "sklearn.exception": [[989, "sklearn-exception"]]}, "indexentries": {"1d": [[351, "term-1d"]], "1d array": [[351, "term-1d-array"]], "2d": [[351, "term-2d"]], "2d array": [[351, "term-2d-array"]], "api": [[351, "term-API"]], "cv splitter": [[351, "term-CV-splitter"]], "slep": [[351, "term-SLEP"]], "sleps": [[351, "term-SLEPs"]], "x": [[351, "term-X"]], "xt": [[351, "term-Xt"]], "y": [[351, "term-Y"], [351, "term-y"]], "_estimator_type": [[351, "term-_estimator_type"]], "array-like": [[351, "term-array-like"]], "attribute": [[351, "term-attribute"]], "attributes": [[351, "term-attributes"]], "backwards compatibility": [[351, "term-backwards-compatibility"]], "binary": [[351, "term-binary"]], "callable": [[351, "term-callable"]], "categorical feature": [[351, "term-categorical-feature"]], "class_weight": [[351, "term-class_weight"]], "classes_": [[351, "term-classes_"]], "classifier": [[351, "term-classifier"]], "classifiers": [[351, "term-classifiers"]], "clone": [[351, "term-clone"]], "cloned": [[351, "term-cloned"]], "clusterer": [[351, "term-clusterer"]], "clusterers": [[351, "term-clusterers"]], "coef_": [[351, "term-coef_"]], "common tests": [[351, "term-common-tests"]], "components_": [[351, "term-components_"]], "continuous": [[351, "term-continuous"]], "continuous multi-output": [[351, "term-continuous-multi-output"]], "continuous multioutput": [[351, "term-continuous-multioutput"]], "cross-validation estimator": [[351, "term-cross-validation-estimator"]], "cross-validation generator": [[351, "term-cross-validation-generator"]], "cross-validation splitter": [[351, "term-cross-validation-splitter"]], "cv": [[351, "term-cv"]], "data leakage": [[351, "term-data-leakage"]], "data type": [[351, "term-data-type"]], "decision_function": [[351, "term-decision_function"]], "density estimator": [[351, "term-density-estimator"]], "deprecation": [[351, "term-deprecation"]], "dimensionality": [[351, "term-dimensionality"]], "docstring": [[351, "term-docstring"]], "double underscore": [[351, "term-double-underscore"]], "double underscore notation": [[351, "term-double-underscore-notation"]], "dtype": [[351, "term-dtype"]], "duck typing": [[351, "term-duck-typing"]], "early stopping": [[351, "term-early-stopping"]], "embedding_": [[351, "term-embedding_"]], "estimator": [[351, "term-estimator"]], "estimator instance": [[351, "term-estimator-instance"]], "estimator tags": [[351, "term-estimator-tags"]], "estimators": [[351, "term-estimators"]], "evaluation metric": [[351, "term-evaluation-metric"]], "evaluation metrics": [[351, "term-evaluation-metrics"]], "examples": [[351, "term-examples"]], "experimental": [[351, "term-experimental"]], "feature": [[351, "term-feature"]], "feature extractor": [[351, "term-feature-extractor"]], "feature extractors": [[351, "term-feature-extractors"]], "feature vector": [[351, "term-feature-vector"]], "feature_importances_": [[351, "term-feature_importances_"]], "features": [[351, "term-features"]], "fit": [[351, "term-fit"]], "fit_predict": [[351, "term-fit_predict"]], "fit_transform": [[351, "term-fit_transform"]], "fitted": [[351, "term-fitted"]], "fitting": [[351, "term-fitting"]], "function": [[351, "term-function"]], "gallery": [[351, "term-gallery"]], "get_feature_names_out": [[351, "term-get_feature_names_out"]], "get_n_splits": [[351, "term-get_n_splits"]], "get_params": [[351, "term-get_params"]], "groups": [[351, "term-groups"]], "hyper-parameter": [[351, "term-hyper-parameter"]], "hyperparameter": [[351, "term-hyperparameter"]], "imputation": [[351, "term-imputation"]], "impute": [[351, "term-impute"]], "indexable": [[351, "term-indexable"]], "induction": [[351, "term-induction"]], "inductive": [[351, "term-inductive"]], "joblib": [[351, "term-joblib"]], "kernel": [[351, "term-kernel"]], "label indicator matrix": [[351, "term-label-indicator-matrix"]], "labels_": [[351, "term-labels_"]], "leakage": [[351, "term-leakage"]], "max_iter": [[351, "term-max_iter"]], "memmapping": [[351, "term-memmapping"]], "memory": [[351, "term-memory"]], "memory map": [[351, "term-memory-map"]], "memory mapping": [[351, "term-memory-mapping"]], "meta-estimator": [[351, "term-meta-estimator"]], "meta-estimators": [[351, "term-meta-estimators"]], "metaestimator": [[351, "term-metaestimator"]], "metaestimators": [[351, "term-metaestimators"]], "metric": [[351, "term-metric"]], "missing values": [[351, "term-missing-values"]], "multi-class": [[351, "term-multi-class"]], "multi-class multi-output": [[351, "term-multi-class-multi-output"]], "multi-label": [[351, "term-multi-label"]], "multi-output": [[351, "term-multi-output"]], "multi-output continuous": [[351, "term-multi-output-continuous"]], "multi-output multi-class": [[351, "term-multi-output-multi-class"]], "multiclass": [[351, "term-multiclass"]], "multiclass multioutput": [[351, "term-multiclass-multioutput"]], "multilabel": [[351, "term-multilabel"]], "multilabel indicator matrices": [[351, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[351, "term-multilabel-indicator-matrix"]], "multioutput": [[351, "term-multioutput"]], "multioutput continuous": [[351, "term-multioutput-continuous"]], "multioutput multiclass": [[351, "term-multioutput-multiclass"]], "n_components": [[351, "term-n_components"]], "n_features": [[351, "term-n_features"]], "n_iter_": [[351, "term-n_iter_"]], "n_iter_no_change": [[351, "term-n_iter_no_change"]], "n_jobs": [[351, "term-n_jobs"]], "n_outputs": [[351, "term-n_outputs"]], "n_samples": [[351, "term-n_samples"]], "n_targets": [[351, "term-n_targets"]], "narrative docs": [[351, "term-narrative-docs"]], "narrative documentation": [[351, "term-narrative-documentation"]], "np": [[351, "term-np"]], "online learning": [[351, "term-online-learning"]], "out-of-core": [[351, "term-out-of-core"]], "outlier detector": [[351, "term-outlier-detector"]], "outlier detectors": [[351, "term-outlier-detectors"]], "outputs": [[351, "term-outputs"]], "pair": [[351, "term-pair"]], "pairwise metric": [[351, "term-pairwise-metric"]], "pairwise metrics": [[351, "term-pairwise-metrics"]], "param": [[351, "term-param"]], "parameter": [[351, "term-parameter"]], "parameters": [[351, "term-parameters"]], "params": [[351, "term-params"]], "partial_fit": [[351, "term-partial_fit"]], "pd": [[351, "term-pd"]], "pos_label": [[351, "term-pos_label"]], "precomputed": [[351, "term-precomputed"]], "predict": [[351, "term-predict"]], "predict_log_proba": [[351, "term-predict_log_proba"]], "predict_proba": [[351, "term-predict_proba"]], "predictor": [[351, "term-predictor"]], "predictors": [[351, "term-predictors"]], "random_state": [[351, "term-random_state"]], "rectangular": [[351, "term-rectangular"]], "regressor": [[351, "term-regressor"]], "regressors": [[351, "term-regressors"]], "sample": [[351, "term-sample"]], "sample properties": [[351, "term-sample-properties"]], "sample property": [[351, "term-sample-property"]], "sample_weight": [[351, "term-sample_weight"]], "samples": [[351, "term-samples"]], "scikit-learn enhancement proposals": [[351, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[351, "term-scikit-learn-contrib"]], "score": [[351, "term-score"]], "score_samples": [[351, "term-score_samples"]], "scorer": [[351, "term-scorer"]], "scoring": [[351, "term-scoring"]], "semi-supervised": [[351, "term-semi-supervised"]], "semi-supervised learning": [[351, "term-semi-supervised-learning"]], "semisupervised": [[351, "term-semisupervised"]], "set_params": [[351, "term-set_params"]], "sparse graph": [[351, "term-sparse-graph"]], "sparse matrix": [[351, "term-sparse-matrix"]], "split": [[351, "term-split"]], "stateless": [[351, "term-stateless"]], "supervised": [[351, "term-supervised"]], "supervised learning": [[351, "term-supervised-learning"]], "target": [[351, "term-target"]], "targets": [[351, "term-targets"]], "transduction": [[351, "term-transduction"]], "transductive": [[351, "term-transductive"]], "transform": [[351, "term-transform"]], "transformer": [[351, "term-transformer"]], "transformers": [[351, "term-transformers"]], "unlabeled": [[351, "term-unlabeled"]], "unlabeled data": [[351, "term-unlabeled-data"]], "unsupervised": [[351, "term-unsupervised"]], "unsupervised learning": [[351, "term-unsupervised-learning"]], "vectorizer": [[351, "term-vectorizer"]], "vectorizers": [[351, "term-vectorizers"]], "verbose": [[351, "term-verbose"]], "warm_start": [[351, "term-warm_start"]], "module": [[362, "module-sklearn.base"], [362, "module-sklearn.calibration"], [362, "module-sklearn.cluster"], [362, "module-sklearn.compose"], [362, "module-sklearn.covariance"], [362, "module-sklearn.cross_decomposition"], [362, "module-sklearn.datasets"], [362, "module-sklearn.decomposition"], [362, "module-sklearn.discriminant_analysis"], [362, "module-sklearn.dummy"], [362, "module-sklearn.ensemble"], [362, "module-sklearn.exceptions"], [362, "module-sklearn.experimental"], [362, "module-sklearn.feature_extraction"], [362, "module-sklearn.feature_extraction.image"], [362, "module-sklearn.feature_extraction.text"], [362, "module-sklearn.feature_selection"], [362, "module-sklearn.gaussian_process"], [362, "module-sklearn.impute"], [362, "module-sklearn.inspection"], [362, "module-sklearn.isotonic"], [362, "module-sklearn.kernel_approximation"], [362, "module-sklearn.kernel_ridge"], [362, "module-sklearn.linear_model"], [362, "module-sklearn.manifold"], [362, "module-sklearn.metrics"], [362, "module-sklearn.metrics.cluster"], [362, "module-sklearn.metrics.pairwise"], [362, "module-sklearn.mixture"], [362, "module-sklearn.model_selection"], [362, "module-sklearn.multiclass"], [362, "module-sklearn.multioutput"], [362, "module-sklearn.naive_bayes"], [362, "module-sklearn.neighbors"], [362, "module-sklearn.neural_network"], [362, "module-sklearn.pipeline"], [362, "module-sklearn.preprocessing"], [362, "module-sklearn.random_projection"], [362, "module-sklearn.semi_supervised"], [362, "module-sklearn.svm"], [362, "module-sklearn.tree"], [362, "module-sklearn.utils"], [530, "module-sklearn.experimental.enable_halving_search_cv"], [531, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.base": [[362, "module-sklearn.base"]], "sklearn.calibration": [[362, "module-sklearn.calibration"]], "sklearn.cluster": [[362, "module-sklearn.cluster"]], "sklearn.compose": [[362, "module-sklearn.compose"]], "sklearn.covariance": [[362, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[362, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[362, "module-sklearn.datasets"]], "sklearn.decomposition": [[362, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[362, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[362, "module-sklearn.dummy"]], "sklearn.ensemble": [[362, "module-sklearn.ensemble"]], "sklearn.exceptions": [[362, "module-sklearn.exceptions"]], "sklearn.experimental": [[362, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[362, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[362, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[362, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[362, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[362, "module-sklearn.gaussian_process"]], "sklearn.impute": [[362, "module-sklearn.impute"]], "sklearn.inspection": [[362, "module-sklearn.inspection"]], "sklearn.isotonic": [[362, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[362, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[362, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[362, "module-sklearn.linear_model"]], "sklearn.manifold": [[362, "module-sklearn.manifold"]], "sklearn.metrics": [[362, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[362, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[362, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[362, "module-sklearn.mixture"]], "sklearn.model_selection": [[362, "module-sklearn.model_selection"]], "sklearn.multiclass": [[362, "module-sklearn.multiclass"]], "sklearn.multioutput": [[362, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[362, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[362, "module-sklearn.neighbors"]], "sklearn.neural_network": [[362, "module-sklearn.neural_network"]], "sklearn.pipeline": [[362, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[362, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[362, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[362, "module-sklearn.semi_supervised"]], "sklearn.svm": [[362, "module-sklearn.svm"]], "sklearn.tree": [[362, "module-sklearn.tree"]], "sklearn.utils": [[362, "module-sklearn.utils"]], "dbscan() (in module sklearn.cluster)": [[374, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[375, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[376, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[377, "sklearn.base.BaseEstimator"]], "get_params() (sklearn.base.baseestimator method)": [[377, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[377, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[378, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[378, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[378, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[378, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[378, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[379, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[379, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[380, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[380, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[381, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[381, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[382, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[382, "sklearn.base.DensityMixin.score"]], "onetoonefeaturemixin (class in sklearn.base)": [[383, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[383, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "regressormixin (class in sklearn.base)": [[384, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[384, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[385, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[385, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[385, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[386, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[387, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[388, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[389, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[389, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[389, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[389, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[389, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[389, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[389, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "calibrationdisplay (class in sklearn.calibration)": [[390, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[390, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[390, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[390, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[391, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[392, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[392, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[392, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[392, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[392, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[392, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[393, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[393, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[393, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[393, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[393, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[394, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[394, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[394, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[394, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[394, "sklearn.cluster.Birch.get_feature_names_out"]], "get_params() (sklearn.cluster.birch method)": [[394, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[394, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[394, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[394, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[394, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[394, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[395, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[395, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[395, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[395, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[395, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[395, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[395, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[395, "sklearn.cluster.BisectingKMeans.score"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[395, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[395, "sklearn.cluster.BisectingKMeans.set_params"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[395, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[396, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[396, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[396, "sklearn.cluster.DBSCAN.fit_predict"]], "get_params() (sklearn.cluster.dbscan method)": [[396, "sklearn.cluster.DBSCAN.get_params"]], "set_params() (sklearn.cluster.dbscan method)": [[396, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[397, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[397, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[397, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[397, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[397, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[397, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[397, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[397, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[397, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[397, "sklearn.cluster.FeatureAgglomeration.transform"]], "kmeans (class in sklearn.cluster)": [[398, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[398, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[398, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[398, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[398, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.kmeans method)": [[398, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[398, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[398, "sklearn.cluster.KMeans.score"]], "set_output() (sklearn.cluster.kmeans method)": [[398, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[398, "sklearn.cluster.KMeans.set_params"]], "transform() (sklearn.cluster.kmeans method)": [[398, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[399, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[399, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[399, "sklearn.cluster.MeanShift.fit_predict"]], "get_params() (sklearn.cluster.meanshift method)": [[399, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[399, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[399, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[400, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[400, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[400, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[400, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[400, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[400, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[400, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[400, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[400, "sklearn.cluster.MiniBatchKMeans.score"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[400, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[400, "sklearn.cluster.MiniBatchKMeans.set_params"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[400, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[401, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[401, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[401, "sklearn.cluster.OPTICS.fit_predict"]], "get_params() (sklearn.cluster.optics method)": [[401, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[401, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[402, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[402, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[402, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[402, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[402, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[402, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[402, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[402, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[403, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[403, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[403, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_params() (sklearn.cluster.spectralclustering method)": [[403, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[403, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[404, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[404, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[404, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[404, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[404, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[404, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[404, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[404, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[405, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[406, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[407, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[408, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[409, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[410, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[411, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[412, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[413, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[414, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[415, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[415, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[415, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[415, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_params() (sklearn.compose.columntransformer method)": [[415, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[415, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[415, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[415, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[415, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[416, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[416, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[416, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[416, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[416, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[416, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[416, "sklearn.compose.TransformedTargetRegressor.set_params"]], "make_column_selector() (in module sklearn.compose)": [[417, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[418, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[419, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[420, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[420, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[420, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[420, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[420, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[420, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[420, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[420, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[420, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[420, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[420, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[420, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[420, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[420, "sklearn.covariance.EllipticEnvelope.set_params"]], "empiricalcovariance (class in sklearn.covariance)": [[421, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[421, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[421, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[421, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[421, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[421, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[421, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[421, "sklearn.covariance.EmpiricalCovariance.set_params"]], "graphicallasso (class in sklearn.covariance)": [[422, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[422, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[422, "sklearn.covariance.GraphicalLasso.fit"]], "get_params() (sklearn.covariance.graphicallasso method)": [[422, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[422, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[422, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[422, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[422, "sklearn.covariance.GraphicalLasso.set_params"]], "graphicallassocv (class in sklearn.covariance)": [[423, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[423, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[423, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[423, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[423, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[423, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[423, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[423, "sklearn.covariance.GraphicalLassoCV.set_params"]], "ledoitwolf (class in sklearn.covariance)": [[424, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[424, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[424, "sklearn.covariance.LedoitWolf.fit"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[424, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[424, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[424, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[424, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[424, "sklearn.covariance.LedoitWolf.set_params"]], "mincovdet (class in sklearn.covariance)": [[425, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[425, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[425, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[425, "sklearn.covariance.MinCovDet.fit"]], "get_params() (sklearn.covariance.mincovdet method)": [[425, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[425, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[425, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[425, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[425, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[425, "sklearn.covariance.MinCovDet.set_params"]], "oas (class in sklearn.covariance)": [[426, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[426, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[426, "sklearn.covariance.OAS.fit"]], "get_params() (sklearn.covariance.oas method)": [[426, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[426, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[426, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[426, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[426, "sklearn.covariance.OAS.set_params"]], "shrunkcovariance (class in sklearn.covariance)": [[427, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[427, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[427, "sklearn.covariance.ShrunkCovariance.fit"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[427, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[427, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[427, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[427, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[427, "sklearn.covariance.ShrunkCovariance.set_params"]], "empirical_covariance() (in module sklearn.covariance)": [[428, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[429, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[430, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[431, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[432, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[433, "sklearn.cross_decomposition.CCA"]], "coef_ (sklearn.cross_decomposition.cca property)": [[433, "sklearn.cross_decomposition.CCA.coef_"]], "fit() (sklearn.cross_decomposition.cca method)": [[433, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[433, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[433, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.cca method)": [[433, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[433, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[433, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[433, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[433, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[433, "sklearn.cross_decomposition.CCA.set_params"]], "transform() (sklearn.cross_decomposition.cca method)": [[433, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[434, "sklearn.cross_decomposition.PLSCanonical"]], "coef_ (sklearn.cross_decomposition.plscanonical property)": [[434, "sklearn.cross_decomposition.PLSCanonical.coef_"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[434, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[434, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[434, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[434, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[434, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[434, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[434, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[434, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[434, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[434, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[435, "sklearn.cross_decomposition.PLSRegression"]], "coef_ (sklearn.cross_decomposition.plsregression property)": [[435, "sklearn.cross_decomposition.PLSRegression.coef_"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[435, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[435, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[435, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[435, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[435, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[435, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[435, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[435, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[435, "sklearn.cross_decomposition.PLSRegression.set_params"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[435, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[436, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[436, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[436, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[436, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[436, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[436, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[436, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[436, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[437, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[438, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[439, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[440, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[441, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[442, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[443, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[444, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[445, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[446, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[447, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[448, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[449, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[450, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[451, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[452, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[453, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[454, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[455, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[456, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[457, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[458, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[459, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[460, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[461, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[462, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[463, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[464, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[465, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[466, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[467, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[468, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[469, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[470, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[471, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[472, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[473, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[474, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[475, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[476, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[477, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[478, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[479, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[480, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[481, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[482, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[482, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[482, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[482, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[482, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[482, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[482, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[482, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[483, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[483, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[483, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[483, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[483, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[483, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[483, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[483, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[483, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[483, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[483, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[483, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[484, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[484, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[484, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[484, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_params() (sklearn.decomposition.fastica method)": [[484, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[484, "sklearn.decomposition.FastICA.inverse_transform"]], "set_output() (sklearn.decomposition.fastica method)": [[484, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[484, "sklearn.decomposition.FastICA.set_params"]], "transform() (sklearn.decomposition.fastica method)": [[484, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[485, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[485, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[485, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[485, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[485, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[485, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[485, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[485, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[485, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[485, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[485, "sklearn.decomposition.IncrementalPCA.set_params"]], "transform() (sklearn.decomposition.incrementalpca method)": [[485, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[486, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[486, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[486, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[486, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.kernelpca method)": [[486, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[486, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[486, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[486, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[486, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[487, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[487, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[487, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[487, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[487, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[487, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[487, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[487, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[487, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[487, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[487, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[488, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[488, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[488, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[488, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[488, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[488, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[488, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[488, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[488, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[489, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[489, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[489, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[489, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[489, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[489, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[489, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[489, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[489, "sklearn.decomposition.MiniBatchNMF.set_params"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[489, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[490, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[490, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[490, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[490, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[490, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[490, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[490, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[490, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[490, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[491, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[491, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[491, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[491, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.nmf method)": [[491, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[491, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[491, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[491, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[491, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[492, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[492, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[492, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[492, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[492, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.pca method)": [[492, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[492, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[492, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[492, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[492, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[492, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[492, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[492, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[493, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[493, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[493, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[493, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[493, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[493, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[493, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[493, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[493, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[493, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[494, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[494, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[494, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[494, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsepca method)": [[494, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[494, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[494, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[494, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[494, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[495, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[495, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[495, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[495, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[495, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[495, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[495, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[495, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[495, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[496, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[497, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[498, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[499, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[500, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[500, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[501, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[501, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[501, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[501, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[501, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[501, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[501, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[501, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[501, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "dummyclassifier (class in sklearn.dummy)": [[502, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[502, "sklearn.dummy.DummyClassifier.fit"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[502, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[502, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[502, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[502, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[502, "sklearn.dummy.DummyClassifier.score"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[502, "sklearn.dummy.DummyClassifier.set_params"]], "dummyregressor (class in sklearn.dummy)": [[503, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[503, "sklearn.dummy.DummyRegressor.fit"]], "get_params() (sklearn.dummy.dummyregressor method)": [[503, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[503, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[503, "sklearn.dummy.DummyRegressor.score"]], "set_params() (sklearn.dummy.dummyregressor method)": [[503, "sklearn.dummy.DummyRegressor.set_params"]], "adaboostclassifier (class in sklearn.ensemble)": [[504, "sklearn.ensemble.AdaBoostClassifier"]], "base_estimator_ (sklearn.ensemble.adaboostclassifier property)": [[504, "sklearn.ensemble.AdaBoostClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[504, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[504, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[504, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[504, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[504, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[504, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[504, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[504, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[504, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[504, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[504, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[504, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[504, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[505, "sklearn.ensemble.AdaBoostRegressor"]], "base_estimator_ (sklearn.ensemble.adaboostregressor property)": [[505, "sklearn.ensemble.AdaBoostRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[505, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[505, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[505, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[505, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[505, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[505, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[505, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[505, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[506, "sklearn.ensemble.BaggingClassifier"]], "base_estimator_ (sklearn.ensemble.baggingclassifier property)": [[506, "sklearn.ensemble.BaggingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[506, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[506, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[506, "sklearn.ensemble.BaggingClassifier.fit"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[506, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[506, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[506, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[506, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[506, "sklearn.ensemble.BaggingClassifier.score"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[506, "sklearn.ensemble.BaggingClassifier.set_params"]], "baggingregressor (class in sklearn.ensemble)": [[507, "sklearn.ensemble.BaggingRegressor"]], "base_estimator_ (sklearn.ensemble.baggingregressor property)": [[507, "sklearn.ensemble.BaggingRegressor.base_estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[507, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[507, "sklearn.ensemble.BaggingRegressor.fit"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[507, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[507, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[507, "sklearn.ensemble.BaggingRegressor.score"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[507, "sklearn.ensemble.BaggingRegressor.set_params"]], "extratreesclassifier (class in sklearn.ensemble)": [[508, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[508, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "base_estimator_ (sklearn.ensemble.extratreesclassifier property)": [[508, "sklearn.ensemble.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[508, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[508, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[508, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[508, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[508, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[508, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[508, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[508, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[508, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "extratreesregressor (class in sklearn.ensemble)": [[509, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[509, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "base_estimator_ (sklearn.ensemble.extratreesregressor property)": [[509, "sklearn.ensemble.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[509, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[509, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[509, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[509, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[509, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[509, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[509, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[510, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[510, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[510, "sklearn.ensemble.GradientBoostingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[510, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[510, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[510, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[510, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[510, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[510, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[510, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[510, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[510, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[510, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[510, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[510, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[511, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[511, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[511, "sklearn.ensemble.GradientBoostingRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[511, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[511, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[511, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[511, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[511, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[511, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[511, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[512, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[512, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[512, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[512, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[512, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[512, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[512, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[512, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[512, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[512, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[512, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[512, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[513, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[513, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[513, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[513, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[513, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[513, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[513, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[513, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[514, "sklearn.ensemble.IsolationForest"]], "base_estimator_ (sklearn.ensemble.isolationforest property)": [[514, "sklearn.ensemble.IsolationForest.base_estimator_"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[514, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[514, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[514, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[514, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_params() (sklearn.ensemble.isolationforest method)": [[514, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[514, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[514, "sklearn.ensemble.IsolationForest.score_samples"]], "set_params() (sklearn.ensemble.isolationforest method)": [[514, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[515, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[515, "sklearn.ensemble.RandomForestClassifier.apply"]], "base_estimator_ (sklearn.ensemble.randomforestclassifier property)": [[515, "sklearn.ensemble.RandomForestClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[515, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[515, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[515, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[515, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[515, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[515, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[515, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[515, "sklearn.ensemble.RandomForestClassifier.score"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[515, "sklearn.ensemble.RandomForestClassifier.set_params"]], "randomforestregressor (class in sklearn.ensemble)": [[516, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[516, "sklearn.ensemble.RandomForestRegressor.apply"]], "base_estimator_ (sklearn.ensemble.randomforestregressor property)": [[516, "sklearn.ensemble.RandomForestRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[516, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[516, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[516, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[516, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[516, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[516, "sklearn.ensemble.RandomForestRegressor.score"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[516, "sklearn.ensemble.RandomForestRegressor.set_params"]], "randomtreesembedding (class in sklearn.ensemble)": [[517, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[517, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "base_estimator_ (sklearn.ensemble.randomtreesembedding property)": [[517, "sklearn.ensemble.RandomTreesEmbedding.base_estimator_"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[517, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[517, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[517, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[517, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[517, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[517, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[517, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[517, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[517, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[518, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[518, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[518, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[518, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[518, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[518, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[518, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[518, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[518, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[518, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[518, "sklearn.ensemble.StackingClassifier.score"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[518, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[518, "sklearn.ensemble.StackingClassifier.set_params"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[518, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[519, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[519, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[519, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[519, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[519, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[519, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[519, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[519, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[519, "sklearn.ensemble.StackingRegressor.score"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[519, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[519, "sklearn.ensemble.StackingRegressor.set_params"]], "transform() (sklearn.ensemble.stackingregressor method)": [[519, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[520, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[520, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[520, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[520, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[520, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[520, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[520, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[520, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[520, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[520, "sklearn.ensemble.VotingClassifier.score"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[520, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[520, "sklearn.ensemble.VotingClassifier.set_params"]], "transform() (sklearn.ensemble.votingclassifier method)": [[520, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[521, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[521, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[521, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[521, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingregressor method)": [[521, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[521, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[521, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[521, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[521, "sklearn.ensemble.VotingRegressor.score"]], "set_output() (sklearn.ensemble.votingregressor method)": [[521, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[521, "sklearn.ensemble.VotingRegressor.set_params"]], "transform() (sklearn.ensemble.votingregressor method)": [[521, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[522, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[522, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[523, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[523, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[524, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[524, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[525, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[525, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[526, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[526, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[527, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[527, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[528, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[528, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[529, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[529, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[530, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[531, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[532, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[532, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[532, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[532, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[532, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[532, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[532, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[532, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[532, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[532, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[533, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[533, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[533, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[533, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[533, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[533, "sklearn.feature_extraction.FeatureHasher.set_params"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[533, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[534, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[534, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[534, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[534, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[534, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[534, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[534, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[535, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[536, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[537, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[538, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[539, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[539, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[539, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[539, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[539, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[539, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[539, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[539, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[539, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[539, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[539, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[539, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[539, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[540, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[540, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[540, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[540, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[540, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[540, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[540, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[540, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[540, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[540, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[540, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[540, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[540, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[541, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[541, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[541, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[541, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[541, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[541, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[541, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[541, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[541, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[542, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[542, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[542, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[542, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[542, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[542, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[542, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[542, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[542, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[542, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[542, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[542, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[542, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[542, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[543, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[543, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[543, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[543, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[543, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[543, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[543, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[543, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[543, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[543, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[544, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[544, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[544, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[544, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[544, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[544, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfe method)": [[544, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[544, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[544, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[544, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[544, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[544, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[544, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[544, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[544, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[544, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[545, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[545, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[545, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[545, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[545, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[545, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfecv method)": [[545, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[545, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[545, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[545, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[545, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[545, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[545, "sklearn.feature_selection.RFECV.score"]], "set_output() (sklearn.feature_selection.rfecv method)": [[545, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[545, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[545, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[546, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[546, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[546, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[546, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[546, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[546, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[546, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[546, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[546, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[546, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[547, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[547, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[547, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[547, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[547, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[547, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[547, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[547, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[547, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[547, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[548, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[548, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[548, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[548, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[548, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[548, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[548, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[548, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[548, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[548, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[548, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[548, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[548, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[549, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[549, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[549, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[549, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[549, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[549, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[549, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[549, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[549, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[549, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[550, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[550, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[550, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[550, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[550, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[550, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[550, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[550, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[550, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[550, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[551, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[551, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[551, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[551, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[551, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[551, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[551, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[551, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[551, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[551, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[552, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[552, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[552, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[552, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[552, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[552, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[552, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[553, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[553, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[553, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[553, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[553, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[553, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[553, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[553, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[553, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[553, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[554, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[554, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[554, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[554, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[554, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[554, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[554, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[554, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[554, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[554, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[555, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[556, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[557, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[558, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[559, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[560, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[561, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[561, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[561, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[561, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[561, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[561, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[561, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[561, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[561, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[562, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[562, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[562, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[562, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[562, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[562, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[562, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[562, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[563, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[563, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[563, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[563, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[563, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[563, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[563, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[563, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[563, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[563, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[563, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[563, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[564, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[564, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[564, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[564, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[564, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[564, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[564, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[564, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[564, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[564, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[564, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[564, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[565, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[565, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[565, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[565, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[565, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[565, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[565, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[565, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[565, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[565, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[565, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[565, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[566, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[566, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[566, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[566, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[566, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[566, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[566, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[566, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[566, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[566, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[566, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[566, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[566, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[567, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[567, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[567, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[567, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[567, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[567, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[567, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[567, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[567, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[567, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[567, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[567, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[568, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[568, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[568, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[568, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[568, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[568, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[568, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[568, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[568, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[569, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[569, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[569, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[569, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[569, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[569, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[569, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[569, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[569, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[569, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[569, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[569, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[570, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[570, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[570, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[570, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[570, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[570, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[570, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[570, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[570, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[570, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[570, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[570, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[571, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[571, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[571, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[571, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[571, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[571, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[571, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[571, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[571, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[571, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[571, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[571, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[572, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[572, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[572, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[572, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[572, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[572, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[572, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[572, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[572, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[572, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[572, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[572, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[573, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[573, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[573, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[573, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[573, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[573, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[573, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[573, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[573, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[573, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[573, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[573, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[574, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[574, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[574, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[574, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[574, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[574, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[574, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[574, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[574, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[574, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[574, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[574, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[575, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[575, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[575, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[575, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[575, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[575, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[575, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[575, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[575, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[575, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[575, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[575, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[576, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[576, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[576, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[576, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[576, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[576, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[576, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[576, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[576, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[576, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[576, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[576, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[577, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[578, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[578, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[578, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[578, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_params() (sklearn.impute.iterativeimputer method)": [[578, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[578, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[578, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[578, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[579, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[579, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[579, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[579, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_params() (sklearn.impute.knnimputer method)": [[579, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[579, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[579, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[579, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[580, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[580, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[580, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[580, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_params() (sklearn.impute.missingindicator method)": [[580, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[580, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[580, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[580, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[581, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[581, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[581, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[581, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_params() (sklearn.impute.simpleimputer method)": [[581, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[581, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[581, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[581, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[581, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[582, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[582, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[582, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[583, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[583, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[583, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[584, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[585, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[586, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[586, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[586, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[586, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[586, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[586, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[586, "sklearn.isotonic.IsotonicRegression.score"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[586, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[586, "sklearn.isotonic.IsotonicRegression.set_params"]], "transform() (sklearn.isotonic.isotonicregression method)": [[586, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[587, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[588, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[589, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[589, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[589, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[589, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[589, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[589, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[589, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[589, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[590, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[590, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[590, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[590, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[590, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[590, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[590, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[590, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[591, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[591, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[591, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[591, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[591, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[591, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[591, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[591, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[592, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[592, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[592, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[592, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[592, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[592, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[592, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[592, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[593, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[593, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[593, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[593, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[593, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[593, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[593, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[593, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[594, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[594, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[594, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[594, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[594, "sklearn.kernel_ridge.KernelRidge.score"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[594, "sklearn.kernel_ridge.KernelRidge.set_params"]], "ardregression (class in sklearn.linear_model)": [[595, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[595, "sklearn.linear_model.ARDRegression.fit"]], "get_params() (sklearn.linear_model.ardregression method)": [[595, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[595, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[595, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[595, "sklearn.linear_model.ARDRegression.set_params"]], "bayesianridge (class in sklearn.linear_model)": [[596, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[596, "sklearn.linear_model.BayesianRidge.fit"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[596, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[596, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[596, "sklearn.linear_model.BayesianRidge.score"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[596, "sklearn.linear_model.BayesianRidge.set_params"]], "elasticnet (class in sklearn.linear_model)": [[597, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[597, "sklearn.linear_model.ElasticNet.fit"]], "get_params() (sklearn.linear_model.elasticnet method)": [[597, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[597, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[597, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[597, "sklearn.linear_model.ElasticNet.score"]], "set_params() (sklearn.linear_model.elasticnet method)": [[597, "sklearn.linear_model.ElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[597, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[598, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[598, "sklearn.linear_model.ElasticNetCV.fit"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[598, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[598, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[598, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[598, "sklearn.linear_model.ElasticNetCV.score"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[598, "sklearn.linear_model.ElasticNetCV.set_params"]], "gammaregressor (class in sklearn.linear_model)": [[599, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[599, "sklearn.linear_model.GammaRegressor.fit"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[599, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[599, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[599, "sklearn.linear_model.GammaRegressor.score"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[599, "sklearn.linear_model.GammaRegressor.set_params"]], "huberregressor (class in sklearn.linear_model)": [[600, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[600, "sklearn.linear_model.HuberRegressor.fit"]], "get_params() (sklearn.linear_model.huberregressor method)": [[600, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[600, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[600, "sklearn.linear_model.HuberRegressor.score"]], "set_params() (sklearn.linear_model.huberregressor method)": [[600, "sklearn.linear_model.HuberRegressor.set_params"]], "lars (class in sklearn.linear_model)": [[601, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[601, "sklearn.linear_model.Lars.fit"]], "get_params() (sklearn.linear_model.lars method)": [[601, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[601, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[601, "sklearn.linear_model.Lars.score"]], "set_params() (sklearn.linear_model.lars method)": [[601, "sklearn.linear_model.Lars.set_params"]], "larscv (class in sklearn.linear_model)": [[602, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[602, "sklearn.linear_model.LarsCV.fit"]], "get_params() (sklearn.linear_model.larscv method)": [[602, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[602, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[602, "sklearn.linear_model.LarsCV.score"]], "set_params() (sklearn.linear_model.larscv method)": [[602, "sklearn.linear_model.LarsCV.set_params"]], "lasso (class in sklearn.linear_model)": [[603, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[603, "sklearn.linear_model.Lasso.fit"]], "get_params() (sklearn.linear_model.lasso method)": [[603, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[603, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[603, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[603, "sklearn.linear_model.Lasso.score"]], "set_params() (sklearn.linear_model.lasso method)": [[603, "sklearn.linear_model.Lasso.set_params"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[603, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[604, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[604, "sklearn.linear_model.LassoCV.fit"]], "get_params() (sklearn.linear_model.lassocv method)": [[604, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[604, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[604, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[604, "sklearn.linear_model.LassoCV.score"]], "set_params() (sklearn.linear_model.lassocv method)": [[604, "sklearn.linear_model.LassoCV.set_params"]], "lassolars (class in sklearn.linear_model)": [[605, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[605, "sklearn.linear_model.LassoLars.fit"]], "get_params() (sklearn.linear_model.lassolars method)": [[605, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[605, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[605, "sklearn.linear_model.LassoLars.score"]], "set_params() (sklearn.linear_model.lassolars method)": [[605, "sklearn.linear_model.LassoLars.set_params"]], "lassolarscv (class in sklearn.linear_model)": [[606, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[606, "sklearn.linear_model.LassoLarsCV.fit"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[606, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[606, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[606, "sklearn.linear_model.LassoLarsCV.score"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[606, "sklearn.linear_model.LassoLarsCV.set_params"]], "lassolarsic (class in sklearn.linear_model)": [[607, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[607, "sklearn.linear_model.LassoLarsIC.fit"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[607, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[607, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[607, "sklearn.linear_model.LassoLarsIC.score"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[607, "sklearn.linear_model.LassoLarsIC.set_params"]], "linearregression (class in sklearn.linear_model)": [[608, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[608, "sklearn.linear_model.LinearRegression.fit"]], "get_params() (sklearn.linear_model.linearregression method)": [[608, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[608, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[608, "sklearn.linear_model.LinearRegression.score"]], "set_params() (sklearn.linear_model.linearregression method)": [[608, "sklearn.linear_model.LinearRegression.set_params"]], "logisticregression (class in sklearn.linear_model)": [[609, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[609, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[609, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[609, "sklearn.linear_model.LogisticRegression.fit"]], "get_params() (sklearn.linear_model.logisticregression method)": [[609, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[609, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[609, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[609, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[609, "sklearn.linear_model.LogisticRegression.score"]], "set_params() (sklearn.linear_model.logisticregression method)": [[609, "sklearn.linear_model.LogisticRegression.set_params"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[609, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[610, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[610, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[610, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[610, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[610, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[610, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[610, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[610, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[610, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[610, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[610, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[611, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[611, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[611, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[611, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[611, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[611, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[611, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[611, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[612, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[612, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[612, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[612, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[612, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[612, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[612, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "multitasklasso (class in sklearn.linear_model)": [[613, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[613, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[613, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[613, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[613, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[613, "sklearn.linear_model.MultiTaskLasso.score"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[613, "sklearn.linear_model.MultiTaskLasso.set_params"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[613, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[614, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[614, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[614, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[614, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[614, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[614, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[614, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[615, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[615, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[615, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[615, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[615, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[615, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[616, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[616, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[616, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[616, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[616, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[616, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[617, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[617, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[617, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[617, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[617, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[617, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[617, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[617, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[617, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[617, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor() (in module sklearn.linear_model)": [[618, "sklearn.linear_model.PassiveAggressiveRegressor"]], "perceptron (class in sklearn.linear_model)": [[619, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[619, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[619, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[619, "sklearn.linear_model.Perceptron.fit"]], "get_params() (sklearn.linear_model.perceptron method)": [[619, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[619, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[619, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[619, "sklearn.linear_model.Perceptron.score"]], "set_params() (sklearn.linear_model.perceptron method)": [[619, "sklearn.linear_model.Perceptron.set_params"]], "sparsify() (sklearn.linear_model.perceptron method)": [[619, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[620, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[620, "sklearn.linear_model.PoissonRegressor.fit"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[620, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[620, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[620, "sklearn.linear_model.PoissonRegressor.score"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[620, "sklearn.linear_model.PoissonRegressor.set_params"]], "quantileregressor (class in sklearn.linear_model)": [[621, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[621, "sklearn.linear_model.QuantileRegressor.fit"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[621, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[621, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[621, "sklearn.linear_model.QuantileRegressor.score"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[621, "sklearn.linear_model.QuantileRegressor.set_params"]], "ransacregressor (class in sklearn.linear_model)": [[622, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[622, "sklearn.linear_model.RANSACRegressor.fit"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[622, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[622, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[622, "sklearn.linear_model.RANSACRegressor.score"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[622, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[623, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[623, "sklearn.linear_model.Ridge.fit"]], "get_params() (sklearn.linear_model.ridge method)": [[623, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[623, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[623, "sklearn.linear_model.Ridge.score"]], "set_params() (sklearn.linear_model.ridge method)": [[623, "sklearn.linear_model.Ridge.set_params"]], "ridgecv (class in sklearn.linear_model)": [[624, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[624, "sklearn.linear_model.RidgeCV.fit"]], "get_params() (sklearn.linear_model.ridgecv method)": [[624, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[624, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[624, "sklearn.linear_model.RidgeCV.score"]], "set_params() (sklearn.linear_model.ridgecv method)": [[624, "sklearn.linear_model.RidgeCV.set_params"]], "ridgeclassifier (class in sklearn.linear_model)": [[625, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[625, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[625, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[625, "sklearn.linear_model.RidgeClassifier.fit"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[625, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[625, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[625, "sklearn.linear_model.RidgeClassifier.score"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[625, "sklearn.linear_model.RidgeClassifier.set_params"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[626, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[626, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[626, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[626, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[626, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[626, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[626, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[626, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "sgdclassifier (class in sklearn.linear_model)": [[627, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[627, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[627, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[627, "sklearn.linear_model.SGDClassifier.fit"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[627, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[627, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[627, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[627, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[627, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[627, "sklearn.linear_model.SGDClassifier.score"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[627, "sklearn.linear_model.SGDClassifier.set_params"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[627, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[628, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[628, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[628, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[628, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[628, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[628, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[628, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[628, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[628, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[628, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[628, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[629, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[629, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[629, "sklearn.linear_model.SGDRegressor.fit"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[629, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[629, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[629, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[629, "sklearn.linear_model.SGDRegressor.score"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[629, "sklearn.linear_model.SGDRegressor.set_params"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[629, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[630, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[630, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[630, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[630, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[630, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[630, "sklearn.linear_model.TheilSenRegressor.set_params"]], "tweedieregressor (class in sklearn.linear_model)": [[631, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[631, "sklearn.linear_model.TweedieRegressor.fit"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[631, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[631, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[631, "sklearn.linear_model.TweedieRegressor.score"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[631, "sklearn.linear_model.TweedieRegressor.set_params"]], "enet_path() (in module sklearn.linear_model)": [[632, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[633, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[634, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[635, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[636, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[637, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[638, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[639, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[639, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[639, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[639, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_params() (sklearn.manifold.isomap method)": [[639, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[639, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[639, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[639, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[639, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[640, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[640, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[640, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[640, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[640, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[640, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[640, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[640, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[641, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[641, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[641, "sklearn.manifold.MDS.fit_transform"]], "get_params() (sklearn.manifold.mds method)": [[641, "sklearn.manifold.MDS.get_params"]], "set_params() (sklearn.manifold.mds method)": [[641, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[642, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[642, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[642, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_params() (sklearn.manifold.spectralembedding method)": [[642, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[642, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[643, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[643, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[643, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[643, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_params() (sklearn.manifold.tsne method)": [[643, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[643, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[643, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[644, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[645, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[646, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[647, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[648, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[648, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[648, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[648, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[649, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[649, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[649, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[649, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[650, "sklearn.metrics.DistanceMetric"]], "dist_to_rdist() (sklearn.metrics.distancemetric method)": [[650, "sklearn.metrics.DistanceMetric.dist_to_rdist"]], "get_metric() (sklearn.metrics.distancemetric method)": [[650, "sklearn.metrics.DistanceMetric.get_metric"]], "pairwise() (sklearn.metrics.distancemetric method)": [[650, "sklearn.metrics.DistanceMetric.pairwise"]], "rdist_to_dist() (sklearn.metrics.distancemetric method)": [[650, "sklearn.metrics.DistanceMetric.rdist_to_dist"]], "precisionrecalldisplay (class in sklearn.metrics)": [[651, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[651, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[651, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[651, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[652, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[652, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[652, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[652, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[653, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[653, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[653, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[653, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[654, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[655, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[656, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[657, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[658, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[659, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[660, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[661, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[662, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[663, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[664, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[665, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[666, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[667, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[668, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[669, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[670, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[671, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[672, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[673, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[674, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[675, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[676, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[677, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[678, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[679, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[680, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[681, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[682, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[683, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[684, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[685, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[686, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[687, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[688, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[689, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[690, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[691, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[692, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[693, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[694, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[695, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[696, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[697, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[698, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[699, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[700, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[701, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[702, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[703, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[704, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[707, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[708, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[709, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[710, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[711, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[712, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[713, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[714, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[715, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[716, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[717, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[718, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[719, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[720, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[721, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[722, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[723, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[724, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[725, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[726, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[727, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[728, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[729, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[730, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[731, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[732, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[733, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[734, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[735, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[736, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[737, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[738, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[739, "sklearn.metrics.roc_curve"]], "silhouette_samples() (in module sklearn.metrics)": [[740, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[741, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[742, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[743, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[744, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[745, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[745, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[745, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[745, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[745, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[745, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[745, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[745, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[745, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[745, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[746, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[746, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[746, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[746, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[746, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[746, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[746, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[746, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[746, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[746, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[746, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[746, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[747, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[747, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[747, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[747, "sklearn.model_selection.GridSearchCV.fit"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[747, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[747, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[747, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[747, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[747, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[747, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[747, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[747, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[747, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[747, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[748, "sklearn.model_selection.GroupKFold"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[748, "sklearn.model_selection.GroupKFold.get_n_splits"]], "split() (sklearn.model_selection.groupkfold method)": [[748, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[749, "sklearn.model_selection.GroupShuffleSplit"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[749, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[749, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[750, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[750, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[750, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[750, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[750, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[750, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[750, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[750, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[750, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[750, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[750, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[750, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[750, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[750, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[751, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[751, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[751, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[751, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[751, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[751, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[751, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[751, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[751, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[751, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[751, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[751, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[751, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[751, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[752, "sklearn.model_selection.KFold"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[752, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[752, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[753, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[753, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[753, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[754, "sklearn.model_selection.LeaveOneGroupOut"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[754, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[754, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[755, "sklearn.model_selection.LeaveOneOut"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[755, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[755, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[756, "sklearn.model_selection.LeavePGroupsOut"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[756, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[756, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[757, "sklearn.model_selection.LeavePOut"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[757, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[757, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[758, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[759, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[760, "sklearn.model_selection.PredefinedSplit"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[760, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[760, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[761, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[761, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[761, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[761, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[761, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[761, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[761, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[761, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[761, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[761, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[761, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[761, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[761, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[761, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[762, "sklearn.model_selection.RepeatedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[762, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[762, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[763, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[763, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[763, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[764, "sklearn.model_selection.ShuffleSplit"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[764, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[764, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[765, "sklearn.model_selection.StratifiedGroupKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[765, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[765, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[766, "sklearn.model_selection.StratifiedKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[766, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[766, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[767, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[767, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[767, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[768, "sklearn.model_selection.TimeSeriesSplit"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[768, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[768, "sklearn.model_selection.TimeSeriesSplit.split"]], "check_cv() (in module sklearn.model_selection)": [[769, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[770, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[771, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[772, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[773, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[774, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[775, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[776, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[777, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[777, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[777, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[777, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[777, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[777, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[777, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[777, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[777, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "onevsrestclassifier (class in sklearn.multiclass)": [[778, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[778, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[778, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[778, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[778, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[778, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[778, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[778, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[778, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[778, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[778, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "outputcodeclassifier (class in sklearn.multiclass)": [[779, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[779, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[779, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[779, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[779, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[779, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "classifierchain (class in sklearn.multioutput)": [[780, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[780, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[780, "sklearn.multioutput.ClassifierChain.fit"]], "get_params() (sklearn.multioutput.classifierchain method)": [[780, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[780, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[780, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[780, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[780, "sklearn.multioutput.ClassifierChain.set_params"]], "multioutputclassifier (class in sklearn.multioutput)": [[781, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[781, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[781, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[781, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[781, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[781, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[781, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[781, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "multioutputregressor (class in sklearn.multioutput)": [[782, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[782, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[782, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[782, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[782, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[782, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[782, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "regressorchain (class in sklearn.multioutput)": [[783, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[783, "sklearn.multioutput.RegressorChain.fit"]], "get_params() (sklearn.multioutput.regressorchain method)": [[783, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[783, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[783, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[783, "sklearn.multioutput.RegressorChain.set_params"]], "bernoullinb (class in sklearn.naive_bayes)": [[784, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[784, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[784, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[784, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[784, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[784, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[784, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[784, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[784, "sklearn.naive_bayes.BernoulliNB.score"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[784, "sklearn.naive_bayes.BernoulliNB.set_params"]], "categoricalnb (class in sklearn.naive_bayes)": [[785, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[785, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[785, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[785, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[785, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[785, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[785, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[785, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[785, "sklearn.naive_bayes.CategoricalNB.score"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[785, "sklearn.naive_bayes.CategoricalNB.set_params"]], "complementnb (class in sklearn.naive_bayes)": [[786, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[786, "sklearn.naive_bayes.ComplementNB.fit"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[786, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[786, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[786, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[786, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[786, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[786, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[786, "sklearn.naive_bayes.ComplementNB.score"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[786, "sklearn.naive_bayes.ComplementNB.set_params"]], "gaussiannb (class in sklearn.naive_bayes)": [[787, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[787, "sklearn.naive_bayes.GaussianNB.fit"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[787, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[787, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[787, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[787, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[787, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[787, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[787, "sklearn.naive_bayes.GaussianNB.score"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[787, "sklearn.naive_bayes.GaussianNB.set_params"]], "multinomialnb (class in sklearn.naive_bayes)": [[788, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[788, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[788, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[788, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[788, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[788, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[788, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[788, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[788, "sklearn.naive_bayes.MultinomialNB.score"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[788, "sklearn.naive_bayes.MultinomialNB.set_params"]], "balltree (class in sklearn.neighbors)": [[789, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[789, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[789, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[789, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[789, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[789, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[789, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[789, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[789, "sklearn.neighbors.BallTree.two_point_correlation"]], "valid_metrics() (sklearn.neighbors.balltree method)": [[789, "sklearn.neighbors.BallTree.valid_metrics"]], "kdtree (class in sklearn.neighbors)": [[790, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[790, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[790, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[790, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[790, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[790, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[790, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[790, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[790, "sklearn.neighbors.KDTree.two_point_correlation"]], "valid_metrics() (sklearn.neighbors.kdtree method)": [[790, "sklearn.neighbors.KDTree.valid_metrics"]], "kneighborsclassifier (class in sklearn.neighbors)": [[791, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[791, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[791, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[791, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[791, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[791, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[791, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[791, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[791, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "kneighborsregressor (class in sklearn.neighbors)": [[792, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[792, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[792, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[792, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[792, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[792, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[792, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[792, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "kneighborstransformer (class in sklearn.neighbors)": [[793, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[793, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[793, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[793, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[793, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[793, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[793, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[793, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[793, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[793, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[794, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[794, "sklearn.neighbors.KernelDensity.fit"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[794, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[794, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[794, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[794, "sklearn.neighbors.KernelDensity.score_samples"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[794, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[795, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[795, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[795, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[795, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[795, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[795, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[795, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[795, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[795, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[795, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[796, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[796, "sklearn.neighbors.NearestCentroid.fit"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[796, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[796, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[796, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[796, "sklearn.neighbors.NearestCentroid.set_params"]], "nearestneighbors (class in sklearn.neighbors)": [[797, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[797, "sklearn.neighbors.NearestNeighbors.fit"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[797, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[797, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[797, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[797, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[797, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[797, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[798, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[798, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[798, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[798, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[798, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[798, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[798, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[798, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[799, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[799, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[799, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[799, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[799, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[799, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[799, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[799, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[799, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[800, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[800, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[800, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[800, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[800, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[800, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[800, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[800, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[801, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[801, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[801, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[801, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[801, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[801, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[801, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[801, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[801, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[801, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[802, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[803, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[804, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[805, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[805, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[805, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[805, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[805, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[805, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[805, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[805, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[805, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[805, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[805, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[806, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[806, "sklearn.neural_network.MLPClassifier.fit"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[806, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[806, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[806, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[806, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[806, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[806, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[806, "sklearn.neural_network.MLPClassifier.set_params"]], "mlpregressor (class in sklearn.neural_network)": [[807, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[807, "sklearn.neural_network.MLPRegressor.fit"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[807, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[807, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[807, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[807, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[807, "sklearn.neural_network.MLPRegressor.set_params"]], "featureunion (class in sklearn.pipeline)": [[808, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[808, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[808, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[808, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[808, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_params() (sklearn.pipeline.featureunion method)": [[808, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[808, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[808, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[808, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[808, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[809, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[809, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[809, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[809, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[809, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[809, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[809, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[809, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_params() (sklearn.pipeline.pipeline method)": [[809, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[809, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[809, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[809, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[809, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[809, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[809, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[809, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[809, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[809, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[809, "sklearn.pipeline.Pipeline.set_params"]], "transform() (sklearn.pipeline.pipeline method)": [[809, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[810, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[811, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[812, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[812, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[812, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[812, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.binarizer method)": [[812, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[812, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[812, "sklearn.preprocessing.Binarizer.set_params"]], "transform() (sklearn.preprocessing.binarizer method)": [[812, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[813, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[813, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[813, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[813, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[813, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[813, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[813, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[813, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[813, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[814, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[814, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[814, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[814, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[814, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[814, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[814, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[814, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[814, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[815, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[815, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[815, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[815, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[815, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[815, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[815, "sklearn.preprocessing.KernelCenterer.set_params"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[815, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[816, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[816, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[816, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[816, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[816, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[816, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[816, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[816, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[817, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[817, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[817, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[817, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[817, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[817, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[817, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[817, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[818, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[818, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[818, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[818, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[818, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[818, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[818, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[818, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[818, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[818, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[819, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[819, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[819, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[819, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[819, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[819, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[819, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[819, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[819, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[819, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[820, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[820, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[820, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[820, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[820, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[820, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[820, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[820, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[821, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[821, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[821, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[821, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.normalizer method)": [[821, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[821, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[821, "sklearn.preprocessing.Normalizer.set_params"]], "transform() (sklearn.preprocessing.normalizer method)": [[821, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[822, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[822, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[822, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[822, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[822, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[822, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[822, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[822, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[822, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[822, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[823, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[823, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[823, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[823, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[823, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[823, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[823, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[823, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[823, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[823, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[824, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[824, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[824, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[824, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[824, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[824, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[824, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[824, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[824, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[825, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[825, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[825, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[825, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[825, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[825, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[825, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[825, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[825, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[826, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[826, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[826, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[826, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[826, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[826, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[826, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[826, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[826, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[827, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[827, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[827, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[827, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[827, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[827, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[827, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[827, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[827, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[828, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[828, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[828, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[828, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[828, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[828, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[828, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[828, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[829, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[829, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[829, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[829, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[829, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[829, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[829, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[829, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[829, "sklearn.preprocessing.StandardScaler.set_params"]], "transform() (sklearn.preprocessing.standardscaler method)": [[829, "sklearn.preprocessing.StandardScaler.transform"]], "targetencoder (class in sklearn.preprocessing)": [[830, "sklearn.preprocessing.TargetEncoder"]], "fit() (sklearn.preprocessing.targetencoder method)": [[830, "sklearn.preprocessing.TargetEncoder.fit"]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[830, "sklearn.preprocessing.TargetEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[830, "sklearn.preprocessing.TargetEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.targetencoder method)": [[830, "sklearn.preprocessing.TargetEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[830, "sklearn.preprocessing.TargetEncoder.infrequent_categories_"]], "set_output() (sklearn.preprocessing.targetencoder method)": [[830, "sklearn.preprocessing.TargetEncoder.set_output"]], "set_params() (sklearn.preprocessing.targetencoder method)": [[830, "sklearn.preprocessing.TargetEncoder.set_params"]], "transform() (sklearn.preprocessing.targetencoder method)": [[830, "sklearn.preprocessing.TargetEncoder.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[831, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[832, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[833, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[834, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[835, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[836, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[837, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[838, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[839, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[840, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[841, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[841, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[841, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[841, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[841, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[841, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[841, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[841, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[841, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[842, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[842, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[842, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[842, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[842, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[842, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[842, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[842, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[842, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[843, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[844, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[844, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[844, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[844, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[844, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[844, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[844, "sklearn.semi_supervised.LabelPropagation.set_params"]], "labelspreading (class in sklearn.semi_supervised)": [[845, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[845, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[845, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[845, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[845, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[845, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[845, "sklearn.semi_supervised.LabelSpreading.set_params"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[846, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[846, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[846, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[846, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[846, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[846, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[846, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[846, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[846, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[847, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[848, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[849, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[849, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[849, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[849, "sklearn.svm.LinearSVC.fit"]], "get_params() (sklearn.svm.linearsvc method)": [[849, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[849, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[849, "sklearn.svm.LinearSVC.score"]], "set_params() (sklearn.svm.linearsvc method)": [[849, "sklearn.svm.LinearSVC.set_params"]], "sparsify() (sklearn.svm.linearsvc method)": [[849, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[850, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[850, "sklearn.svm.LinearSVR.fit"]], "get_params() (sklearn.svm.linearsvr method)": [[850, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[850, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[850, "sklearn.svm.LinearSVR.score"]], "set_params() (sklearn.svm.linearsvr method)": [[850, "sklearn.svm.LinearSVR.set_params"]], "nusvc (class in sklearn.svm)": [[851, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[851, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[851, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[851, "sklearn.svm.NuSVC.fit"]], "get_params() (sklearn.svm.nusvc method)": [[851, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[851, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[851, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[851, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[851, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[851, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[851, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[851, "sklearn.svm.NuSVC.score"]], "set_params() (sklearn.svm.nusvc method)": [[851, "sklearn.svm.NuSVC.set_params"]], "nusvr (class in sklearn.svm)": [[852, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[852, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[852, "sklearn.svm.NuSVR.fit"]], "get_params() (sklearn.svm.nusvr method)": [[852, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[852, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[852, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[852, "sklearn.svm.NuSVR.score"]], "set_params() (sklearn.svm.nusvr method)": [[852, "sklearn.svm.NuSVR.set_params"]], "oneclasssvm (class in sklearn.svm)": [[853, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[853, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[853, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[853, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[853, "sklearn.svm.OneClassSVM.fit_predict"]], "get_params() (sklearn.svm.oneclasssvm method)": [[853, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[853, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[853, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[853, "sklearn.svm.OneClassSVM.score_samples"]], "set_params() (sklearn.svm.oneclasssvm method)": [[853, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[854, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[854, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[854, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[854, "sklearn.svm.SVC.fit"]], "get_params() (sklearn.svm.svc method)": [[854, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[854, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[854, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[854, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[854, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[854, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[854, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[854, "sklearn.svm.SVC.score"]], "set_params() (sklearn.svm.svc method)": [[854, "sklearn.svm.SVC.set_params"]], "svr (class in sklearn.svm)": [[855, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[855, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[855, "sklearn.svm.SVR.fit"]], "get_params() (sklearn.svm.svr method)": [[855, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[855, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[855, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[855, "sklearn.svm.SVR.score"]], "set_params() (sklearn.svm.svr method)": [[855, "sklearn.svm.SVR.set_params"]], "l1_min_c() (in module sklearn.svm)": [[856, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[857, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[857, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[857, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[857, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[857, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[857, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[857, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[857, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[857, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[857, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[857, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[857, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[857, "sklearn.tree.DecisionTreeClassifier.score"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[857, "sklearn.tree.DecisionTreeClassifier.set_params"]], "decisiontreeregressor (class in sklearn.tree)": [[858, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[858, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[858, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[858, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[858, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[858, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[858, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[858, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[858, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[858, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[858, "sklearn.tree.DecisionTreeRegressor.score"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[858, "sklearn.tree.DecisionTreeRegressor.set_params"]], "extratreeclassifier (class in sklearn.tree)": [[859, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[859, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[859, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[859, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[859, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[859, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[859, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[859, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[859, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[859, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[859, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[859, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[859, "sklearn.tree.ExtraTreeClassifier.score"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[859, "sklearn.tree.ExtraTreeClassifier.set_params"]], "extratreeregressor (class in sklearn.tree)": [[860, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[860, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[860, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[860, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[860, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[860, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[860, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[860, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[860, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[860, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[860, "sklearn.tree.ExtraTreeRegressor.score"]], "set_params() (sklearn.tree.extratreeregressor method)": [[860, "sklearn.tree.ExtraTreeRegressor.set_params"]], "export_graphviz() (in module sklearn.tree)": [[861, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[862, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[863, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[864, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[864, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[864, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[864, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[864, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[864, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[864, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[864, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[864, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[864, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[864, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[864, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[865, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[866, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[867, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[868, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[869, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[870, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[871, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[872, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[873, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[874, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[875, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[876, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[877, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[878, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[879, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[880, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[881, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[882, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[883, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[884, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[885, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[886, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[887, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[888, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[889, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[890, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[891, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[892, "sklearn.utils.indexable"]], "available_if() (in module sklearn.utils.metaestimators)": [[893, "sklearn.utils.metaestimators.available_if"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[894, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[895, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[896, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[897, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[898, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[898, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[898, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[898, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[898, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[899, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[900, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[901, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[902, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[903, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[904, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[905, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[906, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[907, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[908, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[909, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[910, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[911, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[912, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[913, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[914, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[915, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[916, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[917, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[918, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[919, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[920, "sklearn.utils.validation.has_fit_parameter"]]}})